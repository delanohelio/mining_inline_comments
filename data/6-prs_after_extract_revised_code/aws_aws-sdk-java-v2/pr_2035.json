{"pr_number": 2035, "pr_title": "DDB Enhanced:Added support to read Nested objects in attributesToProj\u2026", "pr_createdAt": "2020-09-14T04:58:46Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/2035", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNjY5Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488126692", "bodyText": "* .name(\"outerAttribute).addNested(\"innerAttributeLevel1).addNested(\"innerAttributeLevel2\").build();", "author": "bmaizels", "createdAt": "2020-09-14T18:09:50Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();", "originalCommit": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\ndeleted file mode 100644\nindex a313818b1b..0000000000\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\n+++ /dev/null\n\n@@ -1,140 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.awssdk.enhanced.dynamodb;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import software.amazon.awssdk.annotations.SdkPublicApi;\n-\n-/**\n- * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n- * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n- * <p>\n- * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n- * <p>\n- * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n- * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n- * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n- *\n- * <p>\n- * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n- * then it can be represented as :-\n- * {@code\n- * AttributeName myAttributeName = AttributeName.builder()\n- * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n- * }\n- */\n-@SdkPublicApi\n-public final class AttributeName {\n-\n-    private final String name;\n-    private final List<String> nestedAttributeNames;\n-\n-    private AttributeName(String name, List<String> nestedAttributeNames) {\n-        this.name = name;\n-        this.nestedAttributeNames = nestedAttributeNames != null\n-                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n-    }\n-\n-    /**\n-     * Construct a new AttributeNameBuilder.\n-     *\n-     * @return a new AttributeNameBuilder.\n-     */\n-    public static AttributeNameBuilder builder() {\n-        return new Builder();\n-    }\n-\n-    /**\n-     * @return Name of the attribute.\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * @return List of nested attributes , each entry in the list represent one level of nesting.\n-     */\n-    public List getNestedAttributeNames() {\n-        return nestedAttributeNames;\n-    }\n-\n-    /**\n-     * First Builder Step in charge of setting Attribute Name.\n-     * Next Builder available : addNestedAttribute.\n-     */\n-    public interface AttributeNameBuilder {\n-        BuildStep name(String attributeToProject);\n-    }\n-\n-    /**\n-     * This is the final step in charge of building the AttributeName Object.\n-     */\n-    public interface BuildStep {\n-        BuildStep addNested(String nestedAttributeName);\n-\n-        AttributeName build();\n-    }\n-\n-    /**\n-     * A builder for {@link AttributeName}\n-     * This builder follows BuilderStep pattern.\n-     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n-     */\n-    public static class Builder implements AttributeNameBuilder, BuildStep {\n-        private final List<String> nestedAttributeNames = new ArrayList<>();\n-        private String attributeToProject;\n-\n-        private Builder() {\n-\n-        }\n-\n-        /**\n-         * This is a must method to instantiate a AttributeName Object.\n-         * @param attributeName This is the name of the attribute as seen in the DDB table.\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep name(String attributeName) {\n-            this.attributeToProject = attributeName;\n-            return this;\n-        }\n-\n-        /**\n-         * Nested levels of Attributes can be added using this method.\n-         * Each call to this method represent the next level Attribute name.\n-         * For single level AttributeName AttributeName.builder().name(\"simpleAttribute\").build\n-         *  or for Nested attribute\n-         *  AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n-         * @param nestedAttributeName\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep addNested(String nestedAttributeName) {\n-            this.nestedAttributeNames.add(nestedAttributeName);\n-            return this;\n-        }\n-\n-        @Override\n-        public AttributeName build() {\n-            return new AttributeName(attributeToProject, nestedAttributeNames);\n-        }\n-\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNzI0Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488127243", "bodyText": "Ignoring the builder entirely, I think we should store this just as a single list. If it's a single element, then it's not nested, if there are multiple elements then it's nested.", "author": "bmaizels", "createdAt": "2020-09-14T18:10:44Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;", "originalCommit": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\ndeleted file mode 100644\nindex a313818b1b..0000000000\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\n+++ /dev/null\n\n@@ -1,140 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.awssdk.enhanced.dynamodb;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import software.amazon.awssdk.annotations.SdkPublicApi;\n-\n-/**\n- * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n- * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n- * <p>\n- * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n- * <p>\n- * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n- * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n- * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n- *\n- * <p>\n- * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n- * then it can be represented as :-\n- * {@code\n- * AttributeName myAttributeName = AttributeName.builder()\n- * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n- * }\n- */\n-@SdkPublicApi\n-public final class AttributeName {\n-\n-    private final String name;\n-    private final List<String> nestedAttributeNames;\n-\n-    private AttributeName(String name, List<String> nestedAttributeNames) {\n-        this.name = name;\n-        this.nestedAttributeNames = nestedAttributeNames != null\n-                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n-    }\n-\n-    /**\n-     * Construct a new AttributeNameBuilder.\n-     *\n-     * @return a new AttributeNameBuilder.\n-     */\n-    public static AttributeNameBuilder builder() {\n-        return new Builder();\n-    }\n-\n-    /**\n-     * @return Name of the attribute.\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * @return List of nested attributes , each entry in the list represent one level of nesting.\n-     */\n-    public List getNestedAttributeNames() {\n-        return nestedAttributeNames;\n-    }\n-\n-    /**\n-     * First Builder Step in charge of setting Attribute Name.\n-     * Next Builder available : addNestedAttribute.\n-     */\n-    public interface AttributeNameBuilder {\n-        BuildStep name(String attributeToProject);\n-    }\n-\n-    /**\n-     * This is the final step in charge of building the AttributeName Object.\n-     */\n-    public interface BuildStep {\n-        BuildStep addNested(String nestedAttributeName);\n-\n-        AttributeName build();\n-    }\n-\n-    /**\n-     * A builder for {@link AttributeName}\n-     * This builder follows BuilderStep pattern.\n-     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n-     */\n-    public static class Builder implements AttributeNameBuilder, BuildStep {\n-        private final List<String> nestedAttributeNames = new ArrayList<>();\n-        private String attributeToProject;\n-\n-        private Builder() {\n-\n-        }\n-\n-        /**\n-         * This is a must method to instantiate a AttributeName Object.\n-         * @param attributeName This is the name of the attribute as seen in the DDB table.\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep name(String attributeName) {\n-            this.attributeToProject = attributeName;\n-            return this;\n-        }\n-\n-        /**\n-         * Nested levels of Attributes can be added using this method.\n-         * Each call to this method represent the next level Attribute name.\n-         * For single level AttributeName AttributeName.builder().name(\"simpleAttribute\").build\n-         *  or for Nested attribute\n-         *  AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n-         * @param nestedAttributeName\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep addNested(String nestedAttributeName) {\n-            this.nestedAttributeNames.add(nestedAttributeName);\n-            return this;\n-        }\n-\n-        @Override\n-        public AttributeName build() {\n-            return new AttributeName(attributeToProject, nestedAttributeNames);\n-        }\n-\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNzc1Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488127756", "bodyText": "Why are you returning a raw-type list here?", "author": "bmaizels", "createdAt": "2020-09-14T18:11:37Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @return List of nested attributes , each entry in the list represent one level of nesting.\n+     */\n+    public List getNestedAttributeNames() {", "originalCommit": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\ndeleted file mode 100644\nindex a313818b1b..0000000000\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\n+++ /dev/null\n\n@@ -1,140 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.awssdk.enhanced.dynamodb;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import software.amazon.awssdk.annotations.SdkPublicApi;\n-\n-/**\n- * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n- * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n- * <p>\n- * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n- * <p>\n- * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n- * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n- * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n- *\n- * <p>\n- * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n- * then it can be represented as :-\n- * {@code\n- * AttributeName myAttributeName = AttributeName.builder()\n- * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n- * }\n- */\n-@SdkPublicApi\n-public final class AttributeName {\n-\n-    private final String name;\n-    private final List<String> nestedAttributeNames;\n-\n-    private AttributeName(String name, List<String> nestedAttributeNames) {\n-        this.name = name;\n-        this.nestedAttributeNames = nestedAttributeNames != null\n-                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n-    }\n-\n-    /**\n-     * Construct a new AttributeNameBuilder.\n-     *\n-     * @return a new AttributeNameBuilder.\n-     */\n-    public static AttributeNameBuilder builder() {\n-        return new Builder();\n-    }\n-\n-    /**\n-     * @return Name of the attribute.\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * @return List of nested attributes , each entry in the list represent one level of nesting.\n-     */\n-    public List getNestedAttributeNames() {\n-        return nestedAttributeNames;\n-    }\n-\n-    /**\n-     * First Builder Step in charge of setting Attribute Name.\n-     * Next Builder available : addNestedAttribute.\n-     */\n-    public interface AttributeNameBuilder {\n-        BuildStep name(String attributeToProject);\n-    }\n-\n-    /**\n-     * This is the final step in charge of building the AttributeName Object.\n-     */\n-    public interface BuildStep {\n-        BuildStep addNested(String nestedAttributeName);\n-\n-        AttributeName build();\n-    }\n-\n-    /**\n-     * A builder for {@link AttributeName}\n-     * This builder follows BuilderStep pattern.\n-     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n-     */\n-    public static class Builder implements AttributeNameBuilder, BuildStep {\n-        private final List<String> nestedAttributeNames = new ArrayList<>();\n-        private String attributeToProject;\n-\n-        private Builder() {\n-\n-        }\n-\n-        /**\n-         * This is a must method to instantiate a AttributeName Object.\n-         * @param attributeName This is the name of the attribute as seen in the DDB table.\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep name(String attributeName) {\n-            this.attributeToProject = attributeName;\n-            return this;\n-        }\n-\n-        /**\n-         * Nested levels of Attributes can be added using this method.\n-         * Each call to this method represent the next level Attribute name.\n-         * For single level AttributeName AttributeName.builder().name(\"simpleAttribute\").build\n-         *  or for Nested attribute\n-         *  AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n-         * @param nestedAttributeName\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep addNested(String nestedAttributeName) {\n-            this.nestedAttributeNames.add(nestedAttributeName);\n-            return this;\n-        }\n-\n-        @Override\n-        public AttributeName build() {\n-            return new AttributeName(attributeToProject, nestedAttributeNames);\n-        }\n-\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMDY1MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488130651", "bodyText": "We avoid this builder pattern, we think it creates more complexity and confusion than it solves. We should try and design a simple builder that intuitively works for both use cases. This may not be the best solution but whatever solution we come up with has to work for all the scenarios. E.g.:\n// All of these are equivalent\nAttributeName.builder().name(\"foo\").addNestedNames(\"bar\").build();\nAttributeName.builder().addNestedNames(\"foo\", bar\");\nAttributeName.builder().addNestedNames(\"foo\").addNestedNames(\"bar\");", "author": "bmaizels", "createdAt": "2020-09-14T18:16:44Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @return List of nested attributes , each entry in the list represent one level of nesting.\n+     */\n+    public List getNestedAttributeNames() {\n+        return nestedAttributeNames;\n+    }\n+\n+    /**\n+     * First Builder Step in charge of setting Attribute Name.\n+     * Next Builder available : addNestedAttribute.\n+     */\n+    public interface AttributeNameBuilder {\n+        BuildStep name(String attributeToProject);\n+    }\n+\n+    /**\n+     * This is the final step in charge of building the AttributeName Object.\n+     */\n+    public interface BuildStep {\n+        BuildStep addNested(String nestedAttributeName);\n+\n+        AttributeName build();\n+    }", "originalCommit": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\ndeleted file mode 100644\nindex a313818b1b..0000000000\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\n+++ /dev/null\n\n@@ -1,140 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.awssdk.enhanced.dynamodb;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import software.amazon.awssdk.annotations.SdkPublicApi;\n-\n-/**\n- * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n- * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n- * <p>\n- * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n- * <p>\n- * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n- * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n- * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n- *\n- * <p>\n- * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n- * then it can be represented as :-\n- * {@code\n- * AttributeName myAttributeName = AttributeName.builder()\n- * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n- * }\n- */\n-@SdkPublicApi\n-public final class AttributeName {\n-\n-    private final String name;\n-    private final List<String> nestedAttributeNames;\n-\n-    private AttributeName(String name, List<String> nestedAttributeNames) {\n-        this.name = name;\n-        this.nestedAttributeNames = nestedAttributeNames != null\n-                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n-    }\n-\n-    /**\n-     * Construct a new AttributeNameBuilder.\n-     *\n-     * @return a new AttributeNameBuilder.\n-     */\n-    public static AttributeNameBuilder builder() {\n-        return new Builder();\n-    }\n-\n-    /**\n-     * @return Name of the attribute.\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * @return List of nested attributes , each entry in the list represent one level of nesting.\n-     */\n-    public List getNestedAttributeNames() {\n-        return nestedAttributeNames;\n-    }\n-\n-    /**\n-     * First Builder Step in charge of setting Attribute Name.\n-     * Next Builder available : addNestedAttribute.\n-     */\n-    public interface AttributeNameBuilder {\n-        BuildStep name(String attributeToProject);\n-    }\n-\n-    /**\n-     * This is the final step in charge of building the AttributeName Object.\n-     */\n-    public interface BuildStep {\n-        BuildStep addNested(String nestedAttributeName);\n-\n-        AttributeName build();\n-    }\n-\n-    /**\n-     * A builder for {@link AttributeName}\n-     * This builder follows BuilderStep pattern.\n-     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n-     */\n-    public static class Builder implements AttributeNameBuilder, BuildStep {\n-        private final List<String> nestedAttributeNames = new ArrayList<>();\n-        private String attributeToProject;\n-\n-        private Builder() {\n-\n-        }\n-\n-        /**\n-         * This is a must method to instantiate a AttributeName Object.\n-         * @param attributeName This is the name of the attribute as seen in the DDB table.\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep name(String attributeName) {\n-            this.attributeToProject = attributeName;\n-            return this;\n-        }\n-\n-        /**\n-         * Nested levels of Attributes can be added using this method.\n-         * Each call to this method represent the next level Attribute name.\n-         * For single level AttributeName AttributeName.builder().name(\"simpleAttribute\").build\n-         *  or for Nested attribute\n-         *  AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n-         * @param nestedAttributeName\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep addNested(String nestedAttributeName) {\n-            this.nestedAttributeNames.add(nestedAttributeName);\n-            return this;\n-        }\n-\n-        @Override\n-        public AttributeName build() {\n-            return new AttributeName(attributeToProject, nestedAttributeNames);\n-        }\n-\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMTAwMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488131002", "bodyText": "Nit: remove this empty line.", "author": "bmaizels", "createdAt": "2020-09-14T18:17:24Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @return List of nested attributes , each entry in the list represent one level of nesting.\n+     */\n+    public List getNestedAttributeNames() {\n+        return nestedAttributeNames;\n+    }\n+\n+    /**\n+     * First Builder Step in charge of setting Attribute Name.\n+     * Next Builder available : addNestedAttribute.\n+     */\n+    public interface AttributeNameBuilder {\n+        BuildStep name(String attributeToProject);\n+    }\n+\n+    /**\n+     * This is the final step in charge of building the AttributeName Object.\n+     */\n+    public interface BuildStep {\n+        BuildStep addNested(String nestedAttributeName);\n+\n+        AttributeName build();\n+    }\n+\n+    /**\n+     * A builder for {@link AttributeName}\n+     * This builder follows BuilderStep pattern.\n+     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n+     */\n+    public static class Builder implements AttributeNameBuilder, BuildStep {\n+        private final List<String> nestedAttributeNames = new ArrayList<>();\n+        private String attributeToProject;\n+\n+        private Builder() {\n+", "originalCommit": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\ndeleted file mode 100644\nindex a313818b1b..0000000000\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\n+++ /dev/null\n\n@@ -1,140 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.awssdk.enhanced.dynamodb;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import software.amazon.awssdk.annotations.SdkPublicApi;\n-\n-/**\n- * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n- * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n- * <p>\n- * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n- * <p>\n- * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n- * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n- * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n- *\n- * <p>\n- * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n- * then it can be represented as :-\n- * {@code\n- * AttributeName myAttributeName = AttributeName.builder()\n- * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n- * }\n- */\n-@SdkPublicApi\n-public final class AttributeName {\n-\n-    private final String name;\n-    private final List<String> nestedAttributeNames;\n-\n-    private AttributeName(String name, List<String> nestedAttributeNames) {\n-        this.name = name;\n-        this.nestedAttributeNames = nestedAttributeNames != null\n-                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n-    }\n-\n-    /**\n-     * Construct a new AttributeNameBuilder.\n-     *\n-     * @return a new AttributeNameBuilder.\n-     */\n-    public static AttributeNameBuilder builder() {\n-        return new Builder();\n-    }\n-\n-    /**\n-     * @return Name of the attribute.\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * @return List of nested attributes , each entry in the list represent one level of nesting.\n-     */\n-    public List getNestedAttributeNames() {\n-        return nestedAttributeNames;\n-    }\n-\n-    /**\n-     * First Builder Step in charge of setting Attribute Name.\n-     * Next Builder available : addNestedAttribute.\n-     */\n-    public interface AttributeNameBuilder {\n-        BuildStep name(String attributeToProject);\n-    }\n-\n-    /**\n-     * This is the final step in charge of building the AttributeName Object.\n-     */\n-    public interface BuildStep {\n-        BuildStep addNested(String nestedAttributeName);\n-\n-        AttributeName build();\n-    }\n-\n-    /**\n-     * A builder for {@link AttributeName}\n-     * This builder follows BuilderStep pattern.\n-     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n-     */\n-    public static class Builder implements AttributeNameBuilder, BuildStep {\n-        private final List<String> nestedAttributeNames = new ArrayList<>();\n-        private String attributeToProject;\n-\n-        private Builder() {\n-\n-        }\n-\n-        /**\n-         * This is a must method to instantiate a AttributeName Object.\n-         * @param attributeName This is the name of the attribute as seen in the DDB table.\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep name(String attributeName) {\n-            this.attributeToProject = attributeName;\n-            return this;\n-        }\n-\n-        /**\n-         * Nested levels of Attributes can be added using this method.\n-         * Each call to this method represent the next level Attribute name.\n-         * For single level AttributeName AttributeName.builder().name(\"simpleAttribute\").build\n-         *  or for Nested attribute\n-         *  AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n-         * @param nestedAttributeName\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep addNested(String nestedAttributeName) {\n-            this.nestedAttributeNames.add(nestedAttributeName);\n-            return this;\n-        }\n-\n-        @Override\n-        public AttributeName build() {\n-            return new AttributeName(attributeToProject, nestedAttributeNames);\n-        }\n-\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMTY5NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488131695", "bodyText": "Our pattern is to initialize this to null like other parameters, and when they add something check if it's null and create a new ArrayList then if necessary. This also allows us to provide a setter method, although it's important when we let them set the whole list we always create our own new ArrayList to avoid mutation of the list outside of our control after object created :\npublic Builder nestedAttributeNames(List<String> nestedAttributeNames) { ... }", "author": "bmaizels", "createdAt": "2020-09-14T18:18:40Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @return List of nested attributes , each entry in the list represent one level of nesting.\n+     */\n+    public List getNestedAttributeNames() {\n+        return nestedAttributeNames;\n+    }\n+\n+    /**\n+     * First Builder Step in charge of setting Attribute Name.\n+     * Next Builder available : addNestedAttribute.\n+     */\n+    public interface AttributeNameBuilder {\n+        BuildStep name(String attributeToProject);\n+    }\n+\n+    /**\n+     * This is the final step in charge of building the AttributeName Object.\n+     */\n+    public interface BuildStep {\n+        BuildStep addNested(String nestedAttributeName);\n+\n+        AttributeName build();\n+    }\n+\n+    /**\n+     * A builder for {@link AttributeName}\n+     * This builder follows BuilderStep pattern.\n+     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n+     */\n+    public static class Builder implements AttributeNameBuilder, BuildStep {\n+        private final List<String> nestedAttributeNames = new ArrayList<>();", "originalCommit": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\ndeleted file mode 100644\nindex a313818b1b..0000000000\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\n+++ /dev/null\n\n@@ -1,140 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.awssdk.enhanced.dynamodb;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import software.amazon.awssdk.annotations.SdkPublicApi;\n-\n-/**\n- * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n- * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n- * <p>\n- * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n- * <p>\n- * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n- * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n- * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n- *\n- * <p>\n- * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n- * then it can be represented as :-\n- * {@code\n- * AttributeName myAttributeName = AttributeName.builder()\n- * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n- * }\n- */\n-@SdkPublicApi\n-public final class AttributeName {\n-\n-    private final String name;\n-    private final List<String> nestedAttributeNames;\n-\n-    private AttributeName(String name, List<String> nestedAttributeNames) {\n-        this.name = name;\n-        this.nestedAttributeNames = nestedAttributeNames != null\n-                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n-    }\n-\n-    /**\n-     * Construct a new AttributeNameBuilder.\n-     *\n-     * @return a new AttributeNameBuilder.\n-     */\n-    public static AttributeNameBuilder builder() {\n-        return new Builder();\n-    }\n-\n-    /**\n-     * @return Name of the attribute.\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * @return List of nested attributes , each entry in the list represent one level of nesting.\n-     */\n-    public List getNestedAttributeNames() {\n-        return nestedAttributeNames;\n-    }\n-\n-    /**\n-     * First Builder Step in charge of setting Attribute Name.\n-     * Next Builder available : addNestedAttribute.\n-     */\n-    public interface AttributeNameBuilder {\n-        BuildStep name(String attributeToProject);\n-    }\n-\n-    /**\n-     * This is the final step in charge of building the AttributeName Object.\n-     */\n-    public interface BuildStep {\n-        BuildStep addNested(String nestedAttributeName);\n-\n-        AttributeName build();\n-    }\n-\n-    /**\n-     * A builder for {@link AttributeName}\n-     * This builder follows BuilderStep pattern.\n-     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n-     */\n-    public static class Builder implements AttributeNameBuilder, BuildStep {\n-        private final List<String> nestedAttributeNames = new ArrayList<>();\n-        private String attributeToProject;\n-\n-        private Builder() {\n-\n-        }\n-\n-        /**\n-         * This is a must method to instantiate a AttributeName Object.\n-         * @param attributeName This is the name of the attribute as seen in the DDB table.\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep name(String attributeName) {\n-            this.attributeToProject = attributeName;\n-            return this;\n-        }\n-\n-        /**\n-         * Nested levels of Attributes can be added using this method.\n-         * Each call to this method represent the next level Attribute name.\n-         * For single level AttributeName AttributeName.builder().name(\"simpleAttribute\").build\n-         *  or for Nested attribute\n-         *  AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n-         * @param nestedAttributeName\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep addNested(String nestedAttributeName) {\n-            this.nestedAttributeNames.add(nestedAttributeName);\n-            return this;\n-        }\n-\n-        @Override\n-        public AttributeName build() {\n-            return new AttributeName(attributeToProject, nestedAttributeNames);\n-        }\n-\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMjE4NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488132184", "bodyText": "Minor: Our standard pattern is to have a constructor that takes an instance of a builder. Eg:\nprivate AttributeName(Builder b) { ... }", "author": "bmaizels", "createdAt": "2020-09-14T18:19:33Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {", "originalCommit": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\ndeleted file mode 100644\nindex a313818b1b..0000000000\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\n+++ /dev/null\n\n@@ -1,140 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.awssdk.enhanced.dynamodb;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import software.amazon.awssdk.annotations.SdkPublicApi;\n-\n-/**\n- * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n- * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n- * <p>\n- * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n- * <p>\n- * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n- * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n- * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n- *\n- * <p>\n- * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n- * then it can be represented as :-\n- * {@code\n- * AttributeName myAttributeName = AttributeName.builder()\n- * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n- * }\n- */\n-@SdkPublicApi\n-public final class AttributeName {\n-\n-    private final String name;\n-    private final List<String> nestedAttributeNames;\n-\n-    private AttributeName(String name, List<String> nestedAttributeNames) {\n-        this.name = name;\n-        this.nestedAttributeNames = nestedAttributeNames != null\n-                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n-    }\n-\n-    /**\n-     * Construct a new AttributeNameBuilder.\n-     *\n-     * @return a new AttributeNameBuilder.\n-     */\n-    public static AttributeNameBuilder builder() {\n-        return new Builder();\n-    }\n-\n-    /**\n-     * @return Name of the attribute.\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * @return List of nested attributes , each entry in the list represent one level of nesting.\n-     */\n-    public List getNestedAttributeNames() {\n-        return nestedAttributeNames;\n-    }\n-\n-    /**\n-     * First Builder Step in charge of setting Attribute Name.\n-     * Next Builder available : addNestedAttribute.\n-     */\n-    public interface AttributeNameBuilder {\n-        BuildStep name(String attributeToProject);\n-    }\n-\n-    /**\n-     * This is the final step in charge of building the AttributeName Object.\n-     */\n-    public interface BuildStep {\n-        BuildStep addNested(String nestedAttributeName);\n-\n-        AttributeName build();\n-    }\n-\n-    /**\n-     * A builder for {@link AttributeName}\n-     * This builder follows BuilderStep pattern.\n-     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n-     */\n-    public static class Builder implements AttributeNameBuilder, BuildStep {\n-        private final List<String> nestedAttributeNames = new ArrayList<>();\n-        private String attributeToProject;\n-\n-        private Builder() {\n-\n-        }\n-\n-        /**\n-         * This is a must method to instantiate a AttributeName Object.\n-         * @param attributeName This is the name of the attribute as seen in the DDB table.\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep name(String attributeName) {\n-            this.attributeToProject = attributeName;\n-            return this;\n-        }\n-\n-        /**\n-         * Nested levels of Attributes can be added using this method.\n-         * Each call to this method represent the next level Attribute name.\n-         * For single level AttributeName AttributeName.builder().name(\"simpleAttribute\").build\n-         *  or for Nested attribute\n-         *  AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n-         * @param nestedAttributeName\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep addNested(String nestedAttributeName) {\n-            this.nestedAttributeNames.add(nestedAttributeName);\n-            return this;\n-        }\n-\n-        @Override\n-        public AttributeName build() {\n-            return new AttributeName(attributeToProject, nestedAttributeNames);\n-        }\n-\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMjU2MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488132560", "bodyText": "We should add a toBuilder() method and override equals() and hashcode().", "author": "bmaizels", "createdAt": "2020-09-14T18:20:14Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n+ * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n+ * <p>\n+ * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n+ * <p>\n+ * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n+ * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n+ * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n+ *\n+ * <p>\n+ * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n+ * then it can be represented as :-\n+ * {@code\n+ * AttributeName myAttributeName = AttributeName.builder()\n+ * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n+ * }\n+ */\n+@SdkPublicApi\n+public final class AttributeName {\n+\n+    private final String name;\n+    private final List<String> nestedAttributeNames;\n+\n+    private AttributeName(String name, List<String> nestedAttributeNames) {\n+        this.name = name;\n+        this.nestedAttributeNames = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Construct a new AttributeNameBuilder.\n+     *\n+     * @return a new AttributeNameBuilder.\n+     */\n+    public static AttributeNameBuilder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * @return Name of the attribute.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+", "originalCommit": "6f8a14c19b422b5e9a757be504db4e1e5442bcd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\ndeleted file mode 100644\nindex a313818b1b..0000000000\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/AttributeName.java\n+++ /dev/null\n\n@@ -1,140 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.awssdk.enhanced.dynamodb;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import software.amazon.awssdk.annotations.SdkPublicApi;\n-\n-/**\n- * High-level representation of a DynamoDB 'attribute name' that can be used in various situations where the API requires\n- * or accepts an Attrbute Name. In addition various convenience methods are provided to help manipulate expressions.\n- * <p>\n- * At a minimum, an AttributeName must contain a string that represents the name of the Attribute.\n- * <p>\n- * Optionally, nested attribute names can be added with tokens using the addNestedAttributeName .\n- * Every call to addNestedAttributeName represent next level of Nesting Attribute.\n- * If we want to denote three level of Nesting attribute name then addNestedAttributeName should be called thrice.\n- *\n- * <p>\n- * Example, if we want to represent a two level nested attribute outerAttribute.innerAttributeLevel1.innerAttributeLevel2\n- * then it can be represented as :-\n- * {@code\n- * AttributeName myAttributeName = AttributeName.builder()\n- * .name(\"outerAttribute).addNested(\"innerAttributeLevel1).nestedAttributeName(\"innerAttributeLevel2\").build();\n- * }\n- */\n-@SdkPublicApi\n-public final class AttributeName {\n-\n-    private final String name;\n-    private final List<String> nestedAttributeNames;\n-\n-    private AttributeName(String name, List<String> nestedAttributeNames) {\n-        this.name = name;\n-        this.nestedAttributeNames = nestedAttributeNames != null\n-                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n-    }\n-\n-    /**\n-     * Construct a new AttributeNameBuilder.\n-     *\n-     * @return a new AttributeNameBuilder.\n-     */\n-    public static AttributeNameBuilder builder() {\n-        return new Builder();\n-    }\n-\n-    /**\n-     * @return Name of the attribute.\n-     */\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * @return List of nested attributes , each entry in the list represent one level of nesting.\n-     */\n-    public List getNestedAttributeNames() {\n-        return nestedAttributeNames;\n-    }\n-\n-    /**\n-     * First Builder Step in charge of setting Attribute Name.\n-     * Next Builder available : addNestedAttribute.\n-     */\n-    public interface AttributeNameBuilder {\n-        BuildStep name(String attributeToProject);\n-    }\n-\n-    /**\n-     * This is the final step in charge of building the AttributeName Object.\n-     */\n-    public interface BuildStep {\n-        BuildStep addNested(String nestedAttributeName);\n-\n-        AttributeName build();\n-    }\n-\n-    /**\n-     * A builder for {@link AttributeName}\n-     * This builder follows BuilderStep pattern.\n-     * The Attribute Name always comes first followed by optional Nested Attribute Name.\n-     */\n-    public static class Builder implements AttributeNameBuilder, BuildStep {\n-        private final List<String> nestedAttributeNames = new ArrayList<>();\n-        private String attributeToProject;\n-\n-        private Builder() {\n-\n-        }\n-\n-        /**\n-         * This is a must method to instantiate a AttributeName Object.\n-         * @param attributeName This is the name of the attribute as seen in the DDB table.\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep name(String attributeName) {\n-            this.attributeToProject = attributeName;\n-            return this;\n-        }\n-\n-        /**\n-         * Nested levels of Attributes can be added using this method.\n-         * Each call to this method represent the next level Attribute name.\n-         * For single level AttributeName AttributeName.builder().name(\"simpleAttribute\").build\n-         *  or for Nested attribute\n-         *  AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n-         * @param nestedAttributeName\n-         * @return Returns a reference to this object so that method calls can be chained together.\n-         */\n-        @Override\n-        public BuildStep addNested(String nestedAttributeName) {\n-            this.nestedAttributeNames.add(nestedAttributeName);\n-            return this;\n-        }\n-\n-        @Override\n-        public AttributeName build() {\n-            return new AttributeName(attributeToProject, nestedAttributeNames);\n-        }\n-\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNzc0MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488137740", "bodyText": "My opinion is that we should deprecate the List and just have a List. That will simplify our behavioral logic around this.", "author": "bmaizels", "createdAt": "2020-09-14T18:29:27Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -47,6 +48,7 @@\n     private final Boolean consistentRead;\n     private final Expression filterExpression;\n     private final List<String> attributesToProject;\n+    private final List<AttributeName> attributeNamesToProject;", "originalCommit": "67a30b134fc2ddae7bf22202ef99a73b723f448c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex fd0ae16cad..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -47,8 +49,7 @@ public final class QueryEnhancedRequest {\n     private final Integer limit;\n     private final Boolean consistentRead;\n     private final Expression filterExpression;\n-    private final List<String> attributesToProject;\n-    private final List<AttributeName> attributeNamesToProject;\n+    private final List<NestedAttributeName> attributesToProject;\n \n     private QueryEnhancedRequest(Builder builder) {\n         this.queryConditional = builder.queryConditional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzOTE1Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488139152", "bodyText": "Can we talk more offline about the design of this.", "author": "bmaizels", "createdAt": "2020-09-14T18:32:00Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,6 +366,92 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the attributeNames to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * This method takes arguments in form of AttributeName which supports representing nested attributes.\n+\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributeNameToProject\n+         *        A collection of the attributes names to be retrieved from the database.\n+         *        Nested levels of Attributes can be added using AttributeName class.\n+         *        AttributeName.builder() can be used to created AttributeNames.\n+         *        AttributeName.builder().name(\"simpleAttribute\").build\n+         *        or for Nested attribute\n+         *        AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributeNameToProject(Collection<AttributeName> attributeNameToProject) {", "originalCommit": "67a30b134fc2ddae7bf22202ef99a73b723f448c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex fd0ae16cad..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -348,107 +353,85 @@ public final class QueryEnhancedRequest {\n          * <p>\n          * Adds a single attribute name to be retrieved from the database. This attribute can include\n          * scalars, sets, or elements of a JSON document.\n+         * If there are nested attributes then addNestedAttributesToProject API should be used.\n          * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n-         * @param attributeToProject\n-         *        An additional single attribute name to be retrieved from the database.\n+         *\n+         * @param attributeToProject An additional single attribute name to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addAttributeToProject(String attributeToProject) {\n-            if (attributesToProject == null) {\n-                attributesToProject = new ArrayList<>();\n+            if (attributeToProject != null) {\n+                addNestedAttributesToProject(NestedAttributeName.create(attributeToProject));\n             }\n-            attributesToProject.add(attributeToProject);\n             return this;\n         }\n \n         /**\n          * <p>\n-         * Sets a collection of the attributeNames to be retrieved from the database. These attributes can include\n+         * Adds a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n          * scalars, sets, or elements of a JSON document.\n-         * This method takes arguments in form of AttributeName which supports representing nested attributes.\n-\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n-         * @param attributeNameToProject\n-         *        A collection of the attributes names to be retrieved from the database.\n-         *        Nested levels of Attributes can be added using AttributeName class.\n-         *        AttributeName.builder() can be used to created AttributeNames.\n-         *        AttributeName.builder().name(\"simpleAttribute\").build\n-         *        or for Nested attribute\n-         *        AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Enhanced request NestedAttributeNames\n+         * should be created to project Nested Attribute name at various levels.\n+         * This method will add new attributes to project to the existing list of attributes to project stored by this builder.\n+         *\n+         * @param nestedAttributeNames A collection of the attributes names to be retrieved from the database.\n+         *                             Nested levels of Attributes can be added using NestedAttributeName class.\n+         *                             Refer {@link NestedAttributeName}.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n-        public Builder attributeNameToProject(Collection<AttributeName> attributeNameToProject) {\n-            this.attributeNamesToProject = attributeNameToProject != null ? new ArrayList<>(attributeNameToProject) : null;\n+        public Builder addNestedAttributesToProject(Collection<NestedAttributeName> nestedAttributeNames) {\n+            if (nestedAttributeNames != null) {\n+                Validate.noNullElements(nestedAttributeNames,\n+                        \"nestedAttributeNames list must not contain null elements\");\n+                if (attributesToProject == null) {\n+                    this.attributesToProject = new ArrayList<>(nestedAttributeNames);\n+                } else {\n+                    this.attributesToProject.addAll(nestedAttributeNames);\n+                }\n+            }\n             return this;\n         }\n \n         /**\n          * <p>\n-         * Sets one or more attribute names to be retrieved from the database. These attributes can include\n+         * Adds one or more attribute names to be retrieved from the database. These attributes can include\n          * scalars, sets, or elements of a JSON document.\n-         * This method takes arguments in form of AttributeName which supports representing nested attributes.\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Enhanced request NestedAttributeNames\n+         * should be created to project Nested Attribute name at various levels.\n+         * This method will add new attributes to project to the existing list of attributes to project stored\n+         * by this builder.\n          * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n-         * @param attributeNameToProject\n-         *        One or more  attributesNames to be retrieved from the database.\n-         *        Nested levels of Attributes can be added using AttributeName class.\n-         *        AttributeName.builder() can be used to created AttributeNames.\n-         *        AttributeName.builder().name(\"simpleAttribute\").build\n-         *        or for Nested attribute\n-         *        AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n+         *\n+         * @param nestedAttributeNames One or more  attributesNames to be retrieved from the database.\n+         *                             Nested levels of Attributes can be added using NestedAttributeName class.\n+         *                             Refer {@link NestedAttributeName}.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n-        public Builder attributeNameToProject(AttributeName... attributeNameToProject) {\n-            return attributeNameToProject(Arrays.asList(attributeNameToProject));\n+        public Builder addNestedAttributesToProject(NestedAttributeName... nestedAttributeNames) {\n+            return addNestedAttributesToProject(Arrays.asList(nestedAttributeNames));\n         }\n \n         /**\n          * <p>\n-         * Adds a single attribute name to be retrieved from the database. This attribute can include\n+         * Adds a single NestedAttributeName to be retrieved from the database. This attribute can include\n          * scalars, sets, or elements of a JSON document.\n-         * This method takes arguments in form of AttributeName which supports representing nested attributes.\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * This method will add new attributes to project to the existing list of attributes to project stored by this builder.\n          * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n-         * @param attributeNameToProject\n-         *        An additional single attribute name to be retrieved from the database.\n-         *        Nested levels of Attributes can be added using AttributeName class.\n-         *        AttributeName.builder() can be used to created AttributeNames.\n-         *        AttributeName.builder().name(\"simpleAttribute\").build\n-         *        or for Nested attribute\n-         *        AttributeName.builder().name(\"outerField\").addNested(\"innerLevel1\")..addNested(\"innerLevel2\")build();\n+         *\n+         * @param nestedAttributeName An additional single attribute name to be retrieved from the database.\n+         *                            Refer {@link NestedAttributeName}.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n-        public Builder addAttributeNameToProject(AttributeName attributeNameToProject) {\n-            if (this.attributeNamesToProject == null) {\n-                this.attributeNamesToProject = new ArrayList<>();\n+        public Builder addNestedAttributeToProject(NestedAttributeName nestedAttributeName) {\n+            if (nestedAttributeName != null) {\n+                addNestedAttributesToProject(Arrays.asList(nestedAttributeName));\n             }\n-            this.attributeNamesToProject.add(attributeNameToProject);\n             return this;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDQ3Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r488140476", "bodyText": "Can we figure out a way not to have this class at all. Seems like these methods can be divided into two groups, one that acts on a List of AttributeNames and one that acts on a single AttributeName. Maybe we can create two dynamic classes that are constructed from those respective entities and provide these methods.", "author": "bmaizels", "createdAt": "2020-09-14T18:34:32Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/utils/OperationUtils.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal.operations.utils;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeName;\n+\n+/**\n+ * Contains Util methods used in Operations.\n+ */\n+@SdkInternalApi\n+public final class OperationUtils {", "originalCommit": "67a30b134fc2ddae7bf22202ef99a73b723f448c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/utils/OperationUtils.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/utils/OperationUtils.java\ndeleted file mode 100644\nindex 5f6a0f604e..0000000000\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/utils/OperationUtils.java\n+++ /dev/null\n\n@@ -1,121 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.awssdk.enhanced.dynamodb.internal.operations.utils;\n-\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.function.UnaryOperator;\n-import java.util.stream.Collectors;\n-import software.amazon.awssdk.annotations.SdkInternalApi;\n-import software.amazon.awssdk.enhanced.dynamodb.AttributeName;\n-\n-/**\n- * Contains Util methods used in Operations.\n- */\n-@SdkInternalApi\n-public final class OperationUtils {\n-\n-    private static final String AMZN_MAPPED = \"#AMZN_MAPPED_\";\n-    private static final UnaryOperator<String> PROJECTION_EXPRESSION_KEY_MAPPER = k -> AMZN_MAPPED + cleanAttributeName(k);\n-\n-    private OperationUtils() {\n-    }\n-\n-    /**\n-     * This methods loops through each of the attributeNames in a given input List.\n-     * Create Map Key Value for those attributes which has valid ExpressionName maps.\n-     *\n-     * @param attributeNamesToProject List of attributeNamesToProject.\n-     * @return A Map which is Expression Name map for a given list of AttributeNams.\n-     */\n-    public static Map<String, String> convertToExpressionMap(List<AttributeName> attributeNamesToProject) {\n-        Map<String, String> attributeNameMap = new LinkedHashMap<>();\n-        if (attributeNamesToProject != null) {\n-            attributeNamesToProject.stream().forEach(attribs -> convertToExpressionNameMap(attribs)\n-                    .ifPresent(attributeNameMap::putAll));\n-        }\n-        return attributeNameMap;\n-    }\n-\n-\n-    /**\n-     * This method takes attributeNameList as input and converts it to COMMA separated String Expression.\n-     *\n-     * @param attributeNameList List of Attribute Names.\n-     * @return COMMA separated String Expression representation for the the given attributeNameList.\n-     */\n-    public static Optional<String> convertToProjectionExpression(final List<AttributeName> attributeNameList) {\n-        List<String> expressionList = new ArrayList<>();\n-        attributeNameList.forEach(attributeName -> convertToNameExpression(attributeName)\n-                .ifPresent(expressionList::add));\n-        String joinedExpression = String.join(\",\", expressionList.stream()\n-                .distinct().collect(Collectors.toList()));\n-        return Optional.ofNullable(joinedExpression.isEmpty() ? null : joinedExpression);\n-    }\n-\n-\n-    /**\n-     * This method converts a given AttributeName to Expression Name Map.\n-     * Where Key holds the Projection Expression Names and value corresoponds to the expression/substitution value.\n-     *\n-     * @param attributeName Instance of AttributeName that needs to be converted to Expression map.\n-     * @return Expression Name map representation which is used in DDB query for Projection Expression.\n-     * Returns Empty values if attributeName doesnot have a valid Name.\n-     */\n-    public static Optional<Map<String, String>> convertToExpressionNameMap(AttributeName attributeName) {\n-        String name = attributeName.getName();\n-        List<String> nestedAttributeNames = attributeName.getNestedAttributeNames();\n-        if (name != null) {\n-            Map<String, String> resultNameMap = new LinkedHashMap<>();\n-            resultNameMap.put(PROJECTION_EXPRESSION_KEY_MAPPER.apply(name), name);\n-            if (nestedAttributeNames != null) {\n-                nestedAttributeNames.stream().filter(item -> Objects.nonNull(item) && !item.isEmpty())\n-                        .forEach(nestedAttribute -> resultNameMap\n-                                .put(PROJECTION_EXPRESSION_KEY_MAPPER.apply(nestedAttribute), nestedAttribute));\n-            }\n-            return Optional.of(resultNameMap);\n-        }\n-        return Optional.empty();\n-    }\n-\n-    /**\n-     * Return Optional Comma Separated Expression representation for a given attributeName.\n-     *\n-     * @param attributeName Instance of AttributeName that needs to be converted to ProjectionExpression.\n-     * @return Comma Separated Projection Expression. where each comma separated values represents the nesting  attributes.\n-     */\n-    public static Optional<String> convertToNameExpression(AttributeName attributeName) {\n-        String name = attributeName.getName();\n-        List<String> nestedAttributes = attributeName.getNestedAttributeNames();\n-        if (name != null) {\n-            List<String> hashSeparatedNestedStringList =\n-                    new ArrayList<>(Arrays.asList(PROJECTION_EXPRESSION_KEY_MAPPER.apply(name)));\n-            if (nestedAttributes != null) {\n-                nestedAttributes.stream().filter(Objects::nonNull)\n-                        .forEach(hashSeparatedNestedStringList::add);\n-            }\n-            return Optional.of(String.join(\".\".concat(AMZN_MAPPED), hashSeparatedNestedStringList));\n-        }\n-        return Optional.empty();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5MzkzMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489593931", "bodyText": "Can we give an example here to put it in context.", "author": "bmaizels", "createdAt": "2020-09-16T17:11:01Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NTgxMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489595811", "bodyText": "Can we change this to: Creates a NestedAttributeName with a single element, which is effectively just a simple attribute name without nesting.", "author": "bmaizels", "createdAt": "2020-09-16T17:14:17Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NzgwNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489597805", "bodyText": "I couldn't understand this sentence. Can we change it to: Creates a NestedAttributeName from a list of elements that compose the full path of the nested attribute.", "author": "bmaizels", "createdAt": "2020-09-16T17:17:45Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5OTA3NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489599075", "bodyText": "Can we change this to:  Creates a NestedAttributeName from a list of elements that compose the full path of the nested attribute.", "author": "bmaizels", "createdAt": "2020-09-16T17:20:01Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5OTMxMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489599311", "bodyText": "Collection is not appropriate for this API as order matters. We should change it to List.", "author": "bmaizels", "createdAt": "2020-09-16T17:20:26Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMDIxNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489600217", "bodyText": "Nit: space should be after comma, not before", "author": "bmaizels", "createdAt": "2020-09-16T17:22:03Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMDYxOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489600619", "bodyText": "Can we change 'Each of the index...' to 'Each element in the list...'", "author": "bmaizels", "createdAt": "2020-09-16T17:22:35Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMTIzNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489601237", "bodyText": "Its implied, but I prefer to be explicit with code like this and would change this to private List<String> elements = null;", "author": "bmaizels", "createdAt": "2020-09-16T17:23:42Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMjc4NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489602785", "bodyText": "Collection is not appropriate because order matters. Can we change this to List.", "author": "bmaizels", "createdAt": "2020-09-16T17:26:23Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMzAwMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489603003", "bodyText": "\"Adds a list of elements to the nested attribute name.\"", "author": "bmaizels", "createdAt": "2020-09-16T17:26:47Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMzUxMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489603512", "bodyText": "\"Subsequent calls to this method will append the new elements to the end of the existing chain of elements creating new levels of nesting.\"", "author": "bmaizels", "createdAt": "2020-09-16T17:27:40Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMzc4MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489603780", "bodyText": "\"List of strings...\"", "author": "bmaizels", "createdAt": "2020-09-16T17:28:10Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNTAyMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489605022", "bodyText": "\"Sets the elements that compose a nested attribute name. Will overwrite any existing elements stored by this builder.\"", "author": "bmaizels", "createdAt": "2020-09-16T17:30:23Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNTc4Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489605782", "bodyText": "* <b>Example:</b>builder().elements(\"foo\",\"bar\") will set the elements\n         * to represent a nested attribute name of 'foo.bar'", "author": "bmaizels", "createdAt": "2020-09-16T17:31:46Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNjM1Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489606353", "bodyText": "\"a list of strings that correspond to the elements in a nested attribute name\"", "author": "bmaizels", "createdAt": "2020-09-16T17:32:47Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNjgwMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489606801", "bodyText": "Can we change Collection to List", "author": "bmaizels", "createdAt": "2020-09-16T17:33:41Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(String... elements) {\n+            this.elements = new ArrayList<>(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets elements of NestedAttributeName with Collection of Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(Arrays.asList(\"foo\",\"bar\")) will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(Collection<String> elements) {", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNjk0Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489606942", "bodyText": "\"Sets the elements that compose a nested attribute name. Will overwrite any existing elements stored by this builder.\"", "author": "bmaizels", "createdAt": "2020-09-16T17:33:58Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(String... elements) {\n+            this.elements = new ArrayList<>(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets elements of NestedAttributeName with Collection of Strings.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNzIxOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489607218", "bodyText": "\"a list of strings that correspond to the elements in a nested attribute name\"", "author": "bmaizels", "createdAt": "2020-09-16T17:34:31Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(String... elements) {\n+            this.elements = new ArrayList<>(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets elements of NestedAttributeName with Collection of Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(Arrays.asList(\"foo\",\"bar\")) will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwNzM4NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489607384", "bodyText": "This makes no sense to me?", "author": "bmaizels", "createdAt": "2020-09-16T17:34:48Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element, single element corresponds just attribute name.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\") will create NestedAttributeName corresponding to Attribute foo.\n+     *\n+     * @param element Attribute Name. Single String represent just the attribute name with no further nested attributes.\n+     * @return NestedAttributeName with attribute name as specified element.\n+     */\n+    public static NestedAttributeName create(String element) {\n+        return new Builder().addElement(element).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with a single element with elements.This can be varargs of String.\n+     * <p>\n+     * <b>Example:</b>create(\"foo\", \"bar\") will create NestedAttributeName which represents foo.bar nested attribute.\n+     *\n+     * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements var args.\n+     */\n+    public static NestedAttributeName create(String... elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Creates NestedAttributeName with Collections of String. This can be a List, Scalar or any Collection of Attribute names.\n+     * <p>\n+     * <b>Example:</b>create(Arrays.asList(\"foo\", \"bar\")) will create NestedAttributeName\n+     * which represents foo.bar nested attribute.\n+     *\n+     * @param elements Collection of Nested Attribute Names. Each of strings in Collection represent the nested attribute name\n+     *                 at subsequent levels.\n+     * @return NestedAttributeName with Nested attribute name set as specified in elements Collections.\n+     */\n+    public static NestedAttributeName create(Collection<String> elements) {\n+        return new Builder().elements(elements).build();\n+    }\n+\n+    /**\n+     * Create a builder that can be used to create a {@link NestedAttributeName}.\n+     *\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Gets elements of NestedAttributeName in the form of List. Each of the index corresponds\n+     * to the subsequent Nested Attribute name.\n+     *\n+     * @return List of nested attributes ,each entry in the list represent one level of nesting.\n+     * Example, A Two level Attribute name foo.bar will be represented as  [\"foo\", \"bar\"]\n+     */\n+    public List<String> elements() {\n+        return elements;\n+    }\n+\n+    /**\n+     * Returns a builder initialized with all existing values on the request object.\n+     */\n+    public Builder toBuilder() {\n+        return builder().elements(elements);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        NestedAttributeName that = (NestedAttributeName) o;\n+\n+        return elements != null\n+                ? elements.equals(that.elements) : that.elements == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return elements != null ? elements.hashCode() : 0;\n+    }\n+\n+    /**\n+     * A builder for {@link NestedAttributeName}.\n+     */\n+    public static class Builder {\n+        private List<String> elements;\n+\n+        private Builder() {\n+\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElement(\"foo\").addElement(\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param element Attribute Name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElement(String element) {\n+            if (elements == null) {\n+                elements = new ArrayList<>();\n+            }\n+            elements.add(element);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a single element of NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(\"foo\",\"bar\")  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Nested Attribute Names. Each of strings in varargs represent the nested attribute name\n+         *                 at subsequent levels.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(String... elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Adds a Collection of elements to NestedAttributeName.\n+         * Subsequent calls to this method can add attribute Names at subsequent nesting levels.\n+         * <p>\n+         * <b>Example:</b>builder().addElements(Arrays.asList(\"foo\",\"bar\"))  will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addElements(Collection<String> elements) {\n+            if (this.elements == null) {\n+                this.elements = new ArrayList<>();\n+            }\n+            this.elements.addAll(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Set elements of NestedAttributeName with varargs Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(\"foo\",\"bar\") will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Var of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(String... elements) {\n+            this.elements = new ArrayList<>(Arrays.asList(elements));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets elements of NestedAttributeName with Collection of Strings.\n+         * <p>\n+         * <b>Example:</b>builder().elements(Arrays.asList(\"foo\",\"bar\")) will add elements in NestedAttributeName\n+         * which represent a Nested Attribute Name foo.bar\n+         * @param elements Collection of Strings where each string corresponds to subsequent nesting attribute name.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder elements(Collection<String> elements) {\n+            this.elements = new ArrayList<>(elements);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the value of the Build property for this object.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex f531ea58fc..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -17,16 +17,25 @@ package software.amazon.awssdk.enhanced.dynamodb;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n  * or accepts an Nested Attribute Name.\n  * Simple Attribute Name can be represented by passing just the name of the attribute.\n  * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by DynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n  */\n @SdkPublicApi\n public final class NestedAttributeName {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDAzNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489610035", "bodyText": "Let's just remove these javadocs from the internal class for now, then I don't have to comment on them :)", "author": "bmaizels", "createdAt": "2020-09-16T17:39:26Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.NestedAttributeName;\n+\n+/**\n+ * Wrapper method to get Projection Expression Name map and Projection Expressions from NestedAttributeNames.\n+ */\n+@SdkInternalApi\n+public class ProjectionExpressionConvertor {\n+\n+    private static final String AMZN_MAPPED = \"#AMZN_MAPPED_\";\n+    private static final UnaryOperator<String> PROJECTION_EXPRESSION_KEY_MAPPER = k -> AMZN_MAPPED + cleanAttributeName(k);\n+    private final List<NestedAttributeName> nestedAttributeNames;\n+\n+    private ProjectionExpressionConvertor(List<NestedAttributeName> nestedAttributeNames) {\n+        this.nestedAttributeNames = nestedAttributeNames;\n+    }\n+\n+    /**\n+     * @param nestedAttributeNames List of nestedAttributeNames for which we ned need conversions.\n+     * @return Instance of ProjectionExpressionConvertor.\n+     */", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java\nindex addcfa8219..f5d03ac9fd 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java\n\n@@ -43,54 +43,24 @@ public class ProjectionExpressionConvertor {\n         this.nestedAttributeNames = nestedAttributeNames;\n     }\n \n-    /**\n-     * @param nestedAttributeNames List of nestedAttributeNames for which we ned need conversions.\n-     * @return Instance of ProjectionExpressionConvertor.\n-     */\n     public static ProjectionExpressionConvertor create(List<NestedAttributeName> nestedAttributeNames) {\n         return new ProjectionExpressionConvertor(nestedAttributeNames);\n     }\n-\n-    /**\n-     * @param nestedAttributeName Individual NestedAttributeName\n-     * @return Instance of ProjectionExpressionConvertor.\n-     */\n-    public static ProjectionExpressionConvertor create(NestedAttributeName nestedAttributeName) {\n-        List<NestedAttributeName> attributeNameList = new ArrayList<>();\n-        attributeNameList.add(nestedAttributeName);\n-        return new ProjectionExpressionConvertor(attributeNameList);\n-    }\n-\n-    /**\n-     * This method converts a given NestedAttributeName to Expression Name Map.\n-     * Where Key holds the Projection Expression Name and value corresponds to the expression/substitution value.\n-     *\n-     * @param attributeName Instance of NestedAttributeName that needs to be converted to Expression map.\n-     * @return Expression Name map representation which is used in DDB query for Projection Expression.\n-     * Returns Empty values if attributeName doesnot have a valid Name.\n-     */\n+    \n     private static Optional<Map<String, String>> convertToExpressionNameMap(NestedAttributeName attributeName) {\n         List<String> nestedAttributeNames = attributeName.elements();\n         if (nestedAttributeNames != null) {\n             Map<String, String> resultNameMap = new LinkedHashMap<>();\n-            nestedAttributeNames.stream().filter(Objects::nonNull)\n-                    .forEach(nestedAttribute ->\n+            nestedAttributeNames.stream().forEach(nestedAttribute ->\n                             resultNameMap.put(PROJECTION_EXPRESSION_KEY_MAPPER.apply(nestedAttribute), nestedAttribute));\n             return Optional.of(resultNameMap);\n         }\n         return Optional.empty();\n     }\n \n-    /**\n-     * Converts given nestedAttributeName to Optional Comma Separated Expression representation for a given nestedAttributeName.\n-     *\n-     * @param nestedAttributeName Instance of NestedAttributeName that needs to be converted to ProjectionExpression.\n-     * @return Comma Separated Projection Expression where each comma separated values represents the nesting  attributes.\n-     */\n     private static Optional<String> convertToNameExpression(NestedAttributeName nestedAttributeName) {\n \n-        String name = nestedAttributeName.elements().stream()\n-                .filter(Objects::nonNull).findFirst().orElse(null);\n+        String name = nestedAttributeName.elements().stream().findFirst().orElse(null);\n \n         List<String> nestedAttributes = null;\n         if (nestedAttributeName.elements().size() > 1) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDMzMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489610332", "bodyText": "Is this constructor really necessary?", "author": "bmaizels", "createdAt": "2020-09-16T17:39:59Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.internal;\n+\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.NestedAttributeName;\n+\n+/**\n+ * Wrapper method to get Projection Expression Name map and Projection Expressions from NestedAttributeNames.\n+ */\n+@SdkInternalApi\n+public class ProjectionExpressionConvertor {\n+\n+    private static final String AMZN_MAPPED = \"#AMZN_MAPPED_\";\n+    private static final UnaryOperator<String> PROJECTION_EXPRESSION_KEY_MAPPER = k -> AMZN_MAPPED + cleanAttributeName(k);\n+    private final List<NestedAttributeName> nestedAttributeNames;\n+\n+    private ProjectionExpressionConvertor(List<NestedAttributeName> nestedAttributeNames) {\n+        this.nestedAttributeNames = nestedAttributeNames;\n+    }\n+\n+    /**\n+     * @param nestedAttributeNames List of nestedAttributeNames for which we ned need conversions.\n+     * @return Instance of ProjectionExpressionConvertor.\n+     */\n+    public static ProjectionExpressionConvertor create(List<NestedAttributeName> nestedAttributeNames) {\n+        return new ProjectionExpressionConvertor(nestedAttributeNames);\n+    }\n+\n+    /**\n+     * @param nestedAttributeName Individual NestedAttributeName\n+     * @return Instance of ProjectionExpressionConvertor.\n+     */\n+    public static ProjectionExpressionConvertor create(NestedAttributeName nestedAttributeName) {", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2ODM0NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r490768344", "bodyText": "removed", "author": "joviegas", "createdAt": "2020-09-18T07:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java\nindex addcfa8219..f5d03ac9fd 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/ProjectionExpressionConvertor.java\n\n@@ -43,54 +43,24 @@ public class ProjectionExpressionConvertor {\n         this.nestedAttributeNames = nestedAttributeNames;\n     }\n \n-    /**\n-     * @param nestedAttributeNames List of nestedAttributeNames for which we ned need conversions.\n-     * @return Instance of ProjectionExpressionConvertor.\n-     */\n     public static ProjectionExpressionConvertor create(List<NestedAttributeName> nestedAttributeNames) {\n         return new ProjectionExpressionConvertor(nestedAttributeNames);\n     }\n-\n-    /**\n-     * @param nestedAttributeName Individual NestedAttributeName\n-     * @return Instance of ProjectionExpressionConvertor.\n-     */\n-    public static ProjectionExpressionConvertor create(NestedAttributeName nestedAttributeName) {\n-        List<NestedAttributeName> attributeNameList = new ArrayList<>();\n-        attributeNameList.add(nestedAttributeName);\n-        return new ProjectionExpressionConvertor(attributeNameList);\n-    }\n-\n-    /**\n-     * This method converts a given NestedAttributeName to Expression Name Map.\n-     * Where Key holds the Projection Expression Name and value corresponds to the expression/substitution value.\n-     *\n-     * @param attributeName Instance of NestedAttributeName that needs to be converted to Expression map.\n-     * @return Expression Name map representation which is used in DDB query for Projection Expression.\n-     * Returns Empty values if attributeName doesnot have a valid Name.\n-     */\n+    \n     private static Optional<Map<String, String>> convertToExpressionNameMap(NestedAttributeName attributeName) {\n         List<String> nestedAttributeNames = attributeName.elements();\n         if (nestedAttributeNames != null) {\n             Map<String, String> resultNameMap = new LinkedHashMap<>();\n-            nestedAttributeNames.stream().filter(Objects::nonNull)\n-                    .forEach(nestedAttribute ->\n+            nestedAttributeNames.stream().forEach(nestedAttribute ->\n                             resultNameMap.put(PROJECTION_EXPRESSION_KEY_MAPPER.apply(nestedAttribute), nestedAttribute));\n             return Optional.of(resultNameMap);\n         }\n         return Optional.empty();\n     }\n \n-    /**\n-     * Converts given nestedAttributeName to Optional Comma Separated Expression representation for a given nestedAttributeName.\n-     *\n-     * @param nestedAttributeName Instance of NestedAttributeName that needs to be converted to ProjectionExpression.\n-     * @return Comma Separated Projection Expression where each comma separated values represents the nesting  attributes.\n-     */\n     private static Optional<String> convertToNameExpression(NestedAttributeName nestedAttributeName) {\n \n-        String name = nestedAttributeName.elements().stream()\n-                .filter(Objects::nonNull).findFirst().orElse(null);\n+        String name = nestedAttributeName.elements().stream().findFirst().orElse(null);\n \n         List<String> nestedAttributes = null;\n         if (nestedAttributeName.elements().size() > 1) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyMDk1Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489620957", "bodyText": "I would prefer to call this property 'attributesToProject' because as it stands it could be confusing where it's assumed that these attributes -must- be nested.", "author": "bmaizels", "createdAt": "2020-09-16T17:58:44Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -46,7 +49,7 @@\n     private final Integer limit;\n     private final Boolean consistentRead;\n     private final Expression filterExpression;\n-    private final List<String> attributesToProject;\n+    private final List<NestedAttributeName> nestedAttributesToProject;", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 585c0807f9..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -49,7 +49,7 @@ public final class QueryEnhancedRequest {\n     private final Integer limit;\n     private final Boolean consistentRead;\n     private final Expression filterExpression;\n-    private final List<NestedAttributeName> nestedAttributesToProject;\n+    private final List<NestedAttributeName> attributesToProject;\n \n     private QueryEnhancedRequest(Builder builder) {\n         this.queryConditional = builder.queryConditional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyMjYyNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489622624", "bodyText": "Example : foo.bar is represented as \"foo.bar\" which is indistinguishable from a non-nested attribute with the name \"foo.bar\". Use {@link #nestedAttributesToProject} if you have a use-case that requires discrimination between these two cases.", "author": "bmaizels", "createdAt": "2020-09-16T18:01:35Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -125,9 +128,20 @@ public Expression filterExpression() {\n \n     /**\n      * Returns the list of projected attributes on this request object, or an null if no projection is specified.\n+     * The Nested Attributes are represented using DOT separator.\n+     * Example : foo.bar is represnted as \"foo.bar\". Use attributeNamesToProject whenever Nested attributes are used.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 585c0807f9..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -128,20 +128,24 @@ public final class QueryEnhancedRequest {\n \n     /**\n      * Returns the list of projected attributes on this request object, or an null if no projection is specified.\n-     * The Nested Attributes are represented using DOT separator.\n-     * Example : foo.bar is represnted as \"foo.bar\". Use attributeNamesToProject whenever Nested attributes are used.\n+     * This is the single list which has Nested and Non Nested attributes to project.\n+     * The Nested Attributes are represented using DOT separator in this List.\n+     * Example : foo.bar is represented as \"foo.bar\" which is indistinguishable from a non-nested attribute\n+     * with the name \"foo.bar\".\n+     * Use {@link #nestedAttributesToProject} if you have a use-case that requires discrimination between these two cases.\n      */\n     public List<String> attributesToProject() {\n-        return nestedAttributesToProject != null ? nestedAttributesToProject.stream().filter(Objects::nonNull)\n-                        .map(item -> String.join(\".\", item.elements())).collect(Collectors.toList()) : null;\n+        return attributesToProject != null ? attributesToProject.stream()\n+                .map(item -> String.join(\".\", item.elements())).collect(Collectors.toList()) : null;\n     }\n \n     /**\n-     * Returns the list of projected Nested attributes Name on this request object, or an null if no projection is specified.\n+     * Returns the list of projected attribute names, in the form of {@link NestedAttributeName} objects,\n+     * for this request object, or null if no projection is specified.\n      * Refer  {@link NestedAttributeName} .\n      */\n     public List<NestedAttributeName> nestedAttributesToProject() {\n-        return nestedAttributesToProject;\n+        return attributesToProject;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyMzgwNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489623805", "bodyText": "Returns the list of projected attribute names, in the form of {@link NestedAttributeName} objects, for this request object, or null if no projection is specified.", "author": "bmaizels", "createdAt": "2020-09-16T18:03:46Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -125,9 +128,20 @@ public Expression filterExpression() {\n \n     /**\n      * Returns the list of projected attributes on this request object, or an null if no projection is specified.\n+     * The Nested Attributes are represented using DOT separator.\n+     * Example : foo.bar is represnted as \"foo.bar\". Use attributeNamesToProject whenever Nested attributes are used.\n      */\n     public List<String> attributesToProject() {\n-        return attributesToProject;\n+        return nestedAttributesToProject != null ? nestedAttributesToProject.stream().filter(Objects::nonNull)\n+                        .map(item -> String.join(\".\", item.elements())).collect(Collectors.toList()) : null;\n+    }\n+\n+    /**\n+     * Returns the list of projected Nested attributes Name on this request object, or an null if no projection is specified.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 585c0807f9..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -128,20 +128,24 @@ public final class QueryEnhancedRequest {\n \n     /**\n      * Returns the list of projected attributes on this request object, or an null if no projection is specified.\n-     * The Nested Attributes are represented using DOT separator.\n-     * Example : foo.bar is represnted as \"foo.bar\". Use attributeNamesToProject whenever Nested attributes are used.\n+     * This is the single list which has Nested and Non Nested attributes to project.\n+     * The Nested Attributes are represented using DOT separator in this List.\n+     * Example : foo.bar is represented as \"foo.bar\" which is indistinguishable from a non-nested attribute\n+     * with the name \"foo.bar\".\n+     * Use {@link #nestedAttributesToProject} if you have a use-case that requires discrimination between these two cases.\n      */\n     public List<String> attributesToProject() {\n-        return nestedAttributesToProject != null ? nestedAttributesToProject.stream().filter(Objects::nonNull)\n-                        .map(item -> String.join(\".\", item.elements())).collect(Collectors.toList()) : null;\n+        return attributesToProject != null ? attributesToProject.stream()\n+                .map(item -> String.join(\".\", item.elements())).collect(Collectors.toList()) : null;\n     }\n \n     /**\n-     * Returns the list of projected Nested attributes Name on this request object, or an null if no projection is specified.\n+     * Returns the list of projected attribute names, in the form of {@link NestedAttributeName} objects,\n+     * for this request object, or null if no projection is specified.\n      * Refer  {@link NestedAttributeName} .\n      */\n     public List<NestedAttributeName> nestedAttributesToProject() {\n-        return nestedAttributesToProject;\n+        return attributesToProject;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyNDE4Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489624187", "bodyText": "Can we remove this and convert attribute name strings as they are added? If we don't think could cause unexpected and surprising behavior when they overwrite existing attributes", "author": "bmaizels", "createdAt": "2020-09-16T18:04:27Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -193,6 +205,7 @@ public int hashCode() {\n         private Boolean consistentRead;\n         private Expression filterExpression;\n         private List<String> attributesToProject;", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 585c0807f9..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -204,8 +208,7 @@ public final class QueryEnhancedRequest {\n         private Integer limit;\n         private Boolean consistentRead;\n         private Expression filterExpression;\n-        private List<String> attributesToProject;\n-        private List<NestedAttributeName> nestedAttributesToProject;\n+        private List<NestedAttributeName> attributesToProject;\n \n         private Builder() {\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyNDc2Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489624763", "bodyText": "Change 'sets' to 'adds'", "author": "bmaizels", "createdAt": "2020-09-16T18:05:25Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,7 +360,101 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 585c0807f9..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -342,55 +353,42 @@ public final class QueryEnhancedRequest {\n          * <p>\n          * Adds a single attribute name to be retrieved from the database. This attribute can include\n          * scalars, sets, or elements of a JSON document.\n+         * If there are nested attributes then addNestedAttributesToProject API should be used.\n          * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n-         * @param attributeToProject\n-         *        An additional single attribute name to be retrieved from the database.\n+         *\n+         * @param attributeToProject An additional single attribute name to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addAttributeToProject(String attributeToProject) {\n-            if (attributesToProject == null) {\n-                attributesToProject = new ArrayList<>();\n+            if (attributeToProject != null) {\n+                addNestedAttributesToProject(NestedAttributeName.create(attributeToProject));\n             }\n-            attributesToProject.add(attributeToProject);\n             return this;\n         }\n \n         /**\n          * <p>\n-         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * Adds a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n          * scalars, sets, or elements of a JSON document.\n          * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n          * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n-         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Enhanced request NestedAttributeNames\n          * should be created to project Nested Attribute name at various levels.\n-         * This Builder adds NestedAttributes to existing NestedAttributes\n-         * or create a new list if NestedAttributes is not created.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * This method will add new attributes to project to the existing list of attributes to project stored by this builder.\n+         *\n          * @param nestedAttributeNames A collection of the attributes names to be retrieved from the database.\n          *                             Nested levels of Attributes can be added using NestedAttributeName class.\n          *                             Refer {@link NestedAttributeName}.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addNestedAttributesToProject(Collection<NestedAttributeName> nestedAttributeNames) {\n-            if (nestedAttributesToProject == null) {\n-                this.nestedAttributesToProject = nestedAttributeNames != null ? new ArrayList<>(nestedAttributeNames) : null;\n-            } else {\n-                if (nestedAttributeNames != null) {\n-                    this.nestedAttributesToProject.addAll(nestedAttributeNames);\n+            if (nestedAttributeNames != null) {\n+                Validate.noNullElements(nestedAttributeNames,\n+                        \"nestedAttributeNames list must not contain null elements\");\n+                if (attributesToProject == null) {\n+                    this.attributesToProject = new ArrayList<>(nestedAttributeNames);\n+                } else {\n+                    this.attributesToProject.addAll(nestedAttributeNames);\n                 }\n             }\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyODAwMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489628000", "bodyText": "Copy changes I recommended for the other similar method.", "author": "bmaizels", "createdAt": "2020-09-16T18:11:14Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,7 +360,101 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * should be created to project Nested Attribute name at various levels.\n+         * This Builder adds NestedAttributes to existing NestedAttributes\n+         * or create a new list if NestedAttributes is not created.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param nestedAttributeNames A collection of the attributes names to be retrieved from the database.\n+         *                             Nested levels of Attributes can be added using NestedAttributeName class.\n+         *                             Refer {@link NestedAttributeName}.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addNestedAttributesToProject(Collection<NestedAttributeName> nestedAttributeNames) {\n+            if (nestedAttributesToProject == null) {\n+                this.nestedAttributesToProject = nestedAttributeNames != null ? new ArrayList<>(nestedAttributeNames) : null;\n+            } else {\n+                if (nestedAttributeNames != null) {\n+                    this.nestedAttributesToProject.addAll(nestedAttributeNames);\n+                }\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * <p>\n+         * Sets one or more attribute names to be retrieved from the database. These attributes can include", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 585c0807f9..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -342,55 +353,42 @@ public final class QueryEnhancedRequest {\n          * <p>\n          * Adds a single attribute name to be retrieved from the database. This attribute can include\n          * scalars, sets, or elements of a JSON document.\n+         * If there are nested attributes then addNestedAttributesToProject API should be used.\n          * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n-         * @param attributeToProject\n-         *        An additional single attribute name to be retrieved from the database.\n+         *\n+         * @param attributeToProject An additional single attribute name to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addAttributeToProject(String attributeToProject) {\n-            if (attributesToProject == null) {\n-                attributesToProject = new ArrayList<>();\n+            if (attributeToProject != null) {\n+                addNestedAttributesToProject(NestedAttributeName.create(attributeToProject));\n             }\n-            attributesToProject.add(attributeToProject);\n             return this;\n         }\n \n         /**\n          * <p>\n-         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * Adds a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n          * scalars, sets, or elements of a JSON document.\n          * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n          * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n-         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Enhanced request NestedAttributeNames\n          * should be created to project Nested Attribute name at various levels.\n-         * This Builder adds NestedAttributes to existing NestedAttributes\n-         * or create a new list if NestedAttributes is not created.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * This method will add new attributes to project to the existing list of attributes to project stored by this builder.\n+         *\n          * @param nestedAttributeNames A collection of the attributes names to be retrieved from the database.\n          *                             Nested levels of Attributes can be added using NestedAttributeName class.\n          *                             Refer {@link NestedAttributeName}.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addNestedAttributesToProject(Collection<NestedAttributeName> nestedAttributeNames) {\n-            if (nestedAttributesToProject == null) {\n-                this.nestedAttributesToProject = nestedAttributeNames != null ? new ArrayList<>(nestedAttributeNames) : null;\n-            } else {\n-                if (nestedAttributeNames != null) {\n-                    this.nestedAttributesToProject.addAll(nestedAttributeNames);\n+            if (nestedAttributeNames != null) {\n+                Validate.noNullElements(nestedAttributeNames,\n+                        \"nestedAttributeNames list must not contain null elements\");\n+                if (attributesToProject == null) {\n+                    this.attributesToProject = new ArrayList<>(nestedAttributeNames);\n+                } else {\n+                    this.attributesToProject.addAll(nestedAttributeNames);\n                 }\n             }\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyODQ1OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489628459", "bodyText": "This method will add new attributes to project to the existing list of attributes to project stored by this builder.", "author": "bmaizels", "createdAt": "2020-09-16T18:12:08Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,7 +360,101 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * should be created to project Nested Attribute name at various levels.\n+         * This Builder adds NestedAttributes to existing NestedAttributes\n+         * or create a new list if NestedAttributes is not created.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 585c0807f9..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -342,55 +353,42 @@ public final class QueryEnhancedRequest {\n          * <p>\n          * Adds a single attribute name to be retrieved from the database. This attribute can include\n          * scalars, sets, or elements of a JSON document.\n+         * If there are nested attributes then addNestedAttributesToProject API should be used.\n          * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n-         * @param attributeToProject\n-         *        An additional single attribute name to be retrieved from the database.\n+         *\n+         * @param attributeToProject An additional single attribute name to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addAttributeToProject(String attributeToProject) {\n-            if (attributesToProject == null) {\n-                attributesToProject = new ArrayList<>();\n+            if (attributeToProject != null) {\n+                addNestedAttributesToProject(NestedAttributeName.create(attributeToProject));\n             }\n-            attributesToProject.add(attributeToProject);\n             return this;\n         }\n \n         /**\n          * <p>\n-         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * Adds a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n          * scalars, sets, or elements of a JSON document.\n          * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n          * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n-         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Enhanced request NestedAttributeNames\n          * should be created to project Nested Attribute name at various levels.\n-         * This Builder adds NestedAttributes to existing NestedAttributes\n-         * or create a new list if NestedAttributes is not created.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * This method will add new attributes to project to the existing list of attributes to project stored by this builder.\n+         *\n          * @param nestedAttributeNames A collection of the attributes names to be retrieved from the database.\n          *                             Nested levels of Attributes can be added using NestedAttributeName class.\n          *                             Refer {@link NestedAttributeName}.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addNestedAttributesToProject(Collection<NestedAttributeName> nestedAttributeNames) {\n-            if (nestedAttributesToProject == null) {\n-                this.nestedAttributesToProject = nestedAttributeNames != null ? new ArrayList<>(nestedAttributeNames) : null;\n-            } else {\n-                if (nestedAttributeNames != null) {\n-                    this.nestedAttributesToProject.addAll(nestedAttributeNames);\n+            if (nestedAttributeNames != null) {\n+                Validate.noNullElements(nestedAttributeNames,\n+                        \"nestedAttributeNames list must not contain null elements\");\n+                if (attributesToProject == null) {\n+                    this.attributesToProject = new ArrayList<>(nestedAttributeNames);\n+                } else {\n+                    this.attributesToProject.addAll(nestedAttributeNames);\n                 }\n             }\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyOTIxOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489629219", "bodyText": "I think this is confusing to have here.", "author": "bmaizels", "createdAt": "2020-09-16T18:13:38Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -347,7 +360,101 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n+         * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * should be created to project Nested Attribute name at various levels.\n+         * This Builder adds NestedAttributes to existing NestedAttributes\n+         * or create a new list if NestedAttributes is not created.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 585c0807f9..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -342,55 +353,42 @@ public final class QueryEnhancedRequest {\n          * <p>\n          * Adds a single attribute name to be retrieved from the database. This attribute can include\n          * scalars, sets, or elements of a JSON document.\n+         * If there are nested attributes then addNestedAttributesToProject API should be used.\n          * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n-         * @param attributeToProject\n-         *        An additional single attribute name to be retrieved from the database.\n+         *\n+         * @param attributeToProject An additional single attribute name to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addAttributeToProject(String attributeToProject) {\n-            if (attributesToProject == null) {\n-                attributesToProject = new ArrayList<>();\n+            if (attributeToProject != null) {\n+                addNestedAttributesToProject(NestedAttributeName.create(attributeToProject));\n             }\n-            attributesToProject.add(attributeToProject);\n             return this;\n         }\n \n         /**\n          * <p>\n-         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * Adds a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n          * scalars, sets, or elements of a JSON document.\n          * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n          * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n-         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Enhanced request NestedAttributeNames\n          * should be created to project Nested Attribute name at various levels.\n-         * This Builder adds NestedAttributes to existing NestedAttributes\n-         * or create a new list if NestedAttributes is not created.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * This method will add new attributes to project to the existing list of attributes to project stored by this builder.\n+         *\n          * @param nestedAttributeNames A collection of the attributes names to be retrieved from the database.\n          *                             Nested levels of Attributes can be added using NestedAttributeName class.\n          *                             Refer {@link NestedAttributeName}.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addNestedAttributesToProject(Collection<NestedAttributeName> nestedAttributeNames) {\n-            if (nestedAttributesToProject == null) {\n-                this.nestedAttributesToProject = nestedAttributeNames != null ? new ArrayList<>(nestedAttributeNames) : null;\n-            } else {\n-                if (nestedAttributeNames != null) {\n-                    this.nestedAttributesToProject.addAll(nestedAttributeNames);\n+            if (nestedAttributeNames != null) {\n+                Validate.noNullElements(nestedAttributeNames,\n+                        \"nestedAttributeNames list must not contain null elements\");\n+                if (attributesToProject == null) {\n+                    this.attributesToProject = new ArrayList<>(nestedAttributeNames);\n+                } else {\n+                    this.attributesToProject.addAll(nestedAttributeNames);\n                 }\n             }\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYyOTU4Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r489629586", "bodyText": "Please implement all changes I suggested in QueryEnhancedRequest", "author": "bmaizels", "createdAt": "2020-09-16T18:14:23Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -284,7 +301,102 @@ public Builder addAttributeToProject(String attributeToProject) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include", "originalCommit": "87604b8aea8b97d4be96023ab87e938e3ee3e960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java\nindex 3702a6e42a..bc66597422 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java\n\n@@ -289,49 +297,40 @@ public final class ScanEnhancedRequest {\n          * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n          * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n          * </p>\n-         * @param attributeToProject\n-         *        An additional single attribute name to be retrieved from the database.\n+         *\n+         * @param attributeToProject An additional single attribute name to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addAttributeToProject(String attributeToProject) {\n-            if (attributesToProject == null) {\n-                attributesToProject = new ArrayList<>();\n+            if (attributeToProject != null) {\n+                addNestedAttributesToProject(NestedAttributeName.create(attributeToProject));\n             }\n-            attributesToProject.add(attributeToProject);\n             return this;\n         }\n \n         /**\n          * <p>\n-         * Sets a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n+         * Adds a collection of the NestedAttributeNames to be retrieved from the database. These attributes can include\n          * scalars, sets, or elements of a JSON document.\n          * This method takes arguments in form of NestedAttributeName which supports representing nested attributes.\n          * The NestedAttributeNames is specially created for projecting Nested Attribute names.\n-         * The DOT characters are not recognized as nesting separator by DDB thus for Emnhance request NestedAttributeNames\n+         * The DOT characters are not recognized as nesting separator by DDB thus for Enhanced request NestedAttributeNames\n          * should be created to project Nested Attribute name at various levels.\n-         * This Builder adds NestedAttributes to existing NestedAttributes\n-         * or create a new list if NestedAttributes is not created.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * This method will add new attributes to project to the existing list of attributes to project stored by this builder.\n+         *\n          * @param nestedAttributeNames A collection of the attributes names to be retrieved from the database.\n          *                             Nested levels of Attributes can be added using NestedAttributeName class.\n          *                             Refer {@link NestedAttributeName}.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder addNestedAttributesToProject(Collection<NestedAttributeName> nestedAttributeNames) {\n-            if (nestedAttributesToProject == null) {\n-                this.nestedAttributesToProject = nestedAttributeNames != null ? new ArrayList<>(nestedAttributeNames) : null;\n-            } else {\n-                if (nestedAttributeNames != null) {\n-                    this.nestedAttributesToProject.addAll(nestedAttributeNames);\n+            if (nestedAttributeNames != null) {\n+                Validate.noNullElements(nestedAttributeNames,\n+                        \"nestedAttributeNames list must not contain null elements\");\n+                if (attributesToProject == null) {\n+                    this.attributesToProject = new ArrayList<>(nestedAttributeNames);\n+                } else {\n+                    this.attributesToProject.addAll(nestedAttributeNames);\n                 }\n             }\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwODYzNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r490808637", "bodyText": "attributesToProjectStringList attribute is required to maintain the order of the older attributeToProject in cases of resets.", "author": "joviegas", "createdAt": "2020-09-18T09:06:42Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -192,7 +206,8 @@ public int hashCode() {\n         private Integer limit;\n         private Boolean consistentRead;\n         private Expression filterExpression;\n-        private List<String> attributesToProject;\n+        private List<String> attributesToProjectStringList;", "originalCommit": "0b2b7eff5a17c48eb0e2c833e8357a0fbaa5d533", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMDQ4NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491120484", "bodyText": "Is the order important? Conceptually I think of this as a 'set'.", "author": "bmaizels", "createdAt": "2020-09-18T18:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwODYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 43cee2a4ca..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -206,7 +208,6 @@ public final class QueryEnhancedRequest {\n         private Integer limit;\n         private Boolean consistentRead;\n         private Expression filterExpression;\n-        private List<String> attributesToProjectStringList;\n         private List<NestedAttributeName> attributesToProject;\n \n         private Builder() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMTk3Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491111973", "bodyText": "Typo in DynamoDB", "author": "bmaizels", "createdAt": "2020-09-18T18:09:15Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by BynamoDB request,", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex 6da464f7a5..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -20,6 +20,7 @@ import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMjQzMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491112432", "bodyText": "Having null elements should be invalid. Can we add a validator here?", "author": "bmaizels", "createdAt": "2020-09-18T18:10:04Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n+ * or accepts an Nested Attribute Name.\n+ * Simple Attribute Name can be represented by passing just the name of the attribute.\n+ * Nested Attributes are represented by List of String where each index of list corresponds to Nesting level Names.\n+ * <p> While using attributeToProject in {@link software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest}\n+ * and {@link software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest} we need  way to represent Nested Attributes.\n+ * The normal DOT(.) separator is not recognized as a Nesting level separator by BynamoDB request,\n+ * thus we need to use NestedAttributeName\n+ * which can be used to represent Nested attributes.\n+ * <p> Example : NestedAttributeName.create(\"foo\") corresponds to a NestedAttributeName with elements list\n+ * with single element foo which represents Simple attribute name \"foo\" without nesting.\n+ * <p>NestedAttributeName.create(\"foo\", \"bar\") corresponds to a NestedAttributeName with elements list \"foo\", \"bar\"\n+ * respresenting nested attribute name \"foo.bar\".\n+ */\n+@SdkPublicApi\n+public final class NestedAttributeName {\n+\n+    private final List<String> elements;\n+\n+    private NestedAttributeName(List<String> nestedAttributeNames) {\n+        this.elements = nestedAttributeNames != null\n+                ? Collections.unmodifiableList(nestedAttributeNames) : null;", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzNTQ3MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491135470", "bodyText": "Added for Null as well as Empty list", "author": "joviegas", "createdAt": "2020-09-18T18:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMjQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\nindex 6da464f7a5..21404c4b47 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/NestedAttributeName.java\n\n@@ -20,6 +20,7 @@ import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.utils.Validate;\n \n /**\n  * High-level representation of a DynamoDB 'NestedAttributeName' that can be used in various situations where the API requires\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExOTIwNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491119204", "bodyText": "I feel like we should add validation to the constructor of the class to avoid the possibility of having null elements in attributesToProject then there would be no need to filter them here.", "author": "bmaizels", "createdAt": "2020-09-18T18:24:04Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -125,8 +128,22 @@ public Expression filterExpression() {\n \n     /**\n      * Returns the list of projected attributes on this request object, or an null if no projection is specified.\n+     * The Nested Attributes are represented using DOT separator.\n+     * Example : foo.bar is represented as \"foo.bar\" which is indistinguishable from a non-nested attribute\n+     * with the name \"foo.bar\".\n+     * Use {@link #nestedAttributesToProject} if you have a use-case that requires discrimination between these two cases.\n      */\n     public List<String> attributesToProject() {\n+        return attributesToProject != null ? attributesToProject.stream().filter(Objects::nonNull)\n+                .map(item -> String.join(\".\", item.elements())).collect(Collectors.toList()) : null;", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 61e5b0d7fd..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -128,13 +128,14 @@ public final class QueryEnhancedRequest {\n \n     /**\n      * Returns the list of projected attributes on this request object, or an null if no projection is specified.\n-     * The Nested Attributes are represented using DOT separator.\n+     * This is the single list which has Nested and Non Nested attributes to project.\n+     * The Nested Attributes are represented using DOT separator in this List.\n      * Example : foo.bar is represented as \"foo.bar\" which is indistinguishable from a non-nested attribute\n      * with the name \"foo.bar\".\n      * Use {@link #nestedAttributesToProject} if you have a use-case that requires discrimination between these two cases.\n      */\n     public List<String> attributesToProject() {\n-        return attributesToProject != null ? attributesToProject.stream().filter(Objects::nonNull)\n+        return attributesToProject != null ? attributesToProject.stream()\n                 .map(item -> String.join(\".\", item.elements())).collect(Collectors.toList()) : null;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMTkyNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491121927", "bodyText": "I think this is really confusing. We don't want to treat these as separate lists. We should make it clear in the javadoc that addNestedAttributeToProject is adding a 'nested attribute' to the 'attributesToProject' list. Let's make it clear to the customer there is just one list, and let's treat it like one list.", "author": "bmaizels", "createdAt": "2020-09-18T18:28:47Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -231,12 +251,22 @@ public Builder filterExpression(Expression filterExpression) {\n          * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n          * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n          * </p>\n-         * @param attributesToProject\n-         *        A collection of the attributes names to be retrieved from the database.\n+         *\n+         * @param attributesToProject A collection of the attributes names to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder attributesToProject(Collection<String> attributesToProject) {\n-            this.attributesToProject = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n+\n+            //If there is a reset then clear the attributesToProject List.\n+            if (attributesToProjectStringList != null) {\n+                attributesToProjectStringList\n+                        .forEach(attribute -> this.attributesToProject.remove(NestedAttributeName.create(attribute)));\n+            }", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzOTk4NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491139985", "bodyText": "okay.", "author": "joviegas", "createdAt": "2020-09-18T19:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMTkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java\nindex 79a686e985..bc66597422 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java\n\n@@ -256,15 +255,11 @@ public final class ScanEnhancedRequest {\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder attributesToProject(Collection<String> attributesToProject) {\n-\n-            //If there is a reset then clear the attributesToProject List.\n-            if (attributesToProjectStringList != null) {\n-                attributesToProjectStringList\n-                        .forEach(attribute -> this.attributesToProject.remove(NestedAttributeName.create(attribute)));\n+            if (this.attributesToProject != null) {\n+                this.attributesToProject.clear();\n             }\n-            this.attributesToProjectStringList = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n-            if (this.attributesToProjectStringList != null) {\n-                addNestedAttributesToProject(attributesToProjectStringList.stream()\n+            if (attributesToProject != null) {\n+                addNestedAttributesToProject(new ArrayList<>(attributesToProject).stream()\n                         .map(NestedAttributeName::create).collect(Collectors.toList()));\n             }\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMjA3NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491122075", "bodyText": "I think this is really confusing. We don't want to treat these as separate lists. We should make it clear in the javadoc that addNestedAttributeToProject is adding a 'nested attribute' to the 'attributesToProject' list. Let's make it clear to the customer there is just one list, and let's treat it like one list.", "author": "bmaizels", "createdAt": "2020-09-18T18:29:06Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -294,12 +310,21 @@ public Builder filterExpression(Expression filterExpression) {\n          * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n          * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n          * </p>\n-         * @param attributesToProject\n-         *        A collection of the attributes names to be retrieved from the database.\n+         *\n+         * @param attributesToProject A collection of the attributes names to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n         public Builder attributesToProject(Collection<String> attributesToProject) {\n-            this.attributesToProject = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n+            //If there is a reset then clear the attributesToProject List.\n+            if (attributesToProjectStringList != null) {\n+                attributesToProjectStringList\n+                        .forEach(attribute -> this.attributesToProject.remove(NestedAttributeName.create(attribute)));\n+            }", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 61e5b0d7fd..d1727f6e91 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -304,6 +304,7 @@ public final class QueryEnhancedRequest {\n          * <p>\n          * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n          * are not found, they will not appear in the result.\n+         * If there are nested attributes then addNestedAttributesToProject API should be used.\n          * </p>\n          * <p>\n          * For more information, see <a href=\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMjkxMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491122912", "bodyText": "Our assertions libraries in order of preference are : assertJ, hamcrest, junit. You picked the least preferential, can we use assertJ here and everywhere else you have created new test files.", "author": "bmaizels", "createdAt": "2020-09-18T18:30:46Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class ProjectionExpressionConvertorTest {\n+\n+    public static final String MAPPED_INDICATOR = \"#AMZN_MAPPED_\";\n+    public static final String NESTING_SEPARATOR = \".\";\n+\n+    @Test\n+    public void testAttributeNameWithNoNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().elements(keyName).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName, toNameExpression.get());", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MzYxMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491143612", "bodyText": "updated", "author": "joviegas", "createdAt": "2020-09-18T19:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMjkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java\nindex 909503a64a..4a967ae8c7 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java\n\n@@ -1,14 +1,15 @@\n package software.amazon.awssdk.enhanced.dynamodb;\n \n-import org.junit.Assert;\n import org.junit.Test;\n import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.assertFails;\n \n public class ProjectionExpressionConvertorTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMzM1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491123355", "bodyText": "This should be invalid and throw an exception (on NestedAttributeName).", "author": "bmaizels", "createdAt": "2020-09-18T18:31:40Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class ProjectionExpressionConvertorTest {\n+\n+    public static final String MAPPED_INDICATOR = \"#AMZN_MAPPED_\";\n+    public static final String NESTING_SEPARATOR = \".\";\n+\n+    @Test\n+    public void testAttributeNameWithNoNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().elements(keyName).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName, toNameExpression.get());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNestedNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        final String nestedAttribute = \"levelOne\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().addElements(keyName,nestedAttribute).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        expectedmap.put(MAPPED_INDICATOR + nestedAttribute, nestedAttribute);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName + NESTING_SEPARATOR + MAPPED_INDICATOR + nestedAttribute, toNameExpression.get());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNullAttributeName() {\n+        NestedAttributeName attributeName = NestedAttributeName.builder().addElement(null).build();", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java\nindex 909503a64a..4a967ae8c7 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java\n\n@@ -1,14 +1,15 @@\n package software.amazon.awssdk.enhanced.dynamodb;\n \n-import org.junit.Assert;\n import org.junit.Test;\n import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.assertFails;\n \n public class ProjectionExpressionConvertorTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyMzYwNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491123605", "bodyText": "This should be invalid and throw an exception (on NestedAttributeName).", "author": "bmaizels", "createdAt": "2020-09-18T18:32:12Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class ProjectionExpressionConvertorTest {\n+\n+    public static final String MAPPED_INDICATOR = \"#AMZN_MAPPED_\";\n+    public static final String NESTING_SEPARATOR = \".\";\n+\n+    @Test\n+    public void testAttributeNameWithNoNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().elements(keyName).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName, toNameExpression.get());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNestedNestedAttributes() {\n+        final String keyName = \"fieldKey\";\n+        final String nestedAttribute = \"levelOne\";\n+        NestedAttributeName attributeName = NestedAttributeName.builder().addElements(keyName,nestedAttribute).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        Map<String, String> expectedmap = new HashMap<>();\n+        expectedmap.put(MAPPED_INDICATOR + keyName, keyName);\n+        expectedmap.put(MAPPED_INDICATOR + nestedAttribute, nestedAttribute);\n+        Assert.assertEquals(expectedmap, stringStringMap);\n+        Assert.assertEquals(MAPPED_INDICATOR + keyName + NESTING_SEPARATOR + MAPPED_INDICATOR + nestedAttribute, toNameExpression.get());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNullAttributeName() {\n+        NestedAttributeName attributeName = NestedAttributeName.builder().addElement(null).build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName));\n+\n+        final Map<String, String> stringStringMap = expressionConvertor.convertToExpressionMap();\n+        final Optional<String> toNameExpression = expressionConvertor.convertToProjectionExpression();\n+        assertThat(stringStringMap, is(new HashMap<>()));\n+        Assert.assertFalse(toNameExpression.isPresent());\n+    }\n+\n+    @Test\n+    public void testAttributeNameWithNullNestedNestedAttributes() {\n+        NestedAttributeName attributeName = NestedAttributeName.builder().build();\n+        NestedAttributeName nullTest =  NestedAttributeName.builder().build();\n+        ProjectionExpressionConvertor expressionConvertor = ProjectionExpressionConvertor.create(Arrays.asList(attributeName, nullTest));", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java\nindex 909503a64a..4a967ae8c7 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/ProjectionExpressionConvertorTest.java\n\n@@ -1,14 +1,15 @@\n package software.amazon.awssdk.enhanced.dynamodb;\n \n-import org.junit.Assert;\n import org.junit.Test;\n import software.amazon.awssdk.enhanced.dynamodb.internal.ProjectionExpressionConvertor;\n+\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.assertFails;\n \n public class ProjectionExpressionConvertorTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyNTMyNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491125327", "bodyText": "Maybe split this up, since our tests shouldn't be doing both.", "author": "bmaizels", "createdAt": "2020-09-18T18:35:46Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicQueryTest.java", "diffHunk": "@@ -121,26 +117,50 @@ public int hashCode() {\n                  .mapToObj(i -> new Record().setId(\"id-value\").setSort(i).setValue(i))\n                  .collect(Collectors.toList());\n \n+    private static final List<NestedTestRecord> NESTED_TEST_RECORDS =\n+            IntStream.range(0, 10)\n+                    .mapToObj(i -> {\n+                        final NestedTestRecord nestedTestRecord = new NestedTestRecord();\n+                        nestedTestRecord.setOuterAttribOne(\"id-value-\" + i);\n+                        nestedTestRecord.setSort(i);\n+                        final InnerAttributeRecord innerAttributeRecord = new InnerAttributeRecord();\n+                        innerAttributeRecord.setAttribOne(\"attribOne-\"+i);\n+                        innerAttributeRecord.setAttribTwo(i);\n+                        nestedTestRecord.setInnerAttributeRecord(innerAttributeRecord);\n+                        nestedTestRecord.setDotVariable(\"v\"+i);\n+                        return nestedTestRecord;\n+                    })\n+                    .collect(Collectors.toList());\n+\n     private DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n                                                                           .dynamoDbClient(getDynamoDbClient())\n                                                                           .build();\n \n     private DynamoDbTable<Record> mappedTable = enhancedClient.table(getConcreteTableName(\"table-name\"), TABLE_SCHEMA);\n \n+    private DynamoDbTable<NestedTestRecord> mappedNestedTable = enhancedClient.table(getConcreteTableName(\"nested-table-name\"),\n+            TableSchema.fromClass(NestedTestRecord.class));\n+\n     private void insertRecords() {\n         RECORDS.forEach(record -> mappedTable.putItem(r -> r.item(record)));\n+        NESTED_TEST_RECORDS.forEach(nestedTestRecord -> mappedNestedTable.putItem(r -> r.item(nestedTestRecord)));\n     }", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicQueryTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicQueryTest.java\nindex e10da86d97..b62bad8d99 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicQueryTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicQueryTest.java\n\n@@ -146,6 +146,10 @@ public class BasicQueryTest extends LocalDynamoDbSyncTestBase {\n         NESTED_TEST_RECORDS.forEach(nestedTestRecord -> mappedNestedTable.putItem(r -> r.item(nestedTestRecord)));\n     }\n \n+    private void insertNestedRecords() {\n+        NESTED_TEST_RECORDS.forEach(nestedTestRecord -> mappedNestedTable.putItem(r -> r.item(nestedTestRecord)));\n+    }\n+\n     @Before\n     public void createTable() {\n         mappedTable.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyNjQwOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491126408", "bodyText": "Can we split these into individual tests.", "author": "bmaizels", "createdAt": "2020-09-18T18:38:13Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "diffHunk": "@@ -89,6 +90,48 @@ public void builder_maximal() {\n         assertThat(builtObject.attributesToProject(), is(attributesToProject));\n     }\n \n+    @Test\n+    public void test_nestedAttributesToProject(){\n+", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java\nindex 7fb46e6457..827113e1f7 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java\n\n@@ -90,8 +88,9 @@ public class QueryEnhancedRequestTest {\n         assertThat(builtObject.attributesToProject(), is(attributesToProject));\n     }\n \n+\n     @Test\n-    public void test_nestedAttributesToProject(){\n+    public void test_withNestedAttributeAddedFirstAndThenAttributesToProject() {\n \n         String[] attributesToProjectArray = {\"one\", \"two\"};\n         String additionalElement = \"three\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyNzA1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2035#discussion_r491127055", "bodyText": "See my other comment in the code, I think the 'correct' state here should be \"three\", and the nested attribute should be overwritten with the others.", "author": "bmaizels", "createdAt": "2020-09-18T18:39:45Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "diffHunk": "@@ -89,6 +90,48 @@ public void builder_maximal() {\n         assertThat(builtObject.attributesToProject(), is(attributesToProject));\n     }\n \n+    @Test\n+    public void test_nestedAttributesToProject(){\n+\n+        String[] attributesToProjectArray = {\"one\", \"two\"};\n+        String additionalElement = \"three\";\n+        QueryEnhancedRequest builtObject = QueryEnhancedRequest.builder()\n+                .addNestedAttributesToProject(NestedAttributeName.create(\"foo\", \"bar\"))\n+                .attributesToProject(attributesToProjectArray)\n+                .addAttributeToProject(additionalElement)\n+                .build();\n+        List<String> attributesToProject = Arrays.asList(\"foo.bar\", \"one\", \"two\", \"three\");\n+        assertThat(builtObject.attributesToProject(), is(attributesToProject));\n+\n+\n+        QueryEnhancedRequest builtObjectOne = QueryEnhancedRequest.builder()\n+                .attributesToProject(attributesToProjectArray)\n+                .addAttributeToProject(additionalElement)\n+                .addNestedAttributesToProject(NestedAttributeName.create(\"foo\", \"bar\"))\n+                .build();\n+        List<String> attributesToProjectNestedLast = Arrays.asList( \"one\", \"two\", \"three\",\"foo.bar\");\n+        assertThat(builtObjectOne.attributesToProject(), is(attributesToProjectNestedLast));\n+\n+\n+        QueryEnhancedRequest builtObjectTwo = QueryEnhancedRequest.builder()\n+                .attributesToProject(attributesToProjectArray)\n+                .addAttributeToProject(additionalElement)\n+                .addNestedAttributesToProject(NestedAttributeName.create(\"foo\", \"bar\"))\n+                .attributesToProject(additionalElement)\n+                .build();\n+        List<String> attributesToProjectStringAttributeOverwrittenNestedLast = Arrays.asList( \"foo.bar\", \"three\");", "originalCommit": "cacd661cb6749fd5916890a304cfe515bdc93e09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b984c82a2d25681d6e6004eed077d78b179e2487", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java\nindex 7fb46e6457..827113e1f7 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java\n\n@@ -90,8 +88,9 @@ public class QueryEnhancedRequestTest {\n         assertThat(builtObject.attributesToProject(), is(attributesToProject));\n     }\n \n+\n     @Test\n-    public void test_nestedAttributesToProject(){\n+    public void test_withNestedAttributeAddedFirstAndThenAttributesToProject() {\n \n         String[] attributesToProjectArray = {\"one\", \"two\"};\n         String additionalElement = \"three\";\n"}}, {"oid": "b984c82a2d25681d6e6004eed077d78b179e2487", "url": "https://github.com/aws/aws-sdk-java-v2/commit/b984c82a2d25681d6e6004eed077d78b179e2487", "message": "DDB Enhanced:Added support to read Nested objects in attributesToProject Enhanced Scan and Enhanced query requests", "committedDate": "2020-09-21T19:05:28Z", "type": "commit"}]}