{"pr_number": 1600, "pr_title": "DynamoDb mapper: non-blocking asynchronous support for all operations", "pr_createdAt": "2020-01-20T23:40:37Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1600", "timeline": [{"oid": "a3449765210c1397a891ec5fb48ead0465865822", "url": "https://github.com/aws/aws-sdk-java-v2/commit/a3449765210c1397a891ec5fb48ead0465865822", "message": "DynamoDb mapper: non-blocking asynchronous support for all operations", "committedDate": "2020-01-20T23:42:28Z", "type": "forcePushed"}, {"oid": "5bb5ee928820fc30362e6df452ccfe6470471a57", "url": "https://github.com/aws/aws-sdk-java-v2/commit/5bb5ee928820fc30362e6df452ccfe6470471a57", "message": "DynamoDb mapper: non-blocking asynchronous support for all operations", "committedDate": "2020-01-20T23:45:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEzMDA3Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369130073", "bodyText": "In the current version of the interface AsyncMappedDatabase, the table method takes a table name and a schema. I don't think there is a table(schema) method?", "author": "cenedhryn", "createdAt": "2020-01-21T17:08:51Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedIndex.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Asynchronous interface for running commands against an object that is linked to a specific DynamoDb secondary index\n+ * and knows how to map records from the table that index is linked to into a modelled object.\n+ *\n+ * Typically an implementation for this interface can be obtained from a {@link AsyncMappedTable} which in turn can be\n+ * obtained from a {@link AsyncMappedDatabase}:\n+ *\n+ * mappedIndex = mappedDatabase.table(tableSchema).index(\"gsi_1\");", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NjU2OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369296569", "bodyText": "I'm going to remove the code examples, because it's too difficult to keep them up to date as we iterate on usability. Maybe we will add them back in once we've locked the interface.", "author": "bmaizels", "createdAt": "2020-01-21T23:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEzMDA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b7e6776b95bf59e2bbd116d270d240dc495a066e", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedIndex.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedIndex.java\nindex 3330076e2d..dadfa89fed 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedIndex.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedIndex.java\n\n@@ -24,11 +24,6 @@ import software.amazon.awssdk.core.async.SdkPublisher;\n  * Asynchronous interface for running commands against an object that is linked to a specific DynamoDb secondary index\n  * and knows how to map records from the table that index is linked to into a modelled object.\n  *\n- * Typically an implementation for this interface can be obtained from a {@link AsyncMappedTable} which in turn can be\n- * obtained from a {@link AsyncMappedDatabase}:\n- *\n- * mappedIndex = mappedDatabase.table(tableSchema).index(\"gsi_1\");\n- *\n  * @param <T> The type of the modelled object.\n  */\n @SdkPublicApi\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEzMDUxNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369130517", "bodyText": "Same as above, reference to table method should have two parameters.", "author": "cenedhryn", "createdAt": "2020-01-21T17:09:44Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedTable.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+/**\n+ * Asynchronous interface for running commands against an object that is linked to a specific DynamoDb table resource\n+ * and therefore knows how to map records from that table into a modelled object.\n+ *\n+ * Typically an implementation for this interface can be obtained from a {@link AsyncMappedDatabase}:\n+ *\n+ * asyncMappedTable = asyncMappedDatabase.table(tableSchema);", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NjcyMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369296721", "bodyText": "Will remove the code example.", "author": "bmaizels", "createdAt": "2020-01-21T23:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEzMDUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "b7e6776b95bf59e2bbd116d270d240dc495a066e", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedTable.java\nindex 7965ce5c92..5feaca050f 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/AsyncMappedTable.java\n\n@@ -24,10 +24,6 @@ import software.amazon.awssdk.core.async.SdkPublisher;\n  * Asynchronous interface for running commands against an object that is linked to a specific DynamoDb table resource\n  * and therefore knows how to map records from that table into a modelled object.\n  *\n- * Typically an implementation for this interface can be obtained from a {@link AsyncMappedDatabase}:\n- *\n- * asyncMappedTable = asyncMappedDatabase.table(tableSchema);\n- *\n  * @param <T> The type of the modelled object.\n  */\n @SdkPublicApi\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NzY0Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369157647", "bodyText": "InjectMocks is new to me, pretty neat. It seems to be not loved by everyone (whatever is), this is an interesting read: https://tedvinke.wordpress.com/2014/02/13/mockito-why-you-should-not-use-injectmocks-annotation-to-autowire-fields/", "author": "cenedhryn", "createdAt": "2020-01-21T18:05:24Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabaseTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DatabaseOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MapperExtension;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DynamoDbAsyncMappedDatabaseTest {\n+    @Mock\n+    private DynamoDbAsyncClient mockDynamoDbAsyncClient;\n+    @Mock\n+    private MapperExtension mockMapperExtension;\n+    @Mock\n+    private DatabaseOperation<?, ?, String> mockDatabaseOperation;\n+    @Mock\n+    private TableSchema<Object> mockTableSchema;\n+\n+    @InjectMocks", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NzcyMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369297723", "bodyText": "I use it when it's convenient, when it breaks (because you add a new dependency without mocking it in your test) in TDD you normally write a test first for that new dependency and so the silent failure hazard doesn't really apply. I'm going to leave as-is, but it's a good call-out and something to be aware of when using it.", "author": "bmaizels", "createdAt": "2020-01-21T23:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NzY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabaseTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabaseTest.java\nindex 805e19380c..94e7f4d733 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabaseTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabaseTest.java\n\n@@ -64,7 +64,7 @@ public class DynamoDbAsyncMappedDatabaseTest {\n     public void table() {\n         DynamoDbAsyncMappedTable<Object> mappedTable = dynamoDbAsyncMappedDatabase.table(\"table-name\", mockTableSchema);\n \n-        assertThat(mappedTable.dynamoDbAsyncClient(), is(mockDynamoDbAsyncClient));\n+        assertThat(mappedTable.dynamoDbClient(), is(mockDynamoDbAsyncClient));\n         assertThat(mappedTable.mapperExtension(), is(mockMapperExtension));\n         assertThat(mappedTable.tableSchema(), is(mockTableSchema));\n         assertThat(mappedTable.tableName(), is(\"table-name\"));\n"}}, {"oid": "b7e6776b95bf59e2bbd116d270d240dc495a066e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/b7e6776b95bf59e2bbd116d270d240dc495a066e", "message": "DynamoDb mapper: non-blocking asynchronous support for all operations", "committedDate": "2020-01-21T23:32:46Z", "type": "forcePushed"}, {"oid": "247f8555b51210f0a3b964b1145d9bf3fa5bf1ff", "url": "https://github.com/aws/aws-sdk-java-v2/commit/247f8555b51210f0a3b964b1145d9bf3fa5bf1ff", "message": "DynamoDb mapper: non-blocking asynchronous support for all operations", "committedDate": "2020-01-22T00:29:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MDM1NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r368770354", "bodyText": "The javadocs will not render as nicely as this on javadocs site without html tags such as <ol> <li>. :)\nI noticed <p> is missing in other places as well.", "author": "zoewangg", "createdAt": "2020-01-21T00:54:12Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/CommonOperation.java", "diffHunk": "@@ -92,4 +106,30 @@ default ResultT execute(TableSchema<ItemT> tableSchema,\n         ResponseT response = serviceCall(dynamoDbClient).apply(request);\n         return transformResponse(response, tableSchema, context, mapperExtension);\n     }\n+\n+    /**\n+     * Default implementation of a complete non-blocking asynchronous execution of this operation against either the\n+     * primary or a secondary index.\n+     * It performs three steps:\n+     * 1) Call generateRequest() to get the request object.", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3MjI1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369772255", "bodyText": "Honestly all the javadocs need a final look/touchup and review. We have a separate task for that. I'd rather tackle it there than in a piecemeal fashion as a lot of these new classes are mirrored by their sync versions.", "author": "bmaizels", "createdAt": "2020-01-22T19:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MDM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3NjY4NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369776685", "bodyText": "I'd prefer making it right while we are at it because it's really easy to miss when we do it afterwards. This is not blocker of this PR if we can make sure we go over all of them later.", "author": "zoewangg", "createdAt": "2020-01-22T20:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MDM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MjEzNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369782134", "bodyText": "Given that we have a task already in our backlog specifically for this, I'm going to defer for now so as not to hold up this change.", "author": "bmaizels", "createdAt": "2020-01-22T20:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MDM1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTY5Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r368771697", "bodyText": "I think the naming convention for the static factor method is create.https://github.com/aws/aws-sdk-java-v2/blob/master/docs/design/FavorStaticFactoryMethods.md#naming-conventions", "author": "zoewangg", "createdAt": "2020-01-21T01:02:25Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+@SdkInternalApi\n+public class TransformPublisher<T, R> implements SdkPublisher<R> {\n+    private final SdkPublisher<T> wrappedPublisher;\n+    private final Function<T, R> transformFunction;\n+\n+    public TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {\n+        this.wrappedPublisher = wrappedPublisher;\n+        this.transformFunction = transformFunction;\n+    }\n+\n+    public static <T, R> TransformPublisher<T, R> of(SdkPublisher<T> publisher, Function<T, R> transformFunction) {", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NjE2NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369766165", "bodyText": "We have a separate backlog task to fix this. Right now the goal of this change is to remain consistent with what's already there.", "author": "bmaizels", "createdAt": "2020-01-22T19:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\nindex 1cedcbcc9d..71806e4624 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\n\n@@ -23,12 +23,13 @@ import org.reactivestreams.Subscription;\n import software.amazon.awssdk.annotations.SdkInternalApi;\n import software.amazon.awssdk.core.async.SdkPublisher;\n \n+// TODO: Consider moving to SDK core\n @SdkInternalApi\n public class TransformPublisher<T, R> implements SdkPublisher<R> {\n     private final SdkPublisher<T> wrappedPublisher;\n     private final Function<T, R> transformFunction;\n \n-    public TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {\n+    private TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {\n         this.wrappedPublisher = wrappedPublisher;\n         this.transformFunction = transformFunction;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTc0OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r368771748", "bodyText": "private?", "author": "zoewangg", "createdAt": "2020-01-21T01:02:40Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+@SdkInternalApi\n+public class TransformPublisher<T, R> implements SdkPublisher<R> {\n+    private final SdkPublisher<T> wrappedPublisher;\n+    private final Function<T, R> transformFunction;\n+\n+    public TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NjQzMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369766433", "bodyText": "Will fix.", "author": "bmaizels", "createdAt": "2020-01-22T19:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\nindex 1cedcbcc9d..71806e4624 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\n\n@@ -23,12 +23,13 @@ import org.reactivestreams.Subscription;\n import software.amazon.awssdk.annotations.SdkInternalApi;\n import software.amazon.awssdk.core.async.SdkPublisher;\n \n+// TODO: Consider moving to SDK core\n @SdkInternalApi\n public class TransformPublisher<T, R> implements SdkPublisher<R> {\n     private final SdkPublisher<T> wrappedPublisher;\n     private final Function<T, R> transformFunction;\n \n-    public TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {\n+    private TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {\n         this.wrappedPublisher = wrappedPublisher;\n         this.transformFunction = transformFunction;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MjA5Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r368772093", "bodyText": "As discussed offline, I'd prefer wrapping the Function with a class to make it more readable. Fine with it since this will be an internal api.", "author": "zoewangg", "createdAt": "2020-01-21T01:04:50Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/CreateTable.java", "diffHunk": "@@ -159,6 +161,13 @@ public CreateTableRequest generateRequest(TableSchema<T> tableSchema,\n         return dynamoDbClient::createTable;\n     }\n \n+    @Override\n+    public Function<CreateTableRequest, CompletableFuture<CreateTableResponse>> asyncServiceCall(", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NjY1NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369766654", "bodyText": "Going to table this for now on the understanding that the future of this interface is to be internal.", "author": "bmaizels", "createdAt": "2020-01-22T19:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MjA5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NDIwNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369294207", "bodyText": "final.\nCan also we add javadocs to all public apis?", "author": "zoewangg", "createdAt": "2020-01-21T23:13:01Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.AsyncMappedDatabase;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DatabaseOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MapperExtension;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n+\n+@SdkPublicApi\n+@ThreadSafe\n+public class DynamoDbAsyncMappedDatabase implements AsyncMappedDatabase {", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NjczNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369766735", "bodyText": "Will fix.", "author": "bmaizels", "createdAt": "2020-01-22T19:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NDIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java\nindex 0f2ca88706..e023b55dde 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java\n\n@@ -27,12 +27,12 @@ import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n \n @SdkPublicApi\n @ThreadSafe\n-public class DynamoDbAsyncMappedDatabase implements AsyncMappedDatabase {\n-    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+public final class DynamoDbAsyncMappedDatabase implements AsyncMappedDatabase {\n+    private final DynamoDbAsyncClient dynamoDbClient;\n     private final MapperExtension mapperExtension;\n \n-    private DynamoDbAsyncMappedDatabase(DynamoDbAsyncClient dynamoDbAsyncClient, MapperExtension mapperExtension) {\n-        this.dynamoDbAsyncClient = dynamoDbAsyncClient;\n+    private DynamoDbAsyncMappedDatabase(DynamoDbAsyncClient dynamoDbClient, MapperExtension mapperExtension) {\n+        this.dynamoDbClient = dynamoDbClient;\n         this.mapperExtension = mapperExtension;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NDU1MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369294550", "bodyText": "missing private ctor", "author": "zoewangg", "createdAt": "2020-01-21T23:14:11Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.AsyncMappedDatabase;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DatabaseOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MapperExtension;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n+\n+@SdkPublicApi\n+@ThreadSafe\n+public class DynamoDbAsyncMappedDatabase implements AsyncMappedDatabase {\n+    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+    private final MapperExtension mapperExtension;\n+\n+    private DynamoDbAsyncMappedDatabase(DynamoDbAsyncClient dynamoDbAsyncClient, MapperExtension mapperExtension) {\n+        this.dynamoDbAsyncClient = dynamoDbAsyncClient;\n+        this.mapperExtension = mapperExtension;\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @Override\n+    public <T> CompletableFuture<T> execute(DatabaseOperation<?, ?, T> operation) {\n+        return operation.executeAsync(dynamoDbAsyncClient, mapperExtension);\n+    }\n+\n+    @Override\n+    public <T> DynamoDbAsyncMappedTable<T> table(String tableName, TableSchema<T> tableSchema) {\n+        return new DynamoDbAsyncMappedTable<>(dynamoDbAsyncClient, mapperExtension, tableSchema, tableName);\n+    }\n+\n+    public DynamoDbAsyncClient dynamoDbAsyncClient() {\n+        return dynamoDbAsyncClient;\n+    }\n+\n+    public MapperExtension mapperExtension() {\n+        return mapperExtension;\n+    }\n+\n+    public Builder toBuilder() {\n+        return builder().dynamoDbAsyncClient(this.dynamoDbAsyncClient).extendWith(this.mapperExtension);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        DynamoDbAsyncMappedDatabase that = (DynamoDbAsyncMappedDatabase) o;\n+\n+        if (dynamoDbAsyncClient != null ? !dynamoDbAsyncClient.equals(that.dynamoDbAsyncClient)\n+            : that.dynamoDbAsyncClient != null) {\n+\n+            return false;\n+        }\n+        return mapperExtension != null ? mapperExtension.equals(that.mapperExtension) : that.mapperExtension == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = dynamoDbAsyncClient != null ? dynamoDbAsyncClient.hashCode() : 0;\n+        result = 31 * result + (mapperExtension != null ? mapperExtension.hashCode() : 0);\n+        return result;\n+    }\n+\n+    public static final class Builder {\n+        private DynamoDbAsyncClient dynamoDbAsyncClient;\n+        private MapperExtension mapperExtension;\n+", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NzkzMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369767931", "bodyText": "Will fix.", "author": "bmaizels", "createdAt": "2020-01-22T19:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NDU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java\nindex 0f2ca88706..e023b55dde 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java\n\n@@ -27,12 +27,12 @@ import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n \n @SdkPublicApi\n @ThreadSafe\n-public class DynamoDbAsyncMappedDatabase implements AsyncMappedDatabase {\n-    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+public final class DynamoDbAsyncMappedDatabase implements AsyncMappedDatabase {\n+    private final DynamoDbAsyncClient dynamoDbClient;\n     private final MapperExtension mapperExtension;\n \n-    private DynamoDbAsyncMappedDatabase(DynamoDbAsyncClient dynamoDbAsyncClient, MapperExtension mapperExtension) {\n-        this.dynamoDbAsyncClient = dynamoDbAsyncClient;\n+    private DynamoDbAsyncMappedDatabase(DynamoDbAsyncClient dynamoDbClient, MapperExtension mapperExtension) {\n+        this.dynamoDbClient = dynamoDbClient;\n         this.mapperExtension = mapperExtension;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NTQ2NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369295465", "bodyText": "nit: We can use Validate.mutuallyExclusive for this", "author": "zoewangg", "createdAt": "2020-01-21T23:17:06Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.AsyncMappedDatabase;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DatabaseOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MapperExtension;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n+\n+@SdkPublicApi\n+@ThreadSafe\n+public class DynamoDbAsyncMappedDatabase implements AsyncMappedDatabase {\n+    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+    private final MapperExtension mapperExtension;\n+\n+    private DynamoDbAsyncMappedDatabase(DynamoDbAsyncClient dynamoDbAsyncClient, MapperExtension mapperExtension) {\n+        this.dynamoDbAsyncClient = dynamoDbAsyncClient;\n+        this.mapperExtension = mapperExtension;\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @Override\n+    public <T> CompletableFuture<T> execute(DatabaseOperation<?, ?, T> operation) {\n+        return operation.executeAsync(dynamoDbAsyncClient, mapperExtension);\n+    }\n+\n+    @Override\n+    public <T> DynamoDbAsyncMappedTable<T> table(String tableName, TableSchema<T> tableSchema) {\n+        return new DynamoDbAsyncMappedTable<>(dynamoDbAsyncClient, mapperExtension, tableSchema, tableName);\n+    }\n+\n+    public DynamoDbAsyncClient dynamoDbAsyncClient() {\n+        return dynamoDbAsyncClient;\n+    }\n+\n+    public MapperExtension mapperExtension() {\n+        return mapperExtension;\n+    }\n+\n+    public Builder toBuilder() {\n+        return builder().dynamoDbAsyncClient(this.dynamoDbAsyncClient).extendWith(this.mapperExtension);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        DynamoDbAsyncMappedDatabase that = (DynamoDbAsyncMappedDatabase) o;\n+\n+        if (dynamoDbAsyncClient != null ? !dynamoDbAsyncClient.equals(that.dynamoDbAsyncClient)\n+            : that.dynamoDbAsyncClient != null) {\n+\n+            return false;\n+        }\n+        return mapperExtension != null ? mapperExtension.equals(that.mapperExtension) : that.mapperExtension == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = dynamoDbAsyncClient != null ? dynamoDbAsyncClient.hashCode() : 0;\n+        result = 31 * result + (mapperExtension != null ? mapperExtension.hashCode() : 0);\n+        return result;\n+    }\n+\n+    public static final class Builder {\n+        private DynamoDbAsyncClient dynamoDbAsyncClient;\n+        private MapperExtension mapperExtension;\n+\n+        public DynamoDbAsyncMappedDatabase build() {\n+            if (dynamoDbAsyncClient == null) {\n+                throw new IllegalArgumentException(\"You must provide a DynamoDbClient to build a \"\n+                                                   + \"DynamoDbMappedDatabase.\");\n+            }\n+\n+            return new DynamoDbAsyncMappedDatabase(dynamoDbAsyncClient, mapperExtension);\n+        }\n+\n+        public Builder dynamoDbAsyncClient(DynamoDbAsyncClient dynamoDbAsyncClient) {\n+            this.dynamoDbAsyncClient = dynamoDbAsyncClient;\n+            return this;\n+        }\n+\n+        public Builder extendWith(MapperExtension mapperExtension) {\n+            if (mapperExtension != null && this.mapperExtension != null) {", "originalCommit": "5bb5ee928820fc30362e6df452ccfe6470471a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2ODA3MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369768070", "bodyText": "I'll look into that, sounds very fixable.", "author": "bmaizels", "createdAt": "2020-01-22T19:48:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NDQ5NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r370244494", "bodyText": "Decided not to do this after looking at the implementation of mutuallyExclusive. I think it's overkill for just checking two things.", "author": "bmaizels", "createdAt": "2020-01-23T17:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NTQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java\nindex 0f2ca88706..e023b55dde 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedDatabase.java\n\n@@ -27,12 +27,12 @@ import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n \n @SdkPublicApi\n @ThreadSafe\n-public class DynamoDbAsyncMappedDatabase implements AsyncMappedDatabase {\n-    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+public final class DynamoDbAsyncMappedDatabase implements AsyncMappedDatabase {\n+    private final DynamoDbAsyncClient dynamoDbClient;\n     private final MapperExtension mapperExtension;\n \n-    private DynamoDbAsyncMappedDatabase(DynamoDbAsyncClient dynamoDbAsyncClient, MapperExtension mapperExtension) {\n-        this.dynamoDbAsyncClient = dynamoDbAsyncClient;\n+    private DynamoDbAsyncMappedDatabase(DynamoDbAsyncClient dynamoDbClient, MapperExtension mapperExtension) {\n+        this.dynamoDbClient = dynamoDbClient;\n         this.mapperExtension = mapperExtension;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDEyMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369340122", "bodyText": "Is this class a public api? Asking because the ctor is not public and has multiple parameters.", "author": "zoewangg", "createdAt": "2020-01-22T02:11:26Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.core.Utils.createKeyFromItem;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.AsyncMappedTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MapperExtension;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.PaginatedTableOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableMetadata;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n+\n+@SdkPublicApi\n+@ThreadSafe\n+public class DynamoDbAsyncMappedTable<T> implements AsyncMappedTable<T> {\n+    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+    private final MapperExtension mapperExtension;\n+    private final TableSchema<T> tableSchema;\n+    private final String tableName;\n+\n+    DynamoDbAsyncMappedTable(DynamoDbAsyncClient dynamoDbAsyncClient,", "originalCommit": "247f8555b51210f0a3b964b1145d9bf3fa5bf1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NzgxNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369767817", "bodyText": "It has a builder, and it's implementing a public interface. We should iron this out either in the builder style task or the overall surface area audit we plan to do. I don't think we should tackle it here and now as part of the async change (this class just mirrors the existing sync version)", "author": "bmaizels", "createdAt": "2020-01-22T19:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java\nindex 58a8607492..fd21e25b50 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java\n\n@@ -33,17 +33,17 @@ import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n \n @SdkPublicApi\n @ThreadSafe\n-public class DynamoDbAsyncMappedTable<T> implements AsyncMappedTable<T> {\n-    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+public final class DynamoDbAsyncMappedTable<T> implements AsyncMappedTable<T> {\n+    private final DynamoDbAsyncClient dynamoDbClient;\n     private final MapperExtension mapperExtension;\n     private final TableSchema<T> tableSchema;\n     private final String tableName;\n \n-    DynamoDbAsyncMappedTable(DynamoDbAsyncClient dynamoDbAsyncClient,\n+    DynamoDbAsyncMappedTable(DynamoDbAsyncClient dynamoDbClient,\n                              MapperExtension mapperExtension,\n                              TableSchema<T> tableSchema,\n                              String tableName) {\n-        this.dynamoDbAsyncClient = dynamoDbAsyncClient;\n+        this.dynamoDbClient = dynamoDbClient;\n         this.mapperExtension = mapperExtension;\n         this.tableSchema = tableSchema;\n         this.tableName = tableName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDQ0NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369340445", "bodyText": "We should probably move it to internal package.", "author": "zoewangg", "createdAt": "2020-01-22T02:13:02Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+@SdkInternalApi", "originalCommit": "247f8555b51210f0a3b964b1145d9bf3fa5bf1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2ODg3Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369768872", "bodyText": "I don't want to tackle that as part of this change. This class is in the right place based on the current structure of the package (it's a kind of mirror of the pre-existing TransformIterator), but I agree that we should eventually refactor these package names once we have finalized what's internal and not.", "author": "bmaizels", "createdAt": "2020-01-22T19:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTg2MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369779861", "bodyText": "Sounds good.", "author": "zoewangg", "createdAt": "2020-01-22T20:14:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\nindex 1cedcbcc9d..71806e4624 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\n\n@@ -23,12 +23,13 @@ import org.reactivestreams.Subscription;\n import software.amazon.awssdk.annotations.SdkInternalApi;\n import software.amazon.awssdk.core.async.SdkPublisher;\n \n+// TODO: Consider moving to SDK core\n @SdkInternalApi\n public class TransformPublisher<T, R> implements SdkPublisher<R> {\n     private final SdkPublisher<T> wrappedPublisher;\n     private final Function<T, R> transformFunction;\n \n-    public TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {\n+    private TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {\n         this.wrappedPublisher = wrappedPublisher;\n         this.transformFunction = transformFunction;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDg5Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369340893", "bodyText": "Can we add some javadocs to this class?\nIt seems like this is a generic publisher; should we move it to core?", "author": "zoewangg", "createdAt": "2020-01-22T02:14:57Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+\n+@SdkInternalApi", "originalCommit": "247f8555b51210f0a3b964b1145d9bf3fa5bf1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2OTI5Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369769293", "bodyText": "If we move this to core, I don't think it can be internal anymore? I'll add javadoc.", "author": "bmaizels", "createdAt": "2020-01-22T19:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDg5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTUzMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369779532", "bodyText": "I'd vote for moving it to core and making it protected api. Not a blocker of this PR. We can probably add a todo there", "author": "zoewangg", "createdAt": "2020-01-22T20:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDg5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MjQzMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369782430", "bodyText": "I'll add a todo.", "author": "bmaizels", "createdAt": "2020-01-22T20:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\nindex 1cedcbcc9d..71806e4624 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/TransformPublisher.java\n\n@@ -23,12 +23,13 @@ import org.reactivestreams.Subscription;\n import software.amazon.awssdk.annotations.SdkInternalApi;\n import software.amazon.awssdk.core.async.SdkPublisher;\n \n+// TODO: Consider moving to SDK core\n @SdkInternalApi\n public class TransformPublisher<T, R> implements SdkPublisher<R> {\n     private final SdkPublisher<T> wrappedPublisher;\n     private final Function<T, R> transformFunction;\n \n-    public TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {\n+    private TransformPublisher(SdkPublisher<T> wrappedPublisher, Function<T, R> transformFunction) {\n         this.wrappedPublisher = wrappedPublisher;\n         this.transformFunction = transformFunction;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MjE1Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369342153", "bodyText": "Same question, will this class directly be used by customers? the ctor is not public", "author": "zoewangg", "createdAt": "2020-01-22T02:21:19Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedIndex.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.core.Utils.createKeyFromItem;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.AsyncMappedIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.IndexOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MapperExtension;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.PaginatedIndexOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n+\n+@SdkPublicApi\n+@ThreadSafe\n+public class DynamoDbAsyncMappedIndex<T> implements AsyncMappedIndex<T> {\n+    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+    private final MapperExtension mapperExtension;\n+    private final TableSchema<T> tableSchema;\n+    private final String tableName;\n+    private final String indexName;\n+\n+    DynamoDbAsyncMappedIndex(DynamoDbAsyncClient dynamoDbAsyncClient,", "originalCommit": "247f8555b51210f0a3b964b1145d9bf3fa5bf1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2OTg2NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369769864", "bodyText": "It's implementing a public interface. The class itself doesn't need to be public. We should review all the classes in one go as a separate task for surface area, I'd like to defer on this for now.", "author": "bmaizels", "createdAt": "2020-01-22T19:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MjE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3ODk4MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369778981", "bodyText": "I see, so this is more like a test api? Can we annotate it with @SdkTestInternalApi to make it more clear?", "author": "zoewangg", "createdAt": "2020-01-22T20:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MjE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MjkyMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369782923", "bodyText": "No, definitely not a test class, it's roughly analogous to DefaultS3Client implementing S3Client. We'll correctly categorize it when we execute the backlog item to audit surface area of all classes.", "author": "bmaizels", "createdAt": "2020-01-22T20:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MjE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4NDE1Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369784152", "bodyText": "I meant adding the annotation on the ctor if it is only used for testing.", "author": "zoewangg", "createdAt": "2020-01-22T20:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MjE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4NTk3NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369785975", "bodyText": "Oh no sorry I was looking at the wrong thing. This object is created by a DynamoDbAsyncMappedTable when table(...) is called. The constructor is package protected to prevent direct instantiation from outside of that.", "author": "bmaizels", "createdAt": "2020-01-22T20:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MjE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4NjEzMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369786132", "bodyText": "Sorry when index(...) is called (not table)", "author": "bmaizels", "createdAt": "2020-01-22T20:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MjE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedIndex.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedIndex.java\nindex f50e7b9ebe..1245ed91e1 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedIndex.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedIndex.java\n\n@@ -32,19 +32,19 @@ import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n \n @SdkPublicApi\n @ThreadSafe\n-public class DynamoDbAsyncMappedIndex<T> implements AsyncMappedIndex<T> {\n-    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+public final class DynamoDbAsyncMappedIndex<T> implements AsyncMappedIndex<T> {\n+    private final DynamoDbAsyncClient dynamoDbClient;\n     private final MapperExtension mapperExtension;\n     private final TableSchema<T> tableSchema;\n     private final String tableName;\n     private final String indexName;\n \n-    DynamoDbAsyncMappedIndex(DynamoDbAsyncClient dynamoDbAsyncClient,\n+    DynamoDbAsyncMappedIndex(DynamoDbAsyncClient dynamoDbClient,\n                              MapperExtension mapperExtension,\n                              TableSchema<T> tableSchema,\n                              String tableName,\n                              String indexName) {\n-        this.dynamoDbAsyncClient = dynamoDbAsyncClient;\n+        this.dynamoDbClient = dynamoDbClient;\n         this.mapperExtension = mapperExtension;\n         this.tableSchema = tableSchema;\n         this.tableName = tableName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MjIyMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369342220", "bodyText": "final", "author": "zoewangg", "createdAt": "2020-01-22T02:21:34Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.core;\n+\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.core.Utils.createKeyFromItem;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.AsyncMappedTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MapperExtension;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.PaginatedTableOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableMetadata;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n+\n+@SdkPublicApi\n+@ThreadSafe\n+public class DynamoDbAsyncMappedTable<T> implements AsyncMappedTable<T> {", "originalCommit": "247f8555b51210f0a3b964b1145d9bf3fa5bf1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2OTk0NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1600#discussion_r369769945", "bodyText": "Will fix.", "author": "bmaizels", "createdAt": "2020-01-22T19:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MjIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "23e1120c47e46a56237e0df98d22812e54abd42b", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java\nindex 58a8607492..fd21e25b50 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/core/DynamoDbAsyncMappedTable.java\n\n@@ -33,17 +33,17 @@ import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n \n @SdkPublicApi\n @ThreadSafe\n-public class DynamoDbAsyncMappedTable<T> implements AsyncMappedTable<T> {\n-    private final DynamoDbAsyncClient dynamoDbAsyncClient;\n+public final class DynamoDbAsyncMappedTable<T> implements AsyncMappedTable<T> {\n+    private final DynamoDbAsyncClient dynamoDbClient;\n     private final MapperExtension mapperExtension;\n     private final TableSchema<T> tableSchema;\n     private final String tableName;\n \n-    DynamoDbAsyncMappedTable(DynamoDbAsyncClient dynamoDbAsyncClient,\n+    DynamoDbAsyncMappedTable(DynamoDbAsyncClient dynamoDbClient,\n                              MapperExtension mapperExtension,\n                              TableSchema<T> tableSchema,\n                              String tableName) {\n-        this.dynamoDbAsyncClient = dynamoDbAsyncClient;\n+        this.dynamoDbClient = dynamoDbClient;\n         this.mapperExtension = mapperExtension;\n         this.tableSchema = tableSchema;\n         this.tableName = tableName;\n"}}, {"oid": "23e1120c47e46a56237e0df98d22812e54abd42b", "url": "https://github.com/aws/aws-sdk-java-v2/commit/23e1120c47e46a56237e0df98d22812e54abd42b", "message": "DynamoDb mapper: non-blocking asynchronous support for all operations", "committedDate": "2020-01-23T17:13:07Z", "type": "commit"}, {"oid": "23e1120c47e46a56237e0df98d22812e54abd42b", "url": "https://github.com/aws/aws-sdk-java-v2/commit/23e1120c47e46a56237e0df98d22812e54abd42b", "message": "DynamoDb mapper: non-blocking asynchronous support for all operations", "committedDate": "2020-01-23T17:13:07Z", "type": "forcePushed"}]}