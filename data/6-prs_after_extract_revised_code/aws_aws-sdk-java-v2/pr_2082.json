{"pr_number": 2082, "pr_title": "feature 2034: SdkHttpFullRequest builder.URI conditionally accept que\u2026", "pr_createdAt": "2020-10-07T12:48:39Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/2082", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNjUyNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r502716526", "bodyText": "I don't think we should have methods that affect the behavior of other methods that are called later. I would rather method calls are on the builder be self-contained and have no side effects. It means other methods (existing or added in the future) will also have to at least consider whether this flag affects their behavior.\nI think a better solution here would to be introduce a new method that is similar to uri(URI), with the additional behavior of including the query params on the given URI. Something like uriWithQueryParams(URI)", "author": "dagnir", "createdAt": "2020-10-09T23:57:20Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java", "diffHunk": "@@ -244,6 +255,19 @@ public String encodedPath() {\n             return path;\n         }\n \n+        @Override\n+        public DefaultSdkHttpFullRequest.Builder keepUriQueryParams(boolean keepUriQueryParams) {\n+            this.keepUriQueryParams = keepUriQueryParams;\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean keepUriQueryParams() {\n+            return keepUriQueryParams;\n+        }", "originalCommit": "43a43be5a780b37d592d71b52e91ed7e3e6a51ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7dc5615dac6db69334bdbc35611dec993c7edb06", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java\nindex ae0616c497..e42e65434e 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java\n\n@@ -255,19 +262,6 @@ final class DefaultSdkHttpFullRequest implements SdkHttpFullRequest {\n             return path;\n         }\n \n-        @Override\n-        public DefaultSdkHttpFullRequest.Builder keepUriQueryParams(boolean keepUriQueryParams) {\n-            this.keepUriQueryParams = keepUriQueryParams;\n-            return this;\n-        }\n-\n-        @Override\n-        public boolean keepUriQueryParams() {\n-            return keepUriQueryParams;\n-        }\n-\n-        ;\n-\n         @Override\n         public DefaultSdkHttpFullRequest.Builder putRawQueryParameter(String paramName, List<String> paramValues) {\n             copyQueryParamsIfNeeded();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNzA4Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r502717087", "bodyText": "I don't think appending would be the correct behavior here; the current set of query parameters should be cleared; otherwise something like this\nbuilder.uri(myUri1).uri(myUri2);\nwill contain the query parameters from both URIs.", "author": "dagnir", "createdAt": "2020-10-10T00:00:52Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java", "diffHunk": "@@ -134,18 +138,28 @@ default URI getUri() {\n      * {@link SdkHttpFullRequest#builder()}.\n      */\n     interface Builder extends CopyableBuilder<Builder, SdkHttpRequest> {\n+\n         /**\n-         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()}, and\n-         * {@link #encodedPath()} from a {@link URI} object.\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n+         * {@link #encodedPath()} and optional via {@link #keepUriQueryParams()} query parameters from a {@link URI} object.\n          *\n-         * @param uri URI containing protocol, host, port and path.\n+         * @param uri URI containing protocol, host, port, path and optional query parameters.\n          * @return This builder for method chaining.\n          */\n         default Builder uri(URI uri) {\n-            return this.protocol(uri.getScheme())\n-                       .host(uri.getHost())\n-                       .port(uri.getPort())\n-                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+            SdkHttpRequest.Builder builder = this.protocol(uri.getScheme())\n+                                                 .host(uri.getHost())\n+                                                 .port(uri.getPort())\n+                                                 .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+            if (uri.getQuery() != null) {\n+                Pattern.compile(\"\\\\s*&\\\\s*\")\n+                       .splitAsStream(uri.getQuery().trim())\n+                       .map(s -> s.split(\"=\", 2))\n+                       .collect(groupingBy(a -> a[0], mapping(a -> a[1], toList())))\n+                       .forEach((paramKey, paramValues) -> paramValues\n+                           .forEach(paramValue -> this.appendUriQueryParameter(paramKey, paramValue)));", "originalCommit": "43a43be5a780b37d592d71b52e91ed7e3e6a51ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNzY0Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504917646", "bodyText": "Done", "author": "roexber", "createdAt": "2020-10-14T19:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNzA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7dc5615dac6db69334bdbc35611dec993c7edb06", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\nindex f9c76d5cfc..4cfd533b12 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n\n@@ -140,21 +140,32 @@ public interface SdkHttpRequest extends SdkHttpHeaders, ToCopyableBuilder<SdkHtt\n     interface Builder extends CopyableBuilder<Builder, SdkHttpRequest> {\n \n         /**\n-         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n-         * {@link #encodedPath()} and optional via {@link #keepUriQueryParams()} query parameters from a {@link URI} object.\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()}, and\n+         * {@link #encodedPath()} from a {@link URI} object.\n          *\n-         * @param uri URI containing protocol, host, port, path and optional query parameters.\n+         * @param uri URI containing protocol, host, port and path.\n          * @return This builder for method chaining.\n          */\n         default Builder uri(URI uri) {\n-            SdkHttpRequest.Builder builder = this.protocol(uri.getScheme())\n+            return this.protocol(uri.getScheme())\n                                                  .host(uri.getHost())\n                                                  .port(uri.getPort())\n                                                  .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+        }\n+\n+        /**\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n+         * {@link #encodedPath()} and keep query parameters if present from a {@link URI} object.\n+         *\n+         * @param uri URI containing protocol, host, port, path and optional query parameters.\n+         * @return This builder for method chaining.\n+         */\n+        default Builder uriWithQueryParams(URI uri) {\n+            Builder builder = this.uri(uri);\n             if (uri.getQuery() != null) {\n-                Pattern.compile(\"\\\\s*&\\\\s*\")\n+                Pattern.compile(\"\\\\s*&|%26\\\\s*\")\n                        .splitAsStream(uri.getQuery().trim())\n-                       .map(s -> s.split(\"=\", 2))\n+                       .map(s -> s.split(\"=|%3D\", 2))\n                        .collect(groupingBy(a -> a[0], mapping(a -> a[1], toList())))\n                        .forEach((paramKey, paramValues) -> paramValues\n                            .forEach(paramValue -> this.appendUriQueryParameter(paramKey, paramValue)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNzIyOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r502717228", "bodyText": "Think the query parameters need to be decoded as well", "author": "dagnir", "createdAt": "2020-10-10T00:01:48Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java", "diffHunk": "@@ -134,18 +138,28 @@ default URI getUri() {\n      * {@link SdkHttpFullRequest#builder()}.\n      */\n     interface Builder extends CopyableBuilder<Builder, SdkHttpRequest> {\n+\n         /**\n-         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()}, and\n-         * {@link #encodedPath()} from a {@link URI} object.\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n+         * {@link #encodedPath()} and optional via {@link #keepUriQueryParams()} query parameters from a {@link URI} object.\n          *\n-         * @param uri URI containing protocol, host, port and path.\n+         * @param uri URI containing protocol, host, port, path and optional query parameters.\n          * @return This builder for method chaining.\n          */\n         default Builder uri(URI uri) {\n-            return this.protocol(uri.getScheme())\n-                       .host(uri.getHost())\n-                       .port(uri.getPort())\n-                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+            SdkHttpRequest.Builder builder = this.protocol(uri.getScheme())\n+                                                 .host(uri.getHost())\n+                                                 .port(uri.getPort())\n+                                                 .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+            if (uri.getQuery() != null) {\n+                Pattern.compile(\"\\\\s*&\\\\s*\")\n+                       .splitAsStream(uri.getQuery().trim())\n+                       .map(s -> s.split(\"=\", 2))\n+                       .collect(groupingBy(a -> a[0], mapping(a -> a[1], toList())))\n+                       .forEach((paramKey, paramValues) -> paramValues\n+                           .forEach(paramValue -> this.appendUriQueryParameter(paramKey, paramValue)));", "originalCommit": "43a43be5a780b37d592d71b52e91ed7e3e6a51ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwMzE0MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r502903141", "bodyText": "@dagnir Thanks for the review. I've tried my best to update the upstream master but to have 2 commits now that I am unsure of how to properly squash into a single one (9d6fae0 and 43a43be)", "author": "Strat1987", "createdAt": "2020-10-11T11:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNzIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7dc5615dac6db69334bdbc35611dec993c7edb06", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\nindex f9c76d5cfc..4cfd533b12 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n\n@@ -140,21 +140,32 @@ public interface SdkHttpRequest extends SdkHttpHeaders, ToCopyableBuilder<SdkHtt\n     interface Builder extends CopyableBuilder<Builder, SdkHttpRequest> {\n \n         /**\n-         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n-         * {@link #encodedPath()} and optional via {@link #keepUriQueryParams()} query parameters from a {@link URI} object.\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()}, and\n+         * {@link #encodedPath()} from a {@link URI} object.\n          *\n-         * @param uri URI containing protocol, host, port, path and optional query parameters.\n+         * @param uri URI containing protocol, host, port and path.\n          * @return This builder for method chaining.\n          */\n         default Builder uri(URI uri) {\n-            SdkHttpRequest.Builder builder = this.protocol(uri.getScheme())\n+            return this.protocol(uri.getScheme())\n                                                  .host(uri.getHost())\n                                                  .port(uri.getPort())\n                                                  .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+        }\n+\n+        /**\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n+         * {@link #encodedPath()} and keep query parameters if present from a {@link URI} object.\n+         *\n+         * @param uri URI containing protocol, host, port, path and optional query parameters.\n+         * @return This builder for method chaining.\n+         */\n+        default Builder uriWithQueryParams(URI uri) {\n+            Builder builder = this.uri(uri);\n             if (uri.getQuery() != null) {\n-                Pattern.compile(\"\\\\s*&\\\\s*\")\n+                Pattern.compile(\"\\\\s*&|%26\\\\s*\")\n                        .splitAsStream(uri.getQuery().trim())\n-                       .map(s -> s.split(\"=\", 2))\n+                       .map(s -> s.split(\"=|%3D\", 2))\n                        .collect(groupingBy(a -> a[0], mapping(a -> a[1], toList())))\n                        .forEach((paramKey, paramValues) -> paramValues\n                            .forEach(paramValue -> this.appendUriQueryParameter(paramKey, paramValue)));\n"}}, {"oid": "7dc5615dac6db69334bdbc35611dec993c7edb06", "url": "https://github.com/aws/aws-sdk-java-v2/commit/7dc5615dac6db69334bdbc35611dec993c7edb06", "message": "feature 2034: SdkHttpFullRequest builder.URI keep query parameters of provided URI if the uriWithQueryParams builder method is used", "committedDate": "2020-10-13T17:01:26Z", "type": "forcePushed"}, {"oid": "46ee998ff83f21b99b36db30dc66f3571691d942", "url": "https://github.com/aws/aws-sdk-java-v2/commit/46ee998ff83f21b99b36db30dc66f3571691d942", "message": "feature 2034: SdkHttpFullRequest builder.URI keep query parameters of provided URI if the uriWithQueryParams builder method is used", "committedDate": "2020-10-13T18:33:01Z", "type": "forcePushed"}, {"oid": "ee074224f4d1d58bbfb195169fe9bddbd5cf5779", "url": "https://github.com/aws/aws-sdk-java-v2/commit/ee074224f4d1d58bbfb195169fe9bddbd5cf5779", "message": "feature 2034: SdkHttpFullRequest builder.URI keep query parameters of provided URI if the uriWithQueryParams builder method is used", "committedDate": "2020-10-13T18:34:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MDA0MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504150041", "bodyText": "Please revert formatting change here", "author": "dagnir", "createdAt": "2020-10-13T17:57:08Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java", "diffHunk": "@@ -143,9 +148,29 @@ default URI getUri() {\n          */\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                       .host(uri.getHost())\n-                       .port(uri.getPort())\n-                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                                                 .host(uri.getHost())\n+                                                 .port(uri.getPort())\n+                                                 .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+        }", "originalCommit": "7dc5615dac6db69334bdbc35611dec993c7edb06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4MDc3Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504180773", "bodyText": "will do", "author": "Strat1987", "createdAt": "2020-10-13T18:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MDA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNzg0Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504917843", "bodyText": "Done", "author": "roexber", "createdAt": "2020-10-14T19:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MDA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d02aef01c046ad769e1778c232997f596f343b7", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\nindex 4cfd533b12..14db134440 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n\n@@ -148,9 +148,9 @@ public interface SdkHttpRequest extends SdkHttpHeaders, ToCopyableBuilder<SdkHtt\n          */\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                                                 .host(uri.getHost())\n-                                                 .port(uri.getPort())\n-                                                 .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                       .host(uri.getHost())\n+                       .port(uri.getPort())\n+                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n         }\n \n         /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MDMxMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504150313", "bodyText": "Please revert formatting change", "author": "dagnir", "createdAt": "2020-10-13T17:57:35Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java", "diffHunk": "@@ -66,9 +71,29 @@\n         @Override\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                       .host(uri.getHost())\n-                       .port(uri.getPort())\n-                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                    .host(uri.getHost())\n+                    .port(uri.getPort())\n+                    .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+        }", "originalCommit": "7dc5615dac6db69334bdbc35611dec993c7edb06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNzkyOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504917928", "bodyText": "Done", "author": "roexber", "createdAt": "2020-10-14T19:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MDMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "3d02aef01c046ad769e1778c232997f596f343b7", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\nindex 3f3856c41c..72db25033e 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n\n@@ -71,9 +71,9 @@ public interface SdkHttpFullRequest\n         @Override\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                    .host(uri.getHost())\n-                    .port(uri.getPort())\n-                    .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                       .host(uri.getHost())\n+                       .port(uri.getPort())\n+                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n         }\n \n         /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MzQ0NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504153445", "bodyText": "This code is pretty complex and is duplicated here and in SdkHttpRequest. Let's move this out into SdkHttpUtils instead. Should also make the parsing easier to test in isolation", "author": "dagnir", "createdAt": "2020-10-13T18:02:51Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java", "diffHunk": "@@ -66,9 +71,29 @@\n         @Override\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                       .host(uri.getHost())\n-                       .port(uri.getPort())\n-                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                    .host(uri.getHost())\n+                    .port(uri.getPort())\n+                    .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+        }\n+\n+        /**\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n+         * {@link #encodedPath()} and keep query parameters if present from a {@link URI} object.\n+         *\n+         * @param uri URI containing protocol, host, port, path and optional query parameters.\n+         * @return This builder for method chaining.\n+         */\n+        default Builder uriWithQueryParams(URI uri) {\n+            Builder builder = this.uri(uri);\n+            if (uri.getQuery() != null) {\n+                Pattern.compile(\"\\\\s*&|%26\\\\s*\")\n+                       .splitAsStream(uri.getQuery().trim())\n+                       .map(s -> s.split(\"=|%3D\", 2))\n+                       .collect(groupingBy(a -> a[0], mapping(a -> a[1], toList())))\n+                       .forEach((paramKey, paramValues) -> paramValues\n+                           .forEach(paramValue -> this.appendUriQueryParameter(paramKey, paramValue)));", "originalCommit": "7dc5615dac6db69334bdbc35611dec993c7edb06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MTUzMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504191530", "bodyText": "Agreed", "author": "Strat1987", "createdAt": "2020-10-13T19:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MzQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxODA1OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504918059", "bodyText": "extracted", "author": "roexber", "createdAt": "2020-10-14T19:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MzQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d02aef01c046ad769e1778c232997f596f343b7", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\nindex 3f3856c41c..72db25033e 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n\n@@ -71,9 +71,9 @@ public interface SdkHttpFullRequest\n         @Override\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                    .host(uri.getHost())\n-                    .port(uri.getPort())\n-                    .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                       .host(uri.getHost())\n+                       .port(uri.getPort())\n+                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n         }\n \n         /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjAyOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504166029", "bodyText": "I don't think we should including %26 here as the literal & should be the only delimiter we look for.\nCompiling a pattern each time is inefficient. Once this logic is moved into SdkHttpUtils, let's extract the pattern out into a static constant", "author": "dagnir", "createdAt": "2020-10-13T18:19:53Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java", "diffHunk": "@@ -66,9 +71,29 @@\n         @Override\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                       .host(uri.getHost())\n-                       .port(uri.getPort())\n-                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                    .host(uri.getHost())\n+                    .port(uri.getPort())\n+                    .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+        }\n+\n+        /**\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n+         * {@link #encodedPath()} and keep query parameters if present from a {@link URI} object.\n+         *\n+         * @param uri URI containing protocol, host, port, path and optional query parameters.\n+         * @return This builder for method chaining.\n+         */\n+        default Builder uriWithQueryParams(URI uri) {\n+            Builder builder = this.uri(uri);\n+            if (uri.getQuery() != null) {\n+                Pattern.compile(\"\\\\s*&|%26\\\\s*\")", "originalCommit": "7dc5615dac6db69334bdbc35611dec993c7edb06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3OTEyNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504179127", "bodyText": "In appendUriQueryParameter impl I now decode the incoming paramValue as was suggested before, which is why I reasoned to also split on the decoded delimiter as otherwise the value would not be split properly before appending?", "author": "Strat1987", "createdAt": "2020-10-13T18:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4ODc4Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504188786", "bodyText": "Unfortunately I don't think that's the right strategy. We should do the decoding after we have the individual components of the query parsed out. Otherwise, if the the input URI has and encoded & or =, then we would be parsing it incorrectly.  It's perfectly valid for the parameter name or value to have & or = it as long as it's encoded.\nFor example, the pair [contains=equals, foo] in a URI would be https://foo.bar?contains%3Dequals=foo, but the code as is will split this as [contains, equals=foo]", "author": "dagnir", "createdAt": "2020-10-13T19:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MjE4Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504192186", "bodyText": "I think the general strategy should be\n\nget components of query string\nforeach component\n\ndecode name\ndecode value if present\n\n\nput raw query param", "author": "dagnir", "createdAt": "2020-10-13T19:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NTkwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504195906", "bodyText": "I haven't thought about it in that way, makes sense to split like that and then decode both parts before adding.\nOn reusing the put raw query param bullet, that would mean we cannot differ on where te params come from as I did now in:\nprivate Map<String, List<String>> determineQueryParameters(Builder builder) {\n    if (builder.uriQueryParameters.isEmpty()) {\n        return builder.queryParametersAreFromToBuilder\n               ? builder.queryParameters\n               : deepUnmodifiableMap(builder.queryParameters, () -> new LinkedHashMap<>());\n    }\n    return builder.uriQueryParameters;\n}", "author": "Strat1987", "createdAt": "2020-10-13T19:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNTYyNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504205627", "bodyText": "Hmm I don't think it should be necessary to distinguish the source. uriWithQueryParams acts basically like a static constructor for SdkHttpRequest", "author": "dagnir", "createdAt": "2020-10-13T19:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxODM4OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504918389", "bodyText": "Attempted to reflect this train of thought", "author": "roexber", "createdAt": "2020-10-14T19:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d02aef01c046ad769e1778c232997f596f343b7", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\nindex 3f3856c41c..72db25033e 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n\n@@ -71,9 +71,9 @@ public interface SdkHttpFullRequest\n         @Override\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                    .host(uri.getHost())\n-                    .port(uri.getPort())\n-                    .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                       .host(uri.getHost())\n+                       .port(uri.getPort())\n+                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n         }\n \n         /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2OTkyNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504169927", "bodyText": "Same here, should only splitting on the literal =.\nAlso seems like this assumes each query parameter is a name-value pair; we should support parameters that don't have a value  as well, like in https://github.com/aws/aws-sdk-java-v2/pull/2082?foo", "author": "dagnir", "createdAt": "2020-10-13T18:26:53Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java", "diffHunk": "@@ -66,9 +71,29 @@\n         @Override\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                       .host(uri.getHost())\n-                       .port(uri.getPort())\n-                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                    .host(uri.getHost())\n+                    .port(uri.getPort())\n+                    .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+        }\n+\n+        /**\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n+         * {@link #encodedPath()} and keep query parameters if present from a {@link URI} object.\n+         *\n+         * @param uri URI containing protocol, host, port, path and optional query parameters.\n+         * @return This builder for method chaining.\n+         */\n+        default Builder uriWithQueryParams(URI uri) {\n+            Builder builder = this.uri(uri);\n+            if (uri.getQuery() != null) {\n+                Pattern.compile(\"\\\\s*&|%26\\\\s*\")\n+                       .splitAsStream(uri.getQuery().trim())\n+                       .map(s -> s.split(\"=|%3D\", 2))", "originalCommit": "7dc5615dac6db69334bdbc35611dec993c7edb06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d02aef01c046ad769e1778c232997f596f343b7", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\nindex 3f3856c41c..72db25033e 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n\n@@ -71,9 +71,9 @@ public interface SdkHttpFullRequest\n         @Override\n         default Builder uri(URI uri) {\n             return this.protocol(uri.getScheme())\n-                    .host(uri.getHost())\n-                    .port(uri.getPort())\n-                    .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+                       .host(uri.getHost())\n+                       .port(uri.getPort())\n+                       .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n         }\n \n         /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3MjUwOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504172508", "bodyText": "Hmm why do we need this instead of using putRawQueryParameter?", "author": "dagnir", "createdAt": "2020-10-13T18:31:36Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java", "diffHunk": "@@ -337,5 +363,17 @@ default Builder putHeader(String headerName, String headerValue) {\n          * Removes all headers from this builder.\n          */\n         Builder clearHeaders();\n+\n+        /**\n+         * Add a single un-encoded URI query parameter to be included in the created HTTP request.\n+         *\n+         * <p>This will <b>ADD</b> the value to any existing values already configured with this parameter name in\n+         * the builder.</p>\n+         *\n+         * @param paramName  The name of the query parameter to add\n+         * @param paramValue The un-encoded value for the query parameter.\n+         */\n+        Builder appendUriQueryParameter(String paramName, String paramValue);", "originalCommit": "7dc5615dac6db69334bdbc35611dec993c7edb06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4MDU2Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504180566", "bodyText": "since I wanted to make sure not to interfere with already in place param handling", "author": "Strat1987", "createdAt": "2020-10-13T18:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3MjUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "4f8f009ff380003adc3badaa870e50956e55addf", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\nindex 4cfd533b12..6a57aebf82 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n\n@@ -364,16 +356,5 @@ public interface SdkHttpRequest extends SdkHttpHeaders, ToCopyableBuilder<SdkHtt\n          */\n         Builder clearHeaders();\n \n-        /**\n-         * Add a single un-encoded URI query parameter to be included in the created HTTP request.\n-         *\n-         * <p>This will <b>ADD</b> the value to any existing values already configured with this parameter name in\n-         * the builder.</p>\n-         *\n-         * @param paramName  The name of the query parameter to add\n-         * @param paramValue The un-encoded value for the query parameter.\n-         */\n-        Builder appendUriQueryParameter(String paramName, String paramValue);\n-\n     }\n }\n"}}, {"oid": "3d02aef01c046ad769e1778c232997f596f343b7", "url": "https://github.com/aws/aws-sdk-java-v2/commit/3d02aef01c046ad769e1778c232997f596f343b7", "message": "feature 2034: SdkHttpFullRequest builder.URI keep query parameters of provided URI if the uriWithQueryParams builder method is used", "committedDate": "2020-10-13T19:03:42Z", "type": "forcePushed"}, {"oid": "845d09fb2a99e24582763ae0469e6302105a8847", "url": "https://github.com/aws/aws-sdk-java-v2/commit/845d09fb2a99e24582763ae0469e6302105a8847", "message": "feature 2034: SdkHttpFullRequest builder.URI keep query parameters of provided URI if the uriWithQueryParams builder method is used", "committedDate": "2020-10-13T19:04:46Z", "type": "forcePushed"}, {"oid": "c42de89cf225b99c86791dd243f9b9aca10682fa", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c42de89cf225b99c86791dd243f9b9aca10682fa", "message": "feature 2034: SdkHttpFullRequest builder.URI keep query parameters of provided URI if the uriWithQueryParams builder method is used", "committedDate": "2020-10-13T19:06:00Z", "type": "forcePushed"}, {"oid": "f0d18f9e19130d49e3e8d77c41623d4ec3e53c2d", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f0d18f9e19130d49e3e8d77c41623d4ec3e53c2d", "message": "feature 2034: SdkHttpFullRequest builder.URI keep query parameters of provided URI if the uriWithQueryParams builder method is used", "committedDate": "2020-10-13T19:09:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NzYzMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504197633", "bodyText": "BTW, I think we should be looking at getRawQuery() here, since getQuery() will give you the decoded form which is not what we want", "author": "dagnir", "createdAt": "2020-10-13T19:17:46Z", "path": "utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java", "diffHunk": "@@ -322,4 +328,15 @@ public static String appendUri(String baseUri, String path) {\n     public static boolean isSingleHeader(String h) {\n         return SINGLE_HEADERS.contains(StringUtils.lowerCase(h));\n     }\n+\n+    /**\n+     * Extracts query parameters from the given URI\n+     */\n+    public static Map<String, List<String>> uriParams(URI uri) {\n+        return Pattern.compile(QUERY_PARAM_PATTERN)\n+               .splitAsStream(uri.getQuery().trim())", "originalCommit": "f0d18f9e19130d49e3e8d77c41623d4ec3e53c2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxODYwNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504918607", "bodyText": "You're right, updated and adapted unit test", "author": "roexber", "createdAt": "2020-10-14T19:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NzYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "4f8f009ff380003adc3badaa870e50956e55addf", "chunk": "diff --git a/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java b/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java\nindex 78e5b65156..1dcdaa3337 100644\n--- a/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java\n+++ b/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java\n\n@@ -334,9 +334,9 @@ public final class SdkHttpUtils {\n      */\n     public static Map<String, List<String>> uriParams(URI uri) {\n         return Pattern.compile(QUERY_PARAM_PATTERN)\n-               .splitAsStream(uri.getQuery().trim())\n+               .splitAsStream(uri.getRawQuery().trim())\n                .map(s -> s.contains(\"=\") ? s.split(\"=\", 2) : new String[] {s, \"\"})\n-               .collect(groupingBy(a -> a[0], mapping(a -> a[1], toList())));\n+               .collect(groupingBy(a -> urlDecode(a[0]), mapping(a -> urlDecode(a[1]), toList())));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwMjExOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504202119", "bodyText": "I don't think this assertion is correct per my comment earlier re: parsing.\nSplitting reqParam=1234&oParam=3456%26reqParam%3D5678 on the & delimiter should give reqParam=1234 and oParam=3456%26reqParam%3D5678 as the two name-value pairs, then parsing each as a pair gives [reqParam, 1234] and [oParam, 3456%26reqParam%3D5678]", "author": "dagnir", "createdAt": "2020-10-13T19:25:46Z", "path": "http-client-spi/src/test/java/software/amazon/awssdk/http/SdkHttpRequestResponseTest.java", "diffHunk": "@@ -401,13 +402,41 @@ public BuilderProxy setMap(Map<String, List<String>> map) {\n         });\n     }\n \n+    @Test\n+    public void testSdkHttpFullRequestBuilderNoQueryParams() throws URISyntaxException {\n+        URI uri = new URI(\"https://github.com/aws/aws-sdk-java-v2/issues/2034\");\n+        final SdkHttpFullRequest sdkHttpFullRequest = SdkHttpFullRequest.builder().method(SdkHttpMethod.POST).uri(uri).build();\n+        assertThat(sdkHttpFullRequest.getUri().getQuery()).isNullOrEmpty();\n+    }\n+\n+    @Test\n+    public void testSdkHttpFullRequestBuilderDoNotKeepUriRequestParameters() throws URISyntaxException {\n+        URI uri = new URI(\"https://github.com/aws/aws-sdk-java-v2/issues/2034?reqParam=1234&oParam=3456&reqParam=5678\");\n+        final SdkHttpFullRequest sdkHttpFullRequest = SdkHttpFullRequest.builder().method(SdkHttpMethod.POST).uri(uri).build();\n+        assertThat(sdkHttpFullRequest.getUri().getQuery()).isNullOrEmpty();\n+    }\n+\n+    @Test\n+    public void testSdkHttpFullRequestBuilderUriWithQueryParams() throws URISyntaxException {\n+        URI uri = new URI(\"https://github.com/aws/aws-sdk-java-v2/issues/2034?reqParam=1234&oParam=3456%26reqParam%3D5678\");\n+        final SdkHttpFullRequest sdkHttpFullRequest =\n+            SdkHttpFullRequest.builder().method(SdkHttpMethod.POST).uriWithQueryParams(uri).build();\n+        assertThat(sdkHttpFullRequest.getUri().getQuery()).contains(\"reqParam=1234\", \"oParam=3456\", \"reqParam=5678\");", "originalCommit": "f0d18f9e19130d49e3e8d77c41623d4ec3e53c2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxODkxMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504918911", "bodyText": "Today I learned! updated and adapted unit test", "author": "roexber", "createdAt": "2020-10-14T19:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwMjExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "09f557d3c7cb368df19f51a0182a6904fe31d52e", "chunk": "diff --git a/http-client-spi/src/test/java/software/amazon/awssdk/http/SdkHttpRequestResponseTest.java b/http-client-spi/src/test/java/software/amazon/awssdk/http/SdkHttpRequestResponseTest.java\nindex 02c0eded9c..066aed1d3f 100644\n--- a/http-client-spi/src/test/java/software/amazon/awssdk/http/SdkHttpRequestResponseTest.java\n+++ b/http-client-spi/src/test/java/software/amazon/awssdk/http/SdkHttpRequestResponseTest.java\n\n@@ -420,7 +420,7 @@ public class SdkHttpRequestResponseTest {\n     public void testSdkHttpFullRequestBuilderUriWithQueryParams() throws URISyntaxException {\n         URI uri = new URI(\"https://github.com/aws/aws-sdk-java-v2/issues/2034?reqParam=1234&oParam=3456%26reqParam%3D5678\");\n         final SdkHttpFullRequest sdkHttpFullRequest =\n-            SdkHttpFullRequest.builder().method(SdkHttpMethod.POST).uriWithQueryParams(uri).build();\n+            SdkHttpFullRequest.builder().method(SdkHttpMethod.POST).uri(uri).build();\n         assertThat(sdkHttpFullRequest.getUri().getQuery()).contains(\"reqParam=1234\", \"oParam=3456\", \"reqParam=5678\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxOTc5OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504219799", "bodyText": "We should just fail instead of logging a warning here", "author": "dagnir", "createdAt": "2020-10-13T19:58:30Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java", "diffHunk": "@@ -349,6 +368,19 @@ private void copyHeadersIfNeeded() {\n             }\n         }\n \n+        @Override\n+        public SdkHttpFullRequest.Builder appendUriQueryParameter(String paramName, String paramValue) {\n+            try {\n+                this.uriQueryParameters.computeIfAbsent(paramName, k -> new ArrayList<>())\n+                                       .add(URLDecoder.decode(paramValue, StandardCharsets.UTF_8.toString()));\n+            } catch (UnsupportedEncodingException e) {\n+                log.warn(\"Could not decode {}={} using {}\", paramName, paramValue, StandardCharsets.UTF_8);", "originalCommit": "f0d18f9e19130d49e3e8d77c41623d4ec3e53c2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyMDU0Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504920542", "bodyText": "method is no longer needed", "author": "roexber", "createdAt": "2020-10-14T19:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxOTc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f8f009ff380003adc3badaa870e50956e55addf", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java\nindex 56dd72a8e1..c48e82af05 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/DefaultSdkHttpFullRequest.java\n\n@@ -368,18 +353,6 @@ final class DefaultSdkHttpFullRequest implements SdkHttpFullRequest {\n             }\n         }\n \n-        @Override\n-        public SdkHttpFullRequest.Builder appendUriQueryParameter(String paramName, String paramValue) {\n-            try {\n-                this.uriQueryParameters.computeIfAbsent(paramName, k -> new ArrayList<>())\n-                                       .add(URLDecoder.decode(paramValue, StandardCharsets.UTF_8.toString()));\n-            } catch (UnsupportedEncodingException e) {\n-                log.warn(\"Could not decode {}={} using {}\", paramName, paramValue, StandardCharsets.UTF_8);\n-                this.uriQueryParameters.computeIfAbsent(paramName, k -> new ArrayList<>())\n-                                       .add(paramValue);\n-            }\n-            return this;\n-        }\n \n         @Override\n         public DefaultSdkHttpFullRequest.Builder contentStreamProvider(ContentStreamProvider contentStreamProvider) {\n"}}, {"oid": "4f8f009ff380003adc3badaa870e50956e55addf", "url": "https://github.com/aws/aws-sdk-java-v2/commit/4f8f009ff380003adc3badaa870e50956e55addf", "message": "feature 2034: SdkHttpFullRequest builder.URI keep query parameters of provided URI if the uriWithQueryParams builder method is used", "committedDate": "2020-10-14T19:20:06Z", "type": "forcePushed"}, {"oid": "09f557d3c7cb368df19f51a0182a6904fe31d52e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/09f557d3c7cb368df19f51a0182a6904fe31d52e", "message": "feature 2034: SdkHttpFullRequest builder.uri keep query parameters of provided URI", "committedDate": "2020-10-14T19:36:45Z", "type": "forcePushed"}, {"oid": "4cd0e2d17bdc3487900e5aebcbe775e7fb11dfc5", "url": "https://github.com/aws/aws-sdk-java-v2/commit/4cd0e2d17bdc3487900e5aebcbe775e7fb11dfc5", "message": "feature 2034: SdkHttpFullRequest builder.uri keep query parameters of provided URI", "committedDate": "2020-10-14T19:38:45Z", "type": "forcePushed"}, {"oid": "a5f5dad44a93461b61e7f63e2c8b3a9b17b97136", "url": "https://github.com/aws/aws-sdk-java-v2/commit/a5f5dad44a93461b61e7f63e2c8b3a9b17b97136", "message": "feature 2034: SdkHttpFullRequest builder.uri keep query parameters of provided URI", "committedDate": "2020-10-14T19:41:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2MDc4NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504960784", "bodyText": "The result of Pattern.compile() itself should be reused, so we don't need to call compile() each time.\nprivate static final Pattern QUERY_PARAM_PATTERN = ...\nSame for split() below since it also uses regex compile under the hood", "author": "dagnir", "createdAt": "2020-10-14T20:44:11Z", "path": "utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java", "diffHunk": "@@ -322,4 +328,15 @@ public static String appendUri(String baseUri, String path) {\n     public static boolean isSingleHeader(String h) {\n         return SINGLE_HEADERS.contains(StringUtils.lowerCase(h));\n     }\n+\n+    /**\n+     * Extracts query parameters from the given URI\n+     */\n+    public static Map<String, List<String>> uriParams(URI uri) {\n+        return Pattern.compile(QUERY_PARAM_PATTERN)", "originalCommit": "a5f5dad44a93461b61e7f63e2c8b3a9b17b97136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4MTg1OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504981858", "bodyText": "BTW, I think a more accurate name would be \"QUERY_PARAM_DELIMETER_PATTERN\"", "author": "dagnir", "createdAt": "2020-10-14T21:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2MDc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MTc1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r505771755", "bodyText": "the split is safe to use in my opinion since it uses a StringTokenizer if only a single character is provided since java 7 according to http://hg.openjdk.java.net/jdk7/jdk7/jdk/rev/1ff977b938e5", "author": "roexber", "createdAt": "2020-10-15T18:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2MDc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8ef3f779f0c2e559bc66714d5d4620be0ed385cf", "chunk": "diff --git a/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java b/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java\nindex 1dcdaa3337..263850cfe3 100644\n--- a/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java\n+++ b/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java\n\n@@ -333,10 +335,10 @@ public final class SdkHttpUtils {\n      * Extracts query parameters from the given URI\n      */\n     public static Map<String, List<String>> uriParams(URI uri) {\n-        return Pattern.compile(QUERY_PARAM_PATTERN)\n-               .splitAsStream(uri.getRawQuery().trim())\n-               .map(s -> s.contains(\"=\") ? s.split(\"=\", 2) : new String[] {s, \"\"})\n-               .collect(groupingBy(a -> urlDecode(a[0]), mapping(a -> urlDecode(a[1]), toList())));\n+        return QUERY_PARAM_DELIMITER_PATTERN\n+                      .splitAsStream(uri.getRawQuery().trim())\n+                      .map(s -> s.contains(\"=\") ? s.split(\"=\", 2) : new String[] {s, null})\n+                      .collect(groupingBy(a -> urlDecode(a[0]), mapping(a -> urlDecode(a[1]), toList())));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3MzQ1Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504973453", "bodyText": "The existing set of query parameters set on the builder should be cleared first", "author": "dagnir", "createdAt": "2020-10-14T21:09:05Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java", "diffHunk": "@@ -134,18 +134,24 @@ default URI getUri() {\n      * {@link SdkHttpFullRequest#builder()}.\n      */\n     interface Builder extends CopyableBuilder<Builder, SdkHttpRequest> {\n+\n         /**\n-         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()}, and\n-         * {@link #encodedPath()} from a {@link URI} object.\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n+         * {@link #encodedPath()} and extracts query parameters from a {@link URI} object.\n          *\n          * @param uri URI containing protocol, host, port and path.\n          * @return This builder for method chaining.\n          */\n         default Builder uri(URI uri) {\n-            return this.protocol(uri.getScheme())\n+            Builder builder = this.protocol(uri.getScheme())\n                        .host(uri.getHost())\n                        .port(uri.getPort())\n                        .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+            if (uri.getRawQuery() != null) {\n+                SdkHttpUtils.uriParams(uri)\n+                            .forEach(this::putRawQueryParameter);\n+            }\n+            return builder;", "originalCommit": "a5f5dad44a93461b61e7f63e2c8b3a9b17b97136", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ef3f779f0c2e559bc66714d5d4620be0ed385cf", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\nindex 2c3b78ab14..088d9cd2c6 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpRequest.java\n\n@@ -134,7 +134,6 @@ public interface SdkHttpRequest extends SdkHttpHeaders, ToCopyableBuilder<SdkHtt\n      * {@link SdkHttpFullRequest#builder()}.\n      */\n     interface Builder extends CopyableBuilder<Builder, SdkHttpRequest> {\n-\n         /**\n          * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n          * {@link #encodedPath()} and extracts query parameters from a {@link URI} object.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3MzY2NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504973665", "bodyText": "Same here, the existing set of query parameters set on the builder should be cleared first", "author": "dagnir", "createdAt": "2020-10-14T21:09:31Z", "path": "http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java", "diffHunk": "@@ -56,19 +56,25 @@\n      * {@link SdkHttpFullRequest#builder()}.\n      */\n     interface Builder extends SdkHttpRequest.Builder {\n+\n         /**\n-         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()}, and\n-         * {@link #encodedPath()} from a {@link URI} object.\n+         * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n+         * {@link #encodedPath()} and extracts query parameters from a {@link URI} object.\n          *\n          * @param uri URI containing protocol, host, port and path.\n          * @return This builder for method chaining.\n          */\n         @Override\n         default Builder uri(URI uri) {\n-            return this.protocol(uri.getScheme())\n+            Builder builder =  this.protocol(uri.getScheme())\n                        .host(uri.getHost())\n                        .port(uri.getPort())\n                        .encodedPath(SdkHttpUtils.appendUri(uri.getRawPath(), encodedPath()));\n+            if (uri.getRawQuery() != null) {\n+                SdkHttpUtils.uriParams(uri)\n+                            .forEach(this::putRawQueryParameter);\n+            }\n+            return builder;", "originalCommit": "a5f5dad44a93461b61e7f63e2c8b3a9b17b97136", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ef3f779f0c2e559bc66714d5d4620be0ed385cf", "chunk": "diff --git a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\nindex ea15053d02..b4e945e173 100644\n--- a/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n+++ b/http-client-spi/src/main/java/software/amazon/awssdk/http/SdkHttpFullRequest.java\n\n@@ -56,7 +56,6 @@ public interface SdkHttpFullRequest\n      * {@link SdkHttpFullRequest#builder()}.\n      */\n     interface Builder extends SdkHttpRequest.Builder {\n-\n         /**\n          * Convenience method to set the {@link #protocol()}, {@link #host()}, {@link #port()},\n          * {@link #encodedPath()} and extracts query parameters from a {@link URI} object.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3NjIxOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504976218", "bodyText": "We should have tests for the two requests classes that we changed as well.", "author": "dagnir", "createdAt": "2020-10-14T21:15:03Z", "path": "utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java", "diffHunk": "@@ -173,4 +178,16 @@ public void headersFromCollectionWorksCorrectly() {\n         assertThat(SdkHttpUtils.firstMatchingHeaderFromCollection(headers, asList(\"foo\", \"nothing\"))).hasValue(\"bar\");\n         assertThat(SdkHttpUtils.firstMatchingHeaderFromCollection(headers, asList(\"foo\", \"other\"))).hasValue(\"foo\");\n     }\n+\n+    @Test\n+    public void uriParams() throws URISyntaxException {", "originalCommit": "a5f5dad44a93461b61e7f63e2c8b3a9b17b97136", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ef3f779f0c2e559bc66714d5d4620be0ed385cf", "chunk": "diff --git a/utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java b/utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java\nindex 50b3e6f7e0..e514974efc 100644\n--- a/utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java\n+++ b/utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java\n\n@@ -179,14 +179,44 @@ public class SdkHttpUtilsTest {\n         assertThat(SdkHttpUtils.firstMatchingHeaderFromCollection(headers, asList(\"foo\", \"other\"))).hasValue(\"foo\");\n     }\n \n+    @Test\n+    public void isSingleHeader() {\n+        assertThat(SdkHttpUtils.isSingleHeader(\"age\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"authorization\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-length\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-location\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-md5\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-range\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-type\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"date\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"etag\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"expires\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"from\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"host\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"if-modified-since\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"if-range\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"if-unmodified-since\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"last-modified\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"location\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"max-forwards\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"proxy-authorization\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"range\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"referer\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"retry-after\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"server\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"user-agent\")).isTrue();\n+\n+        assertThat(SdkHttpUtils.isSingleHeader(\"custom\")).isFalse();\n+    }\n+\n     @Test\n     public void uriParams() throws URISyntaxException {\n-        URI uri = new URI(\"https://github.com/aws/aws-sdk-java-v2/issues/2034?reqParam=1234&oParam=3456&reqParam=5678&noval\"\n+        URI uri = URI.create(\"https://github.com/aws/aws-sdk-java-v2/issues/2034?reqParam=1234&oParam=3456&reqParam=5678&noval\"\n                           + \"&decoded%26Part=equals%3Dval\");\n         Map<String, List<String>> uriParams = SdkHttpUtils.uriParams(uri);\n         assertThat(uriParams).contains(entry(\"reqParam\", Arrays.asList(\"1234\", \"5678\")),\n                                        entry(\"oParam\", Collections.singletonList(\"3456\")),\n-                                       entry(\"noval\", Arrays.asList(\"\")),\n+                                       entry(\"noval\", Arrays.asList((String)null)),\n                                        entry(\"decoded&Part\", Arrays.asList(\"equals=val\")));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3OTc4Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504979786", "bodyText": "Hmm I don't think using an empty string when there's no = is what we want; we should be setting null if there's no = for the parameter. There should be a test for the result of something like this is\nURI myUri = URI.create(\"https://github.com/aws/aws-sdk-for-java-v2?foo\");\n\nSdkHttpFullRequest request = SdkHttpFullRequest.builder().uri(myUri).build();\n\nrequest.getUri();\n\nto make sure that the result is not https://github.com/aws/aws-sdk-for-java-v2?foo=, which will likely be interpreted differently by the server", "author": "dagnir", "createdAt": "2020-10-14T21:22:27Z", "path": "utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java", "diffHunk": "@@ -322,4 +328,15 @@ public static String appendUri(String baseUri, String path) {\n     public static boolean isSingleHeader(String h) {\n         return SINGLE_HEADERS.contains(StringUtils.lowerCase(h));\n     }\n+\n+    /**\n+     * Extracts query parameters from the given URI\n+     */\n+    public static Map<String, List<String>> uriParams(URI uri) {\n+        return Pattern.compile(QUERY_PARAM_PATTERN)\n+               .splitAsStream(uri.getRawQuery().trim())\n+               .map(s -> s.contains(\"=\") ? s.split(\"=\", 2) : new String[] {s, \"\"})", "originalCommit": "a5f5dad44a93461b61e7f63e2c8b3a9b17b97136", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ef3f779f0c2e559bc66714d5d4620be0ed385cf", "chunk": "diff --git a/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java b/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java\nindex 1dcdaa3337..263850cfe3 100644\n--- a/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java\n+++ b/utils/src/main/java/software/amazon/awssdk/utils/http/SdkHttpUtils.java\n\n@@ -333,10 +335,10 @@ public final class SdkHttpUtils {\n      * Extracts query parameters from the given URI\n      */\n     public static Map<String, List<String>> uriParams(URI uri) {\n-        return Pattern.compile(QUERY_PARAM_PATTERN)\n-               .splitAsStream(uri.getRawQuery().trim())\n-               .map(s -> s.contains(\"=\") ? s.split(\"=\", 2) : new String[] {s, \"\"})\n-               .collect(groupingBy(a -> urlDecode(a[0]), mapping(a -> urlDecode(a[1]), toList())));\n+        return QUERY_PARAM_DELIMITER_PATTERN\n+                      .splitAsStream(uri.getRawQuery().trim())\n+                      .map(s -> s.contains(\"=\") ? s.split(\"=\", 2) : new String[] {s, null})\n+                      .collect(groupingBy(a -> urlDecode(a[0]), mapping(a -> urlDecode(a[1]), toList())));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4MDA5MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2082#discussion_r504980090", "bodyText": "As mentioned above, the value for noval should be null, not a list containing \"\".", "author": "dagnir", "createdAt": "2020-10-14T21:23:07Z", "path": "utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java", "diffHunk": "@@ -173,4 +178,16 @@ public void headersFromCollectionWorksCorrectly() {\n         assertThat(SdkHttpUtils.firstMatchingHeaderFromCollection(headers, asList(\"foo\", \"nothing\"))).hasValue(\"bar\");\n         assertThat(SdkHttpUtils.firstMatchingHeaderFromCollection(headers, asList(\"foo\", \"other\"))).hasValue(\"foo\");\n     }\n+\n+    @Test\n+    public void uriParams() throws URISyntaxException {\n+        URI uri = new URI(\"https://github.com/aws/aws-sdk-java-v2/issues/2034?reqParam=1234&oParam=3456&reqParam=5678&noval\"\n+                          + \"&decoded%26Part=equals%3Dval\");\n+        Map<String, List<String>> uriParams = SdkHttpUtils.uriParams(uri);\n+        assertThat(uriParams).contains(entry(\"reqParam\", Arrays.asList(\"1234\", \"5678\")),\n+                                       entry(\"oParam\", Collections.singletonList(\"3456\")),\n+                                       entry(\"noval\", Arrays.asList(\"\")),", "originalCommit": "a5f5dad44a93461b61e7f63e2c8b3a9b17b97136", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ef3f779f0c2e559bc66714d5d4620be0ed385cf", "chunk": "diff --git a/utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java b/utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java\nindex 50b3e6f7e0..e514974efc 100644\n--- a/utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java\n+++ b/utils/src/test/java/software/amazon/awssdk/utils/SdkHttpUtilsTest.java\n\n@@ -179,14 +179,44 @@ public class SdkHttpUtilsTest {\n         assertThat(SdkHttpUtils.firstMatchingHeaderFromCollection(headers, asList(\"foo\", \"other\"))).hasValue(\"foo\");\n     }\n \n+    @Test\n+    public void isSingleHeader() {\n+        assertThat(SdkHttpUtils.isSingleHeader(\"age\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"authorization\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-length\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-location\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-md5\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-range\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"content-type\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"date\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"etag\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"expires\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"from\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"host\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"if-modified-since\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"if-range\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"if-unmodified-since\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"last-modified\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"location\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"max-forwards\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"proxy-authorization\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"range\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"referer\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"retry-after\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"server\")).isTrue();\n+        assertThat(SdkHttpUtils.isSingleHeader(\"user-agent\")).isTrue();\n+\n+        assertThat(SdkHttpUtils.isSingleHeader(\"custom\")).isFalse();\n+    }\n+\n     @Test\n     public void uriParams() throws URISyntaxException {\n-        URI uri = new URI(\"https://github.com/aws/aws-sdk-java-v2/issues/2034?reqParam=1234&oParam=3456&reqParam=5678&noval\"\n+        URI uri = URI.create(\"https://github.com/aws/aws-sdk-java-v2/issues/2034?reqParam=1234&oParam=3456&reqParam=5678&noval\"\n                           + \"&decoded%26Part=equals%3Dval\");\n         Map<String, List<String>> uriParams = SdkHttpUtils.uriParams(uri);\n         assertThat(uriParams).contains(entry(\"reqParam\", Arrays.asList(\"1234\", \"5678\")),\n                                        entry(\"oParam\", Collections.singletonList(\"3456\")),\n-                                       entry(\"noval\", Arrays.asList(\"\")),\n+                                       entry(\"noval\", Arrays.asList((String)null)),\n                                        entry(\"decoded&Part\", Arrays.asList(\"equals=val\")));\n     }\n \n"}}, {"oid": "8ef3f779f0c2e559bc66714d5d4620be0ed385cf", "url": "https://github.com/aws/aws-sdk-java-v2/commit/8ef3f779f0c2e559bc66714d5d4620be0ed385cf", "message": "feature 2034: SdkHttpFullRequest builder.uri keep query parameters of provided URI", "committedDate": "2020-10-15T19:14:26Z", "type": "forcePushed"}, {"oid": "c91e7709c77f48cf7098fb5c732bc04547d785b2", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c91e7709c77f48cf7098fb5c732bc04547d785b2", "message": "feature 2034: SdkHttpFullRequest builder.uri keep query parameters of provided URI", "committedDate": "2020-10-16T08:37:38Z", "type": "commit"}, {"oid": "c91e7709c77f48cf7098fb5c732bc04547d785b2", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c91e7709c77f48cf7098fb5c732bc04547d785b2", "message": "feature 2034: SdkHttpFullRequest builder.uri keep query parameters of provided URI", "committedDate": "2020-10-16T08:37:38Z", "type": "forcePushed"}, {"oid": "54154d932d91a5fc1939b0b216362cd6d7c26d87", "url": "https://github.com/aws/aws-sdk-java-v2/commit/54154d932d91a5fc1939b0b216362cd6d7c26d87", "message": "Merge branch 'master' into httpclientspi-uri-with-query-params", "committedDate": "2020-10-16T17:46:32Z", "type": "commit"}, {"oid": "90d714319d63bd38bbb6b9fdcba23060e23bfab4", "url": "https://github.com/aws/aws-sdk-java-v2/commit/90d714319d63bd38bbb6b9fdcba23060e23bfab4", "message": "Merge branch 'master' into httpclientspi-uri-with-query-params", "committedDate": "2020-10-16T19:59:32Z", "type": "commit"}]}