{"pr_number": 1677, "pr_title": "ddb enhanced client javadoc for operations", "pr_createdAt": "2020-02-28T17:18:51Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1677", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNDM0MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385824340", "bodyText": "I think the language here is confusing/worrying. Maybe write it as 'The enhanced client does not currently support retrieving information about unprocessed keys.'?", "author": "bmaizels", "createdAt": "2020-02-28T17:24:24Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedClient.java", "diffHunk": "@@ -42,10 +43,46 @@\n      * @param tableName The name of the physical table persisted by DynamoDb.\n      * @param tableSchema A {@link TableSchema} that maps the table to a modelled object.\n      * @return A {@link DynamoDbTable} object that can be used to execute table operations against.\n-     * @param <T> THe modelled object type being mapped to this table.\n+     * @param <T> The modelled object type being mapped to this table.\n      */\n     <T> DynamoDbTable<T> table(String tableName, TableSchema<T> tableSchema);\n \n+    /**\n+     * Retrieves items from one or more tables by their primary keys, see {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link BatchGetItemEnhancedRequest}.\n+     * <p/>\n+     * <b>Partial results</b>. A single call has restraints on how much\n+     * data can be retrieved. If those limits are exceeded, the call will yield a partial result. This may also be the case if\n+     * provisional throughput is exceeded or there is an internal DynamoDb processing failure. The enhanced client does not\n+     * currently support retrieving information on partial results.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4ODAxMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387188010", "bodyText": "I re-worded this for both sync/async client.", "author": "cenedhryn", "createdAt": "2020-03-03T17:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNDM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedClient.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedClient.java\nindex a4ae8fd8c2..a3d7e06672 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedClient.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedClient.java\n\n@@ -25,17 +24,23 @@ import software.amazon.awssdk.enhanced.dynamodb.model.BatchGetItemEnhancedReques\n import software.amazon.awssdk.enhanced.dynamodb.model.BatchGetResultPage;\n import software.amazon.awssdk.enhanced.dynamodb.model.BatchWriteItemEnhancedRequest;\n import software.amazon.awssdk.enhanced.dynamodb.model.BatchWriteResult;\n+import software.amazon.awssdk.enhanced.dynamodb.model.ConditionCheck;\n+import software.amazon.awssdk.enhanced.dynamodb.model.DeleteItemEnhancedRequest;\n+import software.amazon.awssdk.enhanced.dynamodb.model.GetItemEnhancedRequest;\n+import software.amazon.awssdk.enhanced.dynamodb.model.PutItemEnhancedRequest;\n import software.amazon.awssdk.enhanced.dynamodb.model.TransactGetItemsEnhancedRequest;\n-import software.amazon.awssdk.enhanced.dynamodb.model.TransactGetResultPage;\n import software.amazon.awssdk.enhanced.dynamodb.model.TransactWriteItemsEnhancedRequest;\n import software.amazon.awssdk.enhanced.dynamodb.model.UpdateItemEnhancedRequest;\n import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n \n /**\n  * Synchronous interface for running commands against a DynamoDb database.\n+ * <p>\n+ * By default, all command methods throw an {@link UnsupportedOperationException} to prevent interface extensions from breaking\n+ * implementing classes.\n  */\n @SdkPublicApi\n-public interface DynamoDbEnhancedClient {\n+public interface DynamoDbEnhancedClient extends DynamoDbEnhancedResource {\n \n     /**\n      * Returns a mapped table that can be used to execute commands that work with mapped items against that table.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjMyNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826327", "bodyText": "We shouldn't include this in the documentation. Implementing classes will inherit this documentation at which point this line will make no sense at all.", "author": "bmaizels", "createdAt": "2020-02-28T17:29:04Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MzA0NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387193044", "bodyText": "cut", "author": "cenedhryn", "createdAt": "2020-03-03T17:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjQzMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826432", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:29:19Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjQ4NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826484", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:29:28Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjU5Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826593", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:29:40Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjY0Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826642", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:29:47Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjY5MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826691", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:29:53Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjcyOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826728", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:29:58Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjc3MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826771", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:30:04Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjgxNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826815", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:30:09Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjg1OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826859", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:30:13Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjg5MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826891", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:30:18Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(PutItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link PutItemEnhancedRequest.Builder} that includes the item\n+     * to enter into the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjkyMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826922", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:30:22Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(PutItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link PutItemEnhancedRequest.Builder} that includes the item\n+     * to enter into the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(Class<? extends T> itemClass, Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(ScanEnhancedRequest.builder().build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link ScanEnhancedRequest} defining how to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjk0MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826940", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:30:26Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(PutItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link PutItemEnhancedRequest.Builder} that includes the item\n+     * to enter into the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(Class<? extends T> itemClass, Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(ScanEnhancedRequest.builder().build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link ScanEnhancedRequest} defining how to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan(ScanEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(r -> r.limit(5));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link ScanEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNjk2Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385826966", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:30:30Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(PutItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link PutItemEnhancedRequest.Builder} that includes the item\n+     * to enter into the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(Class<? extends T> itemClass, Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(ScanEnhancedRequest.builder().build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link ScanEnhancedRequest} defining how to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan(ScanEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(r -> r.limit(5));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link ScanEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan(Consumer<ScanEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items using default settings.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan();\n+     * }\n+     * </pre>\n+     *\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNzAwMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385827001", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:30:35Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(PutItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link PutItemEnhancedRequest.Builder} that includes the item\n+     * to enter into the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(Class<? extends T> itemClass, Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(ScanEnhancedRequest.builder().build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link ScanEnhancedRequest} defining how to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan(ScanEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(r -> r.limit(5));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link ScanEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan(Consumer<ScanEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items using default settings.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan();\n+     * }\n+     * </pre>\n+     *\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Updates an item in the mapped table.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link UpdateItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API UpdateItem operation. Consult the UpdateItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.updateItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link UpdateItemEnhancedRequest} that includes the item to be updated,\n+     * its class and optional directives.\n+     * @return The updated item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNzAzMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385827031", "bodyText": "Remove as per previous comment.", "author": "bmaizels", "createdAt": "2020-02-28T17:30:39Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(PutItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link PutItemEnhancedRequest.Builder} that includes the item\n+     * to enter into the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(Class<? extends T> itemClass, Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(ScanEnhancedRequest.builder().build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link ScanEnhancedRequest} defining how to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan(ScanEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(r -> r.limit(5));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link ScanEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan(Consumer<ScanEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items using default settings.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan();\n+     * }\n+     * </pre>\n+     *\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Updates an item in the mapped table.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link UpdateItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API UpdateItem operation. Consult the UpdateItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.updateItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link UpdateItemEnhancedRequest} that includes the item to be updated,\n+     * its class and optional directives.\n+     * @return The updated item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T updateItem(UpdateItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Updates an item in the mapped table.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link UpdateItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API UpdateItem operation. Consult the UpdateItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.updateItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link UpdateItemEnhancedRequest.Builder} that includes the item\n+     * to be updated, its class and optional directives.\n+     * @return The updated item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyODI2OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385828269", "bodyText": "Because the enhanced library operates on whole objects, getItem retrieves all available attribute values for the item.\n\n\nStrictly speaking this is misleading, because if there are attributes on the physical record that are not mapped by the TableSchema they will be ignored. I think we should just omit this sentence I can't see how it's adding value.", "author": "bmaizels", "createdAt": "2020-02-28T17:33:35Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MzQzMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387193432", "bodyText": "cut", "author": "cenedhryn", "createdAt": "2020-03-03T17:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyODI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyODUwMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385828503", "bodyText": "Same comment as above.", "author": "bmaizels", "createdAt": "2020-02-28T17:34:12Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyODcwOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385828709", "bodyText": "'Executes a query against the primary index of the table using a QueryConditional expression to retrieve...", "author": "bmaizels", "createdAt": "2020-02-28T17:34:45Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MzUyOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387193528", "bodyText": "Re-worded.", "author": "cenedhryn", "createdAt": "2020-03-03T17:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyODcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyOTI0OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385829248", "bodyText": "TMI for his part of the javadoc I think. I'd let them explore the QueryEnhancedRequest, otherwise we have to remember to keep this up to date.", "author": "bmaizels", "createdAt": "2020-02-28T17:36:05Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1ODI3NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r386058274", "bodyText": "Yes, I had already made that change but forgot to remove these lines.", "author": "cenedhryn", "createdAt": "2020-02-29T21:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyOTI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyOTUyNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385829525", "bodyText": "For this example I'd use a fully qualified name rather than implied static import, so QueryConditional.equalTo(, also the invocation of Key is not using the current interface.", "author": "bmaizels", "createdAt": "2020-02-28T17:36:37Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMDUwMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385830501", "bodyText": "Results are sorted by sort key value in ascending order.\n\n\nThis is only by default, this can be overridden in the enhanced request. We should either omit this or qualify that statement appropriately.", "author": "bmaizels", "createdAt": "2020-02-28T17:38:56Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5Mzc0OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387193749", "bodyText": "Re-worded.", "author": "cenedhryn", "createdAt": "2020-03-03T17:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMDUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMDkyMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385830921", "bodyText": "This doesn't match the javadoc for the non-consumer version. They should be almost identical.", "author": "bmaizels", "createdAt": "2020-02-28T17:40:04Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMTI1Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385831256", "bodyText": "UpdateItemEnhancedRequest in a PutItem?", "author": "bmaizels", "createdAt": "2020-02-28T17:40:52Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5Mzg3OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387193878", "bodyText": "fixed", "author": "cenedhryn", "createdAt": "2020-03-03T17:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMTI1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMjY1OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385832658", "bodyText": "Probably should have an example that puts something in the request, otherwise they should be using scan()", "author": "bmaizels", "createdAt": "2020-02-28T17:43:57Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(PutItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link PutItemEnhancedRequest.Builder} that includes the item\n+     * to enter into the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(Class<? extends T> itemClass, Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(ScanEnhancedRequest.builder().build());", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NDAzOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387194039", "bodyText": "fixed", "author": "cenedhryn", "createdAt": "2020-03-03T17:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMjY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMzYwMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385833600", "bodyText": "I think for scan and query we should point out that each time a new page is retrieved from the iterator a call to DynamoDb is made. This is a very different pattern to the way other operations work so I don't want to surprise people in a bad way.", "author": "bmaizels", "createdAt": "2020-02-28T17:46:05Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(PutItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link PutItemEnhancedRequest.Builder} that includes the item\n+     * to enter into the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(Class<? extends T> itemClass, Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MTYzNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387191637", "bodyText": "I did not have that 100% clear myself. Added more context.", "author": "cenedhryn", "createdAt": "2020-03-03T17:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMzYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNDUxNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385834516", "bodyText": "I feel like this is a bit sparse. Maybe we should borrow some lines from the DDB UpdateItem API documentation to explain what it does, at a minimum how is it different from PutItem?", "author": "bmaizels", "createdAt": "2020-02-28T17:47:56Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java", "diffHunk": "@@ -46,66 +50,380 @@\n      */\n     DynamoDbIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p/>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     *\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void createTable() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(DeleteItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link DeleteItemEnhancedRequest} with key and optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(DeleteItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Deletes a single item from the mapped table using a supplied primary {@link Key}.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link DeleteItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API DeleteItem operation. Consult the DeleteItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.delete(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link DeleteItemEnhancedRequest} with key and\n+     * optional directives for deleting an item from the table.\n+     * @return The deleted item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T deleteItem(Consumer<DeleteItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(GetItemEnhancedRequest.builder().key(key).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link GetItemEnhancedRequest} with key and optional directives for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(GetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves a single item from the mapped table using a supplied primary {@link Key}. Because the enhanced library operates\n+     *      * on whole objects, getItem retrieves all available attribute values for the item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link GetItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API GetItem operation. Consult the GetItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * MyItem item = mappedTable.getItem(r -> r.key(key));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link GetItemEnhancedRequest.Builder} with key and optional directives\n+     * for retrieving an item from the table.\n+     * @return The retrieved item\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default T getItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest} and include:\n+     * <ul>\n+     *     <li>{@link QueryEnhancedRequest#filterExpression()} - Filters the returned results from the database.</li>\n+     *     <li>{@link QueryEnhancedRequest#limit()} - Sets the maximal number of results per page</li>\n+     * </ul>\n+     * This operation calls the low-level DynamoDB API Query operation. Consult the Query documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(QueryEnhancedRequest.builder().queryConditional(queryConditional).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link QueryEnhancedRequest} defining the query conditions and how\n+     * to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(QueryEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Executes a query against the table using {@link QueryConditional} expressions to retrieve a list of items matching the\n+     * given conditions.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link QueryEnhancedRequest}.\n+     *\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * QueryConditional queryConditional = equalTo(Key.create(stringValue(\"id-value\")));\n+     * mappedTable.query(r -> r.queryConditional(queryConditional));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link QueryEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page. Results are sorted by sort key value in ascending order.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> query(Consumer<QueryEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(UpdateItemEnhancedRequest.builder(MyItem.class).item(item).build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link PutItemEnhancedRequest} that includes the item to enter into\n+     * the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(PutItemEnhancedRequest<T> request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts a single item in the mapped table. If the table contains an item with the same primary key, it will be replaced with\n+     * this item.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link PutItemEnhancedRequest}.\n+     * <p/>\n+     * This operation calls the low-level DynamoDB API PutItem operation. Consult the PutItem documentation for\n+     * further details and constraints.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * mappedTable.putItem(MyItem.class, r -> r.item(item));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link PutItemEnhancedRequest.Builder} that includes the item\n+     * to enter into the table, its class and optional directives.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default Void putItem(Class<? extends T> itemClass, Consumer<PutItemEnhancedRequest.Builder<T>> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(ScanEnhancedRequest.builder().build());\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link ScanEnhancedRequest} defining how to handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan(ScanEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items.\n+     * <p/>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link ScanEnhancedRequest}.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan(r -> r.limit(5));\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link ScanEnhancedRequest} defining the query conditions and how to\n+     * handle the results.\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan(Consumer<ScanEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Scans the table and retrieves all items using default settings.\n+     * <p/>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * mappedTable.scan();\n+     * }\n+     * </pre>\n+     *\n+     * @return an iterator of type {@link SdkIterable} with paginated results (see {@link Page}). If no matches are found,\n+     * the iterator will contain an empty page.\n+     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n+     */\n     default SdkIterable<Page<T>> scan() {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Updates an item in the mapped table.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NDMxNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387194315", "bodyText": "Wrote more; please check and see if sufficient/correct.", "author": "cenedhryn", "createdAt": "2020-03-03T17:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNDUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\nindex e64aee4674..531a7446f7 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbTable.java\n\n@@ -53,16 +52,29 @@ public interface DynamoDbTable<T> extends MappedTableResource<T> {\n     /**\n      * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n      * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n-     * <p/>\n+     * <p>\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n-     * <p/>\n+     * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n      * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n      * library to wait for/check the status of a created table. You must provide this functionality yourself.\n      * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build());\n+     * }\n+     * </pre>\n      *\n      * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n-     * @throws UnsupportedOperationException if there exists no overriding implementation of this method\n      */\n     default Void createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNjM5MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385836391", "bodyText": "Although this is accurate I don't think it's the right way to express what this class is. We should describe its purpose rather than its implementation. The important components of this object are: 1) It's required to make a BatchGetItem request, 2) It contains references to tables and keys to look up, 3) it may contain additional information about how to handle the call or process the results.", "author": "bmaizels", "createdAt": "2020-02-28T17:52:12Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java", "diffHunk": "@@ -23,6 +23,9 @@\n \n import software.amazon.awssdk.annotations.SdkPublicApi;\n \n+/**\n+ * Defines an immutable list of {@link ReadBatch}.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4ODM4MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387188380", "bodyText": "I have re-worded the description with the above intent.", "author": "cenedhryn", "createdAt": "2020-03-03T17:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNjM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\nindex 0516874e0e..0ae91348ef 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\n\n@@ -20,11 +20,14 @@ import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n-\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\n \n /**\n- * Defines an immutable list of {@link ReadBatch}.\n+ * Defines parameters used for the batchGetItem() operation (such as\n+ * {@link DynamoDbEnhancedClient#batchGetItem(BatchGetItemEnhancedRequest)}).\n+ * <p>\n+ * A request contains references to keys and tables organized into one {@link ReadBatch} object per queried table.\n  */\n @SdkPublicApi\n public final class BatchGetItemEnhancedRequest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNjkyNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385836925", "bodyText": "This may not be true in the future and we'd probably forget to change this. Again I'd stick to 'describe the purpose of this thing'. In this case its purpose is to create a newly initialized builder for a BatchGetItemEnhancedRequest object.", "author": "bmaizels", "createdAt": "2020-02-28T17:53:25Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java", "diffHunk": "@@ -32,14 +35,24 @@ private BatchGetItemEnhancedRequest(Builder builder) {\n         this.readBatches = getListIfExist(builder.readBatches);\n     }\n \n+    /**\n+     * All requests must be constructed using a Builder.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4ODU3Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387188577", "bodyText": "Re-worded.", "author": "cenedhryn", "createdAt": "2020-03-03T17:47:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNjkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\nindex 0516874e0e..0ae91348ef 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\n\n@@ -36,22 +39,21 @@ public final class BatchGetItemEnhancedRequest {\n     }\n \n     /**\n-     * All requests must be constructed using a Builder.\n-     * @return a builder of this type\n+     * Creates a newly initialized builder for a request object.\n      */\n     public static Builder builder() {\n         return new Builder();\n     }\n \n     /**\n-     * @return a builder with all existing values set\n+     * Returns a builder initialized with all existing values on the request object.\n      */\n     public Builder toBuilder() {\n         return new Builder().readBatches(readBatches);\n     }\n \n     /**\n-     * @return a collection of {@link ReadBatch}\n+     * Returns the collection of {@link ReadBatch} in this request object.\n      */\n     public Collection<ReadBatch> readBatches() {\n         return readBatches;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNzM0MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385837340", "bodyText": "Stylistically when I've been annotating these I usually omit the @return and instead describe what it is. Maybe you found this from another class though in which case ok.", "author": "bmaizels", "createdAt": "2020-02-28T17:54:21Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java", "diffHunk": "@@ -32,14 +35,24 @@ private BatchGetItemEnhancedRequest(Builder builder) {\n         this.readBatches = getListIfExist(builder.readBatches);\n     }\n \n+    /**\n+     * All requests must be constructed using a Builder.\n+     * @return a builder of this type\n+     */\n     public static Builder builder() {\n         return new Builder();\n     }\n \n+    /**\n+     * @return a builder with all existing values set", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4ODkzMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387188931", "bodyText": "I agree it looks nicer. Updated.", "author": "cenedhryn", "createdAt": "2020-03-03T17:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNzM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\nindex 0516874e0e..0ae91348ef 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\n\n@@ -36,22 +39,21 @@ public final class BatchGetItemEnhancedRequest {\n     }\n \n     /**\n-     * All requests must be constructed using a Builder.\n-     * @return a builder of this type\n+     * Creates a newly initialized builder for a request object.\n      */\n     public static Builder builder() {\n         return new Builder();\n     }\n \n     /**\n-     * @return a builder with all existing values set\n+     * Returns a builder initialized with all existing values on the request object.\n      */\n     public Builder toBuilder() {\n         return new Builder().readBatches(readBatches);\n     }\n \n     /**\n-     * @return a collection of {@link ReadBatch}\n+     * Returns the collection of {@link ReadBatch} in this request object.\n      */\n     public Collection<ReadBatch> readBatches() {\n         return readBatches;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNzgwNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385837805", "bodyText": "These are incomplete, you probably know that though.", "author": "bmaizels", "createdAt": "2020-02-28T17:55:21Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java", "diffHunk": "@@ -67,22 +80,40 @@ public int hashCode() {\n         return readBatches != null ? Collections.unmodifiableList(readBatches) : null;\n     }\n \n+    /**\n+     * Use this builder to create a request with the\n+     */\n     public static final class Builder {\n         private List<ReadBatch> readBatches;\n \n         private Builder() {\n         }\n \n+        /**\n+         *\n+         * @param readBatches\n+         * @return\n+         */\n         public Builder readBatches(Collection<ReadBatch> readBatches) {\n             this.readBatches = readBatches != null ? new ArrayList<>(readBatches) : null;\n             return this;\n         }\n \n+        /**\n+         *\n+         * @param readBatches\n+         * @return\n+         */\n         public Builder readBatches(ReadBatch... readBatches) {\n             this.readBatches = Arrays.asList(readBatches);\n             return this;\n         }\n \n+        /**\n+         *\n+         * @param readBatch\n+         * @return\n+         */", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\nindex 0516874e0e..0ae91348ef 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetItemEnhancedRequest.java\n\n@@ -81,7 +83,7 @@ public final class BatchGetItemEnhancedRequest {\n     }\n \n     /**\n-     * Use this builder to create a request with the\n+     * A builder that is used to create a request with the desired parameters.\n      */\n     public static final class Builder {\n         private List<ReadBatch> readBatches;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzODE1OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385838158", "bodyText": "I would explicitly mention and link the getItem method here. Probably pick the synchronous one so include the words 'such as...'", "author": "bmaizels", "createdAt": "2020-02-28T17:56:04Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java", "diffHunk": "@@ -20,6 +20,11 @@\n import software.amazon.awssdk.annotations.SdkPublicApi;\n import software.amazon.awssdk.enhanced.dynamodb.Key;\n \n+/**\n+ * Defines parameters used to retrieve an item from a DynamoDb table.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTE4MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387189181", "bodyText": "Added references to ops in all request objects.", "author": "cenedhryn", "createdAt": "2020-03-03T17:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzODE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java\nindex 9b6ef08f71..7025bb35eb 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java\n\n@@ -16,14 +16,16 @@\n package software.amazon.awssdk.enhanced.dynamodb.model;\n \n import java.util.function.Consumer;\n-\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbAsyncTable;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\n import software.amazon.awssdk.enhanced.dynamodb.Key;\n \n /**\n- * Defines parameters used to retrieve an item from a DynamoDb table.\n- * <p/>\n- * A valid request object must contain a {@link Key}.\n+ * Defines parameters used to retrieve an item from a DynamoDb table using the getItem() operation (such as\n+ * {@link DynamoDbTable#getItem(GetItemEnhancedRequest)} or {@link DynamoDbAsyncTable#getItem(GetItemEnhancedRequest)}).\n+ * <p>\n+ * A valid request object must contain a primary {@link Key} to reference the item to get.\n  */\n @SdkPublicApi\n public final class GetItemEnhancedRequest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzODk0MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385838940", "bodyText": "We should note that the default is 'false'.", "author": "bmaizels", "createdAt": "2020-02-28T17:57:41Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java", "diffHunk": "@@ -71,23 +89,48 @@ public int hashCode() {\n         return result;\n     }\n \n+    /**\n+     * Use this builder to create a request with the desired parameters.\n+     * <p/>\n+     * <b>Note</b>: A valid request builder must define a {@link Key}.\n+     */\n     public static final class Builder {\n         private Key key;\n         private Boolean consistentRead;\n \n         private Builder() {\n         }\n \n+        /**\n+         Determines the read consistency model: If set to true, the operation uses strongly consistent reads; otherwise,\n+         the operation uses eventually consistent reads.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTM5NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387189394", "bodyText": "Done.", "author": "cenedhryn", "createdAt": "2020-03-03T17:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzODk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java\nindex 9b6ef08f71..7025bb35eb 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java\n\n@@ -90,8 +92,8 @@ public final class GetItemEnhancedRequest {\n     }\n \n     /**\n-     * Use this builder to create a request with the desired parameters.\n-     * <p/>\n+     * A builder that is used to create a request with the desired parameters.\n+     * <p>\n      * <b>Note</b>: A valid request builder must define a {@link Key}.\n      */\n     public static final class Builder {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzOTI0MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385839240", "bodyText": "How is it used? Let's be explicit and say that it will be used to match the item that is retrieved.", "author": "bmaizels", "createdAt": "2020-02-28T17:58:12Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java", "diffHunk": "@@ -71,23 +89,48 @@ public int hashCode() {\n         return result;\n     }\n \n+    /**\n+     * Use this builder to create a request with the desired parameters.\n+     * <p/>\n+     * <b>Note</b>: A valid request builder must define a {@link Key}.\n+     */\n     public static final class Builder {\n         private Key key;\n         private Boolean consistentRead;\n \n         private Builder() {\n         }\n \n+        /**\n+         Determines the read consistency model: If set to true, the operation uses strongly consistent reads; otherwise,\n+         the operation uses eventually consistent reads.\n+         *\n+         * @param consistentRead sets consistency model of the operation to use strong consistency\n+         * @return a builder of this type\n+         */\n         public Builder consistentRead(Boolean consistentRead) {\n             this.consistentRead = consistentRead;\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link Key} to use in the request.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTU5NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387189594", "bodyText": "Re-worded with above intent.", "author": "cenedhryn", "createdAt": "2020-03-03T17:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzOTI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java\nindex 9b6ef08f71..7025bb35eb 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/GetItemEnhancedRequest.java\n\n@@ -90,8 +92,8 @@ public final class GetItemEnhancedRequest {\n     }\n \n     /**\n-     * Use this builder to create a request with the desired parameters.\n-     * <p/>\n+     * A builder that is used to create a request with the desired parameters.\n+     * <p>\n      * <b>Note</b>: A valid request builder must define a {@link Key}.\n      */\n     public static final class Builder {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzOTY1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385839655", "bodyText": "We should explicitly mention the 'Query' operation here rather than just imply it.", "author": "bmaizels", "createdAt": "2020-02-28T17:59:06Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -22,6 +22,14 @@\n import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n \n+/**\n+ * Defines parameters used to when querying a DynamoDb table.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTg0NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387189845", "bodyText": "As above, updated all methods.", "author": "cenedhryn", "createdAt": "2020-03-03T17:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzOTY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 45c9104dd3..b90745a69e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -17,17 +17,19 @@ package software.amazon.awssdk.enhanced.dynamodb.model;\n \n import java.util.HashMap;\n import java.util.Map;\n-\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbAsyncIndex;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\n import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n \n /**\n- * Defines parameters used to when querying a DynamoDb table.\n- * <p/>\n+ * Defines parameters used to when querying a DynamoDb table or index using the query() operation (such as\n+ * {@link DynamoDbTable#query(QueryEnhancedRequest)} or {@link DynamoDbAsyncIndex#query(QueryEnhancedRequest)}).\n+ * <p>\n  * A valid request object must contain a {@link QueryConditional} condition specifying how DynamoDb\n  * should match items in the table.\n- * <p/>\n+ * <p>\n  * All other parameters are optional.\n  */\n @SdkPublicApi\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzOTk2MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385839961", "bodyText": "Just noting these are incomplete.", "author": "bmaizels", "createdAt": "2020-02-28T17:59:47Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -54,26 +69,45 @@ public Builder toBuilder() {\n                         .filterExpression(filterExpression);\n     }\n \n+    /**\n+     * @return The conditions of the query\n+     */\n     public QueryConditional queryConditional() {\n         return queryConditional;\n     }\n \n+    /**\n+     * @return\n+     */\n     public Map<String, AttributeValue> exclusiveStartKey() {\n         return exclusiveStartKey;\n     }\n \n+    /**\n+     * @return\n+     */\n     public Boolean scanIndexForward() {\n         return scanIndexForward;\n     }\n \n+    /**\n+     * @return\n+     */\n     public Integer limit() {\n         return limit;\n     }\n \n+    /**\n+     * @return whether or not this request will use consistent read\n+     */\n     public Boolean consistentRead() {\n         return consistentRead;\n     }\n \n+    /**\n+     *\n+     * @return\n+     */", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 45c9104dd3..b90745a69e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -70,43 +71,43 @@ public final class QueryEnhancedRequest {\n     }\n \n     /**\n-     * @return The conditions of the query\n+     * Returns the matching condition of the query.\n      */\n     public QueryConditional queryConditional() {\n         return queryConditional;\n     }\n \n     /**\n-     * @return\n+     * Returns the value of the exclusive start key set on this request object, or null if it doesn't exist.\n      */\n     public Map<String, AttributeValue> exclusiveStartKey() {\n         return exclusiveStartKey;\n     }\n \n     /**\n-     * @return\n+     * Returns the value of scan index forward, meaning an ascending result sort order, or true if it\n+     * has not been set.\n      */\n     public Boolean scanIndexForward() {\n         return scanIndexForward;\n     }\n \n     /**\n-     * @return\n+     * Returns the value of limit set on this request object, or null if it doesn't exist.\n      */\n     public Integer limit() {\n         return limit;\n     }\n \n     /**\n-     * @return whether or not this request will use consistent read\n+     * Returns the value of consistent read, or false if it has not been set.\n      */\n     public Boolean consistentRead() {\n         return consistentRead;\n     }\n \n     /**\n-     *\n-     * @return\n+     * Returns the return result filter {@link Expression} set on this request object, or null if it doesn't exist.\n      */\n     public Expression filterExpression() {\n         return filterExpression;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MDE5NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385840194", "bodyText": "Can we say what it is rather than just what you should do with it.", "author": "bmaizels", "createdAt": "2020-02-28T18:00:16Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -121,6 +155,9 @@ public int hashCode() {\n         return result;\n     }\n \n+    /**\n+     * Use this builder to create a request with the desired parameters.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTk3OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387189978", "bodyText": "Yes, updated.", "author": "cenedhryn", "createdAt": "2020-03-03T17:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MDE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 45c9104dd3..b90745a69e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -156,7 +157,9 @@ public final class QueryEnhancedRequest {\n     }\n \n     /**\n-     * Use this builder to create a request with the desired parameters.\n+     * A builder that is used to create a request with the desired parameters.\n+     * <p>\n+     * A valid builder must set the {@link #queryConditional} parameter. Other parameters are optional.\n      */\n     public static final class Builder {\n         private QueryConditional queryConditional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MDY3Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385840677", "bodyText": "The way this is written makes it sound like you have to put something in this field and that could cause confusion.", "author": "bmaizels", "createdAt": "2020-02-28T18:01:21Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -132,31 +169,78 @@ public int hashCode() {\n         private Builder() {\n         }\n \n+        /**\n+         * Determines the matching conditions for this query request. See {@link QueryConditional} for examples\n+         * and constraints.\n+         *\n+         * @param queryConditional the query conditions\n+         * @return a builder of this type\n+         */\n         public Builder queryConditional(QueryConditional queryConditional) {\n             this.queryConditional = queryConditional;\n             return this;\n         }\n \n+        /**\n+         * Results are sorted by sort key in ascending order if {@link #scanIndexForward} is true. If its false, the\n+         * order is descending. The default value is true.\n+         *\n+         * @param scanIndexForward the sort order\n+         * @return a builder of this type\n+         */\n         public Builder scanIndexForward(Boolean scanIndexForward) {\n             this.scanIndexForward = scanIndexForward;\n             return this;\n         }\n \n+        /**\n+         * The primary key of the first item that this operation will evaluate. Use the value that was returned for\n+         * {@link Page#lastEvaluatedKey()} in the previous operation.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDA2NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387190064", "bodyText": "Re-worded.", "author": "cenedhryn", "createdAt": "2020-03-03T17:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MDY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 45c9104dd3..b90745a69e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -171,7 +174,7 @@ public final class QueryEnhancedRequest {\n \n         /**\n          * Determines the matching conditions for this query request. See {@link QueryConditional} for examples\n-         * and constraints.\n+         * and constraints. <b>Required</b>.\n          *\n          * @param queryConditional the query conditions\n          * @return a builder of this type\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MDg3OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385840879", "bodyText": "Grammar: the primary key value to start evaluation from?", "author": "bmaizels", "createdAt": "2020-02-28T18:01:49Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -132,31 +169,78 @@ public int hashCode() {\n         private Builder() {\n         }\n \n+        /**\n+         * Determines the matching conditions for this query request. See {@link QueryConditional} for examples\n+         * and constraints.\n+         *\n+         * @param queryConditional the query conditions\n+         * @return a builder of this type\n+         */\n         public Builder queryConditional(QueryConditional queryConditional) {\n             this.queryConditional = queryConditional;\n             return this;\n         }\n \n+        /**\n+         * Results are sorted by sort key in ascending order if {@link #scanIndexForward} is true. If its false, the\n+         * order is descending. The default value is true.\n+         *\n+         * @param scanIndexForward the sort order\n+         * @return a builder of this type\n+         */\n         public Builder scanIndexForward(Boolean scanIndexForward) {\n             this.scanIndexForward = scanIndexForward;\n             return this;\n         }\n \n+        /**\n+         * The primary key of the first item that this operation will evaluate. Use the value that was returned for\n+         * {@link Page#lastEvaluatedKey()} in the previous operation.\n+         *\n+         * @param exclusiveStartKey the primary key value to start evaluate", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDE2Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387190162", "bodyText": "Re-worded. Hopefully to the better...", "author": "cenedhryn", "createdAt": "2020-03-03T17:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MDg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 45c9104dd3..b90745a69e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -171,7 +174,7 @@ public final class QueryEnhancedRequest {\n \n         /**\n          * Determines the matching conditions for this query request. See {@link QueryConditional} for examples\n-         * and constraints.\n+         * and constraints. <b>Required</b>.\n          *\n          * @param queryConditional the query conditions\n          * @return a builder of this type\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MTE1Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385841152", "bodyText": "We should state what the default behavior is", "author": "bmaizels", "createdAt": "2020-02-28T18:02:27Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -132,31 +169,78 @@ public int hashCode() {\n         private Builder() {\n         }\n \n+        /**\n+         * Determines the matching conditions for this query request. See {@link QueryConditional} for examples\n+         * and constraints.\n+         *\n+         * @param queryConditional the query conditions\n+         * @return a builder of this type\n+         */\n         public Builder queryConditional(QueryConditional queryConditional) {\n             this.queryConditional = queryConditional;\n             return this;\n         }\n \n+        /**\n+         * Results are sorted by sort key in ascending order if {@link #scanIndexForward} is true. If its false, the\n+         * order is descending. The default value is true.\n+         *\n+         * @param scanIndexForward the sort order\n+         * @return a builder of this type\n+         */\n         public Builder scanIndexForward(Boolean scanIndexForward) {\n             this.scanIndexForward = scanIndexForward;\n             return this;\n         }\n \n+        /**\n+         * The primary key of the first item that this operation will evaluate. Use the value that was returned for\n+         * {@link Page#lastEvaluatedKey()} in the previous operation.\n+         *\n+         * @param exclusiveStartKey the primary key value to start evaluate\n+         * @return a builder of this type\n+         */\n         public Builder exclusiveStartKey(Map<String, AttributeValue> exclusiveStartKey) {\n             this.exclusiveStartKey = exclusiveStartKey != null ? new HashMap<>(exclusiveStartKey) : null;\n             return this;\n         }\n \n+        /**\n+         * Sets a limit on how many items to evaluate in the query. If not set, the operation uses\n+         * the maximum values allowed.\n+         * <p/>\n+         * <b>Note:</b>The limit does not refer to the number of items to return, but how many items\n+         * the database should evaluate while executing the query. Use limit together with {@link Page#lastEvaluatedKey()}\n+         * and {@link #exclusiveStartKey} in subsequent query calls to evaluate <em>limit</em> items per call.\n+         *\n+         * @param limit the maximum number of items to evalute\n+         * @return a builder of this type\n+         */\n         public Builder limit(Integer limit) {\n             this.limit = limit;\n             return this;\n         }\n \n+        /**\n+         Determines the read consistency model: If set to true, the operation uses strongly consistent reads; otherwise,\n+         the operation uses eventually consistent reads.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDI0NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387190245", "bodyText": "Added more information.", "author": "cenedhryn", "createdAt": "2020-03-03T17:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MTE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 45c9104dd3..b90745a69e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -171,7 +174,7 @@ public final class QueryEnhancedRequest {\n \n         /**\n          * Determines the matching conditions for this query request. See {@link QueryConditional} for examples\n-         * and constraints.\n+         * and constraints. <b>Required</b>.\n          *\n          * @param queryConditional the query conditions\n          * @return a builder of this type\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MTQwMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385841403", "bodyText": "We should make it clear that this filter does not reduce the cost of your query, it is applied after the database finds items matching your QueryConditional.", "author": "bmaizels", "createdAt": "2020-02-28T18:03:03Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -132,31 +169,78 @@ public int hashCode() {\n         private Builder() {\n         }\n \n+        /**\n+         * Determines the matching conditions for this query request. See {@link QueryConditional} for examples\n+         * and constraints.\n+         *\n+         * @param queryConditional the query conditions\n+         * @return a builder of this type\n+         */\n         public Builder queryConditional(QueryConditional queryConditional) {\n             this.queryConditional = queryConditional;\n             return this;\n         }\n \n+        /**\n+         * Results are sorted by sort key in ascending order if {@link #scanIndexForward} is true. If its false, the\n+         * order is descending. The default value is true.\n+         *\n+         * @param scanIndexForward the sort order\n+         * @return a builder of this type\n+         */\n         public Builder scanIndexForward(Boolean scanIndexForward) {\n             this.scanIndexForward = scanIndexForward;\n             return this;\n         }\n \n+        /**\n+         * The primary key of the first item that this operation will evaluate. Use the value that was returned for\n+         * {@link Page#lastEvaluatedKey()} in the previous operation.\n+         *\n+         * @param exclusiveStartKey the primary key value to start evaluate\n+         * @return a builder of this type\n+         */\n         public Builder exclusiveStartKey(Map<String, AttributeValue> exclusiveStartKey) {\n             this.exclusiveStartKey = exclusiveStartKey != null ? new HashMap<>(exclusiveStartKey) : null;\n             return this;\n         }\n \n+        /**\n+         * Sets a limit on how many items to evaluate in the query. If not set, the operation uses\n+         * the maximum values allowed.\n+         * <p/>\n+         * <b>Note:</b>The limit does not refer to the number of items to return, but how many items\n+         * the database should evaluate while executing the query. Use limit together with {@link Page#lastEvaluatedKey()}\n+         * and {@link #exclusiveStartKey} in subsequent query calls to evaluate <em>limit</em> items per call.\n+         *\n+         * @param limit the maximum number of items to evalute\n+         * @return a builder of this type\n+         */\n         public Builder limit(Integer limit) {\n             this.limit = limit;\n             return this;\n         }\n \n+        /**\n+         Determines the read consistency model: If set to true, the operation uses strongly consistent reads; otherwise,\n+         the operation uses eventually consistent reads.\n+         *\n+         * @param consistentRead sets consistency model of the operation to use strong consistency\n+         * @return a builder of this type\n+         */\n         public Builder consistentRead(Boolean consistentRead) {\n             this.consistentRead = consistentRead;\n             return this;\n         }\n \n+        /**\n+         * Refines the query results by applying the filter expression on the results returned\n+         * from the query and discards items that do not match. See {@link Expression} for examples\n+         * and constraints.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDMzNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387190334", "bodyText": "Agree, added.", "author": "cenedhryn", "createdAt": "2020-03-03T17:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MTQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\nindex 45c9104dd3..b90745a69e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java\n\n@@ -171,7 +174,7 @@ public final class QueryEnhancedRequest {\n \n         /**\n          * Determines the matching conditions for this query request. See {@link QueryConditional} for examples\n-         * and constraints.\n+         * and constraints. <b>Required</b>.\n          *\n          * @param queryConditional the query conditions\n          * @return a builder of this type\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MTY3Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385841676", "bodyText": "I think we should cut this, we don't need to explain our implementation in public javadoc if it's not relevant to usability.", "author": "bmaizels", "createdAt": "2020-02-28T18:03:42Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java", "diffHunk": "@@ -27,6 +27,14 @@\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n import software.amazon.awssdk.services.dynamodb.model.KeysAndAttributes;\n \n+/**\n+ * Defines a collection of primary keys for items in a table, stored as {@link KeysAndAttributes}.\n+ * <p/>\n+ *\n+ * <b>Note:</b>The builder for the class is parameterized, however the class itself is not. The builder takes a parameterized\n+ * {@link MappedTableResource} in order for the constructor to transform {@link GetItemEnhancedRequest} objects into the keys and\n+ * attributes, but the object itself only stores a reference to the table name and does not need to remember the type.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDUxOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387190518", "bodyText": "Cut.", "author": "cenedhryn", "createdAt": "2020-03-03T17:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MTY3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\nindex 5c689ef525..0b849d48d2 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n\n@@ -20,20 +20,21 @@ import java.util.List;\n import java.util.Map;\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n-\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.enhanced.dynamodb.Key;\n import software.amazon.awssdk.enhanced.dynamodb.MappedTableResource;\n import software.amazon.awssdk.enhanced.dynamodb.TableMetadata;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n import software.amazon.awssdk.services.dynamodb.model.KeysAndAttributes;\n \n /**\n- * Defines a collection of primary keys for items in a table, stored as {@link KeysAndAttributes}.\n- * <p/>\n- *\n- * <b>Note:</b>The builder for the class is parameterized, however the class itself is not. The builder takes a parameterized\n- * {@link MappedTableResource} in order for the constructor to transform {@link GetItemEnhancedRequest} objects into the keys and\n- * attributes, but the object itself only stores a reference to the table name and does not need to remember the type.\n+ * Defines a collection of primary keys for items in a table, stored as {@link KeysAndAttributes}, and\n+ * used for the batchGetItem() operation (such as\n+ * {@link DynamoDbEnhancedClient#batchGetItem(BatchGetItemEnhancedRequest)}) as part of a\n+ * {@link BatchGetItemEnhancedRequest}.\n+ * <p>\n+ * A valid request object should contain one or more primary keys.\n  */\n @SdkPublicApi\n public final class ReadBatch {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MTg3NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385841875", "bodyText": "I think we should also say how it's used, eg: for BatchGetItems", "author": "bmaizels", "createdAt": "2020-02-28T18:04:07Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java", "diffHunk": "@@ -27,6 +27,14 @@\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n import software.amazon.awssdk.services.dynamodb.model.KeysAndAttributes;\n \n+/**\n+ * Defines a collection of primary keys for items in a table, stored as {@link KeysAndAttributes}.\n+ * <p/>", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDQ1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387190455", "bodyText": "Updated.", "author": "cenedhryn", "createdAt": "2020-03-03T17:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MTg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\nindex 5c689ef525..0b849d48d2 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n\n@@ -20,20 +20,21 @@ import java.util.List;\n import java.util.Map;\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n-\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.enhanced.dynamodb.Key;\n import software.amazon.awssdk.enhanced.dynamodb.MappedTableResource;\n import software.amazon.awssdk.enhanced.dynamodb.TableMetadata;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n import software.amazon.awssdk.services.dynamodb.model.KeysAndAttributes;\n \n /**\n- * Defines a collection of primary keys for items in a table, stored as {@link KeysAndAttributes}.\n- * <p/>\n- *\n- * <b>Note:</b>The builder for the class is parameterized, however the class itself is not. The builder takes a parameterized\n- * {@link MappedTableResource} in order for the constructor to transform {@link GetItemEnhancedRequest} objects into the keys and\n- * attributes, but the object itself only stores a reference to the table name and does not need to remember the type.\n+ * Defines a collection of primary keys for items in a table, stored as {@link KeysAndAttributes}, and\n+ * used for the batchGetItem() operation (such as\n+ * {@link DynamoDbEnhancedClient#batchGetItem(BatchGetItemEnhancedRequest)}) as part of a\n+ * {@link BatchGetItemEnhancedRequest}.\n+ * <p>\n+ * A valid request object should contain one or more primary keys.\n  */\n @SdkPublicApi\n public final class ReadBatch {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MjQwMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385842401", "bodyText": "Can we make this more user-friendly and less developer-centric. Something like: @param itemClass the class that items in this table map to", "author": "bmaizels", "createdAt": "2020-02-28T18:05:23Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java", "diffHunk": "@@ -37,14 +45,26 @@ private ReadBatch(BuilderImpl<?> builder) {\n         this.keysAndAttributes = generateKeysAndAttributes(builder.requests, builder.mappedTableResource);\n     }\n \n+    /**\n+     * All objects must be constructed using a Builder.\n+     * @param itemClass to determine the parameterized type T of the builder", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NDQ3OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387194479", "bodyText": "Re-worded.", "author": "cenedhryn", "createdAt": "2020-03-03T17:58:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MjQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\nindex 5c689ef525..0b849d48d2 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n\n@@ -46,24 +47,25 @@ public final class ReadBatch {\n     }\n \n     /**\n-     * All objects must be constructed using a Builder.\n-     * @param itemClass to determine the parameterized type T of the builder\n+     * Creates a newly initialized builder for a read batch.\n+     *\n+     * @param itemClass the class that items in this table map to\n      * @param <T> The type of the modelled object, corresponding to itemClass\n-     * @return a parameterized builder of this type\n+     * @return a ReadBatch builder\n      */\n     public static <T> Builder<T> builder(Class<? extends T> itemClass) {\n         return new BuilderImpl<>();\n     }\n \n     /**\n-     * @return the table name\n+     * Returns the table name associated with this batch.\n      */\n     public String tableName() {\n         return tableName;\n     }\n \n     /**\n-     * @return a collection of keys and attributes, see {@link KeysAndAttributes}\n+     * Returns the collection of keys and attributes, see {@link KeysAndAttributes}, in this read batch.\n      */\n     public KeysAndAttributes keysAndAttributes() {\n         return keysAndAttributes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MjY2NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385842665", "bodyText": "Anywhere you write 'parameterized' we should probably rewrite that. It's not a usability friendly term in my opinion.", "author": "bmaizels", "createdAt": "2020-02-28T18:05:59Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java", "diffHunk": "@@ -37,14 +45,26 @@ private ReadBatch(BuilderImpl<?> builder) {\n         this.keysAndAttributes = generateKeysAndAttributes(builder.requests, builder.mappedTableResource);\n     }\n \n+    /**\n+     * All objects must be constructed using a Builder.\n+     * @param itemClass to determine the parameterized type T of the builder\n+     * @param <T> The type of the modelled object, corresponding to itemClass\n+     * @return a parameterized builder of this type", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDU4Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387190583", "bodyText": "Changed", "author": "cenedhryn", "createdAt": "2020-03-03T17:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0MjY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\nindex 5c689ef525..0b849d48d2 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n\n@@ -46,24 +47,25 @@ public final class ReadBatch {\n     }\n \n     /**\n-     * All objects must be constructed using a Builder.\n-     * @param itemClass to determine the parameterized type T of the builder\n+     * Creates a newly initialized builder for a read batch.\n+     *\n+     * @param itemClass the class that items in this table map to\n      * @param <T> The type of the modelled object, corresponding to itemClass\n-     * @return a parameterized builder of this type\n+     * @return a ReadBatch builder\n      */\n     public static <T> Builder<T> builder(Class<? extends T> itemClass) {\n         return new BuilderImpl<>();\n     }\n \n     /**\n-     * @return the table name\n+     * Returns the table name associated with this batch.\n      */\n     public String tableName() {\n         return tableName;\n     }\n \n     /**\n-     * @return a collection of keys and attributes, see {@link KeysAndAttributes}\n+     * Returns the collection of keys and attributes, see {@link KeysAndAttributes}, in this read batch.\n      */\n     public KeysAndAttributes keysAndAttributes() {\n         return keysAndAttributes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0Mjc4OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385842788", "bodyText": "\"The table name associated with this batch\"", "author": "bmaizels", "createdAt": "2020-02-28T18:06:21Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java", "diffHunk": "@@ -37,14 +45,26 @@ private ReadBatch(BuilderImpl<?> builder) {\n         this.keysAndAttributes = generateKeysAndAttributes(builder.requests, builder.mappedTableResource);\n     }\n \n+    /**\n+     * All objects must be constructed using a Builder.\n+     * @param itemClass to determine the parameterized type T of the builder\n+     * @param <T> The type of the modelled object, corresponding to itemClass\n+     * @return a parameterized builder of this type\n+     */\n     public static <T> Builder<T> builder(Class<? extends T> itemClass) {\n         return new BuilderImpl<>();\n     }\n \n+    /**\n+     * @return the table name", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDY1MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387190651", "bodyText": "Re-worded.", "author": "cenedhryn", "createdAt": "2020-03-03T17:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0Mjc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\nindex 5c689ef525..0b849d48d2 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n\n@@ -46,24 +47,25 @@ public final class ReadBatch {\n     }\n \n     /**\n-     * All objects must be constructed using a Builder.\n-     * @param itemClass to determine the parameterized type T of the builder\n+     * Creates a newly initialized builder for a read batch.\n+     *\n+     * @param itemClass the class that items in this table map to\n      * @param <T> The type of the modelled object, corresponding to itemClass\n-     * @return a parameterized builder of this type\n+     * @return a ReadBatch builder\n      */\n     public static <T> Builder<T> builder(Class<? extends T> itemClass) {\n         return new BuilderImpl<>();\n     }\n \n     /**\n-     * @return the table name\n+     * Returns the table name associated with this batch.\n      */\n     public String tableName() {\n         return tableName;\n     }\n \n     /**\n-     * @return a collection of keys and attributes, see {@link KeysAndAttributes}\n+     * Returns the collection of keys and attributes, see {@link KeysAndAttributes}, in this read batch.\n      */\n     public KeysAndAttributes keysAndAttributes() {\n         return keysAndAttributes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0Mjk4MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r385842981", "bodyText": "See previous comment about 'parameterized'", "author": "bmaizels", "createdAt": "2020-02-28T18:06:48Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java", "diffHunk": "@@ -77,13 +97,42 @@ public int hashCode() {\n         return result;\n     }\n \n+    /**\n+     * The builder takes a parameterized {@link MappedTableResource} and individual {@link GetItemEnhancedRequest}.", "originalCommit": "c913019cb8b3a86ddd1d9765f1eb239b8ca260a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\nindex 5c689ef525..0b849d48d2 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ReadBatch.java\n\n@@ -98,41 +100,40 @@ public final class ReadBatch {\n     }\n \n     /**\n-     * The builder takes a parameterized {@link MappedTableResource} and individual {@link GetItemEnhancedRequest}.\n-     * <p/>\n-     * <b>Note</b>: Must at a minimum define a {@link MappedTableResource} and add at least one {@link GetItemEnhancedRequest}.\n+     * A builder that is used to create a request with the desired parameters.\n+     * <p>\n+     * A valid builder must define a {@link MappedTableResource} and add at least one\n+     * {@link GetItemEnhancedRequest}.\n      *\n-     * @param <T>\n+     * @param <T> the type that items in this table map to\n      */\n     public interface Builder<T> {\n+\n         /**\n+         * Sets the mapped table resource (table) that the items in this read batch should come from.\n          *\n-         * @param mappedTableResource\n-         * @return a parameterized Builder of this type\n+         * @param mappedTableResource the table reference\n+         * @return a builder of this type\n          */\n         Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource);\n \n         /**\n-         * Adds a {@link GetItemEnhancedRequest} to the builder.\n+         * Adds a {@link GetItemEnhancedRequest} with a primary {@link Key} to the builder.\n          *\n          * @param request A {@link GetItemEnhancedRequest}\n-         * @return a parameterized Builder of this type\n+         * @return a builder of this type\n          */\n         Builder<T> addGetItem(GetItemEnhancedRequest request);\n \n         /**\n-         * Adds a {@link GetItemEnhancedRequest} to the builder by accepting a consumer of\n-         * {@link GetItemEnhancedRequest.Builder}. Calls {@link #addGetItem(GetItemEnhancedRequest)} with the built request\n-         * object.\n+         * Adds a {@link GetItemEnhancedRequest} with a primary {@link Key} to the builder by accepting a consumer of\n+         * {@link GetItemEnhancedRequest.Builder}.\n          *\n          * @param requestConsumer a {@link Consumer} of {@link GetItemEnhancedRequest}\n-         * @return a parameterized Builder of this type\n+         * @return a builder of this type\n          */\n         Builder<T> addGetItem(Consumer<GetItemEnhancedRequest.Builder> requestConsumer);\n \n-        /**\n-         * @return an object of this type initialized with the values of the Builder\n-         */\n         ReadBatch build();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNTA5MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387315090", "bodyText": "This doesn't make sense, typo? (suspicious double space)", "author": "bmaizels", "createdAt": "2020-03-03T21:50:42Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * A document representing a table item in the form of a map containing attributes and values.\n+ * <p>\n+ * Use the {@link #getItem(MappedTableResource)} method to transform the collection of attributes into a typed item.\n+ */\n+@SdkPublicApi\n+public interface Document {\n+\n+    /**\n+     * Get the table item associated with the table schema in the mapped table resource.\n+     *\n+     * @param mappedTableResource the mapped table resource containing  this item was retrieved from", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java\nindex 833e90338f..db7c649315 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java\n\n@@ -28,7 +28,7 @@ public interface Document {\n     /**\n      * Get the table item associated with the table schema in the mapped table resource.\n      *\n-     * @param mappedTableResource the mapped table resource containing  this item was retrieved from\n+     * @param mappedTableResource the mapped table resource this item was retrieved from\n      * @param <T> the type of items in the mapped table resource\n      * @return the item constructed from the document\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNTg2Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387315867", "bodyText": "I like the simplicity of 'getItem'. I'm wondering how it will look once this becomes a fully fledged document interface. Would we regret that decision? What would be better? 'getAsItem'? 'convertToItem'? 'mapToItem'?", "author": "bmaizels", "createdAt": "2020-03-03T21:52:10Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * A document representing a table item in the form of a map containing attributes and values.\n+ * <p>\n+ * Use the {@link #getItem(MappedTableResource)} method to transform the collection of attributes into a typed item.\n+ */\n+@SdkPublicApi\n+public interface Document {\n+\n+    /**\n+     * Get the table item associated with the table schema in the mapped table resource.\n+     *\n+     * @param mappedTableResource the mapped table resource containing  this item was retrieved from\n+     * @param <T> the type of items in the mapped table resource\n+     * @return the item constructed from the document\n+     */\n+    <T> T getItem(MappedTableResource<T> mappedTableResource);", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNjA2Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387316062", "bodyText": "Consider taking a team vote on this one, I think it's important enough.", "author": "bmaizels", "createdAt": "2020-03-03T21:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNTg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java\nindex 833e90338f..db7c649315 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/Document.java\n\n@@ -28,7 +28,7 @@ public interface Document {\n     /**\n      * Get the table item associated with the table schema in the mapped table resource.\n      *\n-     * @param mappedTableResource the mapped table resource containing  this item was retrieved from\n+     * @param mappedTableResource the mapped table resource this item was retrieved from\n      * @param <T> the type of items in the mapped table resource\n      * @return the item constructed from the document\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxODIyMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387318223", "bodyText": "I'd rather omit the sentence about no mechanism supported, I just know we'll forget to update it when we do provide such a mechanism.", "author": "bmaizels", "createdAt": "2020-03-03T21:56:57Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java", "diffHunk": "@@ -47,67 +50,441 @@\n      */\n     DynamoDbAsyncIndex<T> index(String indexName);\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+     *                                                   .provisionedThroughput(provisionedThroughput)\n+     *                                                   .build())\n+     *            .join();\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link CreateTableEnhancedRequest} containing optional parameters for table creation.\n+     * @return a {@link CompletableFuture} of {@link Void}.\n+     */\n     default CompletableFuture<Void> createTable(CreateTableEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable\n+     * together with additional parameters specified in the supplied request object, {@link CreateTableEnhancedRequest}.\n+     * <p>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n+     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * Consult the CreateTable documentation for further details and constraints.\n+     * <p>\n+     * <b>Note:</b> This is a convenience method that creates an instance of the request builder avoiding the need to create one\n+     * manually via {@link CreateTableEnhancedRequest#builder()}.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * ProvisionedThroughput provisionedThroughput = ProvisionedThroughput.builder()\n+     *                                                                    .readCapacityUnits(50L)\n+     *                                                                    .writeCapacityUnits(50L)\n+     *                                                                    .build();\n+     * mappedTable.createTable(r -> r.provisionedThroughput(provisionedThroughput)).join();\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer A {@link Consumer} of {@link CreateTableEnhancedRequest.Builder} containing optional parameters\n+     * for table creation.\n+     * @return a {@link CompletableFuture} of {@link Void}.\n+     */\n     default CompletableFuture<Void> createTable(Consumer<CreateTableEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates a new table in DynamoDb with the name and schema already defined for this DynamoDbTable.\n+     * <p>\n+     * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n+     * <p>\n+     * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n+     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java\nindex c154ef6769..ffb23bc8d3 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbAsyncTable.java\n\n@@ -57,8 +57,7 @@ public interface DynamoDbAsyncTable<T> extends MappedTableResource<T> {\n      * Use {@link DynamoDbEnhancedClient#table(String, TableSchema)} to define the mapped table resource.\n      * <p>\n      * This operation calls the low-level DynamoDB API CreateTable operation. Note that this is an asynchronous operation and that\n-     * the table may not immediately be available for writes and reads. Currently, there is no mechanism supported within this\n-     * library to wait for/check the status of a created table. You must provide this functionality yourself.\n+     * the table may not immediately be available for writes and reads.\n      * Consult the CreateTable documentation for further details and constraints.\n      * <p>\n      * Example:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMDI0Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387320242", "bodyText": "This wording makes it look a bit like each batch must exclusively contain PutItem requests or DeleteItem requests but not a mix (which as we know is not true). Maybe we should try and make that clearer.", "author": "bmaizels", "createdAt": "2020-03-03T22:01:01Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedAsyncClient.java", "diffHunk": "@@ -47,35 +54,353 @@\n      */\n     <T> DynamoDbAsyncTable<T> table(String tableName, TableSchema<T> tableSchema);\n \n+    /**\n+     * Retrieves items from one or more tables by their primary keys, see {@link Key}. BatchGetItem is a composite operation\n+     * where the request contains one batch of {@link GetItemEnhancedRequest} per targeted table.\n+     * <p>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link BatchGetItemEnhancedRequest}.\n+     * <p>\n+     * <b>Partial results</b>. A single call has restraints on how much\n+     * data can be retrieved. If those limits are exceeded, the call will yield a partial result. This may also be the case if\n+     * provisional throughput is exceeded or there is an internal DynamoDb processing failure. The enhanced client does not\n+     * currently support retrieving explicit information on partial results through a list of unprocessed keys.\n+     * Infer this information through comparing request/response objects.\n+     * <p>\n+     * This operation calls the low-level DynamoDB API BatchGetItem operation. Consult the BatchGetItem documentation for\n+     * further details and constraints as well as current limits of data retrieval.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * SdkPublisher<BatchGetResultPage> batchResults = enhancedClient.batchGetItem(\n+     *     BatchGetItemEnhancedRequest.builder()\n+     *                                .readBatches(ReadBatch.builder(FirstItem.class)\n+     *                                                      .mappedTableResource(firstItemTable)\n+     *                                                      .addGetItem(GetItemEnhancedRequest.builder().key(key1).build())\n+     *                                                      .addGetItem(GetItemEnhancedRequest.builder().key(key2).build())\n+     *                                                      .build(),\n+     *                                             ReadBatch.builder(SecondItem.class)\n+     *                                                      .mappedTableResource(secondItemTable)\n+     *                                                      .addGetItem(GetItemEnhancedRequest.builder().key(key3).build())\n+     *                                                      .build())\n+     *                                .build()).join();\n+     * }\n+     * </pre>\n+     *\n+     * @param request A {@link BatchGetItemEnhancedRequest} containing keys grouped by tables.\n+     * @return a publisher {@link SdkPublisher} with paginated results of type {@link BatchGetResultPage}.\n+     */\n     default SdkPublisher<BatchGetResultPage> batchGetItem(BatchGetItemEnhancedRequest request) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Retrieves items from one or more tables by their primary keys, see {@link Key}. BatchGetItem is a composite operation\n+     * where the request contains one batch of {@link GetItemEnhancedRequest} per targeted table.\n+     * <p>\n+     * The additional configuration parameters that the enhanced client supports are defined\n+     * in the {@link BatchGetItemEnhancedRequest}.\n+     * <p>\n+     * <b>Partial results</b>. A single call has restraints on how much\n+     * data can be retrieved. If those limits are exceeded, the call will yield a partial result. This may also be the case if\n+     * provisional throughput is exceeded or there is an internal DynamoDb processing failure. The enhanced client does not\n+     * currently support retrieving information on partial results.\n+     * <p>\n+     * This operation calls the low-level DynamoDB API BatchGetItem operation. Consult the BatchGetItem documentation for\n+     * further details and constraints as well as current limits of data retrieval.\n+     * <p>\n+     * <b>Note:</b> This is a convenience method that creates an instance of the request builder avoiding the need to create one\n+     * manually via {@link BatchGetItemEnhancedRequest#builder()}.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * {@code\n+     *\n+     * SdkPublisher<BatchGetResultPage> batchResults = enhancedClient.batchGetItem(r -> r.addReadBatches(\n+     *     ReadBatch.builder(FirstItem.class)\n+     *              .mappedTableResource(firstItemTable)\n+     *              .addGetItem(i -> i.key(key1))\n+     *              .addGetItem(i -> i.key(key2))\n+     *              .build(),\n+     *     ReadBatch.builder(SecondItem.class)\n+     *              .mappedTableResource(secondItemTable)\n+     *              .addGetItem(i -> i.key(key3))\n+     *              .build())).join();\n+     * }\n+     * </pre>\n+     *\n+     * @param requestConsumer a {@link Consumer} of {@link BatchGetItemEnhancedRequest.Builder} containing keys grouped by tables.\n+     * @return a publisher {@link SdkPublisher} with paginated results of type {@link BatchGetResultPage}.\n+     */\n     default SdkPublisher<BatchGetResultPage> batchGetItem(Consumer<BatchGetItemEnhancedRequest.Builder> requestConsumer) {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Puts or deletes multiple items in one or more tables. BatchWriteItem is a composite operation where the request contains\n+     * one batch of {@link PutItemEnhancedRequest} or {@link DeleteItemEnhancedRequest} per targeted table.", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxMjU1Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387812557", "bodyText": "Agree, re-worded.", "author": "cenedhryn", "createdAt": "2020-03-04T17:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMDI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedAsyncClient.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedAsyncClient.java\nindex 2a4ebc631d..727ead1004 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedAsyncClient.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/DynamoDbEnhancedAsyncClient.java\n\n@@ -57,15 +56,16 @@ public interface DynamoDbEnhancedAsyncClient {\n     /**\n      * Retrieves items from one or more tables by their primary keys, see {@link Key}. BatchGetItem is a composite operation\n      * where the request contains one batch of {@link GetItemEnhancedRequest} per targeted table.\n+     * The operation makes several calls to the database; each time you iterate over the result to retrieve a page,\n+     * a call is made for the items on that page.\n      * <p>\n      * The additional configuration parameters that the enhanced client supports are defined\n      * in the {@link BatchGetItemEnhancedRequest}.\n      * <p>\n-     * <b>Partial results</b>. A single call has restraints on how much\n-     * data can be retrieved. If those limits are exceeded, the call will yield a partial result. This may also be the case if\n-     * provisional throughput is exceeded or there is an internal DynamoDb processing failure. The enhanced client does not\n-     * currently support retrieving explicit information on partial results through a list of unprocessed keys.\n-     * Infer this information through comparing request/response objects.\n+     * <b>Partial results</b>. A single call to DynamoDb has restraints on how much data can be retrieved.\n+     * If those limits are exceeded, the call yields a partial result. This may also be the case if\n+     * provisional throughput is exceeded or there is an internal DynamoDb processing failure. The operation automatically\n+     * retries any unprocessed keys returned from DynamoDb in subsequent calls for pages.\n      * <p>\n      * This operation calls the low-level DynamoDB API BatchGetItem operation. Consult the BatchGetItem documentation for\n      * further details and constraints as well as current limits of data retrieval.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzE4MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387323180", "bodyText": "This should be Document, there's no reason for it to care about the implementation.", "author": "bmaizels", "createdAt": "2020-03-03T22:06:42Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java", "diffHunk": "@@ -88,13 +87,13 @@ public static Builder builder() {\n     }\n \n     @Override\n-    public CompletableFuture<List<TransactGetResultPage>> transactGetItems(TransactGetItemsEnhancedRequest request) {\n+    public CompletableFuture<List<DefaultDocument>> transactGetItems(TransactGetItemsEnhancedRequest request) {", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxMTIxOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387811219", "bodyText": "The unfortunate consequence of auto-rename without considering the switch to an interface. Updating all references.", "author": "cenedhryn", "createdAt": "2020-03-04T17:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java\nindex 4ac4df9486..0855a65742 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java\n\n@@ -87,13 +91,13 @@ public final class DefaultDynamoDbEnhancedAsyncClient implements DynamoDbEnhance\n     }\n \n     @Override\n-    public CompletableFuture<List<DefaultDocument>> transactGetItems(TransactGetItemsEnhancedRequest request) {\n+    public CompletableFuture<List<Document>> transactGetItems(TransactGetItemsEnhancedRequest request) {\n         TransactGetItemsOperation operation = TransactGetItemsOperation.create(request);\n         return operation.executeAsync(dynamoDbClient, extension);\n     }\n \n     @Override\n-    public CompletableFuture<List<DefaultDocument>> transactGetItems(\n+    public CompletableFuture<List<Document>> transactGetItems(\n         Consumer<TransactGetItemsEnhancedRequest.Builder> requestConsumer) {\n         TransactGetItemsEnhancedRequest.Builder builder = TransactGetItemsEnhancedRequest.builder();\n         requestConsumer.accept(builder);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzMwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387323306", "bodyText": "Replace with 'Document'", "author": "bmaizels", "createdAt": "2020-03-03T22:06:52Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java", "diffHunk": "@@ -88,13 +87,13 @@ public static Builder builder() {\n     }\n \n     @Override\n-    public CompletableFuture<List<TransactGetResultPage>> transactGetItems(TransactGetItemsEnhancedRequest request) {\n+    public CompletableFuture<List<DefaultDocument>> transactGetItems(TransactGetItemsEnhancedRequest request) {\n         TransactGetItemsOperation operation = TransactGetItemsOperation.create(request);\n         return operation.executeAsync(dynamoDbClient, extension);\n     }\n \n     @Override\n-    public CompletableFuture<List<TransactGetResultPage>> transactGetItems(\n+    public CompletableFuture<List<DefaultDocument>> transactGetItems(", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java\nindex 4ac4df9486..0855a65742 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedAsyncClient.java\n\n@@ -87,13 +91,13 @@ public final class DefaultDynamoDbEnhancedAsyncClient implements DynamoDbEnhance\n     }\n \n     @Override\n-    public CompletableFuture<List<DefaultDocument>> transactGetItems(TransactGetItemsEnhancedRequest request) {\n+    public CompletableFuture<List<Document>> transactGetItems(TransactGetItemsEnhancedRequest request) {\n         TransactGetItemsOperation operation = TransactGetItemsOperation.create(request);\n         return operation.executeAsync(dynamoDbClient, extension);\n     }\n \n     @Override\n-    public CompletableFuture<List<DefaultDocument>> transactGetItems(\n+    public CompletableFuture<List<Document>> transactGetItems(\n         Consumer<TransactGetItemsEnhancedRequest.Builder> requestConsumer) {\n         TransactGetItemsEnhancedRequest.Builder builder = TransactGetItemsEnhancedRequest.builder();\n         requestConsumer.accept(builder);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzQzMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387323431", "bodyText": "Replace with 'Document'", "author": "bmaizels", "createdAt": "2020-03-03T22:07:06Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java", "diffHunk": "@@ -83,13 +82,13 @@ public BatchWriteResult batchWriteItem(Consumer<BatchWriteItemEnhancedRequest.Bu\n     }\n \n     @Override\n-    public List<TransactGetResultPage> transactGetItems(TransactGetItemsEnhancedRequest request) {\n+    public List<DefaultDocument> transactGetItems(TransactGetItemsEnhancedRequest request) {", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java\nindex 29119b627e..34ef20090e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java\n\n@@ -82,13 +86,13 @@ public final class DefaultDynamoDbEnhancedClient implements DynamoDbEnhancedClie\n     }\n \n     @Override\n-    public List<DefaultDocument> transactGetItems(TransactGetItemsEnhancedRequest request) {\n+    public List<Document> transactGetItems(TransactGetItemsEnhancedRequest request) {\n         TransactGetItemsOperation operation = TransactGetItemsOperation.create(request);\n         return operation.execute(dynamoDbClient, extension);\n     }\n \n     @Override\n-    public List<DefaultDocument> transactGetItems(\n+    public List<Document> transactGetItems(\n         Consumer<TransactGetItemsEnhancedRequest.Builder> requestConsumer) {\n \n         TransactGetItemsEnhancedRequest.Builder builder = TransactGetItemsEnhancedRequest.builder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzUwNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387323505", "bodyText": "Replace with 'Document'", "author": "bmaizels", "createdAt": "2020-03-03T22:07:14Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java", "diffHunk": "@@ -83,13 +82,13 @@ public BatchWriteResult batchWriteItem(Consumer<BatchWriteItemEnhancedRequest.Bu\n     }\n \n     @Override\n-    public List<TransactGetResultPage> transactGetItems(TransactGetItemsEnhancedRequest request) {\n+    public List<DefaultDocument> transactGetItems(TransactGetItemsEnhancedRequest request) {\n         TransactGetItemsOperation operation = TransactGetItemsOperation.create(request);\n         return operation.execute(dynamoDbClient, extension);\n     }\n \n     @Override\n-    public List<TransactGetResultPage> transactGetItems(\n+    public List<DefaultDocument> transactGetItems(", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java\nindex 29119b627e..34ef20090e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/client/DefaultDynamoDbEnhancedClient.java\n\n@@ -82,13 +86,13 @@ public final class DefaultDynamoDbEnhancedClient implements DynamoDbEnhancedClie\n     }\n \n     @Override\n-    public List<DefaultDocument> transactGetItems(TransactGetItemsEnhancedRequest request) {\n+    public List<Document> transactGetItems(TransactGetItemsEnhancedRequest request) {\n         TransactGetItemsOperation operation = TransactGetItemsOperation.create(request);\n         return operation.execute(dynamoDbClient, extension);\n     }\n \n     @Override\n-    public List<DefaultDocument> transactGetItems(\n+    public List<Document> transactGetItems(\n         Consumer<TransactGetItemsEnhancedRequest.Builder> requestConsumer) {\n \n         TransactGetItemsEnhancedRequest.Builder builder = TransactGetItemsEnhancedRequest.builder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzY2Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387323667", "bodyText": "Replace with 'Document'", "author": "bmaizels", "createdAt": "2020-03-03T22:07:33Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java", "diffHunk": "@@ -19,19 +19,18 @@\n import java.util.concurrent.CompletableFuture;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n-\n import software.amazon.awssdk.annotations.SdkInternalApi;\n import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClientExtension;\n+import software.amazon.awssdk.enhanced.dynamodb.internal.DefaultDocument;\n import software.amazon.awssdk.enhanced.dynamodb.model.TransactGetItemsEnhancedRequest;\n-import software.amazon.awssdk.enhanced.dynamodb.model.TransactGetResultPage;\n import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n import software.amazon.awssdk.services.dynamodb.model.TransactGetItemsRequest;\n import software.amazon.awssdk.services.dynamodb.model.TransactGetItemsResponse;\n \n @SdkInternalApi\n public class TransactGetItemsOperation\n-    implements DatabaseOperation<TransactGetItemsRequest, TransactGetItemsResponse, List<TransactGetResultPage>> {\n+    implements DatabaseOperation<TransactGetItemsRequest, TransactGetItemsResponse, List<DefaultDocument>> {", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java\nindex 9b8aa98728..a1d1caf424 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java\n\n@@ -20,6 +20,7 @@ import java.util.concurrent.CompletableFuture;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.enhanced.dynamodb.Document;\n import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClientExtension;\n import software.amazon.awssdk.enhanced.dynamodb.internal.DefaultDocument;\n import software.amazon.awssdk.enhanced.dynamodb.model.TransactGetItemsEnhancedRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMzczNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387323736", "bodyText": "Replace with 'Document'", "author": "bmaizels", "createdAt": "2020-03-03T22:07:40Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java", "diffHunk": "@@ -63,11 +62,11 @@ public TransactGetItemsRequest generateRequest(DynamoDbEnhancedClientExtension e\n     }\n \n     @Override\n-    public List<TransactGetResultPage> transformResponse(TransactGetItemsResponse response,\n-                                                         DynamoDbEnhancedClientExtension extension) {\n+    public List<DefaultDocument> transformResponse(TransactGetItemsResponse response,", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java\nindex 9b8aa98728..a1d1caf424 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/TransactGetItemsOperation.java\n\n@@ -62,8 +63,8 @@ public class TransactGetItemsOperation\n     }\n \n     @Override\n-    public List<DefaultDocument> transformResponse(TransactGetItemsResponse response,\n-                                                   DynamoDbEnhancedClientExtension extension) {\n+    public List<Document> transformResponse(TransactGetItemsResponse response,\n+                                            DynamoDbEnhancedClientExtension extension) {\n         return response.responses()\n                        .stream()\n                        .map(r -> r == null ? null : DefaultDocument.create(r.item()))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyNTA1Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387325057", "bodyText": "Maybe we should explain why this is here. Not obvious to the uninitiated. I'm not particularly comfortable we have to expose this at all, it's really a nuance of the inner workings of how this is working behind the scenes.", "author": "bmaizels", "createdAt": "2020-03-03T22:10:35Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetResultPage.java", "diffHunk": "@@ -64,11 +85,23 @@ public static Builder builder() {\n         private Builder() {\n         }\n \n+        /**\n+         * Adds a response to the result object. Required.\n+         *\n+         * @param batchGetItemResponse\n+         * @return a builder of this type\n+         */\n         public Builder batchGetItemResponse(BatchGetItemResponse batchGetItemResponse) {\n             this.batchGetItemResponse = batchGetItemResponse;\n             return this;\n         }\n \n+        /**\n+         * Adds a mapper extension.", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxMTA5NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387811095", "bodyText": "True, added context and reference.", "author": "cenedhryn", "createdAt": "2020-03-04T17:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyNTA1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetResultPage.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetResultPage.java\nindex 09669b7a30..2f1120f76f 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetResultPage.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/BatchGetResultPage.java\n\n@@ -97,9 +97,10 @@ public final class BatchGetResultPage {\n         }\n \n         /**\n-         * Adds a mapper extension.\n+         * Adds a mapper extension that can be used to modify the values read from the database.\n+         * @see DynamoDbEnhancedClientExtension\n          *\n-         * @param dynamoDbEnhancedClientExtension\n+         * @param dynamoDbEnhancedClientExtension the supplied mapper extension\n          * @return a builder of this type\n          */\n         public Builder mapperExtension(DynamoDbEnhancedClientExtension dynamoDbEnhancedClientExtension) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyNjI2Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387326266", "bodyText": "I think this wording isn't quite correct or is misleading. When I read it, I take it to mean the expression will only be applied to the keys of the record being evaluated. Unless I'm mis-rememebering the expression can act on any attributes and their values in the record, not just limited to the keys.", "author": "bmaizels", "createdAt": "2020-03-03T22:13:11Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ConditionCheck.java", "diffHunk": "@@ -96,24 +118,52 @@ public int hashCode() {\n         return result;\n     }\n \n+    /**\n+     * A builder that is used to create a condition check with the desired parameters.\n+     * <p>\n+     * A valid builder must define both a {@link Key} and an {@link Expression}.\n+     */\n     public static final class Builder  {\n         private Key key;\n         private Expression conditionExpression;\n \n         private Builder() {\n         }\n \n+        /**\n+         * Sets the primary {@link Key} that will be used together with the condition expression.\n+         *\n+         * @param key the primary key to use in the operation.\n+         * @return a builder of this type\n+         */\n         public Builder key(Key key) {\n             this.key = key;\n             return this;\n         }\n \n+        /**\n+         * Sets the primary {@link Key} that will be used together with the condition expression\n+         * on the builder by accepting a consumer of {@link Key.Builder}.\n+         *\n+         * @param keyConsumer a {@link Consumer} of {@link Key}\n+         * @return a builder of this type\n+         */\n         public Builder key(Consumer<Key.Builder> keyConsumer) {\n             Key.Builder builder = Key.builder();\n             keyConsumer.accept(builder);\n             return key(builder.build());\n         }\n \n+        /**\n+         * Defines a logical expression on the table items' key values which, if evaluating to true,", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwOTA2MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387809060", "bodyText": "You are right, it's incorrect. I read the documentation again and agree. Re-wording.", "author": "cenedhryn", "createdAt": "2020-03-04T17:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyNjI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ConditionCheck.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ConditionCheck.java\nindex 9e9769b078..25d50c5726 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ConditionCheck.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ConditionCheck.java\n\n@@ -155,9 +155,9 @@ public final class ConditionCheck<T> implements TransactableWriteOperation<T> {\n         }\n \n         /**\n-         * Defines a logical expression on the table items' key values which, if evaluating to true,\n-         * will allow the transaction operations to succeed. If evaluating to false, the transaction\n-         * will not succeed.\n+         * Defines a logical expression on the attributes of table items that match the supplied primary key value(s).\n+         * If the expression evaluates to true, the transaction operation succeeds. If the expression evaluates to false,\n+         * the transaction will not succeed.\n          * <p>\n          * See {@link Expression} for condition syntax and examples.\n          *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyNzM4OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387327389", "bodyText": "Replace query with scan. Actually search this whole class for 'query', I see it popping up all over the place.", "author": "bmaizels", "createdAt": "2020-03-03T22:15:38Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -17,11 +17,17 @@\n \n import java.util.HashMap;\n import java.util.Map;\n-\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\n import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n \n+/**\n+ * Defines parameters used to when querying a DynamoDb table or index using the query() operation (such as\n+ * {@link DynamoDbTable#scan(ScanEnhancedRequest)}).", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwMzM1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387803355", "bodyText": "Thanks for finding them. Fixing.", "author": "cenedhryn", "createdAt": "2020-03-04T16:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyNzM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java\nindex 9116f40d49..02e91c7728 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java\n\n@@ -23,7 +23,7 @@ import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n \n /**\n- * Defines parameters used to when querying a DynamoDb table or index using the query() operation (such as\n+ * Defines parameters used to when scanning a DynamoDb table or index using the scan() operation (such as\n  * {@link DynamoDbTable#scan(ScanEnhancedRequest)}).\n  * <p>\n  * All parameters are optional.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyODQ1Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387328456", "bodyText": "Replace with 'Document'.", "author": "bmaizels", "createdAt": "2020-03-03T22:17:47Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java", "diffHunk": "@@ -158,7 +157,7 @@ public void getRecordsFromMultipleTables() {\n                                            .addGetItem(mappedTable1, r -> r.key(k -> k.partitionValue(1)))\n                                            .build();\n \n-        List<TransactGetResultPage> results = enhancedAsyncClient.transactGetItems(transactGetItemsEnhancedRequest).join();\n+        List<DefaultDocument> results = enhancedAsyncClient.transactGetItems(transactGetItemsEnhancedRequest).join();", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java\nindex b230e83dd4..496934ab49 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java\n\n@@ -157,7 +159,7 @@ public class AsyncTransactGetItemsTest extends LocalDynamoDbAsyncTestBase {\n                                            .addGetItem(mappedTable1, r -> r.key(k -> k.partitionValue(1)))\n                                            .build();\n \n-        List<DefaultDocument> results = enhancedAsyncClient.transactGetItems(transactGetItemsEnhancedRequest).join();\n+        List<Document> results = enhancedAsyncClient.transactGetItems(transactGetItemsEnhancedRequest).join();\n \n         assertThat(results.size(), is(4));\n         assertThat(results.get(0).getItem(mappedTable1), is(RECORDS_1.get(0)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyODQ5MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387328491", "bodyText": "Replace with 'Document'.", "author": "bmaizels", "createdAt": "2020-03-03T22:17:51Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java", "diffHunk": "@@ -179,7 +178,7 @@ public void notFoundRecordReturnsNull() {\n                                            .addGetItem(mappedTable1, r -> r.key(k -> k.partitionValue(1)))\n                                            .build();\n \n-        List<TransactGetResultPage> results = enhancedAsyncClient.transactGetItems(transactGetItemsEnhancedRequest).join();\n+        List<DefaultDocument> results = enhancedAsyncClient.transactGetItems(transactGetItemsEnhancedRequest).join();", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java\nindex b230e83dd4..496934ab49 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncTransactGetItemsTest.java\n\n@@ -178,7 +180,7 @@ public class AsyncTransactGetItemsTest extends LocalDynamoDbAsyncTestBase {\n                                            .addGetItem(mappedTable1, r -> r.key(k -> k.partitionValue(1)))\n                                            .build();\n \n-        List<DefaultDocument> results = enhancedAsyncClient.transactGetItems(transactGetItemsEnhancedRequest).join();\n+        List<Document> results = enhancedAsyncClient.transactGetItems(transactGetItemsEnhancedRequest).join();\n \n         assertThat(results.size(), is(4));\n         assertThat(results.get(0).getItem(mappedTable1), is(RECORDS_1.get(0)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyODUyNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387328526", "bodyText": "Replace with 'Document'.", "author": "bmaizels", "createdAt": "2020-03-03T22:17:55Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java", "diffHunk": "@@ -152,7 +151,7 @@ public void getRecordsFromMultipleTables() {\n                                            .addGetItem(mappedTable1, r -> r.key(k -> k.partitionValue(1)))\n                                            .build();\n \n-        List<TransactGetResultPage> results = enhancedClient.transactGetItems(transactGetItemsEnhancedRequest);\n+        List<DefaultDocument> results = enhancedClient.transactGetItems(transactGetItemsEnhancedRequest);", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java\nindex 03615499dd..ad252f8e38 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java\n\n@@ -151,7 +153,7 @@ public class TransactGetItemsTest extends LocalDynamoDbSyncTestBase {\n                                            .addGetItem(mappedTable1, r -> r.key(k -> k.partitionValue(1)))\n                                            .build();\n \n-        List<DefaultDocument> results = enhancedClient.transactGetItems(transactGetItemsEnhancedRequest);\n+        List<Document> results = enhancedClient.transactGetItems(transactGetItemsEnhancedRequest);\n \n         assertThat(results.size(), is(4));\n         assertThat(results.get(0).getItem(mappedTable1), is(RECORDS_1.get(0)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyODU1OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1677#discussion_r387328558", "bodyText": "Replace with 'Document'.", "author": "bmaizels", "createdAt": "2020-03-03T22:17:59Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java", "diffHunk": "@@ -173,7 +172,7 @@ public void notFoundRecordReturnsNull() {\n                                            .addGetItem(mappedTable1, r -> r.key(k -> k.partitionValue(1)))\n                                            .build();\n \n-        List<TransactGetResultPage> results = enhancedClient.transactGetItems(transactGetItemsEnhancedRequest);\n+        List<DefaultDocument> results = enhancedClient.transactGetItems(transactGetItemsEnhancedRequest);", "originalCommit": "bbc687497a50884c06dfdbb860e1c0bfa1f4f552", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java\nindex 03615499dd..ad252f8e38 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/TransactGetItemsTest.java\n\n@@ -172,7 +174,7 @@ public class TransactGetItemsTest extends LocalDynamoDbSyncTestBase {\n                                            .addGetItem(mappedTable1, r -> r.key(k -> k.partitionValue(1)))\n                                            .build();\n \n-        List<DefaultDocument> results = enhancedClient.transactGetItems(transactGetItemsEnhancedRequest);\n+        List<Document> results = enhancedClient.transactGetItems(transactGetItemsEnhancedRequest);\n \n         assertThat(results.size(), is(4));\n         assertThat(results.get(0).getItem(mappedTable1), is(RECORDS_1.get(0)));\n"}}, {"oid": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "url": "https://github.com/aws/aws-sdk-java-v2/commit/3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "message": "Dynamodb-enhanced [preview]: javadoc updates for operations and request/response objects", "committedDate": "2020-03-04T19:19:39Z", "type": "commit"}, {"oid": "3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "url": "https://github.com/aws/aws-sdk-java-v2/commit/3f9eaa97b40f87ca46abfbe91b9810f46d69bc99", "message": "Dynamodb-enhanced [preview]: javadoc updates for operations and request/response objects", "committedDate": "2020-03-04T19:19:39Z", "type": "forcePushed"}, {"oid": "4c2ae135118b03c4da2fb4d731c2e3b9aa2908f7", "url": "https://github.com/aws/aws-sdk-java-v2/commit/4c2ae135118b03c4da2fb4d731c2e3b9aa2908f7", "message": "Merge branch 'master' into salande/ddbmapper-javadoc", "committedDate": "2020-03-04T19:51:01Z", "type": "commit"}]}