{"pr_number": 1889, "pr_title": "Support core metrics for async non-streaming and streaming operations", "pr_createdAt": "2020-06-11T17:09:08Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1889", "timeline": [{"oid": "9b29c03f43607fd5b2108b635ef5a954ff601103", "url": "https://github.com/aws/aws-sdk-java-v2/commit/9b29c03f43607fd5b2108b635ef5a954ff601103", "message": "Support core metrics for async clients", "committedDate": "2020-06-11T17:37:16Z", "type": "forcePushed"}, {"oid": "661077aa0ad3b7a412441c6597d118304fa0774d", "url": "https://github.com/aws/aws-sdk-java-v2/commit/661077aa0ad3b7a412441c6597d118304fa0774d", "message": "Support core metrics for async clients", "committedDate": "2020-06-11T18:22:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MzQ3Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438983473", "bodyText": "What is the motivation for logging the NoOpMetricCollector? What kind of data would it write?", "author": "cenedhryn", "createdAt": "2020-06-11T18:18:46Z", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/NoOpMetricCollector.java", "diffHunk": "@@ -34,6 +36,7 @@ public String name() {\n \n     @Override\n     public <T> void reportMetric(SdkMetric<T> metric, T data) {\n+        log.trace(() -> \"Metrics reported: \" + data);", "originalCommit": "9b29c03f43607fd5b2108b635ef5a954ff601103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyOTYwMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439029602", "bodyText": "This is intended for debugging purpose and that's why it's trace", "author": "zoewangg", "createdAt": "2020-06-11T19:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MzQ3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MDQ2MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438990460", "bodyText": "Can you move this private method down to the other private methods?", "author": "cenedhryn", "createdAt": "2020-06-11T18:32:05Z", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/AsyncCoreMetricsTest.java", "diffHunk": "@@ -113,46 +119,172 @@ public void apiCall_publisherOverriddenOnRequest_requestPublisherTakesPrecedence\n     @Test\n     public void apiCall_operationSuccessful_addsMetrics() {\n         stubSuccessfulResponse();\n+\n         client.allTypes().join();\n \n         ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n         verify(mockPublisher).publish(collectionCaptor.capture());\n-\n         MetricCollection capturedCollection = collectionCaptor.getValue();\n \n-        assertThat(capturedCollection.name()).isEqualTo(\"ApiCall\");\n-        assertThat(capturedCollection.metricValues(CoreMetric.SERVICE_ID))\n-            .containsExactly(SERVICE_ID);\n-        assertThat(capturedCollection.metricValues(CoreMetric.OPERATION_NAME))\n-            .containsExactly(\"AllTypes\");\n+        verifyApiCallCollection(capturedCollection);\n+\n+        assertThat(capturedCollection.children()).hasSize(1);\n+        MetricCollection attemptCollection = capturedCollection.children().get(0);\n+\n+        assertThat(attemptCollection.name()).isEqualTo(\"ApiCallAttempt\");\n+        assertThat(attemptCollection.children()).isEmpty();\n+\n+        verifySuccessfulApiCallAttemptCollection(attemptCollection);\n+        assertThat(attemptCollection.metricValues(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME).get(0))\n+            .isGreaterThanOrEqualTo(FIXED_DELAY);\n     }\n \n     @Test\n-    public void apiCall_operationFailed_addsMetrics() {\n+    public void apiCall_allRetryAttemptsFailedOf500() {\n         stubErrorResponse();\n-        assertThatThrownBy(() -> client.allTypes().join()).hasCauseInstanceOf(ProtocolRestJsonException.class);\n+        assertThatThrownBy(() -> client.allTypes().join()).hasCauseInstanceOf(EmptyModeledException.class);\n+\n+        ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n+        verify(mockPublisher).publish(collectionCaptor.capture());\n+\n+        MetricCollection capturedCollection = collectionCaptor.getValue();\n+        verifyApiCallCollection(capturedCollection);\n+        assertThat(capturedCollection.children()).hasSize(MAX_RETRIES + 1);\n+\n+        capturedCollection.children().forEach(this::verifyFailedApiCallAttemptCollection);\n+    }\n+\n+    private void verifyFailedApiCallAttemptCollection(MetricCollection requestMetrics) {", "originalCommit": "661077aa0ad3b7a412441c6597d118304fa0774d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyODg0OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439028849", "bodyText": "sure", "author": "zoewangg", "createdAt": "2020-06-11T19:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MDQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "04ea3a09350807b805569ec33d252bcda05b762d", "chunk": "diff --git a/test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/AsyncCoreMetricsTest.java b/test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/async/BaseAsyncCoreMetricsTest.java\nsimilarity index 87%\nrename from test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/AsyncCoreMetricsTest.java\nrename to test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/async/BaseAsyncCoreMetricsTest.java\nindex 3fedc4cbff..27770587f7 100644\n--- a/test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/AsyncCoreMetricsTest.java\n+++ b/test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/metrics/async/BaseAsyncCoreMetricsTest.java\n\n@@ -95,32 +94,11 @@ public class AsyncCoreMetricsTest {\n         client = null;\n     }\n \n-    @Test\n-    public void apiCall_noConfiguredPublisher_succeeds() {\n-        stubSuccessfulResponse();\n-        ProtocolRestJsonAsyncClient noPublisher = ProtocolRestJsonAsyncClient.builder()\n-                                                                             .endpointOverride(URI.create(\"http://localhost:\" + wireMock.port()))\n-                                                                             .build();\n-\n-        noPublisher.allTypes().join();\n-    }\n-\n-    @Test\n-    public void apiCall_publisherOverriddenOnRequest_requestPublisherTakesPrecedence() {\n-        stubSuccessfulResponse();\n-        MetricPublisher requestMetricPublisher = mock(MetricPublisher.class);\n-\n-        client.allTypes(r -> r.overrideConfiguration(o -> o.metricPublisher(requestMetricPublisher))).join();\n-\n-        verify(requestMetricPublisher).publish(any(MetricCollection.class));\n-        verifyZeroInteractions(mockPublisher);\n-    }\n-\n     @Test\n     public void apiCall_operationSuccessful_addsMetrics() {\n         stubSuccessfulResponse();\n \n-        client.allTypes().join();\n+        callable().get().join();\n \n         ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n         verify(mockPublisher).publish(collectionCaptor.capture());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzYyMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438993620", "bodyText": "If we had a second metricPublisher mock and added that to the request override instead of the first one, it'd be a better test IMO.", "author": "cenedhryn", "createdAt": "2020-06-11T18:38:15Z", "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.util;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequestOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.internal.util.MetricUtils;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MetricUtilsTest {\n+\n+    @Mock\n+    private MetricPublisher metricPublisher;\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNull_ShouldUseSdkClientConfig() {\n+        SdkClientConfiguration config = SdkClientConfiguration.builder().option(METRIC_PUBLISHER, metricPublisher).build();\n+        RequestOverrideConfiguration requestOverrideConfiguration = null;\n+        Optional<MetricPublisher> result = MetricUtils.resolvePublisher(config, requestOverrideConfiguration);\n+        assertThat(result).isEqualTo(Optional.of(metricPublisher));\n+    }\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNotNull_shouldTakePrecendance() {", "originalCommit": "661077aa0ad3b7a412441c6597d118304fa0774d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyOTY4NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439029685", "bodyText": "sure", "author": "zoewangg", "createdAt": "2020-06-11T19:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "04ea3a09350807b805569ec33d252bcda05b762d", "chunk": "diff --git a/core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java b/core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java\nindex daa5f6cc18..df1a1e4603 100644\n--- a/core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java\n+++ b/core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java\n\n@@ -17,6 +17,7 @@ package software.amazon.awssdk.core.util;\n \n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n \n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzczNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r438993735", "bodyText": "Thanks for adding these tests!", "author": "cenedhryn", "createdAt": "2020-06-11T18:38:29Z", "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.util;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequestOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.internal.util.MetricUtils;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MetricUtilsTest {\n+\n+    @Mock\n+    private MetricPublisher metricPublisher;\n+\n+    @Test\n+    public void resolvePublisher_requestConfigNull_ShouldUseSdkClientConfig() {", "originalCommit": "661077aa0ad3b7a412441c6597d118304fa0774d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04ea3a09350807b805569ec33d252bcda05b762d", "chunk": "diff --git a/core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java b/core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java\nindex daa5f6cc18..df1a1e4603 100644\n--- a/core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java\n+++ b/core/sdk-core/src/test/java/software/amazon/awssdk/core/util/MetricUtilsTest.java\n\n@@ -17,6 +17,7 @@ package software.amazon.awssdk.core.util;\n \n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n \n import java.util.Optional;\n"}}, {"oid": "04ea3a09350807b805569ec33d252bcda05b762d", "url": "https://github.com/aws/aws-sdk-java-v2/commit/04ea3a09350807b805569ec33d252bcda05b762d", "message": "Support core metrics for async clients", "committedDate": "2020-06-11T19:52:33Z", "type": "forcePushed"}, {"oid": "a26d4aa3ba3e6bf8f6646ca1d41b5aa7f5f5b0ff", "url": "https://github.com/aws/aws-sdk-java-v2/commit/a26d4aa3ba3e6bf8f6646ca1d41b5aa7f5f5b0ff", "message": "Support core metrics for async clients", "committedDate": "2020-06-11T19:54:36Z", "type": "forcePushed"}, {"oid": "bfbea7697467a616777c859ac090f72d82e8c0e4", "url": "https://github.com/aws/aws-sdk-java-v2/commit/bfbea7697467a616777c859ac090f72d82e8c0e4", "message": "Support core metrics for async clients", "committedDate": "2020-06-11T21:24:18Z", "type": "forcePushed"}, {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4", "url": "https://github.com/aws/aws-sdk-java-v2/commit/df636f13fba017b47f2d43c7afa28afbd7f519a4", "message": "Support core metrics for async clients", "committedDate": "2020-06-11T23:50:13Z", "type": "commit"}, {"oid": "df636f13fba017b47f2d43c7afa28afbd7f519a4", "url": "https://github.com/aws/aws-sdk-java-v2/commit/df636f13fba017b47f2d43c7afa28afbd7f519a4", "message": "Support core metrics for async clients", "committedDate": "2020-06-11T23:50:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNTc4MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439135781", "bodyText": "nit: remove print", "author": "dagnir", "createdAt": "2020-06-12T00:08:23Z", "path": "services/transcribestreaming/src/it/java/software/amazon/awssdk/services/transcribestreaming/TranscribeStreamingIntegrationTest.java", "diffHunk": "@@ -58,7 +60,19 @@\n     public static void setup() throws URISyntaxException {\n         client = TranscribeStreamingAsyncClient.builder()\n                                                .region(Region.US_EAST_1)\n-                                               .overrideConfiguration(b -> b.addExecutionInterceptor(new VerifyHeaderInterceptor()))\n+                                               .overrideConfiguration(b -> b.addExecutionInterceptor(new VerifyHeaderInterceptor())\n+                                               .metricPublisher(new MetricPublisher() {\n+                                                   @Override\n+                                                   public void publish(MetricCollection metricCollection) {\n+                                                       System.out.println(metricCollection);", "originalCommit": "df636f13fba017b47f2d43c7afa28afbd7f519a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNzg2OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439537868", "bodyText": "fixed in #1895", "author": "zoewangg", "createdAt": "2020-06-12T16:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNTc4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNzMxNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439137314", "bodyText": "does this account for errors that result in no HTTP request being sent?", "author": "dagnir", "createdAt": "2020-06-12T00:11:08Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/MakeAsyncHttpRequestStage.java", "diffHunk": "@@ -173,6 +175,19 @@ public void onError(Throwable error) {\n         return responseFuture;\n     }\n \n+    private CompletableFuture<Void> doExecuteHttpRequest(RequestExecutionContext context, AsyncExecuteRequest executeRequest) {\n+        MetricCollector metricCollector = context.metricCollector();\n+        long callStart = System.nanoTime();\n+        CompletableFuture<Void> httpClientFuture = sdkAsyncHttpClient.execute(executeRequest);\n+\n+        // Offload the metrics reporting from this stage onto the future completion executor\n+        httpClientFuture.whenCompleteAsync((r, t) -> {\n+            long duration = System.nanoTime() - callStart;\n+            metricCollector.reportMetric(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME, Duration.ofNanos(duration));\n+        }, futureCompletionExecutor);\n+        return httpClientFuture;", "originalCommit": "df636f13fba017b47f2d43c7afa28afbd7f519a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2ODgxOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r439168819", "bodyText": "It seems there's no way to tell if the cause of the error is http request not being sent or http response not being received. I can update it to not report HTTP_REQUEST_ROUND_TRIP_TIME if there's an error, WDUT?", "author": "zoewangg", "createdAt": "2020-06-12T02:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNzMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MDI5NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1889#discussion_r440490295", "bodyText": "Yeah I think that's more reasonable. Having this metric in there if the request didn't get fully sent or we didn't receive a response might be misleading.", "author": "dagnir", "createdAt": "2020-06-15T22:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNzMxNA=="}], "type": "inlineReview", "revised_code": null}]}