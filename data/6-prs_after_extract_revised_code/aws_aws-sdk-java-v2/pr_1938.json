{"pr_number": 1938, "pr_title": "Sdk metrics preview", "pr_createdAt": "2020-07-02T20:59:20Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1938", "timeline": [{"oid": "faaba409677f02932b68c95e5b62874c39d1c44e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/faaba409677f02932b68c95e5b62874c39d1c44e", "message": "Add default impls of SPI classes", "committedDate": "2020-05-27T20:38:39Z", "type": "commit"}, {"oid": "5af6d878e64572e02424d6e896b87fc4d00b2d13", "url": "https://github.com/aws/aws-sdk-java-v2/commit/5af6d878e64572e02424d6e896b87fc4d00b2d13", "message": "Merge pull request #1859 from dagnir/spi-impl\n\nAdd default impls of SPI classes", "committedDate": "2020-05-27T21:05:11Z", "type": "commit"}, {"oid": "69e0b3c38cc87fa68d2dac3764146167f9d1b3be", "url": "https://github.com/aws/aws-sdk-java-v2/commit/69e0b3c38cc87fa68d2dac3764146167f9d1b3be", "message": "Add apache HTTP request stats", "committedDate": "2020-05-28T23:41:30Z", "type": "commit"}, {"oid": "299ed84b1ba559932f2c7f701b9b80c68dd1f9cc", "url": "https://github.com/aws/aws-sdk-java-v2/commit/299ed84b1ba559932f2c7f701b9b80c68dd1f9cc", "message": "Merge pull request #1863 from dagnir/apache-metrics\n\nAdd apache HTTP request stats", "committedDate": "2020-05-28T23:59:26Z", "type": "commit"}, {"oid": "f7e834c5166eb63aa4d960fd916b93efd9980291", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f7e834c5166eb63aa4d960fd916b93efd9980291", "message": "Add setup code for API call metrics for sync", "committedDate": "2020-06-04T18:54:06Z", "type": "commit"}, {"oid": "4c8dd25f1581dea78e51ef6728df099757992a0a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/4c8dd25f1581dea78e51ef6728df099757992a0a", "message": "Merge pull request #1872 from dagnir/core-metrics\n\nAdd setup code for API call metrics for sync", "committedDate": "2020-06-05T22:52:15Z", "type": "commit"}, {"oid": "7f72a114d03a84b3380fa4e9ee90afadb9f942b8", "url": "https://github.com/aws/aws-sdk-java-v2/commit/7f72a114d03a84b3380fa4e9ee90afadb9f942b8", "message": "Collect HTTP/1 metrics in NettyNioHttpClient.", "committedDate": "2020-06-06T00:16:00Z", "type": "commit"}, {"oid": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "message": "Support core metrics for sync clients", "committedDate": "2020-06-08T15:53:44Z", "type": "commit"}, {"oid": "0ee0be38d830caa074339a7fcc476812ee8c714c", "url": "https://github.com/aws/aws-sdk-java-v2/commit/0ee0be38d830caa074339a7fcc476812ee8c714c", "message": "Merge pull request #1882 from dagnir/core-metrics-pt2\n\nSupport core metrics for sync clients", "committedDate": "2020-06-08T21:59:30Z", "type": "commit"}, {"oid": "c882aaa0be323bd5cff55a5689347f4a1b9e13ff", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c882aaa0be323bd5cff55a5689347f4a1b9e13ff", "message": "Add metrics codegen changes for async clients", "committedDate": "2020-06-10T17:08:23Z", "type": "commit"}, {"oid": "9032023c516b877958cd54d39a8f7bd4122bc9ac", "url": "https://github.com/aws/aws-sdk-java-v2/commit/9032023c516b877958cd54d39a8f7bd4122bc9ac", "message": "Added support for HTTP/2 metrics to Netty.\n\nUpdated existing HTTP metrics to specify that they are \"concurrency\", not \"connections\". For HTTP/2, we can't calculate the maximum number of connections, and concurrency is more useful to customers anyway.\n\nFixed the AVAILABLE_CONCURRENCY in Netty to actually be the number of established but idle concurrency, not the difference between max concurrency and leased concurrency.", "committedDate": "2020-06-11T18:40:35Z", "type": "commit"}, {"oid": "1f53f9c0b09ef4849dff42a2fe255e02340dbd09", "url": "https://github.com/aws/aws-sdk-java-v2/commit/1f53f9c0b09ef4849dff42a2fe255e02340dbd09", "message": "Support core metrics for async clients", "committedDate": "2020-06-12T03:34:36Z", "type": "commit"}, {"oid": "49d745e8966ee2f153ea69ad767aa21eaf13d1a6", "url": "https://github.com/aws/aws-sdk-java-v2/commit/49d745e8966ee2f153ea69ad767aa21eaf13d1a6", "message": "Add functional and unit tests to verify async core metrics for event streaming operation", "committedDate": "2020-06-12T18:48:46Z", "type": "commit"}, {"oid": "b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "url": "https://github.com/aws/aws-sdk-java-v2/commit/b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "message": "Add tests for MetricUtils\n\nFollow-up on review comment on #1882", "committedDate": "2020-06-18T15:19:38Z", "type": "commit"}, {"oid": "27fbcfd88a4f5170a9a982563ca6263a8b890ffc", "url": "https://github.com/aws/aws-sdk-java-v2/commit/27fbcfd88a4f5170a9a982563ca6263a8b890ffc", "message": "Merge pull request #1906 from dagnir/metric-utils-test\n\nMetric utils test", "committedDate": "2020-06-18T16:39:44Z", "type": "commit"}, {"oid": "6c888404d3d80e327cad33f7193473ea8018757a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/6c888404d3d80e327cad33f7193473ea8018757a", "message": "Minor metrics fixes\n\n - move ServiceId and OperationName reporting into try block\n - ServiceName -> ServiceId\n - Fix typo in test", "committedDate": "2020-06-18T17:38:10Z", "type": "commit"}, {"oid": "8c192e3b04892987bf0872f76ba4f65167f3a872", "url": "https://github.com/aws/aws-sdk-java-v2/commit/8c192e3b04892987bf0872f76ba4f65167f3a872", "message": "Additional tests for IOException for core metrics", "committedDate": "2020-06-18T18:21:54Z", "type": "commit"}, {"oid": "312d49a0e05c0b431cb0ded45e5245c442259052", "url": "https://github.com/aws/aws-sdk-java-v2/commit/312d49a0e05c0b431cb0ded45e5245c442259052", "message": "Add CloudWatchMetricPublisher, a MetricPublisher implementation that uploads metric data to CloudWatch.", "committedDate": "2020-06-22T20:09:15Z", "type": "commit"}, {"oid": "83d46ca59c168684d9b53fbec22821053f667d4f", "url": "https://github.com/aws/aws-sdk-java-v2/commit/83d46ca59c168684d9b53fbec22821053f667d4f", "message": "Fixed a cloudwatch-metric-publisher issue where very small values would result in a failure calling cloudwatch.", "committedDate": "2020-06-22T21:24:10Z", "type": "commit"}, {"oid": "9908e2253ebc6c2a211be16382c1e1a348db0523", "url": "https://github.com/aws/aws-sdk-java-v2/commit/9908e2253ebc6c2a211be16382c1e1a348db0523", "message": "Merged mainline to metrics development branch", "committedDate": "2020-06-23T04:54:04Z", "type": "commit"}, {"oid": "3d57c583a56c11def229349b01f6c3b2d9fe919a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/3d57c583a56c11def229349b01f6c3b2d9fe919a", "message": "Add HttpClient collector to HTTP request", "committedDate": "2020-06-23T17:46:03Z", "type": "commit"}, {"oid": "203af1cb2d4d8fd24c95f77a4316a735fe6155d2", "url": "https://github.com/aws/aws-sdk-java-v2/commit/203af1cb2d4d8fd24c95f77a4316a735fe6155d2", "message": "Merge pull request #1923 from Quanzzzz/sdk-metrics-development-2\n\nMerge mainline to metrics development branch", "committedDate": "2020-06-23T20:25:48Z", "type": "commit"}, {"oid": "c4346d2cc8d0f02ca60c36088b17e213ec859e1b", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c4346d2cc8d0f02ca60c36088b17e213ec859e1b", "message": "Mutiple metrics fixes\n\n - Allow lists of publishers to be set.\n\n   Allow setting of metric pubishers to be set on the client of request override\n   rather than a single publisher, making using multiple MetricPublishers per\n   client or request easier.\n\n - Remove any non-core usage of MetricUtils.\n\n - Fix metrics test in TranscribeStreamIntegrationTest.\n\n - Fix Async API call metric stage to add the duration in a separate\n   CompletionStage.", "committedDate": "2020-06-30T20:40:43Z", "type": "commit"}, {"oid": "33b3138d20d8cda02fe947235a773dccbe29ad69", "url": "https://github.com/aws/aws-sdk-java-v2/commit/33b3138d20d8cda02fe947235a773dccbe29ad69", "message": "Updated metric publishing to address internal review comments.\n\nAlso fixed an issue where multiple parts of the SDK were ignoring the \"alternate\" request ID.", "committedDate": "2020-06-30T23:45:57Z", "type": "commit"}, {"oid": "43513308e653458b4a8d423a74e6839bd51339f0", "url": "https://github.com/aws/aws-sdk-java-v2/commit/43513308e653458b4a8d423a74e6839bd51339f0", "message": "Add Preview annotations for metrics related classes/methods", "committedDate": "2020-07-01T22:03:01Z", "type": "commit"}, {"oid": "d3e149e1bcf44f7de999e525d8a49fb3fb8dac9d", "url": "https://github.com/aws/aws-sdk-java-v2/commit/d3e149e1bcf44f7de999e525d8a49fb3fb8dac9d", "message": "Update CW Publisher to PREVIEW", "committedDate": "2020-07-02T20:40:05Z", "type": "commit"}, {"oid": "9307eefb9d319feaca989da54a4a560cd4a9a9f1", "url": "https://github.com/aws/aws-sdk-java-v2/commit/9307eefb9d319feaca989da54a4a560cd4a9a9f1", "message": "Merge remote-tracking branch 'origin/master' into sdk-metrics-preview", "committedDate": "2020-07-02T21:33:30Z", "type": "commit"}, {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "url": "https://github.com/aws/aws-sdk-java-v2/commit/bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "message": "Update metrics module versions", "committedDate": "2020-07-02T21:33:52Z", "type": "commit"}, {"oid": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "url": "https://github.com/aws/aws-sdk-java-v2/commit/bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "message": "Update metrics module versions", "committedDate": "2020-07-02T21:33:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4ODkxNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449288915", "bodyText": "Should we return whenComplete's result, so that it's easier to say that \"when the execute future completes, metrics have been published\"?", "author": "millems", "createdAt": "2020-07-02T22:14:34Z", "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-endpoint-discovery-async.java", "diffHunk": "@@ -255,9 +302,19 @@ public final String serviceName() {\n                             .withOperationName(\"TestDiscoveryRequired\")\n                             .withMarshaller(new TestDiscoveryRequiredRequestMarshaller(protocolFactory))\n                             .withResponseHandler(responseHandler).withErrorResponseHandler(errorResponseHandler)\n-                            .discoveredEndpoint(cachedEndpoint).withInput(testDiscoveryRequiredRequest));\n+                            .withMetricCollector(apiCallMetricCollector).discoveredEndpoint(cachedEndpoint)\n+                            .withInput(testDiscoveryRequiredRequest));\n+            AwsRequestOverrideConfiguration requestOverrideConfig = testDiscoveryRequiredRequest.overrideConfiguration().orElse(\n+                    null);\n+            executeFuture.whenComplete((r, e) -> {\n+                List<MetricPublisher> metricPublishers = resolveMetricPublishers(clientConfiguration, requestOverrideConfig);\n+                metricPublishers.forEach(p -> p.publish(apiCallMetricCollector.collect()));\n+            });\n             return executeFuture;", "originalCommit": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MTg5Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r453081896", "bodyText": "+1", "author": "dagnir", "createdAt": "2020-07-10T21:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4ODkxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4OTk3MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449289971", "bodyText": "We might want to consider supporting these, so that enabling the \"NoOpMetricCollector\" won't cause all of the SDK calls to fail with UnsupportedOperationException.", "author": "millems", "createdAt": "2020-07-02T22:17:42Z", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/NoOpMetricCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics;\n+\n+import software.amazon.awssdk.annotations.SdkPreviewApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+\n+/**\n+ * A metric collector that doesn't do anything.\n+ *\n+ * <b>NOTE:</b> This is a Preview API and is subject to change so it should not be used in production.\n+ */\n+@SdkPreviewApi\n+@SdkPublicApi\n+public final class NoOpMetricCollector implements MetricCollector {\n+    private static final NoOpMetricCollector INSTANCE = new NoOpMetricCollector();\n+\n+    private NoOpMetricCollector() {\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"NoOp\";\n+    }\n+\n+    @Override\n+    public <T> void reportMetric(SdkMetric<T> metric, T data) {\n+    }\n+\n+    @Override\n+    public MetricCollector createChild(String name) {\n+        throw new UnsupportedOperationException(\"No op collector does not support createChild\");\n+    }\n+\n+    @Override\n+    public MetricCollection collect() {\n+        throw new UnsupportedOperationException(\"No op collector does not support collect\");\n+    }", "originalCommit": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MDQ1MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449290451", "bodyText": "Do we use this? Why not just let the caller use valueClass().cast(o)?", "author": "millems", "createdAt": "2020-07-02T22:19:31Z", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/SdkMetric.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics;\n+\n+import java.util.Set;\n+import software.amazon.awssdk.annotations.SdkPreviewApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.metrics.internal.DefaultSdkMetric;\n+\n+/**\n+ * A specific SDK metric.\n+ *\n+ * @param <T> The type for values of this metric.\n+ *\n+ * <b>NOTE:</b> This is a Preview API and is subject to change so it should not be used in production.\n+ */\n+@SdkPreviewApi\n+@SdkPublicApi\n+public interface SdkMetric<T> {\n+\n+    /**\n+     * @return The name of this metric.\n+     */\n+    String name();\n+\n+    /**\n+     * @return The categories of this metric.\n+     */\n+    Set<MetricCategory> categories();\n+\n+    /**\n+     * @return The level of this metric.\n+     */\n+    MetricLevel level();\n+\n+    /**\n+     * @return The class of the value associated with this metric.\n+     */\n+    Class<T> valueClass();\n+\n+    /**\n+     * Cast the given object to the value class associated with this event.\n+     *\n+     * @param o The object.\n+     * @return The cast object.\n+     * @throws ClassCastException If {@code o} is not an instance of type {@code\n+     * T}.\n+     */\n+    T convertValue(Object o);", "originalCommit": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4MjEyNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r453082125", "bodyText": "Sure this can be removed, don't think it's used at the moment", "author": "dagnir", "createdAt": "2020-07-10T21:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MDQ1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MDU3NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449290574", "bodyText": "weird formatting", "author": "millems", "createdAt": "2020-07-02T22:20:03Z", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/internal/DefaultMetricCollection.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics.internal;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricRecord;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+import software.amazon.awssdk.utils.ToString;\n+\n+@SdkInternalApi\n+public final class DefaultMetricCollection implements MetricCollection {\n+    private final String name;\n+    private final Map<SdkMetric<?>, List<MetricRecord<?>>> metrics;\n+    private final List<MetricCollection> children;\n+    private final Instant creationTime;\n+\n+    public DefaultMetricCollection(String name, Map<SdkMetric<?>,\n+        List<MetricRecord<?>>> metrics,\n+                                   List<MetricCollection> children) {", "originalCommit": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MTA1Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449291056", "bodyText": "Nit: Capital C?", "author": "millems", "createdAt": "2020-07-02T22:21:47Z", "path": "core/metrics-spi/src/main/java/software/amazon/awssdk/metrics/internal/DefaultMetricCollector.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics.internal;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricCollector;\n+import software.amazon.awssdk.metrics.MetricRecord;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+import software.amazon.awssdk.utils.Logger;\n+import software.amazon.awssdk.utils.ToString;\n+import software.amazon.awssdk.utils.Validate;\n+\n+/**\n+ * TODO: Before launch, we should iterate on the performance of this collector, because it's currently very naive.\n+ */\n+@SdkInternalApi\n+public final class DefaultMetricCollector implements MetricCollector {\n+    private static final Logger log = Logger.loggerFor(DefaultMetricCollector.class);\n+    private final String name;\n+    private final Map<SdkMetric<?>, List<MetricRecord<?>>> metrics = new LinkedHashMap<>();\n+    private final List<MetricCollector> children = new ArrayList<>();\n+\n+    public DefaultMetricCollector(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String name() {\n+        return name;\n+    }\n+\n+    @Override\n+    public synchronized <T> void reportMetric(SdkMetric<T> metric, T data) {\n+        metrics.computeIfAbsent(metric, (m) -> new ArrayList<>())\n+               .add(new DefaultMetricRecord<>(metric, data));\n+    }\n+\n+    @Override\n+    public synchronized MetricCollector createChild(String name) {\n+        MetricCollector child = new DefaultMetricCollector(name);\n+        children.add(child);\n+        return child;\n+    }\n+\n+    @Override\n+    public synchronized MetricCollection collect() {\n+        List<MetricCollection> collectedChildren = children.stream()\n+                .map(MetricCollector::collect)\n+                .collect(Collectors.toList());\n+\n+        DefaultMetricCollection metricRecords = new DefaultMetricCollection(name, metrics, collectedChildren);\n+\n+        log.debug(() -> \"collected metrics records: \" + metricRecords);", "originalCommit": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5Mjg0Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449292847", "bodyText": "Worried about this being used when collect() and newChild() throw exceptions.", "author": "millems", "createdAt": "2020-07-02T22:28:07Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/util/MetricUtils.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.util;\n+\n+import static software.amazon.awssdk.core.http.HttpResponseHandler.X_AMZN_REQUEST_ID_HEADERS;\n+import static software.amazon.awssdk.core.http.HttpResponseHandler.X_AMZ_ID_2_HEADER;\n+\n+import java.time.Duration;\n+import java.util.concurrent.Callable;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.internal.http.RequestExecutionContext;\n+import software.amazon.awssdk.core.metrics.CoreMetric;\n+import software.amazon.awssdk.http.HttpMetric;\n+import software.amazon.awssdk.http.SdkHttpFullResponse;\n+import software.amazon.awssdk.metrics.MetricCollector;\n+import software.amazon.awssdk.metrics.NoOpMetricCollector;\n+import software.amazon.awssdk.utils.Pair;\n+import software.amazon.awssdk.utils.http.SdkHttpUtils;\n+\n+/**\n+ * Utility methods for working with metrics.\n+ */\n+@SdkInternalApi\n+public final class MetricUtils {\n+\n+    private MetricUtils() {\n+    }\n+\n+    /**\n+     * Measure the duration of the given callable.\n+     *\n+     * @param c The callable to measure.\n+     * @return A {@code Pair} containing the result of {@code c} and the duration.\n+     */\n+    public static <T> Pair<T, Duration> measureDuration(Supplier<T> c) {\n+        long start = System.nanoTime();\n+        T result = c.get();\n+        Duration d = Duration.ofNanos(System.nanoTime() - start);\n+        return Pair.of(result, d);\n+    }\n+\n+    /**\n+     * Measure the duration of the given callable.\n+     *\n+     * @param c The callable to measure.\n+     * @return A {@code Pair} containing the result of {@code c} and the duration.\n+     */\n+    public static <T> Pair<T, Duration> measureDurationUnsafe(Callable<T> c) throws Exception {\n+        long start = System.nanoTime();\n+        T result = c.call();\n+        Duration d = Duration.ofNanos(System.nanoTime() - start);\n+        return Pair.of(result, d);\n+    }\n+\n+    public static void collectHttpMetrics(MetricCollector metricCollector, SdkHttpFullResponse httpResponse) {\n+        metricCollector.reportMetric(HttpMetric.HTTP_STATUS_CODE, httpResponse.statusCode());\n+        SdkHttpUtils.allMatchingHeadersFromCollection(httpResponse.headers(), X_AMZN_REQUEST_ID_HEADERS)\n+                    .forEach(v -> metricCollector.reportMetric(CoreMetric.AWS_REQUEST_ID, v));\n+        httpResponse.firstMatchingHeader(X_AMZ_ID_2_HEADER)\n+                    .ifPresent(v -> metricCollector.reportMetric(CoreMetric.AWS_EXTENDED_REQUEST_ID, v));\n+    }\n+\n+    public static MetricCollector createAttemptMetricsCollector(RequestExecutionContext context) {\n+        MetricCollector parentCollector = context.executionContext().metricCollector();\n+        if (parentCollector != null) {\n+            return parentCollector.createChild(\"ApiCallAttempt\");\n+        }\n+        return NoOpMetricCollector.create();\n+    }\n+\n+    public static MetricCollector createHttpMetricsCollector(RequestExecutionContext context) {\n+        MetricCollector parentCollector = context.attemptMetricCollector();\n+        if (parentCollector != null) {\n+            return parentCollector.createChild(\"HttpClient\");\n+        }\n+        return NoOpMetricCollector.create();", "originalCommit": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MzE5OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449293199", "bodyText": "Maybe we should do ~= since this function disregards small, constant time factors.", "author": "millems", "createdAt": "2020-07-02T22:29:24Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/metrics/CoreMetric.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.metrics;\n+\n+import java.time.Duration;\n+import software.amazon.awssdk.annotations.SdkPreviewApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.core.retry.RetryPolicy;\n+import software.amazon.awssdk.metrics.MetricCategory;\n+import software.amazon.awssdk.metrics.MetricLevel;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+\n+/**\n+ * <b>NOTE:</b> This is a Preview API and is subject to change so it should not be used in production.\n+ */\n+@SdkPreviewApi\n+@SdkPublicApi\n+public final class CoreMetric {\n+    /**\n+     * The unique ID for the service. This is present for all API call metrics.\n+     */\n+    public static final SdkMetric<String> SERVICE_ID =\n+        metric(\"ServiceId\", String.class, MetricLevel.ERROR);\n+\n+    /**\n+     * The name of the service operation being invoked. This is present for all\n+     * API call metrics.\n+     */\n+    public static final SdkMetric<String> OPERATION_NAME =\n+        metric(\"OperationName\", String.class, MetricLevel.ERROR);\n+\n+    /**\n+     * True if the API call succeeded, false otherwise.\n+     */\n+    public static final SdkMetric<Boolean> API_CALL_SUCCESSFUL =\n+        metric(\"ApiCallSuccessful\", Boolean.class, MetricLevel.ERROR);\n+\n+    /**\n+     * The number of retries that the SDK performed in the execution of the request. 0 implies that the request worked the first\n+     * time, and no retries were attempted.\n+     */\n+    public static final SdkMetric<Integer> RETRY_COUNT =\n+        metric(\"RetryCount\", Integer.class, MetricLevel.ERROR);\n+\n+    /**\n+     * The duration of the API call. This includes all call attempts made.\n+     *\n+     * <p>{@code API_CALL_DURATION = CREDENTIALS_FETCH_DURATION + MARSHALLING_DURATION + SUM_ALL(BACKOFF_DELAY_DURATION) +", "originalCommit": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MzkwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1938#discussion_r449293906", "bodyText": "I noticed we updated V1 from milliseconds to nanoseconds. Should we just do nanos instead from the beginning for V2?", "author": "millems", "createdAt": "2020-07-02T22:31:52Z", "path": "metric-publishers/cloudwatch-metric-publisher/src/main/java/software/amazon/awssdk/metrics/publishers/cloudwatch/internal/transform/TimeBucketedMetrics.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.metrics.publishers.cloudwatch.internal.transform;\n+\n+import static java.time.temporal.ChronoUnit.MINUTES;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.metrics.MetricCategory;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricLevel;\n+import software.amazon.awssdk.metrics.MetricRecord;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+import software.amazon.awssdk.services.cloudwatch.model.Dimension;\n+import software.amazon.awssdk.services.cloudwatch.model.StandardUnit;\n+\n+/**\n+ * \"Buckets\" metrics by the minute in which they were collected. This allows all metric data for a given 1-minute period to be\n+ * aggregated under a specific {@link MetricAggregator}.\n+ */\n+@SdkInternalApi\n+class TimeBucketedMetrics {\n+    /**\n+     * A map from \"the minute during which a metric value happened\" to \"the dimension and metric associated with the metric\n+     * values\" to \"the aggregator for the metric values that occurred within that minute and for that dimension/metric\".\n+     */\n+    private final Map<Instant, Map<MetricAggregatorKey, MetricAggregator>> timeBucketedMetrics = new HashMap<>();\n+\n+    /**\n+     * The dimensions that should be used for aggregating metrics that occur within a given minute. These are optional values.\n+     * The dimensions will be used if a {@link MetricCollection} includes them, but if it does not, it will be aggregated with\n+     * whatever dimensions (if any) are available.\n+     */\n+    private final Set<SdkMetric<String>> dimensions;\n+\n+    /**\n+     * The set of metrics for which {@link DetailedMetricAggregator}s should be used for aggregation. All other metrics will use\n+     * a {@link SummaryMetricAggregator}.\n+     */\n+    private final Set<SdkMetric<?>> detailedMetrics;\n+\n+    /**\n+     * The metric categories for which we should aggregate values. Any categories outside of this set will have their values\n+     * ignored/dropped.\n+     */\n+    private final Set<MetricCategory> metricCategories;\n+\n+    /**\n+     * The metric levels for which we should aggregate values. Any categories at a more \"verbose\" level than this one will have\n+     * their values ignored/dropped.\n+     */\n+    private final MetricLevel metricLevel;\n+\n+    /**\n+     * True, when the {@link #metricCategories} contains {@link MetricCategory#ALL}.\n+     */\n+    private final boolean metricCategoriesContainsAll;\n+\n+\n+\n+    TimeBucketedMetrics(Set<SdkMetric<String>> dimensions,\n+                        Set<MetricCategory> metricCategories,\n+                        MetricLevel metricLevel,\n+                        Set<SdkMetric<?>> detailedMetrics) {\n+        this.dimensions = dimensions;\n+        this.detailedMetrics = detailedMetrics;\n+        this.metricCategories = metricCategories;\n+        this.metricLevel = metricLevel;\n+        this.metricCategoriesContainsAll = metricCategories.contains(MetricCategory.ALL);\n+    }\n+\n+    /**\n+     * Add the provided collection to the proper bucket, based on the metric collection's time.\n+     */\n+    public void addMetrics(MetricCollection metrics) {\n+        Instant bucket = getBucket(metrics);\n+        addMetricsToBucket(metrics, bucket);\n+    }\n+\n+    /**\n+     * Reset this bucket, clearing all stored values.\n+     */\n+    public void reset() {\n+        timeBucketedMetrics.clear();\n+    }\n+\n+    /**\n+     * Retrieve all values in this collection. The map key is the minute in which the metric values were collected, and the\n+     * map value are all of the metrics that were aggregated during that minute.\n+     */\n+    public Map<Instant, Collection<MetricAggregator>> timeBucketedMetrics() {\n+        return timeBucketedMetrics.entrySet()\n+                                  .stream()\n+                                  .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue().values()));\n+    }\n+\n+    private Instant getBucket(MetricCollection metrics) {\n+        return metrics.creationTime().truncatedTo(MINUTES);\n+    }\n+\n+    private void addMetricsToBucket(MetricCollection metrics, Instant bucketId) {\n+        aggregateMetrics(metrics, timeBucketedMetrics.computeIfAbsent(bucketId, i -> new HashMap<>()));\n+    }\n+\n+    private void aggregateMetrics(MetricCollection metrics, Map<MetricAggregatorKey, MetricAggregator> bucket) {\n+        List<Dimension> dimensions = dimensions(metrics);\n+        extractAllMetrics(metrics).forEach(metricRecord -> {\n+            MetricAggregatorKey aggregatorKey = new MetricAggregatorKey(metricRecord.metric(), dimensions);\n+            valueFor(metricRecord).ifPresent(metricValue -> {\n+                bucket.computeIfAbsent(aggregatorKey, m -> newAggregator(aggregatorKey))\n+                      .addMetricValue(MetricValueNormalizer.normalize(metricValue));\n+            });\n+        });\n+    }\n+\n+    private List<Dimension> dimensions(MetricCollection metricCollection) {\n+        List<Dimension> result = new ArrayList<>();\n+        for (MetricRecord<?> metricRecord : metricCollection) {\n+            if (dimensions.contains(metricRecord.metric())) {\n+                result.add(Dimension.builder()\n+                                    .name(metricRecord.metric().name())\n+                                    .value((String) metricRecord.value())\n+                                    .build());\n+            }\n+        }\n+\n+        // Sort the dimensions to make sure that the order in the input metric collection doesn't affect the result.\n+        // We use descending order just so that \"ServiceName\" is before \"OperationName\" when we use the default dimensions.\n+        result.sort(Comparator.comparing(Dimension::name).reversed());\n+        return result;\n+    }\n+\n+    private List<MetricRecord<?>> extractAllMetrics(MetricCollection metrics) {\n+        List<MetricRecord<?>> result = new ArrayList<>();\n+        extractAllMetrics(metrics, result);\n+        return result;\n+    }\n+\n+    private void extractAllMetrics(MetricCollection metrics, List<MetricRecord<?>> extractedMetrics) {\n+        for (MetricRecord<?> metric : metrics) {\n+            extractedMetrics.add(metric);\n+        }\n+        metrics.children().forEach(child -> extractAllMetrics(child, extractedMetrics));\n+    }\n+\n+    private MetricAggregator newAggregator(MetricAggregatorKey aggregatorKey) {\n+        SdkMetric<?> metric = aggregatorKey.metric();\n+        StandardUnit metricUnit = unitFor(metric);\n+        if (detailedMetrics.contains(metric)) {\n+            return new DetailedMetricAggregator(aggregatorKey, metricUnit);\n+        } else {\n+            return new SummaryMetricAggregator(aggregatorKey, metricUnit);\n+        }\n+    }\n+\n+    private StandardUnit unitFor(SdkMetric<?> metric) {\n+        Class<?> metricType = metric.valueClass();\n+\n+        if (Duration.class.isAssignableFrom(metricType)) {\n+            return StandardUnit.MILLISECONDS;\n+        }", "originalCommit": "bac7d6f06bac3f985ded5a0c507143d8a84f4bd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "47da2eec26151650b968335e200f5896328035ce", "url": "https://github.com/aws/aws-sdk-java-v2/commit/47da2eec26151650b968335e200f5896328035ce", "message": "Merge remote-tracking branch 'origin/master' into sdk-metrics-preview", "committedDate": "2020-07-06T21:13:13Z", "type": "commit"}, {"oid": "9faee7d440bf49c1dff8a3f0872a70e0eb47b672", "url": "https://github.com/aws/aws-sdk-java-v2/commit/9faee7d440bf49c1dff8a3f0872a70e0eb47b672", "message": "Update versions to match latest SNAPSHOT in master", "committedDate": "2020-07-06T22:19:57Z", "type": "commit"}, {"oid": "843adfc95201f0baa3a4524cb0793acb9fdcff1d", "url": "https://github.com/aws/aws-sdk-java-v2/commit/843adfc95201f0baa3a4524cb0793acb9fdcff1d", "message": "Add announcement blog post", "committedDate": "2020-07-06T22:54:25Z", "type": "commit"}]}