{"pr_number": 1643, "pr_title": "Dynamodb-enhanced [preview]: Updates table interfaces with atomic ope\u2026", "pr_createdAt": "2020-02-10T22:48:52Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1643", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzYxMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377863610", "bodyText": "Is there any reason we have create method?", "author": "zoewangg", "createdAt": "2020-02-11T19:54:11Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/DeleteItemEnhancedRequest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Expression;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n+\n+@SdkPublicApi\n+public class DeleteItemEnhancedRequest<T> {\n+\n+    private final Key key;\n+    private final Expression conditionExpression;\n+\n+    private DeleteItemEnhancedRequest(Builder builder) {\n+        this.key = builder.key;\n+        this.conditionExpression = builder.conditionExpression;\n+    }\n+\n+    public static <T> DeleteItemEnhancedRequest<T> create(Key key) {", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwNjA1OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377906059", "bodyText": "AFAIK, to cover the simplest creation use case and give a shortcut instead of doing builder().build().", "author": "cenedhryn", "createdAt": "2020-02-11T21:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwNzg4MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377907880", "bodyText": "Is Key the \"required\" field? I'd argue if we add more other fields in the future, this would be obsolete.\nI think the consumer builder pattern should reduce the verbosity of builder creation. What do you think?", "author": "zoewangg", "createdAt": "2020-02-11T21:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyNDg4OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377924888", "bodyText": "I am on the fence because I like the simplicity of it, but the two way door decision principle does indicate remove (cause we can always put it back). So will remove", "author": "cenedhryn", "createdAt": "2020-02-11T21:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/DeleteItemEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/DeleteItemEnhancedRequest.java\nindex e458f004de..10123f6a0b 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/DeleteItemEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/DeleteItemEnhancedRequest.java\n\n@@ -20,7 +20,7 @@ import software.amazon.awssdk.extensions.dynamodb.mappingclient.Expression;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n \n @SdkPublicApi\n-public class DeleteItemEnhancedRequest<T> {\n+public final class DeleteItemEnhancedRequest<T> {\n \n     private final Key key;\n     private final Expression conditionExpression;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2Mzg3MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377863871", "bodyText": "final", "author": "zoewangg", "createdAt": "2020-02-11T19:54:37Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/GetItemEnhancedRequest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n+\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n+\n+@SdkPublicApi\n+public class GetItemEnhancedRequest<T> {", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/GetItemEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/GetItemEnhancedRequest.java\nindex 9856bed89b..bcc9e8fa6e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/GetItemEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/GetItemEnhancedRequest.java\n\n@@ -19,7 +19,7 @@ import software.amazon.awssdk.annotations.SdkPublicApi;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n \n @SdkPublicApi\n-public class GetItemEnhancedRequest<T> {\n+public final class GetItemEnhancedRequest<T> {\n \n     private final Key key;\n     private final Boolean consistentRead;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NTQyOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377875429", "bodyText": "Should we pass a Builder so that we don't need to add another parameter when adding a new field in the future.", "author": "zoewangg", "createdAt": "2020-02-11T20:19:38Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java", "diffHunk": "@@ -16,109 +16,37 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n-import software.amazon.awssdk.extensions.dynamodb.mappingclient.BatchableReadOperation;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableMetadata;\n-import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.GetItem;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n import software.amazon.awssdk.services.dynamodb.model.KeysAndAttributes;\n \n-/**\n- * Encapsulates a single write transaction that can form a list of transactions that go into a\n- * {@link BatchGetItemEnhancedRequest}.\n- * Example:\n- *\n- * {@code\n- * ReadBatch.create(myTable, putItem(myItem));\n- * ReadBatch.createf(myTable, deleteItem(Key.create(stringValue(\"id123\"))));\n- * }\n- *\n- * @param <T> The type of object this transaction applies to. Can be safely erased as it's not needed outside the\n- *            class itself.\n- */\n @SdkPublicApi\n-public class ReadBatch<T> {\n-    private final MappedTableResource<T> mappedTableResource;\n-    private final List<BatchableReadOperation> readOperations;\n-\n-    private ReadBatch(Builder<T> builder) {\n-        this.mappedTableResource = builder.mappedTableResource;\n-        this.readOperations = Collections.unmodifiableList(builder.readOperations);\n-    }\n-\n-    public static <T> ReadBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                      Collection<BatchableReadOperation> readOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).readOperations(readOperations).build();\n-    }\n+public class ReadBatch {\n+    private final String tableName;\n+    private final KeysAndAttributes keysAndAttributes;\n \n-    public static <T> ReadBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                      BatchableReadOperation... readOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).readOperations(readOperations).build();\n+    private ReadBatch(String tableName, KeysAndAttributes keysAndAttributes) {", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwODkzMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377908933", "bodyText": "That's the pattern used elsewhere, but in this case it doesn't work because\n\nWe're generating new objects in build() that aren't fields in Builder\nWe want to keep ReadBatch not use generic type <T> which precludes the use of MappedTableResource when instantiating ReadBatch", "author": "cenedhryn", "createdAt": "2020-02-11T21:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NTQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzE4OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r378417188", "bodyText": "Introduced a Builder interface as discussed.", "author": "cenedhryn", "createdAt": "2020-02-12T17:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NTQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java\nindex 3831372e46..52cecc342d 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java\n\n@@ -18,27 +18,26 @@ package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableMetadata;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n import software.amazon.awssdk.services.dynamodb.model.KeysAndAttributes;\n \n @SdkPublicApi\n-public class ReadBatch {\n+public final class ReadBatch {\n     private final String tableName;\n     private final KeysAndAttributes keysAndAttributes;\n \n-    private ReadBatch(String tableName, KeysAndAttributes keysAndAttributes) {\n-        this.tableName = tableName;\n-        this.keysAndAttributes = keysAndAttributes;\n+    private ReadBatch(BuilderImpl<?> builder) {\n+        this.tableName = builder.mappedTableResource.tableName();\n+        this.keysAndAttributes = generateKeysAndAttributes(builder.requests, builder.mappedTableResource.tableSchema());\n     }\n \n     public static <T> Builder<T> builder(Class<? extends T> itemClass) {\n-        return new Builder<>();\n+        return new BuilderImpl<>();\n     }\n \n     public String tableName() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NjI2OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377876269", "bodyText": "I believe the style we follow in dynamodb mapper is to move the validation and logic to the ctor, correct? @bmaizels", "author": "zoewangg", "createdAt": "2020-02-11T20:21:22Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java", "diffHunk": "@@ -171,26 +89,53 @@ private Builder() {\n             return this;\n         }\n \n-        public Builder<T> readOperations(Collection<BatchableReadOperation> readOperations) {\n-            this.readOperations = new ArrayList<>(readOperations);\n+        public Builder<T> addGetItem(GetItemEnhancedRequest request) {\n+            requests.add(request);\n             return this;\n         }\n \n-        public Builder<T> readOperations(BatchableReadOperation ...readOperations) {\n-            this.readOperations = Arrays.asList(readOperations);\n-            return this;\n+        public ReadBatch build() {\n+            return new ReadBatch(mappedTableResource.tableName(), generateKeysAndAttributes(requests));\n         }\n \n-        public Builder addReadOperation(BatchableReadOperation readOperation) {\n-            if (readOperations == null) {\n-                readOperations = new ArrayList<>();\n-            }\n-            readOperations.add(readOperation);\n-            return this;\n+        private KeysAndAttributes generateKeysAndAttributes(List<GetItemEnhancedRequest> readRequests) {", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java\nindex 3831372e46..52cecc342d 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java\n\n@@ -77,11 +76,69 @@ public class ReadBatch {\n         return result;\n     }\n \n-    public static final class Builder<T> {\n+    public interface Builder<T> {\n+        Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource);\n+\n+        Builder<T> addGetItem(GetItemEnhancedRequest request);\n+\n+        ReadBatch build();\n+    }\n+\n+    private static <T> KeysAndAttributes generateKeysAndAttributes(List<GetItemEnhancedRequest> readRequests,\n+                                                                   TableSchema<T> tableSchema) {\n+\n+\n+        Boolean firstRecordConsistentRead = validateAndGetConsistentRead(readRequests);\n+\n+        List<Map<String, AttributeValue>> keys =\n+            readRequests.stream()\n+                        .map(GetItemEnhancedRequest::key)\n+                        .map(key -> key.keyMap(tableSchema, TableMetadata.primaryIndexName()))\n+                        .collect(Collectors.toList());\n+\n+        return KeysAndAttributes.builder()\n+                                .keys(keys)\n+                                .consistentRead(firstRecordConsistentRead)\n+                                .build();\n+\n+    }\n+\n+    private static Boolean validateAndGetConsistentRead(List<GetItemEnhancedRequest> readRequests) {\n+        Boolean firstRecordConsistentRead = null;\n+        boolean isFirstRecord = true;\n+\n+        for (GetItemEnhancedRequest request : readRequests) {\n+            if (isFirstRecord) {\n+                isFirstRecord = false;\n+                firstRecordConsistentRead = request.consistentRead();\n+            } else {\n+                if (!compareNullableBooleans(firstRecordConsistentRead, request.consistentRead())) {\n+                    throw new IllegalArgumentException(\"All batchable read requests for the same \"\n+                                                       + \"table must have the same 'consistentRead' \"\n+                                                       + \"setting.\");\n+                }\n+            }\n+        }\n+        return firstRecordConsistentRead;\n+    }\n+\n+    private static boolean compareNullableBooleans(Boolean one, Boolean two) {\n+        if (one == null && two == null) {\n+            return true;\n+        }\n+\n+        if (one != null) {\n+            return one.equals(two);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    private static final class BuilderImpl<T> implements Builder<T> {\n         private MappedTableResource<T> mappedTableResource;\n         private List<GetItemEnhancedRequest> requests = new ArrayList<>();\n \n-        private Builder() {\n+        private BuilderImpl() {\n         }\n \n         public Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4NjQ3Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377886476", "bodyText": "Is there any reason we use AtomicReference and AtomicBoolean?", "author": "zoewangg", "createdAt": "2020-02-11T20:42:40Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java", "diffHunk": "@@ -171,26 +89,53 @@ private Builder() {\n             return this;\n         }\n \n-        public Builder<T> readOperations(Collection<BatchableReadOperation> readOperations) {\n-            this.readOperations = new ArrayList<>(readOperations);\n+        public Builder<T> addGetItem(GetItemEnhancedRequest request) {\n+            requests.add(request);\n             return this;\n         }\n \n-        public Builder<T> readOperations(BatchableReadOperation ...readOperations) {\n-            this.readOperations = Arrays.asList(readOperations);\n-            return this;\n+        public ReadBatch build() {\n+            return new ReadBatch(mappedTableResource.tableName(), generateKeysAndAttributes(requests));\n         }\n \n-        public Builder addReadOperation(BatchableReadOperation readOperation) {\n-            if (readOperations == null) {\n-                readOperations = new ArrayList<>();\n-            }\n-            readOperations.add(readOperation);\n-            return this;\n+        private KeysAndAttributes generateKeysAndAttributes(List<GetItemEnhancedRequest> readRequests) {\n+            AtomicReference<Boolean> consistentRead = new AtomicReference<>();\n+            AtomicBoolean firstRecord = new AtomicBoolean(true);", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwOTI4OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377909289", "bodyText": "The code was there previously. @bmaizels?", "author": "cenedhryn", "createdAt": "2020-02-11T21:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4NjQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java\nindex 3831372e46..52cecc342d 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/ReadBatch.java\n\n@@ -77,11 +76,69 @@ public class ReadBatch {\n         return result;\n     }\n \n-    public static final class Builder<T> {\n+    public interface Builder<T> {\n+        Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource);\n+\n+        Builder<T> addGetItem(GetItemEnhancedRequest request);\n+\n+        ReadBatch build();\n+    }\n+\n+    private static <T> KeysAndAttributes generateKeysAndAttributes(List<GetItemEnhancedRequest> readRequests,\n+                                                                   TableSchema<T> tableSchema) {\n+\n+\n+        Boolean firstRecordConsistentRead = validateAndGetConsistentRead(readRequests);\n+\n+        List<Map<String, AttributeValue>> keys =\n+            readRequests.stream()\n+                        .map(GetItemEnhancedRequest::key)\n+                        .map(key -> key.keyMap(tableSchema, TableMetadata.primaryIndexName()))\n+                        .collect(Collectors.toList());\n+\n+        return KeysAndAttributes.builder()\n+                                .keys(keys)\n+                                .consistentRead(firstRecordConsistentRead)\n+                                .build();\n+\n+    }\n+\n+    private static Boolean validateAndGetConsistentRead(List<GetItemEnhancedRequest> readRequests) {\n+        Boolean firstRecordConsistentRead = null;\n+        boolean isFirstRecord = true;\n+\n+        for (GetItemEnhancedRequest request : readRequests) {\n+            if (isFirstRecord) {\n+                isFirstRecord = false;\n+                firstRecordConsistentRead = request.consistentRead();\n+            } else {\n+                if (!compareNullableBooleans(firstRecordConsistentRead, request.consistentRead())) {\n+                    throw new IllegalArgumentException(\"All batchable read requests for the same \"\n+                                                       + \"table must have the same 'consistentRead' \"\n+                                                       + \"setting.\");\n+                }\n+            }\n+        }\n+        return firstRecordConsistentRead;\n+    }\n+\n+    private static boolean compareNullableBooleans(Boolean one, Boolean two) {\n+        if (one == null && two == null) {\n+            return true;\n+        }\n+\n+        if (one != null) {\n+            return one.equals(two);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    private static final class BuilderImpl<T> implements Builder<T> {\n         private MappedTableResource<T> mappedTableResource;\n         private List<GetItemEnhancedRequest> requests = new ArrayList<>();\n \n-        private Builder() {\n+        private BuilderImpl() {\n         }\n \n         public Builder<T> mappedTableResource(MappedTableResource<T> mappedTableResource) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4ODMzMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377888333", "bodyText": "Can we use immutable list?", "author": "zoewangg", "createdAt": "2020-02-11T20:46:37Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java", "diffHunk": "@@ -16,35 +16,33 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.OperationContext;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TransactableReadOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.GetItemOperation;\n+import software.amazon.awssdk.services.dynamodb.model.TransactGetItem;\n \n @SdkPublicApi\n public class TransactGetItemsEnhancedRequest {\n \n-    private final List<ReadTransaction> readTransactions;\n+    private final List<TransactGetItem> transactGetItems;\n \n     private TransactGetItemsEnhancedRequest(Builder builder) {\n-        this.readTransactions = Collections.unmodifiableList(builder.readTransactions);\n-    }\n-\n-    public static TransactGetItemsEnhancedRequest create(Collection<ReadTransaction> transactGetRequests) {\n-        return builder().readTransactions(transactGetRequests).build();\n+        this.transactGetItems = builder.itemSupplierList.stream()\n+                                                        .map(Supplier::get)\n+                                                        .collect(Collectors.toList());", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java\nindex 3fccaa77c4..36400dcd61 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactGetItemsEnhancedRequest.java\n\n@@ -16,6 +16,7 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4ODU4NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377888584", "bodyText": "Same as above, let's use immutable list", "author": "zoewangg", "createdAt": "2020-02-11T20:47:08Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java", "diffHunk": "@@ -16,35 +16,35 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.OperationContext;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TransactableWriteOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.DeleteItemOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItemOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.UpdateItemOperation;\n+import software.amazon.awssdk.services.dynamodb.model.TransactWriteItem;\n \n @SdkPublicApi\n public class TransactWriteItemsEnhancedRequest {\n \n-    private final List<WriteTransaction> writeTransactions;\n+    private final List<TransactWriteItem> transactWriteItems;\n \n     private TransactWriteItemsEnhancedRequest(Builder builder) {\n-        this.writeTransactions = Collections.unmodifiableList(builder.writeTransactions);\n-    }\n-\n-    public static TransactWriteItemsEnhancedRequest create(Collection<WriteTransaction> writeTransactions) {\n-        return builder().writeTransactions(writeTransactions).build();\n+        this.transactWriteItems = builder.itemSupplierList.stream()\n+                                                          .map(Supplier::get)\n+                                                          .collect(Collectors.toList());", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java\nindex a2d8db4ef9..e44391a315 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/TransactWriteItemsEnhancedRequest.java\n\n@@ -16,6 +16,7 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5MzgxOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377893818", "bodyText": "Let's deep copy the map before wrapping it with unmodifiableMap.\nCollectionUtils.deepCopyMap", "author": "zoewangg", "createdAt": "2020-02-11T20:57:41Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/BatchWriteItemOperation.java", "diffHunk": "@@ -48,11 +49,17 @@ public static BatchWriteItemOperation create(BatchWriteItemEnhancedRequest reque\n \n     @Override\n     public BatchWriteItemRequest generateRequest(MapperExtension mapperExtension) {\n-        Map<String, Collection<WriteRequest>> requestItems = new HashMap<>();\n-        request.writeBatches().forEach(writeBatch -> writeBatch.addWriteRequestsToMap(requestItems));\n+        Map<String, Collection<WriteRequest>> allRequestItems = new HashMap<>();\n+\n+        request.writeBatches().forEach(writeBatch -> {\n+            Collection<WriteRequest> writeRequestsForTable = allRequestItems.computeIfAbsent(\n+                writeBatch.tableName(),\n+                ignored -> new ArrayList<>());\n+            writeRequestsForTable.addAll(writeBatch.writeRequests());\n+        });\n \n         return BatchWriteItemRequest.builder()\n-                                    .requestItems(Collections.unmodifiableMap(requestItems))\n+                                    .requestItems(Collections.unmodifiableMap(allRequestItems))", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/BatchWriteItemOperation.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/BatchWriteItemOperation.java\nindex d269374a0d..b79c37f44e 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/BatchWriteItemOperation.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/BatchWriteItemOperation.java\n\n@@ -49,7 +51,7 @@ public class BatchWriteItemOperation implements DatabaseOperation<BatchWriteItem\n \n     @Override\n     public BatchWriteItemRequest generateRequest(MapperExtension mapperExtension) {\n-        Map<String, Collection<WriteRequest>> allRequestItems = new HashMap<>();\n+        Map<String, List<WriteRequest>> allRequestItems = new HashMap<>();\n \n         request.writeBatches().forEach(writeBatch -> {\n             Collection<WriteRequest> writeRequestsForTable = allRequestItems.computeIfAbsent(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5ODQxNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377898415", "bodyText": "Could you explain it more?", "author": "zoewangg", "createdAt": "2020-02-11T21:06:49Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/UpdateItemOperation.java", "diffHunk": "@@ -282,31 +200,50 @@ private static Expression generateUpdateExpression(Map<String, AttributeValue> a\n                          .build();\n     }\n \n-    public static final class Builder<T> {\n-        private T item;\n-        private Boolean ignoreNulls;\n-        private Expression conditionExpression;\n+    private UpdateItemRequest.Builder addExpressionsIfExist(WriteModification transformation,\n+                                                            Map<String, AttributeValue> filteredAttributeValues,\n+                                                            UpdateItemRequest.Builder requestBuilder) {\n+        Map<String, String> expressionNames = null;\n+        Map<String, AttributeValue> expressionValues = null;\n+        String conditionExpressionString = null;\n \n-        private Builder() {\n+        /* Add update expression for transformed non-key attributes if applicable */\n+        if (!filteredAttributeValues.isEmpty()) {\n+            Expression fullUpdateExpression = generateUpdateExpression(filteredAttributeValues);\n+            expressionNames = fullUpdateExpression.expressionNames();\n+            expressionValues = fullUpdateExpression.expressionValues();\n+            requestBuilder = requestBuilder.updateExpression(fullUpdateExpression.expression());\n         }\n \n-        public Builder<T> ignoreNulls(Boolean ignoreNulls) {\n-            this.ignoreNulls = ignoreNulls;\n-            return this;\n+        /* Merge in conditional expression from extension WriteModification if applicable */\n+        if (transformation != null && transformation.additionalConditionalExpression() != null) {\n+            expressionNames =\n+                Expression.coalesceNames(expressionNames,\n+                                         transformation.additionalConditionalExpression().expressionNames());\n+            expressionValues =\n+                Expression.coalesceValues(expressionValues,\n+                                          transformation.additionalConditionalExpression().expressionValues());\n+            conditionExpressionString = transformation.additionalConditionalExpression().expression();\n         }\n \n-        public Builder<T> conditionExpression(Expression conditionExpression) {\n-            this.conditionExpression = conditionExpression;\n-            return this;\n+        /* Merge in conditional expression from specified 'conditionExpression' if applicable */\n+        if (this.request.conditionExpression() != null) {\n+            expressionNames = Expression.coalesceNames(expressionNames, this.request.conditionExpression().expressionNames());\n+            expressionValues = Expression.coalesceValues(expressionValues, this.request.conditionExpression().expressionValues());\n+            conditionExpressionString = Expression.coalesceExpressions(conditionExpressionString,\n+                                                                       this.request.conditionExpression().expression(), \" AND \");\n         }\n \n-        public Builder<T> item(T item) {\n-            this.item = item;\n-            return this;\n+        // The SDK handles collections a little weirdly. Avoiding adding empty collections", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/UpdateItemOperation.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/UpdateItemOperation.java\nindex bf2158ac04..a9f92f6177 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/UpdateItemOperation.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/operations/UpdateItemOperation.java\n\n@@ -234,7 +234,7 @@ public class UpdateItemOperation<T>\n                                                                        this.request.conditionExpression().expression(), \" AND \");\n         }\n \n-        // The SDK handles collections a little weirdly. Avoiding adding empty collections\n+        // Avoiding adding empty collections that the low level SDK will propagate to DynamoDB where it causes error.\n         if (expressionNames != null && !expressionNames.isEmpty()) {\n             requestBuilder = requestBuilder.expressionAttributeNames(expressionNames);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMDUyMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377900521", "bodyText": "passing builder?", "author": "zoewangg", "createdAt": "2020-02-11T21:11:13Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -16,88 +16,40 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.BatchableWriteOperation;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.OperationContext;\n-import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItem;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.DeleteItemOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItemOperation;\n import software.amazon.awssdk.services.dynamodb.model.WriteRequest;\n \n-/**\n- * Encapsulates a single write batch that can form a list of write batches that go into a {@link BatchWriteItemEnhancedRequest}.\n- * Example:\n- *\n- * {@code\n- * WriteBatch.create(myTable, putItem.create(myItem));\n- * WriteBatch.create(myTable, deleteItem(Key.of(stringValue(\"id123\"))));\n- * }\n- *\n- * @param <T> The type of object this batch applies to. Can be safely erased as it's not needed outside the\n- *            class itself.\n- */\n @SdkPublicApi\n-public class WriteBatch<T> {\n-    private final MappedTableResource<T> mappedTableResource;\n-    private final List<BatchableWriteOperation<T>> writeOperations;\n-\n-    private WriteBatch(Builder<T> builder) {\n-        this.mappedTableResource = builder.mappedTableResource;\n-        this.writeOperations = Collections.unmodifiableList(builder.writeOperations);\n-    }\n-\n-    public static <T> WriteBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                       Collection<BatchableWriteOperation<T>> writeOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).writeOperations(writeOperations).build();\n-    }\n-\n-    @SafeVarargs\n-    public static <T> WriteBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                       BatchableWriteOperation<T>... writeOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).writeOperations(writeOperations).build();\n+public class WriteBatch {\n+    private final String tableName;\n+    private final List<WriteRequest> writeRequests;\n+\n+    private WriteBatch(String tableName, List<Supplier<WriteRequest>> suppliers) {", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java\nindex 75d855f55e..7de9f7fbcb 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java\n\n@@ -17,6 +17,7 @@ package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwMDY4Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1643#discussion_r377900686", "bodyText": "Immutable list?", "author": "zoewangg", "createdAt": "2020-02-11T21:11:36Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java", "diffHunk": "@@ -16,88 +16,40 @@\n package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import software.amazon.awssdk.annotations.SdkPublicApi;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.BatchableWriteOperation;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.MappedTableResource;\n import software.amazon.awssdk.extensions.dynamodb.mappingclient.OperationContext;\n-import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItem;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.DeleteItemOperation;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItemOperation;\n import software.amazon.awssdk.services.dynamodb.model.WriteRequest;\n \n-/**\n- * Encapsulates a single write batch that can form a list of write batches that go into a {@link BatchWriteItemEnhancedRequest}.\n- * Example:\n- *\n- * {@code\n- * WriteBatch.create(myTable, putItem.create(myItem));\n- * WriteBatch.create(myTable, deleteItem(Key.of(stringValue(\"id123\"))));\n- * }\n- *\n- * @param <T> The type of object this batch applies to. Can be safely erased as it's not needed outside the\n- *            class itself.\n- */\n @SdkPublicApi\n-public class WriteBatch<T> {\n-    private final MappedTableResource<T> mappedTableResource;\n-    private final List<BatchableWriteOperation<T>> writeOperations;\n-\n-    private WriteBatch(Builder<T> builder) {\n-        this.mappedTableResource = builder.mappedTableResource;\n-        this.writeOperations = Collections.unmodifiableList(builder.writeOperations);\n-    }\n-\n-    public static <T> WriteBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                       Collection<BatchableWriteOperation<T>> writeOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).writeOperations(writeOperations).build();\n-    }\n-\n-    @SafeVarargs\n-    public static <T> WriteBatch<T> create(MappedTableResource<T> mappedTableResource,\n-                                       BatchableWriteOperation<T>... writeOperations) {\n-        return new Builder<T>().mappedTableResource(mappedTableResource).writeOperations(writeOperations).build();\n+public class WriteBatch {\n+    private final String tableName;\n+    private final List<WriteRequest> writeRequests;\n+\n+    private WriteBatch(String tableName, List<Supplier<WriteRequest>> suppliers) {\n+        this.tableName = tableName;\n+        this.writeRequests = suppliers.stream()\n+                                      .map(Supplier::get)\n+                                      .collect(Collectors.toList());", "originalCommit": "d7b4f497f1686485b299d07bfbf48dca3c01ee13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java\nindex 75d855f55e..7de9f7fbcb 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/WriteBatch.java\n\n@@ -17,6 +17,7 @@ package software.amazon.awssdk.extensions.dynamodb.mappingclient.model;\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n"}}, {"oid": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "url": "https://github.com/aws/aws-sdk-java-v2/commit/994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "message": "Dynamodb-enhanced [preview]: Updates table interfaces with atomic operations", "committedDate": "2020-02-12T21:48:11Z", "type": "commit"}, {"oid": "994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "url": "https://github.com/aws/aws-sdk-java-v2/commit/994b1b18387cd2c8bbeca7f75cb29d742f77bf91", "message": "Dynamodb-enhanced [preview]: Updates table interfaces with atomic operations", "committedDate": "2020-02-12T21:48:11Z", "type": "forcePushed"}, {"oid": "eddde76e0fcc4e673f68b4c7f616cd9b44ecf08e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/eddde76e0fcc4e673f68b4c7f616cd9b44ecf08e", "message": "Merge branch 'master' into salande/ddbmapper-table-op-split-atomic", "committedDate": "2020-02-12T22:09:56Z", "type": "commit"}]}