{"pr_number": 1644, "pr_title": "PR #728 attempt 2: Fixed buggy netty-reactive-streams test and re-added changes from PR", "pr_createdAt": "2020-02-11T01:11:09Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1644", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMjQ2NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1644#discussion_r377412464", "bodyText": "As discussed, let's look into simplifying this either with a single threaded test or using .getAndIncrement() to cache the value instead of get() that then requires a compareAndSet()", "author": "bmaizels", "createdAt": "2020-02-11T01:34:33Z", "path": "http-clients/netty-nio-client/src/test/java/software/amazon/awssdk/http/nio/netty/internal/nrs/util/BatchedProducer.java", "diffHunk": "@@ -58,10 +58,18 @@ public void read(final ChannelHandlerContext ctx) throws Exception {\n         ctx.pipeline().channel().eventLoop().parent().execute(new Runnable() {\n             @Override\n             public void run() {\n-                for (int i = 0; i < batchSize && sequence.get() != eofOn; i++) {\n-                    ctx.fireChannelRead(sequence.getAndIncrement());\n+                long valueToProduce = sequence.get();\n+                for (int i = 0; i < batchSize && valueToProduce != eofOn;) {\n+                    if (!sequence.compareAndSet(valueToProduce, valueToProduce + 1)) {\n+                        // Another thread already produced this value, try again with the next value.\n+                        valueToProduce = sequence.get();\n+                        continue;\n+                    }\n+\n+                    ctx.fireChannelRead(valueToProduce);\n+                    ++i;", "originalCommit": "749ebdb65fe6b2353276a5300e5e7f7dc09c3aa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMzcwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1644#discussion_r377413706", "bodyText": "Re-wrote it to use a single-threaded executor, which is what I think the original author was trying to do by scheduling it on the parent event-loop executor. That way there's no concurrency concerns at all.", "author": "millems", "createdAt": "2020-02-11T01:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMjQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "6535a8b1d41eb49b8ae8c1f0ddceec0fd99fe335", "chunk": "diff --git a/http-clients/netty-nio-client/src/test/java/software/amazon/awssdk/http/nio/netty/internal/nrs/util/BatchedProducer.java b/http-clients/netty-nio-client/src/test/java/software/amazon/awssdk/http/nio/netty/internal/nrs/util/BatchedProducer.java\nindex d476a46260..faadecb271 100644\n--- a/http-clients/netty-nio-client/src/test/java/software/amazon/awssdk/http/nio/netty/internal/nrs/util/BatchedProducer.java\n+++ b/http-clients/netty-nio-client/src/test/java/software/amazon/awssdk/http/nio/netty/internal/nrs/util/BatchedProducer.java\n\n@@ -55,25 +58,15 @@ public class BatchedProducer extends ChannelOutboundHandlerAdapter {\n         if (cancelled) {\n             throw new IllegalStateException(\"Received demand after being cancelled\");\n         }\n-        ctx.pipeline().channel().eventLoop().parent().execute(new Runnable() {\n-            @Override\n-            public void run() {\n-                long valueToProduce = sequence.get();\n-                for (int i = 0; i < batchSize && valueToProduce != eofOn;) {\n-                    if (!sequence.compareAndSet(valueToProduce, valueToProduce + 1)) {\n-                        // Another thread already produced this value, try again with the next value.\n-                        valueToProduce = sequence.get();\n-                        continue;\n-                    }\n-\n-                    ctx.fireChannelRead(valueToProduce);\n-                    ++i;\n-                }\n-                if (eofOn == valueToProduce) {\n-                    ctx.fireChannelInactive();\n-                } else {\n-                    ctx.fireChannelReadComplete();\n-                }\n+        executor.execute(() -> {\n+            for (int i = 0; i < batchSize && sequence != eofOn;) {\n+                ctx.fireChannelRead(sequence++);\n+                ++i;\n+            }\n+            if (eofOn == sequence) {\n+                ctx.fireChannelInactive();\n+            } else {\n+                ctx.fireChannelReadComplete();\n             }\n         });\n     }\n"}}, {"oid": "6535a8b1d41eb49b8ae8c1f0ddceec0fd99fe335", "url": "https://github.com/aws/aws-sdk-java-v2/commit/6535a8b1d41eb49b8ae8c1f0ddceec0fd99fe335", "message": "Fixed a race condition in netty-reactive-streams test: BatchedProducer would sometimes miss that it should stop producing data.", "committedDate": "2020-02-11T01:38:48Z", "type": "forcePushed"}, {"oid": "83a79b50974bac514bf06827a9e1b7999efaf27b", "url": "https://github.com/aws/aws-sdk-java-v2/commit/83a79b50974bac514bf06827a9e1b7999efaf27b", "message": "Fixed a race condition in netty-reactive-streams test: BatchedProducer would sometimes miss that it should stop producing data.", "committedDate": "2020-02-11T01:42:02Z", "type": "forcePushed"}, {"oid": "4ce338eb1b4b12b9472ad5d6c3190c2c2396629f", "url": "https://github.com/aws/aws-sdk-java-v2/commit/4ce338eb1b4b12b9472ad5d6c3190c2c2396629f", "message": "Revert \"Revert changes in PR#728\"\n\nThis reverts commit 4ac0ba8f5fb8c89ba9526f3629bf4a0b5e2b784b.", "committedDate": "2020-02-11T20:18:45Z", "type": "commit"}, {"oid": "79fd29864e5e0e2a4944151077d5beb7507bbf57", "url": "https://github.com/aws/aws-sdk-java-v2/commit/79fd29864e5e0e2a4944151077d5beb7507bbf57", "message": "Fixed a race condition in netty-reactive-streams test: BatchedProducer would sometimes miss that it should stop producing data.", "committedDate": "2020-02-11T20:18:45Z", "type": "forcePushed"}, {"oid": "2d055f942db1278353d75d4e2c6f530357366e1e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/2d055f942db1278353d75d4e2c6f530357366e1e", "message": "Fixed a race condition in netty-reactive-streams test: BatchedProducer would sometimes miss that it should stop producing data.", "committedDate": "2020-02-11T20:38:59Z", "type": "commit"}, {"oid": "2d055f942db1278353d75d4e2c6f530357366e1e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/2d055f942db1278353d75d4e2c6f530357366e1e", "message": "Fixed a race condition in netty-reactive-streams test: BatchedProducer would sometimes miss that it should stop producing data.", "committedDate": "2020-02-11T20:38:59Z", "type": "forcePushed"}]}