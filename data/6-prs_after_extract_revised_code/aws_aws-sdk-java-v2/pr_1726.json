{"pr_number": 1726, "pr_title": "DynamoDb Enhanced perf testing", "pr_createdAt": "2020-03-19T16:38:11Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1726", "timeline": [{"oid": "f02489a0cd04b4454f0f3ba4c8bfb07c510d4ee2", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f02489a0cd04b4454f0f3ba4c8bfb07c510d4ee2", "message": "WIP DynamoDb Enhanced perf testing", "committedDate": "2020-03-19T16:41:36Z", "type": "forcePushed"}, {"oid": "32fb1425eab19e753c0e22de14697359241cb1ce", "url": "https://github.com/aws/aws-sdk-java-v2/commit/32fb1425eab19e753c0e22de14697359241cb1ce", "message": "WIP DynamoDb Enhanced perf testing", "committedDate": "2020-03-19T20:14:30Z", "type": "forcePushed"}, {"oid": "868da82be3defe551fbe5804641dfe251c8b535a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/868da82be3defe551fbe5804641dfe251c8b535a", "message": "WIP DynamoDb Enhanced perf testing", "committedDate": "2020-03-20T23:36:03Z", "type": "forcePushed"}, {"oid": "c801b531c7472fdcfc648a6b6120cfccd51fb62e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c801b531c7472fdcfc648a6b6120cfccd51fb62e", "message": "DynamoDb Enhanced perf testing\n\nTests overhead of GET and PUT item over the low level client, as well as\nperformance of those operations compared to the V1 mapper.", "committedDate": "2020-03-24T17:23:26Z", "type": "forcePushed"}, {"oid": "47860647754358f5846b8eb80a03d7d147cb3459", "url": "https://github.com/aws/aws-sdk-java-v2/commit/47860647754358f5846b8eb80a03d7d147cb3459", "message": "DynamoDb Enhanced perf testing\n\nTests overhead of GET and PUT item over the low level client, as well as\nperformance of those operations compared to the V1 mapper.", "committedDate": "2020-03-24T20:43:45Z", "type": "forcePushed"}, {"oid": "77948bb38208600fdd9219677caf9e93a64e6a0c", "url": "https://github.com/aws/aws-sdk-java-v2/commit/77948bb38208600fdd9219677caf9e93a64e6a0c", "message": "DynamoDb Enhanced perf testing\n\nTests overhead of GET and PUT item over the low level client, as well as\nperformance of those operations compared to the V1 mapper.", "committedDate": "2020-03-24T20:49:26Z", "type": "forcePushed"}, {"oid": "667b130940a7924064893ca5301e8e10ed3d8d61", "url": "https://github.com/aws/aws-sdk-java-v2/commit/667b130940a7924064893ca5301e8e10ed3d8d61", "message": "DynamoDb Enhanced perf testing\n\nTests overhead of GET and PUT item over the low level client, as well as\nperformance of those operations compared to the V1 mapper.", "committedDate": "2020-03-24T22:05:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzA4OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397493088", "bodyText": "What's this endpoint?", "author": "spfink", "createdAt": "2020-03-24T22:12:11Z", "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.benchmark.enhanced.dynamodb;\n+\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.ENDPOINT;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import java.util.Map;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.benchmark.utils.MockHttpClient;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\n+import software.amazon.awssdk.enhanced.dynamodb.Key;\n+import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocol;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocolFactory;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\n+import software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\n+import software.amazon.awssdk.services.dynamodb.model.PutItemRequest;\n+import software.amazon.awssdk.services.dynamodb.transform.PutItemRequestMarshaller;\n+import software.amazon.awssdk.utils.IoUtils;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@Fork(2)\n+@State(Scope.Benchmark)\n+public class EnhancedClientGetOverheadBenchmark {\n+    private static final AwsJsonProtocolFactory JSON_PROTOCOL_FACTORY = AwsJsonProtocolFactory\n+            .builder()\n+            .clientConfiguration(SdkClientConfiguration.builder()\n+                    .option(ENDPOINT, URI.create(\"https://dynamodb.amazonaws.com\"))", "originalCommit": "667b130940a7924064893ca5301e8e10ed3d8d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNDM2Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397504366", "bodyText": "This was to stop the numerous profile loader related log messages", "author": "dagnir", "createdAt": "2020-03-24T22:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "967340f4b966311db97b18a6eebdbaa8f9da1c66", "chunk": "diff --git a/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java b/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java\nindex c62d1c8cbd..ce2fdf3878 100644\n--- a/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java\n+++ b/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java\n\n@@ -78,12 +78,12 @@ public class EnhancedClientGetOverheadBenchmark {\n \n \n     @Benchmark\n-    public Object llGet(TestState s) {\n+    public Object lowLevelGet(TestState s) {\n         return s.dynamoDb.getItem(GetItemRequest.builder().build());\n     }\n \n     @Benchmark\n-    public Object enhGet(TestState s) {\n+    public Object enhanceGet(TestState s) {\n         return s.table.getItem(testKey);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzMwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397493306", "bodyText": "I think we can write out better method names here", "author": "spfink", "createdAt": "2020-03-24T22:12:42Z", "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.benchmark.enhanced.dynamodb;\n+\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.ENDPOINT;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import java.util.Map;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.benchmark.utils.MockHttpClient;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\n+import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\n+import software.amazon.awssdk.enhanced.dynamodb.Key;\n+import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocol;\n+import software.amazon.awssdk.protocols.json.AwsJsonProtocolFactory;\n+import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\n+import software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\n+import software.amazon.awssdk.services.dynamodb.model.PutItemRequest;\n+import software.amazon.awssdk.services.dynamodb.transform.PutItemRequestMarshaller;\n+import software.amazon.awssdk.utils.IoUtils;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@Fork(2)\n+@State(Scope.Benchmark)\n+public class EnhancedClientGetOverheadBenchmark {\n+    private static final AwsJsonProtocolFactory JSON_PROTOCOL_FACTORY = AwsJsonProtocolFactory\n+            .builder()\n+            .clientConfiguration(SdkClientConfiguration.builder()\n+                    .option(ENDPOINT, URI.create(\"https://dynamodb.amazonaws.com\"))\n+                    .build())\n+            .defaultServiceExceptionSupplier(DynamoDbException::builder)\n+            .protocol(AwsJsonProtocol.AWS_JSON)\n+            .protocolVersion(\"1.0\")\n+            .build();\n+\n+    private static final PutItemRequestMarshaller PUT_ITEM_REQUEST_MARSHALLER =\n+            new PutItemRequestMarshaller(JSON_PROTOCOL_FACTORY);\n+\n+    private static final V2ItemFactory ITEM_FACTORY = new V2ItemFactory();\n+\n+    private final Key testKey = Key.builder().partitionValue(\"key\").build();\n+\n+\n+    @Benchmark\n+    public Object llGet(TestState s) {", "originalCommit": "667b130940a7924064893ca5301e8e10ed3d8d61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "967340f4b966311db97b18a6eebdbaa8f9da1c66", "chunk": "diff --git a/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java b/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java\nindex c62d1c8cbd..ce2fdf3878 100644\n--- a/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java\n+++ b/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/EnhancedClientGetOverheadBenchmark.java\n\n@@ -78,12 +78,12 @@ public class EnhancedClientGetOverheadBenchmark {\n \n \n     @Benchmark\n-    public Object llGet(TestState s) {\n+    public Object lowLevelGet(TestState s) {\n         return s.dynamoDb.getItem(GetItemRequest.builder().build());\n     }\n \n     @Benchmark\n-    public Object enhGet(TestState s) {\n+    public Object enhanceGet(TestState s) {\n         return s.table.getItem(testKey);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzU2MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397493561", "bodyText": "Why the seemingly random new lines? Also can we just for loop something here?", "author": "spfink", "createdAt": "2020-03-24T22:13:15Z", "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/ItemFactory.java", "diffHunk": "@@ -0,0 +1,922 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.benchmark.enhanced.dynamodb;\n+\n+import com.amazonaws.util.ImmutableMapParameter;\n+import java.lang.reflect.Method;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import software.amazon.awssdk.core.SdkBytes;\n+\n+abstract class ItemFactory<T> {\n+    private static final String ALPHA = \"abcdefghijklmnopqrstuvwxyz\";\n+\n+    private static final Random RNG = new Random();\n+\n+    public final Map<String, T> tiny() {\n+        return asItem(tinyBean());\n+    }\n+\n+    public final Map<String, T> small() {\n+        return asItem(smallBean());\n+    }\n+\n+    public final Map<String, T> huge() {\n+        return asItem(hugeBean());\n+    }\n+\n+    public final Map<String, T> hugeFlat() {\n+        return asItem(hugeBeanFlat());\n+    }\n+\n+    public final TinyBean tinyBean() {\n+        TinyBean b = new TinyBean();\n+        b.setStringAttr(randomS());\n+        return b;\n+    }\n+\n+    public final SmallBean smallBean() {\n+        SmallBean b = new SmallBean();\n+        b.setStringAttr(randomS());\n+        b.setBinaryAttr(randomBytes());\n+        b.setListAttr(Arrays.asList(randomS(), randomS(), randomS()));\n+        return b;\n+    }\n+\n+    public final HugeBean hugeBean() {\n+        HugeBean b = new HugeBean();\n+        b.setHashKey(randomS());\n+        b.setStringAttr(randomS());\n+        b.setBinaryAttr(randomBytes());\n+        b.setListAttr(Arrays.asList(randomS(),\n+                randomS(),\n+                randomS(),\n+", "originalCommit": "667b130940a7924064893ca5301e8e10ed3d8d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNDEyMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397504122", "bodyText": "The lines break them up in to powers of 2. I can change to using a loop", "author": "dagnir", "createdAt": "2020-03-24T22:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "967340f4b966311db97b18a6eebdbaa8f9da1c66", "chunk": "diff --git a/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/ItemFactory.java b/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/ItemFactory.java\nindex 95b771d8eb..4ac7ecc8d6 100755\n--- a/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/ItemFactory.java\n+++ b/test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/enhanced/dynamodb/ItemFactory.java\n\n@@ -23,6 +23,8 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n import software.amazon.awssdk.core.SdkBytes;\n \n abstract class ItemFactory<T> {\n"}}, {"oid": "edd33dc12b5fbe05705ec57edc859681753df5f4", "url": "https://github.com/aws/aws-sdk-java-v2/commit/edd33dc12b5fbe05705ec57edc859681753df5f4", "message": "DynamoDb Enhanced perf testing\n\nTests overhead of GET and PUT item over the low level client, as well as\nperformance of those operations compared to the V1 mapper.", "committedDate": "2020-03-24T22:18:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNTI2NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397505264", "bodyText": "Should we add ddb enhanced client data to baseline.json for regression detection?", "author": "zoewangg", "createdAt": "2020-03-24T22:41:39Z", "path": "test/sdk-benchmarks/src/main/java/software/amazon/awssdk/benchmark/BenchmarkRunner.java", "diffHunk": "@@ -74,6 +83,7 @@ public static void main(String... args) throws RunnerException, JsonProcessingEx\n         benchmarksToRun.addAll(ASYNC_BENCHMARKS);\n         benchmarksToRun.addAll(PROTOCOL_BENCHMARKS);\n         benchmarksToRun.addAll(COLD_START_BENCHMARKS);\n+        benchmarksToRun.addAll(MAPPER_BENCHMARKS);", "originalCommit": "edd33dc12b5fbe05705ec57edc859681753df5f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwODc1MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1726#discussion_r397508751", "bodyText": "See previous comment for getting baseline", "author": "dagnir", "createdAt": "2020-03-24T22:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNTI2NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "8113a103579cd7ae0537e388314eefa32a6d2550", "url": "https://github.com/aws/aws-sdk-java-v2/commit/8113a103579cd7ae0537e388314eefa32a6d2550", "message": "DynamoDb Enhanced perf testing\n\nTests overhead of GET and PUT item over the low level client, as well as\nperformance of those operations compared to the V1 mapper.", "committedDate": "2020-03-24T22:47:46Z", "type": "commit"}, {"oid": "967340f4b966311db97b18a6eebdbaa8f9da1c66", "url": "https://github.com/aws/aws-sdk-java-v2/commit/967340f4b966311db97b18a6eebdbaa8f9da1c66", "message": "Review comments", "committedDate": "2020-03-24T22:47:46Z", "type": "commit"}, {"oid": "967340f4b966311db97b18a6eebdbaa8f9da1c66", "url": "https://github.com/aws/aws-sdk-java-v2/commit/967340f4b966311db97b18a6eebdbaa8f9da1c66", "message": "Review comments", "committedDate": "2020-03-24T22:47:46Z", "type": "forcePushed"}, {"oid": "f2f9c587d3e3fb3c5a13fab84d2a06fc1254f099", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f2f9c587d3e3fb3c5a13fab84d2a06fc1254f099", "message": "Update baseline", "committedDate": "2020-03-26T22:33:51Z", "type": "commit"}, {"oid": "f2f9c587d3e3fb3c5a13fab84d2a06fc1254f099", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f2f9c587d3e3fb3c5a13fab84d2a06fc1254f099", "message": "Update baseline", "committedDate": "2020-03-26T22:33:51Z", "type": "forcePushed"}, {"oid": "f362ac52117cb4a331a3304e03cd3fc20b65f8eb", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f362ac52117cb4a331a3304e03cd3fc20b65f8eb", "message": "Merge branch 'master' into ddb-enh-perf-testing", "committedDate": "2020-03-26T22:35:08Z", "type": "commit"}]}