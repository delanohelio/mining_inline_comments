{"pr_number": 2134, "pr_title": "ZK-4546: Caching of EL method invocations", "pr_createdAt": "2020-08-26T07:59:38Z", "pr_url": "https://github.com/zkoss/zk/pull/2134", "timeline": [{"oid": "6b97c52477d9512c4ba19c25eb4479b3486d95b6", "url": "https://github.com/zkoss/zk/commit/6b97c52477d9512c4ba19c25eb4479b3486d95b6", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-08-26T09:11:10Z", "type": "forcePushed"}, {"oid": "f9f65df4df1000ab8fe28fb3456c49f8adf85234", "url": "https://github.com/zkoss/zk/commit/f9f65df4df1000ab8fe28fb3456c49f8adf85234", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-08-26T10:04:42Z", "type": "forcePushed"}, {"oid": "f0590cc95e301ebbfc31b4e19d321100c7ab4100", "url": "https://github.com/zkoss/zk/commit/f0590cc95e301ebbfc31b4e19d321100c7ab4100", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-08-27T09:36:25Z", "type": "forcePushed"}, {"oid": "21ccda9319c94283da9b47a195c1e31b121b4f4f", "url": "https://github.com/zkoss/zk/commit/21ccda9319c94283da9b47a195c1e31b121b4f4f", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-08-27T09:37:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5OTUxMw==", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r478799513", "bodyText": "move into constructor", "author": "plijyfes", "createdAt": "2020-08-28T02:42:43Z", "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "diffHunk": "@@ -583,4 +532,132 @@ public void put(K key, V value) {\n         }\r\n \r\n     }\r\n+\r\n+\t// ZK-4546\r\n+\tprivate static final class CachedMethodInfo {\r\n+\t\tprivate final String _methodName;\r\n+\r\n+\t\tprivate final Class<?>[] _paramTypes;\r\n+\r\n+\t\tprivate int _hashCode;\r", "originalCommit": "21ccda9319c94283da9b47a195c1e31b121b4f4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea34c9ee89a05926b53ae5d0868071af1c97524", "chunk": "diff --git a/zel/src/org/zkoss/zel/BeanELResolver.java b/zel/src/org/zkoss/zel/BeanELResolver.java\nindex 7734ad534b..3d4eb666b1 100644\n--- a/zel/src/org/zkoss/zel/BeanELResolver.java\n+++ b/zel/src/org/zkoss/zel/BeanELResolver.java\n\n@@ -651,11 +651,7 @@ public class BeanELResolver extends ELResolver {\n \t\t\t}\n \t\t}\n \t\tif (matchingMethod != null) {\n-\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\n-\t\t\tif (clzMap == null) {\n-\t\t\t\tclzMap = new ConcurrentHashMap<>();\n-\t\t\t\tMETHODS_CACHE.put(clazz, clzMap);\n-\t\t\t}\n+\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.computeIfAbsent(clazz, k -> new ConcurrentHashMap());\n \t\t\tclzMap.put(new CachedMethodInfo(methodName, paramTypes), matchingMethod);\n \t\t}\n \t\treturn matchingMethod;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMDQxNA==", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r478800414", "bodyText": "refactor", "author": "plijyfes", "createdAt": "2020-08-28T02:46:33Z", "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "diffHunk": "@@ -583,4 +532,132 @@ public void put(K key, V value) {\n         }\r\n \r\n     }\r\n+\r\n+\t// ZK-4546\r\n+\tprivate static final class CachedMethodInfo {\r\n+\t\tprivate final String _methodName;\r\n+\r\n+\t\tprivate final Class<?>[] _paramTypes;\r\n+\r\n+\t\tprivate int _hashCode;\r\n+\r\n+\t\tpublic CachedMethodInfo(String methodName, Class<?>[] paramTypes) {\r\n+\t\t\tthis._methodName = methodName;\r\n+\t\t\tthis._paramTypes = paramTypes;\r\n+\t\t}\r\n+\r\n+\t\tpublic String getMethodName() {\r\n+\t\t\treturn _methodName;\r\n+\t\t}\r\n+\r\n+\t\tpublic Class<?>[] getParamTypes() {\r\n+\t\t\treturn _paramTypes;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic int hashCode() {\r\n+\t\t\tint result = _hashCode;\r\n+\t\t\tif (result == 0) {\r\n+\t\t\t\tresult = this._methodName.hashCode();\r\n+\t\t\t\tif (_paramTypes != null)\r\n+\t\t\t\t\tresult += _paramTypes.length;\r\n+\t\t\t\t_hashCode = result;\r\n+\t\t\t}\r\n+\t\t\treturn result;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic boolean equals(Object obj) {\r\n+\t\t\tif (obj instanceof CachedMethodInfo) {\r", "originalCommit": "21ccda9319c94283da9b47a195c1e31b121b4f4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea34c9ee89a05926b53ae5d0868071af1c97524", "chunk": "diff --git a/zel/src/org/zkoss/zel/BeanELResolver.java b/zel/src/org/zkoss/zel/BeanELResolver.java\nindex 7734ad534b..3d4eb666b1 100644\n--- a/zel/src/org/zkoss/zel/BeanELResolver.java\n+++ b/zel/src/org/zkoss/zel/BeanELResolver.java\n\n@@ -651,11 +651,7 @@ public class BeanELResolver extends ELResolver {\n \t\t\t}\n \t\t}\n \t\tif (matchingMethod != null) {\n-\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\n-\t\t\tif (clzMap == null) {\n-\t\t\t\tclzMap = new ConcurrentHashMap<>();\n-\t\t\t\tMETHODS_CACHE.put(clazz, clzMap);\n-\t\t\t}\n+\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.computeIfAbsent(clazz, k -> new ConcurrentHashMap());\n \t\t\tclzMap.put(new CachedMethodInfo(methodName, paramTypes), matchingMethod);\n \t\t}\n \t\treturn matchingMethod;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMTQ2MQ==", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r478801461", "bodyText": "check concurrent", "author": "plijyfes", "createdAt": "2020-08-28T02:50:55Z", "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "diffHunk": "@@ -583,4 +532,132 @@ public void put(K key, V value) {\n         }\r\n \r\n     }\r\n+\r\n+\t// ZK-4546\r\n+\tprivate static final class CachedMethodInfo {\r\n+\t\tprivate final String _methodName;\r\n+\r\n+\t\tprivate final Class<?>[] _paramTypes;\r\n+\r\n+\t\tprivate int _hashCode;\r\n+\r\n+\t\tpublic CachedMethodInfo(String methodName, Class<?>[] paramTypes) {\r\n+\t\t\tthis._methodName = methodName;\r\n+\t\t\tthis._paramTypes = paramTypes;\r\n+\t\t}\r\n+\r\n+\t\tpublic String getMethodName() {\r\n+\t\t\treturn _methodName;\r\n+\t\t}\r\n+\r\n+\t\tpublic Class<?>[] getParamTypes() {\r\n+\t\t\treturn _paramTypes;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic int hashCode() {\r\n+\t\t\tint result = _hashCode;\r\n+\t\t\tif (result == 0) {\r\n+\t\t\t\tresult = this._methodName.hashCode();\r\n+\t\t\t\tif (_paramTypes != null)\r\n+\t\t\t\t\tresult += _paramTypes.length;\r\n+\t\t\t\t_hashCode = result;\r\n+\t\t\t}\r\n+\t\t\treturn result;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic boolean equals(Object obj) {\r\n+\t\t\tif (obj instanceof CachedMethodInfo) {\r\n+\t\t\t\tif (!((CachedMethodInfo) obj).getMethodName().equals(this._methodName))\r\n+\t\t\t\t\treturn false;\r\n+\t\t\t\tClass<?>[] targetParamTypes = ((CachedMethodInfo) obj).getParamTypes();\r\n+\t\t\t\tint len =  _paramTypes != null ? _paramTypes.length : 0;\r\n+\t\t\t\tint len2 = targetParamTypes != null ? targetParamTypes.length : 0;\r\n+\t\t\t\tif (len != len2)\r\n+\t\t\t\t\treturn false;\r\n+\t\t\t\tfor (int j = 0; j < len; ++j) {\r\n+\t\t\t\t\tif (!Objects.equals(_paramTypes[j], targetParamTypes[j]))\r\n+\t\t\t\t\t\treturn false;\r\n+\t\t\t\t}\r\n+\t\t\t\treturn true;\r\n+\t\t\t}\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tprivate static Method getMethod(Class<?> clazz, String methodName, Class<?>[] paramTypes, Object[] params) {\r\n+\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\r\n+\t\tif (clzMap != null) {\r\n+\t\t\tMethod method = clzMap.get(new CachedMethodInfo(methodName, paramTypes));\r\n+\t\t\tif (method != null)\r\n+\t\t\t\treturn method;\r\n+\t\t}\r\n+\t\treturn getMethod0(clazz, methodName, paramTypes, params);\r\n+\t}\r\n+\r\n+\tprivate static Method getMethod0(Class<?> clazz, String methodName, Class<?>[] paramTypes, Object[] params) {\r\n+\t\tMethod matchingMethod = null;\r\n+\t\tif (paramTypes != null) {\r\n+\t\t\ttry {\r\n+\t\t\t\tmatchingMethod = Util.getMethod(clazz, clazz.getMethod(methodName, paramTypes));\r\n+\t\t\t} catch (NoSuchMethodException e) {\r\n+\t\t\t\t//throw new MethodNotFoundException(e);\r\n+\t\t\t\tint paramCount = 0;\r\n+\t\t\t\tif (params != null) {\r\n+\t\t\t\t\tparamCount = params.length;\r\n+\t\t\t\t}\r\n+\t\t\t\tMethod[] methods = clazz.getMethods();\r\n+\t\t\t\tfor (Method m : methods) {\r\n+\t\t\t\t\tif (methodName.equals(m.getName())) {\r\n+\t\t\t\t\t\tif (m.getParameterTypes().length == paramCount) {\r\n+\t\t\t\t\t\t\t// Same number of parameters - use the first match\r\n+\t\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tif (m.isVarArgs()\r\n+\t\t\t\t\t\t\t\t&& paramCount > m.getParameterTypes().length - 2) {\r\n+\t\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t\tif (matchingMethod == null) {\r\n+\t\t\t\t\tthrow new MethodNotFoundException(\"Unable to find method [\"\r\n+\t\t\t\t\t\t\t+ methodName + \"] with [\" + paramCount + \"] parameters\");\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t} else {\r\n+\t\t\tint paramCount = 0;\r\n+\t\t\tif (params != null) {\r\n+\t\t\t\tparamCount = params.length;\r\n+\t\t\t}\r\n+\t\t\tMethod[] methods = clazz.getMethods();\r\n+\t\t\tfor (Method m : methods) {\r\n+\t\t\t\tif (methodName.equals(m.getName())) {\r\n+\t\t\t\t\tif (m.getParameterTypes().length == paramCount) {\r\n+\t\t\t\t\t\t// Same number of parameters - use the first match\r\n+\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tif (m.isVarArgs()\r\n+\t\t\t\t\t\t\t&& paramCount > m.getParameterTypes().length - 2) {\r\n+\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif (matchingMethod == null) {\r\n+\t\t\t\tthrow new MethodNotFoundException(\"Unable to find method [\"\r\n+\t\t\t\t\t\t+ methodName + \"] with [\" + paramCount + \"] parameters\");\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif (matchingMethod != null) {\r\n+\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\r\n+\t\t\tif (clzMap == null) {\r\n+\t\t\t\tclzMap = new ConcurrentHashMap<>();\r", "originalCommit": "21ccda9319c94283da9b47a195c1e31b121b4f4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea34c9ee89a05926b53ae5d0868071af1c97524", "chunk": "diff --git a/zel/src/org/zkoss/zel/BeanELResolver.java b/zel/src/org/zkoss/zel/BeanELResolver.java\nindex 7734ad534b..3d4eb666b1 100644\n--- a/zel/src/org/zkoss/zel/BeanELResolver.java\n+++ b/zel/src/org/zkoss/zel/BeanELResolver.java\n\n@@ -651,11 +651,7 @@ public class BeanELResolver extends ELResolver {\n \t\t\t}\n \t\t}\n \t\tif (matchingMethod != null) {\n-\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\n-\t\t\tif (clzMap == null) {\n-\t\t\t\tclzMap = new ConcurrentHashMap<>();\n-\t\t\t\tMETHODS_CACHE.put(clazz, clzMap);\n-\t\t\t}\n+\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.computeIfAbsent(clazz, k -> new ConcurrentHashMap());\n \t\t\tclzMap.put(new CachedMethodInfo(methodName, paramTypes), matchingMethod);\n \t\t}\n \t\treturn matchingMethod;\n"}}, {"oid": "2ea34c9ee89a05926b53ae5d0868071af1c97524", "url": "https://github.com/zkoss/zk/commit/2ea34c9ee89a05926b53ae5d0868071af1c97524", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-08-28T04:08:48Z", "type": "forcePushed"}, {"oid": "392d64905232ed5c3abcf774e32ac03163a6db41", "url": "https://github.com/zkoss/zk/commit/392d64905232ed5c3abcf774e32ac03163a6db41", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-08-28T04:10:04Z", "type": "forcePushed"}, {"oid": "87e54b722150e388acc60a3a07e2bf31af7bf90a", "url": "https://github.com/zkoss/zk/commit/87e54b722150e388acc60a3a07e2bf31af7bf90a", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-08-28T04:31:04Z", "type": "forcePushed"}, {"oid": "00048a5c3e5089d28bd1432fe854ecb1015c9a21", "url": "https://github.com/zkoss/zk/commit/00048a5c3e5089d28bd1432fe854ecb1015c9a21", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-08-28T08:40:32Z", "type": "forcePushed"}, {"oid": "94bd8e2468eb9e353908ad9c5a1d4c012d2dfd93", "url": "https://github.com/zkoss/zk/commit/94bd8e2468eb9e353908ad9c5a1d4c012d2dfd93", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-08-28T10:02:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxMTA0Ng==", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r480011046", "bodyText": "Use other Lock other than synchorized", "author": "scribetw", "createdAt": "2020-08-31T09:35:30Z", "path": "zel/src/org/zkoss/zel/BeanELResolver.java", "diffHunk": "@@ -583,4 +532,124 @@ public void put(K key, V value) {\n         }\r\n \r\n     }\r\n+\r\n+\t// ZK-4546\r\n+\tprivate static final class CachedMethodInfo {\r\n+\t\tprivate final String _methodName;\r\n+\t\tprivate final Class<?>[] _paramTypes;\r\n+\r\n+\t\tpublic CachedMethodInfo(String methodName, Class<?>[] paramTypes) {\r\n+\t\t\tthis._methodName = methodName;\r\n+\t\t\tthis._paramTypes = paramTypes;\r\n+\t\t}\r\n+\r\n+\t\tpublic String getMethodName() {\r\n+\t\t\treturn _methodName;\r\n+\t\t}\r\n+\r\n+\t\tpublic Class<?>[] getParamTypes() {\r\n+\t\t\treturn _paramTypes;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic int hashCode() {\r\n+\t\t\tint result = 17;\r\n+\t\t\tresult = 31 * result + this._methodName.hashCode();\r\n+\t\t\tresult = 31 * result + (_paramTypes != null ? _paramTypes.length : 0);\r\n+\t\t\treturn result;\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic boolean equals(Object obj) {\r\n+\t\t\tif (!(obj instanceof CachedMethodInfo))\r\n+\t\t\t\treturn false;\r\n+\t\t\tif (!((CachedMethodInfo) obj).getMethodName().equals(this._methodName))\r\n+\t\t\t\treturn false;\r\n+\t\t\tClass<?>[] targetParamTypes = ((CachedMethodInfo) obj).getParamTypes();\r\n+\t\t\tint len =  _paramTypes != null ? _paramTypes.length : 0;\r\n+\t\t\tint len2 = targetParamTypes != null ? targetParamTypes.length : 0;\r\n+\t\t\tif (len != len2)\r\n+\t\t\t\treturn false;\r\n+\t\t\tfor (int j = 0; j < len; ++j) {\r\n+\t\t\t\tif (!Objects.equals(_paramTypes[j], targetParamTypes[j]))\r\n+\t\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tprivate static Method getMethod(Class<?> clazz, String methodName, Class<?>[] paramTypes, Object[] params) {\r\n+\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\r\n+\t\tif (clzMap != null) {\r\n+\t\t\tMethod method = clzMap.get(new CachedMethodInfo(methodName, paramTypes));\r\n+\t\t\tif (method != null)\r\n+\t\t\t\treturn method;\r\n+\t\t}\r\n+\t\treturn getMethod0(clazz, methodName, paramTypes, params);\r\n+\t}\r\n+\r\n+\tprivate static Method getMethod0(Class<?> clazz, String methodName, Class<?>[] paramTypes, Object[] params) {\r\n+\t\tMethod matchingMethod = null;\r\n+\t\tif (paramTypes != null) {\r\n+\t\t\ttry {\r\n+\t\t\t\tmatchingMethod = Util.getMethod(clazz, clazz.getMethod(methodName, paramTypes));\r\n+\t\t\t} catch (NoSuchMethodException e) {\r\n+\t\t\t\t//throw new MethodNotFoundException(e);\r\n+\t\t\t\tint paramCount = 0;\r\n+\t\t\t\tif (params != null) {\r\n+\t\t\t\t\tparamCount = params.length;\r\n+\t\t\t\t}\r\n+\t\t\t\tMethod[] methods = clazz.getMethods();\r\n+\t\t\t\tfor (Method m : methods) {\r\n+\t\t\t\t\tif (methodName.equals(m.getName())) {\r\n+\t\t\t\t\t\tif (m.getParameterTypes().length == paramCount) {\r\n+\t\t\t\t\t\t\t// Same number of parameters - use the first match\r\n+\t\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tif (m.isVarArgs()\r\n+\t\t\t\t\t\t\t\t&& paramCount > m.getParameterTypes().length - 2) {\r\n+\t\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t\tif (matchingMethod == null) {\r\n+\t\t\t\t\tthrow new MethodNotFoundException(\"Unable to find method [\"\r\n+\t\t\t\t\t\t\t+ methodName + \"] with [\" + paramCount + \"] parameters\");\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t} else {\r\n+\t\t\tint paramCount = 0;\r\n+\t\t\tif (params != null) {\r\n+\t\t\t\tparamCount = params.length;\r\n+\t\t\t}\r\n+\t\t\tMethod[] methods = clazz.getMethods();\r\n+\t\t\tfor (Method m : methods) {\r\n+\t\t\t\tif (methodName.equals(m.getName())) {\r\n+\t\t\t\t\tif (m.getParameterTypes().length == paramCount) {\r\n+\t\t\t\t\t\t// Same number of parameters - use the first match\r\n+\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tif (m.isVarArgs()\r\n+\t\t\t\t\t\t\t&& paramCount > m.getParameterTypes().length - 2) {\r\n+\t\t\t\t\t\tmatchingMethod = Util.getMethod(clazz, m);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif (matchingMethod == null) {\r\n+\t\t\t\tthrow new MethodNotFoundException(\"Unable to find method [\"\r\n+\t\t\t\t\t\t+ methodName + \"] with [\" + paramCount + \"] parameters\");\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif (matchingMethod != null) {\r\n+\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\r", "originalCommit": "94bd8e2468eb9e353908ad9c5a1d4c012d2dfd93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "260b94f1597cd20f4ef50f2908fc842432387696", "chunk": "diff --git a/zel/src/org/zkoss/zel/BeanELResolver.java b/zel/src/org/zkoss/zel/BeanELResolver.java\nindex 02203ed7b6..3a19693c2a 100644\n--- a/zel/src/org/zkoss/zel/BeanELResolver.java\n+++ b/zel/src/org/zkoss/zel/BeanELResolver.java\n\n@@ -643,12 +646,18 @@ public class BeanELResolver extends ELResolver {\n \t\t\t}\n \t\t}\n \t\tif (matchingMethod != null) {\n-\t\t\tMap<CachedMethodInfo, Method> clzMap = METHODS_CACHE.get(clazz);\n-\t\t\tif (clzMap == null) {\n-\t\t\t\tclzMap = new ConcurrentHashMap<>();\n-\t\t\t\tMETHODS_CACHE.put(clazz, clzMap);\n+\t\t\tMap<CachedMethodInfo, Method> clzMap = null;\n+\t\t\tMETHODS_CACHE_LOCK.lock();\n+\t\t\ttry {\n+\t\t\t\tclzMap = METHODS_CACHE.get(clazz);\n+\t\t\t\tif (clzMap == null) {\n+\t\t\t\t\tclzMap = new ConcurrentHashMap<>();\n+\t\t\t\t\tMETHODS_CACHE.put(clazz, clzMap);\n+\t\t\t\t}\n+\t\t\t\tclzMap.put(new CachedMethodInfo(methodName, paramTypes), matchingMethod);\n+\t\t\t} finally {\n+\t\t\t\tMETHODS_CACHE_LOCK.unlock();\n \t\t\t}\n-\t\t\tclzMap.put(new CachedMethodInfo(methodName, paramTypes), matchingMethod);\n \t\t}\n \t\treturn matchingMethod;\n \t}\n"}}, {"oid": "260b94f1597cd20f4ef50f2908fc842432387696", "url": "https://github.com/zkoss/zk/commit/260b94f1597cd20f4ef50f2908fc842432387696", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-01T02:56:23Z", "type": "forcePushed"}, {"oid": "bbc0f09cd652be192ae3f0c8e6452067e5f5672a", "url": "https://github.com/zkoss/zk/commit/bbc0f09cd652be192ae3f0c8e6452067e5f5672a", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-01T02:57:07Z", "type": "forcePushed"}, {"oid": "cacd8d78350a2127301e1ef127e5aa6dd0a2b093", "url": "https://github.com/zkoss/zk/commit/cacd8d78350a2127301e1ef127e5aa6dd0a2b093", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-01T10:26:47Z", "type": "forcePushed"}, {"oid": "bc345abbf100c1c1ded98df3412bb213616144a0", "url": "https://github.com/zkoss/zk/commit/bc345abbf100c1c1ded98df3412bb213616144a0", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-01T10:28:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNzgwMw==", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r481917803", "bodyText": "cacheSize getSystem", "author": "plijyfes", "createdAt": "2020-09-02T09:06:34Z", "path": "zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java", "diffHunk": "@@ -49,8 +49,9 @@\n             long.class, short.class, Void.TYPE };\r\n \r\n \t//for reflection cache\r\n+    private static final int DEFAULT_CAPACITY = 16;\r", "originalCommit": "bc345abbf100c1c1ded98df3412bb213616144a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38cc56279fdfc3ea02b37cf8bc3a3d82e6e39f57", "chunk": "diff --git a/zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java b/zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java\nindex 8fcd566a08..f505df669e 100644\n--- a/zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java\n+++ b/zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java\n\n@@ -49,9 +51,17 @@ public class ReflectionUtil {\n             long.class, short.class, Void.TYPE };\n \n \t//for reflection cache\n-    private static final int DEFAULT_CAPACITY = 16;\n+\tprivate static final int CACHE_SIZE;\n+\tprivate static final String CACHE_SIZE_PROP = \"org.zkoss.zel.impl.util.ReflectionUtil.CACHE_SIZE\";\n+\n+\tstatic {\n+\t\tif (System.getSecurityManager() == null)\n+\t\t\tCACHE_SIZE = Integer.parseInt(System.getProperty(CACHE_SIZE_PROP, \"1000\"));\n+\t\telse\n+\t\t\tCACHE_SIZE = AccessController.doPrivileged((PrivilegedAction<Integer>) () -> Integer.valueOf(System.getProperty(CACHE_SIZE_PROP, \"1000\"))).intValue();\n+\t}\n \tprivate static final Method[] EMPTY_METHOD_ARRAY = new Method[0];\n-\tprivate static final ConcurrentCache<Class<?>, Map<String, Method[]>> SETTERS_METHODS_CACHE = new ConcurrentCache<>(DEFAULT_CAPACITY);\n+\tprivate static final ConcurrentCache<Class<?>, Map<String, Method[]>> SETTERS_METHODS_CACHE = new ConcurrentCache<>(CACHE_SIZE);\n \n     private ReflectionUtil() {\n         super();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxODU5MA==", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r481918590", "bodyText": "one line", "author": "plijyfes", "createdAt": "2020-09-02T09:07:29Z", "path": "zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java", "diffHunk": "@@ -560,11 +561,7 @@ public int compareTo(MatchResult o) {\n \t\tif (resultList != null && !resultList.isEmpty())\r\n \t\t\tresult = resultList.toArray(new Method[resultList.size()]);\r\n \r\n-\t\tMap<String, Method[]> classMap = SETTERS_METHODS_CACHE.get(cls);\r\n-\t\tif (classMap == null) {\r\n-\t\t\tclassMap = new ConcurrentHashMap<String, Method[]>();\r\n-\t\t\tSETTERS_METHODS_CACHE.put(cls, classMap);\r\n-\t\t}\r\n+\t\tMap<String, Method[]> classMap = SETTERS_METHODS_CACHE.computeIfAbsent(cls, k -> new ConcurrentHashMap<>());\r\n \t\tclassMap.put(propertyName, result);\r", "originalCommit": "bc345abbf100c1c1ded98df3412bb213616144a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38cc56279fdfc3ea02b37cf8bc3a3d82e6e39f57", "chunk": "diff --git a/zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java b/zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java\nindex 8fcd566a08..f505df669e 100644\n--- a/zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java\n+++ b/zel/src/org/zkoss/zel/impl/util/ReflectionUtil.java\n\n@@ -561,8 +571,7 @@ public class ReflectionUtil {\n \t\tif (resultList != null && !resultList.isEmpty())\n \t\t\tresult = resultList.toArray(new Method[resultList.size()]);\n \n-\t\tMap<String, Method[]> classMap = SETTERS_METHODS_CACHE.computeIfAbsent(cls, k -> new ConcurrentHashMap<>());\n-\t\tclassMap.put(propertyName, result);\n+\t\tSETTERS_METHODS_CACHE.computeIfAbsent(cls, k -> new ConcurrentHashMap<>()).put(propertyName, result);\n \t\treturn result;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyMDY4OQ==", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r481920689", "bodyText": "null value is invalid", "author": "plijyfes", "createdAt": "2020-09-02T09:09:44Z", "path": "zk/src/org/zkoss/zk/ui/util/ConventionWire.java", "diffHunk": "@@ -290,14 +290,16 @@ private void injectFieldByName(Object arg, Class tgtcls, Class parmcls, String f\n \t\ttry {\n \t\t\t// ZK-4316: Improve component wiring performance (avoid NoSuchFieldException)\n \t\t\tPair<Class, String> cachedKey = new Pair<Class, String>(tgtcls, fdname);\n-\t\t\tField fd = _injectedFieldCache.get(cachedKey);\n-\t\t\tif (fd == null) {\n-\t\t\t\tfd = Classes.getAnyField(tgtcls, fdname);\n-\t\t\t\t_injectedFieldCache.put(cachedKey, fd);\n-\t\t\t}\n-\t\t\tinjectField(arg, parmcls, fd);\n-\t\t} catch (NoSuchFieldException e) {\n-\t\t\t//ignore\n+\t\t\tField fd = _injectedFieldCache.computeIfAbsent(cachedKey, k -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn Classes.getAnyField(tgtcls, fdname);\n+\t\t\t\t} catch (NoSuchFieldException e) {\n+\t\t\t\t\t//ignore\n+\t\t\t\t}\n+\t\t\t\treturn null;", "originalCommit": "bc345abbf100c1c1ded98df3412bb213616144a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7c3686139cdcda192d45e0e3db9385562f5593a", "chunk": "diff --git a/zk/src/org/zkoss/zk/ui/util/ConventionWire.java b/zk/src/org/zkoss/zk/ui/util/ConventionWire.java\nindex 3da21d5832..7984458ebf 100644\n--- a/zk/src/org/zkoss/zk/ui/util/ConventionWire.java\n+++ b/zk/src/org/zkoss/zk/ui/util/ConventionWire.java\n\n@@ -286,6 +292,14 @@ import org.zkoss.zk.ui.UiException;\n \t\t}\n \t}\n \n+\t/*\n+\t * Marker class used because null values are not permitted in a\n+\t * ConcurrentHashMap.\n+\t */\n+\tprivate static class NotFound {\n+\t\tpublic boolean empty;\n+\t}\n+\n \tprivate void injectFieldByName(Object arg, Class tgtcls, Class parmcls, String fdname) {\n \t\ttry {\n \t\t\t// ZK-4316: Improve component wiring performance (avoid NoSuchFieldException)\n"}}, {"oid": "38cc56279fdfc3ea02b37cf8bc3a3d82e6e39f57", "url": "https://github.com/zkoss/zk/commit/38cc56279fdfc3ea02b37cf8bc3a3d82e6e39f57", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-03T02:41:40Z", "type": "forcePushed"}, {"oid": "c7c3686139cdcda192d45e0e3db9385562f5593a", "url": "https://github.com/zkoss/zk/commit/c7c3686139cdcda192d45e0e3db9385562f5593a", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-03T09:59:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2ODEwMA==", "url": "https://github.com/zkoss/zk/pull/2134#discussion_r482868100", "bodyText": "private static final Field EMPTY = NotFound.class.getFields()[0];", "author": "scribetw", "createdAt": "2020-09-03T10:15:10Z", "path": "zk/src/org/zkoss/zk/ui/util/ConventionWire.java", "diffHunk": "@@ -286,18 +292,28 @@ private void injectByName(Object arg, String fdname, boolean fieldOnly) {\n \t\t}\n \t}\n \n+\t/*\n+\t * Marker class used because null values are not permitted in a\n+\t * ConcurrentHashMap.\n+\t */\n+\tprivate static class NotFound {\n+\t\tpublic boolean empty;\n+\t}\n+\n \tprivate void injectFieldByName(Object arg, Class tgtcls, Class parmcls, String fdname) {\n \t\ttry {\n \t\t\t// ZK-4316: Improve component wiring performance (avoid NoSuchFieldException)\n \t\t\tPair<Class, String> cachedKey = new Pair<Class, String>(tgtcls, fdname);\n-\t\t\tField fd = _injectedFieldCache.get(cachedKey);\n-\t\t\tif (fd == null) {\n-\t\t\t\tfd = Classes.getAnyField(tgtcls, fdname);\n-\t\t\t\t_injectedFieldCache.put(cachedKey, fd);\n-\t\t\t}\n-\t\t\tinjectField(arg, parmcls, fd);\n-\t\t} catch (NoSuchFieldException e) {\n-\t\t\t//ignore\n+\t\t\tField fd = _injectedFieldCache.computeIfAbsent(cachedKey, k -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn Classes.getAnyField(tgtcls, fdname);\n+\t\t\t\t} catch (NoSuchFieldException e) {\n+\t\t\t\t\t//ignore\n+\t\t\t\t}\n+\t\t\t\treturn NotFound.class.getFields()[0];", "originalCommit": "c7c3686139cdcda192d45e0e3db9385562f5593a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ff1544ea174c5f8eec67aced40c93ec6f7c6e04", "chunk": "diff --git a/zk/src/org/zkoss/zk/ui/util/ConventionWire.java b/zk/src/org/zkoss/zk/ui/util/ConventionWire.java\nindex 7984458ebf..1da7f6051f 100644\n--- a/zk/src/org/zkoss/zk/ui/util/ConventionWire.java\n+++ b/zk/src/org/zkoss/zk/ui/util/ConventionWire.java\n\n@@ -300,6 +300,8 @@ import org.zkoss.zk.ui.UiException;\n \t\tpublic boolean empty;\n \t}\n \n+\tprivate static final Field EMPTY_FIELD = NotFound.class.getFields()[0];\n+\n \tprivate void injectFieldByName(Object arg, Class tgtcls, Class parmcls, String fdname) {\n \t\ttry {\n \t\t\t// ZK-4316: Improve component wiring performance (avoid NoSuchFieldException)\n"}}, {"oid": "8ff1544ea174c5f8eec67aced40c93ec6f7c6e04", "url": "https://github.com/zkoss/zk/commit/8ff1544ea174c5f8eec67aced40c93ec6f7c6e04", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-03T10:23:39Z", "type": "forcePushed"}, {"oid": "088b112ee2494a02b05696171269a265d98d9168", "url": "https://github.com/zkoss/zk/commit/088b112ee2494a02b05696171269a265d98d9168", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-03T10:24:17Z", "type": "forcePushed"}, {"oid": "946f26078b8d28ea0aafa42530dc2213978a6239", "url": "https://github.com/zkoss/zk/commit/946f26078b8d28ea0aafa42530dc2213978a6239", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-03T10:33:40Z", "type": "forcePushed"}, {"oid": "05b7317e45eecaabcf07ddda21cac31763b96aca", "url": "https://github.com/zkoss/zk/commit/05b7317e45eecaabcf07ddda21cac31763b96aca", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-03T10:36:27Z", "type": "commit"}, {"oid": "05b7317e45eecaabcf07ddda21cac31763b96aca", "url": "https://github.com/zkoss/zk/commit/05b7317e45eecaabcf07ddda21cac31763b96aca", "message": "ZK-4546: Caching of EL method invocations", "committedDate": "2020-09-03T10:36:27Z", "type": "forcePushed"}]}