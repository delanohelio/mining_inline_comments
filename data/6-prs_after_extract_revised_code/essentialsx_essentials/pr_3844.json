{"pr_number": 3844, "pr_title": "Discord Module", "pr_createdAt": "2020-12-19T05:26:48Z", "pr_url": "https://github.com/EssentialsX/Essentials/pull/3844", "timeline": [{"oid": "fbd5c553224461e194ff694b225b1d349b547b9f", "url": "https://github.com/EssentialsX/Essentials/commit/fbd5c553224461e194ff694b225b1d349b547b9f", "message": "Add AFK message types", "committedDate": "2021-04-27T12:20:18Z", "type": "commit"}, {"oid": "da7b2c5107230b7f261bbe689ed17cedf99f04ed", "url": "https://github.com/EssentialsX/Essentials/commit/da7b2c5107230b7f261bbe689ed17cedf99f04ed", "message": "Downsample RGB role colors on versions < 1.16", "committedDate": "2021-04-27T12:55:54Z", "type": "commit"}, {"oid": "024b2e86d833439e33be00307baeaca596894370", "url": "https://github.com/EssentialsX/Essentials/commit/024b2e86d833439e33be00307baeaca596894370", "message": "Add log level config option", "committedDate": "2021-04-27T15:00:16Z", "type": "commit"}, {"oid": "0d303c9120a761f23de824a01c189304d54fff3e", "url": "https://github.com/EssentialsX/Essentials/commit/0d303c9120a761f23de824a01c189304d54fff3e", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-04-29T12:56:20Z", "type": "commit"}, {"oid": "122cc0b740d4078740f9568c717834cb8296ed2c", "url": "https://github.com/EssentialsX/Essentials/commit/122cc0b740d4078740f9568c717834cb8296ed2c", "message": "Merge remote-tracking branch 'origin/2.x' into module/discord", "committedDate": "2021-05-01T20:40:28Z", "type": "commit"}, {"oid": "a1957f07dcd4e1985f25fab1b62119e13b35eff1", "url": "https://github.com/EssentialsX/Essentials/commit/a1957f07dcd4e1985f25fab1b62119e13b35eff1", "message": "Add EssentialsDiscord to javadocs deploy", "committedDate": "2021-05-01T20:44:01Z", "type": "commit"}, {"oid": "e62a1afd6d8f3aa212bc9bcc2e507db60d40f6d0", "url": "https://github.com/EssentialsX/Essentials/commit/e62a1afd6d8f3aa212bc9bcc2e507db60d40f6d0", "message": "Add way to get JDA instance through API", "committedDate": "2021-05-01T21:01:10Z", "type": "commit"}, {"oid": "0110a300ab9af679e1e2c7cf0cff2d3f1da90692", "url": "https://github.com/EssentialsX/Essentials/commit/0110a300ab9af679e1e2c7cf0cff2d3f1da90692", "message": "Fix JDA scope", "committedDate": "2021-05-01T21:10:13Z", "type": "commit"}, {"oid": "9c87288a502b1071696947c2b462aeac4eab758c", "url": "https://github.com/EssentialsX/Essentials/commit/9c87288a502b1071696947c2b462aeac4eab758c", "message": "Bump JDA", "committedDate": "2021-05-01T21:19:38Z", "type": "commit"}, {"oid": "6f28fda4af1274e27fd744213e1ce33dfdf84e5a", "url": "https://github.com/EssentialsX/Essentials/commit/6f28fda4af1274e27fd744213e1ce33dfdf84e5a", "message": "Better support null argument sets", "committedDate": "2021-05-03T01:38:09Z", "type": "commit"}, {"oid": "ba1b3a9b2d0eaadbc2b4151f649429580f65121b", "url": "https://github.com/EssentialsX/Essentials/commit/ba1b3a9b2d0eaadbc2b4151f649429580f65121b", "message": "Remove InteractionCommand#addArgument\n\nIt's really just implementation detail", "committedDate": "2021-05-03T01:44:48Z", "type": "commit"}, {"oid": "bb23cdead651aa8dbf20d4c06db55671b6807cea", "url": "https://github.com/EssentialsX/Essentials/commit/bb23cdead651aa8dbf20d4c06db55671b6807cea", "message": "Remove InteractionCommand#getAdminSnowflakes\n\nmore overexposed implementation detail", "committedDate": "2021-05-03T01:55:51Z", "type": "commit"}, {"oid": "4e1726b151397c26c872cfab89e0171a357ea035", "url": "https://github.com/EssentialsX/Essentials/commit/4e1726b151397c26c872cfab89e0171a357ea035", "message": "Only run startup during initial plugin load", "committedDate": "2021-05-03T02:06:59Z", "type": "commit"}, {"oid": "37375c099d5eae987e06bb276fcaab8a21af38d7", "url": "https://github.com/EssentialsX/Essentials/commit/37375c099d5eae987e06bb276fcaab8a21af38d7", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-05-06T12:05:37Z", "type": "commit"}, {"oid": "2cd7a8e23ddf9947df4230becbea6e58306ce9e3", "url": "https://github.com/EssentialsX/Essentials/commit/2cd7a8e23ddf9947df4230becbea6e58306ce9e3", "message": "Remove 1.16+ note from color config option", "committedDate": "2021-05-06T12:16:27Z", "type": "commit"}, {"oid": "0ce6a1cfd51dc754f6e44b7132077a361a922c8d", "url": "https://github.com/EssentialsX/Essentials/commit/0ce6a1cfd51dc754f6e44b7132077a361a922c8d", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-05-10T19:07:38Z", "type": "commit"}, {"oid": "44356d0502ef89761026931e5dc796d4aca651fe", "url": "https://github.com/EssentialsX/Essentials/commit/44356d0502ef89761026931e5dc796d4aca651fe", "message": "Fix checkstyle", "committedDate": "2021-05-10T19:26:16Z", "type": "commit"}, {"oid": "e0c9c75ba60eb296c6724e7616b4e9550758764f", "url": "https://github.com/EssentialsX/Essentials/commit/e0c9c75ba60eb296c6724e7616b4e9550758764f", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-05-10T21:15:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTcxNjIwMg==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r629716202", "bodyText": "Why do you hate me? Alphabetical!", "author": "kashike", "createdAt": "2021-05-10T22:11:31Z", "path": "Essentials/src/main/java/com/earth2me/essentials/commands/Commandessentials.java", "diffHunk": "@@ -52,15 +52,17 @@\n         \"UltraPermissions\",\n         \"PermissionsEx\", // permissions (unsupported)\n         \"GroupManager\", // permissions (unsupported)\n-        \"bPermissions\" // permissions (unsupported)\n+        \"bPermissions\", // permissions (unsupported)\n+        \"DiscordSRV\" // potential for issues if EssentialsXDiscord is installed\n     );\n     private static final List<String> officialPlugins = Arrays.asList(\n         \"EssentialsAntiBuild\",\n         \"EssentialsChat\",\n         \"EssentialsGeoIP\",\n         \"EssentialsProtect\",\n         \"EssentialsSpawn\",\n-        \"EssentialsXMPP\"\n+        \"EssentialsXMPP\",\n+        \"EssentialsDiscord\"", "originalCommit": "e0c9c75ba60eb296c6724e7616b4e9550758764f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fc0387a3f9a85674a74411eebb3b3f013a39be0", "chunk": "diff --git a/Essentials/src/main/java/com/earth2me/essentials/commands/Commandessentials.java b/Essentials/src/main/java/com/earth2me/essentials/commands/Commandessentials.java\nindex 90c44d792..783e8c032 100644\n--- a/Essentials/src/main/java/com/earth2me/essentials/commands/Commandessentials.java\n+++ b/Essentials/src/main/java/com/earth2me/essentials/commands/Commandessentials.java\n\n@@ -58,11 +58,11 @@ public class Commandessentials extends EssentialsCommand {\n     private static final List<String> officialPlugins = Arrays.asList(\n         \"EssentialsAntiBuild\",\n         \"EssentialsChat\",\n+        \"EssentialsDiscord\",\n         \"EssentialsGeoIP\",\n         \"EssentialsProtect\",\n         \"EssentialsSpawn\",\n-        \"EssentialsXMPP\",\n-        \"EssentialsDiscord\"\n+        \"EssentialsXMPP\"\n     );\n     private static final List<String> warnPlugins = Arrays.asList(\n         \"PermissionsEx\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTcxNjQ4MQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r629716481", "bodyText": "Include the entire license text in this file.", "author": "kashike", "createdAt": "2021-05-10T22:12:06Z", "path": "Essentials/src/main/java/com/earth2me/essentials/utils/DownsampleUtil.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.earth2me.essentials.utils;\n+\n+/**\n+ * Most of this code was \"borrowed\" from KyoriPowered/Adventure and is subject to their MIT license.", "originalCommit": "e0c9c75ba60eb296c6724e7616b4e9550758764f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c92c3336ac8f1deec2c25fbc5f608977919c062", "chunk": "diff --git a/Essentials/src/main/java/com/earth2me/essentials/utils/DownsampleUtil.java b/Essentials/src/main/java/com/earth2me/essentials/utils/DownsampleUtil.java\nindex 1d5436b01..1e0fc2d6f 100644\n--- a/Essentials/src/main/java/com/earth2me/essentials/utils/DownsampleUtil.java\n+++ b/Essentials/src/main/java/com/earth2me/essentials/utils/DownsampleUtil.java\n\n@@ -1,9 +1,29 @@\n package com.earth2me.essentials.utils;\n \n /**\n- * Most of this code was \"borrowed\" from KyoriPowered/Adventure and is subject to their MIT license.\n+ * Most of this code was \"borrowed\" from KyoriPowered/Adventure and is subject to their MIT license;\n  *\n- * You can read their license here: https://github.com/KyoriPowered/adventure/blob/master/license.txt\n+ * MIT License\n+ *\n+ * Copyright (c) 2017-2020 KyoriPowered\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n  */\n public final class DownsampleUtil {\n     private final static NamedTextColor[] VALUES = new NamedTextColor[] {new NamedTextColor(\"0\", 0x000000), new NamedTextColor(\"1\", 0x0000aa), new NamedTextColor(\"2\", 0x00aa00), new NamedTextColor(\"3\", 0x00aaaa), new NamedTextColor(\"4\", 0xaa0000), new NamedTextColor(\"5\", 0xaa00aa), new NamedTextColor(\"6\", 0xffaa00), new NamedTextColor(\"7\", 0xaaaaaa), new NamedTextColor(\"8\", 0x555555), new NamedTextColor(\"9\", 0x5555ff), new NamedTextColor(\"a\", 0x55ff55), new NamedTextColor(\"b\", 0x55ffff), new NamedTextColor(\"c\", 0xff5555), new NamedTextColor(\"d\", 0xff55ff), new NamedTextColor(\"e\", 0xffff55), new NamedTextColor(\"f\", 0xffffff)};\n"}}, {"oid": "1c92c3336ac8f1deec2c25fbc5f608977919c062", "url": "https://github.com/EssentialsX/Essentials/commit/1c92c3336ac8f1deec2c25fbc5f608977919c062", "message": "Include full Kyori license", "committedDate": "2021-05-10T23:14:23Z", "type": "commit"}, {"oid": "4fc0387a3f9a85674a74411eebb3b3f013a39be0", "url": "https://github.com/EssentialsX/Essentials/commit/4fc0387a3f9a85674a74411eebb3b3f013a39be0", "message": "a b c d e f g h i j k l m n o p q r s t u v w x y z", "committedDate": "2021-05-10T23:16:04Z", "type": "commit"}, {"oid": "26a3b037360571c04efdf2826b74078887a64674", "url": "https://github.com/EssentialsX/Essentials/commit/26a3b037360571c04efdf2826b74078887a64674", "message": "Merge remote-tracking branch 'upstream/module/discord' into module/discord", "committedDate": "2021-05-10T23:16:24Z", "type": "commit"}, {"oid": "7ce531c4108913d89d2fcb7e216529fb5703e183", "url": "https://github.com/EssentialsX/Essentials/commit/7ce531c4108913d89d2fcb7e216529fb5703e183", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-05-13T04:26:09Z", "type": "commit"}, {"oid": "9ce2c613ae88140d9138ba25a964176e0eaff9af", "url": "https://github.com/EssentialsX/Essentials/commit/9ce2c613ae88140d9138ba25a964176e0eaff9af", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-05-15T17:34:25Z", "type": "commit"}, {"oid": "e77c02ba655f9ce9a5fb2860b608e9d025987f76", "url": "https://github.com/EssentialsX/Essentials/commit/e77c02ba655f9ce9a5fb2860b608e9d025987f76", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-05-19T14:02:54Z", "type": "commit"}, {"oid": "f61b1a65d97e9952d00a33e3aa417c08b023bc97", "url": "https://github.com/EssentialsX/Essentials/commit/f61b1a65d97e9952d00a33e3aa417c08b023bc97", "message": "Register commands in bulk to avoid rate limit", "committedDate": "2021-05-20T00:12:45Z", "type": "commit"}, {"oid": "755ce10c4954bc80c9c9db8da9f403e10c22d5f6", "url": "https://github.com/EssentialsX/Essentials/commit/755ce10c4954bc80c9c9db8da9f403e10c22d5f6", "message": "Support more argument types", "committedDate": "2021-05-24T16:40:17Z", "type": "commit"}, {"oid": "4386e6f76a0aa0bb95cba03e9b5833b9402ae5fe", "url": "https://github.com/EssentialsX/Essentials/commit/4386e6f76a0aa0bb95cba03e9b5833b9402ae5fe", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-05-24T16:45:54Z", "type": "commit"}, {"oid": "259776b6655b68312662afb4d7e1020a41c1d2df", "url": "https://github.com/EssentialsX/Essentials/commit/259776b6655b68312662afb4d7e1020a41c1d2df", "message": "Remove unneeded null checks", "committedDate": "2021-05-24T16:47:39Z", "type": "commit"}, {"oid": "2338f3f7b142d8322cae0761f2c8b066ccf835b1", "url": "https://github.com/EssentialsX/Essentials/commit/2338f3f7b142d8322cae0761f2c8b066ccf835b1", "message": "Delete commands in bulk to avoid rate limits", "committedDate": "2021-05-24T17:09:19Z", "type": "commit"}, {"oid": "d30c864c8b1aff37e971c6bc1f99d3fef5c2785e", "url": "https://github.com/EssentialsX/Essentials/commit/d30c864c8b1aff37e971c6bc1f99d3fef5c2785e", "message": "Only respond to command interactions\n\nButton interactions are now a thing, we don't want to handle those for now ;)", "committedDate": "2021-05-26T17:57:18Z", "type": "commit"}, {"oid": "c95cdb2e67c8d0d457c4447b5481fbb23a8ad29c", "url": "https://github.com/EssentialsX/Essentials/commit/c95cdb2e67c8d0d457c4447b5481fbb23a8ad29c", "message": "Fix numbers in README.md", "committedDate": "2021-05-31T23:25:27Z", "type": "commit"}, {"oid": "c90db0fce1d30725649ab0bd74a7115064f50fed", "url": "https://github.com/EssentialsX/Essentials/commit/c90db0fce1d30725649ab0bd74a7115064f50fed", "message": "Add UUID param to DiscordMessageEvent", "committedDate": "2021-06-01T15:45:38Z", "type": "commit"}, {"oid": "6d2395da2eb39e990e0500e34900dd0d21fc41ef", "url": "https://github.com/EssentialsX/Essentials/commit/6d2395da2eb39e990e0500e34900dd0d21fc41ef", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-03T11:38:57Z", "type": "commit"}, {"oid": "a5d1312fbcd4994956f5a598d1e0b793e35ee223", "url": "https://github.com/EssentialsX/Essentials/commit/a5d1312fbcd4994956f5a598d1e0b793e35ee223", "message": "Switch to JDA Slash Commands", "committedDate": "2021-06-04T14:59:49Z", "type": "commit"}, {"oid": "34292ebf1e33898020a3c70b427b77c8ecc450e6", "url": "https://github.com/EssentialsX/Essentials/commit/34292ebf1e33898020a3c70b427b77c8ecc450e6", "message": "Properally handle null arguments", "committedDate": "2021-06-04T15:05:21Z", "type": "commit"}, {"oid": "c701a707ed69936911b3656b7e4ce55455dcc3e7", "url": "https://github.com/EssentialsX/Essentials/commit/c701a707ed69936911b3656b7e4ce55455dcc3e7", "message": "Fix typo in DiscordMessageEvent constructor", "committedDate": "2021-06-07T03:47:02Z", "type": "commit"}, {"oid": "2f82912845d1b92b22b30753581da8e12dfe5d3c", "url": "https://github.com/EssentialsX/Essentials/commit/2f82912845d1b92b22b30753581da8e12dfe5d3c", "message": "Developer API Stub", "committedDate": "2021-06-07T11:24:13Z", "type": "commit"}, {"oid": "cf176f63b578735f874d19fef27061b9c8506dd5", "url": "https://github.com/EssentialsX/Essentials/commit/cf176f63b578735f874d19fef27061b9c8506dd5", "message": "Merge remote-tracking branch 'origin/2.x' into module/discord\n\n# Conflicts:\n#\tbuild.gradle\n#\tsettings.gradle", "committedDate": "2021-06-07T12:28:08Z", "type": "commit"}, {"oid": "183ec5f4b3f030d98232c370d4f58868199a046d", "url": "https://github.com/EssentialsX/Essentials/commit/183ec5f4b3f030d98232c370d4f58868199a046d", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-07T13:38:30Z", "type": "commit"}, {"oid": "c0d5a77a81c9e273faf59ccc7624fb12152a6c8d", "url": "https://github.com/EssentialsX/Essentials/commit/c0d5a77a81c9e273faf59ccc7624fb12152a6c8d", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-08T20:52:44Z", "type": "commit"}, {"oid": "50f33daf5d849031c8647a2cb31e63211fd43de6", "url": "https://github.com/EssentialsX/Essentials/commit/50f33daf5d849031c8647a2cb31e63211fd43de6", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-10T14:19:27Z", "type": "commit"}, {"oid": "57600f333c2a177bca30104f0f1608040e50fc99", "url": "https://github.com/EssentialsX/Essentials/commit/57600f333c2a177bca30104f0f1608040e50fc99", "message": "Add DiscordChatMessageEvent", "committedDate": "2021-06-10T16:29:51Z", "type": "commit"}, {"oid": "c3bfe4d4ab153740d4cb482f568ffc4f7e471975", "url": "https://github.com/EssentialsX/Essentials/commit/c3bfe4d4ab153740d4cb482f568ffc4f7e471975", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-11T15:15:01Z", "type": "commit"}, {"oid": "b743d86459feed91b7429be8e59a69a8129fe72e", "url": "https://github.com/EssentialsX/Essentials/commit/b743d86459feed91b7429be8e59a69a8129fe72e", "message": "Add docs for sending message via default channels", "committedDate": "2021-06-11T18:01:26Z", "type": "commit"}, {"oid": "369f0a2328b0ce58614a01da5136872525a3fd64", "url": "https://github.com/EssentialsX/Essentials/commit/369f0a2328b0ce58614a01da5136872525a3fd64", "message": "Prevent disabled commands from being executed even when registering", "committedDate": "2021-06-11T20:10:13Z", "type": "commit"}, {"oid": "766887dc140672a4dbfdc45811955eb33de0468e", "url": "https://github.com/EssentialsX/Essentials/commit/766887dc140672a4dbfdc45811955eb33de0468e", "message": "Add convenience constructor for DiscordMessageEvent", "committedDate": "2021-06-11T20:10:52Z", "type": "commit"}, {"oid": "8ef49d3a6bb1a619253c460dcaacc3408133dee2", "url": "https://github.com/EssentialsX/Essentials/commit/8ef49d3a6bb1a619253c460dcaacc3408133dee2", "message": "Add developer documentation", "committedDate": "2021-06-11T20:33:23Z", "type": "commit"}, {"oid": "aa052663cebd3acd52166e535d51442708c71876", "url": "https://github.com/EssentialsX/Essentials/commit/aa052663cebd3acd52166e535d51442708c71876", "message": "Bump JDA to 4.3.0", "committedDate": "2021-06-11T21:19:41Z", "type": "commit"}, {"oid": "07d03a5fc932042940ec56ced2b9ec55789d61b3", "url": "https://github.com/EssentialsX/Essentials/commit/07d03a5fc932042940ec56ced2b9ec55789d61b3", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-12T20:53:25Z", "type": "commit"}, {"oid": "489869304a2c27f12b29a63daba0bacc452e266e", "url": "https://github.com/EssentialsX/Essentials/commit/489869304a2c27f12b29a63daba0bacc452e266e", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-14T11:31:48Z", "type": "commit"}, {"oid": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "url": "https://github.com/EssentialsX/Essentials/commit/99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-18T01:33:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjYxNzM4Mw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r642617383", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Fired before a message is about to be sent to a discord channel.\n          \n          \n            \n             * Fired before a message is about to be sent to a Discord channel.", "author": "mdcfe", "createdAt": "2021-05-31T17:43:38Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Fired before a message is about to be sent to a discord channel.", "originalCommit": "d30c864c8b1aff37e971c6bc1f99d3fef5c2785e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzMyMQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223321", "bodyText": "In addition, may want to document when the avatar URL and name fields are supported - possibly include an isWebhook method?", "author": "mdcfe", "createdAt": "2021-06-26T21:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjYxNzM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c90db0fce1d30725649ab0bd74a7115064f50fed", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\nindex 11bd8412a..0e87869cc 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n\n@@ -5,6 +5,8 @@ import org.bukkit.event.Event;\n import org.bukkit.event.HandlerList;\n import org.jetbrains.annotations.NotNull;\n \n+import java.util.UUID;\n+\n /**\n  * Fired before a message is about to be sent to a discord channel.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMjkwOA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659222908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Fired before a chat message is about to be sent to a discord channel.\n          \n          \n            \n             * Should be used to block chat messages (such as staff channels) from appearing in discord.\n          \n          \n            \n             * Fired before a chat message is about to be sent to a Discord channel.\n          \n          \n            \n             * Should be used to block chat messages (such as staff channels) from appearing in Discord.", "author": "mdcfe", "createdAt": "2021-06-26T20:55:06Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Fired before a chat message is about to be sent to a discord channel.\n+ * Should be used to block chat messages (such as staff channels) from appearing in discord.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java\nindex 3d698ec59..a0a86ace0 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java\n\n@@ -7,8 +7,8 @@ import org.bukkit.event.HandlerList;\n import org.jetbrains.annotations.NotNull;\n \n /**\n- * Fired before a chat message is about to be sent to a discord channel.\n- * Should be used to block chat messages (such as staff channels) from appearing in discord.\n+ * Fired before a chat message is about to be sent to a Discord channel.\n+ * Should be used to block chat messages (such as staff channels) from appearing in Discord.\n  */\n public class DiscordChatMessageEvent extends Event implements Cancellable {\n     private static final HandlerList handlers = new HandlerList();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMjk1Nw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659222957", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets the message of this event, and thus the chat message relayed to discord.\n          \n          \n            \n                 * Sets the message of this event, and thus the chat message relayed to Discord.", "author": "mdcfe", "createdAt": "2021-06-26T20:55:32Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Fired before a chat message is about to be sent to a discord channel.\n+ * Should be used to block chat messages (such as staff channels) from appearing in discord.\n+ */\n+public class DiscordChatMessageEvent extends Event implements Cancellable {\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private final Player player;\n+    private String message;\n+    private boolean cancelled = false;\n+\n+    /**\n+     * @param player  The player which caused this event.\n+     * @param message The message of this event.\n+     */\n+    public DiscordChatMessageEvent(Player player, String message) {\n+        this.player = player;\n+        this.message = message;\n+    }\n+\n+    /**\n+     * The player which which caused this chat message.\n+     * @return the player who caused the event.\n+     */\n+    public Player getPlayer() {\n+        return player;\n+    }\n+\n+    /**\n+     * The message being sent in this chat event.\n+     * @return the message of this event.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Sets the message of this event, and thus the chat message relayed to discord.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java\nindex 3d698ec59..a0a86ace0 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java\n\n@@ -7,8 +7,8 @@ import org.bukkit.event.HandlerList;\n import org.jetbrains.annotations.NotNull;\n \n /**\n- * Fired before a chat message is about to be sent to a discord channel.\n- * Should be used to block chat messages (such as staff channels) from appearing in discord.\n+ * Fired before a chat message is about to be sent to a Discord channel.\n+ * Should be used to block chat messages (such as staff channels) from appearing in Discord.\n  */\n public class DiscordChatMessageEvent extends Event implements Cancellable {\n     private static final HandlerList handlers = new HandlerList();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzAzMw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223033", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n          \n          \n            \n                 * @param avatarUrl          The avatar URL to use for this message (if supported) or null to use the default bot avatar.", "author": "mdcfe", "createdAt": "2021-06-26T20:56:13Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Fired before a message is about to be sent to a discord channel.\n+ */\n+public class DiscordMessageEvent extends Event implements Cancellable {\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private boolean cancelled = false;\n+    private MessageType type;\n+    private String message;\n+    private boolean allowGroupMentions;\n+    private String avatarUrl;\n+    private String name;\n+    private final UUID uuid;\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions) {\n+        this(type, message, allowGroupMentions, null, null, null);\n+    }\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\nindex e4ae69e08..190c98205 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n\n@@ -34,7 +34,7 @@ public class DiscordMessageEvent extends Event implements Cancellable {\n      * @param type               The message type/destination of this event.\n      * @param message            The raw message content of this event.\n      * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n-     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param avatarUrl          The avatar URL to use for this message (if supported) or null to use the default bot avatar.\n      * @param name               The name to use for this message (if supported) or null to use the default bot name.\n      * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzA2OA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n          \n          \n            \n                 * @param allowGroupMentions Whether or not the message should allow the pinging of channels, users, or emotes.", "author": "mdcfe", "createdAt": "2021-06-26T20:56:43Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Fired before a message is about to be sent to a discord channel.\n+ */\n+public class DiscordMessageEvent extends Event implements Cancellable {\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private boolean cancelled = false;\n+    private MessageType type;\n+    private String message;\n+    private boolean allowGroupMentions;\n+    private String avatarUrl;\n+    private String name;\n+    private final UUID uuid;\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions) {\n+        this(type, message, allowGroupMentions, null, null, null);\n+    }\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzMzIxMA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659233210", "bodyText": "Isn't that param name a bit misleading?\nConsidering it says allowGroupMentions but the description says it's to set if it should allow the pinging of channels, users or emotes, so it feels a bit unclear imo and should perhaps be changed to just allowMentions", "author": "Andre601", "createdAt": "2021-06-26T22:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTI1ODg3MA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659258870", "bodyText": "Isn't that param name a bit misleading?\nConsidering it says allowGroupMentions but the description says it's to set if it should allow the pinging of channels, users or emotes, so it feels a bit unclear imo and should perhaps be changed to just allowMentions\n\nThat was a typo, now fixed", "author": "JRoy", "createdAt": "2021-06-27T04:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\nindex e4ae69e08..190c98205 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n\n@@ -34,7 +34,7 @@ public class DiscordMessageEvent extends Event implements Cancellable {\n      * @param type               The message type/destination of this event.\n      * @param message            The raw message content of this event.\n      * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n-     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param avatarUrl          The avatar URL to use for this message (if supported) or null to use the default bot avatar.\n      * @param name               The name to use for this message (if supported) or null to use the default bot name.\n      * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzA5MA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223090", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the raw message content that is about to be sent to discord.\n          \n          \n            \n                 * Gets the raw message content that is about to be sent to Discord.", "author": "mdcfe", "createdAt": "2021-06-26T20:57:22Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Fired before a message is about to be sent to a discord channel.\n+ */\n+public class DiscordMessageEvent extends Event implements Cancellable {\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private boolean cancelled = false;\n+    private MessageType type;\n+    private String message;\n+    private boolean allowGroupMentions;\n+    private String avatarUrl;\n+    private String name;\n+    private final UUID uuid;\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions) {\n+        this(type, message, allowGroupMentions, null, null, null);\n+    }\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param name               The name to use for this message (if supported) or null to use the default bot name.\n+     * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions, final String avatarUrl, final String name, final UUID uuid) {\n+        this.type = type;\n+        this.message = message;\n+        this.allowGroupMentions = allowGroupMentions;\n+        this.avatarUrl = avatarUrl;\n+        this.name = name;\n+        this.uuid = uuid;\n+    }\n+\n+    /**\n+     * Gets the type of this message. This also defines its destination.\n+     * @return The message type.\n+     */\n+    public MessageType getType() {\n+        return type;\n+    }\n+\n+    /**\n+     * Sets the message type and therefore its destination.\n+     * @param type The new message type.\n+     */\n+    public void setType(MessageType type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Gets the raw message content that is about to be sent to discord.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\nindex e4ae69e08..190c98205 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n\n@@ -34,7 +34,7 @@ public class DiscordMessageEvent extends Event implements Cancellable {\n      * @param type               The message type/destination of this event.\n      * @param message            The raw message content of this event.\n      * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n-     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param avatarUrl          The avatar URL to use for this message (if supported) or null to use the default bot avatar.\n      * @param name               The name to use for this message (if supported) or null to use the default bot name.\n      * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzEzMg==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223132", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets the raw message content to be sent to discord\n          \n          \n            \n                 * Sets the raw message content to be sent to Discord.", "author": "mdcfe", "createdAt": "2021-06-26T20:57:34Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Fired before a message is about to be sent to a discord channel.\n+ */\n+public class DiscordMessageEvent extends Event implements Cancellable {\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private boolean cancelled = false;\n+    private MessageType type;\n+    private String message;\n+    private boolean allowGroupMentions;\n+    private String avatarUrl;\n+    private String name;\n+    private final UUID uuid;\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions) {\n+        this(type, message, allowGroupMentions, null, null, null);\n+    }\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param name               The name to use for this message (if supported) or null to use the default bot name.\n+     * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions, final String avatarUrl, final String name, final UUID uuid) {\n+        this.type = type;\n+        this.message = message;\n+        this.allowGroupMentions = allowGroupMentions;\n+        this.avatarUrl = avatarUrl;\n+        this.name = name;\n+        this.uuid = uuid;\n+    }\n+\n+    /**\n+     * Gets the type of this message. This also defines its destination.\n+     * @return The message type.\n+     */\n+    public MessageType getType() {\n+        return type;\n+    }\n+\n+    /**\n+     * Sets the message type and therefore its destination.\n+     * @param type The new message type.\n+     */\n+    public void setType(MessageType type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Gets the raw message content that is about to be sent to discord.\n+     * @return The raw message.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Sets the raw message content to be sent to discord", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\nindex e4ae69e08..190c98205 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n\n@@ -34,7 +34,7 @@ public class DiscordMessageEvent extends Event implements Cancellable {\n      * @param type               The message type/destination of this event.\n      * @param message            The raw message content of this event.\n      * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n-     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param avatarUrl          The avatar URL to use for this message (if supported) or null to use the default bot avatar.\n      * @param name               The name to use for this message (if supported) or null to use the default bot name.\n      * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzE3Mw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the avatar url to use for this message, or null if none is specified.\n          \n          \n            \n                 * @return The avatar url or null.\n          \n          \n            \n                 * Gets the avatar URL to use for this message, or null if none is specified.\n          \n          \n            \n                 * @return The avatar URL or null.", "author": "mdcfe", "createdAt": "2021-06-26T20:58:11Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Fired before a message is about to be sent to a discord channel.\n+ */\n+public class DiscordMessageEvent extends Event implements Cancellable {\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private boolean cancelled = false;\n+    private MessageType type;\n+    private String message;\n+    private boolean allowGroupMentions;\n+    private String avatarUrl;\n+    private String name;\n+    private final UUID uuid;\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions) {\n+        this(type, message, allowGroupMentions, null, null, null);\n+    }\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param name               The name to use for this message (if supported) or null to use the default bot name.\n+     * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions, final String avatarUrl, final String name, final UUID uuid) {\n+        this.type = type;\n+        this.message = message;\n+        this.allowGroupMentions = allowGroupMentions;\n+        this.avatarUrl = avatarUrl;\n+        this.name = name;\n+        this.uuid = uuid;\n+    }\n+\n+    /**\n+     * Gets the type of this message. This also defines its destination.\n+     * @return The message type.\n+     */\n+    public MessageType getType() {\n+        return type;\n+    }\n+\n+    /**\n+     * Sets the message type and therefore its destination.\n+     * @param type The new message type.\n+     */\n+    public void setType(MessageType type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Gets the raw message content that is about to be sent to discord.\n+     * @return The raw message.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Sets the raw message content to be sent to discord\n+     * @param message The new message content.\n+     */\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    /**\n+     * Checks if this message allows pinging of roles/@here/@everyone.\n+     * @return true if this message is allowed to ping of roles/@here/@everyone.\n+     */\n+    public boolean isAllowGroupMentions() {\n+        return allowGroupMentions;\n+    }\n+\n+    /**\n+     * Sets if this message is allowed to ping roles/@here/@everyone.\n+     * @param allowGroupMentions If pinging of roles/@here/@everyone should be allowed.\n+     */\n+    public void setAllowGroupMentions(boolean allowGroupMentions) {\n+        this.allowGroupMentions = allowGroupMentions;\n+    }\n+\n+    /**\n+     * Gets the avatar url to use for this message, or null if none is specified.\n+     * @return The avatar url or null.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\nindex e4ae69e08..190c98205 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n\n@@ -34,7 +34,7 @@ public class DiscordMessageEvent extends Event implements Cancellable {\n      * @param type               The message type/destination of this event.\n      * @param message            The raw message content of this event.\n      * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n-     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param avatarUrl          The avatar URL to use for this message (if supported) or null to use the default bot avatar.\n      * @param name               The name to use for this message (if supported) or null to use the default bot name.\n      * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzIwMw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223203", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets the avatar url for this message, or null to use the bot's avatar.\n          \n          \n            \n                 * @param avatarUrl The avatar url or null.\n          \n          \n            \n                 * Sets the avatar URL for this message, or null to use the bot's avatar.\n          \n          \n            \n                 * @param avatarUrl The avatar URL or null.", "author": "mdcfe", "createdAt": "2021-06-26T20:58:23Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Fired before a message is about to be sent to a discord channel.\n+ */\n+public class DiscordMessageEvent extends Event implements Cancellable {\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private boolean cancelled = false;\n+    private MessageType type;\n+    private String message;\n+    private boolean allowGroupMentions;\n+    private String avatarUrl;\n+    private String name;\n+    private final UUID uuid;\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions) {\n+        this(type, message, allowGroupMentions, null, null, null);\n+    }\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param name               The name to use for this message (if supported) or null to use the default bot name.\n+     * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions, final String avatarUrl, final String name, final UUID uuid) {\n+        this.type = type;\n+        this.message = message;\n+        this.allowGroupMentions = allowGroupMentions;\n+        this.avatarUrl = avatarUrl;\n+        this.name = name;\n+        this.uuid = uuid;\n+    }\n+\n+    /**\n+     * Gets the type of this message. This also defines its destination.\n+     * @return The message type.\n+     */\n+    public MessageType getType() {\n+        return type;\n+    }\n+\n+    /**\n+     * Sets the message type and therefore its destination.\n+     * @param type The new message type.\n+     */\n+    public void setType(MessageType type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Gets the raw message content that is about to be sent to discord.\n+     * @return The raw message.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Sets the raw message content to be sent to discord\n+     * @param message The new message content.\n+     */\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    /**\n+     * Checks if this message allows pinging of roles/@here/@everyone.\n+     * @return true if this message is allowed to ping of roles/@here/@everyone.\n+     */\n+    public boolean isAllowGroupMentions() {\n+        return allowGroupMentions;\n+    }\n+\n+    /**\n+     * Sets if this message is allowed to ping roles/@here/@everyone.\n+     * @param allowGroupMentions If pinging of roles/@here/@everyone should be allowed.\n+     */\n+    public void setAllowGroupMentions(boolean allowGroupMentions) {\n+        this.allowGroupMentions = allowGroupMentions;\n+    }\n+\n+    /**\n+     * Gets the avatar url to use for this message, or null if none is specified.\n+     * @return The avatar url or null.\n+     */\n+    public String getAvatarUrl() {\n+        return avatarUrl;\n+    }\n+\n+    /**\n+     * Sets the avatar url for this message, or null to use the bot's avatar.\n+     * @param avatarUrl The avatar url or null.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\nindex e4ae69e08..190c98205 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n\n@@ -34,7 +34,7 @@ public class DiscordMessageEvent extends Event implements Cancellable {\n      * @param type               The message type/destination of this event.\n      * @param message            The raw message content of this event.\n      * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n-     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param avatarUrl          The avatar URL to use for this message (if supported) or null to use the default bot avatar.\n      * @param name               The name to use for this message (if supported) or null to use the default bot name.\n      * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzUxMA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223510", "bodyText": "Do we want MessageType keys to be namespaced? I feel like they should be to make it easier to distinguish between default types and other plugins' types, but also not sure if that causes issues with config", "author": "mdcfe", "createdAt": "2021-06-26T21:02:07Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Fired before a message is about to be sent to a discord channel.\n+ */\n+public class DiscordMessageEvent extends Event implements Cancellable {\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private boolean cancelled = false;\n+    private MessageType type;\n+    private String message;\n+    private boolean allowGroupMentions;\n+    private String avatarUrl;\n+    private String name;\n+    private final UUID uuid;\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions) {\n+        this(type, message, allowGroupMentions, null, null, null);\n+    }\n+\n+    /**\n+     * @param type               The message type/destination of this event.\n+     * @param message            The raw message content of this event.\n+     * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n+     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param name               The name to use for this message (if supported) or null to use the default bot name.\n+     * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n+     */\n+    public DiscordMessageEvent(final MessageType type, final String message, final boolean allowGroupMentions, final String avatarUrl, final String name, final UUID uuid) {\n+        this.type = type;\n+        this.message = message;\n+        this.allowGroupMentions = allowGroupMentions;\n+        this.avatarUrl = avatarUrl;\n+        this.name = name;\n+        this.uuid = uuid;\n+    }\n+\n+    /**\n+     * Gets the type of this message. This also defines its destination.\n+     * @return The message type.\n+     */\n+    public MessageType getType() {\n+        return type;\n+    }\n+\n+    /**\n+     * Sets the message type and therefore its destination.\n+     * @param type The new message type.\n+     */\n+    public void setType(MessageType type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Gets the raw message content that is about to be sent to discord.\n+     * @return The raw message.\n+     */\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Sets the raw message content to be sent to discord\n+     * @param message The new message content.\n+     */\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    /**\n+     * Checks if this message allows pinging of roles/@here/@everyone.\n+     * @return true if this message is allowed to ping of roles/@here/@everyone.\n+     */\n+    public boolean isAllowGroupMentions() {\n+        return allowGroupMentions;\n+    }\n+\n+    /**\n+     * Sets if this message is allowed to ping roles/@here/@everyone.\n+     * @param allowGroupMentions If pinging of roles/@here/@everyone should be allowed.\n+     */\n+    public void setAllowGroupMentions(boolean allowGroupMentions) {\n+        this.allowGroupMentions = allowGroupMentions;\n+    }\n+\n+    /**\n+     * Gets the avatar url to use for this message, or null if none is specified.\n+     * @return The avatar url or null.\n+     */\n+    public String getAvatarUrl() {\n+        return avatarUrl;\n+    }\n+\n+    /**\n+     * Sets the avatar url for this message, or null to use the bot's avatar.\n+     * @param avatarUrl The avatar url or null.\n+     */\n+    public void setAvatarUrl(String avatarUrl) {\n+        this.avatarUrl = avatarUrl;\n+    }\n+\n+    /**\n+     * Gets the name to use for this message, or null if none is specified.\n+     * @return The name or null.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Sets the name for this message, or null to use the bot's name.\n+     * @param name The name or null.\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * Gets the UUID of the player which caused this event, or null if it wasn't a player triggered event.\n+     * @return The UUID or null.\n+     */\n+    public UUID getUUID() {\n+        return uuid;\n+    }\n+\n+    @Override\n+    public boolean isCancelled() {\n+        return cancelled;\n+    }\n+\n+    @Override\n+    public void setCancelled(boolean cancelled) {\n+        this.cancelled = cancelled;\n+    }\n+\n+    @Override\n+    public @NotNull HandlerList getHandlers() {\n+        return handlers;\n+    }\n+\n+    public static HandlerList getHandlerList() {\n+        return handlers;\n+    }\n+\n+    /**\n+     * Indicates the type of message being sent and its literal channel name used in the config.\n+     */\n+    public final static class MessageType {\n+        private final String key;\n+        private final boolean player;\n+\n+        /**\n+         * Creates a {@link MessageType} which will send channels to the specified channel key.\n+         * @param key The channel key defined in the {@code message-types} section of the config.\n+         */\n+        public MessageType(final String key) {\n+            this(key, false);\n+        }\n+\n+        /**\n+         * Internal constructor used by EssentialsX Discord\n+         */\n+        private MessageType(String key, boolean player) {\n+            this.key = key;\n+            this.player = player;\n+        }\n+\n+        /**\n+         * Gets the key used in {@code message-types} section of the config.\n+         * @return The config key.\n+         */\n+        public String getKey() {\n+            return key;\n+        }\n+\n+        /**\n+         * Checks if this message type should be beholden to player-specific config settings.\n+         * @return true if message type should be beholden to player-specific config settings.\n+         */\n+        public boolean isPlayer() {\n+            return player;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return key;\n+        }\n+\n+        /**\n+         * Default {@link MessageType MessageTypes} provided and documented by EssentialsX Discord.\n+         */\n+        public static final class DefaultTypes {\n+            public final static MessageType JOIN = new MessageType(\"join\", true);\n+            public final static MessageType LEAVE = new MessageType(\"leave\", true);\n+            public final static MessageType CHAT = new MessageType(\"chat\", true);\n+            public final static MessageType DEATH = new MessageType(\"death\", true);\n+            public final static MessageType AFK = new MessageType(\"afk\", true);\n+            public final static MessageType KICK = new MessageType(\"kick\", false);\n+            public final static MessageType MUTE = new MessageType(\"mute\", false);", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTI1OTAzNw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659259037", "bodyText": "Namespacing seems like it would be a PITA for end-users, should be up to plugins to avoid conflicts with custom channel names.", "author": "JRoy", "createdAt": "2021-06-27T04:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTMxNTU4OA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659315588", "bodyText": "I can see cases where multiple plugins might want to use several of these for different purposes (ie a factions plugin might want to broadcast join/leave messages related to joining/leaving factions, and servers might want those messages to go somewhere else). We could make the namespace prefix optional in the config, so users can choose to use chat to match any *:chat type or essentialsx:join/factions:join to configure those specific types independently?", "author": "mdcfe", "createdAt": "2021-06-27T12:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\nindex e4ae69e08..190c98205 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java\n\n@@ -34,7 +34,7 @@ public class DiscordMessageEvent extends Event implements Cancellable {\n      * @param type               The message type/destination of this event.\n      * @param message            The raw message content of this event.\n      * @param allowGroupMentions If the message should allow the pinging of channels, users, or emotes.\n-     * @param avatarUrl          The avatar url to use for this message (if supported) or null to use the default bot avatar.\n+     * @param avatarUrl          The avatar URL to use for this message (if supported) or null to use the default bot avatar.\n      * @param name               The name to use for this message (if supported) or null to use the default bot name.\n      * @param uuid               The UUID of the player which caused this event or null if this wasn't a player triggered event.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzUzMA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223530", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A class which provides numerous methods to interact with EssentialsXDiscord.\n          \n          \n            \n             * A class which provides numerous methods to interact with EssentialsX Discord.", "author": "mdcfe", "createdAt": "2021-06-26T21:02:29Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides numerous methods to interact with EssentialsXDiscord.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java\nindex 9ccf1b053..9bd04b38d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides numerous methods to interact with EssentialsXDiscord.\n+ * A class which provides numerous methods to interact with EssentialsX Discord.\n  */\n public interface EssentialsDiscordAPI {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzYxNA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223614", "bodyText": "I'd prefer DiscordService or at least EssentialsDiscordService (preferably former since the import would come from our API package anyway)", "author": "mdcfe", "createdAt": "2021-06-26T21:03:15Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides numerous methods to interact with EssentialsXDiscord.\n+ */\n+public interface EssentialsDiscordAPI {", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java\nindex 9ccf1b053..9bd04b38d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/EssentialsDiscordAPI.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides numerous methods to interact with EssentialsXDiscord.\n+ * A class which provides numerous methods to interact with EssentialsX Discord.\n  */\n public interface EssentialsDiscordAPI {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzY2Mw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223663", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the id of this channel.\n          \n          \n            \n                 * @return this channel's id.\n          \n          \n            \n                 * Gets the ID of this channel.\n          \n          \n            \n                 * @return this channel's ID.", "author": "mdcfe", "createdAt": "2021-06-26T21:04:13Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionChannel.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * Represents a interaction channel argument as a guild channel.\n+ */\n+public interface InteractionChannel {\n+    /**\n+     * Gets the name of this channel.\n+     * @return this channel's name.\n+     */\n+    String getName();\n+\n+    /**\n+     * Gets the id of this channel.\n+     * @return this channel's id.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionChannel.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionChannel.java\nindex e930dcc6f..01cbe81db 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionChannel.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionChannel.java\n\n@@ -11,8 +11,8 @@ public interface InteractionChannel {\n     String getName();\n \n     /**\n-     * Gets the id of this channel.\n-     * @return this channel's id.\n+     * Gets the ID of this channel.\n+     * @return this channel's ID.\n      */\n     String getId();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzY2Nw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223667", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents a command to be registered with the discord client.\n          \n          \n            \n             * Represents a command to be registered with the Discord client.", "author": "mdcfe", "createdAt": "2021-06-26T21:04:23Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import java.util.List;\n+\n+/**\n+ * Represents a command to be registered with the discord client.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\nindex 3e5d6a5b4..eb982c7fc 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\n\n@@ -3,7 +3,7 @@ package net.essentialsx.api.v2.services.discord;\n import java.util.List;\n \n /**\n- * Represents a command to be registered with the discord client.\n+ * Represents a command to be registered with the Discord client.\n  */\n public interface InteractionCommand {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzc0MA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Called when an interaction command is received from discord.\n          \n          \n            \n                 * Called when an interaction command is received from Discord.", "author": "mdcfe", "createdAt": "2021-06-26T21:04:53Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import java.util.List;\n+\n+/**\n+ * Represents a command to be registered with the discord client.\n+ */\n+public interface InteractionCommand {\n+    /**\n+     * Whether or not the command has been disabled and should not be registered at the request of the user.\n+     * @return true if the command has been disabled.\n+     */\n+    boolean isDisabled();\n+\n+    /**\n+     * Whether or not the command is ephemeral and if its usage/replies should be private for the user on in discord client.\n+     * @return true if the command is ephemeral.\n+     */\n+    boolean isEphemeral();\n+\n+    /**\n+     * Gets the name of this command as it appears in Discord.\n+     * @return the name of the command.\n+     */\n+    String getName();\n+\n+    /**\n+     * Gets the brief description of the command as it appears in Discord.\n+     * @return the description of the command.\n+     */\n+    String getDescription();\n+\n+    /**\n+     * Gets the list of arguments registered to this command.\n+     * <p>\n+     * Note: Arguments can only be registered before the command itself is registered, others will be ignored.\n+     * @return the list of arguments.\n+     */\n+    List<InteractionCommandArgument> getArguments();\n+\n+    /**\n+     * Called when an interaction command is received from discord.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\nindex 3e5d6a5b4..eb982c7fc 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\n\n@@ -3,7 +3,7 @@ package net.essentialsx.api.v2.services.discord;\n import java.util.List;\n \n /**\n- * Represents a command to be registered with the discord client.\n+ * Represents a command to be registered with the Discord client.\n  */\n public interface InteractionCommand {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzg0Ng==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223846", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents an argument for a command to be shown to the discord client.\n          \n          \n            \n             * Represents an argument for a command to be shown to Discord users.\n          \n      \n    \n    \n  \n\nthe Discord client -> Discord users because \"the client\" sounds like you're talking about the client/library we use to connect to Discord", "author": "mdcfe", "createdAt": "2021-06-26T21:06:31Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * Represents an argument for a command to be shown to the discord client.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java\nindex ababd6810..35c460f24 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * Represents an argument for a command to be shown to the discord client.\n+ * Represents an argument for a command to be shown to Discord users.\n  */\n public class InteractionCommandArgument {\n     private final String name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzg1OA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param name        The name of the argument to be shown to the discord client.\n          \n          \n            \n                 * @param description A brief description of the argument to be shown to the discord client.\n          \n          \n            \n                 * @param type        The type of argument.\n          \n          \n            \n                 * @param required    Whether or not the argument is required in order to send the command in the discord client.\n          \n          \n            \n                 * @param name        The name of the argument to be shown to the Discord client.\n          \n          \n            \n                 * @param description A brief description of the argument to be shown to the Discord client.\n          \n          \n            \n                 * @param type        The type of argument.\n          \n          \n            \n                 * @param required    Whether or not the argument is required in order to send the command in the Discord client.\n          \n      \n    \n    \n  \n\nwe Do a little trolling", "author": "mdcfe", "createdAt": "2021-06-26T21:06:48Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * Represents an argument for a command to be shown to the discord client.\n+ */\n+public class InteractionCommandArgument {\n+    private final String name;\n+    private final String description;\n+    private final InteractionCommandArgumentType type;\n+    private final boolean required;\n+\n+    /**\n+     * Builds a command argument.\n+     * @param name        The name of the argument to be shown to the discord client.\n+     * @param description A brief description of the argument to be shown to the discord client.\n+     * @param type        The type of argument.\n+     * @param required    Whether or not the argument is required in order to send the command in the discord client.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java\nindex ababd6810..35c460f24 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgument.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * Represents an argument for a command to be shown to the discord client.\n+ * Represents an argument for a command to be shown to Discord users.\n  */\n public class InteractionCommandArgument {\n     private final String name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzkxMA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223910", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Represents an argument type to be shown on the discord client.\n          \n          \n            \n             * Represents an argument type to be shown on the Discord client.", "author": "mdcfe", "createdAt": "2021-06-26T21:07:17Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * Represents an argument type to be shown on the discord client.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java\nindex b4dd5ffc3..1e5a17f9f 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * Represents an argument type to be shown on the discord client.\n+ * Represents an argument type to be shown on the Discord client.\n  */\n public enum InteractionCommandArgumentType {\n     STRING(3),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzkyMg==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223922", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the internal discord ID for this argument type.\n          \n          \n            \n                 * @return the internal discord id.\n          \n          \n            \n                 * Gets the internal Discord ID for this argument type.\n          \n          \n            \n                 * @return the internal Discord ID.", "author": "mdcfe", "createdAt": "2021-06-26T21:07:32Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * Represents an argument type to be shown on the discord client.\n+ */\n+public enum InteractionCommandArgumentType {\n+    STRING(3),\n+    INTEGER(4),\n+    BOOLEAN(5),\n+    USER(6),\n+    CHANNEL(7);\n+\n+    private final int id;\n+    InteractionCommandArgumentType(int id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * Gets the internal discord ID for this argument type.\n+     * @return the internal discord id.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java\nindex b4dd5ffc3..1e5a17f9f 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommandArgumentType.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * Represents an argument type to be shown on the discord client.\n+ * Represents an argument type to be shown on the Discord client.\n  */\n public enum InteractionCommandArgumentType {\n     STRING(3),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyMzk5MA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659223990", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A class which provides numerous methods to interact with discord slash commands.\n          \n          \n            \n             * A class which provides numerous methods to interact with Discord slash commands.", "author": "mdcfe", "createdAt": "2021-06-26T21:07:52Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides numerous methods to interact with discord slash commands.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java\nindex 048e539a8..2412b032d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides numerous methods to interact with discord slash commands.\n+ * A class which provides numerous methods to interact with Discord slash commands.\n  */\n public interface InteractionController {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDAxMw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224013", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Registers the given slash command with discord.\n          \n          \n            \n                 * Registers the given slash command with Discord.", "author": "mdcfe", "createdAt": "2021-06-26T21:08:05Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides numerous methods to interact with discord slash commands.\n+ */\n+public interface InteractionController {\n+    /**\n+     * Gets the command with the given name or null if no command by that name exists.\n+     * @param name The name of the command.\n+     * @return The {@link InteractionCommand command} by the given name, or null.\n+     */\n+    InteractionCommand getCommand(String name);\n+\n+    /**\n+     * Registers the given slash command with discord.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java\nindex 048e539a8..2412b032d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionController.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides numerous methods to interact with discord slash commands.\n+ * A class which provides numerous methods to interact with Discord slash commands.\n  */\n public interface InteractionController {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDE3Mw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224173", "bodyText": "Creates or appends...?", "author": "mdcfe", "createdAt": "2021-06-26T21:09:37Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides information about what triggered an interaction event.\n+ */\n+public interface InteractionEvent {\n+    /**\n+     * Creates/Appends the initial response message.\n+     * @param message The message to append.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\nindex 2541d54dd..ec13f275d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides information about what triggered an interaction event.\n+ * Represents a triggered interaction event.\n  */\n public interface InteractionEvent {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDE5Ng==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224196", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A class which provides information about what triggered an interaction event.\n          \n          \n            \n             * Represents a triggered interaction event.", "author": "mdcfe", "createdAt": "2021-06-26T21:09:58Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides information about what triggered an interaction event.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\nindex 2541d54dd..ec13f275d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides information about what triggered an interaction event.\n+ * Represents a triggered interaction event.\n  */\n public interface InteractionEvent {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDUzNQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224535", "bodyText": "I wouldn't expect getIntegerArgument to return a Long in Java, maybe getNumberArgument or getNumericalArgument?", "author": "mdcfe", "createdAt": "2021-06-26T21:13:41Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides information about what triggered an interaction event.\n+ */\n+public interface InteractionEvent {\n+    /**\n+     * Creates/Appends the initial response message.\n+     * @param message The message to append.\n+     */\n+    void reply(String message);\n+\n+    /**\n+     * Gets the member which caused this event.\n+     * @return the member which caused the event.\n+     */\n+    InteractionMember getMember();\n+\n+    /**\n+     * Helper method to get the String representation of the argument by the given key or null if none by that key is present.\n+     * @param key The key of the argument to lookup.\n+     * @return the string value or null.\n+     */\n+    String getStringArgument(String key);\n+\n+    /**\n+     * Helper method to get the Long representation of the argument by the given key or null if none by that key is present.\n+     * @param key The key of the argument to lookup.\n+     * @return the long value or null\n+     */\n+    Long getIntegerArgument(String key);", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzMzcwNw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659233707", "bodyText": "This is most likely from Discord's stupid naming which treats/names it as an Integer while in reality it is more a Long.\nSee 2nd-last point in this Gist's section\n\n\nThe INTEGER type is always 53 bit precision (which would be a long in java)", "author": "Andre601", "createdAt": "2021-06-26T22:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTI2MDE5MQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659260191", "bodyText": "andre is correct here, discord calls longs integers and when you register a command, the argument type is even called an INTEGER", "author": "JRoy", "createdAt": "2021-06-27T04:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\nindex 2541d54dd..ec13f275d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides information about what triggered an interaction event.\n+ * Represents a triggered interaction event.\n  */\n public interface InteractionEvent {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDY4NA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224684", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Helper method to get the String representation of the argument by the given key or null if none by that key is present.\n          \n          \n            \n                 * Get the value of the argument matching the given key represented as a String, or null if no argument by that name is present. \n          \n      \n    \n    \n  \n\nDitto for other methods", "author": "mdcfe", "createdAt": "2021-06-26T21:15:22Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides information about what triggered an interaction event.\n+ */\n+public interface InteractionEvent {\n+    /**\n+     * Creates/Appends the initial response message.\n+     * @param message The message to append.\n+     */\n+    void reply(String message);\n+\n+    /**\n+     * Gets the member which caused this event.\n+     * @return the member which caused the event.\n+     */\n+    InteractionMember getMember();\n+\n+    /**\n+     * Helper method to get the String representation of the argument by the given key or null if none by that key is present.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\nindex 2541d54dd..ec13f275d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides information about what triggered an interaction event.\n+ * Represents a triggered interaction event.\n  */\n public interface InteractionEvent {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDczNQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the channel id where this interaction occurred.\n          \n          \n            \n                 * @return the channel id.\n          \n          \n            \n                 * Gets the channel ID where this interaction occurred.\n          \n          \n            \n                 * @return the channel ID.", "author": "mdcfe", "createdAt": "2021-06-26T21:15:46Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides information about what triggered an interaction event.\n+ */\n+public interface InteractionEvent {\n+    /**\n+     * Creates/Appends the initial response message.\n+     * @param message The message to append.\n+     */\n+    void reply(String message);\n+\n+    /**\n+     * Gets the member which caused this event.\n+     * @return the member which caused the event.\n+     */\n+    InteractionMember getMember();\n+\n+    /**\n+     * Helper method to get the String representation of the argument by the given key or null if none by that key is present.\n+     * @param key The key of the argument to lookup.\n+     * @return the string value or null.\n+     */\n+    String getStringArgument(String key);\n+\n+    /**\n+     * Helper method to get the Long representation of the argument by the given key or null if none by that key is present.\n+     * @param key The key of the argument to lookup.\n+     * @return the long value or null\n+     */\n+    Long getIntegerArgument(String key);\n+\n+    /**\n+     * Helper method to get the Boolean representation of the argument by the given key or null if none by that key is present.\n+     * @param key The key of the argument to lookup.\n+     * @return the boolean value or null\n+     */\n+    Boolean getBooleanArgument(String key);\n+\n+    /**\n+     * Helper method to get the user representation of the argument by the given key or null if none by that key is present.\n+     * @param key The key of the argument to lookup.\n+     * @return the user value or null\n+     */\n+    InteractionMember getUserArgument(String key);\n+\n+    /**\n+     * Helper method to get the channel representation of the argument by the given key or null if none by that key is present.\n+     * @param key The key of the argument to lookup.\n+     * @return the channel value or null\n+     */\n+    InteractionChannel getChannelArgument(String key);\n+\n+    /**\n+     * Gets the channel id where this interaction occurred.\n+     * @return the channel id.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\nindex 2541d54dd..ec13f275d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides information about what triggered an interaction event.\n+ * Represents a triggered interaction event.\n  */\n public interface InteractionEvent {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDc1Mg==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224752", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Thrown when an error occurs during an operation dealing with discord interactions.\n          \n          \n            \n             * Thrown when an error occurs during an operation dealing with Discord interactions.", "author": "mdcfe", "createdAt": "2021-06-26T21:16:01Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionException.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * Thrown when an error occurs during an operation dealing with discord interactions.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionException.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionException.java\nindex 5d55ffd57..34f9d70a2 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionException.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionException.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * Thrown when an error occurs during an operation dealing with discord interactions.\n+ * Thrown when an error occurs during an operation dealing with Discord interactions.\n  */\n public class InteractionException extends Exception {\n     public InteractionException(String message) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDgyMA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224820", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the id of this member.\n          \n          \n            \n                 * @return this member's id.\n          \n          \n            \n                 * Gets the ID of this member.\n          \n          \n            \n                 * @return this member's ID.", "author": "mdcfe", "createdAt": "2021-06-26T21:16:53Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Represents the interaction command executor as a guild member.\n+ */\n+public interface InteractionMember {\n+    /**\n+     * Gets the username of this member.\n+     * @return this member's username.\n+     */\n+    String getName();\n+\n+    /**\n+     * Gets the four numbers after the {@code #} in the member's username.\n+     * @return this member's discriminator.\n+     */\n+    String getDiscriminator();\n+\n+    /**\n+     * Gets this member's tag and discriminator split by a {@code #}.\n+     * @return this member's tag.\n+     */\n+    default String getTag() {\n+        return getName() + \"#\" + getDiscriminator();\n+    }\n+\n+    /**\n+     * Gets the nickname of this member or their username if they don't have one.\n+     * @return this member's nickname or username if none is present.\n+     */\n+    String getEffectiveName();\n+\n+    /**\n+     * Gets the id of this member.\n+     * @return this member's id.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\nindex ba0444a7b..f4e6ae588 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\n\n@@ -34,8 +34,8 @@ public interface InteractionMember {\n     String getEffectiveName();\n \n     /**\n-     * Gets the id of this member.\n-     * @return this member's id.\n+     * Gets the ID of this member.\n+     * @return this member's ID.\n      */\n     String getId();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDgzMg==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224832", "bodyText": "Would there be a use for a nullable getNickname method too?", "author": "mdcfe", "createdAt": "2021-06-26T21:17:28Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Represents the interaction command executor as a guild member.\n+ */\n+public interface InteractionMember {\n+    /**\n+     * Gets the username of this member.\n+     * @return this member's username.\n+     */\n+    String getName();\n+\n+    /**\n+     * Gets the four numbers after the {@code #} in the member's username.\n+     * @return this member's discriminator.\n+     */\n+    String getDiscriminator();\n+\n+    /**\n+     * Gets this member's tag and discriminator split by a {@code #}.\n+     * @return this member's tag.\n+     */\n+    default String getTag() {\n+        return getName() + \"#\" + getDiscriminator();\n+    }\n+\n+    /**\n+     * Gets the nickname of this member or their username if they don't have one.\n+     * @return this member's nickname or username if none is present.\n+     */\n+    String getEffectiveName();", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\nindex ba0444a7b..f4e6ae588 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\n\n@@ -34,8 +34,8 @@ public interface InteractionMember {\n     String getEffectiveName();\n \n     /**\n-     * Gets the id of this member.\n-     * @return this member's id.\n+     * Gets the ID of this member.\n+     * @return this member's ID.\n      */\n     String getId();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDkwOA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Unstable methods that vary with our implementation.\n          \n          \n            \n             * Unstable methods that may vary with our implementation.", "author": "mdcfe", "createdAt": "2021-06-26T21:18:11Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import net.dv8tion.jda.api.JDA;\n+\n+/**\n+ * Unstable methods that vary with our implementation.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java\nindex aa33d5ae9..08aba8196 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java\n\n@@ -3,12 +3,12 @@ package net.essentialsx.api.v2.services.discord;\n import net.dv8tion.jda.api.JDA;\n \n /**\n- * Unstable methods that vary with our implementation.\n+ * Unstable methods that may vary with our implementation.\n  * These methods have no guarantee of remaining consistent and may change at any time.\n  */\n public interface Unsafe {\n     /**\n-     * Gets the JDA instance associated with this EssentialsXDiscord instance, if available.\n+     * Gets the JDA instance associated with this EssentialsX Discord instance, if available.\n      * @return the {@link JDA} instance or null if not ready.\n      */\n     JDA getJDAInstance();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNDkzNw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659224937", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the JDA instance associated with this EssentialsXDiscord instance, if available.\n          \n          \n            \n                 * Gets the JDA instance associated with this EssentialsX Discord instance, if available.", "author": "mdcfe", "createdAt": "2021-06-26T21:18:18Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import net.dv8tion.jda.api.JDA;\n+\n+/**\n+ * Unstable methods that vary with our implementation.\n+ * These methods have no guarantee of remaining consistent and may change at any time.\n+ */\n+public interface Unsafe {\n+    /**\n+     * Gets the JDA instance associated with this EssentialsXDiscord instance, if available.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java\nindex aa33d5ae9..08aba8196 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/Unsafe.java\n\n@@ -3,12 +3,12 @@ package net.essentialsx.api.v2.services.discord;\n import net.dv8tion.jda.api.JDA;\n \n /**\n- * Unstable methods that vary with our implementation.\n+ * Unstable methods that may vary with our implementation.\n  * These methods have no guarantee of remaining consistent and may change at any time.\n  */\n public interface Unsafe {\n     /**\n-     * Gets the JDA instance associated with this EssentialsXDiscord instance, if available.\n+     * Gets the JDA instance associated with this EssentialsX Discord instance, if available.\n      * @return the {@link JDA} instance or null if not ready.\n      */\n     JDA getJDAInstance();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNTIyMw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659225223", "bodyText": "If we rename to DiscordService then this might be better as JDADiscordService", "author": "mdcfe", "createdAt": "2021-06-26T21:21:36Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/discord/EssentialsJDA.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package net.essentialsx.discord;\n+\n+import club.minnced.discord.webhook.WebhookClient;\n+import club.minnced.discord.webhook.WebhookClientBuilder;\n+import club.minnced.discord.webhook.send.WebhookMessage;\n+import club.minnced.discord.webhook.send.WebhookMessageBuilder;\n+import com.earth2me.essentials.utils.FormatUtil;\n+import net.dv8tion.jda.api.JDA;\n+import net.dv8tion.jda.api.JDABuilder;\n+import net.dv8tion.jda.api.entities.Guild;\n+import net.dv8tion.jda.api.entities.TextChannel;\n+import net.dv8tion.jda.api.entities.Webhook;\n+import net.dv8tion.jda.api.hooks.EventListener;\n+import net.essentialsx.api.v2.events.discord.DiscordMessageEvent;\n+import net.essentialsx.api.v2.services.discord.EssentialsDiscordAPI;\n+import net.essentialsx.api.v2.services.discord.InteractionController;\n+import net.essentialsx.api.v2.services.discord.InteractionException;\n+import net.essentialsx.api.v2.services.discord.Unsafe;\n+import net.essentialsx.discord.interactions.InteractionControllerImpl;\n+import net.essentialsx.discord.interactions.commands.ExecuteCommand;\n+import net.essentialsx.discord.interactions.commands.ListCommand;\n+import net.essentialsx.discord.interactions.commands.MessageCommand;\n+import net.essentialsx.discord.listeners.BukkitListener;\n+import net.essentialsx.discord.listeners.DiscordCommandDispatcher;\n+import net.essentialsx.discord.listeners.DiscordListener;\n+import net.essentialsx.discord.util.ConsoleInjector;\n+import net.essentialsx.discord.util.DiscordUtil;\n+import org.bukkit.Bukkit;\n+import org.bukkit.event.HandlerList;\n+import org.bukkit.plugin.ServicePriority;\n+\n+import javax.security.auth.login.LoginException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public class EssentialsJDA implements EssentialsDiscordAPI {", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f6bfbc3b09e4882c82c15279ccd954970703f28", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/discord/EssentialsJDA.java b/EssentialsDiscord/src/main/java/net/essentialsx/discord/JDADiscordService.java\nsimilarity index 97%\nrename from EssentialsDiscord/src/main/java/net/essentialsx/discord/EssentialsJDA.java\nrename to EssentialsDiscord/src/main/java/net/essentialsx/discord/JDADiscordService.java\nindex 4a18626cb..9db4d4aa4 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/discord/EssentialsJDA.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/discord/JDADiscordService.java\n\n@@ -12,7 +12,7 @@ import net.dv8tion.jda.api.entities.TextChannel;\n import net.dv8tion.jda.api.entities.Webhook;\n import net.dv8tion.jda.api.hooks.EventListener;\n import net.essentialsx.api.v2.events.discord.DiscordMessageEvent;\n-import net.essentialsx.api.v2.services.discord.EssentialsDiscordAPI;\n+import net.essentialsx.api.v2.services.discord.DiscordService;\n import net.essentialsx.api.v2.services.discord.InteractionController;\n import net.essentialsx.api.v2.services.discord.InteractionException;\n import net.essentialsx.api.v2.services.discord.Unsafe;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNTM4Nw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659225387", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.warning(batchRegistrationQueue.size() + \" discord commands were lost during command registration!\");\n          \n          \n            \n                                logger.warning(batchRegistrationQueue.size() + \" Discord commands were lost during command registration!\");", "author": "mdcfe", "createdAt": "2021-06-26T21:22:55Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package net.essentialsx.discord.interactions;\n+\n+import net.dv8tion.jda.api.events.interaction.SlashCommandEvent;\n+import net.dv8tion.jda.api.exceptions.ErrorResponseException;\n+import net.dv8tion.jda.api.hooks.ListenerAdapter;\n+import net.dv8tion.jda.api.interactions.commands.Command;\n+import net.dv8tion.jda.api.interactions.commands.OptionType;\n+import net.dv8tion.jda.api.interactions.commands.build.CommandData;\n+import net.dv8tion.jda.api.requests.ErrorResponse;\n+import net.essentialsx.api.v2.services.discord.InteractionCommand;\n+import net.essentialsx.api.v2.services.discord.InteractionCommandArgument;\n+import net.essentialsx.api.v2.services.discord.InteractionController;\n+import net.essentialsx.api.v2.services.discord.InteractionEvent;\n+import net.essentialsx.api.v2.services.discord.InteractionException;\n+import net.essentialsx.discord.EssentialsJDA;\n+import net.essentialsx.discord.util.DiscordUtil;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public class InteractionControllerImpl extends ListenerAdapter implements InteractionController {\n+    private final static Logger logger = Logger.getLogger(\"EssentialsDiscord\");\n+\n+    private final EssentialsJDA jda;\n+\n+    private final Map<String, InteractionCommand> commandMap = new ConcurrentHashMap<>();\n+    private final Map<String, InteractionCommand> batchRegistrationQueue = new HashMap<>();\n+    private boolean initialBatchRegistration = false;\n+\n+    public InteractionControllerImpl(EssentialsJDA jda) {\n+        this.jda = jda;\n+        jda.getJda().addEventListener(this);\n+    }\n+\n+    @Override\n+    public void onSlashCommand(@NotNull SlashCommandEvent event) {\n+        if (event.getGuild() == null || event.getMember() == null || !commandMap.containsKey(event.getName())) {\n+            return;\n+        }\n+\n+        final InteractionCommand command = commandMap.get(event.getName());\n+\n+        if (command.isDisabled()) {\n+            event.reply(tl(\"discordErrorCommandDisabled\")).setEphemeral(true).queue();\n+            return;\n+        }\n+\n+        event.deferReply(command.isEphemeral()).queue(null, failure -> logger.log(Level.SEVERE, \"Error while deferring discord command\", failure));\n+\n+        final InteractionEvent interactionEvent = new InteractionEventImpl(event);\n+        if (!DiscordUtil.hasRoles(event.getMember(), jda.getSettings().getCommandSnowflakes(command.getName()))) {\n+            interactionEvent.reply(tl(\"noAccessCommand\"));\n+            return;\n+        }\n+        jda.getPlugin().getEss().scheduleSyncDelayedTask(() -> command.onCommand(interactionEvent));\n+    }\n+\n+    @Override\n+    public InteractionCommand getCommand(String name) {\n+        return commandMap.get(name);\n+    }\n+\n+    public void processBatchRegistration() {\n+        if (!initialBatchRegistration && !batchRegistrationQueue.isEmpty()) {\n+            initialBatchRegistration = true;\n+            final List<CommandData> list = new ArrayList<>();\n+            for (final InteractionCommand command : batchRegistrationQueue.values()) {\n+                final CommandData data = new CommandData(command.getName(), command.getDescription());\n+                if (command.getArguments() != null) {\n+                    for (final InteractionCommandArgument argument : command.getArguments()) {\n+                        data.addOption(OptionType.valueOf(argument.getType().name()), argument.getName(), argument.getDescription(), argument.isRequired());\n+                    }\n+                }\n+                list.add(data);\n+            }\n+\n+            jda.getGuild().updateCommands().addCommands(list).queue(success -> {\n+                for (final Command command : success) {\n+                    commandMap.put(command.getName(), batchRegistrationQueue.get(command.getName()));\n+                    batchRegistrationQueue.remove(command.getName());\n+                    if (jda.isDebug()) {\n+                        logger.info(\"Registered guild command \" + command.getName() + \" with id \" + command.getId());\n+                    }\n+                }\n+\n+                if (!batchRegistrationQueue.isEmpty()) {\n+                    logger.warning(batchRegistrationQueue.size() + \" discord commands were lost during command registration!\");", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java b/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java\nindex d36fcd8bd..89d402fc5 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java\n\n@@ -92,7 +92,7 @@ public class InteractionControllerImpl extends ListenerAdapter implements Intera\n                 }\n \n                 if (!batchRegistrationQueue.isEmpty()) {\n-                    logger.warning(batchRegistrationQueue.size() + \" discord commands were lost during command registration!\");\n+                    logger.warning(batchRegistrationQueue.size() + \" Discord commands were lost during command registration!\");\n                     if (jda.isDebug()) {\n                         logger.warning(\"Lost commands: \" + batchRegistrationQueue.keySet());\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNTUzNA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659225534", "bodyText": "Translate?", "author": "mdcfe", "createdAt": "2021-06-26T21:25:01Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/commands/MessageCommand.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package net.essentialsx.discord.interactions.commands;\n+\n+import com.earth2me.essentials.User;\n+import com.earth2me.essentials.commands.PlayerNotFoundException;\n+import com.earth2me.essentials.utils.FormatUtil;\n+import net.essentialsx.api.v2.services.discord.InteractionCommandArgument;\n+import net.essentialsx.api.v2.services.discord.InteractionCommandArgumentType;\n+import net.essentialsx.api.v2.services.discord.InteractionEvent;\n+import net.essentialsx.discord.EssentialsJDA;\n+import net.essentialsx.discord.interactions.InteractionCommandImpl;\n+import net.essentialsx.discord.util.DiscordMessageRecipient;\n+import org.bukkit.Bukkit;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public class MessageCommand extends InteractionCommandImpl {\n+    public MessageCommand(EssentialsJDA jda) {\n+        super(jda, \"msg\", \"Messages a player on the Minecraft Server.\");\n+        addArgument(new InteractionCommandArgument(\"username\", \"The player to send the message to\", InteractionCommandArgumentType.STRING, true));\n+        addArgument(new InteractionCommandArgument(\"message\", \"The message to send to the player\", InteractionCommandArgumentType.STRING, true));", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTI2MDY1Ng==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659260656", "bodyText": "At certain pre-planned points during the rotation of the 3rd planet from the Sun, known as Earth, myself and my companions, will participate in an event known as \"trolling\", where we attempt to trick people into performing certain humorous actions, such as, but not limited to, clicking a World Wide Web link which tricks the viewer into watching the music video for English singer and songwriter Rick Astley's debut single, \"Never Gonna Give You Up\", released on July 27, 1987, which is known as \"Rickrolling\" by Internet users. This prankery can be done ironically as a joke, or to genuinely upset the viewer. But one thing that this trickery does, is make the deceptive person laugh, due to the fact that the victim fell for such a humorous prank. For the victim, the deceptive person, known henceforth as the \"troll\", has done something evil, so vile that it makes the victim yell and/or scream in a fit of rage and then repeatedly smash their face and hands against their computer, possibly breaking hundreds of expensive components. But the troll keeps on laughing, uttering a common phrase used by internet trolls, \"U mad bro?\"", "author": "JRoy", "createdAt": "2021-06-27T04:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNTUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "1f6bfbc3b09e4882c82c15279ccd954970703f28", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/commands/MessageCommand.java b/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/commands/MessageCommand.java\nindex 2c77e49ed..c584db23c 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/commands/MessageCommand.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/commands/MessageCommand.java\n\n@@ -6,7 +6,7 @@ import com.earth2me.essentials.utils.FormatUtil;\n import net.essentialsx.api.v2.services.discord.InteractionCommandArgument;\n import net.essentialsx.api.v2.services.discord.InteractionCommandArgumentType;\n import net.essentialsx.api.v2.services.discord.InteractionEvent;\n-import net.essentialsx.discord.EssentialsJDA;\n+import net.essentialsx.discord.JDADiscordService;\n import net.essentialsx.discord.interactions.InteractionCommandImpl;\n import net.essentialsx.discord.util.DiscordMessageRecipient;\n import org.bukkit.Bukkit;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNTc4MQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659225781", "bodyText": "I hear the guy behind Crafthead is pretty cool", "author": "mdcfe", "createdAt": "2021-06-26T21:28:24Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/discord/listeners/BukkitListener.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package net.essentialsx.discord.listeners;\n+\n+import com.earth2me.essentials.Console;\n+import com.earth2me.essentials.utils.DateUtil;\n+import com.earth2me.essentials.utils.FormatUtil;\n+import net.ess3.api.events.AfkStatusChangeEvent;\n+import net.ess3.api.events.MuteStatusChangeEvent;\n+import net.essentialsx.api.v2.events.AsyncUserDataLoadEvent;\n+import net.essentialsx.api.v2.events.discord.DiscordChatMessageEvent;\n+import net.essentialsx.api.v2.events.discord.DiscordMessageEvent;\n+import net.essentialsx.discord.EssentialsJDA;\n+import net.essentialsx.discord.util.MessageUtil;\n+import org.bukkit.Bukkit;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.PlayerDeathEvent;\n+import org.bukkit.event.player.AsyncPlayerChatEvent;\n+import org.bukkit.event.player.PlayerKickEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+\n+import java.text.MessageFormat;\n+import java.util.UUID;\n+\n+public class BukkitListener implements Listener {\n+    private final static String AVATAR_URL = \"https://crafatar.com/avatars/{uuid}?overlay=true\";", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzNDA4Mw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659234083", "bodyText": "Why not just directly allow to define your own avatar provider?\nConsidering that there are a variety of them to choose from like mc-heads", "author": "Andre601", "createdAt": "2021-06-26T22:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNTc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f6bfbc3b09e4882c82c15279ccd954970703f28", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/discord/listeners/BukkitListener.java b/EssentialsDiscord/src/main/java/net/essentialsx/discord/listeners/BukkitListener.java\nindex 613d12698..a19613d18 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/discord/listeners/BukkitListener.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/discord/listeners/BukkitListener.java\n\n@@ -8,7 +8,7 @@ import net.ess3.api.events.MuteStatusChangeEvent;\n import net.essentialsx.api.v2.events.AsyncUserDataLoadEvent;\n import net.essentialsx.api.v2.events.discord.DiscordChatMessageEvent;\n import net.essentialsx.api.v2.events.discord.DiscordMessageEvent;\n-import net.essentialsx.discord.EssentialsJDA;\n+import net.essentialsx.discord.JDADiscordService;\n import net.essentialsx.discord.util.MessageUtil;\n import org.bukkit.Bukkit;\n import org.bukkit.entity.Player;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNjE0NA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659226144", "bodyText": "Do commands feed back to the sender on Discord (beyond the console channel)? If so, how?", "author": "mdcfe", "createdAt": "2021-06-26T21:32:38Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordCommandSender.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package net.essentialsx.discord.util;\n+\n+import com.earth2me.essentials.utils.FormatUtil;\n+import net.essentialsx.discord.EssentialsJDA;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Server;\n+import org.bukkit.command.ConsoleCommandSender;\n+import org.bukkit.conversations.Conversation;\n+import org.bukkit.conversations.ConversationAbandonedEvent;\n+import org.bukkit.permissions.Permission;\n+import org.bukkit.permissions.PermissionAttachment;\n+import org.bukkit.permissions.PermissionAttachmentInfo;\n+import org.bukkit.plugin.Plugin;\n+import org.bukkit.scheduler.BukkitTask;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.Set;\n+import java.util.UUID;\n+\n+public class DiscordCommandSender implements ConsoleCommandSender {", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTI2MjAwOQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659262009", "bodyText": "Depends on context:\nAs for console command relay, (when console.command-relay is enabled) if you type in the console channel, the bot will reply (discord reply) to the user's message with the command output.\nAs for the slash command, the slash-command will have its response message edited with the command output.\nWhat the two have in common:\nDiscordCommandSender will check every 20ms if 1 second has passed without it receiving a message, if true, it dispatches a message with everything caught in its buffer. After 20 seconds of no messages received, DiscordCommandSender marks itself for garbage collection.", "author": "JRoy", "createdAt": "2021-06-27T04:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNjE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1f6bfbc3b09e4882c82c15279ccd954970703f28", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordCommandSender.java b/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordCommandSender.java\nindex dd58fdf10..442e05d92 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordCommandSender.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordCommandSender.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.discord.util;\n \n import com.earth2me.essentials.utils.FormatUtil;\n-import net.essentialsx.discord.EssentialsJDA;\n+import net.essentialsx.discord.JDADiscordService;\n import org.bukkit.Bukkit;\n import org.bukkit.Server;\n import org.bukkit.command.ConsoleCommandSender;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNjQ2NQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659226465", "bodyText": "Maybe split this into JDAUtil and WebhookUtil since these are largely dependent on those two libraries", "author": "mdcfe", "createdAt": "2021-06-26T21:36:15Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordUtil.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package net.essentialsx.discord.util;\n+\n+import club.minnced.discord.webhook.WebhookClient;\n+import club.minnced.discord.webhook.WebhookClientBuilder;\n+import club.minnced.discord.webhook.send.AllowedMentions;\n+import com.earth2me.essentials.utils.DownsampleUtil;\n+import com.earth2me.essentials.utils.FormatUtil;\n+import com.earth2me.essentials.utils.VersionUtil;\n+import com.google.common.collect.ImmutableList;\n+import net.dv8tion.jda.api.Permission;\n+import net.dv8tion.jda.api.entities.Member;\n+import net.dv8tion.jda.api.entities.Message;\n+import net.dv8tion.jda.api.entities.Role;\n+import net.dv8tion.jda.api.entities.TextChannel;\n+import net.dv8tion.jda.api.entities.Webhook;\n+import okhttp3.OkHttpClient;\n+\n+import java.awt.Color;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+public final class DiscordUtil {", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTI2MjA5Mw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659262093", "bodyText": "These two libraries are both dependent on JDA technically, not worth splitting them.", "author": "JRoy", "createdAt": "2021-06-27T04:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNjQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "490839adee5a86f735c5e818e69002fe44471fed", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordUtil.java b/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordUtil.java\nindex 7925fef88..0daa82c3e 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordUtil.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/DiscordUtil.java\n\n@@ -18,12 +18,14 @@ import okhttp3.OkHttpClient;\n import java.awt.Color;\n import java.util.List;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.function.Consumer;\n \n public final class DiscordUtil {\n     public final static List<Message.MentionType> NO_GROUP_MENTIONS;\n     public final static AllowedMentions ALL_MENTIONS_WEBHOOK = AllowedMentions.all();\n     public final static AllowedMentions NO_GROUP_MENTIONS_WEBHOOK = new AllowedMentions().withParseEveryone(false).withParseRoles(false).withParseUsers(true);\n+    public final static CopyOnWriteArrayList<String> ACTIVE_WEBHOOKS = new CopyOnWriteArrayList<>();\n \n     static {\n         final ImmutableList.Builder<Message.MentionType> types = new ImmutableList.Builder<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIyNjUzOA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659226538", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sanitizes text going to discord of markdown.\n          \n          \n            \n                 * Sanitizes text to be sent to Discord, escaping any Markdown syntax.", "author": "mdcfe", "createdAt": "2021-06-26T21:37:06Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/discord/util/MessageUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.essentialsx.discord.util;\n+\n+import java.text.MessageFormat;\n+\n+public final class MessageUtil {\n+    private MessageUtil() {\n+    }\n+\n+    /**\n+     * Sanitizes text going to discord of markdown.", "originalCommit": "99a4b3ab018d821d7dc3e6713b3099f05db6ff73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/MessageUtil.java b/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/MessageUtil.java\nindex d3293aefb..e84f3f2fb 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/MessageUtil.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/discord/util/MessageUtil.java\n\n@@ -7,7 +7,7 @@ public final class MessageUtil {\n     }\n \n     /**\n-     * Sanitizes text going to discord of markdown.\n+     * Sanitizes text to be sent to Discord, escaping any Markdown syntax.\n      */\n     public static String sanitizeDiscordMarkdown(String message) {\n         if (message == null) {\n"}}, {"oid": "e204522a0379137c2735b2c0cb4469c3639047ae", "url": "https://github.com/EssentialsX/Essentials/commit/e204522a0379137c2735b2c0cb4469c3639047ae", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-26T22:35:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzNDM1MA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659234350", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Helper method to get the Long representation of the argument by the given key or null if none by that key is present.\n          \n          \n            \n                 * Get the Long representation of the argument by the given key or null if none by that key is present.", "author": "JRoy", "createdAt": "2021-06-26T22:47:21Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * A class which provides information about what triggered an interaction event.\n+ */\n+public interface InteractionEvent {\n+    /**\n+     * Creates/Appends the initial response message.\n+     * @param message The message to append.\n+     */\n+    void reply(String message);\n+\n+    /**\n+     * Gets the member which caused this event.\n+     * @return the member which caused the event.\n+     */\n+    InteractionMember getMember();\n+\n+    /**\n+     * Helper method to get the String representation of the argument by the given key or null if none by that key is present.\n+     * @param key The key of the argument to lookup.\n+     * @return the string value or null.\n+     */\n+    String getStringArgument(String key);\n+\n+    /**\n+     * Helper method to get the Long representation of the argument by the given key or null if none by that key is present.", "originalCommit": "e204522a0379137c2735b2c0cb4469c3639047ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\nindex 2541d54dd..ec13f275d 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionEvent.java\n\n@@ -1,7 +1,7 @@\n package net.essentialsx.api.v2.services.discord;\n \n /**\n- * A class which provides information about what triggered an interaction event.\n+ * Represents a triggered interaction event.\n  */\n public interface InteractionEvent {\n     /**\n"}}, {"oid": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "url": "https://github.com/EssentialsX/Essentials/commit/4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "message": "Apply suggestions from code review\n\nCo-authored-by: MD <1917406+mdcfe@users.noreply.github.com>", "committedDate": "2021-06-26T22:54:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzNTY5Mw==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659235693", "bodyText": "Stupid and probably nitpicky question, but doesn't the fact that this is fired before the message is actually send to Discord make it a PreDiscordChatMessageEvent?", "author": "Andre601", "createdAt": "2021-06-26T23:04:16Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordChatMessageEvent.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package net.essentialsx.api.v2.events.discord;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Fired before a chat message is about to be sent to a Discord channel.\n+ * Should be used to block chat messages (such as staff channels) from appearing in Discord.\n+ */\n+public class DiscordChatMessageEvent extends Event implements Cancellable {", "originalCommit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTI1NzI1MA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659257250", "bodyText": "The fact that it is Cancellable implies this itself. For example, AsyncPlayerChatEvent doesn't have a Pre in it even though it's dispatched before the chat message is sent.", "author": "JRoy", "createdAt": "2021-06-27T03:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzNTY5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzNjIyOA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659236228", "bodyText": "Maybe be a bit more clear that it's an event that (at least) extends InteractionEvent?", "author": "Andre601", "createdAt": "2021-06-26T23:11:07Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import java.util.List;\n+\n+/**\n+ * Represents a command to be registered with the Discord client.\n+ */\n+public interface InteractionCommand {\n+    /**\n+     * Whether or not the command has been disabled and should not be registered at the request of the user.\n+     * @return true if the command has been disabled.\n+     */\n+    boolean isDisabled();\n+\n+    /**\n+     * Whether or not the command is ephemeral and if its usage/replies should be private for the user on in discord client.\n+     * @return true if the command is ephemeral.\n+     */\n+    boolean isEphemeral();\n+\n+    /**\n+     * Gets the name of this command as it appears in Discord.\n+     * @return the name of the command.\n+     */\n+    String getName();\n+\n+    /**\n+     * Gets the brief description of the command as it appears in Discord.\n+     * @return the description of the command.\n+     */\n+    String getDescription();\n+\n+    /**\n+     * Gets the list of arguments registered to this command.\n+     * <p>\n+     * Note: Arguments can only be registered before the command itself is registered, others will be ignored.\n+     * @return the list of arguments.\n+     */\n+    List<InteractionCommandArgument> getArguments();\n+\n+    /**\n+     * Called when an interaction command is received from Discord.\n+     * @param event The event which caused this command to be executed.", "originalCommit": "4edd62e4a7cfeb89c90ebcc9babed2a5420508fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzNjQ0Mg==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659236442", "bodyText": "...? The parameter's type in the method signature tells you this.", "author": "mdcfe", "createdAt": "2021-06-26T23:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzNjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzNzQ4Mg==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659237482", "bodyText": "I mean sure... But still not 100% clear imo when you only go from Javadoc comments themself. But it's up to you after all.", "author": "Andre601", "createdAt": "2021-06-26T23:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTIzNjIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "938c9f6b4152d75e4a9200d3679da1f989aae687", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\nindex eb982c7fc..23a71026c 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\n\n@@ -40,7 +40,7 @@ public interface InteractionCommand {\n \n     /**\n      * Called when an interaction command is received from Discord.\n-     * @param event The event which caused this command to be executed.\n+     * @param event The {@link InteractionEvent} which caused this command to be executed.\n      */\n     void onCommand(InteractionEvent event);\n }\n"}}, {"oid": "938c9f6b4152d75e4a9200d3679da1f989aae687", "url": "https://github.com/EssentialsX/Essentials/commit/938c9f6b4152d75e4a9200d3679da1f989aae687", "message": "lul", "committedDate": "2021-06-27T03:49:19Z", "type": "commit"}, {"oid": "de58a35666e085a3cae4b12b71b36189f0f9fd7c", "url": "https://github.com/EssentialsX/Essentials/commit/de58a35666e085a3cae4b12b71b36189f0f9fd7c", "message": "Improve indentation of config message variables", "committedDate": "2021-06-27T04:03:02Z", "type": "commit"}, {"oid": "d60b8bea99b0063197eff0155e1ef22c62f0b0dc", "url": "https://github.com/EssentialsX/Essentials/commit/d60b8bea99b0063197eff0155e1ef22c62f0b0dc", "message": "messages.properties changes", "committedDate": "2021-06-27T04:09:39Z", "type": "commit"}, {"oid": "7a96843279f3ee5e9e83c947d810ed5ce908a630", "url": "https://github.com/EssentialsX/Essentials/commit/7a96843279f3ee5e9e83c947d810ed5ce908a630", "message": "Group mention changes", "committedDate": "2021-06-27T04:12:24Z", "type": "commit"}, {"oid": "1f6bfbc3b09e4882c82c15279ccd954970703f28", "url": "https://github.com/EssentialsX/Essentials/commit/1f6bfbc3b09e4882c82c15279ccd954970703f28", "message": "Rename EssentialsDiscordAPI to DiscordService", "committedDate": "2021-06-27T04:20:43Z", "type": "commit"}, {"oid": "b596b70ee3ba21490df82f4a7bfbd41b33bff85e", "url": "https://github.com/EssentialsX/Essentials/commit/b596b70ee3ba21490df82f4a7bfbd41b33bff85e", "message": "Clarify InteractionEvent#reply javadoc", "committedDate": "2021-06-27T04:28:12Z", "type": "commit"}, {"oid": "1c7bdb37186226ea2e6bc8e7f323963e2bd1bdb5", "url": "https://github.com/EssentialsX/Essentials/commit/1c7bdb37186226ea2e6bc8e7f323963e2bd1bdb5", "message": "Add InteractionMember#getNickname", "committedDate": "2021-06-27T04:30:53Z", "type": "commit"}, {"oid": "a95e8ce525e0296b918aaf6cc343c433c6fe3a9c", "url": "https://github.com/EssentialsX/Essentials/commit/a95e8ce525e0296b918aaf6cc343c433c6fe3a9c", "message": "Translations for message command", "committedDate": "2021-06-27T04:35:44Z", "type": "commit"}, {"oid": "3a0603928e58931140e7750214ea7bc7c2e51b0f", "url": "https://github.com/EssentialsX/Essentials/commit/3a0603928e58931140e7750214ea7bc7c2e51b0f", "message": "Use crafthead over crafatar", "committedDate": "2021-06-27T04:38:11Z", "type": "commit"}, {"oid": "f878989b9be9fcd86fac1888f31694a4f400660e", "url": "https://github.com/EssentialsX/Essentials/commit/f878989b9be9fcd86fac1888f31694a4f400660e", "message": "Add DiscordService#sendMessage", "committedDate": "2021-06-27T14:35:59Z", "type": "commit"}, {"oid": "74c73d599d3269144053d798cb045aa0a48aef1b", "url": "https://github.com/EssentialsX/Essentials/commit/74c73d599d3269144053d798cb045aa0a48aef1b", "message": "Add DiscordService#registerMessageType", "committedDate": "2021-06-27T15:04:04Z", "type": "commit"}, {"oid": "9ba4410f0359f5132f808a2f8a8bb013cdda9d3e", "url": "https://github.com/EssentialsX/Essentials/commit/9ba4410f0359f5132f808a2f8a8bb013cdda9d3e", "message": "Allow for console command relay to be configured without restarting", "committedDate": "2021-06-27T15:09:44Z", "type": "commit"}, {"oid": "474d9d4d81ce9bbc2c2faed5e8da4961c0014116", "url": "https://github.com/EssentialsX/Essentials/commit/474d9d4d81ce9bbc2c2faed5e8da4961c0014116", "message": "Improve shutdown logic\n\nEnsures we're fully shutdown before allowing Bukkit to start closing the plugin", "committedDate": "2021-06-27T15:46:56Z", "type": "commit"}, {"oid": "242ed0cf2b4e005f1fc5f11b008e114d9b5626a0", "url": "https://github.com/EssentialsX/Essentials/commit/242ed0cf2b4e005f1fc5f11b008e114d9b5626a0", "message": "Add TownyChat hook example", "committedDate": "2021-06-27T15:53:52Z", "type": "commit"}, {"oid": "99fe04735fbc621b087702e99a82bd885c24fe4f", "url": "https://github.com/EssentialsX/Essentials/commit/99fe04735fbc621b087702e99a82bd885c24fe4f", "message": "md missed this :o", "committedDate": "2021-06-27T16:09:36Z", "type": "commit"}, {"oid": "651d216e08ab55fe19112b69df2656d1ddd74435", "url": "https://github.com/EssentialsX/Essentials/commit/651d216e08ab55fe19112b69df2656d1ddd74435", "message": "Add debug print for explicit-set check", "committedDate": "2021-06-27T23:32:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTM5Njg1NA==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r659396854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets this member's tag and discriminator split by a {@code #}.\n          \n          \n            \n                 * Gets this member's name and discriminator split by a {@code #}.", "author": "pop4959", "createdAt": "2021-06-28T00:09:22Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Represents the interaction command executor as a guild member.\n+ */\n+public interface InteractionMember {\n+    /**\n+     * Gets the username of this member.\n+     * @return this member's username.\n+     */\n+    String getName();\n+\n+    /**\n+     * Gets the four numbers after the {@code #} in the member's username.\n+     * @return this member's discriminator.\n+     */\n+    String getDiscriminator();\n+\n+    /**\n+     * Gets this member's tag and discriminator split by a {@code #}.", "originalCommit": "651d216e08ab55fe19112b69df2656d1ddd74435", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9242e1a04f5d6b113e54b7b9ed6cc46e947ed760", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\nindex 7a1dd922d..0858dc45b 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\n\n@@ -20,7 +20,7 @@ public interface InteractionMember {\n     String getDiscriminator();\n \n     /**\n-     * Gets this member's tag and discriminator split by a {@code #}.\n+     * Gets this member's name and discriminator split by a {@code #}.\n      * @return this member's tag.\n      */\n     default String getTag() {\n"}}, {"oid": "9242e1a04f5d6b113e54b7b9ed6cc46e947ed760", "url": "https://github.com/EssentialsX/Essentials/commit/9242e1a04f5d6b113e54b7b9ed6cc46e947ed760", "message": "Apply suggestions from code review\n\nCo-authored-by: pop4959 <pop4959@gmail.com>", "committedDate": "2021-06-28T15:49:22Z", "type": "commit"}, {"oid": "dd4411c7e45afefe03c8a32626ffdbbe1a8d8a78", "url": "https://github.com/EssentialsX/Essentials/commit/dd4411c7e45afefe03c8a32626ffdbbe1a8d8a78", "message": "Pop message changes", "committedDate": "2021-06-28T16:47:26Z", "type": "commit"}, {"oid": "25bdc8a2e7595948a2836ce88d96e36230979315", "url": "https://github.com/EssentialsX/Essentials/commit/25bdc8a2e7595948a2836ce88d96e36230979315", "message": "Fix regression in msg replies from 9fa1a4e596383d2c85c1947fcd95cddccccb5eb8", "committedDate": "2021-06-28T17:03:28Z", "type": "commit"}, {"oid": "490839adee5a86f735c5e818e69002fe44471fed", "url": "https://github.com/EssentialsX/Essentials/commit/490839adee5a86f735c5e818e69002fe44471fed", "message": "Add show-bot-messages & show-webhook-messages options", "committedDate": "2021-06-28T18:22:27Z", "type": "commit"}, {"oid": "ea815a090d4e183e7dd34a8969f6b3443ca897ac", "url": "https://github.com/EssentialsX/Essentials/commit/ea815a090d4e183e7dd34a8969f6b3443ca897ac", "message": "Merge remote-tracking branch 'upstream/module/discord' into module/discord", "committedDate": "2021-06-28T18:22:54Z", "type": "commit"}, {"oid": "7592eb814ef4366c5851092f3229d3baac7dd364", "url": "https://github.com/EssentialsX/Essentials/commit/7592eb814ef4366c5851092f3229d3baac7dd364", "message": "Add application id for clarity", "committedDate": "2021-06-28T18:42:52Z", "type": "commit"}, {"oid": "7d98351b4c5b6ed59ccb6a5cd8450707eccd77b0", "url": "https://github.com/EssentialsX/Essentials/commit/7d98351b4c5b6ed59ccb6a5cd8450707eccd77b0", "message": "pepeW", "committedDate": "2021-06-28T18:45:29Z", "type": "commit"}, {"oid": "6b8bad11cdfba0f78196bdc619e4068080feef92", "url": "https://github.com/EssentialsX/Essentials/commit/6b8bad11cdfba0f78196bdc619e4068080feef92", "message": "Fix component forwarding with DiscordCommandSender", "committedDate": "2021-06-28T20:40:02Z", "type": "commit"}, {"oid": "567b98097d46406262ee63b78b0ce352a72f36dd", "url": "https://github.com/EssentialsX/Essentials/commit/567b98097d46406262ee63b78b0ce352a72f36dd", "message": "Update EssentialsDiscord/src/main/java/net/essentialsx/api/v2/events/discord/DiscordMessageEvent.java", "committedDate": "2021-06-29T13:41:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDA1NDg3Mg==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r660054872", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Whether or not the command is ephemeral and if its usage/replies should be private for the user on in discord client.\n          \n          \n            \n                 * Whether or not the command is ephemeral and if its usage/replies should be private for the user on in Discord client.", "author": "mdcfe", "createdAt": "2021-06-28T19:22:19Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import java.util.List;\n+\n+/**\n+ * Represents a command to be registered with the Discord client.\n+ */\n+public interface InteractionCommand {\n+    /**\n+     * Whether or not the command has been disabled and should not be registered at the request of the user.\n+     * @return true if the command has been disabled.\n+     */\n+    boolean isDisabled();\n+\n+    /**\n+     * Whether or not the command is ephemeral and if its usage/replies should be private for the user on in discord client.", "originalCommit": "7d98351b4c5b6ed59ccb6a5cd8450707eccd77b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f99ed5fffba34d4966b540b4178dff55b524cbb", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\nindex 23a71026c..b082f9ba5 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionCommand.java\n\n@@ -13,7 +13,7 @@ public interface InteractionCommand {\n     boolean isDisabled();\n \n     /**\n-     * Whether or not the command is ephemeral and if its usage/replies should be private for the user on in discord client.\n+     * Whether or not the command is ephemeral and if its usage/replies should be private for the user on in Discord client.\n      * @return true if the command is ephemeral.\n      */\n     boolean isEphemeral();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDA1NTA1Ng==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r660055056", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if this member has the administrator permission on discord.\n          \n          \n            \n                 * Checks if this member has the administrator permission on Discord.", "author": "mdcfe", "createdAt": "2021-06-28T19:22:37Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Represents the interaction command executor as a guild member.\n+ */\n+public interface InteractionMember {\n+    /**\n+     * Gets the username of this member.\n+     * @return this member's username.\n+     */\n+    String getName();\n+\n+    /**\n+     * Gets the four numbers after the {@code #} in the member's username.\n+     * @return this member's discriminator.\n+     */\n+    String getDiscriminator();\n+\n+    /**\n+     * Gets this member's name and discriminator split by a {@code #}.\n+     * @return this member's tag.\n+     */\n+    default String getTag() {\n+        return getName() + \"#\" + getDiscriminator();\n+    }\n+\n+    /**\n+     * Gets the nickname of this member or their username if they don't have one.\n+     * @return this member's nickname or username if none is present.\n+     */\n+    String getEffectiveName();\n+\n+    /**\n+     * Gets the nickname of this member or null if they do not have one.\n+     * @return this member's nickname or null.\n+     */\n+    String getNickname();\n+\n+    /**\n+     * Gets the ID of this member.\n+     * @return this member's ID.\n+     */\n+    String getId();\n+\n+    /**\n+     * Checks if this member has the administrator permission on discord.", "originalCommit": "7d98351b4c5b6ed59ccb6a5cd8450707eccd77b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f99ed5fffba34d4966b540b4178dff55b524cbb", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\nindex 0858dc45b..afe741487 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/InteractionMember.java\n\n@@ -46,7 +46,7 @@ public interface InteractionMember {\n     String getId();\n \n     /**\n-     * Checks if this member has the administrator permission on discord.\n+     * Checks if this member has the administrator permission on Discord.\n      * @return true if this user has administrative permissions.\n      */\n     boolean isAdmin();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDA1NTgxMQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r660055811", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    event.deferReply(command.isEphemeral()).queue(null, failure -> logger.log(Level.SEVERE, \"Error while deferring discord command\", failure));\n          \n          \n            \n                    event.deferReply(command.isEphemeral()).queue(null, failure -> logger.log(Level.SEVERE, \"Error while deferring Discord command\", failure));", "author": "mdcfe", "createdAt": "2021-06-28T19:23:58Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package net.essentialsx.discord.interactions;\n+\n+import net.dv8tion.jda.api.events.interaction.SlashCommandEvent;\n+import net.dv8tion.jda.api.exceptions.ErrorResponseException;\n+import net.dv8tion.jda.api.hooks.ListenerAdapter;\n+import net.dv8tion.jda.api.interactions.commands.Command;\n+import net.dv8tion.jda.api.interactions.commands.OptionType;\n+import net.dv8tion.jda.api.interactions.commands.build.CommandData;\n+import net.dv8tion.jda.api.requests.ErrorResponse;\n+import net.essentialsx.api.v2.services.discord.InteractionCommand;\n+import net.essentialsx.api.v2.services.discord.InteractionCommandArgument;\n+import net.essentialsx.api.v2.services.discord.InteractionController;\n+import net.essentialsx.api.v2.services.discord.InteractionEvent;\n+import net.essentialsx.api.v2.services.discord.InteractionException;\n+import net.essentialsx.discord.JDADiscordService;\n+import net.essentialsx.discord.util.DiscordUtil;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static com.earth2me.essentials.I18n.tl;\n+\n+public class InteractionControllerImpl extends ListenerAdapter implements InteractionController {\n+    private final static Logger logger = Logger.getLogger(\"EssentialsDiscord\");\n+\n+    private final JDADiscordService jda;\n+\n+    private final Map<String, InteractionCommand> commandMap = new ConcurrentHashMap<>();\n+    private final Map<String, InteractionCommand> batchRegistrationQueue = new HashMap<>();\n+    private boolean initialBatchRegistration = false;\n+\n+    public InteractionControllerImpl(JDADiscordService jda) {\n+        this.jda = jda;\n+        jda.getJda().addEventListener(this);\n+    }\n+\n+    @Override\n+    public void onSlashCommand(@NotNull SlashCommandEvent event) {\n+        if (event.getGuild() == null || event.getMember() == null || !commandMap.containsKey(event.getName())) {\n+            return;\n+        }\n+\n+        final InteractionCommand command = commandMap.get(event.getName());\n+\n+        if (command.isDisabled()) {\n+            event.reply(tl(\"discordErrorCommandDisabled\")).setEphemeral(true).queue();\n+            return;\n+        }\n+\n+        event.deferReply(command.isEphemeral()).queue(null, failure -> logger.log(Level.SEVERE, \"Error while deferring discord command\", failure));", "originalCommit": "7d98351b4c5b6ed59ccb6a5cd8450707eccd77b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f99ed5fffba34d4966b540b4178dff55b524cbb", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java b/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java\nindex 665270840..c5c9150bc 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/discord/interactions/InteractionControllerImpl.java\n\n@@ -53,7 +53,7 @@ public class InteractionControllerImpl extends ListenerAdapter implements Intera\n             return;\n         }\n \n-        event.deferReply(command.isEphemeral()).queue(null, failure -> logger.log(Level.SEVERE, \"Error while deferring discord command\", failure));\n+        event.deferReply(command.isEphemeral()).queue(null, failure -> logger.log(Level.SEVERE, \"Error while deferring Discord command\", failure));\n \n         final InteractionEvent interactionEvent = new InteractionEventImpl(event);\n         if (!DiscordUtil.hasRoles(event.getMember(), jda.getSettings().getCommandSnowflakes(command.getName()))) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDYzNDIzMQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r660634231", "bodyText": "An invalid message type shouldn't be usable anywhere anyway - probably better to validate on construction rather than registration.", "author": "mdcfe", "createdAt": "2021-06-29T13:47:10Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/MessageType.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package net.essentialsx.api.v2.services.discord;\n+\n+/**\n+ * Indicates the type of message being sent and its literal channel name used in the config.\n+ */\n+public final class MessageType {\n+    private final String key;\n+    private final boolean player;\n+\n+    /**\n+     * Creates a {@link MessageType} which will send channels to the specified channel key.\n+     * <p>\n+     * The message type key may only contain: lowercase letters, numbers, and dashes.", "originalCommit": "567b98097d46406262ee63b78b0ce352a72f36dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0209e26ae095f974694e1819118ef7416a67f9e1", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/MessageType.java b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/MessageType.java\nindex 296e41756..9c17c8655 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/MessageType.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/api/v2/services/discord/MessageType.java\n\n@@ -21,6 +21,9 @@ public final class MessageType {\n      * Internal constructor used by EssentialsX Discord\n      */\n     private MessageType(String key, boolean player) {\n+        if (!key.matches(\"^[a-z0-9-]*$\")) {\n+            throw new IllegalArgumentException(\"Key must match \\\"^[a-z0-9-]*$\\\"\");\n+        }\n         this.key = key;\n         this.player = player;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDYzNTQxMQ==", "url": "https://github.com/EssentialsX/Essentials/pull/3844#discussion_r660635411", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return config.getString(\"console.webhook-name\", \"Essentials Console Relay\");\n          \n          \n            \n                    return config.getString(\"console.webhook-name\", \"EssentialsX Console Relay\");", "author": "mdcfe", "createdAt": "2021-06-29T13:48:23Z", "path": "EssentialsDiscord/src/main/java/net/essentialsx/discord/DiscordSettings.java", "diffHunk": "@@ -120,7 +128,7 @@ public MessageFormat getConsoleFormat() {\n     }\n \n     public String getConsoleWebhookName() {\n-        return config.getString(\"console.webhook-name\", \"EssX Console Relay\");\n+        return config.getString(\"console.webhook-name\", \"Essentials Console Relay\");", "originalCommit": "567b98097d46406262ee63b78b0ce352a72f36dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f99ed5fffba34d4966b540b4178dff55b524cbb", "chunk": "diff --git a/EssentialsDiscord/src/main/java/net/essentialsx/discord/DiscordSettings.java b/EssentialsDiscord/src/main/java/net/essentialsx/discord/DiscordSettings.java\nindex 2ab85f9ec..78d3ad7fe 100644\n--- a/EssentialsDiscord/src/main/java/net/essentialsx/discord/DiscordSettings.java\n+++ b/EssentialsDiscord/src/main/java/net/essentialsx/discord/DiscordSettings.java\n\n@@ -128,7 +128,7 @@ public class DiscordSettings implements IConf {\n     }\n \n     public String getConsoleWebhookName() {\n-        return config.getString(\"console.webhook-name\", \"Essentials Console Relay\");\n+        return config.getString(\"console.webhook-name\", \"EssentialsX Console Relay\");\n     }\n \n     public boolean isConsoleCommandRelay() {\n"}}, {"oid": "1f99ed5fffba34d4966b540b4178dff55b524cbb", "url": "https://github.com/EssentialsX/Essentials/commit/1f99ed5fffba34d4966b540b4178dff55b524cbb", "message": "Apply suggestions from code review\n\nCo-authored-by: MD <1917406+mdcfe@users.noreply.github.com>", "committedDate": "2021-06-29T14:12:54Z", "type": "commit"}, {"oid": "0209e26ae095f974694e1819118ef7416a67f9e1", "url": "https://github.com/EssentialsX/Essentials/commit/0209e26ae095f974694e1819118ef7416a67f9e1", "message": "Validate message type key on constructor creation", "committedDate": "2021-06-29T14:14:46Z", "type": "commit"}, {"oid": "17533c8efa36af4d37aaa5fb658069baa605b423", "url": "https://github.com/EssentialsX/Essentials/commit/17533c8efa36af4d37aaa5fb658069baa605b423", "message": "Merge remote-tracking branch 'upstream/module/discord' into module/discord", "committedDate": "2021-06-29T14:14:58Z", "type": "commit"}, {"oid": "54d48766589818772a2fcf645401342174e96893", "url": "https://github.com/EssentialsX/Essentials/commit/54d48766589818772a2fcf645401342174e96893", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-06-29T14:16:43Z", "type": "commit"}, {"oid": "dfa0ecd603b6df7bd09982b03cac0b122c7db11e", "url": "https://github.com/EssentialsX/Essentials/commit/dfa0ecd603b6df7bd09982b03cac0b122c7db11e", "message": "Update tutorial link", "committedDate": "2021-07-01T13:36:02Z", "type": "commit"}, {"oid": "e5090824bb4ee943a0d7e764bc1d4b47f0d32082", "url": "https://github.com/EssentialsX/Essentials/commit/e5090824bb4ee943a0d7e764bc1d4b47f0d32082", "message": "Third time's a charm?", "committedDate": "2020-12-19T05:04:30Z", "type": "commit"}, {"oid": "043e82c0e74c6c72f0e3a13e4386c29394b78385", "url": "https://github.com/EssentialsX/Essentials/commit/043e82c0e74c6c72f0e3a13e4386c29394b78385", "message": "Few events, extremely alpha!", "committedDate": "2020-12-19T05:20:55Z", "type": "commit"}, {"oid": "c25ee445d52d3c08eb15fc673c468872055be86f", "url": "https://github.com/EssentialsX/Essentials/commit/c25ee445d52d3c08eb15fc673c468872055be86f", "message": "Merge branch '2.x' into module/discord", "committedDate": "2020-12-24T16:11:41Z", "type": "commit"}, {"oid": "ec07584d29af6c579a0a5cf3c74254a15b40b54f", "url": "https://github.com/EssentialsX/Essentials/commit/ec07584d29af6c579a0a5cf3c74254a15b40b54f", "message": "Add EssentialsDiscord to Commandessentials version mismatch checker", "committedDate": "2020-12-24T16:22:07Z", "type": "commit"}, {"oid": "091423bef483052a498dcef0317c0802636aeb4a", "url": "https://github.com/EssentialsX/Essentials/commit/091423bef483052a498dcef0317c0802636aeb4a", "message": "Add net.essentialsx to checkstyle suppression filter", "committedDate": "2020-12-24T21:09:54Z", "type": "commit"}, {"oid": "8d0afca83dd778a1284662dbc3e798d02a15c000", "url": "https://github.com/EssentialsX/Essentials/commit/8d0afca83dd778a1284662dbc3e798d02a15c000", "message": "Fix codestyle comment violations", "committedDate": "2020-12-24T21:10:17Z", "type": "commit"}, {"oid": "fe444dc514acb8a1c1fd1c88bcc366c16307b928", "url": "https://github.com/EssentialsX/Essentials/commit/fe444dc514acb8a1c1fd1c88bcc366c16307b928", "message": "Exclude opus from JDA\n\nWe don't use audio stuff", "committedDate": "2020-12-24T21:17:20Z", "type": "commit"}, {"oid": "0d55dcea486dc51df6bc51b296d29a4ce2c1c51d", "url": "https://github.com/EssentialsX/Essentials/commit/0d55dcea486dc51df6bc51b296d29a4ce2c1c51d", "message": "Add support for competing activity type", "committedDate": "2020-12-24T21:17:31Z", "type": "commit"}, {"oid": "912cc62b8f9e5a549091fe36d7de7ae1366b48c1", "url": "https://github.com/EssentialsX/Essentials/commit/912cc62b8f9e5a549091fe36d7de7ae1366b48c1", "message": "Fix build setup", "committedDate": "2020-12-24T22:33:06Z", "type": "commit"}, {"oid": "756e925ac3ac7767acd0771f6c566549fdd0b53b", "url": "https://github.com/EssentialsX/Essentials/commit/756e925ac3ac7767acd0771f6c566549fdd0b53b", "message": "Strip formatting from messages sent to Discord", "committedDate": "2020-12-24T22:34:06Z", "type": "commit"}, {"oid": "4c992b6eecaabbc21742203060099b9a50a61e3e", "url": "https://github.com/EssentialsX/Essentials/commit/4c992b6eecaabbc21742203060099b9a50a61e3e", "message": "Strip formatting before sending DiscordMessageEvent", "committedDate": "2020-12-24T23:14:54Z", "type": "commit"}, {"oid": "9503345507f8ef0806264bf007955109b7d664b4", "url": "https://github.com/EssentialsX/Essentials/commit/9503345507f8ef0806264bf007955109b7d664b4", "message": "Progress n' docs (It works)", "committedDate": "2020-12-25T07:14:25Z", "type": "commit"}, {"oid": "66a8cb97a892dd408a8e8c499bb94c00d0c96eff", "url": "https://github.com/EssentialsX/Essentials/commit/66a8cb97a892dd408a8e8c499bb94c00d0c96eff", "message": "Rename messages to message-types in config", "committedDate": "2020-12-26T21:08:58Z", "type": "commit"}, {"oid": "b708041d2505b730a780177b2b2345d7937a9e0b", "url": "https://github.com/EssentialsX/Essentials/commit/b708041d2505b730a780177b2b2345d7937a9e0b", "message": "Rework presence config + parsing", "committedDate": "2020-12-27T05:37:13Z", "type": "commit"}, {"oid": "86929373bdd866a43b0375792300b272f5e98117", "url": "https://github.com/EssentialsX/Essentials/commit/86929373bdd866a43b0375792300b272f5e98117", "message": "Initial start at custom message system", "committedDate": "2020-12-28T05:24:36Z", "type": "commit"}, {"oid": "eb81fe0765030bef92fce981ecab7c7b2d1c249b", "url": "https://github.com/EssentialsX/Essentials/commit/eb81fe0765030bef92fce981ecab7c7b2d1c249b", "message": "Parse attachment links in game", "committedDate": "2020-12-29T04:34:24Z", "type": "commit"}, {"oid": "2b8d93ddb419c2530473d9104d3d1a04c2bdcf02", "url": "https://github.com/EssentialsX/Essentials/commit/2b8d93ddb419c2530473d9104d3d1a04c2bdcf02", "message": "Add proper emoji parsing", "committedDate": "2020-12-29T05:48:52Z", "type": "commit"}, {"oid": "80785999738b0505fdf37254b84cb8e91f973c64", "url": "https://github.com/EssentialsX/Essentials/commit/80785999738b0505fdf37254b84cb8e91f973c64", "message": "Allow color codes to be sent from discord by certain roles", "committedDate": "2020-12-29T06:47:51Z", "type": "commit"}, {"oid": "9bc710bd5066c9e4db8038e56409536ceb80a067", "url": "https://github.com/EssentialsX/Essentials/commit/9bc710bd5066c9e4db8038e56409536ceb80a067", "message": "Filter role/here/everyone mentions from chat\n\nPeople with `essentials.discord.ping` can bypass this", "committedDate": "2020-12-29T18:35:36Z", "type": "commit"}, {"oid": "a9747aac6880d4337012aece4dd4b59efc5f4999", "url": "https://github.com/EssentialsX/Essentials/commit/a9747aac6880d4337012aece4dd4b59efc5f4999", "message": "Move DiscordMessageEvent to net.essentialsx.api.v2.discord.events", "committedDate": "2020-12-29T20:26:48Z", "type": "commit"}, {"oid": "8d2af67e8eb04c3ee6395236516ac7c68bd775ee", "url": "https://github.com/EssentialsX/Essentials/commit/8d2af67e8eb04c3ee6395236516ac7c68bd775ee", "message": "Add format for mc->discord", "committedDate": "2020-12-30T01:26:51Z", "type": "commit"}, {"oid": "027fecef8b107082becd9fe2486d5dde93762704", "url": "https://github.com/EssentialsX/Essentials/commit/027fecef8b107082becd9fe2486d5dde93762704", "message": "Add format for mutes", "committedDate": "2020-12-30T04:07:28Z", "type": "commit"}, {"oid": "be0d7da0c5788953c745ceae687cb40090fb8a30", "url": "https://github.com/EssentialsX/Essentials/commit/be0d7da0c5788953c745ceae687cb40090fb8a30", "message": "Finish remainder of bukkit messages", "committedDate": "2020-12-30T05:10:56Z", "type": "commit"}, {"oid": "3ae1e047960611eb22c51468f824583513915cc7", "url": "https://github.com/EssentialsX/Essentials/commit/3ae1e047960611eb22c51468f824583513915cc7", "message": "Add metrics", "committedDate": "2020-12-30T14:39:50Z", "type": "commit"}, {"oid": "eace9bf7ae7d6f5d50f3d9ccbd5e7f17415c61ad", "url": "https://github.com/EssentialsX/Essentials/commit/eace9bf7ae7d6f5d50f3d9ccbd5e7f17415c61ad", "message": "Add console logger", "committedDate": "2020-12-31T04:39:40Z", "type": "commit"}, {"oid": "c56b8077f6fe6e6346949c02796edc9f5415bd68", "url": "https://github.com/EssentialsX/Essentials/commit/c56b8077f6fe6e6346949c02796edc9f5415bd68", "message": "Add framework for sending console commands\n\nThis will ideally be moved to slash commands but this is a lose framework of a\nTextChannel-reply based solution", "committedDate": "2020-12-31T05:30:51Z", "type": "commit"}, {"oid": "680312e19933873eb0160f58c095e0ccea48d3c3", "url": "https://github.com/EssentialsX/Essentials/commit/680312e19933873eb0160f58c095e0ccea48d3c3", "message": "Merge branch '2.x' into module/discord", "committedDate": "2020-12-31T05:50:36Z", "type": "commit"}, {"oid": "96b20cc76782c878d41c3773ee1fe4e0ba16a8fa", "url": "https://github.com/EssentialsX/Essentials/commit/96b20cc76782c878d41c3773ee1fe4e0ba16a8fa", "message": "Add config option for webhook name", "committedDate": "2020-12-31T06:22:50Z", "type": "commit"}, {"oid": "5fb7e04a423c256fa4852a286ca0bb5b8d7c3009", "url": "https://github.com/EssentialsX/Essentials/commit/5fb7e04a423c256fa4852a286ca0bb5b8d7c3009", "message": "Sanitize discord markdown from chat messages", "committedDate": "2020-12-31T06:33:55Z", "type": "commit"}, {"oid": "8d1c6f82b2e57b0bb142c30000ea04b9bf197a94", "url": "https://github.com/EssentialsX/Essentials/commit/8d1c6f82b2e57b0bb142c30000ea04b9bf197a94", "message": "Add `essentials.discord.markdown` permission to bypass markdown filter", "committedDate": "2020-12-31T06:40:10Z", "type": "commit"}, {"oid": "a32961569b55c792c6afe4b87678ac17452dbe85", "url": "https://github.com/EssentialsX/Essentials/commit/a32961569b55c792c6afe4b87678ac17452dbe85", "message": "Delay join messages to allow user data to load correctly", "committedDate": "2021-01-02T22:14:06Z", "type": "commit"}, {"oid": "82b4e46b95a79dd0b011fc18762413f114b5157a", "url": "https://github.com/EssentialsX/Essentials/commit/82b4e46b95a79dd0b011fc18762413f114b5157a", "message": "Move blank message check down", "committedDate": "2021-01-02T22:23:21Z", "type": "commit"}, {"oid": "a28a271e1220469c59869ea97fc28c4d4c763d28", "url": "https://github.com/EssentialsX/Essentials/commit/a28a271e1220469c59869ea97fc28c4d4c763d28", "message": "Add setting to restrict max discord message length", "committedDate": "2021-01-02T23:12:21Z", "type": "commit"}, {"oid": "9dd38c22a6fad1a393e700fc112a4ef6d105d57f", "url": "https://github.com/EssentialsX/Essentials/commit/9dd38c22a6fad1a393e700fc112a4ef6d105d57f", "message": "Filter newlines from discord", "committedDate": "2021-01-02T23:24:27Z", "type": "commit"}, {"oid": "585c3cad08d01ac9fd768b07f1ecb04f994bdd15", "url": "https://github.com/EssentialsX/Essentials/commit/585c3cad08d01ac9fd768b07f1ecb04f994bdd15", "message": "Check permissions before sending messages", "committedDate": "2021-01-03T22:23:08Z", "type": "commit"}, {"oid": "6c8046c34c5304de0c5d1f4c7c2ee8940b2dfdd1", "url": "https://github.com/EssentialsX/Essentials/commit/6c8046c34c5304de0c5d1f4c7c2ee8940b2dfdd1", "message": "Add slash command support (#3918)", "committedDate": "2021-01-18T02:13:51Z", "type": "commit"}, {"oid": "48167547016f7c832165770449803d6805c25bd1", "url": "https://github.com/EssentialsX/Essentials/commit/48167547016f7c832165770449803d6805c25bd1", "message": "Docs LOL\n\nStill need polish, am tired, save me", "committedDate": "2021-01-18T07:39:00Z", "type": "commit"}, {"oid": "55237fcf8a35514e5a1341bf7f75333de2bde821", "url": "https://github.com/EssentialsX/Essentials/commit/55237fcf8a35514e5a1341bf7f75333de2bde821", "message": "Discord Markdown :/", "committedDate": "2021-01-18T07:40:23Z", "type": "commit"}, {"oid": "126830eeb62927124b2cddb6fd334c5d303bd43a", "url": "https://github.com/EssentialsX/Essentials/commit/126830eeb62927124b2cddb6fd334c5d303bd43a", "message": "Finish initial setup docs", "committedDate": "2021-01-21T03:43:54Z", "type": "commit"}, {"oid": "5b1123de74cedf40113a0cb06a4c4af21a3f9103", "url": "https://github.com/EssentialsX/Essentials/commit/5b1123de74cedf40113a0cb06a4c4af21a3f9103", "message": "Console Relay Docs", "committedDate": "2021-01-21T05:18:12Z", "type": "commit"}, {"oid": "6172163399d0877c5957bf930806df3013896139", "url": "https://github.com/EssentialsX/Essentials/commit/6172163399d0877c5957bf930806df3013896139", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-01-21T13:33:05Z", "type": "commit"}, {"oid": "d26d1a2540b32a8670634cd24c85696cb1dd6678", "url": "https://github.com/EssentialsX/Essentials/commit/d26d1a2540b32a8670634cd24c85696cb1dd6678", "message": "Fix message format for console message not being respected", "committedDate": "2021-01-21T15:04:55Z", "type": "commit"}, {"oid": "9665b7b3a3524d4f2d07b899f226d968e64ab310", "url": "https://github.com/EssentialsX/Essentials/commit/9665b7b3a3524d4f2d07b899f226d968e64ab310", "message": "Make discord administrators have all role permissions", "committedDate": "2021-01-21T15:07:54Z", "type": "commit"}, {"oid": "ccc966f636c8bdf128b209d64aacbe8d7ab0efaa", "url": "https://github.com/EssentialsX/Essentials/commit/ccc966f636c8bdf128b209d64aacbe8d7ab0efaa", "message": "Finish Console Docs", "committedDate": "2021-01-21T15:51:13Z", "type": "commit"}, {"oid": "d4ce30464fc20cc88788216fa2328579c91bfa77", "url": "https://github.com/EssentialsX/Essentials/commit/d4ce30464fc20cc88788216fa2328579c91bfa77", "message": "Configuring Messages Docs", "committedDate": "2021-01-22T06:02:59Z", "type": "commit"}, {"oid": "bf78c6e78741b1308e78cef7c8112edca367c845", "url": "https://github.com/EssentialsX/Essentials/commit/bf78c6e78741b1308e78cef7c8112edca367c845", "message": "You do not know what you're doing, I know what you're doing and I will tell you", "committedDate": "2021-01-22T18:30:18Z", "type": "commit"}, {"oid": "ad7768023cf0f44cca8a2c21827b76c1f35a9ed4", "url": "https://github.com/EssentialsX/Essentials/commit/ad7768023cf0f44cca8a2c21827b76c1f35a9ed4", "message": "ahaha i need to stash this away", "committedDate": "2021-01-23T23:12:22Z", "type": "commit"}, {"oid": "8c1d9896495b1b86c86d8dfcbe1b21318001c76c", "url": "https://github.com/EssentialsX/Essentials/commit/8c1d9896495b1b86c86d8dfcbe1b21318001c76c", "message": "Merge branch '2.x' into module/discord\n\n# Conflicts:\n#\tEssentials/src/main/java/com/earth2me/essentials/Essentials.java", "committedDate": "2021-01-26T01:25:03Z", "type": "commit"}, {"oid": "fe9ddc429695d7a572d8eaf9d09213b15ac3abcb", "url": "https://github.com/EssentialsX/Essentials/commit/fe9ddc429695d7a572d8eaf9d09213b15ac3abcb", "message": "Discord commands config docs", "committedDate": "2021-01-26T03:52:28Z", "type": "commit"}, {"oid": "38504c1d504fcdeca754f0f06aa8ba9b8e9c6fbd", "url": "https://github.com/EssentialsX/Essentials/commit/38504c1d504fcdeca754f0f06aa8ba9b8e9c6fbd", "message": "Finished Docs PagMan", "committedDate": "2021-01-26T04:23:30Z", "type": "commit"}, {"oid": "2585607a49b63d9e79f41e6717b0c806e33c4f93", "url": "https://github.com/EssentialsX/Essentials/commit/2585607a49b63d9e79f41e6717b0c806e33c4f93", "message": "Newline", "committedDate": "2021-01-26T04:24:44Z", "type": "commit"}, {"oid": "86f2000e2f716b2e6dca2801efadc7c26fdcc881", "url": "https://github.com/EssentialsX/Essentials/commit/86f2000e2f716b2e6dca2801efadc7c26fdcc881", "message": "Run isPermissionSet check for receiving chat messages", "committedDate": "2021-01-26T04:35:16Z", "type": "commit"}, {"oid": "89916361352c5fab747eec32d38c9d4e601e47cc", "url": "https://github.com/EssentialsX/Essentials/commit/89916361352c5fab747eec32d38c9d4e601e47cc", "message": "Add error for missing command scope", "committedDate": "2021-01-26T16:25:04Z", "type": "commit"}, {"oid": "49825e50f8aa4e0e9be51c356cbf3764fb7b5d25", "url": "https://github.com/EssentialsX/Essentials/commit/49825e50f8aa4e0e9be51c356cbf3764fb7b5d25", "message": "Add error for deleted console webhook", "committedDate": "2021-01-26T20:15:19Z", "type": "commit"}, {"oid": "f27b9846d98a03dc87b251518715292e2e6b31e7", "url": "https://github.com/EssentialsX/Essentials/commit/f27b9846d98a03dc87b251518715292e2e6b31e7", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-02-15T15:48:36Z", "type": "commit"}, {"oid": "c6c77fb29ff7a4361cfabbdb0cfb78aea0281e80", "url": "https://github.com/EssentialsX/Essentials/commit/c6c77fb29ff7a4361cfabbdb0cfb78aea0281e80", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-02-21T04:08:22Z", "type": "commit"}, {"oid": "bccb261e94d6dd96da8aa611ab4a78bfa3d48b77", "url": "https://github.com/EssentialsX/Essentials/commit/bccb261e94d6dd96da8aa611ab4a78bfa3d48b77", "message": "Change default mc->discord message", "committedDate": "2021-02-24T22:55:53Z", "type": "commit"}, {"oid": "0a842dc74e7f91c71c81e01aabf32151346f134d", "url": "https://github.com/EssentialsX/Essentials/commit/0a842dc74e7f91c71c81e01aabf32151346f134d", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-03-04T18:21:01Z", "type": "commit"}, {"oid": "0c09bfb3b18659f2f410a21404ac020e559b6819", "url": "https://github.com/EssentialsX/Essentials/commit/0c09bfb3b18659f2f410a21404ac020e559b6819", "message": "Prevent use of custom status as they are no supported for bots", "committedDate": "2021-03-04T18:26:19Z", "type": "commit"}, {"oid": "661829974c1519a0e30eed2fcb2bc06a9fa3e283", "url": "https://github.com/EssentialsX/Essentials/commit/661829974c1519a0e30eed2fcb2bc06a9fa3e283", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-03-06T23:38:20Z", "type": "commit"}, {"oid": "e8841f70c8a1c263cedff146ea274d96da094f1b", "url": "https://github.com/EssentialsX/Essentials/commit/e8841f70c8a1c263cedff146ea274d96da094f1b", "message": "Use AsyncUserDataLoadEvent to send join messages", "committedDate": "2021-03-07T00:01:45Z", "type": "commit"}, {"oid": "1494ad278071dd4480e60394ed03ab9dac46e755", "url": "https://github.com/EssentialsX/Essentials/commit/1494ad278071dd4480e60394ed03ab9dac46e755", "message": "Make AsyncUserDataLoadEvent use the actual join message (or none in silent join)", "committedDate": "2021-03-07T15:13:22Z", "type": "commit"}, {"oid": "d435cc984cddecd1be67b3bf79cbd80fe8feb71e", "url": "https://github.com/EssentialsX/Essentials/commit/d435cc984cddecd1be67b3bf79cbd80fe8feb71e", "message": "Respect silent quit messages", "committedDate": "2021-03-07T15:13:53Z", "type": "commit"}, {"oid": "6634014b05403b438a4c04796591a28abc7ead4d", "url": "https://github.com/EssentialsX/Essentials/commit/6634014b05403b438a4c04796591a28abc7ead4d", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-03-08T23:40:53Z", "type": "commit"}, {"oid": "0f53879a53019a554394980d90076c781c28e386", "url": "https://github.com/EssentialsX/Essentials/commit/0f53879a53019a554394980d90076c781c28e386", "message": "Add link to discord authorization page", "committedDate": "2021-03-09T12:54:05Z", "type": "commit"}, {"oid": "499dbf05923391fc50349676607fe9b314fa291a", "url": "https://github.com/EssentialsX/Essentials/commit/499dbf05923391fc50349676607fe9b314fa291a", "message": "Add option for permission-less environments to always receive primary messages", "committedDate": "2021-03-09T14:05:10Z", "type": "commit"}, {"oid": "1b2841b854dbdd4936f4620c287e16cb8938d505", "url": "https://github.com/EssentialsX/Essentials/commit/1b2841b854dbdd4936f4620c287e16cb8938d505", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-03-19T04:18:06Z", "type": "commit"}, {"oid": "169615eea233f6f6d205fb9fced13fd9ebc7499b", "url": "https://github.com/EssentialsX/Essentials/commit/169615eea233f6f6d205fb9fced13fd9ebc7499b", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-03-24T19:05:56Z", "type": "commit"}, {"oid": "859c14ce32fa9a987968a50d48acc345fc0c3edc", "url": "https://github.com/EssentialsX/Essentials/commit/859c14ce32fa9a987968a50d48acc345fc0c3edc", "message": "Implement discord interaction changes (#4040)", "committedDate": "2021-03-24T19:23:32Z", "type": "commit"}, {"oid": "87124b602aeb5cfce4275938d44085c498001aa5", "url": "https://github.com/EssentialsX/Essentials/commit/87124b602aeb5cfce4275938d44085c498001aa5", "message": "Strip Essentials format from prefix & suffix\n\nSome permissions plugins (*cough* LuckPerms) keep prefixes and suffixes as\nuntranslated color codes causing them to show up in Discord with color codes.", "committedDate": "2021-03-25T11:32:45Z", "type": "commit"}, {"oid": "c2b73c7ae4f88e28413817d138f29387e8bb2b45", "url": "https://github.com/EssentialsX/Essentials/commit/c2b73c7ae4f88e28413817d138f29387e8bb2b45", "message": "Move webhook fetcher to a future based system", "committedDate": "2021-03-25T12:29:52Z", "type": "commit"}, {"oid": "6d5a9dff66fa69995b6fc0f47b33931b6affbdd7", "url": "https://github.com/EssentialsX/Essentials/commit/6d5a9dff66fa69995b6fc0f47b33931b6affbdd7", "message": "Improve performance of console sending", "committedDate": "2021-03-25T12:33:09Z", "type": "commit"}, {"oid": "7db58ee54779adfea198e122692204c5328686e0", "url": "https://github.com/EssentialsX/Essentials/commit/7db58ee54779adfea198e122692204c5328686e0", "message": "Add plugin name to console message", "committedDate": "2021-03-25T13:50:10Z", "type": "commit"}, {"oid": "a7e58732ae016deeede2e552ef36a411ab3b7da5", "url": "https://github.com/EssentialsX/Essentials/commit/a7e58732ae016deeede2e552ef36a411ab3b7da5", "message": "Add config options to show avatar and name for chat messages", "committedDate": "2021-03-25T13:57:57Z", "type": "commit"}, {"oid": "efaa409daa6e421a9b982fdeed39c5280002fefd", "url": "https://github.com/EssentialsX/Essentials/commit/efaa409daa6e421a9b982fdeed39c5280002fefd", "message": "Fix console webhook not surviving /ess reload", "committedDate": "2021-03-25T14:06:07Z", "type": "commit"}, {"oid": "f91b3fe33425cbeb246f2f220d67f00e6ba8617e", "url": "https://github.com/EssentialsX/Essentials/commit/f91b3fe33425cbeb246f2f220d67f00e6ba8617e", "message": "Allow all player-related message types to use advanced avatar/name", "committedDate": "2021-03-25T15:05:48Z", "type": "commit"}, {"oid": "b6d5df5873d7e4d916b7b23a00136fb3346e308a", "url": "https://github.com/EssentialsX/Essentials/commit/b6d5df5873d7e4d916b7b23a00136fb3346e308a", "message": "Add reply support for mc->discord", "committedDate": "2021-03-25T16:33:05Z", "type": "commit"}, {"oid": "c033162a8b2cd61ffec03288430f187cd07f6fc8", "url": "https://github.com/EssentialsX/Essentials/commit/c033162a8b2cd61ffec03288430f187cd07f6fc8", "message": "Bump JDA + Move to their maven repo", "committedDate": "2021-03-26T23:02:04Z", "type": "commit"}, {"oid": "9c3d77eb5829124053b5f199fe1e062fbf844c39", "url": "https://github.com/EssentialsX/Essentials/commit/9c3d77eb5829124053b5f199fe1e062fbf844c39", "message": "Fix broken jackson annotation relocation", "committedDate": "2021-03-26T23:06:56Z", "type": "commit"}, {"oid": "d17c035d878b3e86c537422fe6565e64b6469301", "url": "https://github.com/EssentialsX/Essentials/commit/d17c035d878b3e86c537422fe6565e64b6469301", "message": "Bump JDA", "committedDate": "2021-03-30T02:19:22Z", "type": "commit"}, {"oid": "5c8a64aff47e3f9dd093d77c2d0d3073e21a9f99", "url": "https://github.com/EssentialsX/Essentials/commit/5c8a64aff47e3f9dd093d77c2d0d3073e21a9f99", "message": "Add DiscordSRV to plugin version fetcher", "committedDate": "2021-03-30T02:21:03Z", "type": "commit"}, {"oid": "3dfc723e0bdb9914dd7705048eb49e4ee1c81923", "url": "https://github.com/EssentialsX/Essentials/commit/3dfc723e0bdb9914dd7705048eb49e4ee1c81923", "message": "Dilute pineapple", "committedDate": "2021-03-30T02:25:40Z", "type": "commit"}, {"oid": "605665022a03b0a921bfffe61cc07028cde029f2", "url": "https://github.com/EssentialsX/Essentials/commit/605665022a03b0a921bfffe61cc07028cde029f2", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-04-08T01:40:28Z", "type": "commit"}, {"oid": "0bf8b47258fff59b6176a36f86a8284172fdc21b", "url": "https://github.com/EssentialsX/Essentials/commit/0bf8b47258fff59b6176a36f86a8284172fdc21b", "message": "Sanitize usernames/display names", "committedDate": "2021-04-08T23:59:03Z", "type": "commit"}, {"oid": "73d86c299b84778af0317086a57e379b79b5e40b", "url": "https://github.com/EssentialsX/Essentials/commit/73d86c299b84778af0317086a57e379b79b5e40b", "message": "Allow third-party type creation for DiscordMessageEvent", "committedDate": "2021-04-09T02:13:00Z", "type": "commit"}, {"oid": "9ede48131477b3915c42930a33885f15981fde4e", "url": "https://github.com/EssentialsX/Essentials/commit/9ede48131477b3915c42930a33885f15981fde4e", "message": "Add command registration api", "committedDate": "2021-04-09T04:39:24Z", "type": "commit"}, {"oid": "9fa1a4e596383d2c85c1947fcd95cddccccb5eb8", "url": "https://github.com/EssentialsX/Essentials/commit/9fa1a4e596383d2c85c1947fcd95cddccccb5eb8", "message": "Vastly improve the provided APIs\n\nMake them independent of any JDA api to ensure we can update it as we please", "committedDate": "2021-04-10T02:42:06Z", "type": "commit"}, {"oid": "724507e4e4a319dab6f8cdb4560fe91970f3feff", "url": "https://github.com/EssentialsX/Essentials/commit/724507e4e4a319dab6f8cdb4560fe91970f3feff", "message": "Add PAPI Support", "committedDate": "2021-04-11T03:26:04Z", "type": "commit"}, {"oid": "6502aaec15a4138fdc0c3d80b535a5d40fe8aea9", "url": "https://github.com/EssentialsX/Essentials/commit/6502aaec15a4138fdc0c3d80b535a5d40fe8aea9", "message": "Fix incorrect death format key", "committedDate": "2021-04-11T17:10:24Z", "type": "commit"}, {"oid": "df74f2326a76dda8951c9b9fa12cb41e18ce21c4", "url": "https://github.com/EssentialsX/Essentials/commit/df74f2326a76dda8951c9b9fa12cb41e18ce21c4", "message": "Fix NPE when PAPI was enabled and a format was not in the config", "committedDate": "2021-04-11T18:06:39Z", "type": "commit"}, {"oid": "fc40c22d87977ad6a953a28621689566d927f7fb", "url": "https://github.com/EssentialsX/Essentials/commit/fc40c22d87977ad6a953a28621689566d927f7fb", "message": "Don't send chat messages which are not seen by all people on discord", "committedDate": "2021-04-11T19:07:16Z", "type": "commit"}, {"oid": "f1a7fc944025f6605dc728bc91696e4fa57b9ad9", "url": "https://github.com/EssentialsX/Essentials/commit/f1a7fc944025f6605dc728bc91696e4fa57b9ad9", "message": "Make config punctuation consistent", "committedDate": "2021-04-11T19:13:16Z", "type": "commit"}, {"oid": "a15e56883e22687a941d2c9e1ff4f5a23bbf290b", "url": "https://github.com/EssentialsX/Essentials/commit/a15e56883e22687a941d2c9e1ff4f5a23bbf290b", "message": "Add config option to filter discord messages", "committedDate": "2021-04-11T19:29:10Z", "type": "commit"}, {"oid": "e2aafb158adc3060c34f83974bd93764440cf073", "url": "https://github.com/EssentialsX/Essentials/commit/e2aafb158adc3060c34f83974bd93764440cf073", "message": "Shade slf4j\n\nJDA requires slf4j (sadly) and spigot doesn't provide it!\nWe also cannot relocate it because JDA is JDA.", "committedDate": "2021-04-15T11:57:16Z", "type": "commit"}, {"oid": "4fa940be10519e890432244755687d4678c16d52", "url": "https://github.com/EssentialsX/Essentials/commit/4fa940be10519e890432244755687d4678c16d52", "message": "Fix unnecessary sanitization or usernames", "committedDate": "2021-04-15T14:51:35Z", "type": "commit"}, {"oid": "11c7a425fee7d98e7e85a66ef116384f955c3f30", "url": "https://github.com/EssentialsX/Essentials/commit/11c7a425fee7d98e7e85a66ef116384f955c3f30", "message": "Fix channels not being resolved to the correct definition at all", "committedDate": "2021-04-16T13:12:14Z", "type": "commit"}, {"oid": "81dba0c18a8b2e9279ac0c5525a6d7d96a562ef3", "url": "https://github.com/EssentialsX/Essentials/commit/81dba0c18a8b2e9279ac0c5525a6d7d96a562ef3", "message": "Merge branch '2.x' into module/discord", "committedDate": "2021-04-16T13:15:48Z", "type": "commit"}, {"oid": "70e24e17e0e690f0e85887b49616a565fba0bf69", "url": "https://github.com/EssentialsX/Essentials/commit/70e24e17e0e690f0e85887b49616a565fba0bf69", "message": "Fix raw channel ids not resolving", "committedDate": "2021-04-16T15:01:56Z", "type": "commit"}, {"oid": "a253c95e78ebeb4930978b972ce174246b7ab073", "url": "https://github.com/EssentialsX/Essentials/commit/a253c95e78ebeb4930978b972ce174246b7ab073", "message": "Add some more debugs in DiscordListener", "committedDate": "2021-04-16T15:36:23Z", "type": "commit"}]}