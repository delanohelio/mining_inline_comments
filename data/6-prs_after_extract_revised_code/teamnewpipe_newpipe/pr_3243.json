{"pr_number": 3243, "pr_title": "Show radio icon as uploader avatar in Youtube mixes ", "pr_createdAt": "2020-03-17T17:51:08Z", "pr_url": "https://github.com/TeamNewPipe/NewPipe/pull/3243", "timeline": [{"oid": "0341e6a70128e592c2d1586700ca423b4eab0a36", "url": "https://github.com/TeamNewPipe/NewPipe/commit/0341e6a70128e592c2d1586700ca423b4eab0a36", "message": "Add support for INFINITE_ and MORE_THAN_100_ITEMS in playlists", "committedDate": "2020-03-17T20:22:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2NzAyNg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395667026", "bodyText": "I would prefer a switch case here", "author": "XiangRongLin", "createdAt": "2020-03-20T14:19:15Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java", "diffHunk": "@@ -284,8 +285,15 @@ public void handleResult(@NonNull final PlaylistInfo result) {\n \n         imageLoader.displayImage(result.getUploaderAvatarUrl(), headerUploaderAvatar,\n                 ImageDisplayConstants.DISPLAY_AVATAR_OPTIONS);\n-        headerStreamCount.setText(getResources().getQuantityString(R.plurals.videos,\n-                (int) result.getStreamCount(), (int) result.getStreamCount()));\n+\n+        int streamCount = (int) result.getStreamCount();\n+        if (streamCount == PlaylistExtractor.MORE_THAN_100_ITEMS) {", "originalCommit": "0341e6a70128e592c2d1586700ca423b4eab0a36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNzY4Ng==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395837686", "bodyText": "Mmmh you are right", "author": "Stypox", "createdAt": "2020-03-20T19:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2NzAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2MjY4Mg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395862682", "bodyText": "Done, also moved everything to a global localizeStreamCount function that is also used in PlaylistInfoItem and ChannelInfoItem and correctly localizes the item count.", "author": "Stypox", "createdAt": "2020-03-20T19:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2NzAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "9411b8e38590e5f9b429bdbd28e1ecf36afdcf06", "chunk": "diff --git a/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java b/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java\nindex a912465ad..b4a22d6f4 100644\n--- a/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java\n+++ b/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java\n\n@@ -285,15 +286,7 @@ public class PlaylistFragment extends BaseListInfoFragment<PlaylistInfo> {\n \n         imageLoader.displayImage(result.getUploaderAvatarUrl(), headerUploaderAvatar,\n                 ImageDisplayConstants.DISPLAY_AVATAR_OPTIONS);\n-\n-        int streamCount = (int) result.getStreamCount();\n-        if (streamCount == PlaylistExtractor.MORE_THAN_100_ITEMS) {\n-            headerStreamCount.setText(getResources().getString(R.string.playlist_more_than_100_items));\n-        } else if (streamCount == PlaylistExtractor.INFINITE_ITEMS) {\n-            headerStreamCount.setText(getResources().getString(R.string.playlist_infinite_items));\n-        } else {\n-            headerStreamCount.setText(getResources().getQuantityString(R.plurals.videos, streamCount, streamCount));\n-        }\n+        headerStreamCount.setText(Localization.localizeStreamCount(getContext(), result.getStreamCount()));\n \n         if (!result.getErrors().isEmpty()) {\n             showSnackBarError(result.getErrors(), UserAction.REQUESTED_PLAYLIST, NewPipe.getNameOfService(result.getServiceId()), result.getUrl(), 0);\n"}}, {"oid": "9411b8e38590e5f9b429bdbd28e1ecf36afdcf06", "url": "https://github.com/TeamNewPipe/NewPipe/commit/9411b8e38590e5f9b429bdbd28e1ecf36afdcf06", "message": "Detect ITEM_COUNT_* in localizeStreamCount()\n\nITEM_COUNT_INFINITE and ITEM_COUNT_MORE_THAN_100.\nUse localizeStreamCount in PlaylistFragment and PlaylistItemHolder", "committedDate": "2020-03-20T19:57:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjE4MA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395866180", "bodyText": "Here it should say just the count like in my PR. So e.g. \"100+\" instead of \"100+ videos\".", "author": "wb9688", "createdAt": "2020-03-20T20:08:22Z", "path": "app/src/main/java/org/schabi/newpipe/info_list/holder/PlaylistMiniInfoItemHolder.java", "diffHunk": "@@ -36,7 +37,8 @@ public void updateFromItem(final InfoItem infoItem, final HistoryRecordManager h\n         final PlaylistInfoItem item = (PlaylistInfoItem) infoItem;\n \n         itemTitleView.setText(item.getName());\n-        itemStreamCountView.setText(String.valueOf(item.getStreamCount()));\n+        itemStreamCountView.setText(Localization.localizeStreamCount(itemStreamCountView.getContext(),", "originalCommit": "9411b8e38590e5f9b429bdbd28e1ecf36afdcf06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2ODA0Nw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395868047", "bodyText": "No, to keep consistenct, the string should contain \"videos\":\n\"No videos\"\n\"1 video\"\n\"2 videos\"\n...\n\"100+ videos\"\n\"\u221e videos\"", "author": "Stypox", "createdAt": "2020-03-20T20:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2OTY3NQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395869675", "bodyText": "Do you really think there's enough space for that there?", "author": "wb9688", "createdAt": "2020-03-20T20:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3MjMwMQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395872301", "bodyText": "Oh, sorry, that's right ;-)", "author": "Stypox", "createdAt": "2020-03-20T20:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1a278bf2af5932b9d8e5bb18fa63fa8a436e3a6c", "chunk": "diff --git a/app/src/main/java/org/schabi/newpipe/info_list/holder/PlaylistMiniInfoItemHolder.java b/app/src/main/java/org/schabi/newpipe/info_list/holder/PlaylistMiniInfoItemHolder.java\nindex 51910af74..ea5b167d0 100644\n--- a/app/src/main/java/org/schabi/newpipe/info_list/holder/PlaylistMiniInfoItemHolder.java\n+++ b/app/src/main/java/org/schabi/newpipe/info_list/holder/PlaylistMiniInfoItemHolder.java\n\n@@ -27,23 +28,32 @@ public class PlaylistMiniInfoItemHolder extends InfoItemHolder {\n         itemUploaderView = itemView.findViewById(R.id.itemUploaderView);\n     }\n \n-    public PlaylistMiniInfoItemHolder(InfoItemBuilder infoItemBuilder, ViewGroup parent) {\n+    public PlaylistMiniInfoItemHolder(final InfoItemBuilder infoItemBuilder,\n+                                      final ViewGroup parent) {\n         this(infoItemBuilder, R.layout.list_playlist_mini_item, parent);\n     }\n \n     @Override\n-    public void updateFromItem(final InfoItem infoItem, final HistoryRecordManager historyRecordManager) {\n-        if (!(infoItem instanceof PlaylistInfoItem)) return;\n+    public void updateFromItem(final InfoItem infoItem,\n+                               final HistoryRecordManager historyRecordManager) {\n+        if (!(infoItem instanceof PlaylistInfoItem)) {\n+            return;\n+        }\n         final PlaylistInfoItem item = (PlaylistInfoItem) infoItem;\n \n         itemTitleView.setText(item.getName());\n-        itemStreamCountView.setText(Localization.localizeStreamCount(itemStreamCountView.getContext(),\n-                item.getStreamCount()));\n+<<<<<<< HEAD\n+        itemStreamCountView.setText(Localization\n+                .localizeStreamCountMini(itemStreamCountView.getContext(), item.getStreamCount()));\n+=======\n+        itemStreamCountView.setText(Localization.localizeStreamCountMini(\n+                itemStreamCountView.getContext(), item.getStreamCount()));\n+>>>>>>> Use \"mini\" stream count alternatives for info items\n         itemUploaderView.setText(item.getUploaderName());\n \n         itemBuilder.getImageLoader()\n                 .displayImage(item.getThumbnailUrl(), itemThumbnailView,\n-                \t\tImageDisplayConstants.DISPLAY_THUMBNAIL_OPTIONS);\n+                        ImageDisplayConstants.DISPLAY_THUMBNAIL_OPTIONS);\n \n         itemView.setOnClickListener(view -> {\n             if (itemBuilder.getOnPlaylistSelectedListener() != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjQ1Mg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395866452", "bodyText": "Why are you casting to int?", "author": "wb9688", "createdAt": "2020-03-20T20:09:01Z", "path": "app/src/main/java/org/schabi/newpipe/util/Localization.java", "diffHunk": "@@ -145,7 +148,14 @@ public static String localizeViewCount(Context context, long viewCount) {\n     }\n \n     public static String localizeStreamCount(Context context, long streamCount) {\n-        return getQuantity(context, R.plurals.videos, R.string.no_videos, streamCount, localizeNumber(context, streamCount));\n+        switch ((int) streamCount) {", "originalCommit": "9411b8e38590e5f9b429bdbd28e1ecf36afdcf06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2ODI3NQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395868275", "bodyText": "Because Java switch does not allow the usage of long", "author": "Stypox", "createdAt": "2020-03-20T20:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3NTEzNA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395875134", "bodyText": "Then just use an if, as this would cause issues when the streamCount is e.g. 4294967294.", "author": "wb9688", "createdAt": "2020-03-20T20:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NDY5MQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395884691", "bodyText": "Yeah but I don't think a stream count can reach 2^31 - 1 or  2147483647 or 2*10^10, that's really big. Also, it would be pointless to prevent issues here, if streamCount has to be cast to int anyway in order to pass it to getQuantity.", "author": "Stypox", "createdAt": "2020-03-20T20:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NTg3NQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r395885875", "bodyText": "I didn't see getQuantity needed an int, so in that case, that's fine.", "author": "wb9688", "createdAt": "2020-03-20T20:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1a278bf2af5932b9d8e5bb18fa63fa8a436e3a6c", "chunk": "diff --git a/app/src/main/java/org/schabi/newpipe/util/Localization.java b/app/src/main/java/org/schabi/newpipe/util/Localization.java\nindex 0134ec9c2..6011ace88 100644\n--- a/app/src/main/java/org/schabi/newpipe/util/Localization.java\n+++ b/app/src/main/java/org/schabi/newpipe/util/Localization.java\n\n@@ -125,95 +131,125 @@ public class Localization {\n         return Locale.getDefault();\n     }\n \n-    public static String localizeNumber(Context context, long number) {\n+    public static String localizeNumber(final Context context, final long number) {\n         return localizeNumber(context, (double) number);\n     }\n \n-    public static String localizeNumber(Context context, double number) {\n+    public static String localizeNumber(final Context context, final double number) {\n         NumberFormat nf = NumberFormat.getInstance(getAppLocale(context));\n         return nf.format(number);\n     }\n \n-    public static String formatDate(Date date, Context context) {\n+    public static String formatDate(final Date date, final Context context) {\n         return DateFormat.getDateInstance(DateFormat.MEDIUM, getAppLocale(context)).format(date);\n     }\n \n     @SuppressLint(\"StringFormatInvalid\")\n-    public static String localizeUploadDate(Context context, Date date) {\n+    public static String localizeUploadDate(final Context context, final Date date) {\n         return context.getString(R.string.upload_date_text, formatDate(date, context));\n     }\n \n-    public static String localizeViewCount(Context context, long viewCount) {\n-        return getQuantity(context, R.plurals.views, R.string.no_views, viewCount, localizeNumber(context, viewCount));\n+    public static String localizeViewCount(final Context context, final long viewCount) {\n+        return getQuantity(context, R.plurals.views, R.string.no_views, viewCount,\n+                localizeNumber(context, viewCount));\n     }\n \n-    public static String localizeStreamCount(Context context, long streamCount) {\n+    public static String localizeStreamCount(final Context context, final long streamCount) {\n         switch ((int) streamCount) {\n+            case (int) ListExtractor.ITEM_COUNT_UNKNOWN:\n+                return \"\";\n+            case (int) ListExtractor.ITEM_COUNT_INFINITE:\n+                return context.getResources().getString(R.string.infinite_videos);\n             case (int) ListExtractor.ITEM_COUNT_MORE_THAN_100:\n-                return context.getResources().getString(R.string.playlist_more_than_100_items);\n+                return context.getResources().getString(R.string.more_than_100_videos);\n+            default:\n+                return getQuantity(context, R.plurals.videos, R.string.no_videos, streamCount,\n+                        localizeNumber(context, streamCount));\n+        }\n+    }\n+\n+    public static String localizeStreamCountMini(final Context context, final long streamCount) {\n+        switch ((int) streamCount) {\n+            case (int) ListExtractor.ITEM_COUNT_UNKNOWN:\n+                return \"\";\n             case (int) ListExtractor.ITEM_COUNT_INFINITE:\n-                return context.getResources().getString(R.string.playlist_infinite_items);\n+                return context.getResources().getString(R.string.infinite_videos_mini);\n+            case (int) ListExtractor.ITEM_COUNT_MORE_THAN_100:\n+                return context.getResources().getString(R.string.more_than_100_videos_mini);\n             default:\n-                return getQuantity(context, R.plurals.videos, R.string.no_videos, streamCount, localizeNumber(context, streamCount));\n+                return String.valueOf(streamCount);\n         }\n     }\n \n-    public static String localizeWatchingCount(Context context, long watchingCount) {\n-        return getQuantity(context, R.plurals.watching, R.string.no_one_watching, watchingCount, localizeNumber(context, watchingCount));\n+    public static String localizeWatchingCount(final Context context, final long watchingCount) {\n+        return getQuantity(context, R.plurals.watching, R.string.no_one_watching, watchingCount,\n+                localizeNumber(context, watchingCount));\n     }\n \n-    public static String shortCount(Context context, long count) {\n+    public static String shortCount(final Context context, final long count) {\n         double value = (double) count;\n         if (count >= 1000000000) {\n-            return localizeNumber(context, round(value / 1000000000, 1)) + context.getString(R.string.short_billion);\n+            return localizeNumber(context, round(value / 1000000000, 1))\n+                    + context.getString(R.string.short_billion);\n         } else if (count >= 1000000) {\n-            return localizeNumber(context, round(value / 1000000, 1)) + context.getString(R.string.short_million);\n+            return localizeNumber(context, round(value / 1000000, 1))\n+                    + context.getString(R.string.short_million);\n         } else if (count >= 1000) {\n-            return localizeNumber(context, round(value / 1000, 1)) + context.getString(R.string.short_thousand);\n+            return localizeNumber(context, round(value / 1000, 1))\n+                    + context.getString(R.string.short_thousand);\n         } else {\n             return localizeNumber(context, value);\n         }\n     }\n \n-    public static String listeningCount(Context context, long listeningCount) {\n-        return getQuantity(context, R.plurals.listening, R.string.no_one_listening, listeningCount, shortCount(context, listeningCount));\n+    public static String listeningCount(final Context context, final long listeningCount) {\n+        return getQuantity(context, R.plurals.listening, R.string.no_one_listening, listeningCount,\n+                shortCount(context, listeningCount));\n     }\n \n-    public static String shortWatchingCount(Context context, long watchingCount) {\n-        return getQuantity(context, R.plurals.watching, R.string.no_one_watching, watchingCount, shortCount(context, watchingCount));\n+    public static String shortWatchingCount(final Context context, final long watchingCount) {\n+        return getQuantity(context, R.plurals.watching, R.string.no_one_watching, watchingCount,\n+                shortCount(context, watchingCount));\n     }\n \n-    public static String shortViewCount(Context context, long viewCount) {\n-        return getQuantity(context, R.plurals.views, R.string.no_views, viewCount, shortCount(context, viewCount));\n+    public static String shortViewCount(final Context context, final long viewCount) {\n+        return getQuantity(context, R.plurals.views, R.string.no_views, viewCount,\n+                shortCount(context, viewCount));\n     }\n \n-    public static String shortSubscriberCount(Context context, long subscriberCount) {\n-        return getQuantity(context, R.plurals.subscribers, R.string.no_subscribers, subscriberCount, shortCount(context, subscriberCount));\n+    public static String shortSubscriberCount(final Context context, final long subscriberCount) {\n+        return getQuantity(context, R.plurals.subscribers, R.string.no_subscribers, subscriberCount,\n+                shortCount(context, subscriberCount));\n     }\n \n-    private static String getQuantity(Context context, @PluralsRes int pluralId, @StringRes int zeroCaseStringId, long count, String formattedCount) {\n-        if (count == 0) return context.getString(zeroCaseStringId);\n+    private static String getQuantity(final Context context, @PluralsRes final int pluralId,\n+                                      @StringRes final int zeroCaseStringId, final long count,\n+                                      final String formattedCount) {\n+        if (count == 0) {\n+            return context.getString(zeroCaseStringId);\n+        }\n \n-        // As we use the already formatted count, is not the responsibility of this method handle long numbers\n-        // (it probably will fall in the \"other\" category, or some language have some specific rule... then we have to change it)\n-        int safeCount = count > Integer.MAX_VALUE ? Integer.MAX_VALUE : count < Integer.MIN_VALUE ? Integer.MIN_VALUE : (int) count;\n+        // As we use the already formatted count\n+        // is not the responsibility of this method handle long numbers\n+        // (it probably will fall in the \"other\" category,\n+        // or some language have some specific rule... then we have to change it)\n+        int safeCount = count > Integer.MAX_VALUE ? Integer.MAX_VALUE : count < Integer.MIN_VALUE\n+                ? Integer.MIN_VALUE : (int) count;\n         return context.getResources().getQuantityString(pluralId, safeCount, formattedCount);\n     }\n \n-    public static String getDurationString(long duration) {\n+    public static String getDurationString(final long duration) {\n+        final String output;\n+\n+        final long days = duration / (24 * 60 * 60L); /* greater than a day */\n+        final long hours = duration % (24 * 60 * 60L) / (60 * 60L); /* greater than an hour */\n+        final long minutes = duration % (24 * 60 * 60L) % (60 * 60L) / 60L;\n+        final long seconds = duration % 60L;\n+\n         if (duration < 0) {\n-            duration = 0;\n-        }\n-        String output;\n-        long days = duration / (24 * 60 * 60L); /* greater than a day */\n-        duration %= (24 * 60 * 60L);\n-        long hours = duration / (60 * 60L); /* greater than an hour */\n-        duration %= (60 * 60L);\n-        long minutes = duration / 60L;\n-        long seconds = duration % 60L;\n-\n-        //handle days\n-        if (days > 0) {\n+            output = \"0:00\";\n+        } else if (days > 0) {\n+            //handle days\n             output = String.format(Locale.US, \"%d:%02d:%02d:%02d\", days, hours, minutes, seconds);\n         } else if (hours > 0) {\n             output = String.format(Locale.US, \"%d:%02d:%02d\", hours, minutes, seconds);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNTM0NA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r396135344", "bodyText": "I think checking whether the uploader name is \"YouTube\" and the uploaderUrl is empty seems to be better here", "author": "TobiGr", "createdAt": "2020-03-22T20:07:54Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java", "diffHunk": "@@ -282,10 +284,21 @@ public void handleResult(@NonNull final PlaylistInfo result) {\n \n         playlistCtrl.setVisibility(View.VISIBLE);\n \n-        imageLoader.displayImage(result.getUploaderAvatarUrl(), headerUploaderAvatar,\n-                ImageDisplayConstants.DISPLAY_AVATAR_OPTIONS);\n-        headerStreamCount.setText(getResources().getQuantityString(R.plurals.videos,\n-                (int) result.getStreamCount(), (int) result.getStreamCount()));\n+        String avatarUrl = result.getUploaderAvatarUrl();\n+        if (avatarUrl.contains(\"upload.wikimedia.org\")) {", "originalCommit": "48f17ffdc197ae611c2ad9579e8c5394fd834051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzI0OQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r396733249", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (avatarUrl.contains(\"upload.wikimedia.org\")) {\n          \n          \n            \n                    if (YouTubeParsingHelper.isYouTubeMixId(result.getId())) {", "author": "TobiGr", "createdAt": "2020-03-23T20:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNzYyMQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r396737621", "bodyText": "That's not a good idea, unless you first check whether result.getServiceId() equals YouTube's service ID.", "author": "wb9688", "createdAt": "2020-03-23T20:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNDgwMA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r397424800", "bodyText": "@wb9688 is result.getServiceId() == ServiceList.YouTube.getServiceId() ok?", "author": "Stypox", "createdAt": "2020-03-24T19:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNjk3MQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3243#discussion_r397426971", "bodyText": "result.getServiceId() == ServiceList.YouTube.getServiceId() && YouTubeParsingHelper.isYouTubeMixId(result.getId()) is OK.", "author": "wb9688", "createdAt": "2020-03-24T20:03:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNTM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1a278bf2af5932b9d8e5bb18fa63fa8a436e3a6c", "chunk": "diff --git a/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java b/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java\nindex 51bcda7d0..006db3a67 100644\n--- a/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java\n+++ b/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java\n\n@@ -278,7 +295,7 @@ public class PlaylistFragment extends BaseListInfoFragment<PlaylistInfo> {\n                     }\n                 });\n             }\n-        } else { // Else : say we have no uploader\n+        } else { // Otherwise say we have no uploader\n             headerUploaderName.setText(R.string.playlist_no_uploader);\n         }\n \n"}}, {"oid": "1a278bf2af5932b9d8e5bb18fa63fa8a436e3a6c", "url": "https://github.com/TeamNewPipe/NewPipe/commit/1a278bf2af5932b9d8e5bb18fa63fa8a436e3a6c", "message": "Show radio instead of Youtube logo in mixes\n\nYouTube mixes have YouTube as a creator, though YouTube's logo is not safe to use as it is a trademark (better safe than sorry)", "committedDate": "2020-04-10T20:36:24Z", "type": "forcePushed"}, {"oid": "623f7ad5d335eb1d621b90cb9fce892b3d67d900", "url": "https://github.com/TeamNewPipe/NewPipe/commit/623f7ad5d335eb1d621b90cb9fce892b3d67d900", "message": "Show radio instead of Youtube logo in mixes\n\nYouTube mixes have YouTube as a creator, though YouTube's logo is not safe to use as it is a trademark (better safe than sorry)", "committedDate": "2020-05-21T13:00:39Z", "type": "forcePushed"}, {"oid": "18a2057e59f0d2143e1c1a391016bf789dd7a101", "url": "https://github.com/TeamNewPipe/NewPipe/commit/18a2057e59f0d2143e1c1a391016bf789dd7a101", "message": "Show radio instead of Youtube logo in mixes\n\nYouTube mixes have YouTube as a creator, though YouTube's logo is not safe to use as it is a trademark (better safe than sorry)", "committedDate": "2020-05-21T13:08:09Z", "type": "forcePushed"}, {"oid": "c2895500df9cb348e093b13482baaa526db1d0cc", "url": "https://github.com/TeamNewPipe/NewPipe/commit/c2895500df9cb348e093b13482baaa526db1d0cc", "message": "Show radio instead of Youtube logo in mixes\n\nYouTube mixes have YouTube as a creator, though YouTube's logo is not safe to use as it is a trademark (better safe than sorry)", "committedDate": "2020-05-21T13:09:18Z", "type": "forcePushed"}, {"oid": "a18ebf6600da0c5d7cd5d6fc840ac0db4920c02d", "url": "https://github.com/TeamNewPipe/NewPipe/commit/a18ebf6600da0c5d7cd5d6fc840ac0db4920c02d", "message": "Show radio instead of Youtube logo in mixes\n\nYouTube mixes have YouTube as a creator, though YouTube's logo is not safe to use as it is a trademark (better safe than sorry)", "committedDate": "2020-12-14T17:29:51Z", "type": "forcePushed"}, {"oid": "c2210330b6d70f08b194065accaef2a067b639fb", "url": "https://github.com/TeamNewPipe/NewPipe/commit/c2210330b6d70f08b194065accaef2a067b639fb", "message": "Show radio instead of Youtube logo in mixes\n\nYouTube mixes have YouTube as a creator, though YouTube's logo is not safe to use as it is a trademark (better safe than sorry)", "committedDate": "2020-12-14T18:22:00Z", "type": "commit"}, {"oid": "3ec079b20201e535cd33869957c225ef73be21f7", "url": "https://github.com/TeamNewPipe/NewPipe/commit/3ec079b20201e535cd33869957c225ef73be21f7", "message": "Show radio instead of Youtube logo in mixes\n\nYouTube mixes have YouTube as a creator, though YouTube's logo is not safe to use as it is a trademark (better safe than sorry)", "committedDate": "2020-12-14T17:50:00Z", "type": "forcePushed"}, {"oid": "c2210330b6d70f08b194065accaef2a067b639fb", "url": "https://github.com/TeamNewPipe/NewPipe/commit/c2210330b6d70f08b194065accaef2a067b639fb", "message": "Show radio instead of Youtube logo in mixes\n\nYouTube mixes have YouTube as a creator, though YouTube's logo is not safe to use as it is a trademark (better safe than sorry)", "committedDate": "2020-12-14T18:22:00Z", "type": "forcePushed"}]}