{"pr_number": 1315, "pr_title": "[IOTDB-744] Support upsert alias", "pr_createdAt": "2020-06-05T02:46:07Z", "pr_url": "https://github.com/apache/iotdb/pull/1315", "timeline": [{"oid": "449a76776477817801d69fee8f159431d0e1d816", "url": "https://github.com/apache/iotdb/commit/449a76776477817801d69fee8f159431d0e1d816", "message": "add upsert alias", "committedDate": "2020-06-05T02:39:42Z", "type": "commit"}, {"oid": "82c3b9bbbcec6ce6a7d04ffe2a3f5b817ff4ab9b", "url": "https://github.com/apache/iotdb/commit/82c3b9bbbcec6ce6a7d04ffe2a3f5b817ff4ab9b", "message": "fix alter null bug", "committedDate": "2020-06-05T03:14:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2Njc4Mw==", "url": "https://github.com/apache/iotdb/pull/1315#discussion_r435666783", "bodyText": "I think, if the alias exists, just keep it and do the next instead of throwing an exception is better. What do you think? And a typo: exist", "author": "Alima777", "createdAt": "2020-06-05T03:10:16Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1010,62 +1031,97 @@ public void changeOffset(String path, long offset) throws MetadataException {\n     }\n   }\n \n+  public void changeAlias(String path, String alias) throws MetadataException {\n+    lock.writeLock().lock();\n+    try {\n+      LeafMNode leafMNode = (LeafMNode) mtree.getNodeByPath(path);\n+      leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      leafMNode.getParent().addAlias(alias, leafMNode);\n+      leafMNode.setAlias(alias);\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+  }\n+\n   /**\n    * upsert tags and attributes key-value for the timeseries if the key has existed, just use the\n    * new value to update it.\n    *\n+   * @param alias         newly added alias\n    * @param tagsMap       newly added tags map\n    * @param attributesMap newly added attributes map\n    * @param fullPath      timeseries\n    */\n-  public void upsertTagsAndAttributes(\n-      Map<String, String> tagsMap, Map<String, String> attributesMap, String fullPath)\n-      throws MetadataException, IOException {\n+  public void upsertTagsAndAttributes(String alias, Map<String, String> tagsMap,\n+      Map<String, String> attributesMap, String fullPath) throws MetadataException, IOException {\n     lock.writeLock().lock();\n     try {\n       MNode mNode = mtree.getNodeByPath(fullPath);\n       if (!(mNode instanceof LeafMNode)) {\n         throw new PathNotExistException(fullPath);\n       }\n       LeafMNode leafMNode = (LeafMNode) mNode;\n+      // upsert alias\n+      if (alias != null) {\n+        if (leafMNode.getParent().hasChild(alias)) {\n+          throw new MetadataException(\"The alias already exits.\");", "originalCommit": "449a76776477817801d69fee8f159431d0e1d816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTAwNA==", "url": "https://github.com/apache/iotdb/pull/1315#discussion_r435679004", "bodyText": "Yes!", "author": "qiaojialin", "createdAt": "2020-06-05T04:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2Njc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4Njg0MQ==", "url": "https://github.com/apache/iotdb/pull/1315#discussion_r435686841", "bodyText": "fix", "author": "JackieTien97", "createdAt": "2020-06-05T04:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2Njc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c016aa803e53475bd9f5bf317a5ca0ea4f05d625", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex ba1105ccb9..1eb16c1fee 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -1035,7 +1035,9 @@ public class MManager {\n     lock.writeLock().lock();\n     try {\n       LeafMNode leafMNode = (LeafMNode) mtree.getNodeByPath(path);\n-      leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      if (leafMNode.getAlias() != null) {\n+        leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      }\n       leafMNode.getParent().addAlias(alias, leafMNode);\n       leafMNode.setAlias(alias);\n     } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2NzA5Mw==", "url": "https://github.com/apache/iotdb/pull/1315#discussion_r435667093", "bodyText": "Add a comment or delete this.", "author": "Alima777", "createdAt": "2020-06-05T03:11:40Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1010,62 +1031,97 @@ public void changeOffset(String path, long offset) throws MetadataException {\n     }\n   }\n \n+  public void changeAlias(String path, String alias) throws MetadataException {\n+    lock.writeLock().lock();\n+    try {\n+      LeafMNode leafMNode = (LeafMNode) mtree.getNodeByPath(path);\n+      leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      leafMNode.getParent().addAlias(alias, leafMNode);\n+      leafMNode.setAlias(alias);\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+  }\n+\n   /**\n    * upsert tags and attributes key-value for the timeseries if the key has existed, just use the\n    * new value to update it.\n    *\n+   * @param alias         newly added alias\n    * @param tagsMap       newly added tags map\n    * @param attributesMap newly added attributes map\n    * @param fullPath      timeseries\n    */\n-  public void upsertTagsAndAttributes(\n-      Map<String, String> tagsMap, Map<String, String> attributesMap, String fullPath)\n-      throws MetadataException, IOException {\n+  public void upsertTagsAndAttributes(String alias, Map<String, String> tagsMap,\n+      Map<String, String> attributesMap, String fullPath) throws MetadataException, IOException {\n     lock.writeLock().lock();\n     try {\n       MNode mNode = mtree.getNodeByPath(fullPath);\n       if (!(mNode instanceof LeafMNode)) {\n         throw new PathNotExistException(fullPath);\n       }\n       LeafMNode leafMNode = (LeafMNode) mNode;\n+      // upsert alias\n+      if (alias != null) {\n+        if (leafMNode.getParent().hasChild(alias)) {\n+          throw new MetadataException(\"The alias already exits.\");\n+        }\n+        if (leafMNode.getAlias() != null) {\n+          leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+          leafMNode.getParent().addAlias(alias, leafMNode);\n+          leafMNode.setAlias(alias);\n+          // persist to WAL\n+          logWriter.changeAlias(fullPath, alias);\n+        }\n+      }\n+      //", "originalCommit": "449a76776477817801d69fee8f159431d0e1d816", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c016aa803e53475bd9f5bf317a5ca0ea4f05d625", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex ba1105ccb9..1eb16c1fee 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -1035,7 +1035,9 @@ public class MManager {\n     lock.writeLock().lock();\n     try {\n       LeafMNode leafMNode = (LeafMNode) mtree.getNodeByPath(path);\n-      leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      if (leafMNode.getAlias() != null) {\n+        leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      }\n       leafMNode.getParent().addAlias(alias, leafMNode);\n       leafMNode.setAlias(alias);\n     } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2ODAzNw==", "url": "https://github.com/apache/iotdb/pull/1315#discussion_r435668037", "bodyText": "Is this limit needed?", "author": "Alima777", "createdAt": "2020-06-05T03:15:30Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1010,62 +1031,97 @@ public void changeOffset(String path, long offset) throws MetadataException {\n     }\n   }\n \n+  public void changeAlias(String path, String alias) throws MetadataException {\n+    lock.writeLock().lock();\n+    try {\n+      LeafMNode leafMNode = (LeafMNode) mtree.getNodeByPath(path);\n+      leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      leafMNode.getParent().addAlias(alias, leafMNode);\n+      leafMNode.setAlias(alias);\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+  }\n+\n   /**\n    * upsert tags and attributes key-value for the timeseries if the key has existed, just use the\n    * new value to update it.\n    *\n+   * @param alias         newly added alias\n    * @param tagsMap       newly added tags map\n    * @param attributesMap newly added attributes map\n    * @param fullPath      timeseries\n    */\n-  public void upsertTagsAndAttributes(\n-      Map<String, String> tagsMap, Map<String, String> attributesMap, String fullPath)\n-      throws MetadataException, IOException {\n+  public void upsertTagsAndAttributes(String alias, Map<String, String> tagsMap,\n+      Map<String, String> attributesMap, String fullPath) throws MetadataException, IOException {\n     lock.writeLock().lock();\n     try {\n       MNode mNode = mtree.getNodeByPath(fullPath);\n       if (!(mNode instanceof LeafMNode)) {\n         throw new PathNotExistException(fullPath);\n       }\n       LeafMNode leafMNode = (LeafMNode) mNode;\n+      // upsert alias\n+      if (alias != null) {\n+        if (leafMNode.getParent().hasChild(alias)) {\n+          throw new MetadataException(\"The alias already exits.\");\n+        }\n+        if (leafMNode.getAlias() != null) {\n+          leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+          leafMNode.getParent().addAlias(alias, leafMNode);\n+          leafMNode.setAlias(alias);\n+          // persist to WAL\n+          logWriter.changeAlias(fullPath, alias);\n+        }\n+      }\n+      //\n+      if (tagsMap == null && attributesMap == null) {\n+        return;\n+      }\n       // no tag or attribute, we need to add a new record in log\n       if (leafMNode.getOffset() < 0) {\n         long offset = tagLogFile.write(tagsMap, attributesMap);\n         logWriter.changeOffset(fullPath, offset);\n         leafMNode.setOffset(offset);\n         // update inverted Index map\n-        for (Entry<String, String> entry : tagsMap.entrySet()) {\n-          tagIndex.computeIfAbsent(entry.getKey(), k -> new HashMap<>())\n-              .computeIfAbsent(entry.getValue(), v -> new HashSet<>()).add(leafMNode);\n+        if (tagsMap != null) {", "originalCommit": "449a76776477817801d69fee8f159431d0e1d816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4NjY4OA==", "url": "https://github.com/apache/iotdb/pull/1315#discussion_r435686688", "bodyText": "Yes, Or the tagsMap.entrySet() will throw NullPointerException", "author": "JackieTien97", "createdAt": "2020-06-05T04:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2ODAzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c016aa803e53475bd9f5bf317a5ca0ea4f05d625", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex ba1105ccb9..1eb16c1fee 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -1035,7 +1035,9 @@ public class MManager {\n     lock.writeLock().lock();\n     try {\n       LeafMNode leafMNode = (LeafMNode) mtree.getNodeByPath(path);\n-      leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      if (leafMNode.getAlias() != null) {\n+        leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      }\n       leafMNode.getParent().addAlias(alias, leafMNode);\n       leafMNode.setAlias(alias);\n     } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2ODA5NQ==", "url": "https://github.com/apache/iotdb/pull/1315#discussion_r435668095", "bodyText": "Same as above.", "author": "Alima777", "createdAt": "2020-06-05T03:15:45Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1010,62 +1031,97 @@ public void changeOffset(String path, long offset) throws MetadataException {\n     }\n   }\n \n+  public void changeAlias(String path, String alias) throws MetadataException {\n+    lock.writeLock().lock();\n+    try {\n+      LeafMNode leafMNode = (LeafMNode) mtree.getNodeByPath(path);\n+      leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      leafMNode.getParent().addAlias(alias, leafMNode);\n+      leafMNode.setAlias(alias);\n+    } finally {\n+      lock.writeLock().unlock();\n+    }\n+  }\n+\n   /**\n    * upsert tags and attributes key-value for the timeseries if the key has existed, just use the\n    * new value to update it.\n    *\n+   * @param alias         newly added alias\n    * @param tagsMap       newly added tags map\n    * @param attributesMap newly added attributes map\n    * @param fullPath      timeseries\n    */\n-  public void upsertTagsAndAttributes(\n-      Map<String, String> tagsMap, Map<String, String> attributesMap, String fullPath)\n-      throws MetadataException, IOException {\n+  public void upsertTagsAndAttributes(String alias, Map<String, String> tagsMap,\n+      Map<String, String> attributesMap, String fullPath) throws MetadataException, IOException {\n     lock.writeLock().lock();\n     try {\n       MNode mNode = mtree.getNodeByPath(fullPath);\n       if (!(mNode instanceof LeafMNode)) {\n         throw new PathNotExistException(fullPath);\n       }\n       LeafMNode leafMNode = (LeafMNode) mNode;\n+      // upsert alias\n+      if (alias != null) {\n+        if (leafMNode.getParent().hasChild(alias)) {\n+          throw new MetadataException(\"The alias already exits.\");\n+        }\n+        if (leafMNode.getAlias() != null) {\n+          leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+          leafMNode.getParent().addAlias(alias, leafMNode);\n+          leafMNode.setAlias(alias);\n+          // persist to WAL\n+          logWriter.changeAlias(fullPath, alias);\n+        }\n+      }\n+      //\n+      if (tagsMap == null && attributesMap == null) {\n+        return;\n+      }\n       // no tag or attribute, we need to add a new record in log\n       if (leafMNode.getOffset() < 0) {\n         long offset = tagLogFile.write(tagsMap, attributesMap);\n         logWriter.changeOffset(fullPath, offset);\n         leafMNode.setOffset(offset);\n         // update inverted Index map\n-        for (Entry<String, String> entry : tagsMap.entrySet()) {\n-          tagIndex.computeIfAbsent(entry.getKey(), k -> new HashMap<>())\n-              .computeIfAbsent(entry.getValue(), v -> new HashSet<>()).add(leafMNode);\n+        if (tagsMap != null) {\n+          for (Entry<String, String> entry : tagsMap.entrySet()) {\n+            tagIndex.computeIfAbsent(entry.getKey(), k -> new HashMap<>())\n+                .computeIfAbsent(entry.getValue(), v -> new HashSet<>()).add(leafMNode);\n+          }\n         }\n         return;\n       }\n \n       Pair<Map<String, String>, Map<String, String>> pair =\n           tagLogFile.read(config.getTagAttributeTotalSize(), leafMNode.getOffset());\n \n-      for (Entry<String, String> entry : tagsMap.entrySet()) {\n-        String key = entry.getKey();\n-        String value = entry.getValue();\n-        String beforeValue = pair.left.get(key);\n-        pair.left.put(key, value);\n-        // if the key has existed and the value is not equal to the new one\n-        // we should remove before key-value from inverted index map\n-        if (beforeValue != null && !beforeValue.equals(value)) {\n-          tagIndex.get(key).get(beforeValue).remove(leafMNode);\n-          if (tagIndex.get(key).get(beforeValue).isEmpty()) {\n-            tagIndex.get(key).remove(beforeValue);\n+      if (tagsMap != null) {", "originalCommit": "449a76776477817801d69fee8f159431d0e1d816", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c016aa803e53475bd9f5bf317a5ca0ea4f05d625", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex ba1105ccb9..1eb16c1fee 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -1035,7 +1035,9 @@ public class MManager {\n     lock.writeLock().lock();\n     try {\n       LeafMNode leafMNode = (LeafMNode) mtree.getNodeByPath(path);\n-      leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      if (leafMNode.getAlias() != null) {\n+        leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n+      }\n       leafMNode.getParent().addAlias(alias, leafMNode);\n       leafMNode.setAlias(alias);\n     } finally {\n"}}, {"oid": "c016aa803e53475bd9f5bf317a5ca0ea4f05d625", "url": "https://github.com/apache/iotdb/commit/c016aa803e53475bd9f5bf317a5ca0ea4f05d625", "message": "loose the check limit", "committedDate": "2020-06-05T04:40:44Z", "type": "commit"}, {"oid": "1bb1513ac32fde8a64dba71543bfb5de2ad752e3", "url": "https://github.com/apache/iotdb/commit/1bb1513ac32fde8a64dba71543bfb5de2ad752e3", "message": "typos", "committedDate": "2020-06-05T04:47:10Z", "type": "commit"}]}