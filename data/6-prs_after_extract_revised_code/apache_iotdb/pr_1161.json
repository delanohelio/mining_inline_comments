{"pr_number": 1161, "pr_title": "[IOTDB-348] Fix DeleteTimeseriesPlan result inconsistent problem", "pr_createdAt": "2020-05-06T16:21:38Z", "pr_url": "https://github.com/apache/iotdb/pull/1161", "timeline": [{"oid": "c37e58d201663a2d983cd49443be42c1135cca6f", "url": "https://github.com/apache/iotdb/commit/c37e58d201663a2d983cd49443be42c1135cca6f", "message": "fix delete timeseries", "committedDate": "2020-05-06T15:46:26Z", "type": "commit"}, {"oid": "df10121f523d6f6868741e36515c1db011addef7", "url": "https://github.com/apache/iotdb/commit/df10121f523d6f6868741e36515c1db011addef7", "message": "remove duplicated code", "committedDate": "2020-05-06T16:15:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMDc4NQ==", "url": "https://github.com/apache/iotdb/pull/1161#discussion_r421210785", "bodyText": "As a node exists in multiple groups, a node will perform the same deletion several times and I am not sure if it is meaningful. Why not just send the deletion to each node in allNodes?", "author": "jt2594838", "createdAt": "2020-05-07T03:00:43Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java", "diffHunk": "@@ -373,8 +373,85 @@ protected void loadConfiguration(LoadConfigurationPlan plan) throws QueryProcess\n         break;\n       default:\n         throw new QueryProcessException(String\n-            .format(\"Unrecognized load configuration plan type: %s\",\n-                plan.getLoadConfigurationPlanType()));\n+                .format(\"Unrecognized load configuration plan type: %s\",\n+                        plan.getLoadConfigurationPlanType()));\n+    }\n+  }\n+\n+  @Override\n+  protected Pair<Set<String>, String> deleteTimeseries(String path) throws MetadataException {\n+    ConcurrentHashMap<String, Set<String>> resultPair = new ConcurrentHashMap<>();\n+    Pair<Set<String>, String> localPair = MManager.getInstance().deleteTimeseries(path);\n+    resultPair.put(localPair.right, localPair.left);\n+\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n+\n+    for (PartitionGroup group : metaGroupMember.getPartitionTable().getGlobalGroups()) {\n+      Node header = group.getHeader();\n+      if (header.equals(metaGroupMember.getThisNode())) {\n+        continue;\n+      }\n+      pool.submit(() -> {\n+        DeleteTimeseriesHandler handler = new DeleteTimeseriesHandler();\n+        AtomicReference<DeleteTimeseriesRespPair> response = new AtomicReference<>(null);\n+        handler.setResponse(response);\n+\n+        for (Node node : group) {", "originalCommit": "df10121f523d6f6868741e36515c1db011addef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyMjM5OA==", "url": "https://github.com/apache/iotdb/pull/1161#discussion_r421222398", "bodyText": "Thanks for your advice. I've changed the logic.", "author": "Ring-k", "createdAt": "2020-05-07T03:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMDc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a80b157876a5afef5be27e8794132e9cce5f8013", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java b/cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java\nindex 1335adf60d..21db96cf6d 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/query/ClusterPlanExecutor.java\n\n@@ -383,53 +383,45 @@ public class ClusterPlanExecutor extends PlanExecutor {\n     ConcurrentHashMap<String, Set<String>> resultPair = new ConcurrentHashMap<>();\n     Pair<Set<String>, String> localPair = MManager.getInstance().deleteTimeseries(path);\n     resultPair.put(localPair.right, localPair.left);\n-\n     ExecutorService pool = new ScheduledThreadPoolExecutor(THREAD_POOL_SIZE);\n-\n-    for (PartitionGroup group : metaGroupMember.getPartitionTable().getGlobalGroups()) {\n-      Node header = group.getHeader();\n-      if (header.equals(metaGroupMember.getThisNode())) {\n-        continue;\n-      }\n+    for (Node node : metaGroupMember.getPartitionTable().getAllNodes()) {\n       pool.submit(() -> {\n         DeleteTimeseriesHandler handler = new DeleteTimeseriesHandler();\n         AtomicReference<DeleteTimeseriesRespPair> response = new AtomicReference<>(null);\n         handler.setResponse(response);\n-\n-        for (Node node : group) {\n-          try {\n-            DataClient client = metaGroupMember.getDataClient(node);\n-            handler.setContact(node);\n-            synchronized (response) {\n-              if (client != null) {\n-                client.deleteTimeseries(node, path, handler);\n-                response.wait(connectionTimeoutInMS);\n-              }\n+        try {\n+          DataClient client = metaGroupMember.getDataClient(node);\n+          handler.setContact(node);\n+          synchronized (response) {\n+            if (client != null) {\n+              client.deleteTimeseries(node, path, handler);\n+              response.wait(connectionTimeoutInMS);\n             }\n-            DeleteTimeseriesRespPair currentResult = response.get();\n-            if (currentResult != null) {\n-              if (resultPair.size() == 0) {\n-                resultPair.put(currentResult.right, currentResult.left);\n+          }\n+          DeleteTimeseriesRespPair currentResult = response.get();\n+          if (currentResult != null) {\n+            if (resultPair.size() == 0) {\n+              resultPair.put(currentResult.right, currentResult.left);\n+            } else {\n+              if (resultPair.keySet().contains(currentResult.right)) {\n+                resultPair.get(currentResult.right).addAll(currentResult.left);\n               } else {\n-                if (resultPair.keySet().contains(currentResult.right)) {\n-                  resultPair.get(currentResult.right).addAll(currentResult.left);\n-                } else {\n-                  throw new TException(\"Failed to delete timeseries in node: \" + node\n-                          + \" because string conflict, the string in local is \"\n-                          + resultPair.keySet().toArray(new String[0])[0]\n-                          + \", but the remote is \" + currentResult.right);\n-                }\n+                throw new TException(\"Failed to delete timeseries in node: \" + node\n+                        + \" because string conflict, the string in local is \"\n+                        + resultPair.keySet().toArray(new String[0])[0]\n+                        + \", but the remote is \" + currentResult.right);\n               }\n             }\n-          } catch (IOException e) {\n-            logger.error(\"Failed to delete timeseries in node: {}\", node, e);\n-          } catch (TException e) {\n-            logger.error(\"Error occurs when deleting timeseries in node {}.\", node, e);\n-          } catch (InterruptedException e) {\n-            logger.error(\"Interrupted when deleting timeseries in node {}.\", node, e);\n-            Thread.currentThread().interrupt();\n           }\n+        } catch (IOException e) {\n+          logger.error(\"Failed to delete timeseries in node: {}\", node, e);\n+        } catch (TException e) {\n+          logger.error(\"Error occurs when deleting timeseries in node {}.\", node, e);\n+        } catch (InterruptedException e) {\n+          logger.error(\"Interrupted when deleting timeseries in node {}.\", node, e);\n+          Thread.currentThread().interrupt();\n         }\n+\n       });\n     }\n     pool.shutdown();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTE4NQ==", "url": "https://github.com/apache/iotdb/pull/1161#discussion_r421211185", "bodyText": "I think you should notify result when an error occurs.", "author": "jt2594838", "createdAt": "2020-05-07T03:02:22Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/handlers/caller/DeleteTimeseriesHandler.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.cluster.server.handlers.caller;\n+\n+import org.apache.iotdb.cluster.rpc.thrift.DeleteTimeseriesRespPair;\n+import org.apache.iotdb.cluster.rpc.thrift.Node;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class DeleteTimeseriesHandler implements AsyncMethodCallback<DeleteTimeseriesRespPair> {\n+  private static final Logger logger = LoggerFactory.getLogger(DeleteTimeseriesHandler.class);\n+\n+  private Node contact;\n+  private AtomicReference<DeleteTimeseriesRespPair> result;\n+\n+  @Override\n+  public void onComplete(DeleteTimeseriesRespPair resp) {\n+    logger.info(\"Received delete timeseries result from {}\", contact);\n+    synchronized (result) {\n+      result.set(resp);\n+      result.notifyAll();\n+    }\n+  }\n+\n+  @Override\n+  public void onError(Exception exception) {\n+    logger.warn(\"Cannot delete timeseries from {}, because \", contact, exception);", "originalCommit": "df10121f523d6f6868741e36515c1db011addef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyMjQ3MA==", "url": "https://github.com/apache/iotdb/pull/1161#discussion_r421222470", "bodyText": "Thanks for your reminding.", "author": "Ring-k", "createdAt": "2020-05-07T03:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "00de6d580501f4852729c1909f9b451dd02f7009", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/server/handlers/caller/DeleteTimeseriesHandler.java b/cluster/src/main/java/org/apache/iotdb/cluster/server/handlers/caller/DeleteTimeseriesHandler.java\nindex 3ee2405ed3..fcc851543e 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/server/handlers/caller/DeleteTimeseriesHandler.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/server/handlers/caller/DeleteTimeseriesHandler.java\n\n@@ -44,6 +44,9 @@ public class DeleteTimeseriesHandler implements AsyncMethodCallback<DeleteTimese\n   @Override\n   public void onError(Exception exception) {\n     logger.warn(\"Cannot delete timeseries from {}, because \", contact, exception);\n+    synchronized (result) {\n+      result.notifyAll();\n+    }\n   }\n \n   public void setResponse(AtomicReference response) {\n"}}, {"oid": "a80b157876a5afef5be27e8794132e9cce5f8013", "url": "https://github.com/apache/iotdb/commit/a80b157876a5afef5be27e8794132e9cce5f8013", "message": "broadcast", "committedDate": "2020-05-07T03:45:01Z", "type": "commit"}, {"oid": "00de6d580501f4852729c1909f9b451dd02f7009", "url": "https://github.com/apache/iotdb/commit/00de6d580501f4852729c1909f9b451dd02f7009", "message": "notify", "committedDate": "2020-05-07T03:46:45Z", "type": "commit"}, {"oid": "8a8421d22d6161678cb731366c58aff1c8b0a2ac", "url": "https://github.com/apache/iotdb/commit/8a8421d22d6161678cb731366c58aff1c8b0a2ac", "message": "Merge branch 'cluster_new' into cluster_new", "committedDate": "2020-05-07T03:54:43Z", "type": "commit"}, {"oid": "0aded60a4d18ffddce69dfcb86a7826571f35ead", "url": "https://github.com/apache/iotdb/commit/0aded60a4d18ffddce69dfcb86a7826571f35ead", "message": "remove unnecessary broadcast", "committedDate": "2020-05-07T07:15:03Z", "type": "commit"}, {"oid": "7060b2c8dac06be9593b1cd88606812904779372", "url": "https://github.com/apache/iotdb/commit/7060b2c8dac06be9593b1cd88606812904779372", "message": "Merge branch 'cluster_new' of https://github.com/Ring-k/incubator-iotdb into cluster_new", "committedDate": "2020-05-07T07:16:12Z", "type": "commit"}]}