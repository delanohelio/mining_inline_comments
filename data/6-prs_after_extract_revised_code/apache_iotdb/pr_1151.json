{"pr_number": 1151, "pr_title": "[IOTDB-643] Concurrent queries cause BufferUnderflowException when storage in HDFS", "pr_createdAt": "2020-05-04T02:59:16Z", "pr_url": "https://github.com/apache/iotdb/pull/1151", "timeline": [{"oid": "261c8d5c987bad520116b28a69bc8cbaecad1efb", "url": "https://github.com/apache/iotdb/commit/261c8d5c987bad520116b28a69bc8cbaecad1efb", "message": "Fix concurrent query caused BufferUnderflowException when storage in HDFS", "committedDate": "2020-05-07T08:03:32Z", "type": "forcePushed"}, {"oid": "2e705a644b83fb1a387ae3c357c186fc6ae399e4", "url": "https://github.com/apache/iotdb/commit/2e705a644b83fb1a387ae3c357c186fc6ae399e4", "message": "Fix concurrent query caused BufferUnderflowException when storage in HDFS", "committedDate": "2020-05-07T08:10:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NzkyNQ==", "url": "https://github.com/apache/iotdb/pull/1151#discussion_r422187925", "bodyText": "why add this lock?  the lock is for concurrently modify lruCache", "author": "qiaojialin", "createdAt": "2020-05-08T14:50:29Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java", "diffHunk": "@@ -100,18 +100,24 @@ public static ChunkMetadataCache getInstance() {\n   public List<ChunkMetadata> get(String filePath, Path seriesPath)\n       throws IOException {\n     if (!cacheEnable) {\n-      // bloom filter part\n-      TsFileSequenceReader tsFileReader = FileReaderManager.getInstance().get(filePath, true);\n-      BloomFilter bloomFilter = tsFileReader.readBloomFilter();\n-      if (bloomFilter != null && !bloomFilter.contains(seriesPath.getFullPath())) {\n-        if (logger.isDebugEnabled()) {\n-          logger.debug(String\n-              .format(\"path not found by bloom filter, file is: %s, path is: %s\", filePath, seriesPath));\n+      lock.writeLock().lock();", "originalCommit": "0850aaa720d19085c1f50726328254bf889ac5c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzOTMxMQ==", "url": "https://github.com/apache/iotdb/pull/1151#discussion_r422439311", "bodyText": "Deleted", "author": "samperson1997", "createdAt": "2020-05-09T01:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4NzkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e2e20216d7a420343312a4e3fc9b31b74027152", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java b/server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java\nindex 390e36d85c..2e8f2941a0 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/cache/ChunkMetadataCache.java\n\n@@ -100,24 +100,18 @@ public class ChunkMetadataCache {\n   public List<ChunkMetadata> get(String filePath, Path seriesPath)\n       throws IOException {\n     if (!cacheEnable) {\n-      lock.writeLock().lock();\n-      try {\n-        // bloom filter part\n-        TsFileSequenceReader tsFileReader = FileReaderManager.getInstance().get(filePath, true);\n-        BloomFilter bloomFilter = tsFileReader.readBloomFilter();\n-        if (bloomFilter != null && !bloomFilter.contains(seriesPath.getFullPath())) {\n-          if (logger.isDebugEnabled()) {\n-            logger.debug(String\n-                .format(\"path not found by bloom filter, file is: %s, path is: %s\", filePath,\n-                    seriesPath));\n-          }\n-          // If timeseries isn't included in the tsfile, empty list is returned.\n-          return new ArrayList<>();\n+      // bloom filter part\n+      TsFileSequenceReader tsFileReader = FileReaderManager.getInstance().get(filePath, true);\n+      BloomFilter bloomFilter = tsFileReader.readBloomFilter();\n+      if (bloomFilter != null && !bloomFilter.contains(seriesPath.getFullPath())) {\n+        if (logger.isDebugEnabled()) {\n+          logger.debug(String\n+              .format(\"path not found by bloom filter, file is: %s, path is: %s\", filePath, seriesPath));\n         }\n-        return tsFileReader.getChunkMetadataList(seriesPath);\n-      } finally {\n-        lock.writeLock().unlock();\n+        return new ArrayList<>();\n       }\n+      // If timeseries isn't included in the tsfile, empty list is returned.\n+      return tsFileReader.getChunkMetadataList(seriesPath);\n     }\n \n     String key = (filePath + IoTDBConstant.PATH_SEPARATOR\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5NjMwOA==", "url": "https://github.com/apache/iotdb/pull/1151#discussion_r422196308", "bodyText": "this parameter is no need ,  the tsfileInput is positioned in selfcheck already.", "author": "qiaojialin", "createdAt": "2020-05-08T15:04:43Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java", "diffHunk": "@@ -225,10 +226,13 @@ public String readHeadMagic() throws IOException {\n    * to the end of the magic head string.\n    */\n   public String readHeadMagic(boolean movePosition) throws IOException {", "originalCommit": "0850aaa720d19085c1f50726328254bf889ac5c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzOTY2Nw==", "url": "https://github.com/apache/iotdb/pull/1151#discussion_r422439667", "bodyText": "Removed", "author": "samperson1997", "createdAt": "2020-05-09T01:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5NjMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "3e2e20216d7a420343312a4e3fc9b31b74027152", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java\nindex d121efa8ad..3ca9bf5ae9 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java\n\n@@ -216,26 +216,9 @@ public class TsFileSequenceReader implements AutoCloseable {\n    * this function does not modify the position of the file reader.\n    */\n   public String readHeadMagic() throws IOException {\n-    return readHeadMagic(false);\n-  }\n-\n-  /**\n-   * this function does not modify the position of the file reader.\n-   *\n-   * @param movePosition whether move the position of the file reader after reading the magic header\n-   * to the end of the magic head string.\n-   */\n-  public String readHeadMagic(boolean movePosition) throws IOException {\n     ByteBuffer magicStringBytes = ByteBuffer\n         .allocate(TSFileConfig.MAGIC_STRING.getBytes().length);\n-    if (movePosition) {\n-      synchronized (this) {\n-        tsFileInput.position(0);\n-        tsFileInput.read(magicStringBytes);\n-      }\n-    } else {\n-      tsFileInput.read(magicStringBytes, 0);\n-    }\n+    tsFileInput.read(magicStringBytes, 0);\n     magicStringBytes.flip();\n     return new String(magicStringBytes.array());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5NzUxNw==", "url": "https://github.com/apache/iotdb/pull/1151#discussion_r422197517", "bodyText": "this function should be used cautiously, it's better to use the read(position, length)", "author": "qiaojialin", "createdAt": "2020-05-08T15:06:53Z", "path": "hadoop/src/main/java/org/apache/iotdb/hadoop/fileSystem/HDFSInput.java", "diffHunk": "@@ -68,26 +60,26 @@ public long position() throws IOException {\n   }\n \n   @Override\n-  public TsFileInput position(long newPosition) throws IOException {\n+  public synchronized TsFileInput position(long newPosition) throws IOException {", "originalCommit": "0850aaa720d19085c1f50726328254bf889ac5c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0Mjk1OA==", "url": "https://github.com/apache/iotdb/pull/1151#discussion_r422442958", "bodyText": "Thanks for your reminding.", "author": "samperson1997", "createdAt": "2020-05-09T02:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5NzUxNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3e2e20216d7a420343312a4e3fc9b31b74027152", "url": "https://github.com/apache/iotdb/commit/3e2e20216d7a420343312a4e3fc9b31b74027152", "message": "Fix concurrent queries cause BufferUnderflowException when storage in HDFS", "committedDate": "2020-05-09T02:08:30Z", "type": "commit"}, {"oid": "3e2e20216d7a420343312a4e3fc9b31b74027152", "url": "https://github.com/apache/iotdb/commit/3e2e20216d7a420343312a4e3fc9b31b74027152", "message": "Fix concurrent queries cause BufferUnderflowException when storage in HDFS", "committedDate": "2020-05-09T02:08:30Z", "type": "forcePushed"}]}