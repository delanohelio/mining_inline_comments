{"pr_number": 1384, "pr_title": "[IOTDB-726] CheckPoint of MTree", "pr_createdAt": "2020-06-17T05:36:53Z", "pr_url": "https://github.com/apache/iotdb/pull/1384", "timeline": [{"oid": "1ca709b469b2d50e67a3468d98b1b0a51a627c12", "url": "https://github.com/apache/iotdb/commit/1ca709b469b2d50e67a3468d98b1b0a51a627c12", "message": "MTree checkpoint", "committedDate": "2020-06-17T05:32:46Z", "type": "commit"}, {"oid": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "url": "https://github.com/apache/iotdb/commit/4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "message": "Fix sonar", "committedDate": "2020-06-17T10:28:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441972634", "bodyText": "Actually, it means the line number of mlog file that is serialized in snapshot. And the current name may be confusing because it's referred to the line number in snapshot log file. So you'd better rename this variable as serializedLineNumber.", "author": "Alima777", "createdAt": "2020-06-18T05:14:54Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -72,27 +80,34 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n+\n   private MNode root;\n+  private int snapshotLineNumber;", "originalCommit": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5MDQwMQ==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441990401", "bodyText": "snapshotedLineNumber is ok...", "author": "qiaojialin", "createdAt": "2020-06-18T06:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzNTg4NA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r442035884", "bodyText": "Both are good for me. @samperson1997 think mine is better. :D", "author": "Alima777", "createdAt": "2020-06-18T07:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2MTI3Mw==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r442061273", "bodyText": "@qiaojialin the past participle of snapshot is snapshot ... When I changed it to snapshoted or snapshotted, the IDE will just give a spelling error hint:", "author": "samperson1997", "createdAt": "2020-06-18T08:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NjE1NQ==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443346155", "bodyText": "snapshot is ok", "author": "qiaojialin", "createdAt": "2020-06-22T06:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NjIxNg==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443346216", "bodyText": "add some comment", "author": "qiaojialin", "createdAt": "2020-06-22T06:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MDQ5MA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443370490", "bodyText": "Added", "author": "samperson1997", "createdAt": "2020-06-22T07:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "6832e294591d69e57297ce0d2b9880d99a1686f9", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex e0ed4423f..f3fdec4be 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -73,6 +73,8 @@ import org.apache.iotdb.tsfile.read.TimeValuePair;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.utils.Pair;\n import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * The hierarchical struct of the Metadata Tree is implemented in this class.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NzA1Mw==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441987053", "bodyText": "whether to enable data partition. If disabled, all data belongs to partition 0", "author": "jixuan1989", "createdAt": "2020-06-18T06:04:50Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -568,11 +568,15 @@\n   private int primitiveArraySize = 64;\n \n   /**\n-   * whether enable data partition\n-   * if disabled, all data belongs to partition 0\n+   * whether enable data partition if disabled, all data belongs to partition 0", "originalCommit": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2MjMxMA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r442062310", "bodyText": "Sorry for the wrong format. Fixed", "author": "samperson1997", "createdAt": "2020-06-18T08:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NzA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6832e294591d69e57297ce0d2b9880d99a1686f9", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\nindex 2b96a2d8f..254c81c39 100644\n--- a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n+++ b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n\n@@ -568,14 +568,14 @@ public class IoTDBConfig {\n   private int primitiveArraySize = 64;\n \n   /**\n-   * whether enable data partition if disabled, all data belongs to partition 0\n+   * whether enable data partition. If disabled, all data belongs to partition 0\n    */\n   private boolean enablePartition = false;\n \n   /**\n    * Interval line number of mlog.txt when creating a checkpoint and saving snapshot of mtree\n    */\n-  private int mtreeSnapshotInterval = 100000;\n+  private int mtreeSnapshotInterval = 10;\n \n   /**\n    * Time range for partitioning data inside each storage group, the unit is second\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4ODI0OA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441988248", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return lineNumber++;\n          \n          \n            \n                return ++lineNumber;", "author": "qiaojialin", "createdAt": "2020-06-18T06:08:27Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java", "diffHunk": "@@ -158,17 +149,23 @@ public static void upgradeMLog(String schemaDir, String logFileName) throws IOEx\n         writer.write(buf.toString());\n         writer.newLine();\n         writer.flush();\n-        \n       }\n     }\n \n     // upgrade finished, delete old mlog file\n     if (!logFile.delete()) {\n       throw new IOException(\"Deleting \" + logFile + \"failed.\");\n     }\n-    \n+\n     // rename tmpLogFile to mlog\n     FSFactoryProducer.getFSFactory().moveFile(tmpLogFile, logFile);\n   }\n-  \n+\n+  private int newLine() throws IOException {\n+    writer.newLine();\n+    writer.flush();\n+\n+    // Every MTREE_SNAPSHOT_INTERVAL lines, create a checkpoint and save the MTree as a snapshot\n+    return lineNumber++;", "originalCommit": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2MzMwMg==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r442063302", "bodyText": "Fixed", "author": "samperson1997", "createdAt": "2020-06-18T08:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4ODI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "6832e294591d69e57297ce0d2b9880d99a1686f9", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java b/server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java\nindex 4a9e834a9..9f5302a94 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java\n\n@@ -166,6 +166,6 @@ public class MLogWriter {\n     writer.flush();\n \n     // Every MTREE_SNAPSHOT_INTERVAL lines, create a checkpoint and save the MTree as a snapshot\n-    return lineNumber++;\n+    return ++lineNumber;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTU3NQ==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441989575", "bodyText": "should this be < ?", "author": "qiaojialin", "createdAt": "2020-06-18T06:12:11Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -199,11 +203,16 @@ public synchronized void init() {\n \n   private void initFromLog(File logFile) throws IOException {\n     // init the metadata from the operation log\n-    mtree = new MTree();\n+    mtree = MTree.deserializeFrom(mtreeSnapshotPath);\n     if (logFile.exists()) {\n       try (FileReader fr = new FileReader(logFile);\n           BufferedReader br = new BufferedReader(fr)) {\n         String cmd;\n+        int idx = 0;\n+        while (idx <= mtree.getSnapshotLineNumber()) {", "originalCommit": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzMzU1NA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r442033554", "bodyText": "Well, return lineNumber++ above affects the logic here. Based on your suggection, it's < here.", "author": "Alima777", "createdAt": "2020-06-18T07:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTU3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2MzQ0Nw==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r442063447", "bodyText": "Fixed", "author": "samperson1997", "createdAt": "2020-06-18T08:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6832e294591d69e57297ce0d2b9880d99a1686f9", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex a6b055db1..4106fdc83 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -209,7 +209,7 @@ public class MManager {\n           BufferedReader br = new BufferedReader(fr)) {\n         String cmd;\n         int idx = 0;\n-        while (idx <= mtree.getSnapshotLineNumber()) {\n+        while (idx < mtree.getSnapshotLineNumber()) {\n           cmd = br.readLine();\n           idx++;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5MTMxOQ==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441991319", "bodyText": "You may need to serialize to a tmp snapshot file first and then rename it to avoid a shutdown when serializing.", "author": "qiaojialin", "createdAt": "2020-06-18T06:17:12Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -899,6 +914,70 @@ private void findNodes(MNode node, String path, List<String> res, int targetLeve\n     }\n   }\n \n+  public int getSnapshotLineNumber() {\n+    return snapshotLineNumber;\n+  }\n+\n+  public void serializeTo(String snapshotPath, int lineNumber) throws IOException {\n+    try (BufferedWriter bw = new BufferedWriter(", "originalCommit": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI3ODkxNw==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443278917", "bodyText": "Updated in latest commit.", "author": "samperson1997", "createdAt": "2020-06-22T01:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5MTMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6832e294591d69e57297ce0d2b9880d99a1686f9", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex e0ed4423f..f3fdec4be 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -927,7 +931,7 @@ public class MTree implements Serializable {\n     }\n   }\n \n-  public static MTree deserializeFrom(String mtreeSnapshotPath) throws IOException {\n+  public static MTree deserializeFrom(String mtreeSnapshotPath) {\n     File mtreeSnapshot = SystemFileFactory.INSTANCE.getFile(mtreeSnapshotPath);\n     if (!mtreeSnapshot.exists()) {\n       return new MTree();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NDI3Ng==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441994276", "bodyText": "We use LinkedHashMap before.", "author": "qiaojialin", "createdAt": "2020-06-18T06:25:08Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -899,6 +914,70 @@ private void findNodes(MNode node, String path, List<String> res, int targetLeve\n     }\n   }\n \n+  public int getSnapshotLineNumber() {\n+    return snapshotLineNumber;\n+  }\n+\n+  public void serializeTo(String snapshotPath, int lineNumber) throws IOException {\n+    try (BufferedWriter bw = new BufferedWriter(\n+        new FileWriter(SystemFileFactory.INSTANCE.getFile(snapshotPath)))) {\n+      bw.write(String.valueOf(lineNumber));\n+      bw.newLine();\n+      root.serializeTo(bw);\n+    }\n+  }\n+\n+  public static MTree deserializeFrom(String mtreeSnapshotPath) throws IOException {\n+    File mtreeSnapshot = SystemFileFactory.INSTANCE.getFile(mtreeSnapshotPath);\n+    if (!mtreeSnapshot.exists()) {\n+      return new MTree();\n+    }\n+\n+    try (BufferedReader br = new BufferedReader(new FileReader(mtreeSnapshot))) {\n+      int snapshotLineNumber = Integer.parseInt(br.readLine());\n+      String s;\n+      Deque<MNode> nodeStack = new ArrayDeque<>();\n+      MNode node = null;\n+\n+      while ((s = br.readLine()) != null) {\n+        String[] nodeInfo = s.split(\",\");\n+        short nodeType = Short.parseShort(nodeInfo[0]);\n+        if (nodeType == MetadataConstant.STORAGE_GROUP_MNODE_TYPE) {\n+          node = StorageGroupMNode.deserializeFrom(nodeInfo);\n+        } else if (nodeType == MetadataConstant.MEASUREMENT_MNODE_TYPE) {\n+          node = MeasurementMNode.deserializeFrom(nodeInfo);\n+        } else {\n+          node = new MNode(null, nodeInfo[1]);\n+        }\n+\n+        int childrenSize = Integer.parseInt(nodeInfo[nodeInfo.length - 1]);\n+        if (childrenSize == 0) {\n+          nodeStack.push(node);\n+        } else {\n+          Map<String, MNode> childrenMap = new TreeMap<>();", "originalCommit": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NDE1MQ==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r442064151", "bodyText": "Fixed", "author": "samperson1997", "createdAt": "2020-06-18T08:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NDI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6832e294591d69e57297ce0d2b9880d99a1686f9", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex e0ed4423f..f3fdec4be 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -927,7 +931,7 @@ public class MTree implements Serializable {\n     }\n   }\n \n-  public static MTree deserializeFrom(String mtreeSnapshotPath) throws IOException {\n+  public static MTree deserializeFrom(String mtreeSnapshotPath) {\n     File mtreeSnapshot = SystemFileFactory.INSTANCE.getFile(mtreeSnapshotPath);\n     if (!mtreeSnapshot.exists()) {\n       return new MTree();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NTI4OQ==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r441995289", "bodyText": "catch all exception and return an empty MTree if meet a broken file", "author": "qiaojialin", "createdAt": "2020-06-18T06:27:40Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -899,6 +914,70 @@ private void findNodes(MNode node, String path, List<String> res, int targetLeve\n     }\n   }\n \n+  public int getSnapshotLineNumber() {\n+    return snapshotLineNumber;\n+  }\n+\n+  public void serializeTo(String snapshotPath, int lineNumber) throws IOException {\n+    try (BufferedWriter bw = new BufferedWriter(\n+        new FileWriter(SystemFileFactory.INSTANCE.getFile(snapshotPath)))) {\n+      bw.write(String.valueOf(lineNumber));\n+      bw.newLine();\n+      root.serializeTo(bw);\n+    }\n+  }\n+\n+  public static MTree deserializeFrom(String mtreeSnapshotPath) throws IOException {", "originalCommit": "4a105fd9b726e15c28b3c39c2fb140ddfb9e619c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NTAyNA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r442065024", "bodyText": "Good point! Fixed.", "author": "samperson1997", "createdAt": "2020-06-18T08:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NTI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6832e294591d69e57297ce0d2b9880d99a1686f9", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex e0ed4423f..f3fdec4be 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -927,7 +931,7 @@ public class MTree implements Serializable {\n     }\n   }\n \n-  public static MTree deserializeFrom(String mtreeSnapshotPath) throws IOException {\n+  public static MTree deserializeFrom(String mtreeSnapshotPath) {\n     File mtreeSnapshot = SystemFileFactory.INSTANCE.getFile(mtreeSnapshotPath);\n     if (!mtreeSnapshot.exists()) {\n       return new MTree();\n"}}, {"oid": "6832e294591d69e57297ce0d2b9880d99a1686f9", "url": "https://github.com/apache/iotdb/commit/6832e294591d69e57297ce0d2b9880d99a1686f9", "message": "Fix review comment", "committedDate": "2020-06-18T08:45:23Z", "type": "commit"}, {"oid": "43aad64b01576a66c301fc250587eb7c7f7bee15", "url": "https://github.com/apache/iotdb/commit/43aad64b01576a66c301fc250587eb7c7f7bee15", "message": "MTree checkpoint", "committedDate": "2020-06-22T01:14:30Z", "type": "commit"}, {"oid": "1077a0b527527ed1ce9194a8cd189f441f3b5a3b", "url": "https://github.com/apache/iotdb/commit/1077a0b527527ed1ce9194a8cd189f441f3b5a3b", "message": "Merge remote-tracking branch 'origin/master'\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\n#\tserver/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "committedDate": "2020-06-22T01:24:45Z", "type": "commit"}, {"oid": "3f35679781fef1c5e7242a4fc58c139baec05ff9", "url": "https://github.com/apache/iotdb/commit/3f35679781fef1c5e7242a4fc58c139baec05ff9", "message": "Merge master", "committedDate": "2020-06-22T01:25:57Z", "type": "commit"}, {"oid": "426c8fadc00813ced6df988acbb8be19e7ce5680", "url": "https://github.com/apache/iotdb/commit/426c8fadc00813ced6df988acbb8be19e7ce5680", "message": "Fix sonar", "committedDate": "2020-06-22T01:36:35Z", "type": "commit"}, {"oid": "6665a1cded525f4cade920ae0d7fe22d17da852e", "url": "https://github.com/apache/iotdb/commit/6665a1cded525f4cade920ae0d7fe22d17da852e", "message": "Add design document and config", "committedDate": "2020-06-22T05:08:07Z", "type": "commit"}, {"oid": "1c01f8c85ed4441f8f2498de54374658c17698fe", "url": "https://github.com/apache/iotdb/commit/1c01f8c85ed4441f8f2498de54374658c17698fe", "message": "Add config manual", "committedDate": "2020-06-22T05:20:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0MTk5OA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443341998", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private int mtreeSnapshotInterval = 1000000;\n          \n          \n            \n              private int mtreeSnapshotInterval = 100000;", "author": "qiaojialin", "createdAt": "2020-06-22T06:31:33Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -568,11 +568,21 @@\n   private int primitiveArraySize = 64;\n \n   /**\n-   * whether enable data partition\n-   * if disabled, all data belongs to partition 0\n+   * whether enable data partition. If disabled, all data belongs to partition 0\n    */\n   private boolean enablePartition = false;\n \n+  /**\n+   * Interval line number of mlog.txt when creating a checkpoint and saving snapshot of mtree\n+   */\n+  private int mtreeSnapshotInterval = 1000000;", "originalCommit": "1c01f8c85ed4441f8f2498de54374658c17698fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzA4Ng==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443363086", "bodyText": "Fixed", "author": "samperson1997", "createdAt": "2020-06-22T07:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0MTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8118addea0d65c4eefa215980e2f60b088f9d6d6", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\nindex 7cc1434bb..c343b7965 100644\n--- a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n+++ b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n\n@@ -575,13 +575,7 @@ public class IoTDBConfig {\n   /**\n    * Interval line number of mlog.txt when creating a checkpoint and saving snapshot of mtree\n    */\n-  private int mtreeSnapshotInterval = 1000000;\n-\n-  /**\n-   * A thread will check whether the MTree is modified lately and the line number of mlog.txt each\n-   * such interval. Unit: second\n-   */\n-  private int mtreeSnapshotThreadCheckTime = 600;\n+  private int mtreeSnapshotInterval = 100000;\n \n   /**\n    * Time range for partitioning data inside each storage group, the unit is second\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTA4MQ==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443345081", "bodyText": "replace this by config", "author": "qiaojialin", "createdAt": "2020-06-22T06:40:37Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1702,4 +1766,31 @@ public void cacheSchema(String path, MeasurementSchema schema) {\n       mRemoteSchemaCache.put(path, schema);\n     }\n   }\n+\n+  private void checkMTreeModified() {\n+    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {", "originalCommit": "1c01f8c85ed4441f8f2498de54374658c17698fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2NjMxOA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443366318", "bodyText": "Moved as a static final value", "author": "samperson1997", "createdAt": "2020-06-22T07:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8118addea0d65c4eefa215980e2f60b088f9d6d6", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex b70feb247..d94c59450 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -1768,12 +1777,14 @@ public class MManager {\n   }\n \n   private void checkMTreeModified() {\n-    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+    if (System.currentTimeMillis() - logFile.lastModified() < MTREE_SNAPSHOT_THRESHOLD_INTERVAL) {\n       logger.info(\"MTree snapshot is not created because of active modification\");\n     } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n-      logger.info(\"MTree snapshot need not be created\");\n+      logger.info(\n+          \"MTree snapshot need not be created. Current mlog line number: {}, last snapshot line number: {}\",\n+          logWriter.getLineNumber(), lastSnapshotLogLineNumber);\n     } else {\n-      lock.writeLock().lock();\n+      lock.readLock().lock();\n       logger.info(\"Start creating MTree snapshot. This may take a while...\");\n       try {\n         mtree.serializeTo(mtreeSnapshotTmpPath, logWriter.getLineNumber());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTM4NQ==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443345385", "bodyText": "remove tmp file", "author": "qiaojialin", "createdAt": "2020-06-22T06:41:27Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1702,4 +1766,31 @@ public void cacheSchema(String path, MeasurementSchema schema) {\n       mRemoteSchemaCache.put(path, schema);\n     }\n   }\n+\n+  private void checkMTreeModified() {\n+    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+      logger.info(\"MTree snapshot is not created because of active modification\");\n+    } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n+      logger.info(\"MTree snapshot need not be created\");\n+    } else {\n+      lock.writeLock().lock();\n+      logger.info(\"Start creating MTree snapshot. This may take a while...\");\n+      try {\n+        mtree.serializeTo(mtreeSnapshotTmpPath, logWriter.getLineNumber());\n+        lastSnapshotLogLineNumber = logWriter.getLineNumber();\n+        File tmpFile = SystemFileFactory.INSTANCE.getFile(mtreeSnapshotTmpPath);\n+        File snapshotFile = SystemFileFactory.INSTANCE.getFile(mtreeSnapshotPath);\n+        if (snapshotFile.exists()) {\n+          Files.delete(snapshotFile.toPath());\n+        }\n+        if (tmpFile.renameTo(snapshotFile)) {\n+          logger.info(\"Finish creating MTree snapshot to {}.\", mtreeSnapshotPath);\n+        }\n+      } catch (IOException e) {\n+        logger.warn(\"Failed to create MTree snapshot to {}\", mtreeSnapshotPath, e);", "originalCommit": "1c01f8c85ed4441f8f2498de54374658c17698fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2Njk1OA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443366958", "bodyText": "No need. It will be removed when restarting", "author": "samperson1997", "createdAt": "2020-06-22T07:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTM4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8118addea0d65c4eefa215980e2f60b088f9d6d6", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex b70feb247..d94c59450 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -1768,12 +1777,14 @@ public class MManager {\n   }\n \n   private void checkMTreeModified() {\n-    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+    if (System.currentTimeMillis() - logFile.lastModified() < MTREE_SNAPSHOT_THRESHOLD_INTERVAL) {\n       logger.info(\"MTree snapshot is not created because of active modification\");\n     } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n-      logger.info(\"MTree snapshot need not be created\");\n+      logger.info(\n+          \"MTree snapshot need not be created. Current mlog line number: {}, last snapshot line number: {}\",\n+          logWriter.getLineNumber(), lastSnapshotLogLineNumber);\n     } else {\n-      lock.writeLock().lock();\n+      lock.readLock().lock();\n       logger.info(\"Start creating MTree snapshot. This may take a while...\");\n       try {\n         mtree.serializeTo(mtreeSnapshotTmpPath, logWriter.getLineNumber());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTgyNA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443345824", "bodyText": "log the line number", "author": "qiaojialin", "createdAt": "2020-06-22T06:42:37Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1702,4 +1766,31 @@ public void cacheSchema(String path, MeasurementSchema schema) {\n       mRemoteSchemaCache.put(path, schema);\n     }\n   }\n+\n+  private void checkMTreeModified() {\n+    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+      logger.info(\"MTree snapshot is not created because of active modification\");\n+    } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n+      logger.info(\"MTree snapshot need not be created\");", "originalCommit": "1c01f8c85ed4441f8f2498de54374658c17698fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2NzU2OA==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443367568", "bodyText": "Added", "author": "samperson1997", "createdAt": "2020-06-22T07:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "8118addea0d65c4eefa215980e2f60b088f9d6d6", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex b70feb247..d94c59450 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -1768,12 +1777,14 @@ public class MManager {\n   }\n \n   private void checkMTreeModified() {\n-    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+    if (System.currentTimeMillis() - logFile.lastModified() < MTREE_SNAPSHOT_THRESHOLD_INTERVAL) {\n       logger.info(\"MTree snapshot is not created because of active modification\");\n     } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n-      logger.info(\"MTree snapshot need not be created\");\n+      logger.info(\n+          \"MTree snapshot need not be created. Current mlog line number: {}, last snapshot line number: {}\",\n+          logWriter.getLineNumber(), lastSnapshotLogLineNumber);\n     } else {\n-      lock.writeLock().lock();\n+      lock.readLock().lock();\n       logger.info(\"Start creating MTree snapshot. This may take a while...\");\n       try {\n         mtree.serializeTo(mtreeSnapshotTmpPath, logWriter.getLineNumber());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NjAyNg==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443346026", "bodyText": "use read lock", "author": "qiaojialin", "createdAt": "2020-06-22T06:43:13Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1702,4 +1766,31 @@ public void cacheSchema(String path, MeasurementSchema schema) {\n       mRemoteSchemaCache.put(path, schema);\n     }\n   }\n+\n+  private void checkMTreeModified() {\n+    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+      logger.info(\"MTree snapshot is not created because of active modification\");\n+    } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n+      logger.info(\"MTree snapshot need not be created\");\n+    } else {\n+      lock.writeLock().lock();", "originalCommit": "1c01f8c85ed4441f8f2498de54374658c17698fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2NzY1Mg==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443367652", "bodyText": "Fixed", "author": "samperson1997", "createdAt": "2020-06-22T07:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NjAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8118addea0d65c4eefa215980e2f60b088f9d6d6", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex b70feb247..d94c59450 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -1768,12 +1777,14 @@ public class MManager {\n   }\n \n   private void checkMTreeModified() {\n-    if (System.currentTimeMillis() - logFile.lastModified() < 60 * 60 * 1000) {\n+    if (System.currentTimeMillis() - logFile.lastModified() < MTREE_SNAPSHOT_THRESHOLD_INTERVAL) {\n       logger.info(\"MTree snapshot is not created because of active modification\");\n     } else if (logWriter.getLineNumber() - lastSnapshotLogLineNumber < mtreeSnapshotInterval) {\n-      logger.info(\"MTree snapshot need not be created\");\n+      logger.info(\n+          \"MTree snapshot need not be created. Current mlog line number: {}, last snapshot line number: {}\",\n+          logWriter.getLineNumber(), lastSnapshotLogLineNumber);\n     } else {\n-      lock.writeLock().lock();\n+      lock.readLock().lock();\n       logger.info(\"Start creating MTree snapshot. This may take a while...\");\n       try {\n         mtree.serializeTo(mtreeSnapshotTmpPath, logWriter.getLineNumber());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NzQ1Mg==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443347452", "bodyText": "just remind, make sure if the snapshot is crashed, we can still recover the MTree from mlog", "author": "qiaojialin", "createdAt": "2020-06-22T06:46:56Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -899,6 +918,69 @@ private void findNodes(MNode node, String path, List<String> res, int targetLeve\n     }\n   }\n \n+  public int getSnapshotLineNumber() {\n+    return snapshotLineNumber;\n+  }\n+\n+  public void serializeTo(String snapshotPath, int lineNumber) throws IOException {\n+    try (BufferedWriter bw = new BufferedWriter(\n+        new FileWriter(SystemFileFactory.INSTANCE.getFile(snapshotPath)))) {\n+      bw.write(String.valueOf(lineNumber));\n+      bw.newLine();\n+      root.serializeTo(bw);\n+    }\n+  }\n+\n+  public static MTree deserializeFrom(File mtreeSnapshot) {\n+    try (BufferedReader br = new BufferedReader(new FileReader(mtreeSnapshot))) {\n+      int snapshotLineNumber = Integer.parseInt(br.readLine());\n+      String s;\n+      Deque<MNode> nodeStack = new ArrayDeque<>();\n+      MNode node = null;\n+\n+      while ((s = br.readLine()) != null) {\n+        String[] nodeInfo = s.split(\",\");\n+        short nodeType = Short.parseShort(nodeInfo[0]);\n+        if (nodeType == MetadataConstant.STORAGE_GROUP_MNODE_TYPE) {\n+          node = StorageGroupMNode.deserializeFrom(nodeInfo);\n+        } else if (nodeType == MetadataConstant.MEASUREMENT_MNODE_TYPE) {\n+          node = MeasurementMNode.deserializeFrom(nodeInfo);\n+        } else {\n+          node = new MNode(null, nodeInfo[1]);\n+        }\n+\n+        int childrenSize = Integer.parseInt(nodeInfo[nodeInfo.length - 1]);\n+        if (childrenSize == 0) {\n+          nodeStack.push(node);\n+        } else {\n+          Map<String, MNode> childrenMap = new LinkedHashMap<>();\n+          for (int i = 0; i < childrenSize; i++) {\n+            MNode child = nodeStack.removeFirst();\n+            child.setParent(node);\n+            childrenMap.put(child.getName(), child);\n+            if (child instanceof MeasurementMNode) {\n+              String alias = ((MeasurementMNode) child).getAlias();\n+              if (alias != null) {\n+                node.addAlias(alias, child);\n+              }\n+            }\n+          }\n+          node.setChildren(childrenMap);\n+          nodeStack.push(node);\n+        }\n+      }\n+      return new MTree(node, snapshotLineNumber);\n+    } catch (IOException e) {\n+      logger.warn(\"Failed to deserialize from {}. Use a new MTree.\", mtreeSnapshot.getPath());\n+      return new MTree();", "originalCommit": "1c01f8c85ed4441f8f2498de54374658c17698fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2OTI4OQ==", "url": "https://github.com/apache/iotdb/pull/1384#discussion_r443369289", "bodyText": "Sure, the logic is in MManager:\n   if (!mtreeSnapshot.exists()) {\n      mtree = new MTree();\n    } else {\n      mtree = MTree.deserializeFrom(mtreeSnapshot);\n    }\n\nWe could always ensure the correctness of .snapshot file since we have .snapshot.tmp file as a \"buffer\" file", "author": "samperson1997", "createdAt": "2020-06-22T07:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NzQ1Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "8118addea0d65c4eefa215980e2f60b088f9d6d6", "url": "https://github.com/apache/iotdb/commit/8118addea0d65c4eefa215980e2f60b088f9d6d6", "message": "Fix review comments", "committedDate": "2020-06-22T07:39:03Z", "type": "commit"}, {"oid": "dfcbb903a14f49850ee4714bb267e0cc3ffcd7fa", "url": "https://github.com/apache/iotdb/commit/dfcbb903a14f49850ee4714bb267e0cc3ffcd7fa", "message": "Add config of MtreeSnapshotThresholdTime", "committedDate": "2020-06-22T08:31:46Z", "type": "commit"}]}