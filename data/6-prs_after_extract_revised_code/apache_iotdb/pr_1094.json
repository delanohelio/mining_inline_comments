{"pr_number": 1094, "pr_title": "[IOTDB-613] Add the ability to persist and maintain currentterm for the raft node", "pr_createdAt": "2020-04-24T10:49:54Z", "pr_url": "https://github.com/apache/iotdb/pull/1094", "timeline": [{"oid": "4c00f033b1a91bb70fe50459e5addd6f578af65f", "url": "https://github.com/apache/iotdb/commit/4c00f033b1a91bb70fe50459e5addd6f578af65f", "message": "raftLogManager init", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "5b586785111694821ee5a370f4662c46d10870cc", "url": "https://github.com/apache/iotdb/commit/5b586785111694821ee5a370f4662c46d10870cc", "message": "fix Log Module", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "e9f80c22a18a554f656407eeffba5feafa71e0b9", "url": "https://github.com/apache/iotdb/commit/e9f80c22a18a554f656407eeffba5feafa71e0b9", "message": "fix bugs & add exception & sublist.clear()", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "b949fcfb385b3c02213a8f9830b93d766d5bf553", "url": "https://github.com/apache/iotdb/commit/b949fcfb385b3c02213a8f9830b93d766d5bf553", "message": "add unCommitEntryManager Junit test", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "6ed5fc882aaa0964401fdf2acfd409890e9133c6", "url": "https://github.com/apache/iotdb/commit/6ed5fc882aaa0964401fdf2acfd409890e9133c6", "message": "fix review", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "0735e6099c071f37bdd3fec86e38376cd3e706d2", "url": "https://github.com/apache/iotdb/commit/0735e6099c071f37bdd3fec86e38376cd3e706d2", "message": "add CommittedEntryManager test and fix", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "6f03fa00c1bdabb1851af9b77b27767e5f4f20c5", "url": "https://github.com/apache/iotdb/commit/6f03fa00c1bdabb1851af9b77b27767e5f4f20c5", "message": "add license", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "3bcd05fb5bfd540cd0d00214d520139a37d4f69c", "url": "https://github.com/apache/iotdb/commit/3bcd05fb5bfd540cd0d00214d520139a37d4f69c", "message": "add commitEntryManager JavaDoc", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "85b2acc41db102a44f45cdd86ef85a1b5850d738", "url": "https://github.com/apache/iotdb/commit/85b2acc41db102a44f45cdd86ef85a1b5850d738", "message": "remove internal unused exceptions & update logger format & fix bugs", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "55f6b81fa2f42c13e8bdb336a4195cba3aadfbcd", "url": "https://github.com/apache/iotdb/commit/55f6b81fa2f42c13e8bdb336a4195cba3aadfbcd", "message": "add raftlogmanager junit test & fix bugs", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "9af76a5722f452f34e0e71452bf7c88c357d068a", "url": "https://github.com/apache/iotdb/commit/9af76a5722f452f34e0e71452bf7c88c357d068a", "message": "add RaftLoaManager JavaDoc", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "5f1b62f88601fac1b69aa66af4cf6688b70cdc96", "url": "https://github.com/apache/iotdb/commit/5f1b62f88601fac1b69aa66af4cf6688b70cdc96", "message": "add applyingSnapshot & adjust logger level & update JavaDoc", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "60c647e448a8be3b2743aef62af302fa58e26935", "url": "https://github.com/apache/iotdb/commit/60c647e448a8be3b2743aef62af302fa58e26935", "message": "add maybeCommit for leader", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "e1a932ee973db187c5f8ea67f164aa4603265492", "url": "https://github.com/apache/iotdb/commit/e1a932ee973db187c5f8ea67f164aa4603265492", "message": "rename snapshot lastLogId to lastLogIndex", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "fb2a4e91783dbee51537e82ee0e5c9e3d519b483", "url": "https://github.com/apache/iotdb/commit/fb2a4e91783dbee51537e82ee0e5c9e3d519b483", "message": "Use native snapshot && update license", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "4269925f6e6632f89fdec34fe2b96b694a426465", "url": "https://github.com/apache/iotdb/commit/4269925f6e6632f89fdec34fe2b96b694a426465", "message": "add applier for raftLogManager", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "08739025f50308a86421c736dc24a33b1210b854", "url": "https://github.com/apache/iotdb/commit/08739025f50308a86421c736dc24a33b1210b854", "message": "rename some method to old version && add some placeholder method", "committedDate": "2020-04-16T04:17:50Z", "type": "commit"}, {"oid": "7843e579ab05bec77b081e0ca4144bf6ea25c9bf", "url": "https://github.com/apache/iotdb/commit/7843e579ab05bec77b081e0ca4144bf6ea25c9bf", "message": "initial embedded", "committedDate": "2020-04-16T04:24:25Z", "type": "commit"}, {"oid": "a7246eda04adf068e26eca4a3ae2adcfb40d032a", "url": "https://github.com/apache/iotdb/commit/a7246eda04adf068e26eca4a3ae2adcfb40d032a", "message": "add EmptyContentLog && add persistence && fix format && resolve conflict", "committedDate": "2020-04-17T07:18:26Z", "type": "commit"}, {"oid": "48f65255bb3d96fca94da33edc93ebaa5b9da141", "url": "https://github.com/apache/iotdb/commit/48f65255bb3d96fca94da33edc93ebaa5b9da141", "message": "Merge branch 'cluster_new' of https://github.com/apache/incubator-iotdb into cluster_new_log", "committedDate": "2020-04-17T07:24:38Z", "type": "commit"}, {"oid": "7da4f49032b2506a2a7048e2164ea88f8c957b0d", "url": "https://github.com/apache/iotdb/commit/7da4f49032b2506a2a7048e2164ea88f8c957b0d", "message": "minor fix", "committedDate": "2020-04-17T09:09:31Z", "type": "commit"}, {"oid": "e838ca4587541ccc284aac59f87ec2632774233c", "url": "https://github.com/apache/iotdb/commit/e838ca4587541ccc284aac59f87ec2632774233c", "message": "Merge branch 'cluster_new' of https://github.com/apache/incubator-iotdb into cluster_new_log", "committedDate": "2020-04-20T05:30:54Z", "type": "commit"}, {"oid": "22f5676a9430d084a7aa5c8cb98bc8fbab399889", "url": "https://github.com/apache/iotdb/commit/22f5676a9430d084a7aa5c8cb98bc8fbab399889", "message": "fix review", "committedDate": "2020-04-20T14:13:31Z", "type": "commit"}, {"oid": "914d561f51e97596dc181229977d6231b66b9c42", "url": "https://github.com/apache/iotdb/commit/914d561f51e97596dc181229977d6231b66b9c42", "message": "Merge branch 'cluster_new' into cluster_new_log", "committedDate": "2020-04-20T14:16:46Z", "type": "commit"}, {"oid": "8c12af0cefa87ed34b98ebe5c1fa96871c12f251", "url": "https://github.com/apache/iotdb/commit/8c12af0cefa87ed34b98ebe5c1fa96871c12f251", "message": "Merge branch 'cluster_new' of https://github.com/apache/incubator-iotdb into cluster_new_log", "committedDate": "2020-04-21T03:44:34Z", "type": "commit"}, {"oid": "91ef6ec694d0a4d0e7ee4749dffdbce8da10e915", "url": "https://github.com/apache/iotdb/commit/91ef6ec694d0a4d0e7ee4749dffdbce8da10e915", "message": "Merge branch 'cluster_new' into cluster_new_log", "committedDate": "2020-04-21T05:37:29Z", "type": "commit"}, {"oid": "88b85cf56704193734bd1a995441587a27bd8b05", "url": "https://github.com/apache/iotdb/commit/88b85cf56704193734bd1a995441587a27bd8b05", "message": "Merge branch 'cluster_new' into cluster_new_log", "committedDate": "2020-04-22T04:25:47Z", "type": "commit"}, {"oid": "9aaa03f78f636aae7fc352f580ba42c54c4a5148", "url": "https://github.com/apache/iotdb/commit/9aaa03f78f636aae7fc352f580ba42c54c4a5148", "message": "Merge branch 'cluster_new' into cluster_new_log", "committedDate": "2020-04-22T09:30:30Z", "type": "commit"}, {"oid": "7f7bd110d524e15fd05d841f808715b260eebc0e", "url": "https://github.com/apache/iotdb/commit/7f7bd110d524e15fd05d841f808715b260eebc0e", "message": "integrate persistence", "committedDate": "2020-04-22T09:34:06Z", "type": "commit"}, {"oid": "7f673577d70c09d1bb1d1d06ed37de4cb876dd45", "url": "https://github.com/apache/iotdb/commit/7f673577d70c09d1bb1d1d06ed37de4cb876dd45", "message": "add term persistence", "committedDate": "2020-04-22T09:34:06Z", "type": "commit"}, {"oid": "2b6f50759cd1400ddd0e41eaba6b95f79705c285", "url": "https://github.com/apache/iotdb/commit/2b6f50759cd1400ddd0e41eaba6b95f79705c285", "message": "fix truncateCommitted Entries", "committedDate": "2020-04-22T09:34:43Z", "type": "commit"}, {"oid": "05127533bcb9f66b1dde64d292db7f636897a3b9", "url": "https://github.com/apache/iotdb/commit/05127533bcb9f66b1dde64d292db7f636897a3b9", "message": "Merge branch 'cluster_new' into cluster_new_persistence_integration", "committedDate": "2020-04-23T04:02:15Z", "type": "commit"}, {"oid": "0638298eb558c53f03541c9b48550fe5e8b2ab94", "url": "https://github.com/apache/iotdb/commit/0638298eb558c53f03541c9b48550fe5e8b2ab94", "message": "Merge branch 'cluster_new' of github.com:Apache/incubator-iotdb into cluster_new_persistence_integration", "committedDate": "2020-04-23T05:31:54Z", "type": "commit"}, {"oid": "a593e207c30067f73fc94970079c80bb3dcb1eb0", "url": "https://github.com/apache/iotdb/commit/a593e207c30067f73fc94970079c80bb3dcb1eb0", "message": "minor fix", "committedDate": "2020-04-23T05:40:27Z", "type": "commit"}, {"oid": "90cefed8209890c8d5b1f0a944b9efdc218f35bd", "url": "https://github.com/apache/iotdb/commit/90cefed8209890c8d5b1f0a944b9efdc218f35bd", "message": "fix RPC out-of-order bugs", "committedDate": "2020-04-24T08:41:00Z", "type": "commit"}, {"oid": "14192ec1a68086588d88669418e4bd47daccfe19", "url": "https://github.com/apache/iotdb/commit/14192ec1a68086588d88669418e4bd47daccfe19", "message": "Merge branch 'cluster_new' into cluster_new_persistence_integration", "committedDate": "2020-04-24T08:43:12Z", "type": "commit"}, {"oid": "3d41b948ca8c9733d65caafa7a29f0ffd963876c", "url": "https://github.com/apache/iotdb/commit/3d41b948ca8c9733d65caafa7a29f0ffd963876c", "message": "Merge branch 'cluster_new' into cluster_new_persistence_integration", "committedDate": "2020-04-24T10:21:20Z", "type": "commit"}, {"oid": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e", "url": "https://github.com/apache/iotdb/commit/d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e", "message": "Merge branch 'cluster_new_persistence_integration' of github.com:Lebronl/incubator-iotdb into cluster_new_persistence_integration", "committedDate": "2020-04-24T10:27:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2MDIzNQ==", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415460235", "bodyText": "Please just decide one and do not leave commented code. Both are okay for me.", "author": "jt2594838", "createdAt": "2020-04-27T02:00:13Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java", "diffHunk": "@@ -126,11 +128,11 @@ public void truncateAndAppend(List<Log> appendingEntries) {\n         long len = after - offset;\n         if (len < 0) {\n             // the logs are being truncated to before our current offset portion, which is committed entries\n-            // unconditional obedience to the leader's request. Maybe throw a exception here is better\n-            offset = after;\n-            entries = appendingEntries;\n+            // Maybe throw a exception here is better\n             logger.error(\"The logs which first index is {} are going to truncate committed logs\",\n                 after);\n+//            throw new TruncateCommittedEntryException(appendingEntries.get(0).getCurrLogIndex(),\n+//                offset);", "originalCommit": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2ODA3NQ==", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415468075", "bodyText": "OK", "author": "LebronAl", "createdAt": "2020-04-27T02:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2MDIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "04c138c3447067fde84b7ed93dddb1e95165606b", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java b/cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java\nindex a298b05b7a..9a1c8cb038 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/log/manage/UnCommittedEntryManager.java\n\n@@ -128,11 +128,8 @@ public class UnCommittedEntryManager {\n         long len = after - offset;\n         if (len < 0) {\n             // the logs are being truncated to before our current offset portion, which is committed entries\n-            // Maybe throw a exception here is better\n             logger.error(\"The logs which first index is {} are going to truncate committed logs\",\n                 after);\n-//            throw new TruncateCommittedEntryException(appendingEntries.get(0).getCurrLogIndex(),\n-//                offset);\n         } else if (len == entries.size()) {\n             // after is the next index in the entries\n             // directly append\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2MjE2Mg==", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415462162", "bodyText": "Please check the indents.", "author": "jt2594838", "createdAt": "2020-04-27T02:07:25Z", "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/RaftLogManagerTest.java", "diffHunk": "@@ -48,12 +52,22 @@ public void apply(Log log) {\n \t\t\tappliedLogs.add(log);\n \t\t}\n \t};\n+\tprivate int testIdentifier = 1;\n \n \t@Before\n \tpublic void setUp() {\n \t\tappliedLogs = new HashSet<>();\n \t}\n \n+\t@After\n+\tpublic void tearDown() {\n+\t\tFile dir = new File(new SyncLogDequeSerializer(testIdentifier).getLogDir());\n+\t\tfor (File file : dir.listFiles()) {\n+\t\t\tfile.delete();\n+\t\t}\n+\t\tdir.delete();\n+\t}", "originalCommit": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3NTc1Mw==", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415475753", "bodyText": "It seems wired.In my local editor,the indents are properly.I will fix this.", "author": "LebronAl", "createdAt": "2020-04-27T02:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2MjE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "04c138c3447067fde84b7ed93dddb1e95165606b", "chunk": "diff --git a/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/RaftLogManagerTest.java b/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/RaftLogManagerTest.java\nindex 6a716bc5d2..237146fccb 100644\n--- a/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/RaftLogManagerTest.java\n+++ b/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/RaftLogManagerTest.java\n\n@@ -45,835 +45,835 @@ import org.junit.Test;\n \n public class RaftLogManagerTest {\n \n-\tprivate Set<Log> appliedLogs;\n-\tprivate LogApplier logApplier = new TestLogApplier() {\n-\t\t@Override\n-\t\tpublic void apply(Log log) {\n-\t\t\tappliedLogs.add(log);\n-\t\t}\n-\t};\n-\tprivate int testIdentifier = 1;\n-\n-\t@Before\n-\tpublic void setUp() {\n-\t\tappliedLogs = new HashSet<>();\n-\t}\n-\n-\t@After\n-\tpublic void tearDown() {\n-\t\tFile dir = new File(new SyncLogDequeSerializer(testIdentifier).getLogDir());\n-\t\tfor (File file : dir.listFiles()) {\n-\t\t\tfile.delete();\n-\t\t}\n-\t\tdir.delete();\n-\t}\n-\n-\t@Test\n-\tpublic void getTerm() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic long index;\n-\t\t\tpublic long testTerm;\n-\t\t\tpublic Class throwClass;\n-\n-\t\t\tpublic RaftLogManagerTester(long index, long testTerm, Class throwClass) {\n-\t\t\t\tthis.index = index;\n-\t\t\t\tthis.testTerm = testTerm;\n-\t\t\t\tthis.throwClass = throwClass;\n-\t\t\t}\n-\t\t}\n-\t\tlong offset = 100;\n-\t\tlong num = 100;\n-\t\tlong half = offset + num / 2;\n-\t\tlong last = offset + num;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tfor (long i = 1; i < num; i++) {\n-\t\t\tlong index = i;\n-\t\t\tinstance.append(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t}});\n-\t\t}\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\tadd(new RaftLogManagerTester(offset - 1, 0, EntryCompactedException.class));\n-\t\t\tadd(new RaftLogManagerTester(offset, offset, null));\n-\t\t\tadd(new RaftLogManagerTester(half, half, null));\n-\t\t\tadd(new RaftLogManagerTester(last - 1, last - 1, null));\n-\t\t\tadd(new RaftLogManagerTester(last, 0, EntryUnavailableException.class));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\ttry {\n-\t\t\t\tlong term = instance.getTerm(test.index);\n-\t\t\t\tif (test.throwClass != null) {\n-\t\t\t\t\tfail(\"The expected exception is not thrown\");\n-\t\t\t\t} else {\n-\t\t\t\t\tassertEquals(test.testTerm, term);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tif (!e.getClass().getName().equals(test.throwClass.getName())) {\n-\t\t\t\t\tfail(\"An unexpected exception was thrown.\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void getFirstIndex() {\n-\t\tlong offset = 100;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tassertEquals(offset + 1, instance.getFirstIndex());\n-\t\tlong newOffset = offset + 20;\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(newOffset, newOffset));\n-\t\tassertEquals(newOffset + 1, instance.getFirstIndex());\n-\t}\n-\n-\t@Test\n-\tpublic void getLastLogIndex() {\n-\t\tlong offset = 100;\n-\t\tlong num = 100;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tfor (long i = 1; i < num; i++) {\n-\t\t\tlong index = i;\n-\t\t\tinstance.append(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t}});\n-\t\t\tassertEquals(offset + index, instance.getLastLogIndex());\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void getLastLogTerm() {\n-\t\tlong offset = 100;\n-\t\tlong num = 100;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tfor (long i = 1; i < num; i++) {\n-\t\t\tlong index = i;\n-\t\t\tinstance.append(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t}});\n-\t\t\tassertEquals(offset + index, instance.getLastLogTerm());\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void maybeCommit() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic long leaderCommit;\n-\t\t\tpublic long term;\n-\t\t\tpublic long testCommittedEntryManagerSize;\n-\t\t\tpublic long testUnCommittedEntryManagerSize;\n-\t\t\tpublic long testCommitIndex;\n-\t\t\tpublic boolean testCommit;\n-\n-\t\t\tpublic RaftLogManagerTester(long leaderCommit, long term, long testCommittedEntryManagerSize,\n-\t\t\t\t\tlong testUnCommittedEntryManagerSize, long testCommitIndex, boolean testCommit) {\n-\t\t\t\tthis.leaderCommit = leaderCommit;\n-\t\t\t\tthis.term = term;\n-\t\t\t\tthis.testCommittedEntryManagerSize = testCommittedEntryManagerSize;\n-\t\t\t\tthis.testUnCommittedEntryManagerSize = testUnCommittedEntryManagerSize;\n-\t\t\t\tthis.testCommitIndex = testCommitIndex;\n-\t\t\t\tthis.testCommit = testCommit;\n-\t\t\t}\n-\t\t}\n-\t\tlong offset = 100;\n-\t\tlong num = 100;\n-\t\tlong half = offset + num / 2;\n-\t\tlong last = offset + num;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n-\t\tfor (long i = 1; i < num / 2; i++) {\n-\t\t\tlong index = i;\n-\t\t\ttry {\n-\t\t\t\tcommittedEntryManager.append(new ArrayList<Log>() {{\n-\t\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t\t}});\n-\t\t\t} catch (Exception e) {\n-\t\t\t}\n-\t\t}\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tfor (long i = num / 2; i < num; i++) {\n-\t\t\tlong index = i;\n-\t\t\tinstance.append(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t}});\n-\t\t}\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\t// term small leaderCommit\n-\t\t\tadd(new RaftLogManagerTester(offset - 10, offset - 9, num / 2, num / 2, half - 1, false));\n-\t\t\tadd(new RaftLogManagerTester(offset - 10, offset - 10, num / 2, num / 2, half - 1, false));\n-\t\t\tadd(new RaftLogManagerTester(half - 1, half - 1, num / 2, num / 2, half - 1, false));\n-\t\t\t// normal case\n-\t\t\tadd(new RaftLogManagerTester(half, half + 1, num / 2, num / 2, half - 1, false));\n-\t\t\tadd(new RaftLogManagerTester(half, half, num / 2 + 1, num / 2 - 1, half, true));\n-\t\t\tadd(new RaftLogManagerTester(last - 1, last - 1, num, 0, last - 1, true));\n-\t\t\t// test large leaderCommit\n-\t\t\tadd(new RaftLogManagerTester(last, last, num, 0, last - 1, false));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\tboolean answer = instance.maybeCommit(test.leaderCommit, test.term);\n-\t\t\tassertEquals(test.testCommittedEntryManagerSize,\n-\t\t\t\t\tinstance.committedEntryManager.getAllEntries().size());\n-\t\t\tassertEquals(test.testUnCommittedEntryManagerSize,\n-\t\t\t\t\tinstance.unCommittedEntryManager.getAllEntries().size());\n-\t\t\tassertEquals(test.testCommitIndex, instance.getCommitLogIndex());\n-\t\t\tassertEquals(test.testCommit, answer);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void commitTo() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic long commitTo;\n-\t\t\tpublic long testCommittedEntryManagerSize;\n-\t\t\tpublic long testUnCommittedEntryManagerSize;\n-\t\t\tpublic long testCommitIndex;\n-\n-\t\t\tpublic RaftLogManagerTester(long commitTo, long testCommittedEntryManagerSize,\n-\t\t\t\t\tlong testUnCommittedEntryManagerSize, long testCommitIndex) {\n-\t\t\t\tthis.commitTo = commitTo;\n-\t\t\t\tthis.testCommittedEntryManagerSize = testCommittedEntryManagerSize;\n-\t\t\t\tthis.testUnCommittedEntryManagerSize = testUnCommittedEntryManagerSize;\n-\t\t\t\tthis.testCommitIndex = testCommitIndex;\n-\t\t\t}\n-\t\t}\n-\t\tlong offset = 100;\n-\t\tlong num = 100;\n-\t\tlong half = offset + num / 2;\n-\t\tlong last = offset + num;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n-\t\tfor (long i = 1; i < num / 2; i++) {\n-\t\t\tlong index = i;\n-\t\t\ttry {\n-\t\t\t\tcommittedEntryManager.append(new ArrayList<Log>() {{\n-\t\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t\t}});\n-\t\t\t} catch (Exception e) {\n-\t\t\t}\n-\t\t}\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tfor (long i = num / 2; i < num; i++) {\n-\t\t\tlong index = i;\n-\t\t\tinstance.append(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t}});\n-\t\t}\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\tadd(new RaftLogManagerTester(offset - 10, num / 2, num / 2, half - 1));\n-\t\t\tadd(new RaftLogManagerTester(half - 1, num / 2, num / 2, half - 1));\n-\t\t\tadd(new RaftLogManagerTester(half, num / 2 + 1, num / 2 - 1, half));\n-\t\t\tadd(new RaftLogManagerTester(half + 10, num / 2 + 11, num / 2 - 11, half + 10));\n-\t\t\tadd(new RaftLogManagerTester(last - 1, num, 0, last - 1));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\tinstance.commitTo(test.commitTo);\n-\t\t\tassertEquals(test.testCommittedEntryManagerSize,\n-\t\t\t\t\tinstance.committedEntryManager.getAllEntries().size());\n-\t\t\tassertEquals(test.testUnCommittedEntryManagerSize,\n-\t\t\t\t\tinstance.unCommittedEntryManager.getAllEntries().size());\n-\t\t\tassertEquals(test.testCommitIndex, instance.getCommitLogIndex());\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void applyEntries() {\n-\t\tList<Log> testLogs = TestUtils.prepareTestLogs(10);\n-\t\tRaftLogManager instance = new RaftLogManager(new CommittedEntryManager(),\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tinstance.applyEntries(testLogs);\n-\t\tassertTrue(appliedLogs.containsAll(testLogs.subList(0, 10)));\n-\t}\n-\n-\t@Test\n-\tpublic void matchTerm() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic long index;\n-\t\t\tpublic long term;\n-\t\t\tpublic boolean testMatch;\n-\n-\t\t\tpublic RaftLogManagerTester(long index, long term, boolean testMatch) {\n-\t\t\t\tthis.index = index;\n-\t\t\t\tthis.term = term;\n-\t\t\t\tthis.testMatch = testMatch;\n-\t\t\t}\n-\t\t}\n-\t\tlong offset = 100;\n-\t\tlong num = 100;\n-\t\tlong half = offset + num / 2;\n-\t\tlong last = offset + num;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n-\t\tfor (long i = 1; i < num / 2; i++) {\n-\t\t\tlong index = i;\n-\t\t\ttry {\n-\t\t\t\tcommittedEntryManager.append(new ArrayList<Log>() {{\n-\t\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t\t}});\n-\t\t\t} catch (Exception e) {\n-\t\t\t}\n-\t\t}\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tfor (long i = num / 2; i < num; i++) {\n-\t\t\tlong index = i;\n-\t\t\tinstance.append(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t}});\n-\t\t}\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\tadd(new RaftLogManagerTester(offset - 1, offset - 1, false));\n-\t\t\tadd(new RaftLogManagerTester(offset, offset - 1, false));\n-\t\t\tadd(new RaftLogManagerTester(offset, offset, true));\n-\t\t\tadd(new RaftLogManagerTester(half, half, true));\n-\t\t\tadd(new RaftLogManagerTester(half + 1, half, false));\n-\t\t\tadd(new RaftLogManagerTester(last - 1, last - 1, true));\n-\t\t\tadd(new RaftLogManagerTester(last, last, false));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\tassertEquals(test.testMatch, instance.matchTerm(test.index, test.term));\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void maybeAppend() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic List<Log> entries;\n-\t\t\tpublic long lastIndex;\n-\t\t\tpublic long lastTerm;\n-\t\t\tpublic long leaderCommit;\n-\t\t\tpublic long testLastIndex;\n-\t\t\tpublic long testCommitIndex;\n-\t\t\tpublic boolean testAppend;\n-\n-\n-\t\t\tpublic RaftLogManagerTester(List<Log> entries, long lastIndex, long lastTerm,\n-\t\t\t\t\tlong leaderCommit, long testLastIndex, long testCommitIndex, boolean testAppend) {\n-\t\t\t\tthis.entries = entries;\n-\t\t\t\tthis.lastIndex = lastIndex;\n-\t\t\t\tthis.lastTerm = lastTerm;\n-\t\t\t\tthis.leaderCommit = leaderCommit;\n-\t\t\t\tthis.testLastIndex = testLastIndex;\n-\t\t\t\tthis.testCommitIndex = testCommitIndex;\n-\t\t\t\tthis.testAppend = testAppend;\n-\t\t\t}\n-\t\t}\n-\t\tList<Log> previousEntries = new ArrayList<Log>() {{\n-\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\tadd(new EmptyContentLog(3, 3));\n-\t\t}};\n-\t\tlong lastIndex = 3;\n-\t\tlong lastTerm = 3;\n-\t\tlong commit = 1;\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\t// not match: term is different\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm - 1, lastIndex, -1,\n-\t\t\t\t\tcommit, false));\n-\t\t\t// not match: index out of bound\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<>(), lastIndex + 1, lastTerm, lastIndex, -1,\n-\t\t\t\t\tcommit, false));\n-\t\t\t// match with the last existing entry\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm, lastIndex, lastIndex,\n-\t\t\t\t\tlastIndex, true));\n-\t\t\t// do not increase commit higher than newLastIndex\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm, lastIndex + 1, lastIndex,\n-\t\t\t\t\tlastIndex, true));\n-\t\t\t// commit up to the commit in the message\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm, lastIndex - 1, lastIndex,\n-\t\t\t\t\tlastIndex - 1, true));\n-\t\t\t// commit do not decrease\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm, 0, lastIndex, commit,\n-\t\t\t\t\ttrue));\n-\t\t\t// normal case\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(lastIndex + 1, 4));\n-\t\t\t}}, lastIndex, lastTerm, lastIndex, lastIndex + 1, lastIndex, true));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(lastIndex + 1, 4));\n-\t\t\t}}, lastIndex, lastTerm, lastIndex + 1, lastIndex + 1, lastIndex + 1, true));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(lastIndex + 1, 4));\n-\t\t\t\tadd(new EmptyContentLog(lastIndex + 2, 4));\n-\t\t\t}}, lastIndex, lastTerm, lastIndex + 2, lastIndex + 2, lastIndex + 2, true));\n-\t\t\t// do not increase commit higher than newLastIndex\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(lastIndex + 1, 4));\n-\t\t\t}}, lastIndex, lastTerm, lastIndex + 2, lastIndex + 1, lastIndex + 1, true));\n-\t\t\t// match with the the entry in the middle\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(lastIndex, 4));\n-\t\t\t}}, lastIndex - 1, lastTerm - 1, lastIndex, lastIndex, lastIndex, true));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(lastIndex - 1, 4));\n-\t\t\t}}, lastIndex - 2, lastTerm - 2, lastIndex, lastIndex - 1, lastIndex - 1, true));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(lastIndex - 1, 4));\n-\t\t\t\tadd(new EmptyContentLog(lastIndex, 4));\n-\t\t\t}}, lastIndex - 2, lastTerm - 2, lastIndex, lastIndex, lastIndex, true));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(0, 0));\n-\t\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\t\tinstance.append(previousEntries);\n-\t\t\tinstance.commitTo(commit);\n-\t\t\tassertEquals(test.testLastIndex,\n-\t\t\t\t\tinstance.maybeAppend(test.lastIndex, test.lastTerm, test.leaderCommit, test.entries));\n-\t\t\tassertEquals(test.testCommitIndex, instance.getCommitLogIndex());\n-\t\t\tif (test.testAppend) {\n-\t\t\t\ttry {\n-\t\t\t\t\tList<Log> entries = instance\n-\t\t\t\t\t\t\t.getEntries(instance.getLastLogIndex() - test.entries.size() + 1, Integer.MAX_VALUE);\n-\t\t\t\t\tassertEquals(test.entries, entries);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tfail(\"An unexpected exception was thrown.\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void appendBatch() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic List<Log> appendingEntries;\n-\t\t\tpublic List<Log> testEntries;\n-\t\t\tpublic long testLastIndexAfterAppend;\n-\t\t\tpublic long testOffset;\n-\n-\t\t\tpublic RaftLogManagerTester(List<Log> appendingEntries, List<Log> testEntries,\n-\t\t\t\t\tlong testLastIndexAfterAppend, long testOffset) {\n-\t\t\t\tthis.appendingEntries = appendingEntries;\n-\t\t\t\tthis.testEntries = testEntries;\n-\t\t\t\tthis.testLastIndexAfterAppend = testLastIndexAfterAppend;\n-\t\t\t\tthis.testOffset = testOffset;\n-\t\t\t}\n-\t\t}\n-\t\tList<Log> previousEntries = new ArrayList<Log>() {{\n-\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t}};\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<>(), new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t}}, 2, 3));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(3, 2));\n-\t\t\t}}, new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t\tadd(new EmptyContentLog(3, 2));\n-\t\t\t}}, 3, 3));\n-\t\t\t// conflicts with index 1\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 2));\n-\t\t\t}}, new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t}}, 2, 3));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(2, 3));\n-\t\t\t\tadd(new EmptyContentLog(3, 3));\n-\t\t\t}}, new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t}}, 2, 3));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(0, 0));\n-\t\t\ttry {\n-\t\t\t\tcommittedEntryManager.append(previousEntries);\n-\t\t\t} catch (Exception e) {\n-\t\t\t}\n-\t\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\t\tinstance.append(test.appendingEntries);\n-\t\t\ttry {\n-\t\t\t\tList<Log> entries = instance.getEntries(1, Integer.MAX_VALUE);\n-\t\t\t\tassertEquals(test.testEntries, entries);\n-\t\t\t\tassertEquals(test.testOffset, instance.unCommittedEntryManager.getFirstUnCommittedIndex());\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tfail(\"An unexpected exception was thrown.\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void appendSingle() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic Log appendingEntry;\n-\t\t\tpublic long testLastIndexAfterAppend;\n-\t\t\tpublic List<Log> testEntries;\n-\t\t\tpublic long testOffset;\n-\n-\t\t\tpublic RaftLogManagerTester(Log appendingEntry, List<Log> testEntries,\n-\t\t\t\t\tlong testLastIndexAfterAppend, long testOffset) {\n-\t\t\t\tthis.appendingEntry = appendingEntry;\n-\t\t\t\tthis.testEntries = testEntries;\n-\t\t\t\tthis.testLastIndexAfterAppend = testLastIndexAfterAppend;\n-\t\t\t\tthis.testOffset = testOffset;\n-\t\t\t}\n-\t\t}\n-\t\tList<Log> previousEntries = new ArrayList<Log>() {{\n-\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t}};\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\tadd(new RaftLogManagerTester(new EmptyContentLog(3, 2), new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t\tadd(new EmptyContentLog(3, 2));\n-\t\t\t}}, 3, 3));\n-\t\t\t// conflicts with index 1\n-\t\t\tadd(new RaftLogManagerTester(new EmptyContentLog(1, 2), new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t}}, 2, 3));\n-\t\t\tadd(new RaftLogManagerTester(new EmptyContentLog(2, 3), new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t}}, 2, 3));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(0, 0));\n-\t\t\ttry {\n-\t\t\t\tcommittedEntryManager.append(previousEntries);\n-\t\t\t} catch (Exception e) {\n-\t\t\t}\n-\t\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\t\tinstance.append(test.appendingEntry);\n-\t\t\ttry {\n-\t\t\t\tList<Log> entries = instance.getEntries(1, Integer.MAX_VALUE);\n-\t\t\t\tassertEquals(test.testEntries, entries);\n-\t\t\t\tassertEquals(test.testOffset, instance.unCommittedEntryManager.getFirstUnCommittedIndex());\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tfail(\"An unexpected exception was thrown.\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void checkBound() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic long low;\n-\t\t\tpublic long high;\n-\t\t\tpublic Class throwClass;\n-\n-\t\t\tpublic RaftLogManagerTester(long low, long high, Class throwClass) {\n-\t\t\t\tthis.low = low;\n-\t\t\t\tthis.high = high;\n-\t\t\t\tthis.throwClass = throwClass;\n-\t\t\t}\n-\t\t}\n-\t\tlong offset = 100;\n-\t\tlong num = 100;\n-\t\tlong half = offset + num / 2;\n-\t\tlong last = offset + num;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n-\t\tfor (long i = 1; i < num / 2; i++) {\n-\t\t\tlong index = i;\n-\t\t\ttry {\n-\t\t\t\tcommittedEntryManager.append(new ArrayList<Log>() {{\n-\t\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t\t}});\n-\t\t\t} catch (Exception e) {\n-\t\t\t}\n-\t\t}\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tfor (long i = num / 2; i < num; i++) {\n-\t\t\tlong index = i;\n-\t\t\tinstance.append(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t}});\n-\t\t}\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\tadd(new RaftLogManagerTester(offset - 1, offset + 1, EntryCompactedException.class));\n-\t\t\tadd(new RaftLogManagerTester(offset, offset + 1, EntryCompactedException.class));\n-\t\t\tadd(new RaftLogManagerTester(offset + 1, offset + 1, null));\n-\t\t\tadd(new RaftLogManagerTester(offset + 1, offset + 2, null));\n-\t\t\tadd(new RaftLogManagerTester(half + 1, half + 2, null));\n-\t\t\tadd(new RaftLogManagerTester(last, last, null));\n-\t\t\tadd(new RaftLogManagerTester(last + 1, last + 2, null));\n-\t\t\tadd(new RaftLogManagerTester(last + 1, last, GetEntriesWrongParametersException.class));\n-\t\t\tadd(new RaftLogManagerTester(half + 1, half, GetEntriesWrongParametersException.class));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\ttry {\n-\t\t\t\tinstance.checkBound(test.low, test.high);\n-\t\t\t\tif (test.throwClass != null) {\n-\t\t\t\t\tfail(\"The expected exception is not thrown\");\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tif (!e.getClass().getName().equals(test.throwClass.getName())) {\n-\t\t\t\t\tfail(\"An unexpected exception was thrown.\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void applyingSnapshot() {\n-\t\tlong index = 100;\n-\t\tlong term = 100;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(index, term));\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tinstance.applyingSnapshot(new SimpleSnapshot(index, term));\n-\t\tassertEquals(instance.getLastLogIndex(), term);\n-\t\tList<Log> entries = new ArrayList<>();\n-\t\tfor (int i = 1; i <= 10; i++) {\n-\t\t\tentries.add(new EmptyContentLog(index + i, index + i));\n-\t\t}\n-\t\tinstance.maybeAppend(index, term, index, entries);\n-\t\tassertEquals(1, instance.committedEntryManager.getAllEntries().size());\n-\t\tassertEquals(10, instance.unCommittedEntryManager.getAllEntries().size());\n-\t\tassertEquals(100, instance.getCommitLogIndex());\n-\t\tinstance.commitTo(105);\n-\t\tassertEquals(101, instance.getFirstIndex());\n-\t\tassertEquals(6, instance.committedEntryManager.getAllEntries().size());\n-\t\tassertEquals(5, instance.unCommittedEntryManager.getAllEntries().size());\n-\t\tassertEquals(105, instance.getCommitLogIndex());\n-\t\tinstance.applyingSnapshot(new SimpleSnapshot(103, 103));\n-\t\tassertEquals(104, instance.getFirstIndex());\n-\t\tassertEquals(3, instance.committedEntryManager.getAllEntries().size());\n-\t\tassertEquals(5, instance.unCommittedEntryManager.getAllEntries().size());\n-\t\tassertEquals(105, instance.getCommitLogIndex());\n-\t\tinstance.applyingSnapshot(new SimpleSnapshot(108, 108));\n-\t\tassertEquals(109, instance.getFirstIndex());\n-\t\tassertEquals(1, instance.committedEntryManager.getAllEntries().size());\n-\t\tassertEquals(0, instance.unCommittedEntryManager.getAllEntries().size());\n-\t\tassertEquals(108, instance.getCommitLogIndex());\n-\t}\n-\n-\t@Test\n-\tpublic void getEntries() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic long low;\n-\t\t\tpublic long high;\n-\t\t\tpublic List<Log> testEntries;\n-\t\t\tpublic Class throwClass;\n-\n-\t\t\tpublic RaftLogManagerTester(long low, long high, List<Log> testEntries, Class throwClass) {\n-\t\t\t\tthis.low = low;\n-\t\t\t\tthis.high = high;\n-\t\t\t\tthis.testEntries = testEntries;\n-\t\t\t\tthis.throwClass = throwClass;\n-\t\t\t}\n-\t\t}\n-\t\tlong offset = 100;\n-\t\tlong num = 100;\n-\t\tlong half = offset + num / 2;\n-\t\tlong last = offset + num;\n-\t\tCommittedEntryManager committedEntryManager = new CommittedEntryManager();\n-\t\tcommittedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n-\t\tfor (long i = 1; i < num / 2; i++) {\n-\t\t\tlong index = i;\n-\t\t\ttry {\n-\t\t\t\tcommittedEntryManager.append(new ArrayList<Log>() {{\n-\t\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t\t}});\n-\t\t\t} catch (Exception e) {\n-\t\t\t}\n-\t\t}\n-\t\tRaftLogManager instance = new RaftLogManager(committedEntryManager,\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tfor (long i = num / 2; i < num; i++) {\n-\t\t\tlong index = i;\n-\t\t\tinstance.append(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(offset + index, offset + index));\n-\t\t\t}});\n-\t\t}\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\tadd(new RaftLogManagerTester(offset + 1, offset + 1, new ArrayList<>(), null));\n-\t\t\tadd(new RaftLogManagerTester(offset + 1, offset + 2, new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(offset + 1, offset + 1));\n-\t\t\t}}, null));\n-\t\t\tadd(new RaftLogManagerTester(half - 1, half + 1, new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(half - 1, half - 1));\n-\t\t\t\tadd(new EmptyContentLog(half, half));\n-\t\t\t}}, null));\n-\t\t\tadd(new RaftLogManagerTester(half, half + 1, new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(half, half));\n-\t\t\t}}, null));\n-\t\t\tadd(new RaftLogManagerTester(last - 1, last, new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(last - 1, last - 1));\n-\t\t\t}}, null));\n-\t\t\t// test EntryUnavailable\n-\t\t\tadd(new RaftLogManagerTester(last - 1, last + 1, new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(last - 1, last - 1));\n-\t\t\t}}, null));\n-\t\t\tadd(new RaftLogManagerTester(last, last + 1, new ArrayList<>(), null));\n-\t\t\tadd(new RaftLogManagerTester(last + 1, last + 2, new ArrayList<>(), null));\n-\t\t\t// test GetEntriesWrongParametersException\n-\t\t\tadd(new RaftLogManagerTester(offset + 1, offset, null,\n-\t\t\t\t\tGetEntriesWrongParametersException.class));\n-\t\t\t// test EntryCompactedException\n-\t\t\tadd(new RaftLogManagerTester(offset - 1, offset + 1, null, EntryCompactedException.class));\n-\t\t\tadd(new RaftLogManagerTester(offset, offset + 1, null, EntryCompactedException.class));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\ttry {\n-\t\t\t\tList<Log> answer = instance.getEntries(test.low, test.high);\n-\t\t\t\tif (test.throwClass != null) {\n-\t\t\t\t\tfail(\"The expected exception is not thrown\");\n-\t\t\t\t} else {\n-\t\t\t\t\tassertEquals(test.testEntries, answer);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tif (!e.getClass().getName().equals(test.throwClass.getName())) {\n-\t\t\t\t\tfail(\"An unexpected exception was thrown.\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void findConflict() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic List<Log> conflictEntries;\n-\t\t\tpublic long testConflict;\n-\n-\t\t\tpublic RaftLogManagerTester(List<Log> conflictEntries, long testConflict) {\n-\t\t\t\tthis.conflictEntries = conflictEntries;\n-\t\t\t\tthis.testConflict = testConflict;\n-\t\t\t}\n-\t\t}\n-\t\tList<Log> previousEntries = new ArrayList<Log>() {{\n-\t\t\tadd(new EmptyContentLog(0, 0));\n-\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t}};\n-\t\tRaftLogManager instance = new RaftLogManager(new CommittedEntryManager(),\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tinstance.append(previousEntries);\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\t// no conflict, empty ent\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<>(), 0));\n-\t\t\t// no conflict\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(0, 0));\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t}}, 0));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t}}, 0));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t}}, 0));\n-\t\t\t// no conflict, but has new entries\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(0, 0));\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t\tadd(new EmptyContentLog(3, 3));\n-\t\t\t\tadd(new EmptyContentLog(4, 3));\n-\t\t\t}}, 3));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t\tadd(new EmptyContentLog(3, 3));\n-\t\t\t\tadd(new EmptyContentLog(4, 3));\n-\t\t\t}}, 3));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t\t\tadd(new EmptyContentLog(3, 3));\n-\t\t\t\tadd(new EmptyContentLog(4, 3));\n-\t\t\t}}, 3));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(3, 3));\n-\t\t\t\tadd(new EmptyContentLog(4, 3));\n-\t\t\t}}, 3));\n-\t\t\t// conflicts with existing entries\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(0, 4));\n-\t\t\t\tadd(new EmptyContentLog(1, 4));\n-\t\t\t}}, 0));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(1, 2));\n-\t\t\t\tadd(new EmptyContentLog(2, 4));\n-\t\t\t\tadd(new EmptyContentLog(3, 4));\n-\t\t\t}}, 1));\n-\t\t\tadd(new RaftLogManagerTester(new ArrayList<Log>() {{\n-\t\t\t\tadd(new EmptyContentLog(2, 1));\n-\t\t\t\tadd(new EmptyContentLog(3, 2));\n-\t\t\t\tadd(new EmptyContentLog(4, 4));\n-\t\t\t\tadd(new EmptyContentLog(5, 4));\n-\t\t\t}}, 2));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\tassertEquals(test.testConflict, instance.findConflict(test.conflictEntries));\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void isLogUpToDate() {\n-\t\tclass RaftLogManagerTester {\n-\n-\t\t\tpublic long lastIndex;\n-\t\t\tpublic long lastTerm;\n-\t\t\tpublic boolean isUpToDate;\n-\n-\t\t\tpublic RaftLogManagerTester(long lastIndex, long lastTerm, boolean isUpToDate) {\n-\t\t\t\tthis.lastIndex = lastIndex;\n-\t\t\t\tthis.lastTerm = lastTerm;\n-\t\t\t\tthis.isUpToDate = isUpToDate;\n-\t\t\t}\n-\t\t}\n-\t\tList<Log> previousEntries = new ArrayList<Log>() {{\n-\t\t\tadd(new EmptyContentLog(0, 0));\n-\t\t\tadd(new EmptyContentLog(1, 1));\n-\t\t\tadd(new EmptyContentLog(2, 2));\n-\t\t}};\n-\t\tRaftLogManager instance = new RaftLogManager(new CommittedEntryManager(),\n-\t\t\t\tnew SyncLogDequeSerializer(testIdentifier), logApplier);\n-\t\tinstance.append(previousEntries);\n-\t\tList<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n-\t\t\t// greater term, ignore lastIndex\n-\t\t\tadd(new RaftLogManagerTester(instance.getLastLogIndex() - 1, 3, true));\n-\t\t\tadd(new RaftLogManagerTester(instance.getLastLogIndex(), 3, true));\n-\t\t\tadd(new RaftLogManagerTester(instance.getLastLogIndex() + 1, 3, true));\n-\t\t\t// smaller term, ignore lastIndex\n-\t\t\tadd(new RaftLogManagerTester(instance.getLastLogIndex() - 1, 1, false));\n-\t\t\tadd(new RaftLogManagerTester(instance.getLastLogIndex(), 1, false));\n-\t\t\tadd(new RaftLogManagerTester(instance.getLastLogIndex() + 1, 1, false));\n-\t\t\t// equal term, equal or lager lastIndex wins\n-\t\t\tadd(new RaftLogManagerTester(instance.getLastLogIndex() - 1, 2, false));\n-\t\t\tadd(new RaftLogManagerTester(instance.getLastLogIndex(), 2, true));\n-\t\t\tadd(new RaftLogManagerTester(instance.getLastLogIndex() + 1, 2, true));\n-\t\t}};\n-\t\tfor (RaftLogManagerTester test : tests) {\n-\t\t\tassertEquals(test.isUpToDate, instance.isLogUpToDate(test.lastTerm, test.lastIndex));\n-\t\t}\n-\t}\n+  private Set<Log> appliedLogs;\n+  private LogApplier logApplier = new TestLogApplier() {\n+    @Override\n+    public void apply(Log log) {\n+      appliedLogs.add(log);\n+    }\n+  };\n+  private int testIdentifier = 1;\n+\n+  @Before\n+  public void setUp() {\n+    appliedLogs = new HashSet<>();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    File dir = new File(new SyncLogDequeSerializer(testIdentifier).getLogDir());\n+    for (File file : dir.listFiles()) {\n+      file.delete();\n+    }\n+    dir.delete();\n+  }\n+\n+  @Test\n+  public void getTerm() {\n+    class RaftLogManagerTester {\n+\n+      public long index;\n+      public long testTerm;\n+      public Class throwClass;\n+\n+      public RaftLogManagerTester(long index, long testTerm, Class throwClass) {\n+        this.index = index;\n+        this.testTerm = testTerm;\n+        this.throwClass = throwClass;\n+      }\n+    }\n+    long offset = 100;\n+    long num = 100;\n+    long half = offset + num / 2;\n+    long last = offset + num;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    for (long i = 1; i < num; i++) {\n+      long index = i;\n+      instance.append(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(offset + index, offset + index));\n+      }});\n+    }\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      add(new RaftLogManagerTester(offset - 1, 0, EntryCompactedException.class));\n+      add(new RaftLogManagerTester(offset, offset, null));\n+      add(new RaftLogManagerTester(half, half, null));\n+      add(new RaftLogManagerTester(last - 1, last - 1, null));\n+      add(new RaftLogManagerTester(last, 0, EntryUnavailableException.class));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      try {\n+        long term = instance.getTerm(test.index);\n+        if (test.throwClass != null) {\n+          fail(\"The expected exception is not thrown\");\n+        } else {\n+          assertEquals(test.testTerm, term);\n+        }\n+      } catch (Exception e) {\n+        if (!e.getClass().getName().equals(test.throwClass.getName())) {\n+          fail(\"An unexpected exception was thrown.\");\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void getFirstIndex() {\n+    long offset = 100;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    assertEquals(offset + 1, instance.getFirstIndex());\n+    long newOffset = offset + 20;\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(newOffset, newOffset));\n+    assertEquals(newOffset + 1, instance.getFirstIndex());\n+  }\n+\n+  @Test\n+  public void getLastLogIndex() {\n+    long offset = 100;\n+    long num = 100;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    for (long i = 1; i < num; i++) {\n+      long index = i;\n+      instance.append(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(offset + index, offset + index));\n+      }});\n+      assertEquals(offset + index, instance.getLastLogIndex());\n+    }\n+  }\n+\n+  @Test\n+  public void getLastLogTerm() {\n+    long offset = 100;\n+    long num = 100;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    for (long i = 1; i < num; i++) {\n+      long index = i;\n+      instance.append(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(offset + index, offset + index));\n+      }});\n+      assertEquals(offset + index, instance.getLastLogTerm());\n+    }\n+  }\n+\n+  @Test\n+  public void maybeCommit() {\n+    class RaftLogManagerTester {\n+\n+      public long leaderCommit;\n+      public long term;\n+      public long testCommittedEntryManagerSize;\n+      public long testUnCommittedEntryManagerSize;\n+      public long testCommitIndex;\n+      public boolean testCommit;\n+\n+      public RaftLogManagerTester(long leaderCommit, long term, long testCommittedEntryManagerSize,\n+          long testUnCommittedEntryManagerSize, long testCommitIndex, boolean testCommit) {\n+        this.leaderCommit = leaderCommit;\n+        this.term = term;\n+        this.testCommittedEntryManagerSize = testCommittedEntryManagerSize;\n+        this.testUnCommittedEntryManagerSize = testUnCommittedEntryManagerSize;\n+        this.testCommitIndex = testCommitIndex;\n+        this.testCommit = testCommit;\n+      }\n+    }\n+    long offset = 100;\n+    long num = 100;\n+    long half = offset + num / 2;\n+    long last = offset + num;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n+    for (long i = 1; i < num / 2; i++) {\n+      long index = i;\n+      try {\n+        committedEntryManager.append(new ArrayList<Log>() {{\n+          add(new EmptyContentLog(offset + index, offset + index));\n+        }});\n+      } catch (Exception e) {\n+      }\n+    }\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    for (long i = num / 2; i < num; i++) {\n+      long index = i;\n+      instance.append(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(offset + index, offset + index));\n+      }});\n+    }\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      // term small leaderCommit\n+      add(new RaftLogManagerTester(offset - 10, offset - 9, num / 2, num / 2, half - 1, false));\n+      add(new RaftLogManagerTester(offset - 10, offset - 10, num / 2, num / 2, half - 1, false));\n+      add(new RaftLogManagerTester(half - 1, half - 1, num / 2, num / 2, half - 1, false));\n+      // normal case\n+      add(new RaftLogManagerTester(half, half + 1, num / 2, num / 2, half - 1, false));\n+      add(new RaftLogManagerTester(half, half, num / 2 + 1, num / 2 - 1, half, true));\n+      add(new RaftLogManagerTester(last - 1, last - 1, num, 0, last - 1, true));\n+      // test large leaderCommit\n+      add(new RaftLogManagerTester(last, last, num, 0, last - 1, false));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      boolean answer = instance.maybeCommit(test.leaderCommit, test.term);\n+      assertEquals(test.testCommittedEntryManagerSize,\n+          instance.committedEntryManager.getAllEntries().size());\n+      assertEquals(test.testUnCommittedEntryManagerSize,\n+          instance.unCommittedEntryManager.getAllEntries().size());\n+      assertEquals(test.testCommitIndex, instance.getCommitLogIndex());\n+      assertEquals(test.testCommit, answer);\n+    }\n+  }\n+\n+  @Test\n+  public void commitTo() {\n+    class RaftLogManagerTester {\n+\n+      public long commitTo;\n+      public long testCommittedEntryManagerSize;\n+      public long testUnCommittedEntryManagerSize;\n+      public long testCommitIndex;\n+\n+      public RaftLogManagerTester(long commitTo, long testCommittedEntryManagerSize,\n+          long testUnCommittedEntryManagerSize, long testCommitIndex) {\n+        this.commitTo = commitTo;\n+        this.testCommittedEntryManagerSize = testCommittedEntryManagerSize;\n+        this.testUnCommittedEntryManagerSize = testUnCommittedEntryManagerSize;\n+        this.testCommitIndex = testCommitIndex;\n+      }\n+    }\n+    long offset = 100;\n+    long num = 100;\n+    long half = offset + num / 2;\n+    long last = offset + num;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n+    for (long i = 1; i < num / 2; i++) {\n+      long index = i;\n+      try {\n+        committedEntryManager.append(new ArrayList<Log>() {{\n+          add(new EmptyContentLog(offset + index, offset + index));\n+        }});\n+      } catch (Exception e) {\n+      }\n+    }\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    for (long i = num / 2; i < num; i++) {\n+      long index = i;\n+      instance.append(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(offset + index, offset + index));\n+      }});\n+    }\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      add(new RaftLogManagerTester(offset - 10, num / 2, num / 2, half - 1));\n+      add(new RaftLogManagerTester(half - 1, num / 2, num / 2, half - 1));\n+      add(new RaftLogManagerTester(half, num / 2 + 1, num / 2 - 1, half));\n+      add(new RaftLogManagerTester(half + 10, num / 2 + 11, num / 2 - 11, half + 10));\n+      add(new RaftLogManagerTester(last - 1, num, 0, last - 1));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      instance.commitTo(test.commitTo);\n+      assertEquals(test.testCommittedEntryManagerSize,\n+          instance.committedEntryManager.getAllEntries().size());\n+      assertEquals(test.testUnCommittedEntryManagerSize,\n+          instance.unCommittedEntryManager.getAllEntries().size());\n+      assertEquals(test.testCommitIndex, instance.getCommitLogIndex());\n+    }\n+  }\n+\n+  @Test\n+  public void applyEntries() {\n+    List<Log> testLogs = TestUtils.prepareTestLogs(10);\n+    RaftLogManager instance = new RaftLogManager(new CommittedEntryManager(),\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    instance.applyEntries(testLogs);\n+    assertTrue(appliedLogs.containsAll(testLogs.subList(0, 10)));\n+  }\n+\n+  @Test\n+  public void matchTerm() {\n+    class RaftLogManagerTester {\n+\n+      public long index;\n+      public long term;\n+      public boolean testMatch;\n+\n+      public RaftLogManagerTester(long index, long term, boolean testMatch) {\n+        this.index = index;\n+        this.term = term;\n+        this.testMatch = testMatch;\n+      }\n+    }\n+    long offset = 100;\n+    long num = 100;\n+    long half = offset + num / 2;\n+    long last = offset + num;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n+    for (long i = 1; i < num / 2; i++) {\n+      long index = i;\n+      try {\n+        committedEntryManager.append(new ArrayList<Log>() {{\n+          add(new EmptyContentLog(offset + index, offset + index));\n+        }});\n+      } catch (Exception e) {\n+      }\n+    }\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    for (long i = num / 2; i < num; i++) {\n+      long index = i;\n+      instance.append(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(offset + index, offset + index));\n+      }});\n+    }\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      add(new RaftLogManagerTester(offset - 1, offset - 1, false));\n+      add(new RaftLogManagerTester(offset, offset - 1, false));\n+      add(new RaftLogManagerTester(offset, offset, true));\n+      add(new RaftLogManagerTester(half, half, true));\n+      add(new RaftLogManagerTester(half + 1, half, false));\n+      add(new RaftLogManagerTester(last - 1, last - 1, true));\n+      add(new RaftLogManagerTester(last, last, false));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      assertEquals(test.testMatch, instance.matchTerm(test.index, test.term));\n+    }\n+  }\n+\n+  @Test\n+  public void maybeAppend() {\n+    class RaftLogManagerTester {\n+\n+      public List<Log> entries;\n+      public long lastIndex;\n+      public long lastTerm;\n+      public long leaderCommit;\n+      public long testLastIndex;\n+      public long testCommitIndex;\n+      public boolean testAppend;\n+\n+\n+      public RaftLogManagerTester(List<Log> entries, long lastIndex, long lastTerm,\n+          long leaderCommit, long testLastIndex, long testCommitIndex, boolean testAppend) {\n+        this.entries = entries;\n+        this.lastIndex = lastIndex;\n+        this.lastTerm = lastTerm;\n+        this.leaderCommit = leaderCommit;\n+        this.testLastIndex = testLastIndex;\n+        this.testCommitIndex = testCommitIndex;\n+        this.testAppend = testAppend;\n+      }\n+    }\n+    List<Log> previousEntries = new ArrayList<Log>() {{\n+      add(new EmptyContentLog(1, 1));\n+      add(new EmptyContentLog(2, 2));\n+      add(new EmptyContentLog(3, 3));\n+    }};\n+    long lastIndex = 3;\n+    long lastTerm = 3;\n+    long commit = 1;\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      // not match: term is different\n+      add(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm - 1, lastIndex, -1,\n+          commit, false));\n+      // not match: index out of bound\n+      add(new RaftLogManagerTester(new ArrayList<>(), lastIndex + 1, lastTerm, lastIndex, -1,\n+          commit, false));\n+      // match with the last existing entry\n+      add(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm, lastIndex, lastIndex,\n+          lastIndex, true));\n+      // do not increase commit higher than newLastIndex\n+      add(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm, lastIndex + 1, lastIndex,\n+          lastIndex, true));\n+      // commit up to the commit in the message\n+      add(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm, lastIndex - 1, lastIndex,\n+          lastIndex - 1, true));\n+      // commit do not decrease\n+      add(new RaftLogManagerTester(new ArrayList<>(), lastIndex, lastTerm, 0, lastIndex, commit,\n+          true));\n+      // normal case\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(lastIndex + 1, 4));\n+      }}, lastIndex, lastTerm, lastIndex, lastIndex + 1, lastIndex, true));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(lastIndex + 1, 4));\n+      }}, lastIndex, lastTerm, lastIndex + 1, lastIndex + 1, lastIndex + 1, true));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(lastIndex + 1, 4));\n+        add(new EmptyContentLog(lastIndex + 2, 4));\n+      }}, lastIndex, lastTerm, lastIndex + 2, lastIndex + 2, lastIndex + 2, true));\n+      // do not increase commit higher than newLastIndex\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(lastIndex + 1, 4));\n+      }}, lastIndex, lastTerm, lastIndex + 2, lastIndex + 1, lastIndex + 1, true));\n+      // match with the the entry in the middle\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(lastIndex, 4));\n+      }}, lastIndex - 1, lastTerm - 1, lastIndex, lastIndex, lastIndex, true));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(lastIndex - 1, 4));\n+      }}, lastIndex - 2, lastTerm - 2, lastIndex, lastIndex - 1, lastIndex - 1, true));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(lastIndex - 1, 4));\n+        add(new EmptyContentLog(lastIndex, 4));\n+      }}, lastIndex - 2, lastTerm - 2, lastIndex, lastIndex, lastIndex, true));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+      committedEntryManager.applyingSnapshot(new SimpleSnapshot(0, 0));\n+      RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+          new SyncLogDequeSerializer(testIdentifier), logApplier);\n+      instance.append(previousEntries);\n+      instance.commitTo(commit);\n+      assertEquals(test.testLastIndex,\n+          instance.maybeAppend(test.lastIndex, test.lastTerm, test.leaderCommit, test.entries));\n+      assertEquals(test.testCommitIndex, instance.getCommitLogIndex());\n+      if (test.testAppend) {\n+        try {\n+          List<Log> entries = instance\n+              .getEntries(instance.getLastLogIndex() - test.entries.size() + 1, Integer.MAX_VALUE);\n+          assertEquals(test.entries, entries);\n+        } catch (Exception e) {\n+          fail(\"An unexpected exception was thrown.\");\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void appendBatch() {\n+    class RaftLogManagerTester {\n+\n+      public List<Log> appendingEntries;\n+      public List<Log> testEntries;\n+      public long testLastIndexAfterAppend;\n+      public long testOffset;\n+\n+      public RaftLogManagerTester(List<Log> appendingEntries, List<Log> testEntries,\n+          long testLastIndexAfterAppend, long testOffset) {\n+        this.appendingEntries = appendingEntries;\n+        this.testEntries = testEntries;\n+        this.testLastIndexAfterAppend = testLastIndexAfterAppend;\n+        this.testOffset = testOffset;\n+      }\n+    }\n+    List<Log> previousEntries = new ArrayList<Log>() {{\n+      add(new EmptyContentLog(1, 1));\n+      add(new EmptyContentLog(2, 2));\n+    }};\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      add(new RaftLogManagerTester(new ArrayList<>(), new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+      }}, 2, 3));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(3, 2));\n+      }}, new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+        add(new EmptyContentLog(3, 2));\n+      }}, 3, 3));\n+      // conflicts with index 1\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 2));\n+      }}, new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+      }}, 2, 3));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(2, 3));\n+        add(new EmptyContentLog(3, 3));\n+      }}, new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+      }}, 2, 3));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+      committedEntryManager.applyingSnapshot(new SimpleSnapshot(0, 0));\n+      try {\n+        committedEntryManager.append(previousEntries);\n+      } catch (Exception e) {\n+      }\n+      RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+          new SyncLogDequeSerializer(testIdentifier), logApplier);\n+      instance.append(test.appendingEntries);\n+      try {\n+        List<Log> entries = instance.getEntries(1, Integer.MAX_VALUE);\n+        assertEquals(test.testEntries, entries);\n+        assertEquals(test.testOffset, instance.unCommittedEntryManager.getFirstUnCommittedIndex());\n+      } catch (Exception e) {\n+        fail(\"An unexpected exception was thrown.\");\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void appendSingle() {\n+    class RaftLogManagerTester {\n+\n+      public Log appendingEntry;\n+      public long testLastIndexAfterAppend;\n+      public List<Log> testEntries;\n+      public long testOffset;\n+\n+      public RaftLogManagerTester(Log appendingEntry, List<Log> testEntries,\n+          long testLastIndexAfterAppend, long testOffset) {\n+        this.appendingEntry = appendingEntry;\n+        this.testEntries = testEntries;\n+        this.testLastIndexAfterAppend = testLastIndexAfterAppend;\n+        this.testOffset = testOffset;\n+      }\n+    }\n+    List<Log> previousEntries = new ArrayList<Log>() {{\n+      add(new EmptyContentLog(1, 1));\n+      add(new EmptyContentLog(2, 2));\n+    }};\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      add(new RaftLogManagerTester(new EmptyContentLog(3, 2), new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+        add(new EmptyContentLog(3, 2));\n+      }}, 3, 3));\n+      // conflicts with index 1\n+      add(new RaftLogManagerTester(new EmptyContentLog(1, 2), new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+      }}, 2, 3));\n+      add(new RaftLogManagerTester(new EmptyContentLog(2, 3), new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+      }}, 2, 3));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+      committedEntryManager.applyingSnapshot(new SimpleSnapshot(0, 0));\n+      try {\n+        committedEntryManager.append(previousEntries);\n+      } catch (Exception e) {\n+      }\n+      RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+          new SyncLogDequeSerializer(testIdentifier), logApplier);\n+      instance.append(test.appendingEntry);\n+      try {\n+        List<Log> entries = instance.getEntries(1, Integer.MAX_VALUE);\n+        assertEquals(test.testEntries, entries);\n+        assertEquals(test.testOffset, instance.unCommittedEntryManager.getFirstUnCommittedIndex());\n+      } catch (Exception e) {\n+        fail(\"An unexpected exception was thrown.\");\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void checkBound() {\n+    class RaftLogManagerTester {\n+\n+      public long low;\n+      public long high;\n+      public Class throwClass;\n+\n+      public RaftLogManagerTester(long low, long high, Class throwClass) {\n+        this.low = low;\n+        this.high = high;\n+        this.throwClass = throwClass;\n+      }\n+    }\n+    long offset = 100;\n+    long num = 100;\n+    long half = offset + num / 2;\n+    long last = offset + num;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n+    for (long i = 1; i < num / 2; i++) {\n+      long index = i;\n+      try {\n+        committedEntryManager.append(new ArrayList<Log>() {{\n+          add(new EmptyContentLog(offset + index, offset + index));\n+        }});\n+      } catch (Exception e) {\n+      }\n+    }\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    for (long i = num / 2; i < num; i++) {\n+      long index = i;\n+      instance.append(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(offset + index, offset + index));\n+      }});\n+    }\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      add(new RaftLogManagerTester(offset - 1, offset + 1, EntryCompactedException.class));\n+      add(new RaftLogManagerTester(offset, offset + 1, EntryCompactedException.class));\n+      add(new RaftLogManagerTester(offset + 1, offset + 1, null));\n+      add(new RaftLogManagerTester(offset + 1, offset + 2, null));\n+      add(new RaftLogManagerTester(half + 1, half + 2, null));\n+      add(new RaftLogManagerTester(last, last, null));\n+      add(new RaftLogManagerTester(last + 1, last + 2, null));\n+      add(new RaftLogManagerTester(last + 1, last, GetEntriesWrongParametersException.class));\n+      add(new RaftLogManagerTester(half + 1, half, GetEntriesWrongParametersException.class));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      try {\n+        instance.checkBound(test.low, test.high);\n+        if (test.throwClass != null) {\n+          fail(\"The expected exception is not thrown\");\n+        }\n+      } catch (Exception e) {\n+        if (!e.getClass().getName().equals(test.throwClass.getName())) {\n+          fail(\"An unexpected exception was thrown.\");\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void applyingSnapshot() {\n+    long index = 100;\n+    long term = 100;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(index, term));\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    instance.applyingSnapshot(new SimpleSnapshot(index, term));\n+    assertEquals(instance.getLastLogIndex(), term);\n+    List<Log> entries = new ArrayList<>();\n+    for (int i = 1; i <= 10; i++) {\n+      entries.add(new EmptyContentLog(index + i, index + i));\n+    }\n+    instance.maybeAppend(index, term, index, entries);\n+    assertEquals(1, instance.committedEntryManager.getAllEntries().size());\n+    assertEquals(10, instance.unCommittedEntryManager.getAllEntries().size());\n+    assertEquals(100, instance.getCommitLogIndex());\n+    instance.commitTo(105);\n+    assertEquals(101, instance.getFirstIndex());\n+    assertEquals(6, instance.committedEntryManager.getAllEntries().size());\n+    assertEquals(5, instance.unCommittedEntryManager.getAllEntries().size());\n+    assertEquals(105, instance.getCommitLogIndex());\n+    instance.applyingSnapshot(new SimpleSnapshot(103, 103));\n+    assertEquals(104, instance.getFirstIndex());\n+    assertEquals(3, instance.committedEntryManager.getAllEntries().size());\n+    assertEquals(5, instance.unCommittedEntryManager.getAllEntries().size());\n+    assertEquals(105, instance.getCommitLogIndex());\n+    instance.applyingSnapshot(new SimpleSnapshot(108, 108));\n+    assertEquals(109, instance.getFirstIndex());\n+    assertEquals(1, instance.committedEntryManager.getAllEntries().size());\n+    assertEquals(0, instance.unCommittedEntryManager.getAllEntries().size());\n+    assertEquals(108, instance.getCommitLogIndex());\n+  }\n+\n+  @Test\n+  public void getEntries() {\n+    class RaftLogManagerTester {\n+\n+      public long low;\n+      public long high;\n+      public List<Log> testEntries;\n+      public Class throwClass;\n+\n+      public RaftLogManagerTester(long low, long high, List<Log> testEntries, Class throwClass) {\n+        this.low = low;\n+        this.high = high;\n+        this.testEntries = testEntries;\n+        this.throwClass = throwClass;\n+      }\n+    }\n+    long offset = 100;\n+    long num = 100;\n+    long half = offset + num / 2;\n+    long last = offset + num;\n+    CommittedEntryManager committedEntryManager = new CommittedEntryManager();\n+    committedEntryManager.applyingSnapshot(new SimpleSnapshot(offset, offset));\n+    for (long i = 1; i < num / 2; i++) {\n+      long index = i;\n+      try {\n+        committedEntryManager.append(new ArrayList<Log>() {{\n+          add(new EmptyContentLog(offset + index, offset + index));\n+        }});\n+      } catch (Exception e) {\n+      }\n+    }\n+    RaftLogManager instance = new RaftLogManager(committedEntryManager,\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    for (long i = num / 2; i < num; i++) {\n+      long index = i;\n+      instance.append(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(offset + index, offset + index));\n+      }});\n+    }\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      add(new RaftLogManagerTester(offset + 1, offset + 1, new ArrayList<>(), null));\n+      add(new RaftLogManagerTester(offset + 1, offset + 2, new ArrayList<Log>() {{\n+        add(new EmptyContentLog(offset + 1, offset + 1));\n+      }}, null));\n+      add(new RaftLogManagerTester(half - 1, half + 1, new ArrayList<Log>() {{\n+        add(new EmptyContentLog(half - 1, half - 1));\n+        add(new EmptyContentLog(half, half));\n+      }}, null));\n+      add(new RaftLogManagerTester(half, half + 1, new ArrayList<Log>() {{\n+        add(new EmptyContentLog(half, half));\n+      }}, null));\n+      add(new RaftLogManagerTester(last - 1, last, new ArrayList<Log>() {{\n+        add(new EmptyContentLog(last - 1, last - 1));\n+      }}, null));\n+      // test EntryUnavailable\n+      add(new RaftLogManagerTester(last - 1, last + 1, new ArrayList<Log>() {{\n+        add(new EmptyContentLog(last - 1, last - 1));\n+      }}, null));\n+      add(new RaftLogManagerTester(last, last + 1, new ArrayList<>(), null));\n+      add(new RaftLogManagerTester(last + 1, last + 2, new ArrayList<>(), null));\n+      // test GetEntriesWrongParametersException\n+      add(new RaftLogManagerTester(offset + 1, offset, null,\n+          GetEntriesWrongParametersException.class));\n+      // test EntryCompactedException\n+      add(new RaftLogManagerTester(offset - 1, offset + 1, null, EntryCompactedException.class));\n+      add(new RaftLogManagerTester(offset, offset + 1, null, EntryCompactedException.class));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      try {\n+        List<Log> answer = instance.getEntries(test.low, test.high);\n+        if (test.throwClass != null) {\n+          fail(\"The expected exception is not thrown\");\n+        } else {\n+          assertEquals(test.testEntries, answer);\n+        }\n+      } catch (Exception e) {\n+        if (!e.getClass().getName().equals(test.throwClass.getName())) {\n+          fail(\"An unexpected exception was thrown.\");\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void findConflict() {\n+    class RaftLogManagerTester {\n+\n+      public List<Log> conflictEntries;\n+      public long testConflict;\n+\n+      public RaftLogManagerTester(List<Log> conflictEntries, long testConflict) {\n+        this.conflictEntries = conflictEntries;\n+        this.testConflict = testConflict;\n+      }\n+    }\n+    List<Log> previousEntries = new ArrayList<Log>() {{\n+      add(new EmptyContentLog(0, 0));\n+      add(new EmptyContentLog(1, 1));\n+      add(new EmptyContentLog(2, 2));\n+    }};\n+    RaftLogManager instance = new RaftLogManager(new CommittedEntryManager(),\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    instance.append(previousEntries);\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      // no conflict, empty ent\n+      add(new RaftLogManagerTester(new ArrayList<>(), 0));\n+      // no conflict\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(0, 0));\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+      }}, 0));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+      }}, 0));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(2, 2));\n+      }}, 0));\n+      // no conflict, but has new entries\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(0, 0));\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+        add(new EmptyContentLog(3, 3));\n+        add(new EmptyContentLog(4, 3));\n+      }}, 3));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 1));\n+        add(new EmptyContentLog(2, 2));\n+        add(new EmptyContentLog(3, 3));\n+        add(new EmptyContentLog(4, 3));\n+      }}, 3));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(2, 2));\n+        add(new EmptyContentLog(3, 3));\n+        add(new EmptyContentLog(4, 3));\n+      }}, 3));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(3, 3));\n+        add(new EmptyContentLog(4, 3));\n+      }}, 3));\n+      // conflicts with existing entries\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(0, 4));\n+        add(new EmptyContentLog(1, 4));\n+      }}, 0));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(1, 2));\n+        add(new EmptyContentLog(2, 4));\n+        add(new EmptyContentLog(3, 4));\n+      }}, 1));\n+      add(new RaftLogManagerTester(new ArrayList<Log>() {{\n+        add(new EmptyContentLog(2, 1));\n+        add(new EmptyContentLog(3, 2));\n+        add(new EmptyContentLog(4, 4));\n+        add(new EmptyContentLog(5, 4));\n+      }}, 2));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      assertEquals(test.testConflict, instance.findConflict(test.conflictEntries));\n+    }\n+  }\n+\n+  @Test\n+  public void isLogUpToDate() {\n+    class RaftLogManagerTester {\n+\n+      public long lastIndex;\n+      public long lastTerm;\n+      public boolean isUpToDate;\n+\n+      public RaftLogManagerTester(long lastIndex, long lastTerm, boolean isUpToDate) {\n+        this.lastIndex = lastIndex;\n+        this.lastTerm = lastTerm;\n+        this.isUpToDate = isUpToDate;\n+      }\n+    }\n+    List<Log> previousEntries = new ArrayList<Log>() {{\n+      add(new EmptyContentLog(0, 0));\n+      add(new EmptyContentLog(1, 1));\n+      add(new EmptyContentLog(2, 2));\n+    }};\n+    RaftLogManager instance = new RaftLogManager(new CommittedEntryManager(),\n+        new SyncLogDequeSerializer(testIdentifier), logApplier);\n+    instance.append(previousEntries);\n+    List<RaftLogManagerTester> tests = new ArrayList<RaftLogManagerTester>() {{\n+      // greater term, ignore lastIndex\n+      add(new RaftLogManagerTester(instance.getLastLogIndex() - 1, 3, true));\n+      add(new RaftLogManagerTester(instance.getLastLogIndex(), 3, true));\n+      add(new RaftLogManagerTester(instance.getLastLogIndex() + 1, 3, true));\n+      // smaller term, ignore lastIndex\n+      add(new RaftLogManagerTester(instance.getLastLogIndex() - 1, 1, false));\n+      add(new RaftLogManagerTester(instance.getLastLogIndex(), 1, false));\n+      add(new RaftLogManagerTester(instance.getLastLogIndex() + 1, 1, false));\n+      // equal term, equal or lager lastIndex wins\n+      add(new RaftLogManagerTester(instance.getLastLogIndex() - 1, 2, false));\n+      add(new RaftLogManagerTester(instance.getLastLogIndex(), 2, true));\n+      add(new RaftLogManagerTester(instance.getLastLogIndex() + 1, 2, true));\n+    }};\n+    for (RaftLogManagerTester test : tests) {\n+      assertEquals(test.isUpToDate, instance.isLogUpToDate(test.lastTerm, test.lastIndex));\n+    }\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Mjc1OA==", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415462758", "bodyText": "Remove these if they are not necessary.", "author": "jt2594838", "createdAt": "2020-04-27T02:09:21Z", "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java", "diffHunk": "@@ -354,99 +222,87 @@ public void testRemoveOldFileAtRecovery() {\n     }\n   }\n \n-\n-  @Test\n-  public void testTruncate() {\n-    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    List<Log> testLogs2;\n-    try {\n-      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n-\n-      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n-      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs1) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-\n-      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      syncLogDequeSerializer.removeFirst(3);\n-\n-      testLogs2 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs2) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-\n-      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-      // this will remove first file and build a new file\n-      syncLogDequeSerializer.removeFirst(8);\n-\n-      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-\n-      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n-      for (Log log : testLogs3) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n-      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n-\n-      // last file has been truncated\n-      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-\n-    // recovery\n-    syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    try {\n-      List<Log> logs = syncLogDequeSerializer.recoverLog();\n-      assertEquals(9, logs.size());\n-\n-      for (int i = 0; i < 8; i++) {\n-        assertEquals(testLogs2.get(i + 1), logs.get(i));\n-      }\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-  }\n+//  @Test\n+//  public void testTruncate() {\n+//    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    List<Log> testLogs2;\n+//    try {\n+//      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n+//\n+//      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n+//      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs1) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//\n+//      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      syncLogDequeSerializer.removeFirst(3);\n+//\n+//      testLogs2 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs2) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//\n+//      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//      // this will remove first file and build a new file\n+//      syncLogDequeSerializer.removeFirst(8);\n+//\n+//      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//\n+//      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n+//      for (Log log : testLogs3) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n+//\n+//      // last file has been truncated\n+//      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//\n+//    // recovery\n+//    syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    try {\n+//      List<Log> logs = syncLogDequeSerializer.recoverLog();\n+//      assertEquals(9, logs.size());\n+//\n+//      for (int i = 0; i < 8; i++) {\n+//        assertEquals(testLogs2.get(i + 1), logs.get(i));\n+//      }\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//  }", "originalCommit": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3Njk1OA==", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415476958", "bodyText": "OK", "author": "LebronAl", "createdAt": "2020-04-27T03:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Mjc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "04c138c3447067fde84b7ed93dddb1e95165606b", "chunk": "diff --git a/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java b/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java\nindex 3101a33c11..50841633df 100644\n--- a/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java\n+++ b/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java\n\n@@ -222,70 +222,6 @@ public class SyncLogDequeSerializerTest extends IoTDBTest {\n     }\n   }\n \n-//  @Test\n-//  public void testTruncate() {\n-//    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n-//    List<Log> testLogs2;\n-//    try {\n-//      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n-//\n-//      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n-//      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n-//\n-//      for (Log log : testLogs1) {\n-//        memoryLogManager.appendLog(log);\n-//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-//      }\n-//\n-//      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n-//\n-//      syncLogDequeSerializer.removeFirst(3);\n-//\n-//      testLogs2 = TestUtils.prepareNodeLogs(10);\n-//\n-//      for (Log log : testLogs2) {\n-//        memoryLogManager.appendLog(log);\n-//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-//      }\n-//\n-//      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n-//\n-//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-//      // this will remove first file and build a new file\n-//      syncLogDequeSerializer.removeFirst(8);\n-//\n-//      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n-//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-//\n-//      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n-//      for (Log log : testLogs3) {\n-//        memoryLogManager.appendLog(log);\n-//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-//      }\n-//      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n-//      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n-//\n-//      // last file has been truncated\n-//      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n-//    } finally {\n-//      syncLogDequeSerializer.close();\n-//    }\n-//\n-//    // recovery\n-//    syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n-//    try {\n-//      List<Log> logs = syncLogDequeSerializer.recoverLog();\n-//      assertEquals(9, logs.size());\n-//\n-//      for (int i = 0; i < 8; i++) {\n-//        assertEquals(testLogs2.get(i + 1), logs.get(i));\n-//      }\n-//    } finally {\n-//      syncLogDequeSerializer.close();\n-//    }\n-//  }\n-\n-\n   @Test\n   public void testRecoveryByAppendList() {\n     SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Mjk2Mw==", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415462963", "bodyText": "Remove these if they are not necessary.", "author": "jt2594838", "createdAt": "2020-04-27T02:10:12Z", "path": "cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java", "diffHunk": "@@ -458,85 +314,78 @@ public void testRecoveryByAppendList() {\n     }\n   }\n \n-  @Test\n-  public void testTruncateByAppendList() {\n-    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    List<Log> testLogs2;\n-    try {\n-      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n-\n-      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n-      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs1) {\n-        memoryLogManager.appendLog(log);\n-      }\n-      syncLogDequeSerializer.append(testLogs1, memoryLogManager.getMeta());\n-\n-      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      syncLogDequeSerializer.removeFirst(3);\n-\n-      testLogs2 = TestUtils.prepareNodeLogs(10);\n-\n-      for (Log log : testLogs2) {\n-        memoryLogManager.appendLog(log);\n-      }\n-      syncLogDequeSerializer.append(testLogs2, memoryLogManager.getMeta());\n-\n-      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n-\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-      // this will remove first file and build a new file\n-      syncLogDequeSerializer.removeFirst(8);\n-\n-      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n-      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-\n-      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n-      for (Log log : testLogs3) {\n-        memoryLogManager.appendLog(log);\n-        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-      }\n-      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n-      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n-\n-      // last file has been truncated\n-      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-\n-    // recovery\n-    syncLogDequeSerializer = new SyncLogDequeSerializer(getNode(1));\n-    try {\n-      List<Log> logs = syncLogDequeSerializer.recoverLog();\n-      assertEquals(9, logs.size());\n-\n-      for (int i = 0; i < 8; i++) {\n-        assertEquals(testLogs2.get(i + 1), logs.get(i));\n-      }\n-    } finally {\n-      syncLogDequeSerializer.close();\n-    }\n-  }\n+//  @Test\n+//  public void testTruncateByAppendList() {\n+//    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    List<Log> testLogs2;\n+//    try {\n+//      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n+//\n+//      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n+//      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs1) {\n+//        memoryLogManager.appendLog(log);\n+//      }\n+//      syncLogDequeSerializer.append(testLogs1, memoryLogManager.getMeta());\n+//\n+//      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      syncLogDequeSerializer.removeFirst(3);\n+//\n+//      testLogs2 = TestUtils.prepareNodeLogs(10);\n+//\n+//      for (Log log : testLogs2) {\n+//        memoryLogManager.appendLog(log);\n+//      }\n+//      syncLogDequeSerializer.append(testLogs2, memoryLogManager.getMeta());\n+//\n+//      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n+//\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//      // this will remove first file and build a new file\n+//      syncLogDequeSerializer.removeFirst(8);\n+//\n+//      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n+//\n+//      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n+//      for (Log log : testLogs3) {\n+//        memoryLogManager.appendLog(log);\n+//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n+//      }\n+//      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n+//      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n+//\n+//      // last file has been truncated\n+//      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//\n+//    // recovery\n+//    syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n+//    try {\n+//      List<Log> logs = syncLogDequeSerializer.recoverLog();\n+//      assertEquals(9, logs.size());\n+//\n+//      for (int i = 0; i < 8; i++) {\n+//        assertEquals(testLogs2.get(i + 1), logs.get(i));\n+//      }\n+//    } finally {\n+//      syncLogDequeSerializer.close();\n+//    }\n+//  }", "originalCommit": "d872b5e5c8d39d67fdb25ae077edc7bec2c62b1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3Njk3Nw==", "url": "https://github.com/apache/iotdb/pull/1094#discussion_r415476977", "bodyText": "OK", "author": "LebronAl", "createdAt": "2020-04-27T03:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Mjk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "04c138c3447067fde84b7ed93dddb1e95165606b", "chunk": "diff --git a/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java b/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java\nindex 3101a33c11..50841633df 100644\n--- a/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java\n+++ b/cluster/src/test/java/org/apache/iotdb/cluster/log/manage/serializable/SyncLogDequeSerializerTest.java\n\n@@ -314,69 +250,6 @@ public class SyncLogDequeSerializerTest extends IoTDBTest {\n     }\n   }\n \n-//  @Test\n-//  public void testTruncateByAppendList() {\n-//    SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n-//    List<Log> testLogs2;\n-//    try {\n-//      syncLogDequeSerializer.setMaxRemovedLogSize(10);\n-//\n-//      MemoryLogManager memoryLogManager = buildMemoryLogManager();\n-//      List<Log> testLogs1 = TestUtils.prepareNodeLogs(10);\n-//\n-//      for (Log log : testLogs1) {\n-//        memoryLogManager.appendLog(log);\n-//      }\n-//      syncLogDequeSerializer.append(testLogs1, memoryLogManager.getMeta());\n-//\n-//      assertEquals(10, syncLogDequeSerializer.getLogSizeDeque().size());\n-//\n-//      syncLogDequeSerializer.removeFirst(3);\n-//\n-//      testLogs2 = TestUtils.prepareNodeLogs(10);\n-//\n-//      for (Log log : testLogs2) {\n-//        memoryLogManager.appendLog(log);\n-//      }\n-//      syncLogDequeSerializer.append(testLogs2, memoryLogManager.getMeta());\n-//\n-//      assertEquals(17, syncLogDequeSerializer.getLogSizeDeque().size());\n-//\n-//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-//      // this will remove first file and build a new file\n-//      syncLogDequeSerializer.removeFirst(8);\n-//\n-//      assertEquals(9, syncLogDequeSerializer.getLogSizeDeque().size());\n-//      assertEquals(2, syncLogDequeSerializer.logFileList.size());\n-//\n-//      List<Log> testLogs3 = TestUtils.prepareNodeLogs(10);\n-//      for (Log log : testLogs3) {\n-//        memoryLogManager.appendLog(log);\n-//        syncLogDequeSerializer.append(log, memoryLogManager.getMeta());\n-//      }\n-//      assertEquals(19, syncLogDequeSerializer.getLogSizeDeque().size());\n-//      syncLogDequeSerializer.truncateLog(11, memoryLogManager.getMeta());\n-//\n-//      // last file has been truncated\n-//      assertEquals(1, syncLogDequeSerializer.logFileList.size());\n-//    } finally {\n-//      syncLogDequeSerializer.close();\n-//    }\n-//\n-//    // recovery\n-//    syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n-//    try {\n-//      List<Log> logs = syncLogDequeSerializer.recoverLog();\n-//      assertEquals(9, logs.size());\n-//\n-//      for (int i = 0; i < 8; i++) {\n-//        assertEquals(testLogs2.get(i + 1), logs.get(i));\n-//      }\n-//    } finally {\n-//      syncLogDequeSerializer.close();\n-//    }\n-//  }\n-\n   @Test\n   public void testRecoveryWithTempLog() {\n     SyncLogDequeSerializer syncLogDequeSerializer = new SyncLogDequeSerializer(testIdentifier);\n"}}, {"oid": "04c138c3447067fde84b7ed93dddb1e95165606b", "url": "https://github.com/apache/iotdb/commit/04c138c3447067fde84b7ed93dddb1e95165606b", "message": "fix review", "committedDate": "2020-04-27T03:02:39Z", "type": "commit"}]}