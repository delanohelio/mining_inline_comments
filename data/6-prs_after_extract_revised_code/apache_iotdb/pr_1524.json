{"pr_number": 1524, "pr_title": "[IOTDB-776] Control the memory usage of flushing the memtable", "pr_createdAt": "2020-07-20T07:02:06Z", "pr_url": "https://github.com/apache/iotdb/pull/1524", "timeline": [{"oid": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "url": "https://github.com/apache/iotdb/commit/3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "message": "fix review", "committedDate": "2020-11-02T06:22:29Z", "type": "commit"}, {"oid": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "url": "https://github.com/apache/iotdb/commit/c60ca098c18fea40c3d38e39135d4103f73a3c73", "message": "fix review", "committedDate": "2020-11-02T06:39:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3MjU2NQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515772565", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public boolean checkIfNeedStartNewChunk(String deviceId, String measurement) {\n          \n          \n            \n              public boolean checkIfChunkDoesNotExist(String deviceId, String measurement) {", "author": "qiaojialin", "createdAt": "2020-11-02T07:05:49Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -159,6 +171,21 @@ public void write(InsertTabletPlan insertTabletPlan, int start, int end) {\n     }\n   }\n \n+  @Override\n+  public boolean checkIfNeedStartNewChunk(String deviceId, String measurement) {", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\nindex 0771b8ae4a..5f5a0e185b 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n\n@@ -172,7 +172,7 @@ public abstract class AbstractMemTable implements IMemTable {\n   }\n \n   @Override\n-  public boolean checkIfNeedStartNewChunk(String deviceId, String measurement) {\n+  public boolean checkIfChunkDoesNotExist(String deviceId, String measurement) {\n     if (!memTableMap.containsKey(deviceId)) {\n       return true;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NDI1Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515774253", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.debug(\"Report Storage Group Status to system. \"\n          \n          \n            \n                      + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n          \n          \n            \n                logger.debug(\"Report Storage Group Status to the system. \"\n          \n          \n            \n                      + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);", "author": "qiaojialin", "createdAt": "2020-11-02T07:11:25Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NTM5Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515775392", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n          \n          \n            \n                if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {", "author": "qiaojialin", "createdAt": "2020-11-02T07:14:33Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NTQ1Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515775452", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n          \n          \n            \n                if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {", "author": "qiaojialin", "createdAt": "2020-11-02T07:14:43Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NTU1MQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515775551", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.debug(\"Change system to reject status...\");\n          \n          \n            \n                  logger.info(\"Change system to reject status...\");\n          \n      \n    \n    \n  \n\nAdd current memory info", "author": "qiaojialin", "createdAt": "2020-11-02T07:15:00Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzAwNw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777007", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n          \n          \n            \n                  if (totalSgMemCost < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {", "author": "qiaojialin", "createdAt": "2020-11-02T07:19:33Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");\n+        logCost();\n+        forceFlush();\n+      }\n+      if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzA2MA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777060", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n          \n          \n            \n                  if (totalSgMemCost > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {", "author": "qiaojialin", "createdAt": "2020-11-02T07:19:41Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzIwNw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777207", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"Some sg memery released, set system to normal status.\");\n          \n          \n            \n                    logger.debug(\"Some sg memory released, set system to normal status.\");", "author": "qiaojialin", "createdAt": "2020-11-02T07:20:06Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");\n+        logCost();\n+        forceFlush();\n+      }\n+      if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+        logger.debug(\"Some sg memery released, set system to normal status.\");", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzMwOQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777309", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.warn(\"Some sg memery released, but system is still in reject status.\");\n          \n          \n            \n                    logger.warn(\"Some sg memory released, but system is still in reject status.\");", "author": "qiaojialin", "createdAt": "2020-11-02T07:20:15Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");\n+        logCost();\n+        forceFlush();\n+      }\n+      if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+        logger.debug(\"Some sg memery released, set system to normal status.\");\n+        logCost();\n+        rejected = false;\n+      } else {\n+        logger.warn(\"Some sg memery released, but system is still in reject status.\");", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzQyOA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"Some sg memery released, call flush.\");\n          \n          \n            \n                    logger.debug(\"Some sg memory released, call flush.\");", "author": "qiaojialin", "createdAt": "2020-11-02T07:20:35Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3Nzg4Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777882", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void logCost() {\n          \n          \n            \n              private void logCurrentTotalSGMemory() {", "author": "qiaojialin", "createdAt": "2020-11-02T07:21:58Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() -\n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}\", totalSgMemCost);\n+      flush();\n+    }\n+    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Report resetting the mem cost of sg to system. It will be invoked after closing file.\n+   *\n+   * @param storageGroupInfo storage group\n+   */\n+  public synchronized void resetStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    if (reportedSgMemCostMap.containsKey(storageGroupInfo)) {\n+      this.totalSgMemCost -= reportedSgMemCostMap.get(storageGroupInfo)\n+          - storageGroupInfo.getSgMemCost();\n+      storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n+      if (getTotalMemCost() > config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+        logger.debug(\"Some sg memery released, call flush.\");\n+        logCost();\n+        forceFlush();\n+      }\n+      if (getTotalMemCost() < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+        logger.debug(\"Some sg memery released, set system to normal status.\");\n+        logCost();\n+        rejected = false;\n+      } else {\n+        logger.warn(\"Some sg memery released, but system is still in reject status.\");\n+        logCost();\n+        rejected = true;\n+      }\n+      reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+    }\n+  }\n+\n+  private void logCost() {", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"oid": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "url": "https://github.com/apache/iotdb/commit/a5957f7cf73653cbcc95937a5f0523f1b107026b", "message": "fix review", "committedDate": "2020-11-02T07:25:36Z", "type": "commit"}, {"oid": "f944b582f2d19fe418ef1bf06fc3f63df1ce46dd", "url": "https://github.com/apache/iotdb/commit/f944b582f2d19fe418ef1bf06fc3f63df1ce46dd", "message": "fix review", "committedDate": "2020-11-02T07:38:44Z", "type": "commit"}, {"oid": "d2239f3301973182f8c171a483f6706504ae6a9a", "url": "https://github.com/apache/iotdb/commit/d2239f3301973182f8c171a483f6706504ae6a9a", "message": "fix review", "committedDate": "2020-11-02T07:41:35Z", "type": "commit"}, {"oid": "ff54d8921a62ffd7d6df84d5d5e9e5bda56e0051", "url": "https://github.com/apache/iotdb/commit/ff54d8921a62ffd7d6df84d5d5e9e5bda56e0051", "message": "fix review", "committedDate": "2020-11-02T07:46:16Z", "type": "commit"}, {"oid": "0f0a792726ee503947244705a00a3d1501ef570d", "url": "https://github.com/apache/iotdb/commit/0f0a792726ee503947244705a00a3d1501ef570d", "message": "fix review", "committedDate": "2020-11-02T07:54:16Z", "type": "commit"}, {"oid": "6afbb810340ef260963e624a81ae08feacb7e3e0", "url": "https://github.com/apache/iotdb/commit/6afbb810340ef260963e624a81ae08feacb7e3e0", "message": "fix review", "committedDate": "2020-11-02T07:59:28Z", "type": "commit"}, {"oid": "84a9ecb33d42a3a3a22bf3257674c498d9101058", "url": "https://github.com/apache/iotdb/commit/84a9ecb33d42a3a3a22bf3257674c498d9101058", "message": "fix mod and rename", "committedDate": "2020-11-02T08:58:48Z", "type": "commit"}, {"oid": "5bd35b78546811a9c5a408a13ec79b52409e7b6e", "url": "https://github.com/apache/iotdb/commit/5bd35b78546811a9c5a408a13ec79b52409e7b6e", "message": "modify doc", "committedDate": "2020-11-02T10:49:15Z", "type": "commit"}, {"oid": "458828ad92155080ef2b7596cc8a7262c3c826ab", "url": "https://github.com/apache/iotdb/commit/458828ad92155080ef2b7596cc8a7262c3c826ab", "message": "Merge branch 'mem_control' of https://github.com/apache/iotdb into mem_control", "committedDate": "2020-11-02T10:50:21Z", "type": "commit"}, {"oid": "1337d71cfb979810d44d814fafd928849078ef43", "url": "https://github.com/apache/iotdb/commit/1337d71cfb979810d44d814fafd928849078ef43", "message": "remove unnecessary report", "committedDate": "2020-11-02T11:40:14Z", "type": "commit"}, {"oid": "6b815080c1cb248e159235da870c24cabfc2b69e", "url": "https://github.com/apache/iotdb/commit/6b815080c1cb248e159235da870c24cabfc2b69e", "message": "Merge branch 'mem_control' of https://github.com/apache/iotdb into mem_control", "committedDate": "2020-11-02T11:40:34Z", "type": "commit"}, {"oid": "2b49f3f738bc7ecda2b5a0f1c769802f03aaa5bc", "url": "https://github.com/apache/iotdb/commit/2b49f3f738bc7ecda2b5a0f1c769802f03aaa5bc", "message": "reset to normal when delete timeseries", "committedDate": "2020-11-02T11:51:13Z", "type": "commit"}, {"oid": "f8767c4c57b608908fc9d971600431ed1df1d6d1", "url": "https://github.com/apache/iotdb/commit/f8767c4c57b608908fc9d971600431ed1df1d6d1", "message": "reset to normal when delete timeseries", "committedDate": "2020-11-02T11:54:36Z", "type": "commit"}, {"oid": "d1002463795d41b0cac6a5c43ac10c54a3650de8", "url": "https://github.com/apache/iotdb/commit/d1002463795d41b0cac6a5c43ac10c54a3650de8", "message": "fix code", "committedDate": "2020-11-02T13:16:46Z", "type": "commit"}, {"oid": "00ec943096504bc32656e008a46792c1e206a1e2", "url": "https://github.com/apache/iotdb/commit/00ec943096504bc32656e008a46792c1e206a1e2", "message": "add log for PrimitiveArrayManager", "committedDate": "2020-11-02T13:28:08Z", "type": "commit"}, {"oid": "2cc80c0c215ee3f82a177f5af039788c092e9c41", "url": "https://github.com/apache/iotdb/commit/2cc80c0c215ee3f82a177f5af039788c092e9c41", "message": "add a config", "committedDate": "2020-11-02T13:30:53Z", "type": "commit"}, {"oid": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc", "url": "https://github.com/apache/iotdb/commit/9e53f49e4ab1c68e6277d343b91d03c37e0159fc", "message": "Merge branch 'mem_control' of https://github.com/apache/iotdb into mem_control", "committedDate": "2020-11-02T13:31:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3NzY2Ng==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515777666", "bodyText": "if you only use !enableMemControl, why not call it disableMemControl", "author": "jixuan1989", "createdAt": "2020-11-02T07:21:23Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -56,6 +56,17 @@\n \n   private long memSize = 0;\n \n+  /**\n+   * The initial value is false because we should calculate the text data size when recover\n+   * memTable!!\n+   */\n+  protected boolean enableMemControl = false;", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84a9ecb33d42a3a3a22bf3257674c498d9101058", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\nindex 0771b8ae4a..78507a96e3 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n\n@@ -54,18 +54,22 @@ public abstract class AbstractMemTable implements IMemTable {\n   private int avgSeriesPointNumThreshold = IoTDBDescriptor.getInstance().getConfig()\n       .getAvgSeriesPointNumberThreshold();\n \n+  /**\n+   * memory size of data points, including TEXT values\n+   */\n   private long memSize = 0;\n \n   /**\n-   * The initial value is false because we should calculate the text data size when recover\n-   * memTable!!\n+   * memory usage of all TVLists memory usage regardless of whether these TVLists are full,\n+   * including TEXT values\n    */\n-  protected boolean enableMemControl = false;\n+  private long tvListRamCost = 0;\n \n   /**\n-   * memory usage of all TVLists memory usage regardless of whether these TVLists are full\n+   * The initial value is false because we should calculate the text data size when recover\n+   * memTable!!\n    */\n-  private long tvListRamCost = 0;\n+  protected boolean enableMemControl = false;\n \n   private int seriesNumber = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyNzU1Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515827557", "bodyText": "add javadoc: must guarantee the device exists in the workmemtable", "author": "jixuan1989", "createdAt": "2020-11-02T09:07:28Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java", "diffHunk": "@@ -121,6 +132,21 @@ ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType dataType,\n \n   void release();\n \n+  /**\n+   * only used when mem control enabled\n+   */\n+  boolean checkIfNeedStartNewChunk(String deviceId, String measurement);\n+\n+  /**\n+   * only used when mem control enabled\n+   */\n+  int getCurrentTVListSize(String deviceId, String measurement);", "originalCommit": "c60ca098c18fea40c3d38e39135d4103f73a3c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bd35b78546811a9c5a408a13ec79b52409e7b6e", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java\nindex 269af4a002..e300bf831f 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java\n\n@@ -135,12 +135,12 @@ public interface IMemTable {\n   /**\n    * only used when mem control enabled\n    */\n-  boolean checkIfNeedStartNewChunk(String deviceId, String measurement);\n+  boolean checkIfChunkDoesNotExist(String deviceId, String measurement);\n \n   /**\n    * only used when mem control enabled\n    */\n-  int getCurrentTVListSize(String deviceId, String measurement);\n+  int getCurrentPointNum(String deviceId, String measurement);\n \n   /**\n    * only used when mem control enabled\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2MDE5MA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516060190", "bodyText": "why synchronized", "author": "jixuan1989", "createdAt": "2020-11-02T15:40:58Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manage all primitive data list in memory, including get and release operation.\n+ */\n+public class PrimitiveArrayManager {\n+\n+  /**\n+   * data type -> ArrayDeque<Array>\n+   */\n+  private static final Map<TSDataType, ArrayDeque<Object>> bufferedArraysMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> current number of buffered arrays\n+   */\n+  private static final Map<TSDataType, Integer> bufferedArraysNumMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> ratio of data type in schema, which could be seen as recommended ratio\n+   */\n+  private static final Map<TSDataType, Double> bufferedArraysNumRatio = new EnumMap<>(\n+      TSDataType.class);\n+  private static int currentDataTypeTotalNum = 0;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(PrimitiveArrayManager.class);\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  public static final int ARRAY_SIZE = config.getPrimitiveArraySize();\n+\n+  /**\n+   * threshold total size of arrays for all data types\n+   */\n+  private static final double BUFFERED_ARRAY_SIZE_THRESHOLD =\n+      config.getAllocateMemoryForWrite() * config.getBufferedArraysMemoryProportion();\n+\n+  /**\n+   * total size of buffered arrays\n+   */\n+  private static AtomicLong bufferedArraysRamSize = new AtomicLong();\n+\n+  /**\n+   * total size of out of buffer arrays\n+   */\n+  private static AtomicLong outOfBufferArraysRamSize = new AtomicLong();\n+\n+  static {\n+    bufferedArraysMap.put(TSDataType.BOOLEAN, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT32, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT64, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.FLOAT, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.DOUBLE, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.TEXT, new ArrayDeque<>());\n+  }\n+\n+  private PrimitiveArrayManager() {\n+    logger.info(\"BufferedArraySizeThreshold is {}\", BUFFERED_ARRAY_SIZE_THRESHOLD);\n+  }\n+\n+  /**\n+   * Get primitive data lists according to type\n+   *\n+   * @param dataType data type\n+   * @return an array\n+   */\n+  public static Object getPrimitiveArraysByType(TSDataType dataType) {\n+    // check memory of buffered array, if already full, generate OOB\n+    if (bufferedArraysRamSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n+        > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n+      // return an out of buffer array\n+      outOfBufferArraysRamSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      return createPrimitiveArray(dataType);\n+    }\n+\n+    synchronized (bufferedArraysMap.get(dataType)) {\n+      // try to get a buffered array\n+      Object dataArray = bufferedArraysMap.get(dataType).poll();\n+      if (dataArray != null) {\n+        return dataArray;\n+      }\n+      // no buffered array, create one\n+      bufferedArraysNumMap.put(dataType, bufferedArraysNumMap.getOrDefault(dataType, 0) + 1);\n+      bufferedArraysRamSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+    }\n+\n+    return createPrimitiveArray(dataType);\n+  }\n+\n+  private static Object createPrimitiveArray(TSDataType dataType) {\n+    Object dataArray;\n+    switch (dataType) {\n+      case BOOLEAN:\n+        dataArray = new boolean[ARRAY_SIZE];\n+        break;\n+      case INT32:\n+        dataArray = new int[ARRAY_SIZE];\n+        break;\n+      case INT64:\n+        dataArray = new long[ARRAY_SIZE];\n+        break;\n+      case FLOAT:\n+        dataArray = new float[ARRAY_SIZE];\n+        break;\n+      case DOUBLE:\n+        dataArray = new double[ARRAY_SIZE];\n+        break;\n+      case TEXT:\n+        dataArray = new Binary[ARRAY_SIZE];\n+        break;\n+      default:\n+        throw new UnSupportedDataTypeException(dataType.toString());\n+    }\n+\n+    return dataArray;\n+  }\n+\n+  /**\n+   * Get primitive data lists according to data type and size, only for TVList's sorting\n+   *\n+   * @param dataType data type\n+   * @param size     needed capacity\n+   * @return an array of primitive data arrays\n+   */\n+  public static synchronized Object createDataListsByType(TSDataType dataType, int size) {", "originalCommit": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f2fd407db118861473d347581813137dc0aa6fe", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java b/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\nindex cae2d665e2..b33bd8192b 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\n\n@@ -22,7 +22,6 @@ import java.util.ArrayDeque;\n import java.util.Arrays;\n import java.util.EnumMap;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n import org.apache.iotdb.db.conf.IoTDBConfig;\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2MzA3OA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516063078", "bodyText": "now, sorted timestamps use new memory? no OOM danger?", "author": "jixuan1989", "createdAt": "2020-11-02T15:44:51Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/BinaryTVList.java", "diffHunk": "@@ -120,9 +119,6 @@ void clearValue() {\n   @Override\n   void clearSortedValue() {\n     if (sortedValues != null) {\n-      for (Binary[] dataArray : sortedValues) {", "originalCommit": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NDc1Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516394752", "bodyText": "The memory usage of sorting arrays is not considered in writing memory now. That why I changed the default writing memory size from 60% -> 40% of JVM heap size.\nI added some comments to class TVList.", "author": "HTHou", "createdAt": "2020-11-03T02:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2MzA3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NTI3MA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516075270", "bodyText": "concurrency problem?", "author": "jixuan1989", "createdAt": "2020-11-02T16:01:15Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -394,14 +411,13 @@ public void createTimeseries(CreateTimeSeriesPlan plan, long offset) throws Meta\n         }\n       }\n \n-      // update statistics\n-      if (config.isEnableParameterAdapter()) {\n-        int size = seriesNumberInStorageGroups.get(storageGroupPath.getFullPath());\n-        seriesNumberInStorageGroups.put(storageGroupPath.getFullPath(), size + 1);\n-        if (size + 1 > maxSeriesNumberAmongStorageGroup) {\n-          maxSeriesNumberAmongStorageGroup = size + 1L;\n-        }\n+      // update statistics and schemaDataTypeNumMap\n+      totalSeriesNumber++;", "originalCommit": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MzY0Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516393642", "bodyText": "Changed it to AtomicLong.", "author": "HTHou", "createdAt": "2020-11-03T02:12:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NTI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "1f2fd407db118861473d347581813137dc0aa6fe", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex e0194832a7..7c34f5c32d 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -412,8 +414,8 @@ public class MManager {\n       }\n \n       // update statistics and schemaDataTypeNumMap\n-      totalSeriesNumber++;\n-      if (totalSeriesNumber * ESTIMATED_SERIES_SIZE >= MTREE_SIZE_THRESHOLD) {\n+      totalSeriesNumber.addAndGet(1);\n+      if (totalSeriesNumber.get() * ESTIMATED_SERIES_SIZE >= MTREE_SIZE_THRESHOLD) {\n         logger.warn(\"Current series number {} is too large...\", totalSeriesNumber);\n         allowToCreateNewSeries = false;\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NTcxMA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516075710", "bodyText": "how about set currentDataTypeTotalNum as a field?", "author": "jixuan1989", "createdAt": "2020-11-02T16:01:54Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -589,39 +580,58 @@ public void setStorageGroup(PartialPath storageGroup) throws MetadataException {\n   public void deleteStorageGroups(List<PartialPath> storageGroups) throws MetadataException {\n     try {\n       for (PartialPath storageGroup : storageGroups) {\n-\n+        totalSeriesNumber -= mtree.getAllTimeseriesCount(storageGroup);\n         // clear cached MNode\n+        if (!allowToCreateNewSeries && \n+            totalSeriesNumber * ESTIMATED_SERIES_SIZE < MTREE_SIZE_THRESHOLD) {\n+          logger.info(\"Current series number {} come back to normal level\", totalSeriesNumber);\n+          allowToCreateNewSeries = true;\n+        }\n         mNodeCache.clear();\n \n         // try to delete storage group\n         List<MeasurementMNode> leafMNodes = mtree.deleteStorageGroup(storageGroup);\n         for (MeasurementMNode leafMNode : leafMNodes) {\n           removeFromTagInvertedIndex(leafMNode);\n+          // update statistics in schemaDataTypeNumMap\n+          updateSchemaDataTypeNumMap(leafMNode.getSchema().getType(), -1);\n         }\n \n-        if (config.isEnableParameterAdapter()) {\n-          IoTDBConfigDynamicAdapter.getInstance().addOrDeleteStorageGroup(-1);\n-          int size = seriesNumberInStorageGroups.get(storageGroup.getFullPath());\n-          IoTDBConfigDynamicAdapter.getInstance().addOrDeleteTimeSeries(size * -1);\n-          ActiveTimeSeriesCounter.getInstance().delete(storageGroup.getFullPath());\n-          seriesNumberInStorageGroups.remove(storageGroup.getFullPath());\n-          if (size == maxSeriesNumberAmongStorageGroup) {\n-            maxSeriesNumberAmongStorageGroup =\n-                seriesNumberInStorageGroups.values().stream().max(Integer::compareTo).orElse(0);\n-          }\n-        }\n         // if success\n         if (!isRecovering) {\n           logWriter.deleteStorageGroup(storageGroup.getFullPath());\n         }\n       }\n-    } catch (ConfigAdjusterException e) {\n-      throw new MetadataException(e);\n     } catch (IOException e) {\n       throw new MetadataException(e.getMessage());\n     }\n   }\n \n+  /**\n+   * update statistics in schemaDataTypeNumMap\n+   *\n+   * @param type data type\n+   * @param num  1 for creating timeseries and -1 for deleting timeseries\n+   */\n+  private synchronized void updateSchemaDataTypeNumMap(TSDataType type, int num) {\n+    // add an array of the series type\n+    schemaDataTypeNumMap.put(type, schemaDataTypeNumMap.getOrDefault(type, 0) + num);\n+    // add an array of time\n+    schemaDataTypeNumMap.put(TSDataType.INT64,\n+        schemaDataTypeNumMap.getOrDefault(TSDataType.INT64, 0) + num);\n+\n+    int currentDataTypeTotalNum = 0;\n+    for (int typeSize : schemaDataTypeNumMap.values()) {", "originalCommit": "9e53f49e4ab1c68e6277d343b91d03c37e0159fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MzQ2Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r516393467", "bodyText": "This number can be get from totalSeriesNumber * 2. The calculation should be removed.", "author": "HTHou", "createdAt": "2020-11-03T02:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NTcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "1f2fd407db118861473d347581813137dc0aa6fe", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex e0194832a7..7c34f5c32d 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -580,10 +576,10 @@ public class MManager {\n   public void deleteStorageGroups(List<PartialPath> storageGroups) throws MetadataException {\n     try {\n       for (PartialPath storageGroup : storageGroups) {\n-        totalSeriesNumber -= mtree.getAllTimeseriesCount(storageGroup);\n+        totalSeriesNumber.addAndGet(mtree.getAllTimeseriesCount(storageGroup));\n         // clear cached MNode\n         if (!allowToCreateNewSeries && \n-            totalSeriesNumber * ESTIMATED_SERIES_SIZE < MTREE_SIZE_THRESHOLD) {\n+            totalSeriesNumber.get() * ESTIMATED_SERIES_SIZE < MTREE_SIZE_THRESHOLD) {\n           logger.info(\"Current series number {} come back to normal level\", totalSeriesNumber);\n           allowToCreateNewSeries = true;\n         }\n"}}, {"oid": "1f2fd407db118861473d347581813137dc0aa6fe", "url": "https://github.com/apache/iotdb/commit/1f2fd407db118861473d347581813137dc0aa6fe", "message": "fix review", "committedDate": "2020-11-03T02:20:07Z", "type": "commit"}, {"oid": "8bbcaf1788b355a66ddac841a73d8d1d808f32af", "url": "https://github.com/apache/iotdb/commit/8bbcaf1788b355a66ddac841a73d8d1d808f32af", "message": "fix sonar", "committedDate": "2020-11-03T02:27:27Z", "type": "commit"}, {"oid": "50303e0b6fe56f86909a10afaeed4d26997da415", "url": "https://github.com/apache/iotdb/commit/50303e0b6fe56f86909a10afaeed4d26997da415", "message": "modify flush", "committedDate": "2020-11-03T03:12:28Z", "type": "commit"}, {"oid": "869c2af4f386ed658a80c409567dcde807542d70", "url": "https://github.com/apache/iotdb/commit/869c2af4f386ed658a80c409567dcde807542d70", "message": "Fix a bug of PrimitiveArrayManager.isCurrentDataTypeExceeded", "committedDate": "2020-11-03T05:08:55Z", "type": "commit"}, {"oid": "cafab8f6d9b54f6d83ed6465632a3eea15ee9bc0", "url": "https://github.com/apache/iotdb/commit/cafab8f6d9b54f6d83ed6465632a3eea15ee9bc0", "message": "Merge remote-tracking branch 'origin/mem_control' into mem_control", "committedDate": "2020-11-03T05:09:40Z", "type": "commit"}, {"oid": "0b831bda9fc67f3e60c8c45dc258a220e5d7553e", "url": "https://github.com/apache/iotdb/commit/0b831bda9fc67f3e60c8c45dc258a220e5d7553e", "message": "Remove currentDataTypeTotalNum", "committedDate": "2020-11-03T05:19:55Z", "type": "commit"}, {"oid": "d2fb431ebc8206a57b52b8ee752db59e5dd6de23", "url": "https://github.com/apache/iotdb/commit/d2fb431ebc8206a57b52b8ee752db59e5dd6de23", "message": "accelerate mem calculate for tablet", "committedDate": "2020-11-03T10:10:11Z", "type": "commit"}, {"oid": "e6547ef0280ef44c9350101fabb92e5f00f94058", "url": "https://github.com/apache/iotdb/commit/e6547ef0280ef44c9350101fabb92e5f00f94058", "message": "change block time", "committedDate": "2020-11-03T10:46:02Z", "type": "commit"}, {"oid": "45eb51864cbb0b8ff0cd807d108fb3f7292737c2", "url": "https://github.com/apache/iotdb/commit/45eb51864cbb0b8ff0cd807d108fb3f7292737c2", "message": "add config", "committedDate": "2020-11-03T11:50:51Z", "type": "commit"}, {"oid": "33b1bb2e638077584f9dd6ecdd84486e01494690", "url": "https://github.com/apache/iotdb/commit/33b1bb2e638077584f9dd6ecdd84486e01494690", "message": "test", "committedDate": "2020-11-03T11:54:02Z", "type": "commit"}, {"oid": "277e18a49194478cb64ec9cb867622a09c78acce", "url": "https://github.com/apache/iotdb/commit/277e18a49194478cb64ec9cb867622a09c78acce", "message": "Merge branch 'mem_control' of github.com:apache/iotdb into mem_control", "committedDate": "2020-11-03T11:54:33Z", "type": "commit"}, {"oid": "cc6c4599d1ee55e6abab4608cd85da73c77dbf99", "url": "https://github.com/apache/iotdb/commit/cc6c4599d1ee55e6abab4608cd85da73c77dbf99", "message": "merge master", "committedDate": "2020-11-03T11:59:00Z", "type": "commit"}, {"oid": "94284c6583cfe82af9e9a1e66210ae7418716ac1", "url": "https://github.com/apache/iotdb/commit/94284c6583cfe82af9e9a1e66210ae7418716ac1", "message": "Merge branch 'mem_control' of https://github.com/apache/iotdb into mem_control", "committedDate": "2020-11-03T11:59:26Z", "type": "commit"}, {"oid": "86606ad308bf1518edaf5f6d7923aa2b6cae3cc2", "url": "https://github.com/apache/iotdb/commit/86606ad308bf1518edaf5f6d7923aa2b6cae3cc2", "message": "revert", "committedDate": "2020-11-03T12:19:17Z", "type": "commit"}, {"oid": "efaa0e4e75e1fe3c3758f5efa7243caca3bb0a89", "url": "https://github.com/apache/iotdb/commit/efaa0e4e75e1fe3c3758f5efa7243caca3bb0a89", "message": "change tsfile threshold to 0", "committedDate": "2020-11-03T12:46:22Z", "type": "commit"}, {"oid": "9c25f3bf0da1e128f0e659770ec1ae315942dca8", "url": "https://github.com/apache/iotdb/commit/9c25f3bf0da1e128f0e659770ec1ae315942dca8", "message": "add some javadoc", "committedDate": "2020-08-18T09:22:06Z", "type": "commit"}, {"oid": "d1983c88e594a746a8ce09bffedd7e6b6d67713d", "url": "https://github.com/apache/iotdb/commit/d1983c88e594a746a8ce09bffedd7e6b6d67713d", "message": "completely fix OOM when insert TEXT data", "committedDate": "2020-08-19T08:03:42Z", "type": "commit"}, {"oid": "6eb32147f8e0bcd077bd9659692e312f3264ba94", "url": "https://github.com/apache/iotdb/commit/6eb32147f8e0bcd077bd9659692e312f3264ba94", "message": "fix UT", "committedDate": "2020-08-19T08:54:51Z", "type": "commit"}, {"oid": "7363269fa8538669881749a3c74f339b59dde693", "url": "https://github.com/apache/iotdb/commit/7363269fa8538669881749a3c74f339b59dde693", "message": "improve resource mem cost accuracy", "committedDate": "2020-08-20T03:52:31Z", "type": "commit"}, {"oid": "2584600d52dbee82e82874db8c2e93f441f77e98", "url": "https://github.com/apache/iotdb/commit/2584600d52dbee82e82874db8c2e93f441f77e98", "message": "fix estimate resource mem cost", "committedDate": "2020-08-20T08:00:06Z", "type": "commit"}, {"oid": "25950667c43ccb9f0ebcf09eb163b9387e650aee", "url": "https://github.com/apache/iotdb/commit/25950667c43ccb9f0ebcf09eb163b9387e650aee", "message": "Remove more useless codes", "committedDate": "2020-08-21T02:11:03Z", "type": "commit"}, {"oid": "f6c226499cd0d08214fdcdcb97a2d7db39ee98c0", "url": "https://github.com/apache/iotdb/commit/f6c226499cd0d08214fdcdcb97a2d7db39ee98c0", "message": "Remove unused import", "committedDate": "2020-08-21T02:31:07Z", "type": "commit"}, {"oid": "d09bd6230bbf0b5701b5aa581009f88a0541878a", "url": "https://github.com/apache/iotdb/commit/d09bd6230bbf0b5701b5aa581009f88a0541878a", "message": "fix the init value of minTime in TVList", "committedDate": "2020-08-21T03:50:54Z", "type": "commit"}, {"oid": "6e0f695c49a584afdcacc4d16c0521347769cf6b", "url": "https://github.com/apache/iotdb/commit/6e0f695c49a584afdcacc4d16c0521347769cf6b", "message": "fix the default value of minTime when clear TVList", "committedDate": "2020-08-21T05:42:56Z", "type": "commit"}, {"oid": "3207fa466b24b2c63168ccec1d589c17d46d1f14", "url": "https://github.com/apache/iotdb/commit/3207fa466b24b2c63168ccec1d589c17d46d1f14", "message": "add limit to sg to keep from reject status", "committedDate": "2020-08-21T09:40:47Z", "type": "commit"}, {"oid": "5cdead02c1d53b8c7bb1ff64700c12978aa67506", "url": "https://github.com/apache/iotdb/commit/5cdead02c1d53b8c7bb1ff64700c12978aa67506", "message": "don't get array from array pool for sorting and fix flush small memtable when closing tsfile", "committedDate": "2020-08-24T09:00:33Z", "type": "commit"}, {"oid": "32b9cc800a128a7aa51a7d7cfcd35511c5a81381", "url": "https://github.com/apache/iotdb/commit/32b9cc800a128a7aa51a7d7cfcd35511c5a81381", "message": "fix workmemtable is null when insert text data", "committedDate": "2020-08-24T14:49:52Z", "type": "commit"}, {"oid": "ee16dc4135d42b9df6dd0acd0bfdf4a207b5dd75", "url": "https://github.com/apache/iotdb/commit/ee16dc4135d42b9df6dd0acd0bfdf4a207b5dd75", "message": "fix CI", "committedDate": "2020-08-25T03:11:24Z", "type": "commit"}, {"oid": "4be4928af28e787319d0b6722bda444c40a6fbbd", "url": "https://github.com/apache/iotdb/commit/4be4928af28e787319d0b6722bda444c40a6fbbd", "message": "fix insertion logic", "committedDate": "2020-08-25T08:42:06Z", "type": "commit"}, {"oid": "23bb34750d4ccc78d44209785fb8558bc35d672d", "url": "https://github.com/apache/iotdb/commit/23bb34750d4ccc78d44209785fb8558bc35d672d", "message": "fix release binary array in memtable", "committedDate": "2020-08-25T09:05:34Z", "type": "commit"}, {"oid": "92c023b1b78cef7c313e2e68d806bf7261b08def", "url": "https://github.com/apache/iotdb/commit/92c023b1b78cef7c313e2e68d806bf7261b08def", "message": "Merge branch 'mem_control' into remove_dynamic_adapter", "committedDate": "2020-08-25T09:15:03Z", "type": "commit"}, {"oid": "eb24177c5cc1cd2abf65d1e885d0f68901495d57", "url": "https://github.com/apache/iotdb/commit/eb24177c5cc1cd2abf65d1e885d0f68901495d57", "message": "Merge pull request #1615 from apache/remove_dynamic_adapter\n\n[IOTDB-834] Remove DynamicAdapter", "committedDate": "2020-08-25T09:15:36Z", "type": "commit"}, {"oid": "7e94aef4dac8393a8b15cbab7cd93a29002b9058", "url": "https://github.com/apache/iotdb/commit/7e94aef4dac8393a8b15cbab7cd93a29002b9058", "message": "Merge branch 'master' into mem_control", "committedDate": "2020-08-25T09:16:41Z", "type": "commit"}, {"oid": "7f951bda9afb8a6d6e88d3d76236f0e705aa310a", "url": "https://github.com/apache/iotdb/commit/7f951bda9afb8a6d6e88d3d76236f0e705aa310a", "message": "fix multiple sgs", "committedDate": "2020-08-26T07:45:20Z", "type": "commit"}, {"oid": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f", "url": "https://github.com/apache/iotdb/commit/75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f", "message": "fix closing tsfile when use insert tablet", "committedDate": "2020-08-26T08:34:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzOTAxNA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478339014", "bodyText": "what is the reason of modifing the sgReportThreshold?", "author": "mychaow", "createdAt": "2020-08-27T11:13:55Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeSet;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private long arrayPoolMemCost;\n+  private boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report applying a new out of buffered array to system. Attention: It should be invoked before\n+   * applying new OOB array actually.\n+   *\n+   * @param dataType data type of array\n+   * @param size     size of array\n+   * @return Return true if it's agreed when memory is enough.\n+   */\n+  public synchronized boolean applyNewOOBArray(TSDataType dataType, int size) {\n+    // if current memory is enough\n+    if (arrayPoolMemCost + totalSgMemCost + dataType.getDataTypeSize() * size\n+        < config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      arrayPoolMemCost += dataType.getDataTypeSize() * size;\n+      logger.debug(\"Current total mem cost is {}\", (arrayPoolMemCost + totalSgMemCost));\n+      rejected = false;\n+      return true;\n+    } else if (arrayPoolMemCost + totalSgMemCost + dataType.getDataTypeSize() * size\n+        < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      arrayPoolMemCost += dataType.getDataTypeSize() * size;\n+      // invoke flush()\n+      logger.debug(\"Out of buffer arraies are too large, call for flushing. \"\n+          + \"Current total mem cost is {}\", (arrayPoolMemCost + totalSgMemCost));\n+      rejected = false;\n+      flush();\n+      return true;\n+    } else {\n+      logger.debug(\"Out of buffer arraies are too large, call for flushing \"\n+          + \"and change system to rejected status...Current total mem cost is {}\", \n+          (arrayPoolMemCost + totalSgMemCost));\n+      rejected = true;\n+      flush();\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   * @param delta mem cost\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() - \n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+        + \"Current array pool mem cost is {}, sg mem cost is {}.\", arrayPoolMemCost,\n+        totalSgMemCost);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+\n+    long newSgReportThreshold = calculateNewSgReportThreshold(storageGroupInfo);\n+    storageGroupInfo.setStorageGroupReportThreshold(newSgReportThreshold);", "originalCommit": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5NjU0Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478796547", "bodyText": "We discussed with @jixuan1989 and @qiaojialin, and decided to set a dynamic sgReportThreshold in order to reduce the report frequency. There might be a better way to implement it because I found the current plan is not stable when insert TEXT data.", "author": "HTHou", "createdAt": "2020-08-28T02:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzOTAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex 900fd04c34..e2b886347c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -19,16 +19,16 @@\n \n package org.apache.iotdb.db.rescon;\n \n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n-import java.util.TreeSet;\n-\n+import java.util.PriorityQueue;\n import org.apache.iotdb.db.conf.IoTDBConfig;\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.engine.flush.FlushManager;\n import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n-import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3OTQzOA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478779438", "bodyText": "the maximum value is what?", "author": "mychaow", "createdAt": "2020-08-28T01:21:34Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeSet;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private long arrayPoolMemCost;\n+  private boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();\n+\n+  private static final double FLUSH_PROPORTION = config.getFlushProportion();\n+  private static final double REJECT_PROPORTION = config.getRejectProportion();\n+\n+  /**\n+   * Report applying a new out of buffered array to system. Attention: It should be invoked before\n+   * applying new OOB array actually.\n+   *\n+   * @param dataType data type of array\n+   * @param size     size of array\n+   * @return Return true if it's agreed when memory is enough.\n+   */\n+  public synchronized boolean applyNewOOBArray(TSDataType dataType, int size) {\n+    // if current memory is enough\n+    if (arrayPoolMemCost + totalSgMemCost + dataType.getDataTypeSize() * size\n+        < config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      arrayPoolMemCost += dataType.getDataTypeSize() * size;\n+      logger.debug(\"Current total mem cost is {}\", (arrayPoolMemCost + totalSgMemCost));\n+      rejected = false;\n+      return true;\n+    } else if (arrayPoolMemCost + totalSgMemCost + dataType.getDataTypeSize() * size\n+        < config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      arrayPoolMemCost += dataType.getDataTypeSize() * size;\n+      // invoke flush()\n+      logger.debug(\"Out of buffer arraies are too large, call for flushing. \"\n+          + \"Current total mem cost is {}\", (arrayPoolMemCost + totalSgMemCost));\n+      rejected = false;\n+      flush();\n+      return true;\n+    } else {\n+      logger.debug(\"Out of buffer arraies are too large, call for flushing \"\n+          + \"and change system to rejected status...Current total mem cost is {}\", \n+          (arrayPoolMemCost + totalSgMemCost));\n+      rejected = true;\n+      flush();\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Report current mem cost of storage group to system.\n+   *\n+   * @param storageGroupInfo storage group\n+   * @param delta mem cost\n+   */\n+  public synchronized void reportStorageGroupStatus(StorageGroupInfo storageGroupInfo) {\n+    long delta = storageGroupInfo.getSgMemCost() - \n+        reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n+    totalSgMemCost += delta;\n+    logger.debug(\"Report Storage Group Status to system. \"\n+        + \"Current array pool mem cost is {}, sg mem cost is {}.\", arrayPoolMemCost,\n+        totalSgMemCost);\n+    reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n+\n+    long newSgReportThreshold = calculateNewSgReportThreshold(storageGroupInfo);\n+    storageGroupInfo.setStorageGroupReportThreshold(newSgReportThreshold);\n+    if (arrayPoolMemCost + totalSgMemCost\n+        >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+      logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n+          + \"Current sg cost is {}, array pool cost is {}\", totalSgMemCost, arrayPoolMemCost);\n+      flush();\n+    } \n+    if (arrayPoolMemCost + totalSgMemCost\n+        >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.debug(\"Change system to reject status...\");\n+      rejected = true;\n+    }\n+  }\n+\n+  /**\n+   * Calculate new Sg report threshold. The maximum value is ", "originalCommit": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5NDc0NA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478794744", "bodyText": "This part is what I'm fixing.\nReporting sg to systemInfo is only invoked when insert Text data. It's necessary to set a limit to sgReportThreshold, otherwise the sgReportThreshold will be too large and cause OOM.\nI'm trying to find a better way to limit the sgReportThreshold.", "author": "HTHou", "createdAt": "2020-08-28T02:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3OTQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex 900fd04c34..e2b886347c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -19,16 +19,16 @@\n \n package org.apache.iotdb.db.rescon;\n \n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n-import java.util.TreeSet;\n-\n+import java.util.PriorityQueue;\n import org.apache.iotdb.db.conf.IoTDBConfig;\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.engine.flush.FlushManager;\n import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n-import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4MDkxNg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478780916", "bodyText": "clear is thread safe? maybe several threads could call the clear()?", "author": "mychaow", "createdAt": "2020-08-28T01:27:17Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+\n+/**\n+ * The TsFileProcessorInfo records the memory cost of this TsFileProcessor.\n+ */\n+public class TsFileProcessorInfo {\n+\n+  /**\n+   * Once tspInfo updated, report to storageGroupInfo that this TSP belongs to.\n+   */\n+  private StorageGroupInfo storageGroupInfo;\n+\n+  /**\n+   * The memory cost of the unsealed TsFileResources of this TSP\n+   */\n+  private long unsealedResourceMemCost;\n+  \n+  /**\n+   * The memory cost of TEXT data of this TSP\n+   */\n+  private long bytesMemCost;\n+\n+  /**\n+   * The memory cost of ChunkMetadata of this TSP\n+   */\n+  private long chunkMetadataMemCost;\n+\n+  /**\n+   * The memory cost of WAL of this TSP\n+   */\n+  private long walMemCost;\n+\n+  public TsFileProcessorInfo(StorageGroupInfo storageGroupInfo) {\n+    this.storageGroupInfo = storageGroupInfo;\n+    this.unsealedResourceMemCost = 0;\n+    this.bytesMemCost = 0;\n+    this.chunkMetadataMemCost = 0;\n+    this.walMemCost = IoTDBDescriptor.getInstance().getConfig().getWalBufferSize();\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost += cost;\n+    storageGroupInfo.addUnsealedResourceMemCost(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost += cost;\n+    storageGroupInfo.addChunkMetadataMemCost(cost);\n+  }\n+\n+  public void addBytesMemCost(long cost) {\n+    bytesMemCost += cost;\n+    storageGroupInfo.addBytesMemCost(cost);\n+  }\n+\n+  /**\n+   * call this method when closing TSP\n+   */\n+  public void clear() {\n+    storageGroupInfo.resetUnsealedResourceMemCost(unsealedResourceMemCost);\n+    storageGroupInfo.resetChunkMetadataMemCost(chunkMetadataMemCost);\n+    storageGroupInfo.resetWalMemCost(walMemCost);", "originalCommit": "75c4a98cc827e0c1fbad17b487dfcd433ed2aa6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMDA4Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478800082", "bodyText": "I think it's thread safe here, because this method only be called by flushOneMemTable in TSP and it be called by one thread only.", "author": "HTHou", "createdAt": "2020-08-28T02:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4MDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwOTM5Ng==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478809396", "bodyText": "yes, one tsp clear is called only be one thread, but if  two TSPs are called clear(),  the storageGroupInfo.resetWalMemCost\uff08\uff09 maybe called by tow threads? and storageGroupInfo.resetWalMemCost is not thread safe.", "author": "mychaow", "createdAt": "2020-08-28T03:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4MDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxMDk1OQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r478810959", "bodyText": "You are right. storageGroupInfo.reset is not thread safe.\nI'll fix it soon. Thanks~", "author": "HTHou", "createdAt": "2020-08-28T03:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4MDkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\nindex 53e13ade8b..c6211c577f 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\n\n@@ -36,9 +36,9 @@ public class TsFileProcessorInfo {\n   private long unsealedResourceMemCost;\n   \n   /**\n-   * The memory cost of TEXT data of this TSP\n+   * The memory cost of memTable of this TSP\n    */\n-  private long bytesMemCost;\n+  private long memTableCost;\n \n   /**\n    * The memory cost of ChunkMetadata of this TSP\n"}}, {"oid": "a84387e4131d1afb7c75b455f64d3703d5738f69", "url": "https://github.com/apache/iotdb/commit/a84387e4131d1afb7c75b455f64d3703d5738f69", "message": "Merge branch 'master' into mem_control", "committedDate": "2020-08-31T02:52:46Z", "type": "commit"}, {"oid": "da517adc5d3568f33de9aacaad8e6792c976af13", "url": "https://github.com/apache/iotdb/commit/da517adc5d3568f33de9aacaad8e6792c976af13", "message": "fix conflicts", "committedDate": "2020-08-31T03:15:23Z", "type": "commit"}, {"oid": "ffc5df4084de8712c6b5fddaabe6c159f6660797", "url": "https://github.com/apache/iotdb/commit/ffc5df4084de8712c6b5fddaabe6c159f6660797", "message": "fix CI", "committedDate": "2020-08-31T03:44:04Z", "type": "commit"}, {"oid": "e032b61d57666f6acd401a3e2f64d93ffc454394", "url": "https://github.com/apache/iotdb/commit/e032b61d57666f6acd401a3e2f64d93ffc454394", "message": "fix a delete timeseries bug", "committedDate": "2020-08-31T08:03:00Z", "type": "commit"}, {"oid": "d096c10ca9771748510d0f37702398e49afabfb8", "url": "https://github.com/apache/iotdb/commit/d096c10ca9771748510d0f37702398e49afabfb8", "message": "fix a delete timeseries bug", "committedDate": "2020-08-31T08:04:59Z", "type": "commit"}, {"oid": "e0ce6a9ea2cff590f6835a921e8953a42e2bdb23", "url": "https://github.com/apache/iotdb/commit/e0ce6a9ea2cff590f6835a921e8953a42e2bdb23", "message": "fix null pointer exception when insert text data", "committedDate": "2020-09-02T07:15:42Z", "type": "commit"}, {"oid": "de7c336e5731811befc8d5df9154734e76f34e05", "url": "https://github.com/apache/iotdb/commit/de7c336e5731811befc8d5df9154734e76f34e05", "message": "merge from master", "committedDate": "2020-09-02T07:17:33Z", "type": "commit"}, {"oid": "bf192619a99589b712ad1d59067c522994e21c49", "url": "https://github.com/apache/iotdb/commit/bf192619a99589b712ad1d59067c522994e21c49", "message": "fix CI", "committedDate": "2020-09-02T08:17:40Z", "type": "commit"}, {"oid": "a2da833107790e5d461915d424d1ad19a89d6ba1", "url": "https://github.com/apache/iotdb/commit/a2da833107790e5d461915d424d1ad19a89d6ba1", "message": "improve array manager", "committedDate": "2020-09-04T09:10:42Z", "type": "commit"}, {"oid": "d40df8acf240f20a50da523a11f5018082b40c4c", "url": "https://github.com/apache/iotdb/commit/d40df8acf240f20a50da523a11f5018082b40c4c", "message": "merge master", "committedDate": "2020-09-04T09:17:07Z", "type": "commit"}, {"oid": "5ce03ec0062caf7b3b76fdb24837441c3817e3c8", "url": "https://github.com/apache/iotdb/commit/5ce03ec0062caf7b3b76fdb24837441c3817e3c8", "message": "fix conflicts", "committedDate": "2020-09-11T03:51:37Z", "type": "commit"}, {"oid": "a6bd6eabf441a8b2286440c0ce07914d1bf30a3e", "url": "https://github.com/apache/iotdb/commit/a6bd6eabf441a8b2286440c0ce07914d1bf30a3e", "message": "change some log level", "committedDate": "2020-09-14T02:19:07Z", "type": "commit"}, {"oid": "db02f320403d990586c024783945eb43b3b303c7", "url": "https://github.com/apache/iotdb/commit/db02f320403d990586c024783945eb43b3b303c7", "message": "add log to show chunk size", "committedDate": "2020-09-14T06:44:47Z", "type": "commit"}, {"oid": "13f1b592f4b51ad4dd9712fbfe3a01b03c066324", "url": "https://github.com/apache/iotdb/commit/13f1b592f4b51ad4dd9712fbfe3a01b03c066324", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-09-14T07:38:05Z", "type": "commit"}, {"oid": "16c5821b138321a03501f7943f7e801607545674", "url": "https://github.com/apache/iotdb/commit/16c5821b138321a03501f7943f7e801607545674", "message": "fix cross-test error", "committedDate": "2020-09-14T07:44:38Z", "type": "commit"}, {"oid": "e3e93751b01da0bdd5cf52e7b8dd16d862a0699a", "url": "https://github.com/apache/iotdb/commit/e3e93751b01da0bdd5cf52e7b8dd16d862a0699a", "message": "optimate insertion and fix OOM when use small memory", "committedDate": "2020-09-17T09:03:22Z", "type": "commit"}, {"oid": "a9e97a32d7459f0324fbab7c3ba57ce501d81848", "url": "https://github.com/apache/iotdb/commit/a9e97a32d7459f0324fbab7c3ba57ce501d81848", "message": "merge master", "committedDate": "2020-09-17T09:06:03Z", "type": "commit"}, {"oid": "41eec679ba4d7e367a20aa3ddb47a5f566e43057", "url": "https://github.com/apache/iotdb/commit/41eec679ba4d7e367a20aa3ddb47a5f566e43057", "message": "fix CI", "committedDate": "2020-09-17T10:01:19Z", "type": "commit"}, {"oid": "a217174b7ea07cdd86f19f4610a856806476037a", "url": "https://github.com/apache/iotdb/commit/a217174b7ea07cdd86f19f4610a856806476037a", "message": "change the time of invoking flush", "committedDate": "2020-09-21T06:20:37Z", "type": "commit"}, {"oid": "a9e81994e52ebdfd100490098340aeb8ecc89968", "url": "https://github.com/apache/iotdb/commit/a9e81994e52ebdfd100490098340aeb8ecc89968", "message": "fix bugs", "committedDate": "2020-09-22T09:44:58Z", "type": "commit"}, {"oid": "59ad75d967cf95315e29d9f8ab3fe5a6d6687de6", "url": "https://github.com/apache/iotdb/commit/59ad75d967cf95315e29d9f8ab3fe5a6d6687de6", "message": "merge master", "committedDate": "2020-09-22T09:48:21Z", "type": "commit"}, {"oid": "798f878c50b448b64d72c3b6f3c533071c14d6db", "url": "https://github.com/apache/iotdb/commit/798f878c50b448b64d72c3b6f3c533071c14d6db", "message": "add an error message", "committedDate": "2020-09-23T03:00:37Z", "type": "commit"}, {"oid": "0d636518ebd09d1805742896475d274733eb4e01", "url": "https://github.com/apache/iotdb/commit/0d636518ebd09d1805742896475d274733eb4e01", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-09-23T05:36:32Z", "type": "commit"}, {"oid": "6955753c24f60643f9d29d293ac6ec50c7e323fd", "url": "https://github.com/apache/iotdb/commit/6955753c24f60643f9d29d293ac6ec50c7e323fd", "message": "time out", "committedDate": "2020-10-06T02:06:40Z", "type": "commit"}, {"oid": "e2a349d6e24e3b43a0b969d1fe4bc1048dff99b0", "url": "https://github.com/apache/iotdb/commit/e2a349d6e24e3b43a0b969d1fe4bc1048dff99b0", "message": "merge master", "committedDate": "2020-10-06T02:12:43Z", "type": "commit"}, {"oid": "7f0cb0918f5fc69545f752cc29046dc3644e3213", "url": "https://github.com/apache/iotdb/commit/7f0cb0918f5fc69545f752cc29046dc3644e3213", "message": "fix test", "committedDate": "2020-10-06T02:26:26Z", "type": "commit"}, {"oid": "e644bedc3c769ea2ad8915ad55a9c79c2404c960", "url": "https://github.com/apache/iotdb/commit/e644bedc3c769ea2ad8915ad55a9c79c2404c960", "message": "change log level", "committedDate": "2020-10-06T03:11:52Z", "type": "commit"}, {"oid": "763fe2acd4a7f0ef6679913049732c0fd031a80d", "url": "https://github.com/apache/iotdb/commit/763fe2acd4a7f0ef6679913049732c0fd031a80d", "message": "add switch for mem_control", "committedDate": "2020-10-13T03:33:57Z", "type": "commit"}, {"oid": "6c3203a32404a884f8570261545d7645aab28626", "url": "https://github.com/apache/iotdb/commit/6c3203a32404a884f8570261545d7645aab28626", "message": "add switch for mem_control", "committedDate": "2020-10-13T06:07:19Z", "type": "commit"}, {"oid": "e5034bb3df25ace698326a67eb4b136696780073", "url": "https://github.com/apache/iotdb/commit/e5034bb3df25ace698326a67eb4b136696780073", "message": "merge master", "committedDate": "2020-10-13T07:26:30Z", "type": "commit"}, {"oid": "322b2a291869e4e6aece137bee5a8498c18140c4", "url": "https://github.com/apache/iotdb/commit/322b2a291869e4e6aece137bee5a8498c18140c4", "message": "Fix sonar", "committedDate": "2020-10-13T12:00:18Z", "type": "commit"}, {"oid": "c1400603f9495e361c2386a48d6a405f30d7eee6", "url": "https://github.com/apache/iotdb/commit/c1400603f9495e361c2386a48d6a405f30d7eee6", "message": "change logic", "committedDate": "2020-10-16T06:49:50Z", "type": "commit"}, {"oid": "a8e7a456c616367f232f79a30ce8755ff453dded", "url": "https://github.com/apache/iotdb/commit/a8e7a456c616367f232f79a30ce8755ff453dded", "message": "fix bugs", "committedDate": "2020-10-19T03:14:00Z", "type": "commit"}, {"oid": "bdf967e60357f98dd088ad224f4d7dba1b8ec0d7", "url": "https://github.com/apache/iotdb/commit/bdf967e60357f98dd088ad224f4d7dba1b8ec0d7", "message": "update branch", "committedDate": "2020-10-19T03:45:23Z", "type": "commit"}, {"oid": "56a54cd11c5bddc18fdcec4b92d4a88e05eb12bf", "url": "https://github.com/apache/iotdb/commit/56a54cd11c5bddc18fdcec4b92d4a88e05eb12bf", "message": "fix sonar", "committedDate": "2020-10-19T05:07:52Z", "type": "commit"}, {"oid": "8637399ac9f5963ef11fbe9be5d4b0bc8dbd77cd", "url": "https://github.com/apache/iotdb/commit/8637399ac9f5963ef11fbe9be5d4b0bc8dbd77cd", "message": "correct some method names", "committedDate": "2020-10-19T06:24:36Z", "type": "commit"}, {"oid": "6c8464e77872d34e9d501edd4e057e729022364f", "url": "https://github.com/apache/iotdb/commit/6c8464e77872d34e9d501edd4e057e729022364f", "message": "fix a bug in mmanager", "committedDate": "2020-10-19T07:20:16Z", "type": "commit"}, {"oid": "b02a109dabb6e4e99b6021a4a1fb21ea2b3d3db7", "url": "https://github.com/apache/iotdb/commit/b02a109dabb6e4e99b6021a4a1fb21ea2b3d3db7", "message": "fix names", "committedDate": "2020-10-19T09:14:06Z", "type": "commit"}, {"oid": "976a2d5cf0f4ca86a0c80ceffb394e74de1a1e06", "url": "https://github.com/apache/iotdb/commit/976a2d5cf0f4ca86a0c80ceffb394e74de1a1e06", "message": "Merge branch 'master' of https://github.com/apache/iotdb into mem_control", "committedDate": "2020-10-20T02:12:56Z", "type": "commit"}, {"oid": "6edbc53822fe8d9b4c5f720aeb8bfde10ca88c95", "url": "https://github.com/apache/iotdb/commit/6edbc53822fe8d9b4c5f720aeb8bfde10ca88c95", "message": "fix many issues", "committedDate": "2020-10-20T06:52:49Z", "type": "commit"}, {"oid": "c7ecda1dbbee2f80b88b5373b9ccd4737495de62", "url": "https://github.com/apache/iotdb/commit/c7ecda1dbbee2f80b88b5373b9ccd4737495de62", "message": "fix sonar", "committedDate": "2020-10-20T09:26:03Z", "type": "commit"}, {"oid": "fde44d171f8ac99de5813b23fcbcd6ddeade5c74", "url": "https://github.com/apache/iotdb/commit/fde44d171f8ac99de5813b23fcbcd6ddeade5c74", "message": "fix some issues", "committedDate": "2020-10-22T03:20:16Z", "type": "commit"}, {"oid": "9f45e4388c655a6031124cf4ab79340b92ea4c3b", "url": "https://github.com/apache/iotdb/commit/9f45e4388c655a6031124cf4ab79340b92ea4c3b", "message": "fix some issues", "committedDate": "2020-10-22T03:34:42Z", "type": "commit"}, {"oid": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "url": "https://github.com/apache/iotdb/commit/e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "message": "merge master", "committedDate": "2020-10-22T05:44:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU0NTA4Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510545083", "bodyText": "no need to throw WriteProcessException in this test : )", "author": "samperson1997", "createdAt": "2020-10-23T01:25:45Z", "path": "server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java", "diffHunk": "@@ -30,7 +32,7 @@\n \n \n   @Test\n-  public void testLongTVList1() {\n+  public void testLongTVList1() throws WriteProcessException {", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU0OTY0OA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510549648", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-23T01:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU0NTA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java b/server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java\nindex c531cf7759..8be3429517 100644\n--- a/server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java\n\n@@ -32,7 +31,7 @@ public class LongTVListTest {\n \n \n   @Test\n-  public void testLongTVList1() throws WriteProcessException {\n+  public void testLongTVList1() {\n     LongTVList tvList = new LongTVList();\n     for (long i = 0; i < 1000; i++) {\n       tvList.putLong(i, i);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU0NTExNg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510545116", "bodyText": "remove unused import", "author": "samperson1997", "createdAt": "2020-10-23T01:25:55Z", "path": "server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java", "diffHunk": "@@ -21,6 +21,8 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Random;\n+\n+import org.apache.iotdb.db.exception.WriteProcessException;", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU0OTY3Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510549677", "bodyText": "Fix~", "author": "HTHou", "createdAt": "2020-10-23T01:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU0NTExNg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java b/server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java\nindex c531cf7759..8be3429517 100644\n--- a/server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/utils/datastructure/LongTVListTest.java\n\n@@ -22,7 +22,6 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Random;\n \n-import org.apache.iotdb.db.exception.WriteProcessException;\n import org.apache.iotdb.tsfile.read.TimeValuePair;\n import org.apache.iotdb.tsfile.utils.TsPrimitiveType.TsLong;\n import org.junit.Assert;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDI2Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510550263", "bodyText": "WriteProcessException could be removed in this class...", "author": "samperson1997", "createdAt": "2020-10-23T01:48:27Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -122,24 +130,24 @@ public void insertTablet(InsertTabletPlan insertTabletPlan, int start, int end)\n       throws WriteProcessException {\n     try {\n       write(insertTabletPlan, start, end);\n-      memSize += MemUtils.getRecordSize(insertTabletPlan, start, end);\n+      memSize += MemUtils.getRecordSize(insertTabletPlan, start, end, !enableMemControl);\n       totalPointsNum += (insertTabletPlan.getMeasurements().length - insertTabletPlan.getFailedMeasurementNumber())\n         * (end - start);\n     } catch (RuntimeException e) {\n-      throw new WriteProcessException(e.getMessage());\n+      throw new WriteProcessException(e);\n     }\n   }\n \n \n   @Override\n   public void write(String deviceId, String measurement, MeasurementSchema schema, long insertTime,\n-      Object objectValue) {\n+      Object objectValue) throws WriteProcessException {", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NTM2OA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510555368", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-23T02:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\nindex ba0cce7b38..0771b8ae4a 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n\n@@ -128,6 +138,7 @@ public abstract class AbstractMemTable implements IMemTable {\n   @Override\n   public void insertTablet(InsertTabletPlan insertTabletPlan, int start, int end)\n       throws WriteProcessException {\n+    updatePlanIndexes(insertTabletPlan.getIndex());\n     try {\n       write(insertTabletPlan, start, end);\n       memSize += MemUtils.getRecordSize(insertTabletPlan, start, end, !enableMemControl);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDQ2Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510550462", "bodyText": "... so that all WriteProcessException in this test could be removed too", "author": "samperson1997", "createdAt": "2020-10-23T01:49:14Z", "path": "server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java", "diffHunk": "@@ -49,7 +51,7 @@ public void setUp() {\n   }\n \n   @Test\n-  public void memSeriesSortIteratorTest() throws IOException {\n+  public void memSeriesSortIteratorTest() throws IOException, WriteProcessException {", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NTQ3Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510555473", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-23T02:10:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java b/server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java\nindex cf343011d2..94c6378f92 100644\n--- a/server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java\n\n@@ -51,7 +51,7 @@ public class PrimitiveMemTableTest {\n   }\n \n   @Test\n-  public void memSeriesSortIteratorTest() throws IOException, WriteProcessException {\n+  public void memSeriesSortIteratorTest() throws IOException {\n     TSDataType dataType = TSDataType.INT32;\n     WritableMemChunk series = new WritableMemChunk(new MeasurementSchema(\"s1\", dataType, TSEncoding.PLAIN), TVList.newList(dataType));\n     int count = 1000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDc4Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510550787", "bodyText": "remove 3 WriteProcessException (one is in line 81)", "author": "samperson1997", "createdAt": "2020-10-23T01:50:32Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java", "diffHunk": "@@ -43,9 +43,9 @@\n   Map<String, Map<String, IWritableMemChunk>> getMemTableMap();\n \n   void write(String deviceId, String measurement, MeasurementSchema schema,\n-      long insertTime, Object objectValue);\n+      long insertTime, Object objectValue) throws WriteProcessException;", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NTc0Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510555743", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-10-23T02:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java\nindex 0c19444f15..269af4a002 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java\n\n@@ -43,9 +44,9 @@ public interface IMemTable {\n   Map<String, Map<String, IWritableMemChunk>> getMemTableMap();\n \n   void write(String deviceId, String measurement, MeasurementSchema schema,\n-      long insertTime, Object objectValue) throws WriteProcessException;\n+      long insertTime, Object objectValue);\n \n-  void write(InsertTabletPlan insertTabletPlan, int start, int end) throws WriteProcessException;\n+  void write(InsertTabletPlan insertTabletPlan, int start, int end);\n \n   /**\n    * @return the number of points\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDk3Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510550973", "bodyText": "Remove WriteProcessException", "author": "samperson1997", "createdAt": "2020-10-23T01:51:18Z", "path": "server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableFlushTaskTest.java", "diffHunk": "@@ -62,7 +63,7 @@ public void tearDown() throws Exception {\n   }\n \n   @Test\n-  public void testFlushMemTable() throws ExecutionException, InterruptedException, IOException {\n+  public void testFlushMemTable() throws ExecutionException, InterruptedException, IOException, WriteProcessException {", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NjMzMg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510556332", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-10-23T02:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MDk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableFlushTaskTest.java b/server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableFlushTaskTest.java\nindex 5a1b4c2f97..d175cacc26 100644\n--- a/server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableFlushTaskTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableFlushTaskTest.java\n\n@@ -63,7 +60,7 @@ public class MemTableFlushTaskTest {\n   }\n \n   @Test\n-  public void testFlushMemTable() throws ExecutionException, InterruptedException, IOException, WriteProcessException {\n+  public void testFlushMemTable() throws ExecutionException, InterruptedException, IOException {\n     MemTableTestUtils.produceData(memTable, startTime, endTime, MemTableTestUtils.deviceId0,\n         MemTableTestUtils.measurementId0,\n         MemTableTestUtils.dataType0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MTEyNA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510551124", "bodyText": "Remove WriteProcessException", "author": "samperson1997", "createdAt": "2020-10-23T01:51:57Z", "path": "server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableTestUtils.java", "diffHunk": "@@ -40,7 +41,7 @@\n   }\n \n   public static void produceData(IMemTable iMemTable, long startTime, long endTime, String deviceId,\n-      String measurementId, TSDataType dataType) {\n+      String measurementId, TSDataType dataType) throws WriteProcessException {", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NjM2Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510556363", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-10-23T02:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MTEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableTestUtils.java b/server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableTestUtils.java\nindex 4833a3c8a9..06cf24143b 100644\n--- a/server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableTestUtils.java\n+++ b/server/src/test/java/org/apache/iotdb/db/engine/memtable/MemTableTestUtils.java\n\n@@ -41,7 +40,7 @@ public class MemTableTestUtils {\n   }\n \n   public static void produceData(IMemTable iMemTable, long startTime, long endTime, String deviceId,\n-      String measurementId, TSDataType dataType) throws WriteProcessException {\n+      String measurementId, TSDataType dataType) {\n     if (startTime > endTime) {\n       throw new RuntimeException(String.format(\"start time %d > end time %d\", startTime, endTime));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MjU1MA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510552550", "bodyText": "Remove WriteProcessException", "author": "samperson1997", "createdAt": "2020-10-23T01:57:49Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -100,15 +107,16 @@ private IWritableMemChunk createIfNotExistAndGet(String deviceId, String measure\n   protected abstract IWritableMemChunk genMemSeries(MeasurementSchema schema);\n \n   @Override\n-  public void insert(InsertRowPlan insertRowPlan) {\n+  public void insert(InsertRowPlan insertRowPlan) throws WriteProcessException {", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NjUyNA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510556524", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-10-23T02:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MjU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\nindex ba0cce7b38..0771b8ae4a 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n\n@@ -107,7 +116,8 @@ public abstract class AbstractMemTable implements IMemTable {\n   protected abstract IWritableMemChunk genMemSeries(MeasurementSchema schema);\n \n   @Override\n-  public void insert(InsertRowPlan insertRowPlan) throws WriteProcessException {\n+  public void insert(InsertRowPlan insertRowPlan) {\n+    updatePlanIndexes(insertRowPlan.getIndex());\n     for (int i = 0; i < insertRowPlan.getValues().length; i++) {\n \n       if (insertRowPlan.getValues()[i] == null) {\n"}}, {"oid": "8fbccbcadabefdf509114ce645c0fe6fc8d5c6ad", "url": "https://github.com/apache/iotdb/commit/8fbccbcadabefdf509114ce645c0fe6fc8d5c6ad", "message": "fix review", "committedDate": "2020-10-23T05:32:10Z", "type": "commit"}, {"oid": "2dae54799411fb9fb693e6fbda99cb860c070386", "url": "https://github.com/apache/iotdb/commit/2dae54799411fb9fb693e6fbda99cb860c070386", "message": "fix engine properties", "committedDate": "2020-10-23T12:17:44Z", "type": "commit"}, {"oid": "97f7365aa374e05175b3513c1393017443bbfc29", "url": "https://github.com/apache/iotdb/commit/97f7365aa374e05175b3513c1393017443bbfc29", "message": "merge master", "committedDate": "2020-10-24T02:42:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODI5MA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510558290", "bodyText": "Would modifying to this be better?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * If mem control enabled, do not get text data size here, the size will add to memtable\n          \n          \n            \n               * If mem control enabled, do not add text data size here, the size will add to memtable", "author": "samperson1997", "createdAt": "2020-10-23T02:22:57Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java", "diffHunk": "@@ -45,8 +45,11 @@ private MemUtils(){\n \n   /**\n    * function for getting the value size.\n+   * If mem control enabled, do not get text data size here, the size will add to memtable", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4NjU4NA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511686584", "bodyText": "Yes, it's better. Fixed~", "author": "HTHou", "createdAt": "2020-10-26T02:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java b/server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java\nindex 38403e6049..a02287c107 100644\n--- a/server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java\n+++ b/server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java\n\n@@ -45,7 +45,7 @@ public class MemUtils {\n \n   /**\n    * function for getting the value size.\n-   * If mem control enabled, do not get text data size here, the size will add to memtable\n+   * If mem control enabled, do not add text data size here, the size will be added to memtable\n    * before inserting.\n    */\n   public static long getRecordSize(TSDataType dataType, Object value,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODM2Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510558367", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * If mem control enabled, do not get text data size here, the size will add to memtable\n          \n          \n            \n               * If mem control enabled, do not add text data size here, the size will add to memtable", "author": "samperson1997", "createdAt": "2020-10-23T02:23:16Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java", "diffHunk": "@@ -70,7 +73,12 @@ public static long getBinarySize(Binary value) {\n         .sizeOf(value.getValues());\n   }\n \n-  public static long getRecordSize(InsertTabletPlan insertTabletPlan, int start, int end) {\n+  /**\n+   * If mem control enabled, do not get text data size here, the size will add to memtable", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4NjYyNw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511686627", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-26T02:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java b/server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java\nindex 38403e6049..a02287c107 100644\n--- a/server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java\n+++ b/server/src/main/java/org/apache/iotdb/db/utils/MemUtils.java\n\n@@ -74,7 +74,7 @@ public class MemUtils {\n   }\n \n   /**\n-   * If mem control enabled, do not get text data size here, the size will add to memtable\n+   * If mem control enabled, do not add text data size here, the size will be added to memtable\n    * before inserting.\n    */\n   public static long getRecordSize(InsertTabletPlan insertTabletPlan, int start, int end,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1OTkwMQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510559901", "bodyText": "indent is not correct", "author": "samperson1997", "createdAt": "2020-10-23T02:29:48Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -529,23 +569,22 @@ private PartialPath deleteOneTimeseriesAndUpdateStatistics(PartialPath path)\n     removeFromTagInvertedIndex(pair.right);\n     PartialPath storageGroupPath = pair.left;\n \n-    // TODO: delete the path node and all its ancestors\n-    mNodeCache.clear();\n-    try {\n-      IoTDBConfigDynamicAdapter.getInstance().addOrDeleteTimeSeries(-1);\n-    } catch (ConfigAdjusterException e) {\n-      throw new MetadataException(e);\n-    }\n+      // update statistics in schemaDataTypeNumMap\n+      updateSchemaDataTypeNumMap(pair.right.getSchema().getType(), -1);\n+\n+      // TODO: delete the path node and all its ancestors\n+      mNodeCache.clear();\n \n-    if (config.isEnableParameterAdapter()) {\n-      PartialPath storageGroup = getStorageGroupPath(path);\n-      int size = seriesNumberInStorageGroups.get(storageGroup.getFullPath());\n-      seriesNumberInStorageGroups.put(storageGroup.getFullPath(), size - 1);\n-      if (size == maxSeriesNumberAmongStorageGroup) {\n-        seriesNumberInStorageGroups.values().stream().max(Integer::compareTo)\n-            .ifPresent(val -> maxSeriesNumberAmongStorageGroup = val);\n+      if (config.isEnableActiveTimeseriesCounter()) {\n+        PartialPath storageGroup = getStorageGroupPath(path);\n+        int size = seriesNumberInStorageGroups.get(storageGroup.getFullPath());\n+        seriesNumberInStorageGroups.put(storageGroup.getFullPath(), size - 1);\n+        totalSeriesNumber--;\n+        if (size == maxSeriesNumberAmongStorageGroup) {\n+          seriesNumberInStorageGroups.values().stream().max(Integer::compareTo)\n+              .ifPresent(val -> maxSeriesNumberAmongStorageGroup = val);\n+        }\n       }", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4NzM4OQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511687389", "bodyText": "Nice catch! Fixed~", "author": "HTHou", "createdAt": "2020-10-26T02:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1OTkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex 1e3b142b2f..3598d44abc 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -569,22 +544,12 @@ public class MManager {\n     removeFromTagInvertedIndex(pair.right);\n     PartialPath storageGroupPath = pair.left;\n \n-      // update statistics in schemaDataTypeNumMap\n-      updateSchemaDataTypeNumMap(pair.right.getSchema().getType(), -1);\n+    // update statistics in schemaDataTypeNumMap\n+    updateSchemaDataTypeNumMap(pair.right.getSchema().getType(), -1);\n \n-      // TODO: delete the path node and all its ancestors\n-      mNodeCache.clear();\n-\n-      if (config.isEnableActiveTimeseriesCounter()) {\n-        PartialPath storageGroup = getStorageGroupPath(path);\n-        int size = seriesNumberInStorageGroups.get(storageGroup.getFullPath());\n-        seriesNumberInStorageGroups.put(storageGroup.getFullPath(), size - 1);\n-        totalSeriesNumber--;\n-        if (size == maxSeriesNumberAmongStorageGroup) {\n-          seriesNumberInStorageGroups.values().stream().max(Integer::compareTo)\n-              .ifPresent(val -> maxSeriesNumberAmongStorageGroup = val);\n-        }\n-      }\n+    // TODO: delete the path node and all its ancestors\n+    mNodeCache.clear();\n+    totalSeriesNumber--;\n     return storageGroupPath;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU2MDc0MA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r510560740", "bodyText": "to be consistent with maxSeriesNumberAmongStorageGroup and  totalSeriesNumber below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private int reportedDataTypeTotalNum;\n          \n          \n            \n              private long reportedDataTypeTotalNum;", "author": "samperson1997", "createdAt": "2020-10-23T02:33:29Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -119,15 +118,41 @@\n   private RandomDeleteCache<PartialPath, MNode> mNodeCache;\n   // tag key -> tag value -> LeafMNode\n   private Map<String, Map<String, Set<MeasurementMNode>>> tagIndex = new HashMap<>();\n+\n+  // data type -> number\n+  private Map<TSDataType, Integer> schemaDataTypeNumMap = new ConcurrentHashMap<>();\n+  // reported total series number\n+  private int reportedDataTypeTotalNum;", "originalCommit": "e0efef2f57efdd987423ba3b5b7ccdc73d99603b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4NzA0Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511687043", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-26T02:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU2MDc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex 1e3b142b2f..3598d44abc 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -122,11 +124,7 @@ public class MManager {\n   // data type -> number\n   private Map<TSDataType, Integer> schemaDataTypeNumMap = new ConcurrentHashMap<>();\n   // reported total series number\n-  private int reportedDataTypeTotalNum;\n-\n-  // storage group name -> the series number\n-  private Map<String, Integer> seriesNumberInStorageGroups = new ConcurrentHashMap<>();\n-  private long maxSeriesNumberAmongStorageGroup;\n+  private long reportedDataTypeTotalNum;\n   private long totalSeriesNumber = 0L;\n   private boolean initialized;\n   protected static IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n"}}, {"oid": "cee57d11fe983849bc2c13c87ac1ed4d00553a8a", "url": "https://github.com/apache/iotdb/commit/cee57d11fe983849bc2c13c87ac1ed4d00553a8a", "message": "fix review", "committedDate": "2020-10-26T02:10:50Z", "type": "commit"}, {"oid": "09993c369bfbe68ca4ff887e02decf120d0f192c", "url": "https://github.com/apache/iotdb/commit/09993c369bfbe68ca4ff887e02decf120d0f192c", "message": "fix review", "committedDate": "2020-10-26T02:11:10Z", "type": "commit"}, {"oid": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "url": "https://github.com/apache/iotdb/commit/fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "message": "Merge branch 'master' of https://github.com/apache/iotdb into mem_control", "committedDate": "2020-10-26T02:11:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTYwMw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511765603", "bodyText": "Have you fixed the concurrent issue? I think current implementation isn't thread safe", "author": "SilverNarcissus", "createdAt": "2020-10-26T07:43:39Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+\n+/**\n+ * The TsFileProcessorInfo records the memory cost of this TsFileProcessor.\n+ */\n+public class TsFileProcessorInfo {\n+\n+  /**\n+   * Once tspInfo updated, report to storageGroupInfo that this TSP belongs to.\n+   */\n+  private StorageGroupInfo storageGroupInfo;\n+\n+  /**\n+   * The memory cost of the unsealed TsFileResources of this TSP\n+   */\n+  private long unsealedResourceMemCost;\n+  \n+  /**\n+   * The memory cost of memTable of this TSP\n+   */\n+  private long memTableCost;\n+\n+  /**\n+   * The memory cost of ChunkMetadata of this TSP\n+   */\n+  private long chunkMetadataMemCost;\n+\n+  /**\n+   * The memory cost of WAL of this TSP\n+   */\n+  private long walMemCost;\n+\n+  public TsFileProcessorInfo(StorageGroupInfo storageGroupInfo) {\n+    this.storageGroupInfo = storageGroupInfo;\n+    this.unsealedResourceMemCost = 0;\n+    this.memTableCost = 0;\n+    this.chunkMetadataMemCost = 0;\n+    this.walMemCost = IoTDBDescriptor.getInstance().getConfig().getWalBufferSize();\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost += cost;\n+    storageGroupInfo.addUnsealedResourceMemCost(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost += cost;\n+    storageGroupInfo.addChunkMetadataMemCost(cost);\n+  }\n+\n+  public void addMemTableCost(long cost) {\n+    memTableCost += cost;\n+    storageGroupInfo.addMemTableCost(cost);\n+  }\n+\n+  /**\n+   * call this method when closing TSP\n+   */\n+  public void clear() {\n+    storageGroupInfo.resetUnsealedResourceMemCost(unsealedResourceMemCost);\n+    storageGroupInfo.resetChunkMetadataMemCost(chunkMetadataMemCost);\n+    storageGroupInfo.resetWalMemCost(walMemCost);", "originalCommit": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1NDc3NA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r512454774", "bodyText": "This method is only called by endFile() in TsFileProcessor. Can you let me know why it has a concurrent issue?", "author": "HTHou", "createdAt": "2020-10-27T07:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1Njg3MA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r512456870", "bodyText": "If two tsfile Porcessor end their file concurrently. StorageGroupInfo.WalMemCost will be write concurrently. That's may cause a concurrent issue.", "author": "SilverNarcissus", "createdAt": "2020-10-27T07:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1Njk3OA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r512456978", "bodyText": "Same as UnsealedResourceMemCost and ChunkMetadataMemCost.", "author": "SilverNarcissus", "createdAt": "2020-10-27T07:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwNTU0OQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r512505549", "bodyText": "Thanks, makes sense~", "author": "HTHou", "createdAt": "2020-10-27T08:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5ODY2Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r512698662", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-27T13:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\nindex 23b8f129c8..c6211c577f 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\n\n@@ -52,34 +52,33 @@ public class TsFileProcessorInfo {\n \n   public TsFileProcessorInfo(StorageGroupInfo storageGroupInfo) {\n     this.storageGroupInfo = storageGroupInfo;\n-    this.unsealedResourceMemCost = 0;\n-    this.memTableCost = 0;\n-    this.chunkMetadataMemCost = 0;\n+    this.unsealedResourceMemCost = 0L;\n+    this.memTableCost = 0L;\n+    this.chunkMetadataMemCost = 0L;\n     this.walMemCost = IoTDBDescriptor.getInstance().getConfig().getWalBufferSize();\n   }\n \n   public void addUnsealedResourceMemCost(long cost) {\n     unsealedResourceMemCost += cost;\n-    storageGroupInfo.addUnsealedResourceMemCost(cost);\n+    storageGroupInfo.addStorageGroupMemCost(cost);\n   }\n \n   public void addChunkMetadataMemCost(long cost) {\n     chunkMetadataMemCost += cost;\n-    storageGroupInfo.addChunkMetadataMemCost(cost);\n+    storageGroupInfo.addStorageGroupMemCost(cost);\n   }\n \n   public void addMemTableCost(long cost) {\n     memTableCost += cost;\n-    storageGroupInfo.addMemTableCost(cost);\n+    storageGroupInfo.addStorageGroupMemCost(cost);\n   }\n \n   /**\n    * call this method when closing TSP\n    */\n   public void clear() {\n-    storageGroupInfo.resetUnsealedResourceMemCost(unsealedResourceMemCost);\n-    storageGroupInfo.resetChunkMetadataMemCost(chunkMetadataMemCost);\n-    storageGroupInfo.resetWalMemCost(walMemCost);\n+    storageGroupInfo.releaseStorageGroupMemCost(unsealedResourceMemCost +\n+        walMemCost + chunkMetadataMemCost);\n     walMemCost = 0;\n     unsealedResourceMemCost = 0;\n     chunkMetadataMemCost = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3OTYwMg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511779602", "bodyText": "\"1.1\" should be a static final constant and have a descriptive name", "author": "SilverNarcissus", "createdAt": "2020-10-26T08:14:34Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -608,13 +644,28 @@ public void deleteStorageGroups(List<PartialPath> storageGroups) throws Metadata\n           logWriter.deleteStorageGroup(storageGroup.getFullPath());\n         }\n       }\n-    } catch (ConfigAdjusterException e) {\n-      throw new MetadataException(e);\n     } catch (IOException e) {\n       throw new MetadataException(e.getMessage());\n     }\n   }\n \n+  /**\n+   * update statistics in schemaDataTypeNumMap\n+   *\n+   * @param type data type\n+   * @param num 1 for creating timeseries and -1 for deleting timeseries\n+   */\n+  private void updateSchemaDataTypeNumMap(TSDataType type, int num) {\n+    schemaDataTypeNumMap.put(type, schemaDataTypeNumMap.getOrDefault(type, 0) + num);\n+    schemaDataTypeNumMap.put(TSDataType.INT64,\n+        schemaDataTypeNumMap.getOrDefault(TSDataType.INT64, 0) + num);\n+    int currentDataTypeTotalNum = schemaDataTypeNumMap.values().size();\n+    if (num > 0 && currentDataTypeTotalNum >= reportedDataTypeTotalNum * 1.1) {", "originalCommit": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2OTQ2Ng==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511969466", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-26T13:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3OTYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex 81908ceed8..3598d44abc 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -629,16 +589,6 @@ public class MManager {\n           updateSchemaDataTypeNumMap(leafMNode.getSchema().getType(), -1);\n         }\n \n-        if (config.isEnableActiveTimeseriesCounter()) {\n-          int size = seriesNumberInStorageGroups.get(storageGroup.getFullPath());\n-          ActiveTimeSeriesCounter.getInstance().delete(storageGroup.getFullPath());\n-          totalSeriesNumber -= size;\n-          seriesNumberInStorageGroups.remove(storageGroup.getFullPath());\n-          if (size == maxSeriesNumberAmongStorageGroup) {\n-            maxSeriesNumberAmongStorageGroup =\n-                seriesNumberInStorageGroups.values().stream().max(Integer::compareTo).orElse(0);\n-          }\n-        }\n         // if success\n         if (!isRecovering) {\n           logWriter.deleteStorageGroup(storageGroup.getFullPath());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4Mzc4NA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511783784", "bodyText": "We may not get here, so we should return null and add some comments", "author": "SilverNarcissus", "createdAt": "2020-10-26T08:22:46Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manage all primitive data list in memory, including get and release operation.\n+ */\n+public class PrimitiveArrayManager {\n+\n+  /**\n+   * data type -> ArrayDeque<Array>\n+   */\n+  private static final Map<TSDataType, ArrayDeque<Object>> bufferedArraysMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> current number of buffered arrays\n+   */\n+  private static final Map<TSDataType, Integer> bufferedArraysNumMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> ratio of data type in schema, which could be seen as recommended ratio\n+   */\n+  private static final Map<TSDataType, Double> bufferedArraysNumRatio = new EnumMap<>(\n+      TSDataType.class);\n+\n+  private static final Logger logger = LoggerFactory.getLogger(PrimitiveArrayManager.class);\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  public static final int ARRAY_SIZE = config.getPrimitiveArraySize();\n+\n+  /**\n+   * threshold total size of arrays for all data types\n+   */\n+  private static final double BUFFERED_ARRAY_SIZE_THRESHOLD =\n+      config.getAllocateMemoryForWrite() * config.getBufferedArraysMemoryProportion();\n+\n+  /**\n+   * total size of buffered arrays\n+   */\n+  private static AtomicInteger bufferedArraysSize = new AtomicInteger();\n+\n+  /**\n+   * total size of out of buffer arrays\n+   */\n+  private static AtomicInteger outOfBufferArraysSize = new AtomicInteger();\n+\n+  static {\n+    bufferedArraysMap.put(TSDataType.BOOLEAN, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT32, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT64, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.FLOAT, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.DOUBLE, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.TEXT, new ArrayDeque<>());\n+  }\n+\n+  private PrimitiveArrayManager() {\n+  }\n+\n+  /**\n+   * Get primitive data lists according to type\n+   *\n+   * @param dataType data type\n+   * @return an array\n+   */\n+  public static Object getDataListByType(TSDataType dataType) {\n+    // check buffered array num\n+    if (bufferedArraysSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n+        > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n+      // return an out of buffer array\n+      outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      return getDataList(dataType);\n+    }\n+\n+    synchronized (bufferedArraysMap.get(dataType)) {\n+      // return a buffered array\n+      bufferedArraysNumMap.put(dataType, bufferedArraysNumMap.getOrDefault(dataType, 0) + 1);\n+      bufferedArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      Object dataArray = bufferedArraysMap.get(dataType).poll();\n+      if (dataArray != null) {\n+        return dataArray;\n+      }\n+    }\n+    return getDataList(dataType);", "originalCommit": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5ODk1OQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511798959", "bodyText": "It's my fault .... Could you please help add some comments @HTHou ? This return statement should not reached..", "author": "samperson1997", "createdAt": "2020-10-26T08:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4Mzc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwMzcwNw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511803707", "bodyText": "It's my fault .... Could you please help add some comments @HTHou ? This return statement should not reached..\n\nSure, Let me fix it.", "author": "HTHou", "createdAt": "2020-10-26T08:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4Mzc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2OTMxNA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511969314", "bodyText": "I'm confused why should it return null here. If change it, the tests will failed...", "author": "HTHou", "createdAt": "2020-10-26T13:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4Mzc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java b/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\nindex 04224e0090..5457e0b953 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\n\n@@ -94,13 +94,13 @@ public class PrimitiveArrayManager {\n    * @param dataType data type\n    * @return an array\n    */\n-  public static Object getDataListByType(TSDataType dataType) {\n-    // check buffered array num\n+  public static Object getPrimitiveArraysByType(TSDataType dataType) {\n+    // check buffered array num (to avoid entering synchronized block every time)\n     if (bufferedArraysSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n         > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n       // return an out of buffer array\n       outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n-      return getDataList(dataType);\n+      return createPrimitiveArray(dataType);\n     }\n \n     synchronized (bufferedArraysMap.get(dataType)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5MjI4Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511792287", "bodyText": "Reference's length is 8 bytes. Or 16 bytes exactly (Java objects head length)", "author": "SilverNarcissus", "createdAt": "2020-10-26T08:38:48Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSDataType.java", "diffHunk": "@@ -98,6 +99,23 @@ public short serialize() {\n     return enumToByte();\r\n   }\r\n \r\n+  public int getDataTypeSize() {\r\n+    switch (this) {\r\n+      case BOOLEAN:\r\n+        return 1;\r\n+      case INT32:\r\n+      case FLOAT:\r\n+        // For text: return the size of reference here\r", "originalCommit": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MTM4Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511961387", "bodyText": "This method is for calculating the array sizes in array pool. For text data, it should return the reference size of a Binary object. And the actual size of the Binary object won't be considered here.\nSo, should it return 8?", "author": "HTHou", "createdAt": "2020-10-26T13:32:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5MjI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1NjAwNQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r512456005", "bodyText": "Yes, In 64-bit machine, it should return 8", "author": "SilverNarcissus", "createdAt": "2020-10-27T07:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5MjI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwNTkzNg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r512505936", "bodyText": "Thanks, update soon~", "author": "HTHou", "createdAt": "2020-10-27T08:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5MjI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5ODM5OA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r512698398", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-27T13:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5MjI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSDataType.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSDataType.java\nindex 509a1da525..505be1b19b 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSDataType.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSDataType.java\n\n@@ -105,9 +105,9 @@ public enum TSDataType {\n         return 1;\n       case INT32:\n       case FLOAT:\n+        return 4;\n         // For text: return the size of reference here\n       case TEXT:\n-        return 4;\n       case INT64:\n       case DOUBLE:\n         return 8;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2MjMzOA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511762338", "bodyText": "Is this method used?", "author": "samperson1997", "createdAt": "2020-10-26T07:35:29Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/flush/FlushManager.java", "diffHunk": "@@ -96,6 +96,13 @@ public void runMayThrow() {\n     }\n   }\n \n+  /**\n+   * get the current size of flush queue\n+   */\n+  public int getTsFileProcessorQueueSize() {", "originalCommit": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMDI4OA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511810288", "bodyText": "This method is no longer useful, I'll remove it.", "author": "HTHou", "createdAt": "2020-10-26T09:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2MjMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/flush/FlushManager.java b/server/src/main/java/org/apache/iotdb/db/engine/flush/FlushManager.java\nindex 8c7489938c..0d49f2c079 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/flush/FlushManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/flush/FlushManager.java\n\n@@ -96,13 +96,6 @@ public class FlushManager implements FlushManagerMBean, IService {\n     }\n   }\n \n-  /**\n-   * get the current size of flush queue\n-   */\n-  public int getTsFileProcessorQueueSize() {\n-    return tsFileProcessorQueue.size();\n-  }\n-\n   /**\n    * Add TsFileProcessor to asyncTryToFlush manager\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTc4Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511765782", "bodyText": "Remove WriteProcessException", "author": "samperson1997", "createdAt": "2020-10-26T07:44:03Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java", "diffHunk": "@@ -45,7 +45,7 @@\n   void write(String deviceId, String measurement, MeasurementSchema schema,\n       long insertTime, Object objectValue);\n \n-  void write(InsertTabletPlan insertTabletPlan, int start, int end);\n+  void write(InsertTabletPlan insertTabletPlan, int start, int end) throws WriteProcessException;", "originalCommit": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMjI1Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511812257", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-26T09:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NTc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java\nindex b6408babd7..269af4a002 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/IMemTable.java\n\n@@ -45,7 +46,7 @@ public interface IMemTable {\n   void write(String deviceId, String measurement, MeasurementSchema schema,\n       long insertTime, Object objectValue);\n \n-  void write(InsertTabletPlan insertTabletPlan, int start, int end) throws WriteProcessException;\n+  void write(InsertTabletPlan insertTabletPlan, int start, int end);\n \n   /**\n    * @return the number of points\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NjEzOQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511766139", "bodyText": "Remove all WriteProcessException in this test (4 in functions and 1 in import)", "author": "samperson1997", "createdAt": "2020-10-26T07:44:56Z", "path": "server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java", "diffHunk": "@@ -22,7 +22,9 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Random;\n+\n import org.apache.iotdb.db.engine.querycontext.ReadOnlyMemChunk;\n+import org.apache.iotdb.db.exception.WriteProcessException;", "originalCommit": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMjM3Ng==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511812376", "bodyText": "Thanks, fixed~", "author": "HTHou", "createdAt": "2020-10-26T09:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2NjEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java b/server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java\nindex 8d8e11faf9..94c6378f92 100644\n--- a/server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/engine/memtable/PrimitiveMemTableTest.java\n\n@@ -24,7 +24,7 @@ import java.util.Collections;\n import java.util.Random;\n \n import org.apache.iotdb.db.engine.querycontext.ReadOnlyMemChunk;\n-import org.apache.iotdb.db.exception.WriteProcessException;\n+import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.utils.MathUtils;\n import org.apache.iotdb.db.utils.datastructure.TVList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5NzY5NA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511797694", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this.unsealedResourceMemCost = 0;\n          \n          \n            \n                this.memTableCost = 0;\n          \n          \n            \n                this.chunkMetadataMemCost = 0;\n          \n          \n            \n                this.unsealedResourceMemCost = 0L;\n          \n          \n            \n                this.memTableCost = 0L;\n          \n          \n            \n                this.chunkMetadataMemCost = 0L;", "author": "samperson1997", "createdAt": "2020-10-26T08:48:28Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+\n+/**\n+ * The TsFileProcessorInfo records the memory cost of this TsFileProcessor.\n+ */\n+public class TsFileProcessorInfo {\n+\n+  /**\n+   * Once tspInfo updated, report to storageGroupInfo that this TSP belongs to.\n+   */\n+  private StorageGroupInfo storageGroupInfo;\n+\n+  /**\n+   * The memory cost of the unsealed TsFileResources of this TSP\n+   */\n+  private long unsealedResourceMemCost;\n+  \n+  /**\n+   * The memory cost of memTable of this TSP\n+   */\n+  private long memTableCost;\n+\n+  /**\n+   * The memory cost of ChunkMetadata of this TSP\n+   */\n+  private long chunkMetadataMemCost;\n+\n+  /**\n+   * The memory cost of WAL of this TSP\n+   */\n+  private long walMemCost;\n+\n+  public TsFileProcessorInfo(StorageGroupInfo storageGroupInfo) {\n+    this.storageGroupInfo = storageGroupInfo;\n+    this.unsealedResourceMemCost = 0;\n+    this.memTableCost = 0;\n+    this.chunkMetadataMemCost = 0;", "originalCommit": "fe7c76d49e8f0d99c18de037a22fe13fc2a188e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNDA5Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r511814097", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-10-26T09:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5NzY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\nindex 23b8f129c8..c6211c577f 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\n\n@@ -52,34 +52,33 @@ public class TsFileProcessorInfo {\n \n   public TsFileProcessorInfo(StorageGroupInfo storageGroupInfo) {\n     this.storageGroupInfo = storageGroupInfo;\n-    this.unsealedResourceMemCost = 0;\n-    this.memTableCost = 0;\n-    this.chunkMetadataMemCost = 0;\n+    this.unsealedResourceMemCost = 0L;\n+    this.memTableCost = 0L;\n+    this.chunkMetadataMemCost = 0L;\n     this.walMemCost = IoTDBDescriptor.getInstance().getConfig().getWalBufferSize();\n   }\n \n   public void addUnsealedResourceMemCost(long cost) {\n     unsealedResourceMemCost += cost;\n-    storageGroupInfo.addUnsealedResourceMemCost(cost);\n+    storageGroupInfo.addStorageGroupMemCost(cost);\n   }\n \n   public void addChunkMetadataMemCost(long cost) {\n     chunkMetadataMemCost += cost;\n-    storageGroupInfo.addChunkMetadataMemCost(cost);\n+    storageGroupInfo.addStorageGroupMemCost(cost);\n   }\n \n   public void addMemTableCost(long cost) {\n     memTableCost += cost;\n-    storageGroupInfo.addMemTableCost(cost);\n+    storageGroupInfo.addStorageGroupMemCost(cost);\n   }\n \n   /**\n    * call this method when closing TSP\n    */\n   public void clear() {\n-    storageGroupInfo.resetUnsealedResourceMemCost(unsealedResourceMemCost);\n-    storageGroupInfo.resetChunkMetadataMemCost(chunkMetadataMemCost);\n-    storageGroupInfo.resetWalMemCost(walMemCost);\n+    storageGroupInfo.releaseStorageGroupMemCost(unsealedResourceMemCost +\n+        walMemCost + chunkMetadataMemCost);\n     walMemCost = 0;\n     unsealedResourceMemCost = 0;\n     chunkMetadataMemCost = 0;\n"}}, {"oid": "960db21f2a794a4cc129ac9dd30f72b0f3968ab1", "url": "https://github.com/apache/iotdb/commit/960db21f2a794a4cc129ac9dd30f72b0f3968ab1", "message": "fix review", "committedDate": "2020-10-26T13:45:12Z", "type": "commit"}, {"oid": "8a0acc6e9f2ba1734e7522fb841be1eb6145b2e4", "url": "https://github.com/apache/iotdb/commit/8a0acc6e9f2ba1734e7522fb841be1eb6145b2e4", "message": "merge master", "committedDate": "2020-10-26T13:47:30Z", "type": "commit"}, {"oid": "4236b50042cb433d25e02765bd2a13f1a21ea5f6", "url": "https://github.com/apache/iotdb/commit/4236b50042cb433d25e02765bd2a13f1a21ea5f6", "message": "merge master", "committedDate": "2020-10-27T09:01:03Z", "type": "commit"}, {"oid": "ac71102dd9ade6ca58d9bf746ee8e4505a3a65f5", "url": "https://github.com/apache/iotdb/commit/ac71102dd9ade6ca58d9bf746ee8e4505a3a65f5", "message": "fix review", "committedDate": "2020-10-27T09:23:27Z", "type": "commit"}, {"oid": "a03a501082679b469bf5982a151e0308ae9ba24a", "url": "https://github.com/apache/iotdb/commit/a03a501082679b469bf5982a151e0308ae9ba24a", "message": "[IOTDB-961] Remove ActiveTimeSeriesCounter", "committedDate": "2020-10-27T12:31:01Z", "type": "commit"}, {"oid": "b2b8b1e2a004b84078ad4d3ac679fe1f779c3311", "url": "https://github.com/apache/iotdb/commit/b2b8b1e2a004b84078ad4d3ac679fe1f779c3311", "message": "Fix MManagerBasicTest.testAddPathAndExist test", "committedDate": "2020-10-27T12:59:28Z", "type": "commit"}, {"oid": "1c0416ab4d891ce0e73fc071e3b8bfe49d40a48b", "url": "https://github.com/apache/iotdb/commit/1c0416ab4d891ce0e73fc071e3b8bfe49d40a48b", "message": "Fix deleteStorageGroupTest.deleteStorageGroupTest", "committedDate": "2020-10-28T01:31:32Z", "type": "commit"}, {"oid": "392039100b3cc6b833b98074ccb4385f2d10c4a7", "url": "https://github.com/apache/iotdb/commit/392039100b3cc6b833b98074ccb4385f2d10c4a7", "message": "Fix spark module", "committedDate": "2020-10-28T02:29:22Z", "type": "commit"}, {"oid": "720e5e26fcdc591cfdfe77a511d440b16cec2673", "url": "https://github.com/apache/iotdb/commit/720e5e26fcdc591cfdfe77a511d440b16cec2673", "message": "Merge pull request #1875 from apache/jira_961\n\n[IOTDB-961] Remove ActiveTimeSeriesCounter", "committedDate": "2020-10-28T03:10:00Z", "type": "commit"}, {"oid": "b308216d079511a52f6ac2eb348067bcdd39afc0", "url": "https://github.com/apache/iotdb/commit/b308216d079511a52f6ac2eb348067bcdd39afc0", "message": "merge master branch", "committedDate": "2020-10-28T13:11:48Z", "type": "commit"}, {"oid": "947ce37c8eb0165f1ec729a924ee3091db8963e5", "url": "https://github.com/apache/iotdb/commit/947ce37c8eb0165f1ec729a924ee3091db8963e5", "message": "merge master", "committedDate": "2020-10-31T02:20:23Z", "type": "commit"}, {"oid": "8b173222c54be1ac9d0ca0045dd097607ce80a73", "url": "https://github.com/apache/iotdb/commit/8b173222c54be1ac9d0ca0045dd097607ce80a73", "message": "fix test", "committedDate": "2020-10-31T03:47:32Z", "type": "commit"}, {"oid": "da98fb206b66e25186ac979e209d087cc33de845", "url": "https://github.com/apache/iotdb/commit/da98fb206b66e25186ac979e209d087cc33de845", "message": "modify properties", "committedDate": "2020-10-31T11:45:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMzc1Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515613752", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private double flushProportion = 0.5;\n          \n          \n            \n              private double flushProportion = 0.3;", "author": "qiaojialin", "createdAt": "2020-11-01T12:06:52Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -138,9 +142,24 @@\n   private volatile int maxQueryDeduplicatedPathNum = 1000;\n \n   /**\n-   * Is dynamic parameter adapter enable.\n+   * Ratio of memory allocated for buffered arrays\n+   */\n+  private double bufferedArraysMemoryProportion = 0.6;\n+\n+  /**\n+   * Flush proportion for system\n    */\n-  private boolean enableParameterAdapter = true;\n+  private double flushProportion = 0.5;", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNzE3OA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515707178", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T01:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMzc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\nindex 04714e5733..21d83697fe 100644\n--- a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n+++ b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n\n@@ -144,12 +144,12 @@ public class IoTDBConfig {\n   /**\n    * Ratio of memory allocated for buffered arrays\n    */\n-  private double bufferedArraysMemoryProportion = 0.6;\n+  private double bufferedArraysMemoryProportion = 0.8;\n \n   /**\n    * Flush proportion for system\n    */\n-  private double flushProportion = 0.5;\n+  private double flushProportion = 0.3;\n \n   /**\n    * Reject proportion for system\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMDgwMg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515630802", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected boolean enableMemControl = false;\n          \n          \n            \n              protected boolean enableMemControl = true;", "author": "qiaojialin", "createdAt": "2020-11-01T14:45:24Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -56,6 +56,13 @@\n \n   private long memSize = 0;\n \n+  protected boolean enableMemControl = false;", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNzg1OA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515707858", "bodyText": "The initial value is false here because we should calculate the text data size when recover memtable.\nA comment added.", "author": "HTHou", "createdAt": "2020-11-02T02:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMDgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\nindex 4e33f91116..0771b8ae4a 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n\n@@ -56,6 +56,10 @@ public abstract class AbstractMemTable implements IMemTable {\n \n   private long memSize = 0;\n \n+  /**\n+   * The initial value is false because we should calculate the text data size when recover\n+   * memTable!!\n+   */\n   protected boolean enableMemControl = false;\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMTk3Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515631972", "bodyText": "for a FloatStatistics, there exist 5 float fields", "author": "qiaojialin", "createdAt": "2020-11-01T14:56:51Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "diffHunk": "@@ -259,6 +259,11 @@ public long calculateRamSize() {\n         .calculateRamSize();\n   }\n \n+  public static long calculateRamSize(String measurementId, TSDataType dataType) {\n+    return CHUNK_METADATA_FIXED_RAM_SIZE + RamUsageEstimator.sizeOf(measurementId) + Statistics\n+        .getStatsByType(dataType).calculateRamSize();", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java\nindex 565c10ddd3..71e2596adc 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java\n\n@@ -261,7 +261,7 @@ public class ChunkMetadata implements Accountable {\n \n   public static long calculateRamSize(String measurementId, TSDataType dataType) {\n     return CHUNK_METADATA_FIXED_RAM_SIZE + RamUsageEstimator.sizeOf(measurementId) + Statistics\n-        .getStatsByType(dataType).calculateRamSize();\n+        .getSizeByType(dataType);\n   }\n \n   public void setRamSize(long size) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjE2Nw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632167", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Log cannot fit into buffer, please increase wal_buffer_size or please increase the JVM memory\", e);\n          \n          \n            \n                      \"Log cannot fit into the buffer, please increase wal_buffer_size\", e);", "author": "qiaojialin", "createdAt": "2020-11-01T14:58:54Z", "path": "server/src/main/java/org/apache/iotdb/db/writelog/node/ExclusiveWriteLogNode.java", "diffHunk": "@@ -89,8 +89,7 @@ public void write(PhysicalPlan plan) throws IOException {\n       }\n     } catch (BufferOverflowException e) {\n       throw new IOException(\n-          \"Log cannot fit into buffer, if you don't enable Dynamic Parameter Adapter, please increase wal_buffer_size;\"\n-              + \"otherwise, please increase the JVM memory\", e);\n+          \"Log cannot fit into buffer, please increase wal_buffer_size or please increase the JVM memory\", e);", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwODcwMw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515708703", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/writelog/node/ExclusiveWriteLogNode.java b/server/src/main/java/org/apache/iotdb/db/writelog/node/ExclusiveWriteLogNode.java\nindex 2f40900a6e..680ac65190 100644\n--- a/server/src/main/java/org/apache/iotdb/db/writelog/node/ExclusiveWriteLogNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/writelog/node/ExclusiveWriteLogNode.java\n\n@@ -89,7 +89,7 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n       }\n     } catch (BufferOverflowException e) {\n       throw new IOException(\n-          \"Log cannot fit into buffer, please increase wal_buffer_size or please increase the JVM memory\", e);\n+          \"Log cannot fit into the buffer, please increase wal_buffer_size\", e);\n     } finally {\n       lock.writeLock().unlock();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjI2OQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632269", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PrimitiveArrayManager.ARRAY_SIZE * TSDataType.INT64.getDataTypeSize();\n          \n          \n            \n                    PrimitiveArrayManager.ARRAY_SIZE * 8;", "author": "qiaojialin", "createdAt": "2020-11-01T14:59:42Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -494,6 +477,17 @@ public IPointReader getIterator(int floatPrecision, TSEncoding encoding) {\n     return new Ite(floatPrecision, encoding);\n   }\n \n+  public static long tvListArrayMemSize(TSDataType type) {\n+    long size = 0;\n+    // time size\n+    size +=\n+        PrimitiveArrayManager.ARRAY_SIZE * TSDataType.INT64.getDataTypeSize();", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwOTA3OQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515709079", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\nindex 8e5aafc730..1ddfd11b33 100644\n--- a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n+++ b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n\n@@ -481,7 +477,7 @@ public abstract class TVList {\n     long size = 0;\n     // time size\n     size +=\n-        PrimitiveArrayManager.ARRAY_SIZE * TSDataType.INT64.getDataTypeSize();\n+        PrimitiveArrayManager.ARRAY_SIZE * 8;\n     // value size\n     size +=\n         PrimitiveArrayManager.ARRAY_SIZE * type.getDataTypeSize();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjUxOA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632518", "bodyText": "Is this right?  If the ARRAY_SIZE is 128, and current TVList size is 129 (contains two array), then even add one data point, this returns false", "author": "qiaojialin", "createdAt": "2020-11-01T15:01:54Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -275,11 +249,18 @@ protected void clearSortedTime() {\n   protected void checkExpansion() {\n     if ((size % ARRAY_SIZE) == 0) {\n       expandValues();\n-      timestamps.add(\n-          (long[]) PrimitiveArrayPool.getInstance().getPrimitiveDataListByType(TSDataType.INT64));\n+      timestamps.add((long[]) getDataListByType(TSDataType.INT64));\n     }\n   }\n \n+  protected Object getDataListByType(TSDataType dataType) {\n+    return PrimitiveArrayManager.getDataListByType(dataType);\n+  }\n+\n+  public boolean checkIfDataListIsEnough(int lengthToBeAdded) {\n+    return size + lengthToBeAdded < ARRAY_SIZE;", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMDE4MQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515710181", "bodyText": "Yes, make sense. This is a bug exactly.....", "author": "HTHou", "createdAt": "2020-11-02T02:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\nindex 8e5aafc730..1ddfd11b33 100644\n--- a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n+++ b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n\n@@ -249,16 +249,12 @@ public abstract class TVList {\n   protected void checkExpansion() {\n     if ((size % ARRAY_SIZE) == 0) {\n       expandValues();\n-      timestamps.add((long[]) getDataListByType(TSDataType.INT64));\n+      timestamps.add((long[]) getPrimitiveArraysByType(TSDataType.INT64));\n     }\n   }\n \n-  protected Object getDataListByType(TSDataType dataType) {\n-    return PrimitiveArrayManager.getDataListByType(dataType);\n-  }\n-\n-  public boolean checkIfDataListIsEnough(int lengthToBeAdded) {\n-    return size + lengthToBeAdded < ARRAY_SIZE;\n+  protected Object getPrimitiveArraysByType(TSDataType dataType) {\n+    return PrimitiveArrayManager.getPrimitiveArraysByType(dataType);\n   }\n \n   protected long[] cloneTime(long[] array) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjY3Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632672", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected Object getDataListByType(TSDataType dataType) {\n          \n          \n            \n              protected Object getPrimitiveArraysByType(TSDataType dataType) {", "author": "qiaojialin", "createdAt": "2020-11-01T15:03:33Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -275,11 +249,18 @@ protected void clearSortedTime() {\n   protected void checkExpansion() {\n     if ((size % ARRAY_SIZE) == 0) {\n       expandValues();\n-      timestamps.add(\n-          (long[]) PrimitiveArrayPool.getInstance().getPrimitiveDataListByType(TSDataType.INT64));\n+      timestamps.add((long[]) getDataListByType(TSDataType.INT64));\n     }\n   }\n \n+  protected Object getDataListByType(TSDataType dataType) {", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMDgzNw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515710837", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\nindex 8e5aafc730..1ddfd11b33 100644\n--- a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n+++ b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n\n@@ -249,16 +249,12 @@ public abstract class TVList {\n   protected void checkExpansion() {\n     if ((size % ARRAY_SIZE) == 0) {\n       expandValues();\n-      timestamps.add((long[]) getDataListByType(TSDataType.INT64));\n+      timestamps.add((long[]) getPrimitiveArraysByType(TSDataType.INT64));\n     }\n   }\n \n-  protected Object getDataListByType(TSDataType dataType) {\n-    return PrimitiveArrayManager.getDataListByType(dataType);\n-  }\n-\n-  public boolean checkIfDataListIsEnough(int lengthToBeAdded) {\n-    return size + lengthToBeAdded < ARRAY_SIZE;\n+  protected Object getPrimitiveArraysByType(TSDataType dataType) {\n+    return PrimitiveArrayManager.getPrimitiveArraysByType(dataType);\n   }\n \n   protected long[] cloneTime(long[] array) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjY5OQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515632699", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return PrimitiveArrayManager.getDataListByType(dataType);\n          \n          \n            \n                return PrimitiveArrayManager.getPrimitiveArraysByType(dataType);", "author": "qiaojialin", "createdAt": "2020-11-01T15:03:52Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -275,11 +249,18 @@ protected void clearSortedTime() {\n   protected void checkExpansion() {\n     if ((size % ARRAY_SIZE) == 0) {\n       expandValues();\n-      timestamps.add(\n-          (long[]) PrimitiveArrayPool.getInstance().getPrimitiveDataListByType(TSDataType.INT64));\n+      timestamps.add((long[]) getDataListByType(TSDataType.INT64));\n     }\n   }\n \n+  protected Object getDataListByType(TSDataType dataType) {\n+    return PrimitiveArrayManager.getDataListByType(dataType);", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMDg5NA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515710894", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMjY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\nindex 8e5aafc730..1ddfd11b33 100644\n--- a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n+++ b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n\n@@ -249,16 +249,12 @@ public abstract class TVList {\n   protected void checkExpansion() {\n     if ((size % ARRAY_SIZE) == 0) {\n       expandValues();\n-      timestamps.add((long[]) getDataListByType(TSDataType.INT64));\n+      timestamps.add((long[]) getPrimitiveArraysByType(TSDataType.INT64));\n     }\n   }\n \n-  protected Object getDataListByType(TSDataType dataType) {\n-    return PrimitiveArrayManager.getDataListByType(dataType);\n-  }\n-\n-  public boolean checkIfDataListIsEnough(int lengthToBeAdded) {\n-    return size + lengthToBeAdded < ARRAY_SIZE;\n+  protected Object getPrimitiveArraysByType(TSDataType dataType) {\n+    return PrimitiveArrayManager.getPrimitiveArraysByType(dataType);\n   }\n \n   protected long[] cloneTime(long[] array) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMzc3Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515633772", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Object getDataList(TSDataType dataType) {\n          \n          \n            \n              private static Object createPrimitiveArray(TSDataType dataType) {", "author": "qiaojialin", "createdAt": "2020-11-01T15:12:37Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manage all primitive data list in memory, including get and release operation.\n+ */\n+public class PrimitiveArrayManager {\n+\n+  /**\n+   * data type -> ArrayDeque<Array>\n+   */\n+  private static final Map<TSDataType, ArrayDeque<Object>> bufferedArraysMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> current number of buffered arrays\n+   */\n+  private static final Map<TSDataType, Integer> bufferedArraysNumMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> ratio of data type in schema, which could be seen as recommended ratio\n+   */\n+  private static final Map<TSDataType, Double> bufferedArraysNumRatio = new EnumMap<>(\n+      TSDataType.class);\n+\n+  private static final Logger logger = LoggerFactory.getLogger(PrimitiveArrayManager.class);\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  public static final int ARRAY_SIZE = config.getPrimitiveArraySize();\n+\n+  /**\n+   * threshold total size of arrays for all data types\n+   */\n+  private static final double BUFFERED_ARRAY_SIZE_THRESHOLD =\n+      config.getAllocateMemoryForWrite() * config.getBufferedArraysMemoryProportion();\n+\n+  /**\n+   * total size of buffered arrays\n+   */\n+  private static AtomicInteger bufferedArraysSize = new AtomicInteger();\n+\n+  /**\n+   * total size of out of buffer arrays\n+   */\n+  private static AtomicInteger outOfBufferArraysSize = new AtomicInteger();\n+\n+  static {\n+    bufferedArraysMap.put(TSDataType.BOOLEAN, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT32, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT64, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.FLOAT, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.DOUBLE, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.TEXT, new ArrayDeque<>());\n+  }\n+\n+  private PrimitiveArrayManager() {\n+  }\n+\n+  /**\n+   * Get primitive data lists according to type\n+   *\n+   * @param dataType data type\n+   * @return an array\n+   */\n+  public static Object getDataListByType(TSDataType dataType) {\n+    // check buffered array num (to avoid entering synchronized block every time)\n+    if (bufferedArraysSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n+        > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n+      // return an out of buffer array\n+      outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      return getDataList(dataType);\n+    }\n+\n+    synchronized (bufferedArraysMap.get(dataType)) {\n+      // return a buffered array\n+      bufferedArraysNumMap.put(dataType, bufferedArraysNumMap.getOrDefault(dataType, 0) + 1);\n+      bufferedArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      Object dataArray = bufferedArraysMap.get(dataType).poll();\n+      if (dataArray != null) {\n+        return dataArray;\n+      }\n+    }\n+\n+    // if no buffered array is returned, return an out of buffer array\n+    outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+    return getDataList(dataType);\n+  }\n+\n+  private static Object getDataList(TSDataType dataType) {", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMTI4MA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515711280", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMzc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java b/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\nindex eb21328217..5457e0b953 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\n\n@@ -94,13 +94,13 @@ public class PrimitiveArrayManager {\n    * @param dataType data type\n    * @return an array\n    */\n-  public static Object getDataListByType(TSDataType dataType) {\n+  public static Object getPrimitiveArraysByType(TSDataType dataType) {\n     // check buffered array num (to avoid entering synchronized block every time)\n     if (bufferedArraysSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n         > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n       // return an out of buffer array\n       outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n-      return getDataList(dataType);\n+      return createPrimitiveArray(dataType);\n     }\n \n     synchronized (bufferedArraysMap.get(dataType)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMzgwNg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515633806", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static synchronized Object getDataListsByType(TSDataType dataType, int size) {\n          \n          \n            \n              public static synchronized Object generateDataListsByType(TSDataType dataType, int size) {", "author": "qiaojialin", "createdAt": "2020-11-01T15:12:55Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Manage all primitive data list in memory, including get and release operation.\n+ */\n+public class PrimitiveArrayManager {\n+\n+  /**\n+   * data type -> ArrayDeque<Array>\n+   */\n+  private static final Map<TSDataType, ArrayDeque<Object>> bufferedArraysMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> current number of buffered arrays\n+   */\n+  private static final Map<TSDataType, Integer> bufferedArraysNumMap = new EnumMap<>(\n+      TSDataType.class);\n+\n+  /**\n+   * data type -> ratio of data type in schema, which could be seen as recommended ratio\n+   */\n+  private static final Map<TSDataType, Double> bufferedArraysNumRatio = new EnumMap<>(\n+      TSDataType.class);\n+\n+  private static final Logger logger = LoggerFactory.getLogger(PrimitiveArrayManager.class);\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  public static final int ARRAY_SIZE = config.getPrimitiveArraySize();\n+\n+  /**\n+   * threshold total size of arrays for all data types\n+   */\n+  private static final double BUFFERED_ARRAY_SIZE_THRESHOLD =\n+      config.getAllocateMemoryForWrite() * config.getBufferedArraysMemoryProportion();\n+\n+  /**\n+   * total size of buffered arrays\n+   */\n+  private static AtomicInteger bufferedArraysSize = new AtomicInteger();\n+\n+  /**\n+   * total size of out of buffer arrays\n+   */\n+  private static AtomicInteger outOfBufferArraysSize = new AtomicInteger();\n+\n+  static {\n+    bufferedArraysMap.put(TSDataType.BOOLEAN, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT32, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.INT64, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.FLOAT, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.DOUBLE, new ArrayDeque<>());\n+    bufferedArraysMap.put(TSDataType.TEXT, new ArrayDeque<>());\n+  }\n+\n+  private PrimitiveArrayManager() {\n+  }\n+\n+  /**\n+   * Get primitive data lists according to type\n+   *\n+   * @param dataType data type\n+   * @return an array\n+   */\n+  public static Object getDataListByType(TSDataType dataType) {\n+    // check buffered array num (to avoid entering synchronized block every time)\n+    if (bufferedArraysSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n+        > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n+      // return an out of buffer array\n+      outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      return getDataList(dataType);\n+    }\n+\n+    synchronized (bufferedArraysMap.get(dataType)) {\n+      // return a buffered array\n+      bufferedArraysNumMap.put(dataType, bufferedArraysNumMap.getOrDefault(dataType, 0) + 1);\n+      bufferedArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+      Object dataArray = bufferedArraysMap.get(dataType).poll();\n+      if (dataArray != null) {\n+        return dataArray;\n+      }\n+    }\n+\n+    // if no buffered array is returned, return an out of buffer array\n+    outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n+    return getDataList(dataType);\n+  }\n+\n+  private static Object getDataList(TSDataType dataType) {\n+    Object dataArray;\n+    switch (dataType) {\n+      case BOOLEAN:\n+        dataArray = new boolean[ARRAY_SIZE];\n+        break;\n+      case INT32:\n+        dataArray = new int[ARRAY_SIZE];\n+        break;\n+      case INT64:\n+        dataArray = new long[ARRAY_SIZE];\n+        break;\n+      case FLOAT:\n+        dataArray = new float[ARRAY_SIZE];\n+        break;\n+      case DOUBLE:\n+        dataArray = new double[ARRAY_SIZE];\n+        break;\n+      case TEXT:\n+        dataArray = new Binary[ARRAY_SIZE];\n+        break;\n+      default:\n+        throw new UnSupportedDataTypeException(dataType.toString());\n+    }\n+\n+    return dataArray;\n+  }\n+\n+  /**\n+   * Get primitive data lists according to data type and size\n+   *\n+   * @param dataType data type\n+   * @param size     needed capacity\n+   * @return an array of primitive data arrays\n+   */\n+  public static synchronized Object getDataListsByType(TSDataType dataType, int size) {", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMTM5Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515711392", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMzgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java b/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\nindex eb21328217..5457e0b953 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/PrimitiveArrayManager.java\n\n@@ -94,13 +94,13 @@ public class PrimitiveArrayManager {\n    * @param dataType data type\n    * @return an array\n    */\n-  public static Object getDataListByType(TSDataType dataType) {\n+  public static Object getPrimitiveArraysByType(TSDataType dataType) {\n     // check buffered array num (to avoid entering synchronized block every time)\n     if (bufferedArraysSize.get() + ARRAY_SIZE * dataType.getDataTypeSize()\n         > BUFFERED_ARRAY_SIZE_THRESHOLD) {\n       // return an out of buffer array\n       outOfBufferArraysSize.addAndGet(ARRAY_SIZE * dataType.getDataTypeSize());\n-      return getDataList(dataType);\n+      return createPrimitiveArray(dataType);\n     }\n \n     synchronized (bufferedArraysMap.get(dataType)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNDcwNQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515634705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void resetUnsealedResourceMemCost(long cost) {\n          \n          \n            \n              public void releaseUnsealedResourceMemCost(long cost) {", "author": "qiaojialin", "createdAt": "2020-11-01T15:21:03Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total memory cost of the unsealed TsFileResources in this SG\n+   */\n+  private AtomicLong unsealedResourceMemCost;\n+\n+  /**\n+   * The total memtable memory cost in this SG\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The total memory cost of ChunkMetadata in this SG\n+   */\n+  private AtomicLong chunkMetadataMemCost;\n+\n+  /**\n+   * The total memory cost of WALs in this SG\n+   */\n+  private AtomicLong walMemCost;\n+\n+  /**\n+   * The threshold of reporting it's size to SystemInfo\n+   */\n+  private long storageGroupSizeReportThreshold = \n+      IoTDBDescriptor.getInstance().getConfig().getStorageGroupSizeReportThreshold();\n+\n+  private long lastReportedSize = 0L;\n+\n+  /**\n+   * A set of all unclosed TsFileProcessors in this SG\n+   */\n+  private Set<TsFileProcessor> reportedTsps = new HashSet<>();\n+\n+  public StorageGroupInfo(StorageGroupProcessor storageGroupProcessor) {\n+    this.storageGroupProcessor = storageGroupProcessor;\n+    unsealedResourceMemCost = new AtomicLong();\n+    memTableCost = new AtomicLong();\n+    chunkMetadataMemCost = new AtomicLong();\n+    walMemCost = new AtomicLong();\n+  }\n+\n+  public StorageGroupProcessor getStorageGroupProcessor() {\n+    return storageGroupProcessor;\n+  }\n+\n+  /**\n+   * When create a new TsFileProcessor, call this method to report it\n+   */\n+  public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n+    if (reportedTsps.add(tsFileProcessor)) {\n+      walMemCost.getAndAdd(IoTDBDescriptor.getInstance().getConfig().getWalBufferSize());\n+    }\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addMemTableCost(long cost) {\n+    memTableCost.getAndAdd(cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetUnsealedResourceMemCost(long cost) {", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMTU4OQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515711589", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNDcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\nindex 3a51979975..f1fb5d25e3 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n\n@@ -33,24 +33,9 @@ public class StorageGroupInfo {\n   private StorageGroupProcessor storageGroupProcessor;\n \n   /**\n-   * The total memory cost of the unsealed TsFileResources in this SG\n+   * The total Storage group memory cost\n    */\n-  private AtomicLong unsealedResourceMemCost;\n-\n-  /**\n-   * The total memtable memory cost in this SG\n-   */\n-  private AtomicLong memTableCost;\n-\n-  /**\n-   * The total memory cost of ChunkMetadata in this SG\n-   */\n-  private AtomicLong chunkMetadataMemCost;\n-\n-  /**\n-   * The total memory cost of WALs in this SG\n-   */\n-  private AtomicLong walMemCost;\n+  private AtomicLong memoryCost;\n \n   /**\n    * The threshold of reporting it's size to SystemInfo\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNDc3OQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515634779", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void resetChunkMetadataMemCost(long cost) {\n          \n          \n            \n              public void releaseChunkMetadataMemCost(long cost) {", "author": "qiaojialin", "createdAt": "2020-11-01T15:21:44Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total memory cost of the unsealed TsFileResources in this SG\n+   */\n+  private AtomicLong unsealedResourceMemCost;\n+\n+  /**\n+   * The total memtable memory cost in this SG\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The total memory cost of ChunkMetadata in this SG\n+   */\n+  private AtomicLong chunkMetadataMemCost;\n+\n+  /**\n+   * The total memory cost of WALs in this SG\n+   */\n+  private AtomicLong walMemCost;\n+\n+  /**\n+   * The threshold of reporting it's size to SystemInfo\n+   */\n+  private long storageGroupSizeReportThreshold = \n+      IoTDBDescriptor.getInstance().getConfig().getStorageGroupSizeReportThreshold();\n+\n+  private long lastReportedSize = 0L;\n+\n+  /**\n+   * A set of all unclosed TsFileProcessors in this SG\n+   */\n+  private Set<TsFileProcessor> reportedTsps = new HashSet<>();\n+\n+  public StorageGroupInfo(StorageGroupProcessor storageGroupProcessor) {\n+    this.storageGroupProcessor = storageGroupProcessor;\n+    unsealedResourceMemCost = new AtomicLong();\n+    memTableCost = new AtomicLong();\n+    chunkMetadataMemCost = new AtomicLong();\n+    walMemCost = new AtomicLong();\n+  }\n+\n+  public StorageGroupProcessor getStorageGroupProcessor() {\n+    return storageGroupProcessor;\n+  }\n+\n+  /**\n+   * When create a new TsFileProcessor, call this method to report it\n+   */\n+  public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n+    if (reportedTsps.add(tsFileProcessor)) {\n+      walMemCost.getAndAdd(IoTDBDescriptor.getInstance().getConfig().getWalBufferSize());\n+    }\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addMemTableCost(long cost) {\n+    memTableCost.getAndAdd(cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(-cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetChunkMetadataMemCost(long cost) {", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMjAwMA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515712000", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNDc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\nindex 3a51979975..f1fb5d25e3 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n\n@@ -33,24 +33,9 @@ public class StorageGroupInfo {\n   private StorageGroupProcessor storageGroupProcessor;\n \n   /**\n-   * The total memory cost of the unsealed TsFileResources in this SG\n+   * The total Storage group memory cost\n    */\n-  private AtomicLong unsealedResourceMemCost;\n-\n-  /**\n-   * The total memtable memory cost in this SG\n-   */\n-  private AtomicLong memTableCost;\n-\n-  /**\n-   * The total memory cost of ChunkMetadata in this SG\n-   */\n-  private AtomicLong chunkMetadataMemCost;\n-\n-  /**\n-   * The total memory cost of WALs in this SG\n-   */\n-  private AtomicLong walMemCost;\n+  private AtomicLong memoryCost;\n \n   /**\n    * The threshold of reporting it's size to SystemInfo\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTA3MA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515635070", "bodyText": "why only this cost impact the lastReportedSize?", "author": "qiaojialin", "createdAt": "2020-11-01T15:24:13Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total memory cost of the unsealed TsFileResources in this SG\n+   */\n+  private AtomicLong unsealedResourceMemCost;\n+\n+  /**\n+   * The total memtable memory cost in this SG\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The total memory cost of ChunkMetadata in this SG\n+   */\n+  private AtomicLong chunkMetadataMemCost;\n+\n+  /**\n+   * The total memory cost of WALs in this SG\n+   */\n+  private AtomicLong walMemCost;\n+\n+  /**\n+   * The threshold of reporting it's size to SystemInfo\n+   */\n+  private long storageGroupSizeReportThreshold = \n+      IoTDBDescriptor.getInstance().getConfig().getStorageGroupSizeReportThreshold();\n+\n+  private long lastReportedSize = 0L;\n+\n+  /**\n+   * A set of all unclosed TsFileProcessors in this SG\n+   */\n+  private Set<TsFileProcessor> reportedTsps = new HashSet<>();\n+\n+  public StorageGroupInfo(StorageGroupProcessor storageGroupProcessor) {\n+    this.storageGroupProcessor = storageGroupProcessor;\n+    unsealedResourceMemCost = new AtomicLong();\n+    memTableCost = new AtomicLong();\n+    chunkMetadataMemCost = new AtomicLong();\n+    walMemCost = new AtomicLong();\n+  }\n+\n+  public StorageGroupProcessor getStorageGroupProcessor() {\n+    return storageGroupProcessor;\n+  }\n+\n+  /**\n+   * When create a new TsFileProcessor, call this method to report it\n+   */\n+  public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n+    if (reportedTsps.add(tsFileProcessor)) {\n+      walMemCost.getAndAdd(IoTDBDescriptor.getInstance().getConfig().getWalBufferSize());\n+    }\n+  }\n+\n+  public void addUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost.getAndAdd(cost);\n+  }\n+\n+  public void addMemTableCost(long cost) {\n+    memTableCost.getAndAdd(cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetUnsealedResourceMemCost(long cost) {\n+    unsealedResourceMemCost.getAndAdd(-cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when closing a TSP\n+   */\n+  public void resetChunkMetadataMemCost(long cost) {\n+    chunkMetadataMemCost.getAndAdd(-cost);\n+  }\n+\n+  /**\n+   * called by TSPInfo when a memTable flushed\n+   */\n+  public void resetMemTableCost(long cost) {\n+    memTableCost.getAndAdd(-cost);\n+    lastReportedSize -= cost;", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxNTg1Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515715853", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\nindex 3a51979975..f1fb5d25e3 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n\n@@ -33,24 +33,9 @@ public class StorageGroupInfo {\n   private StorageGroupProcessor storageGroupProcessor;\n \n   /**\n-   * The total memory cost of the unsealed TsFileResources in this SG\n+   * The total Storage group memory cost\n    */\n-  private AtomicLong unsealedResourceMemCost;\n-\n-  /**\n-   * The total memtable memory cost in this SG\n-   */\n-  private AtomicLong memTableCost;\n-\n-  /**\n-   * The total memory cost of ChunkMetadata in this SG\n-   */\n-  private AtomicLong chunkMetadataMemCost;\n-\n-  /**\n-   * The total memory cost of WALs in this SG\n-   */\n-  private AtomicLong walMemCost;\n+  private AtomicLong memoryCost;\n \n   /**\n    * The threshold of reporting it's size to SystemInfo\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTE1Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515635153", "bodyText": "do we need four AtomicLongs?", "author": "qiaojialin", "createdAt": "2020-11-01T15:24:54Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total memory cost of the unsealed TsFileResources in this SG\n+   */\n+  private AtomicLong unsealedResourceMemCost;\n+\n+  /**\n+   * The total memtable memory cost in this SG\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The total memory cost of ChunkMetadata in this SG\n+   */\n+  private AtomicLong chunkMetadataMemCost;\n+\n+  /**\n+   * The total memory cost of WALs in this SG\n+   */\n+  private AtomicLong walMemCost;", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMjY3MQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515712671", "bodyText": "Yes, it is not necessary to use four costs here.  This four AtomicLongs can be merged into to one.", "author": "HTHou", "createdAt": "2020-11-02T02:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\nindex 3a51979975..f1fb5d25e3 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n\n@@ -33,24 +33,9 @@ public class StorageGroupInfo {\n   private StorageGroupProcessor storageGroupProcessor;\n \n   /**\n-   * The total memory cost of the unsealed TsFileResources in this SG\n+   * The total Storage group memory cost\n    */\n-  private AtomicLong unsealedResourceMemCost;\n-\n-  /**\n-   * The total memtable memory cost in this SG\n-   */\n-  private AtomicLong memTableCost;\n-\n-  /**\n-   * The total memory cost of ChunkMetadata in this SG\n-   */\n-  private AtomicLong chunkMetadataMemCost;\n-\n-  /**\n-   * The total memory cost of WALs in this SG\n-   */\n-  private AtomicLong walMemCost;\n+  private AtomicLong memoryCost;\n \n   /**\n    * The threshold of reporting it's size to SystemInfo\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTUxOQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515635519", "bodyText": "add a parameter in config file?", "author": "qiaojialin", "createdAt": "2020-11-01T15:28:30Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -121,15 +120,37 @@\n   private RandomDeleteCache<PartialPath, MNode> mNodeCache;\n   // tag key -> tag value -> LeafMNode\n   private Map<String, Map<String, Set<MeasurementMNode>>> tagIndex = new HashMap<>();\n-  // storage group name -> the series number\n-  private Map<String, Integer> seriesNumberInStorageGroups = new HashMap<>();\n-  private long maxSeriesNumberAmongStorageGroup;\n+\n+  // data type -> number\n+  private Map<TSDataType, Integer> schemaDataTypeNumMap = new ConcurrentHashMap<>();\n+  // reported total series number\n+  private long reportedDataTypeTotalNum;\n+  private long totalSeriesNumber = 0L;\n   private boolean initialized;\n+  protected static IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n   private File logFile;\n   private ScheduledExecutorService timedCreateMTreeSnapshotThread;\n \n+  /**\n+   * threshold total size of MTree\n+   */\n+  private static final long MTREE_SIZE_THRESHOLD = config.getAllocateMemoryForMTree();\n+\n+  private boolean allowToCreateNewSeries = true;\n+\n+  private static final int ESTIMATED_SERIES_SIZE = 300;", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxNzg2Ng==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515717866", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex 5a12bb7031..3598d44abc 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -135,11 +135,11 @@ public class MManager {\n   /**\n    * threshold total size of MTree\n    */\n-  private static final long MTREE_SIZE_THRESHOLD = config.getAllocateMemoryForMTree();\n+  private static final long MTREE_SIZE_THRESHOLD = config.getAllocateMemoryForSchema();\n \n   private boolean allowToCreateNewSeries = true;\n \n-  private static final int ESTIMATED_SERIES_SIZE = 300;\n+  private static final int ESTIMATED_SERIES_SIZE = config.getEstimatedSeriesSize();\n \n   private static class MManagerHolder {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTc1NQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515635755", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      + \"please increase memory\");\n          \n          \n            \n                      + \"please increase MAX_HEAP_SIZE in iotdb-env.sh/bat and restart\");", "author": "qiaojialin", "createdAt": "2020-11-01T15:30:17Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -359,6 +377,10 @@ public void createTimeseries(CreateTimeSeriesPlan plan) throws MetadataException\n \n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n   public void createTimeseries(CreateTimeSeriesPlan plan, long offset) throws MetadataException {\n+    if (!allowToCreateNewSeries) {\n+      throw new MetadataException(\"IoTDB system load is too large to create timeseries, \"\n+          + \"please increase memory\");", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODA2NQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515718065", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2020-11-02T02:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex 5a12bb7031..3598d44abc 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -379,7 +379,7 @@ public class MManager {\n   public void createTimeseries(CreateTimeSeriesPlan plan, long offset) throws MetadataException {\n     if (!allowToCreateNewSeries) {\n       throw new MetadataException(\"IoTDB system load is too large to create timeseries, \"\n-          + \"please increase memory\");\n+          + \"please increase MAX_HEAP_SIZE in iotdb-env.sh/bat and restart\");\n     }\n     try {\n       PartialPath path = plan.getPath();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNjE4Ng==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515636186", "bodyText": "use sg name?  will the StorageGroupInfo be changed?", "author": "qiaojialin", "createdAt": "2020-11-01T15:34:23Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgMemCost;\n+  private volatile boolean rejected = false;\n+\n+  private Map<StorageGroupInfo, Long> reportedSgMemCostMap = new HashMap<>();", "originalCommit": "da98fb206b66e25186ac979e209d087cc33de845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODQwNA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515718404", "bodyText": "I use the StorageGroupInfo as a reference here, it's useful when getting tsp to be flushed.", "author": "HTHou", "createdAt": "2020-11-02T02:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNjE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a5957f7cf73653cbcc95937a5f0523f1b107026b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex e2b886347c..2064636f54 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -54,17 +54,17 @@ public class SystemInfo {\n     long delta = storageGroupInfo.getSgMemCost() -\n         reportedSgMemCostMap.getOrDefault(storageGroupInfo, 0L);\n     totalSgMemCost += delta;\n-    logger.debug(\"Report Storage Group Status to system. \"\n-          + \"Current sg mem cost is {}, delta is {}.\", totalSgMemCost, delta);\n+    logger.debug(\"Report Storage Group Status to the system. \"\n+          + \"After adding {}, current sg mem cost is {}.\", delta, totalSgMemCost);\n     reportedSgMemCostMap.put(storageGroupInfo, storageGroupInfo.getSgMemCost());\n     storageGroupInfo.setLastReportedSize(storageGroupInfo.getSgMemCost());\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * FLUSH_PROPORTION) {\n       logger.debug(\"The total storage group mem costs are too large, call for flushing. \"\n           + \"Current sg cost is {}\", totalSgMemCost);\n       flush();\n     }\n-    if (getTotalMemCost() >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n-      logger.debug(\"Change system to reject status...\");\n+    if (totalSgMemCost >= config.getAllocateMemoryForWrite() * REJECT_PROPORTION) {\n+      logger.info(\"Change system to reject status...\");\n       rejected = true;\n     }\n   }\n"}}, {"oid": "51560bce11bb3b4332a043fa718069341f96828e", "url": "https://github.com/apache/iotdb/commit/51560bce11bb3b4332a043fa718069341f96828e", "message": "fix review", "committedDate": "2020-11-02T03:06:26Z", "type": "commit"}, {"oid": "6ed120588ac1bcf27f2b4f467d3814b4a3462db3", "url": "https://github.com/apache/iotdb/commit/6ed120588ac1bcf27f2b4f467d3814b4a3462db3", "message": "merge master", "committedDate": "2020-11-02T03:07:44Z", "type": "commit"}, {"oid": "9668b6200cf53d85d0664387629bb6fc13f15bce", "url": "https://github.com/apache/iotdb/commit/9668b6200cf53d85d0664387629bb6fc13f15bce", "message": "fix statistic size", "committedDate": "2020-11-02T03:47:39Z", "type": "commit"}, {"oid": "d85a0eee2db3d1440dffd94829557f6c573264f4", "url": "https://github.com/apache/iotdb/commit/d85a0eee2db3d1440dffd94829557f6c573264f4", "message": "fix a issue", "committedDate": "2020-11-02T03:57:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDE3MQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515754171", "bodyText": "memoryCost", "author": "qiaojialin", "createdAt": "2020-11-02T05:59:51Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total Storage group memory cost\n+   */\n+  private AtomicLong memTableCost;", "originalCommit": "d85a0eee2db3d1440dffd94829557f6c573264f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\nindex d6f6121ec0..f1fb5d25e3 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n\n@@ -35,7 +35,7 @@ public class StorageGroupInfo {\n   /**\n    * The total Storage group memory cost\n    */\n-  private AtomicLong memTableCost;\n+  private AtomicLong memoryCost;\n \n   /**\n    * The threshold of reporting it's size to SystemInfo\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTIzOA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r515755238", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n          \n          \n            \n              public void initTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {", "author": "qiaojialin", "createdAt": "2020-11-02T06:04:13Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n+public class StorageGroupInfo {\n+\n+  private StorageGroupProcessor storageGroupProcessor;\n+\n+  /**\n+   * The total Storage group memory cost\n+   */\n+  private AtomicLong memTableCost;\n+\n+  /**\n+   * The threshold of reporting it's size to SystemInfo\n+   */\n+  private long storageGroupSizeReportThreshold = \n+      IoTDBDescriptor.getInstance().getConfig().getStorageGroupSizeReportThreshold();\n+\n+  private long lastReportedSize = 0L;\n+\n+  /**\n+   * A set of all unclosed TsFileProcessors in this SG\n+   */\n+  private Set<TsFileProcessor> reportedTsps = new HashSet<>();\n+\n+  public StorageGroupInfo(StorageGroupProcessor storageGroupProcessor) {\n+    this.storageGroupProcessor = storageGroupProcessor;\n+    memTableCost = new AtomicLong();\n+  }\n+\n+  public StorageGroupProcessor getStorageGroupProcessor() {\n+    return storageGroupProcessor;\n+  }\n+\n+  /**\n+   * When create a new TsFileProcessor, call this method to report it\n+   */\n+  public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {", "originalCommit": "d85a0eee2db3d1440dffd94829557f6c573264f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\nindex d6f6121ec0..f1fb5d25e3 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n\n@@ -35,7 +35,7 @@ public class StorageGroupInfo {\n   /**\n    * The total Storage group memory cost\n    */\n-  private AtomicLong memTableCost;\n+  private AtomicLong memoryCost;\n \n   /**\n    * The threshold of reporting it's size to SystemInfo\n"}}, {"oid": "f4ee75bdf07099ad7e7ae4bfad96e44adb6102bc", "url": "https://github.com/apache/iotdb/commit/f4ee75bdf07099ad7e7ae4bfad96e44adb6102bc", "message": "fix bug", "committedDate": "2020-11-02T06:07:33Z", "type": "commit"}, {"oid": "afd31b1aa34532db6a473d1a320b66518ba9feaf", "url": "https://github.com/apache/iotdb/commit/afd31b1aa34532db6a473d1a320b66518ba9feaf", "message": "add TsFileProcessorInfo", "committedDate": "2020-07-20T07:00:43Z", "type": "commit"}, {"oid": "e617dbe024edef275dc93a9b5f96b86ca03f34f0", "url": "https://github.com/apache/iotdb/commit/e617dbe024edef275dc93a9b5f96b86ca03f34f0", "message": "logic of checking array size", "committedDate": "2020-07-22T01:42:27Z", "type": "commit"}, {"oid": "cdf3cac4b18a11fd1f9c8b8c4910f3f72b260717", "url": "https://github.com/apache/iotdb/commit/cdf3cac4b18a11fd1f9c8b8c4910f3f72b260717", "message": "logic of writing", "committedDate": "2020-07-22T03:22:38Z", "type": "commit"}, {"oid": "93cadccb864ba374d248a4d8692a54899e1a3a77", "url": "https://github.com/apache/iotdb/commit/93cadccb864ba374d248a4d8692a54899e1a3a77", "message": "estimate chunkMetadata Mem cost", "committedDate": "2020-07-22T07:45:56Z", "type": "commit"}, {"oid": "182b230872d6ca62ba7f46048610948219762ee7", "url": "https://github.com/apache/iotdb/commit/182b230872d6ca62ba7f46048610948219762ee7", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-07-22T09:14:13Z", "type": "commit"}, {"oid": "0db167a8c8d500b78369b8a269966496125d9867", "url": "https://github.com/apache/iotdb/commit/0db167a8c8d500b78369b8a269966496125d9867", "message": "Add interface for System module and ArrayManager", "committedDate": "2020-07-22T09:17:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1NzAwMA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r458757000", "bodyText": "Hi, according to previous design, checkBufferedArray is to be done by ArrayManager module.\nWhen TSP is asking for one array, it could call ArrayManager.getDataListByType (and it is the only interface for asking array). This method will check whether there are enough buffered arrays and return one if true; or apply an out of buffer array and return one if system module agrees; or return null if system module refuses to offer one.\nIn this way, TSP does not need to know whether the array is buffered or out of buffer. The management of arrays is responsibility of ArrayManager. What do you think?", "author": "samperson1997", "createdAt": "2020-07-22T12:33:24Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -241,34 +272,91 @@ public void insertTablet(InsertTabletPlan insertTabletPlan, int start, int end,\n       workMemTable = MemTablePool.getInstance().getAvailableMemTable(this);\n     }\n \n-    // insert insertRowPlan to the work memtable\n-    try {\n-      workMemTable.insertTablet(insertTabletPlan, start, end);\n-      if (IoTDBDescriptor.getInstance().getConfig().isEnableWal()) {\n-        insertTabletPlan.setStart(start);\n-        insertTabletPlan.setEnd(end);\n-        getLogNode().write(insertTabletPlan);\n+    if (workMemTable.checkIfArrayIsEnough(insertTabletPlan)) {\n+      // insert insertRowPlan to the work memtable\n+      try {\n+        workMemTable.insertTablet(insertTabletPlan, start, end);\n+        if (IoTDBDescriptor.getInstance().getConfig().isEnableWal()) {\n+          insertTabletPlan.setStart(start);\n+          insertTabletPlan.setEnd(end);\n+          getLogNode().write(insertTabletPlan);\n+        }\n+      } catch (Exception e) {\n+        for (int i = start; i < end; i++) {\n+          results[i] = RpcUtils.getStatus(TSStatusCode.INTERNAL_SERVER_ERROR, e.getMessage());\n+        }\n+        throw new WriteProcessException(e);\n       }\n-    } catch (Exception e) {\n+  \n       for (int i = start; i < end; i++) {\n-        results[i] = RpcUtils.getStatus(TSStatusCode.INTERNAL_SERVER_ERROR, e.getMessage());\n+        results[i] = RpcUtils.SUCCESS_STATUS;\n+      }\n+  \n+      tsFileResource\n+          .updateStartTime(insertTabletPlan.getDeviceId(), insertTabletPlan.getTimes()[start]);\n+  \n+      //for sequence tsfile, we update the endTime only when the file is prepared to be closed.\n+      //for unsequence tsfile, we have to update the endTime for each insertion.\n+      if (!sequence) {\n+        tsFileResource\n+            .updateEndTime(\n+                insertTabletPlan.getDeviceId(), insertTabletPlan.getTimes()[end - 1]);\n       }\n-      throw new WriteProcessException(e);\n     }\n-\n-    for (int i = start; i < end; i++) {\n-      results[i] = RpcUtils.SUCCESS_STATUS;\n+    else {\n+      // if there are available buffered arrays in array pool\n+      boolean isbufferedArrayEnough = true;\n+      // TODO: isbufferedArrayEnough = checkBufferedArray();", "originalCommit": "0db167a8c8d500b78369b8a269966496125d9867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwNzAzNw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r458807037", "bodyText": "Hi, according to previous design, checkBufferedArray is to be done by ArrayManager module.\nWhen TSP is asking for one array, it could call ArrayManager.getDataListByType (and it is the only interface for asking array). This method will check whether there are enough buffered arrays and return one if true; or apply an out of buffer array and return one if system module agrees; or return null if system module refuses to offer one.\nIn this way, TSP does not need to know whether the array is buffered or out of buffer. The management of arrays is responsibility of ArrayManager. What do you think?\n\nYes, you are right. That's why I write TODO here. I'll fix it very soon. Thanks. :)", "author": "HTHou", "createdAt": "2020-07-22T13:50:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1NzAwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwOTMzNw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r458809337", "bodyText": "Take it easy!!!", "author": "samperson1997", "createdAt": "2020-07-22T13:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1NzAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\nindex 1251bf2bd7..c6885eb635 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\n\n@@ -269,93 +224,172 @@ public class TsFileProcessor {\n       TSStatus[] results) throws WriteProcessException {\n \n     if (workMemTable == null) {\n-      workMemTable = MemTablePool.getInstance().getAvailableMemTable(this);\n+      workMemTable = new PrimitiveMemTable(enableMemControl);\n+    }\n+    if (enableMemControl) {\n+      blockInsertionIfReject();\n+      checkMemCostAndAddToTspInfo(insertTabletPlan, start, end);\n     }\n \n-    if (workMemTable.checkIfArrayIsEnough(insertTabletPlan)) {\n-      // insert insertRowPlan to the work memtable\n-      try {\n-        workMemTable.insertTablet(insertTabletPlan, start, end);\n-        if (IoTDBDescriptor.getInstance().getConfig().isEnableWal()) {\n-          insertTabletPlan.setStart(start);\n-          insertTabletPlan.setEnd(end);\n-          getLogNode().write(insertTabletPlan);\n-        }\n-      } catch (Exception e) {\n-        for (int i = start; i < end; i++) {\n-          results[i] = RpcUtils.getStatus(TSStatusCode.INTERNAL_SERVER_ERROR, e.getMessage());\n-        }\n-        throw new WriteProcessException(e);\n+    try {\n+      workMemTable.insertTablet(insertTabletPlan, start, end);\n+      if (IoTDBDescriptor.getInstance().getConfig().isEnableWal()) {\n+        insertTabletPlan.setStart(start);\n+        insertTabletPlan.setEnd(end);\n+        getLogNode().write(insertTabletPlan);\n       }\n-  \n+    } catch (Exception e) {\n       for (int i = start; i < end; i++) {\n-        results[i] = RpcUtils.SUCCESS_STATUS;\n-      }\n-  \n-      tsFileResource\n-          .updateStartTime(insertTabletPlan.getDeviceId(), insertTabletPlan.getTimes()[start]);\n-  \n-      //for sequence tsfile, we update the endTime only when the file is prepared to be closed.\n-      //for unsequence tsfile, we have to update the endTime for each insertion.\n-      if (!sequence) {\n-        tsFileResource\n-            .updateEndTime(\n-                insertTabletPlan.getDeviceId(), insertTabletPlan.getTimes()[end - 1]);\n+        results[i] = RpcUtils.getStatus(TSStatusCode.INTERNAL_SERVER_ERROR, e.getMessage());\n       }\n+      throw new WriteProcessException(e);\n     }\n-    else {\n-      // if there are available buffered arrays in array pool\n-      boolean isbufferedArrayEnough = true;\n-      // TODO: isbufferedArrayEnough = checkBufferedArray();\n-      if (isbufferedArrayEnough) {\n-        long bytesCost = 0;\n-        long unsealedResourceCost = 0;\n-        long chunkMetadataCost = 0;\n-        checkMemCost(insertTabletPlan, bytesCost, unsealedResourceCost, chunkMetadataCost);\n-        if (tsFileProcessorInfo.checkIfNeedReportTsFileProcessorStatus(bytesCost\n-            + unsealedResourceCost + chunkMetadataCost)) {\n-          // TODO: reportToSystemInfo\n-        }\n-        else {\n-          tsFileProcessorInfo.addBytesMemCost(bytesCost);\n-          tsFileProcessorInfo.addUnsealedResourceMemCost(unsealedResourceCost);\n-          tsFileProcessorInfo.addChunkMetadataMemCost(chunkMetadataCost);\n-          // TODO: applyBufforedArrayToWrite\n-        }\n+    for (int i = start; i < end; i++) {\n+      results[i] = RpcUtils.SUCCESS_STATUS;\n+    }\n+    tsFileResource\n+        .updateStartTime(insertTabletPlan.getDeviceId().getFullPath(),\n+            insertTabletPlan.getTimes()[start]);\n+    //for sequence tsfile, we update the endTime only when the file is prepared to be closed.\n+    //for unsequence tsfile, we have to update the endTime for each insertion.\n+    if (!sequence) {\n+      tsFileResource\n+          .updateEndTime(\n+              insertTabletPlan.getDeviceId().getFullPath(), insertTabletPlan.getTimes()[end - 1]);\n+    }\n+    tsFileResource.updatePlanIndexes(insertTabletPlan.getIndex());\n+  }\n+\n+  private void checkMemCostAndAddToTspInfo(InsertRowPlan insertRowPlan) throws WriteProcessException {\n+    long memTableIncrement = 0L;\n+    long textDataIncrement = 0L;\n+    long chunkMetadataCost = 0L;\n+    long unsealedResourceCost = \n+        tsFileResource.estimateRamIncrement(insertRowPlan.getDeviceId().getFullPath());\n+    for (int i = 0; i < insertRowPlan.getDataTypes().length; i++) {\n+      // skip failed Measurements\n+      if (insertRowPlan.getDataTypes()[i] == null) {\n+        continue;\n+      }\n+      if (workMemTable.checkIfNeedStartNewChunk(insertRowPlan.getDeviceId().getFullPath(),\n+          insertRowPlan.getMeasurements()[i])) {\n+        // ChunkMetadataCost\n+        chunkMetadataCost += ChunkMetadata.calculateRamSize(insertRowPlan.getMeasurements()[i],\n+            insertRowPlan.getDataTypes()[i]);\n+        memTableIncrement += TVList.tvListArrayMemSize(insertRowPlan.getDataTypes()[i]);\n       }\n       else {\n-        // TODO: applyOOBArray()\n+        int tvListSize = workMemTable.getCurrentTVListSize(insertRowPlan.getDeviceId().getFullPath(),\n+            insertRowPlan.getMeasurements()[i]);\n+        memTableIncrement += ((tvListSize + 1) % PrimitiveArrayManager.ARRAY_SIZE)\n+            / PrimitiveArrayManager.ARRAY_SIZE\n+            * TVList.tvListArrayMemSize(insertRowPlan.getDataTypes()[i]);\n+      }\n+      // TEXT data size\n+      if (insertRowPlan.getDataTypes()[i] == TSDataType.TEXT) {\n+        textDataIncrement += MemUtils.getBinarySize((Binary) insertRowPlan.getValues()[i]);\n+      }\n+    }\n+    memTableIncrement += textDataIncrement;\n+    tsFileProcessorInfo.addMemTableCost(memTableIncrement);\n+    tsFileProcessorInfo.addUnsealedResourceMemCost(unsealedResourceCost);\n+    tsFileProcessorInfo.addChunkMetadataMemCost(chunkMetadataCost);\n+    if (storageGroupInfo.needToReportToSystem()) {\n+      SystemInfo.getInstance().reportStorageGroupStatus(storageGroupInfo);\n+      try {\n+        blockInsertionIfReject();\n+      } catch (WriteProcessException e) {\n+        tsFileProcessorInfo.resetMemTableCost(memTableIncrement);\n+        tsFileProcessorInfo.resetUnsealedResourceMemCost(unsealedResourceCost);\n+        tsFileProcessorInfo.resetChunkMetadataMemCost(chunkMetadataCost);\n+        SystemInfo.getInstance().resetStorageGroupStatus(storageGroupInfo);\n+        throw e;\n       }\n     }\n-\n-\n+    workMemTable.addTVListRamCost(memTableIncrement);\n+    if (textDataIncrement != 0) {\n+      workMemTable.addTextDataSize(textDataIncrement);\n+    }\n   }\n \n-  private void checkMemCost(InsertPlan insertPlan, long bytesCost, long unsealedResourceCost,\n-      long chunkMetadataCost) {\n-    if (!tsFileResource.getDeviceToIndexMap().containsKey(insertPlan.getDeviceId())) {\n-      unsealedResourceCost += RamUsageEstimator.sizeOf(insertPlan.getDeviceId()) + Integer.BYTES;\n-      if (tsFileResource.getDeviceToIndexMap().size() >= tsFileResource.getStartTimes().length) {\n-        unsealedResourceCost += tsFileResource.getDeviceToIndexMap().size() * Long.BYTES;\n-      }\n+  private void checkMemCostAndAddToTspInfo(InsertTabletPlan insertTabletPlan, int start, int end)\n+      throws WriteProcessException {\n+    if (start >= end) {\n+      return;\n     }\n-    for (int i = 0; i < insertPlan.getDataTypes().length; i++) {\n-      // String array cost\n-      if (insertPlan.getDataTypes()[i] == TSDataType.TEXT) {\n-        if (insertPlan instanceof InsertRowPlan) {\n-          bytesCost += ((Binary) ((InsertRowPlan) insertPlan).getValues()[i]).getLength();\n+    long memTableIncrement = 0L;\n+    long textDataIncrement = 0L;\n+    long chunkMetadataCost = 0L;\n+    long unsealedResourceCost = \n+        tsFileResource.estimateRamIncrement(insertTabletPlan.getDeviceId().getFullPath());\n+    for (int i = 0; i < insertTabletPlan.getDataTypes().length; i++) {\n+      // skip failed Measurements\n+      if (insertTabletPlan.getDataTypes()[i] == null) {\n+        continue;\n+      }\n+\n+      if (workMemTable.checkIfNeedStartNewChunk(insertTabletPlan.getDeviceId().getFullPath(),\n+          insertTabletPlan.getMeasurements()[i])) {\n+        // ChunkMetadataCost\n+        chunkMetadataCost += ChunkMetadata.calculateRamSize(insertTabletPlan.getMeasurements()[i],\n+            insertTabletPlan.getDataTypes()[i]);\n+        memTableIncrement += ((end - start) / PrimitiveArrayManager.ARRAY_SIZE + 1)\n+            * TVList.tvListArrayMemSize(insertTabletPlan.getDataTypes()[i]);\n+      }\n+      else {\n+        int tvListSize = workMemTable.getCurrentTVListSize(insertTabletPlan.getDeviceId().getFullPath(),\n+            insertTabletPlan.getMeasurements()[i]);\n+        if (tvListSize % PrimitiveArrayManager.ARRAY_SIZE == 0) {\n+          memTableIncrement += ((end - start) / PrimitiveArrayManager.ARRAY_SIZE + 1)\n+              * TVList.tvListArrayMemSize(insertTabletPlan.getDataTypes()[i]);\n         }\n         else {\n-          for (Binary bytes : (Binary[]) ((InsertTabletPlan) insertPlan).getColumns()[i]) {\n-            bytesCost += bytes.getLength();\n-          }\n+          memTableIncrement += ((end - start + (tvListSize % PrimitiveArrayManager.ARRAY_SIZE))\n+            / PrimitiveArrayManager.ARRAY_SIZE)\n+            * TVList.tvListArrayMemSize(insertTabletPlan.getDataTypes()[i]);\n+        }\n+      }\n+      // TEXT data size\n+      if (insertTabletPlan.getDataTypes()[i] == TSDataType.TEXT) {\n+        for (int j = start; j < end; j++) {\n+          Binary binary = ((Binary[]) insertTabletPlan.getColumns()[i])[j];\n+          textDataIncrement += MemUtils.getBinarySize(binary);\n         }\n       }\n-      // ChunkMetadataCost\n-      if (workMemTable.checkIfNeedStartNewChunk(insertPlan.getDeviceId(),\n-          insertPlan.getMeasurements()[i])) {\n-        chunkMetadataCost += ChunkMetadata.calculateRamSize(insertPlan.getMeasurements()[i],\n-            insertPlan.getDataTypes()[i]);\n+    }\n+    memTableIncrement += textDataIncrement;\n+    tsFileProcessorInfo.addMemTableCost(memTableIncrement);\n+    tsFileProcessorInfo.addUnsealedResourceMemCost(unsealedResourceCost);\n+    tsFileProcessorInfo.addChunkMetadataMemCost(chunkMetadataCost);\n+    if (storageGroupInfo.needToReportToSystem()) {\n+      SystemInfo.getInstance().reportStorageGroupStatus(storageGroupInfo);\n+      try {\n+        blockInsertionIfReject();\n+      } catch (WriteProcessException e) {\n+        tsFileProcessorInfo.resetMemTableCost(memTableIncrement);\n+        tsFileProcessorInfo.resetUnsealedResourceMemCost(unsealedResourceCost);\n+        tsFileProcessorInfo.resetChunkMetadataMemCost(chunkMetadataCost);\n+        SystemInfo.getInstance().resetStorageGroupStatus(storageGroupInfo);\n+        throw e;\n+      }\n+    }\n+    workMemTable.addTVListRamCost(memTableIncrement);\n+    if (textDataIncrement != 0) {\n+      workMemTable.addTextDataSize(textDataIncrement);\n+    }\n+  }\n+\n+  private void blockInsertionIfReject() throws WriteProcessException {\n+    long startTime = System.currentTimeMillis();\n+    while (SystemInfo.getInstance().isRejected()) {\n+      try {\n+        TimeUnit.MILLISECONDS.sleep(100);\n+        if (System.currentTimeMillis() - startTime > 10000) {\n+          throw new WriteProcessException(\"System rejected over 10000ms\");\n+        }\n+      } catch (InterruptedException e) {\n+        logger.error(\"Failed when waiting for getting memory for insertion \", e);\n+        Thread.currentThread().interrupt();\n       }\n     }\n   }\n"}}, {"oid": "1fc3c03e738255279f589132cb068dc3264e890e", "url": "https://github.com/apache/iotdb/commit/1fc3c03e738255279f589132cb068dc3264e890e", "message": "Update ArrayManager and delete useless codes", "committedDate": "2020-07-23T03:04:29Z", "type": "commit"}, {"oid": "6e25971c3f265573b9942b164c3c3b9af480fc15", "url": "https://github.com/apache/iotdb/commit/6e25971c3f265573b9942b164c3c3b9af480fc15", "message": "update insertion logic", "committedDate": "2020-07-23T06:47:17Z", "type": "commit"}, {"oid": "ad8f05a3d9dd12dd5b112ac4b48afdc417fb8ddb", "url": "https://github.com/apache/iotdb/commit/ad8f05a3d9dd12dd5b112ac4b48afdc417fb8ddb", "message": "add some tspInfo init values", "committedDate": "2020-07-23T09:20:52Z", "type": "commit"}, {"oid": "725b0237b01d00953ebdb68a866840e3f09f9fd9", "url": "https://github.com/apache/iotdb/commit/725b0237b01d00953ebdb68a866840e3f09f9fd9", "message": "Add MManager.collectSchemaDataTypeNum and related tests", "committedDate": "2020-07-23T12:12:38Z", "type": "commit"}, {"oid": "a172691fc20905f3cd16c2b8e6b5c12ec63d7b5b", "url": "https://github.com/apache/iotdb/commit/a172691fc20905f3cd16c2b8e6b5c12ec63d7b5b", "message": "Merge remote-tracking branch 'origin/master' into mem_control\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "committedDate": "2020-07-23T15:27:22Z", "type": "commit"}, {"oid": "bb4384efc8020ffbde7c9a62767c769c86e4444b", "url": "https://github.com/apache/iotdb/commit/bb4384efc8020ffbde7c9a62767c769c86e4444b", "message": "Merge master", "committedDate": "2020-07-23T15:28:35Z", "type": "commit"}, {"oid": "09f3277861f49ced0d7aa69487ede0c9afb18691", "url": "https://github.com/apache/iotdb/commit/09f3277861f49ced0d7aa69487ede0c9afb18691", "message": "add some comments", "committedDate": "2020-07-24T06:57:21Z", "type": "commit"}, {"oid": "c1b0a51ce6f6526efc44a97c568f4b4ab937665b", "url": "https://github.com/apache/iotdb/commit/c1b0a51ce6f6526efc44a97c568f4b4ab937665b", "message": "recover tspInfo", "committedDate": "2020-07-24T07:33:15Z", "type": "commit"}, {"oid": "953f96b4ff46a94de1230d27ef35a33fe0406dab", "url": "https://github.com/apache/iotdb/commit/953f96b4ff46a94de1230d27ef35a33fe0406dab", "message": "init tspinfo", "committedDate": "2020-07-24T07:39:02Z", "type": "commit"}, {"oid": "a807156e5a0f54a34bba5dd2317ba22ac830bf49", "url": "https://github.com/apache/iotdb/commit/a807156e5a0f54a34bba5dd2317ba22ac830bf49", "message": "Add timedCollectSchemaDataTypeNumThread for collect data type num", "committedDate": "2020-07-24T08:28:32Z", "type": "commit"}, {"oid": "7c79a4f405ec3cb8cd6ca9ffca6966139590a7fa", "url": "https://github.com/apache/iotdb/commit/7c79a4f405ec3cb8cd6ca9ffca6966139590a7fa", "message": "Fix tests", "committedDate": "2020-07-24T08:33:44Z", "type": "commit"}, {"oid": "0b38777615ec729c7bf28ee9d00ecb07f48e4557", "url": "https://github.com/apache/iotdb/commit/0b38777615ec729c7bf28ee9d00ecb07f48e4557", "message": "fix reportTsFileProcessorStatus", "committedDate": "2020-07-24T08:49:46Z", "type": "commit"}, {"oid": "5111811f1b1a34ff480b78a7538df73d1fe3d25e", "url": "https://github.com/apache/iotdb/commit/5111811f1b1a34ff480b78a7538df73d1fe3d25e", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-07-24T08:56:41Z", "type": "commit"}, {"oid": "c566001db3f6a9a0d7b9141943cacbe4a61d1fde", "url": "https://github.com/apache/iotdb/commit/c566001db3f6a9a0d7b9141943cacbe4a61d1fde", "message": "fix reportTsFileProcessorStatus", "committedDate": "2020-07-24T09:11:05Z", "type": "commit"}, {"oid": "160b9a532e51f68385e2913123fde156d47fa6f0", "url": "https://github.com/apache/iotdb/commit/160b9a532e51f68385e2913123fde156d47fa6f0", "message": "SystemInfo 1", "committedDate": "2020-07-24T10:54:08Z", "type": "commit"}, {"oid": "9e027ec4445433033e89c783096480ff836d8e6a", "url": "https://github.com/apache/iotdb/commit/9e027ec4445433033e89c783096480ff836d8e6a", "message": "SystemInfo 1 (#1559)", "committedDate": "2020-07-24T11:01:47Z", "type": "commit"}, {"oid": "071a314d8b875db3d147a5b11d87890efa72d5b6", "url": "https://github.com/apache/iotdb/commit/071a314d8b875db3d147a5b11d87890efa72d5b6", "message": "Fix sonar bug", "committedDate": "2020-07-24T11:03:52Z", "type": "commit"}, {"oid": "1e544a45200ffdda6aa47dcfc657bf9a6055cb45", "url": "https://github.com/apache/iotdb/commit/1e544a45200ffdda6aa47dcfc657bf9a6055cb45", "message": "Merge remote-tracking branch 'origin/mem_control' into mem_control", "committedDate": "2020-07-24T11:04:06Z", "type": "commit"}, {"oid": "fa6cfad9e87d27da063f0264a86985d7d11e8b24", "url": "https://github.com/apache/iotdb/commit/fa6cfad9e87d27da063f0264a86985d7d11e8b24", "message": "Add SystemInfo.reportCreateArray interface", "committedDate": "2020-07-24T13:36:07Z", "type": "commit"}, {"oid": "61d982b3eb7325006aaadcc052c77a3132322922", "url": "https://github.com/apache/iotdb/commit/61d982b3eb7325006aaadcc052c77a3132322922", "message": "systeminfo", "committedDate": "2020-07-25T03:16:53Z", "type": "commit"}, {"oid": "f1a71b9c8b75a0aabd344ab9aa86a1f53148917b", "url": "https://github.com/apache/iotdb/commit/f1a71b9c8b75a0aabd344ab9aa86a1f53148917b", "message": "Add waitAndGetDataListByType for getting data lists", "committedDate": "2020-07-26T04:33:32Z", "type": "commit"}, {"oid": "4b68dacdf246f2ab4f7d2077dc9c34b180b24b78", "url": "https://github.com/apache/iotdb/commit/4b68dacdf246f2ab4f7d2077dc9c34b180b24b78", "message": "Add replacement strategy", "committedDate": "2020-07-26T09:32:44Z", "type": "commit"}, {"oid": "6684391c76fa040b9b24ae7b781d3ac56c18df75", "url": "https://github.com/apache/iotdb/commit/6684391c76fa040b9b24ae7b781d3ac56c18df75", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-07-27T02:39:38Z", "type": "commit"}, {"oid": "2586b4883a92a8d62241b595a6f4b1c1f5b22d4b", "url": "https://github.com/apache/iotdb/commit/2586b4883a92a8d62241b595a6f4b1c1f5b22d4b", "message": "add UT", "committedDate": "2020-07-27T03:28:39Z", "type": "commit"}, {"oid": "b0bb3c561d54712efb9da6859fa5652481efe0de", "url": "https://github.com/apache/iotdb/commit/b0bb3c561d54712efb9da6859fa5652481efe0de", "message": "fix conflict", "committedDate": "2020-07-27T07:13:16Z", "type": "commit"}, {"oid": "66559533c10e634b3202b8b3fe4f6a8a365fa4f6", "url": "https://github.com/apache/iotdb/commit/66559533c10e634b3202b8b3fe4f6a8a365fa4f6", "message": "buffered array threshold", "committedDate": "2020-07-27T07:52:29Z", "type": "commit"}, {"oid": "9176c51d3cc88e5c3b21297765abbbe6272abafc", "url": "https://github.com/apache/iotdb/commit/9176c51d3cc88e5c3b21297765abbbe6272abafc", "message": "reset mem cost after flushing", "committedDate": "2020-07-28T02:15:39Z", "type": "commit"}, {"oid": "89ef787ea09ed8f3b8c49acf6e12cb42b1e76669", "url": "https://github.com/apache/iotdb/commit/89ef787ea09ed8f3b8c49acf6e12cb42b1e76669", "message": "calculate unsealedResource cost", "committedDate": "2020-07-28T02:32:54Z", "type": "commit"}, {"oid": "cf5d23050d22d39d4655c73f1be1e4209fd65f0d", "url": "https://github.com/apache/iotdb/commit/cf5d23050d22d39d4655c73f1be1e4209fd65f0d", "message": "complete system info", "committedDate": "2020-07-28T08:04:33Z", "type": "commit"}, {"oid": "337e3d610b30aaf7ea612447b7e76630829312a4", "url": "https://github.com/apache/iotdb/commit/337e3d610b30aaf7ea612447b7e76630829312a4", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-07-28T08:05:37Z", "type": "commit"}, {"oid": "660c1076c5a7c0885890b5e64fb51179ac2f6698", "url": "https://github.com/apache/iotdb/commit/660c1076c5a7c0885890b5e64fb51179ac2f6698", "message": "full complete system info part", "committedDate": "2020-07-28T09:22:36Z", "type": "commit"}, {"oid": "52e813918b2456d34d5696257abdafb7d6c97a46", "url": "https://github.com/apache/iotdb/commit/52e813918b2456d34d5696257abdafb7d6c97a46", "message": "System info part of Mem control (#1573)\n\n* SystemInfo 1\r\n\r\n* systeminfo\r\n\r\n* buffered array threshold\r\n\r\n* complete system info\r\n\r\n* full complete system info part", "committedDate": "2020-07-28T09:25:37Z", "type": "commit"}, {"oid": "a26fbac9f04bdfbc7bf7b76f2798c62755197b7a", "url": "https://github.com/apache/iotdb/commit/a26fbac9f04bdfbc7bf7b76f2798c62755197b7a", "message": "Fix / by zero", "committedDate": "2020-07-29T02:55:38Z", "type": "commit"}, {"oid": "045b8027e1367ebde0a19cd5cf039fdcba6a2ab2", "url": "https://github.com/apache/iotdb/commit/045b8027e1367ebde0a19cd5cf039fdcba6a2ab2", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-07-29T03:13:02Z", "type": "commit"}, {"oid": "4797f3e23a4ddf65dc96eac0f9d772386528d131", "url": "https://github.com/apache/iotdb/commit/4797f3e23a4ddf65dc96eac0f9d772386528d131", "message": "skip fail measurements", "committedDate": "2020-07-29T03:20:07Z", "type": "commit"}, {"oid": "d9d87227c94e1eb2ae81c61caa6263a8e3fa64a5", "url": "https://github.com/apache/iotdb/commit/d9d87227c94e1eb2ae81c61caa6263a8e3fa64a5", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-07-29T03:21:10Z", "type": "commit"}, {"oid": "bcf5797208f37a7d866ac68285132100d0a14f37", "url": "https://github.com/apache/iotdb/commit/bcf5797208f37a7d866ac68285132100d0a14f37", "message": "fix typo", "committedDate": "2020-07-29T03:37:53Z", "type": "commit"}, {"oid": "73e1625f60a01f4ca78f5f76757030aa377bc44f", "url": "https://github.com/apache/iotdb/commit/73e1625f60a01f4ca78f5f76757030aa377bc44f", "message": "Merge pull request #1581 from Alima777/mem_control\n\nAdd comments - System part of Mem control", "committedDate": "2020-07-29T03:40:52Z", "type": "commit"}, {"oid": "7e8c1aaeeefa6c46c921ff36939f53813090fb14", "url": "https://github.com/apache/iotdb/commit/7e8c1aaeeefa6c46c921ff36939f53813090fb14", "message": "try to fix test", "committedDate": "2020-07-29T05:30:03Z", "type": "commit"}, {"oid": "16adef6749ac213d5be1156061294953e520d8bd", "url": "https://github.com/apache/iotdb/commit/16adef6749ac213d5be1156061294953e520d8bd", "message": "Merge branch 'mem_control' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-07-29T05:30:27Z", "type": "commit"}, {"oid": "74fa80c4f569f962859e29119934c3dc1b164b07", "url": "https://github.com/apache/iotdb/commit/74fa80c4f569f962859e29119934c3dc1b164b07", "message": "fix bug", "committedDate": "2020-07-29T06:08:12Z", "type": "commit"}, {"oid": "ac6ca0ae185c46be77ffe9f7d232257516891c30", "url": "https://github.com/apache/iotdb/commit/ac6ca0ae185c46be77ffe9f7d232257516891c30", "message": "Fix PrimitiveMemTableTest and IoTDBCompleteIT", "committedDate": "2020-07-29T06:41:26Z", "type": "commit"}, {"oid": "0a3f0ff85f1c81c97fbb6aa8cd395c1b18cb2fa9", "url": "https://github.com/apache/iotdb/commit/0a3f0ff85f1c81c97fbb6aa8cd395c1b18cb2fa9", "message": "Fix IT", "committedDate": "2020-07-29T07:04:52Z", "type": "commit"}, {"oid": "be5abad616a98e4af1c130878ba46738e9a25959", "url": "https://github.com/apache/iotdb/commit/be5abad616a98e4af1c130878ba46738e9a25959", "message": "remove MemTablePool", "committedDate": "2020-07-30T02:06:08Z", "type": "commit"}, {"oid": "4699d17f3b0607e8b00d84335da671d4574ea840", "url": "https://github.com/apache/iotdb/commit/4699d17f3b0607e8b00d84335da671d4574ea840", "message": "Add config and fix sonar", "committedDate": "2020-07-30T02:43:24Z", "type": "commit"}, {"oid": "6917dbd0bcdade66d4584a3dc86dcda5907edaad", "url": "https://github.com/apache/iotdb/commit/6917dbd0bcdade66d4584a3dc86dcda5907edaad", "message": "Add config report_buffered_arrays_threshold", "committedDate": "2020-07-30T02:53:15Z", "type": "commit"}, {"oid": "c0773c1eb0ee36a8564eb3da33e0b060c66e1895", "url": "https://github.com/apache/iotdb/commit/c0773c1eb0ee36a8564eb3da33e0b060c66e1895", "message": "Fix test in spark connector", "committedDate": "2020-07-30T04:12:39Z", "type": "commit"}, {"oid": "9d789c41764b78fc7c2989945d03a9900601da4d", "url": "https://github.com/apache/iotdb/commit/9d789c41764b78fc7c2989945d03a9900601da4d", "message": "Move updateSchemaDataTypeNumMap to MManager", "committedDate": "2020-07-30T11:58:40Z", "type": "commit"}, {"oid": "a4971ec959459ab4fa68df5f31b1518802f4b7e9", "url": "https://github.com/apache/iotdb/commit/a4971ec959459ab4fa68df5f31b1518802f4b7e9", "message": "Remove unused imports", "committedDate": "2020-07-30T12:57:28Z", "type": "commit"}, {"oid": "e6b44a70b3cf9820076c92d7be51ca0c656ab443", "url": "https://github.com/apache/iotdb/commit/e6b44a70b3cf9820076c92d7be51ca0c656ab443", "message": "update report logic", "committedDate": "2020-07-31T08:25:53Z", "type": "commit"}, {"oid": "deb49f86215e203ef11e4cb05378a6753bffed18", "url": "https://github.com/apache/iotdb/commit/deb49f86215e203ef11e4cb05378a6753bffed18", "message": "merge branch", "committedDate": "2020-07-31T08:32:59Z", "type": "commit"}, {"oid": "71f28c2466762303d91fe15e2b442977a3dee99d", "url": "https://github.com/apache/iotdb/commit/71f28c2466762303d91fe15e2b442977a3dee99d", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-07-31T08:33:14Z", "type": "commit"}, {"oid": "0640f3aeb61500af4dec62a8f38c4505e9a19efe", "url": "https://github.com/apache/iotdb/commit/0640f3aeb61500af4dec62a8f38c4505e9a19efe", "message": "add flush config", "committedDate": "2020-07-31T08:41:39Z", "type": "commit"}, {"oid": "f9505b5935b23ff01c2e609f8758ac2e13b9a8be", "url": "https://github.com/apache/iotdb/commit/f9505b5935b23ff01c2e609f8758ac2e13b9a8be", "message": "fix resource ram size", "committedDate": "2020-07-31T09:45:51Z", "type": "commit"}, {"oid": "dffb5277988bc0895c838d81b299b500afdfe872", "url": "https://github.com/apache/iotdb/commit/dffb5277988bc0895c838d81b299b500afdfe872", "message": "fix update report threshold", "committedDate": "2020-08-01T11:38:31Z", "type": "commit"}, {"oid": "eeab1ed4b80cc692d40ed6c459ad60b50f48c5bc", "url": "https://github.com/apache/iotdb/commit/eeab1ed4b80cc692d40ed6c459ad60b50f48c5bc", "message": "Update server/src/assembly/resources/conf/iotdb-engine.properties\n\nCo-authored-by: Zesong Sun <szs19@mails.tsinghua.edu.cn>", "committedDate": "2020-08-02T05:05:50Z", "type": "commit"}, {"oid": "fb900b76aaf0202356c7d9317adbaf51fb6b9408", "url": "https://github.com/apache/iotdb/commit/fb900b76aaf0202356c7d9317adbaf51fb6b9408", "message": "try to debug and fix", "committedDate": "2020-08-04T13:10:21Z", "type": "commit"}, {"oid": "297b02845c69400f07a53778bdd1a8384f8422c0", "url": "https://github.com/apache/iotdb/commit/297b02845c69400f07a53778bdd1a8384f8422c0", "message": "try to fix bugs", "committedDate": "2020-08-05T01:36:29Z", "type": "commit"}, {"oid": "ac091f54faf2832ad2398afdbba59b14bed804d8", "url": "https://github.com/apache/iotdb/commit/ac091f54faf2832ad2398afdbba59b14bed804d8", "message": "try to fix CI", "committedDate": "2020-08-05T03:04:32Z", "type": "commit"}, {"oid": "ac091f54faf2832ad2398afdbba59b14bed804d8", "url": "https://github.com/apache/iotdb/commit/ac091f54faf2832ad2398afdbba59b14bed804d8", "message": "try to fix CI", "committedDate": "2020-08-05T03:04:32Z", "type": "forcePushed"}, {"oid": "e1ff355ca8993e14d3ea294498e66ce23aebe3f2", "url": "https://github.com/apache/iotdb/commit/e1ff355ca8993e14d3ea294498e66ce23aebe3f2", "message": "try to fix CI", "committedDate": "2020-08-05T06:29:00Z", "type": "commit"}, {"oid": "ea02f88f050a69762616fa9e551fc86b7ecf9165", "url": "https://github.com/apache/iotdb/commit/ea02f88f050a69762616fa9e551fc86b7ecf9165", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-08-05T08:52:53Z", "type": "commit"}, {"oid": "0889194dcc3fbde6c0436ecfa6a95edeb1a11e46", "url": "https://github.com/apache/iotdb/commit/0889194dcc3fbde6c0436ecfa6a95edeb1a11e46", "message": "try to fix CI", "committedDate": "2020-08-05T09:25:51Z", "type": "commit"}, {"oid": "bafd6a6f1602177d5aeef7bcefede19b60eb3beb", "url": "https://github.com/apache/iotdb/commit/bafd6a6f1602177d5aeef7bcefede19b60eb3beb", "message": "try to fix CI", "committedDate": "2020-08-05T14:38:23Z", "type": "commit"}, {"oid": "39ed7072faf9e37886ac7b9059f4a7bcfd71c10b", "url": "https://github.com/apache/iotdb/commit/39ed7072faf9e37886ac7b9059f4a7bcfd71c10b", "message": "try to debug", "committedDate": "2020-08-10T09:20:24Z", "type": "commit"}, {"oid": "8b9099a0fce8b7f32e254a11baa24ba66f273e3a", "url": "https://github.com/apache/iotdb/commit/8b9099a0fce8b7f32e254a11baa24ba66f273e3a", "message": "Fix deadlock (system still continues refusing)", "committedDate": "2020-08-11T00:58:05Z", "type": "commit"}, {"oid": "ab2b94eae7b56401d3c07dbca04206f8bed15e90", "url": "https://github.com/apache/iotdb/commit/ab2b94eae7b56401d3c07dbca04206f8bed15e90", "message": "Set default bufferedArraysMemoryProportion = 0.75 and fix sonar", "committedDate": "2020-08-11T02:45:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NDk3NA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r468294974", "bodyText": "I will change this back later...", "author": "samperson1997", "createdAt": "2020-08-11T02:46:35Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -271,7 +271,7 @@\n   /**\n    * Is vm merge enable\n    */\n-  private boolean enableVm = true;\n+  private boolean enableVm = false;", "originalCommit": "ab2b94eae7b56401d3c07dbca04206f8bed15e90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\nindex 212a982567..21d83697fe 100644\n--- a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n+++ b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n\n@@ -256,34 +270,51 @@ public class IoTDBConfig {\n   /**\n    * When a memTable's size (in byte) exceeds this, the memtable is flushed to disk.\n    */\n-  private long memtableSizeThreshold = 128 * 1024 * 1024L;\n+  private long memtableSizeThreshold = 1024 * 1024 * 1024L;\n \n   /**\n    * When average series point number reaches this, flush the memtable to disk\n    */\n-  private int avgSeriesPointNumberThreshold = 500000;\n+  private int avgSeriesPointNumberThreshold = 100000;\n \n   /**\n-   * When merge point number reaches this, merge the vmfile to the tsfile.\n+   * Work when tsfile_manage_strategy is level_strategy. When merge point number reaches this, merge\n+   * the files to the last level.\n    */\n   private int mergeChunkPointNumberThreshold = 100000;\n \n   /**\n-   * Is vm merge enable\n+   * Work when tsfile_manage_strategy is level_strategy. When page point number of file reaches\n+   * this, use append merge instead of deserialize merge.\n+   */\n+  private int mergePagePointNumberThreshold = 1000;\n+\n+  /**\n+   * TsFile manage strategy, define use which hot compaction strategy\n    */\n-  private boolean enableVm = false;\n+  private TsFileManagementStrategy tsFileManagementStrategy = TsFileManagementStrategy.NORMAL_STRATEGY;\n \n   /**\n-   * The max vm num of each memtable. When vm num exceeds this, the vm files will merge to one.\n+   * Work when tsfile_manage_strategy is level_strategy. The max seq file num of each level. When\n+   * file num exceeds this, the files in one level will merge to one.\n    */\n-  private int maxVmNum = 5;\n+  private int seqFileNumInEachLevel = 10;\n \n   /**\n-   * When vmfiles merge times exceeds this, merge the vmfile to the tsfile.\n+   * Work when tsfile_manage_strategy is level_strategy. The max num of seq level.\n    */\n-  private int maxMergeChunkNumInTsFile = 25;\n+  private int seqLevelNum = 4;\n \n-  private long storageGroupMemBlockSize = 4 * 1024 * 1024L;\n+  /**\n+   * Work when tsfile_manage_strategy is level_strategy. The max unseq file num of each level. When\n+   * file num exceeds this, the files in one level will merge to one.\n+   */\n+  private int unseqFileNumInEachLevel = 10;\n+\n+  /**\n+   * Work when tsfile_manage_strategy is level_strategy. The max num of unseq level.\n+   */\n+  private int unseqLevelNum = 2;\n \n   /**\n    * whether to cache meta data(ChunkMetaData and TsFileMetaData) or not.\n"}}, {"oid": "3acf2c0c6aa7228a08381083944aa1042646e02a", "url": "https://github.com/apache/iotdb/commit/3acf2c0c6aa7228a08381083944aa1042646e02a", "message": "Remove PrimitiveArrayManager.getInstance()", "committedDate": "2020-08-11T06:00:42Z", "type": "commit"}, {"oid": "267fed8dded189ad3b6f062a7b66fdc999ee6c64", "url": "https://github.com/apache/iotdb/commit/267fed8dded189ad3b6f062a7b66fdc999ee6c64", "message": "Revert enableVm = true", "committedDate": "2020-08-11T06:08:29Z", "type": "commit"}, {"oid": "99d67d1464ced47751dda7be4093ba289dbd0d19", "url": "https://github.com/apache/iotdb/commit/99d67d1464ced47751dda7be4093ba289dbd0d19", "message": "Fix sonar", "committedDate": "2020-08-11T06:14:48Z", "type": "commit"}, {"oid": "4abc35b77768dd32e660ca8eed978e7677201ace", "url": "https://github.com/apache/iotdb/commit/4abc35b77768dd32e660ca8eed978e7677201ace", "message": "add a recover system mem cost test", "committedDate": "2020-08-11T07:54:51Z", "type": "commit"}, {"oid": "7545e384d2decdae43824ce1f1dd97a5504a3209", "url": "https://github.com/apache/iotdb/commit/7545e384d2decdae43824ce1f1dd97a5504a3209", "message": "Avoid Map<TSDataType, xxx>", "committedDate": "2020-08-11T09:06:30Z", "type": "commit"}, {"oid": "7f8914870cfc58dd1c1a14e3e298ffabf9d6a4e6", "url": "https://github.com/apache/iotdb/commit/7f8914870cfc58dd1c1a14e3e298ffabf9d6a4e6", "message": "Add LAST for TSDataType", "committedDate": "2020-08-11T09:44:05Z", "type": "commit"}, {"oid": "4abc35b77768dd32e660ca8eed978e7677201ace", "url": "https://github.com/apache/iotdb/commit/4abc35b77768dd32e660ca8eed978e7677201ace", "message": "add a recover system mem cost test", "committedDate": "2020-08-11T07:54:51Z", "type": "forcePushed"}, {"oid": "634e409d7a2f426616ef66f036967500aad6a1c1", "url": "https://github.com/apache/iotdb/commit/634e409d7a2f426616ef66f036967500aad6a1c1", "message": "Change array pool lock to queue lock of each data type", "committedDate": "2020-08-12T04:16:26Z", "type": "commit"}, {"oid": "fb7d09cf2a70c282b6013bea6a9be8212acca157", "url": "https://github.com/apache/iotdb/commit/fb7d09cf2a70c282b6013bea6a9be8212acca157", "message": "modify insertion", "committedDate": "2020-08-12T05:58:32Z", "type": "commit"}, {"oid": "7741710532f24e4a3329f5b430699cc2e2f2fbca", "url": "https://github.com/apache/iotdb/commit/7741710532f24e4a3329f5b430699cc2e2f2fbca", "message": "merge branch", "committedDate": "2020-08-12T06:07:59Z", "type": "commit"}, {"oid": "cb0bde3342c71601bf2f18387558c9ac4508d40a", "url": "https://github.com/apache/iotdb/commit/cb0bde3342c71601bf2f18387558c9ac4508d40a", "message": "Revert to EnumMap", "committedDate": "2020-08-12T06:19:34Z", "type": "commit"}, {"oid": "07b95ae3f1fbb62b6cd12bedd197bfadc78dfdbf", "url": "https://github.com/apache/iotdb/commit/07b95ae3f1fbb62b6cd12bedd197bfadc78dfdbf", "message": "issue fixing", "committedDate": "2020-08-12T12:09:51Z", "type": "commit"}, {"oid": "330473d48f51bbfc86c54d3e0c1e00ab6e9afe48", "url": "https://github.com/apache/iotdb/commit/330473d48f51bbfc86c54d3e0c1e00ab6e9afe48", "message": "[IOTDB-834] Remove DynamicAdapter", "committedDate": "2020-08-12T15:57:39Z", "type": "commit"}, {"oid": "f6dac5d1145b06698647bae9bd236bd05e1d520c", "url": "https://github.com/apache/iotdb/commit/f6dac5d1145b06698647bae9bd236bd05e1d520c", "message": "Ignore upper/lower case", "committedDate": "2020-08-12T16:02:17Z", "type": "commit"}, {"oid": "644448ad6b317bd67adef59d9388756520796488", "url": "https://github.com/apache/iotdb/commit/644448ad6b317bd67adef59d9388756520796488", "message": "remove writeProcessException from tvlist", "committedDate": "2020-08-13T02:24:49Z", "type": "commit"}, {"oid": "31fc4bbcf3070fc0d970896e41478a99468e4a32", "url": "https://github.com/apache/iotdb/commit/31fc4bbcf3070fc0d970896e41478a99468e4a32", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into mem_control", "committedDate": "2020-08-13T02:25:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzODA5Mg==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r470038092", "bodyText": "This count may be not very accurate. If you want accurate count, consider synchronize. If you need performance and accept inaccurate count, this way is better.", "author": "SilverNarcissus", "createdAt": "2020-08-13T15:28:59Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -609,6 +609,15 @@ public boolean isFileAlreadyExist(TsFileResource tsFileResource, String storageG\n     return processor != null && processor.isFileAlreadyExist(tsFileResource, partitionNum);\n   }\n \n+  public int countTsFileProcessors() {", "originalCommit": "31fc4bbcf3070fc0d970896e41478a99468e4a32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDg0OA==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r470380848", "bodyText": "This method is no longer useful. I'll remove it in the next commit. :)", "author": "HTHou", "createdAt": "2020-08-14T02:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzODA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java b/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\nindex c91e2f6f8d..b6d5aceb71 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\n\n@@ -603,21 +686,12 @@ public class StorageEngine implements IService {\n     this.fileFlushPolicy = fileFlushPolicy;\n   }\n \n-  public boolean isFileAlreadyExist(TsFileResource tsFileResource, String storageGroup,\n+  public boolean isFileAlreadyExist(TsFileResource tsFileResource, PartialPath storageGroup,\n       long partitionNum) {\n     StorageGroupProcessor processor = processorMap.get(storageGroup);\n     return processor != null && processor.isFileAlreadyExist(tsFileResource, partitionNum);\n   }\n \n-  public int countTsFileProcessors() {\n-    int count = 0;\n-    for (StorageGroupProcessor sgProcessor : processorMap.values()) {\n-      count += sgProcessor.getWorkSequenceTsFileProcessors().size();\n-      count += sgProcessor.getWorkUnsequenceTsFileProcessors().size();\n-    }\n-    return count;\n-  }\n-\n   public static long getTimePartitionInterval() {\n     if (timePartitionInterval == -1) {\n       initTimePartition();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzOTIzOQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r470039239", "bodyText": "Need some comment here to show this class's function", "author": "SilverNarcissus", "createdAt": "2020-08-13T15:30:40Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.rescon.SystemInfo;\n+\n+public class StorageGroupInfo {", "originalCommit": "31fc4bbcf3070fc0d970896e41478a99468e4a32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTg0Mw==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r472041843", "bodyText": "Fixed, thanks~", "author": "HTHou", "createdAt": "2020-08-18T09:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzOTIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\nindex 6bc2ee1c09..f1fb5d25e3 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupInfo.java\n\n@@ -18,85 +18,88 @@\n  */\n package org.apache.iotdb.db.engine.storagegroup;\n \n-import java.util.TreeSet;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.rescon.SystemInfo;\n \n+/**\n+ * The storageGroupInfo records the total memory cost of the Storage Group.\n+ */\n public class StorageGroupInfo {\n \n-  private long storageGroupReportThreshold;\n-\n-  private long unsealedResourceMemCost;\n-  private long bytesMemCost;\n-  private long chunkMetadataMemCost;\n-  private long walMemCost;\n-  \n-  private TreeSet<TsFileProcessor> reportedTsps = new TreeSet<>(\n-      (o1, o2) -> (int) (o2.getTsFileProcessorInfo().getTsFileProcessorMemCost() - o1\n-          .getTsFileProcessorInfo().getTsFileProcessorMemCost()));\n-\n-  public StorageGroupInfo() {\n-    storageGroupReportThreshold = IoTDBDescriptor.getInstance().getConfig()\n-        .getStorageGroupMemBlockSize();\n-    unsealedResourceMemCost = 0;\n-    bytesMemCost = 0;\n-    chunkMetadataMemCost = 0;\n-    walMemCost = 0;\n-  }\n+  private StorageGroupProcessor storageGroupProcessor;\n \n-  public void reportTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n-    if (reportedTsps.add(tsFileProcessor)) {\n-      walMemCost += IoTDBDescriptor.getInstance().getConfig().getWalBufferSize();\n-    }\n-  }\n+  /**\n+   * The total Storage group memory cost\n+   */\n+  private AtomicLong memoryCost;\n \n-  public void addUnsealedResourceMemCost(long cost) {\n-    unsealedResourceMemCost += cost;\n-  }\n+  /**\n+   * The threshold of reporting it's size to SystemInfo\n+   */\n+  private long storageGroupSizeReportThreshold = \n+      IoTDBDescriptor.getInstance().getConfig().getStorageGroupSizeReportThreshold();\n \n-  public void addChunkMetadataMemCost(long cost) {\n-    chunkMetadataMemCost += cost;\n-  }\n+  private long lastReportedSize = 0L;\n \n-  public void addBytesMemCost(long cost) {\n-    bytesMemCost += cost;\n-  }\n+  /**\n+   * A set of all unclosed TsFileProcessors in this SG\n+   */\n+  private Set<TsFileProcessor> reportedTsps = new HashSet<>();\n \n-  public void resetUnsealedResourceMemCost(long cost) {\n-    unsealedResourceMemCost -= cost;\n+  public StorageGroupInfo(StorageGroupProcessor storageGroupProcessor) {\n+    this.storageGroupProcessor = storageGroupProcessor;\n+    memoryCost = new AtomicLong();\n   }\n \n-  public void resetChunkMetadataMemCost(long cost) {\n-    chunkMetadataMemCost -= cost;\n+  public StorageGroupProcessor getStorageGroupProcessor() {\n+    return storageGroupProcessor;\n   }\n \n-  public void resetBytesMemCost(long cost) {\n-    bytesMemCost -= cost;\n+  /**\n+   * When create a new TsFileProcessor, call this method\n+   */\n+  public void initTsFileProcessorInfo(TsFileProcessor tsFileProcessor) {\n+    if (reportedTsps.add(tsFileProcessor)) {\n+      memoryCost.getAndAdd(IoTDBDescriptor.getInstance().getConfig().getWalBufferSize());\n+    }\n   }\n \n-  public void resetWalMemCost(long cost) {\n-    walMemCost -= cost;\n+  public void addStorageGroupMemCost(long cost) {\n+    memoryCost.getAndAdd(cost);\n   }\n \n-  public boolean checkIfNeedToReportStatusToSystem() {\n-    return getSgMemCost() >= storageGroupReportThreshold;\n+  public void releaseStorageGroupMemCost(long cost) {\n+    memoryCost.getAndAdd(-cost);\n   }\n \n   public long getSgMemCost() {\n-    return unsealedResourceMemCost + bytesMemCost + chunkMetadataMemCost + walMemCost;\n+    return memoryCost.get();\n+  }\n+\n+  public Set<TsFileProcessor> getAllReportedTsp() {\n+    return reportedTsps;\n   }\n \n-  public void addStorageGroupReportThreshold(long value) {\n-    storageGroupReportThreshold += value;\n+  public boolean needToReportToSystem() {\n+    return getSgMemCost() - lastReportedSize > storageGroupSizeReportThreshold;\n   }\n \n-  public TsFileProcessor getLargestTsFileProcessor() {\n-    return reportedTsps.first();\n+  public void setLastReportedSize(long size) {\n+    lastReportedSize = size;\n   }\n \n+  /**\n+   * When a TsFileProcessor is closing, remove it from reportedTsps, and report to systemInfo\n+   * to update SG cost.\n+   * \n+   * @param tsFileProcessor\n+   */\n   public void closeTsFileProcessorAndReportToSystem(TsFileProcessor tsFileProcessor) {\n     reportedTsps.remove(tsFileProcessor);\n-    SystemInfo.getInstance().resetStorageGroupInfoStatus(this);\n+    SystemInfo.getInstance().resetStorageGroupStatus(this);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MTA0Ng==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r470041046", "bodyText": "Need some comment to show this class's function.", "author": "SilverNarcissus", "createdAt": "2020-08-13T15:33:25Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.engine.storagegroup;\n+\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+\n+public class TsFileProcessorInfo {", "originalCommit": "31fc4bbcf3070fc0d970896e41478a99468e4a32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTk2NQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r472041965", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2020-08-18T09:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MTA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\nindex 67a680bf10..c6211c577f 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessorInfo.java\n\n@@ -20,53 +20,93 @@ package org.apache.iotdb.db.engine.storagegroup;\n \n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n \n+/**\n+ * The TsFileProcessorInfo records the memory cost of this TsFileProcessor.\n+ */\n public class TsFileProcessorInfo {\n \n+  /**\n+   * Once tspInfo updated, report to storageGroupInfo that this TSP belongs to.\n+   */\n   private StorageGroupInfo storageGroupInfo;\n \n+  /**\n+   * The memory cost of the unsealed TsFileResources of this TSP\n+   */\n   private long unsealedResourceMemCost;\n-  private long bytesMemCost;\n+  \n+  /**\n+   * The memory cost of memTable of this TSP\n+   */\n+  private long memTableCost;\n+\n+  /**\n+   * The memory cost of ChunkMetadata of this TSP\n+   */\n   private long chunkMetadataMemCost;\n+\n+  /**\n+   * The memory cost of WAL of this TSP\n+   */\n   private long walMemCost;\n \n   public TsFileProcessorInfo(StorageGroupInfo storageGroupInfo) {\n     this.storageGroupInfo = storageGroupInfo;\n-    this.unsealedResourceMemCost = 0;\n-    this.bytesMemCost = 0;\n-    this.chunkMetadataMemCost = 0;\n+    this.unsealedResourceMemCost = 0L;\n+    this.memTableCost = 0L;\n+    this.chunkMetadataMemCost = 0L;\n     this.walMemCost = IoTDBDescriptor.getInstance().getConfig().getWalBufferSize();\n   }\n \n   public void addUnsealedResourceMemCost(long cost) {\n     unsealedResourceMemCost += cost;\n-    storageGroupInfo.addUnsealedResourceMemCost(cost);\n+    storageGroupInfo.addStorageGroupMemCost(cost);\n   }\n \n   public void addChunkMetadataMemCost(long cost) {\n     chunkMetadataMemCost += cost;\n-    storageGroupInfo.addChunkMetadataMemCost(cost);\n+    storageGroupInfo.addStorageGroupMemCost(cost);\n   }\n \n-  public void addBytesMemCost(long cost) {\n-    bytesMemCost += cost;\n-    storageGroupInfo.addBytesMemCost(cost);\n+  public void addMemTableCost(long cost) {\n+    memTableCost += cost;\n+    storageGroupInfo.addStorageGroupMemCost(cost);\n   }\n \n+  /**\n+   * call this method when closing TSP\n+   */\n   public void clear() {\n-    storageGroupInfo.resetUnsealedResourceMemCost(unsealedResourceMemCost);\n-    storageGroupInfo.resetChunkMetadataMemCost(chunkMetadataMemCost);\n-    storageGroupInfo.resetWalMemCost(walMemCost);\n+    storageGroupInfo.releaseStorageGroupMemCost(unsealedResourceMemCost +\n+        walMemCost + chunkMetadataMemCost);\n     walMemCost = 0;\n     unsealedResourceMemCost = 0;\n     chunkMetadataMemCost = 0;\n   }\n \n-  public void resetBytesMemCost(long cost) {\n-    storageGroupInfo.resetBytesMemCost(cost);\n-    bytesMemCost -= cost;\n+  /**\n+   * call this method when a memTable flushed\n+   */\n+  public void resetMemTableCost(long cost) {\n+    storageGroupInfo.releaseStorageGroupMemCost(cost);\n+    memTableCost -= cost;\n+  }\n+\n+  public void resetUnsealedResourceMemCost(long cost) {\n+    storageGroupInfo.releaseStorageGroupMemCost(cost);\n+    unsealedResourceMemCost -= cost;\n+  }\n+\n+  public void resetChunkMetadataMemCost(long cost) {\n+    storageGroupInfo.releaseStorageGroupMemCost(cost);\n+    chunkMetadataMemCost -= cost;\n   }\n \n   public long getTsFileProcessorMemCost() {\n-    return unsealedResourceMemCost + bytesMemCost + chunkMetadataMemCost + walMemCost;\n+    return unsealedResourceMemCost + memTableCost + chunkMetadataMemCost + walMemCost;\n+  }\n+\n+  public long getMemTableCost() {\n+    return memTableCost;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MzMzOQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r470043339", "bodyText": "Use Integer.compare() rather than a - b;", "author": "SilverNarcissus", "createdAt": "2020-08-13T15:36:54Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.rescon;\n+\n+import java.util.TreeMap;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.flush.FlushManager;\n+import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SystemInfo {\n+\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+  private static final Logger logger = LoggerFactory.getLogger(SystemInfo.class);\n+\n+  private long totalSgInfoMemCost;\n+  private long arrayPoolMemCost;\n+  private boolean rejected = false;\n+\n+  private TreeMap<StorageGroupInfo, Long> reportedSgMemCostMap = new TreeMap<>(", "originalCommit": "31fc4bbcf3070fc0d970896e41478a99468e4a32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAxNzUzOQ==", "url": "https://github.com/apache/iotdb/pull/1524#discussion_r472017539", "bodyText": "Already fixed~", "author": "HTHou", "createdAt": "2020-08-18T08:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MzMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e196e1fe729d4dddd938dfe9226d0a08196d4e2", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\nindex 5fcf7e6357..e2b886347c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/SystemInfo.java\n\n@@ -19,13 +19,16 @@\n \n package org.apache.iotdb.db.rescon;\n \n-import java.util.TreeMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n import org.apache.iotdb.db.conf.IoTDBConfig;\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.engine.flush.FlushManager;\n import org.apache.iotdb.db.engine.storagegroup.StorageGroupInfo;\n import org.apache.iotdb.db.engine.storagegroup.TsFileProcessor;\n-import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"oid": "df64eb4ae3e411937f3809708e05c7212c5c64e4", "url": "https://github.com/apache/iotdb/commit/df64eb4ae3e411937f3809708e05c7212c5c64e4", "message": "change the treemap in sgInfo to list", "committedDate": "2020-08-14T02:33:19Z", "type": "commit"}, {"oid": "8988c2d46af7452fcd3a118f846b8d98980f0126", "url": "https://github.com/apache/iotdb/commit/8988c2d46af7452fcd3a118f846b8d98980f0126", "message": "FIX A LOT OF BUGS", "committedDate": "2020-08-14T09:08:05Z", "type": "commit"}, {"oid": "6c628a839cdbf92bc1746cf11d1f031bd98c96f2", "url": "https://github.com/apache/iotdb/commit/6c628a839cdbf92bc1746cf11d1f031bd98c96f2", "message": "no need to report sgInfo when non-TEXT data flushed", "committedDate": "2020-08-14T09:53:31Z", "type": "commit"}, {"oid": "8c709e4a5f03df15dd8eeebf5e23c211d81998f6", "url": "https://github.com/apache/iotdb/commit/8c709e4a5f03df15dd8eeebf5e23c211d81998f6", "message": "fix closing tsfile and a bug when flush the second tsfile", "committedDate": "2020-08-17T08:57:20Z", "type": "commit"}, {"oid": "7ecce541b3b9355c9293f30e03d511aa63042a66", "url": "https://github.com/apache/iotdb/commit/7ecce541b3b9355c9293f30e03d511aa63042a66", "message": "try to fix OOM when insert text data (still not working...)", "committedDate": "2020-08-17T13:46:05Z", "type": "commit"}, {"oid": "1328106261a24a69d35e2e91096322d4c0b30fd9", "url": "https://github.com/apache/iotdb/commit/1328106261a24a69d35e2e91096322d4c0b30fd9", "message": "fix OOM when insert text data", "committedDate": "2020-08-18T02:46:53Z", "type": "commit"}, {"oid": "6eb5f0383befaa3dac5806da1fcedf7745dc07b8", "url": "https://github.com/apache/iotdb/commit/6eb5f0383befaa3dac5806da1fcedf7745dc07b8", "message": "Merge branch 'mem_control' into remove_dynamic_adapter", "committedDate": "2020-08-18T06:36:43Z", "type": "commit"}]}