{"pr_number": 2306, "pr_title": "[IOTDB-1065] Fix deletion bug while trying to delete data from a timeseries which contains comma", "pr_createdAt": "2020-12-22T08:22:44Z", "pr_url": "https://github.com/apache/iotdb/pull/2306", "timeline": [{"oid": "936f86398a1a70a531fe6f990ff2ebe472dc0088", "url": "https://github.com/apache/iotdb/commit/936f86398a1a70a531fe6f990ff2ebe472dc0088", "message": "Fix deletion bug when series path contains comma", "committedDate": "2020-12-22T08:18:42Z", "type": "commit"}, {"oid": "3c549754404462385a4c5975a5b63c10be46a7d1", "url": "https://github.com/apache/iotdb/commit/3c549754404462385a4c5975a5b63c10be46a7d1", "message": "Correct codesmell", "committedDate": "2020-12-22T08:41:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMzA2OQ==", "url": "https://github.com/apache/iotdb/pull/2306#discussion_r547613069", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new IOException(\"Invalid version number: \" + fields[2]);\n          \n          \n            \n                  throw new IOException(\"Invalid version number: \" + fields[length - 3]);", "author": "HTHou", "createdAt": "2020-12-23T03:01:03Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java", "diffHunk": "@@ -127,33 +128,36 @@ private static String encodeDeletion(Deletion del) {\n         + del.getStartTime() + SEPARATOR + del.getEndTime();\n   }\n \n+  /**\n+   * Decode a deletion record. E.g. \"DELETION,root.ln.wf01.wt01.temperature,111,100,300\"\n+   * the index of field endTimestamp is length - 1, startTimestamp is length - 2,\n+   * versionNum is length - 3. Fields in index range [1, length -3) could all belong\n+   * to timeseries path in cases that the paths contain comma.\n+   */\n   private static Deletion decodeDeletion(String[] fields) throws IOException {\n-    if (fields.length != 5 && fields.length != 4) {\n-      throw new IOException(\"Incorrect deletion fields number: \" + fields.length);\n-    }\n-\n-    String path = fields[1];\n+    int length = fields.length;\n+    String path = \"\";\n     long versionNum;\n-    long startTimestamp = Long.MIN_VALUE;\n+    long startTimestamp;\n     long endTimestamp;\n+\n+    try {\n+      endTimestamp = Long.parseLong(fields[length - 1]);\n+      startTimestamp = Long.parseLong(fields[length - 2]);\n+    } catch (NumberFormatException e) {\n+      throw new IOException(\"Invalid timestamp: \" + e.getMessage());\n+    }\n     try {\n-      versionNum = Long.parseLong(fields[2]);\n+      versionNum = Long.parseLong(fields[length - 3]);\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Invalid version number: \" + fields[2]);", "originalCommit": "3c549754404462385a4c5975a5b63c10be46a7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxNTk5Mw==", "url": "https://github.com/apache/iotdb/pull/2306#discussion_r547615993", "bodyText": "Fixed", "author": "wshao08", "createdAt": "2020-12-23T03:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMzA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a95e87d459bcc6e39e0eb42b00c79f20dbd55adf", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java b/server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java\nindex cbc9941184..1a79a37639 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java\n\n@@ -129,33 +129,56 @@ public class LocalTextModificationAccessor implements ModificationReader, Modifi\n   }\n \n   /**\n-   * Decode a deletion record. E.g. \"DELETION,root.ln.wf01.wt01.temperature,111,100,300\"\n+   * Decode a range deletion record. E.g. \"DELETION,root.ln.wf01.wt01.temperature,111,100,300\"\n    * the index of field endTimestamp is length - 1, startTimestamp is length - 2,\n-   * versionNum is length - 3. Fields in index range [1, length -3) could all belong\n-   * to timeseries path in cases that the paths contain comma.\n+   * versionNum is length - 3. Fields in index range [1, length -3) all belong\n+   * to a timeseries path in case when the path contains comma.\n    */\n   private static Deletion decodeDeletion(String[] fields) throws IOException {\n-    int length = fields.length;\n-    String path = \"\";\n     long versionNum;\n+    try {\n+      versionNum = Long.parseLong(fields[fields.length - 3]);\n+    } catch (NumberFormatException e) {\n+      return decodePointDeletion(fields);\n+    }\n+\n+    String path = \"\";\n     long startTimestamp;\n     long endTimestamp;\n-\n     try {\n-      endTimestamp = Long.parseLong(fields[length - 1]);\n-      startTimestamp = Long.parseLong(fields[length - 2]);\n+      endTimestamp = Long.parseLong(fields[fields.length - 1]);\n+      startTimestamp = Long.parseLong(fields[fields.length - 2]);\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Invalid timestamp: \" + e.getMessage());\n     }\n     try {\n-      versionNum = Long.parseLong(fields[length - 3]);\n+      String[] pathArray = Arrays.copyOfRange(fields, 1, fields.length - 3);\n+      path = String.join(SEPARATOR, pathArray);\n+      return new Deletion(new PartialPath(path), versionNum, startTimestamp, endTimestamp);\n+    } catch (IllegalPathException e) {\n+      throw new IOException(\"Invalid series path: \" + path);\n+    }\n+  }\n+\n+  /**\n+   * Decode a point deletion record. E.g. \"DELETION,root.ln.wf01.wt01.temperature,111,300\"\n+   * the index of field endTimestamp is length - 1, versionNum is length - 2.\n+   * Fields in index range [1, length - 2) compose timeseries path.\n+   */\n+  private static Deletion decodePointDeletion(String[] fields) throws IOException {\n+    String path = \"\";\n+    long versionNum;\n+    long endTimestamp;\n+    try {\n+      endTimestamp = Long.parseLong(fields[fields.length - 1]);\n+      versionNum = Long.parseLong(fields[fields.length - 2]);\n     } catch (NumberFormatException e) {\n-      throw new IOException(\"Invalid version number: \" + fields[2]);\n+      throw new IOException(\"Invalid timestamp: \" + e.getMessage());\n     }\n     try {\n-      String[] pathArray = Arrays.copyOfRange(fields, 1, length - 3);\n+      String[] pathArray = Arrays.copyOfRange(fields, 1, fields.length - 2);\n       path = String.join(SEPARATOR, pathArray);\n-      return new Deletion(new PartialPath(path), versionNum, startTimestamp, endTimestamp);\n+      return new Deletion(new PartialPath(path), versionNum, endTimestamp);\n     } catch (IllegalPathException e) {\n       throw new IOException(\"Invalid series path: \" + path);\n     }\n"}}, {"oid": "a95e87d459bcc6e39e0eb42b00c79f20dbd55adf", "url": "https://github.com/apache/iotdb/commit/a95e87d459bcc6e39e0eb42b00c79f20dbd55adf", "message": "Handle both point deletion and range deletion", "committedDate": "2020-12-23T03:03:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxNDg1OA==", "url": "https://github.com/apache/iotdb/pull/2306#discussion_r547614858", "bodyText": "Consider add this check back?\nif (fields.length < 4) {\n  throw new IOException(\"Incorrect deletion fields number: \" + fields.length);\n}", "author": "HTHou", "createdAt": "2020-12-23T03:08:08Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java", "diffHunk": "@@ -127,33 +128,36 @@ private static String encodeDeletion(Deletion del) {\n         + del.getStartTime() + SEPARATOR + del.getEndTime();\n   }\n \n+  /**\n+   * Decode a deletion record. E.g. \"DELETION,root.ln.wf01.wt01.temperature,111,100,300\"\n+   * the index of field endTimestamp is length - 1, startTimestamp is length - 2,\n+   * versionNum is length - 3. Fields in index range [1, length -3) could all belong\n+   * to timeseries path in cases that the paths contain comma.\n+   */\n   private static Deletion decodeDeletion(String[] fields) throws IOException {\n-    if (fields.length != 5 && fields.length != 4) {\n-      throw new IOException(\"Incorrect deletion fields number: \" + fields.length);\n-    }", "originalCommit": "3c549754404462385a4c5975a5b63c10be46a7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxNjA1Mg==", "url": "https://github.com/apache/iotdb/pull/2306#discussion_r547616052", "bodyText": "Yes added", "author": "wshao08", "createdAt": "2020-12-23T03:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxNDg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "1c7a7bd42ec75703109235532a27cad216c68a06", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java b/server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java\nindex cbc9941184..8e099647e7 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/modification/io/LocalTextModificationAccessor.java\n\n@@ -129,33 +129,60 @@ public class LocalTextModificationAccessor implements ModificationReader, Modifi\n   }\n \n   /**\n-   * Decode a deletion record. E.g. \"DELETION,root.ln.wf01.wt01.temperature,111,100,300\"\n+   * Decode a range deletion record. E.g. \"DELETION,root.ln.wf01.wt01.temperature,111,100,300\"\n    * the index of field endTimestamp is length - 1, startTimestamp is length - 2,\n-   * versionNum is length - 3. Fields in index range [1, length -3) could all belong\n-   * to timeseries path in cases that the paths contain comma.\n+   * versionNum is length - 3. Fields in index range [1, length -3) all belong\n+   * to a timeseries path in case when the path contains comma.\n    */\n   private static Deletion decodeDeletion(String[] fields) throws IOException {\n-    int length = fields.length;\n+    if (fields.length < 4) {\n+      throw new IOException(\"Incorrect deletion fields number: \" + fields.length);\n+    }\n+\n     String path = \"\";\n-    long versionNum;\n     long startTimestamp;\n     long endTimestamp;\n+    long versionNum;\n+    try {\n+      versionNum = Long.parseLong(fields[fields.length - 3]);\n+    } catch (NumberFormatException e) {\n+      return decodePointDeletion(fields);\n+    }\n \n     try {\n-      endTimestamp = Long.parseLong(fields[length - 1]);\n-      startTimestamp = Long.parseLong(fields[length - 2]);\n+      endTimestamp = Long.parseLong(fields[fields.length - 1]);\n+      startTimestamp = Long.parseLong(fields[fields.length - 2]);\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Invalid timestamp: \" + e.getMessage());\n     }\n     try {\n-      versionNum = Long.parseLong(fields[length - 3]);\n+      String[] pathArray = Arrays.copyOfRange(fields, 1, fields.length - 3);\n+      path = String.join(SEPARATOR, pathArray);\n+      return new Deletion(new PartialPath(path), versionNum, startTimestamp, endTimestamp);\n+    } catch (IllegalPathException e) {\n+      throw new IOException(\"Invalid series path: \" + path);\n+    }\n+  }\n+\n+  /**\n+   * Decode a point deletion record. E.g. \"DELETION,root.ln.wf01.wt01.temperature,111,300\"\n+   * the index of field endTimestamp is length - 1, versionNum is length - 2.\n+   * Fields in index range [1, length - 2) compose timeseries path.\n+   */\n+  private static Deletion decodePointDeletion(String[] fields) throws IOException {\n+    String path = \"\";\n+    long versionNum;\n+    long endTimestamp;\n+    try {\n+      endTimestamp = Long.parseLong(fields[fields.length - 1]);\n+      versionNum = Long.parseLong(fields[fields.length - 2]);\n     } catch (NumberFormatException e) {\n-      throw new IOException(\"Invalid version number: \" + fields[2]);\n+      throw new IOException(\"Invalid timestamp: \" + e.getMessage());\n     }\n     try {\n-      String[] pathArray = Arrays.copyOfRange(fields, 1, length - 3);\n+      String[] pathArray = Arrays.copyOfRange(fields, 1, fields.length - 2);\n       path = String.join(SEPARATOR, pathArray);\n-      return new Deletion(new PartialPath(path), versionNum, startTimestamp, endTimestamp);\n+      return new Deletion(new PartialPath(path), versionNum, endTimestamp);\n     } catch (IllegalPathException e) {\n       throw new IOException(\"Invalid series path: \" + path);\n     }\n"}}, {"oid": "1c7a7bd42ec75703109235532a27cad216c68a06", "url": "https://github.com/apache/iotdb/commit/1c7a7bd42ec75703109235532a27cad216c68a06", "message": "Fix review issues", "committedDate": "2020-12-23T03:12:00Z", "type": "commit"}]}