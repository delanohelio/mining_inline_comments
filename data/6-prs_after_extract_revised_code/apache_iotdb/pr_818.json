{"pr_number": 818, "pr_title": "[IOTDB-482] Vectorized TimeGenerator", "pr_createdAt": "2020-02-17T07:47:46Z", "pr_url": "https://github.com/apache/iotdb/pull/818", "timeline": [{"oid": "053f5e09153593ea11a4f35456c1a2608e034197", "url": "https://github.com/apache/iotdb/commit/053f5e09153593ea11a4f35456c1a2608e034197", "message": "[IOTDB-482] Vectorized TimeGenerator", "committedDate": "2020-02-17T07:46:28Z", "type": "commit"}, {"oid": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "url": "https://github.com/apache/iotdb/commit/f932713089b92bdf869f7668ed835c3c3eb2daa1", "message": "add comments", "committedDate": "2020-02-17T07:57:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyODQ5MQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380028491", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TimeSeries {\n          \n          \n            \n            public class TimeColumn {\n          \n      \n    \n    \n  \n\nWe usually use TimeSeries to represent  time-value, time-value, time-value...", "author": "qiaojialin", "createdAt": "2020-02-17T07:59:54Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeSeries.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.apache.iotdb.tsfile.read.common;\n+\n+\n+public class TimeSeries {", "originalCommit": "053f5e09153593ea11a4f35456c1a2608e034197", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee12a4149f05aebba4c7e8a5780cbf85e6a8085c", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeSeries.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeSeries.java\nindex fb090fa60..9ce44eac6 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeSeries.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeSeries.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.apache.iotdb.tsfile.read.common;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTE2Mg==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380029162", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public boolean hasNext() throws IOException {\n          \n          \n            \n              public boolean hasNextTimeColumn() throws IOException {", "author": "qiaojialin", "createdAt": "2020-02-17T08:01:58Z", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java", "diffHunk": "@@ -20,26 +20,27 @@\n package org.apache.iotdb.db.query.timegenerator;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.reader.IPointReader;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.NodeType;\n \n public class EngineLeafNode implements Node {\n \n-  private IPointReader reader;\n+  private IBatchReader reader;\n \n-  public EngineLeafNode(IPointReader reader) {\n+  public EngineLeafNode(IBatchReader reader) {\n     this.reader = reader;\n   }\n \n   @Override\n   public boolean hasNext() throws IOException {", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java\nindex fd5b5ad7d..e0d711d72 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java\n\n@@ -20,7 +20,7 @@\n package org.apache.iotdb.db.query.timegenerator;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.NodeType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTI1Ng==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380029256", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TimeSeries next() throws IOException {\n          \n          \n            \n              public TimeSeries nextTimeColumn() throws IOException {", "author": "qiaojialin", "createdAt": "2020-02-17T08:02:16Z", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java", "diffHunk": "@@ -20,26 +20,27 @@\n package org.apache.iotdb.db.query.timegenerator;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.reader.IPointReader;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.NodeType;\n \n public class EngineLeafNode implements Node {\n \n-  private IPointReader reader;\n+  private IBatchReader reader;\n \n-  public EngineLeafNode(IPointReader reader) {\n+  public EngineLeafNode(IBatchReader reader) {\n     this.reader = reader;\n   }\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return reader.hasNextTimeValuePair();\n+    return reader.hasNextBatch();\n   }\n \n   @Override\n-  public long next() throws IOException {\n-    return reader.nextTimeValuePair().getTimestamp();\n+  public TimeSeries next() throws IOException {", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java\nindex fd5b5ad7d..e0d711d72 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineLeafNode.java\n\n@@ -20,7 +20,7 @@\n package org.apache.iotdb.db.query.timegenerator;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.NodeType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMjIwMQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380032201", "bodyText": "I prefer to fill the cacheTimes in hasNext.", "author": "qiaojialin", "createdAt": "2020-02-17T08:11:00Z", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\nindex 9f5440db6..e48038c01 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n\n@@ -54,17 +55,30 @@ public class EngineTimeGenerator implements TimeGenerator {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n+    if (hasCache) {\n+      return true;\n+    }\n+    if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+      cacheTimes.next();\n+      return true;\n+    }\n+    while (operatorNode.hasNextTimeColumn()) {\n+      cacheTimes = operatorNode.nextTimeColumn();\n+      if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+        hasCache = true;\n+        break;\n+      }\n+    }\n+    return hasCache;\n   }\n \n   @Override\n   public long next() throws IOException {\n-    if (cacheTimes == null || !cacheTimes.hasMoreData()) {\n-      cacheTimes = operatorNode.next();\n+    if (hasCache || hasNext()) {\n+      hasCache = false;\n+      return cacheTimes.currentTime();\n     }\n-    long currentTime = cacheTimes.currentTime();\n-    cacheTimes.next();\n-    return currentTime;\n+    throw new IOException(\"no more data\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMjcwOA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380032708", "bodyText": "I prefer to implement next() like this:\npublic BatchData nextBatch() throws IOException {\nif (hasCachedBatchData || hasNextBatch()) {\nhasCachedBatchData = false;\nreturn batchData;\n}\nthrow new IOException(\"no next batch\");\n}", "author": "qiaojialin", "createdAt": "2020-02-17T08:12:21Z", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (cacheTimes == null || !cacheTimes.hasMoreData()) {", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5OTUwMw==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380099503", "bodyText": "this return value was long not batch, but  i'm impl with your suggestion", "author": "liutaohua", "createdAt": "2020-02-17T10:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMjcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\nindex 9f5440db6..e48038c01 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n\n@@ -54,17 +55,30 @@ public class EngineTimeGenerator implements TimeGenerator {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n+    if (hasCache) {\n+      return true;\n+    }\n+    if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+      cacheTimes.next();\n+      return true;\n+    }\n+    while (operatorNode.hasNextTimeColumn()) {\n+      cacheTimes = operatorNode.nextTimeColumn();\n+      if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+        hasCache = true;\n+        break;\n+      }\n+    }\n+    return hasCache;\n   }\n \n   @Override\n   public long next() throws IOException {\n-    if (cacheTimes == null || !cacheTimes.hasMoreData()) {\n-      cacheTimes = operatorNode.next();\n+    if (hasCache || hasNext()) {\n+      hasCache = false;\n+      return cacheTimes.currentTime();\n     }\n-    long currentTime = cacheTimes.currentTime();\n-    cacheTimes.next();\n-    return currentTime;\n+    throw new IOException(\"no more data\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMzQwNA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380033404", "bodyText": "could you ensure hasMoreData() ?", "author": "qiaojialin", "createdAt": "2020-02-17T08:14:18Z", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (cacheTimes == null || !cacheTimes.hasMoreData()) {\n+      cacheTimes = operatorNode.next();\n+    }\n+    long currentTime = cacheTimes.currentTime();", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\nindex 9f5440db6..e48038c01 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n\n@@ -54,17 +55,30 @@ public class EngineTimeGenerator implements TimeGenerator {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n+    if (hasCache) {\n+      return true;\n+    }\n+    if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+      cacheTimes.next();\n+      return true;\n+    }\n+    while (operatorNode.hasNextTimeColumn()) {\n+      cacheTimes = operatorNode.nextTimeColumn();\n+      if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+        hasCache = true;\n+        break;\n+      }\n+    }\n+    return hasCache;\n   }\n \n   @Override\n   public long next() throws IOException {\n-    if (cacheTimes == null || !cacheTimes.hasMoreData()) {\n-      cacheTimes = operatorNode.next();\n+    if (hasCache || hasNext()) {\n+      hasCache = false;\n+      return cacheTimes.currentTime();\n     }\n-    long currentTime = cacheTimes.currentTime();\n-    cacheTimes.next();\n-    return currentTime;\n+    throw new IOException(\"no more data\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMzg4MA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380033880", "bodyText": "how about support a nextTimes method?", "author": "qiaojialin", "createdAt": "2020-02-17T08:15:30Z", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +54,17 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExMzc4NA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380113784", "bodyText": "no, that would make AndNode and OrNode hard to write", "author": "liutaohua", "createdAt": "2020-02-17T10:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzMzg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\nindex 9f5440db6..e48038c01 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n\n@@ -54,17 +55,30 @@ public class EngineTimeGenerator implements TimeGenerator {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n+    if (hasCache) {\n+      return true;\n+    }\n+    if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+      cacheTimes.next();\n+      return true;\n+    }\n+    while (operatorNode.hasNextTimeColumn()) {\n+      cacheTimes = operatorNode.nextTimeColumn();\n+      if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+        hasCache = true;\n+        break;\n+      }\n+    }\n+    return hasCache;\n   }\n \n   @Override\n   public long next() throws IOException {\n-    if (cacheTimes == null || !cacheTimes.hasMoreData()) {\n-      cacheTimes = operatorNode.next();\n+    if (hasCache || hasNext()) {\n+      hasCache = false;\n+      return cacheTimes.currentTime();\n     }\n-    long currentTime = cacheTimes.currentTime();\n-    cacheTimes.next();\n-    return currentTime;\n+    throw new IOException(\"no more data\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzNDY3MA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380034670", "bodyText": "remove this line", "author": "qiaojialin", "createdAt": "2020-02-17T08:17:34Z", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBEngineTimeGeneratorIT.java", "diffHunk": "@@ -249,7 +249,7 @@ public void testMultiSeriesWithValueFilterAndTimeFilter()\n       long time = timeGenerator.next();\n       assertTrue(satisfyTimeFilter2(time));\n       cnt++;\n-      // System.out.println(\"cnt =\" + cnt + \"; time = \" + time);\n+//       System.out.println(\"cnt =\" + cnt + \"; time = \" + time);", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ad26a2328e4ba14e7bf0f80e4d816252a03fe4d6", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/integration/IoTDBEngineTimeGeneratorIT.java b/server/src/test/java/org/apache/iotdb/db/integration/IoTDBEngineTimeGeneratorIT.java\nindex 333bd7b4f..36cfcae69 100644\n--- a/server/src/test/java/org/apache/iotdb/db/integration/IoTDBEngineTimeGeneratorIT.java\n+++ b/server/src/test/java/org/apache/iotdb/db/integration/IoTDBEngineTimeGeneratorIT.java\n\n@@ -242,7 +242,7 @@ public class IoTDBEngineTimeGeneratorIT {\n     IExpression andExpression = BinaryExpression\n         .and(singleSeriesExpression1, singleSeriesExpression2);\n \n-    EngineTimeGenerator timeGenerator = new EngineTimeGenerator(andExpression,\n+    ServerTimeGenerator timeGenerator = new ServerTimeGenerator(andExpression,\n         TEST_QUERY_CONTEXT);\n     int cnt = 0;\n     while (timeGenerator.hasNext()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzNTI1Mw==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380035253", "bodyText": "the same as TimestampGenerator", "author": "qiaojialin", "createdAt": "2020-02-17T08:19:07Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/TimeGeneratorImpl.java", "diffHunk": "@@ -65,12 +68,17 @@ public TimeGeneratorImpl(IExpression iexpression, IChunkLoader chunkLoader,\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (cacheTimes == null || !cacheTimes.hasMoreData()) {", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee12a4149f05aebba4c7e8a5780cbf85e6a8085c", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/TimeGeneratorImpl.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/TimeGeneratorImpl.java\nindex 0687bfd4d..54cde9d22 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/TimeGeneratorImpl.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/TimeGeneratorImpl.java\n\n@@ -68,17 +69,32 @@ public class TimeGeneratorImpl implements TimeGenerator {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return (cacheTimes != null && cacheTimes.hasMoreData()) || operatorNode.hasNext();\n+    if (hasCache) {\n+      return true;\n+    }\n+    if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+      return true;\n+    }\n+    while (operatorNode.hasNext()) {\n+      cacheTimes = operatorNode.next();\n+      if (!cacheTimes.hasMoreData()) {\n+        continue;\n+      }\n+      hasCache = true;\n+      break;\n+    }\n+    return hasCache;\n   }\n \n   @Override\n   public long next() throws IOException {\n-    if (cacheTimes == null || !cacheTimes.hasMoreData()) {\n-      cacheTimes = operatorNode.next();\n+    if (hasCache) {\n+      long currentTime = cacheTimes.currentTime();\n+      cacheTimes.next();\n+      hasCache = cacheTimes.hasMoreData();\n+      return currentTime;\n     }\n-    long currentTime = cacheTimes.currentTime();\n-    cacheTimes.next();\n-    return currentTime;\n+    throw new IOException(\"no more data\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzODQzMQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380038431", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TimeSeries next() throws IOException {\n          \n          \n            \n              public TimeSeries nextTimes() throws IOException {", "author": "qiaojialin", "createdAt": "2020-02-17T08:26:59Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/LeafNode.java", "diffHunk": "@@ -20,44 +20,28 @@\n \n import java.io.IOException;\n import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n import org.apache.iotdb.tsfile.read.reader.series.AbstractFileSeriesReader;\n \n public class LeafNode implements Node {\n \n   private AbstractFileSeriesReader reader;\n \n-  private BatchData data = null;\n-\n-  private boolean gotData = false;\n+  private BatchData cacheData;\n \n   public LeafNode(AbstractFileSeriesReader reader) {\n     this.reader = reader;\n   }\n \n   @Override\n   public boolean hasNext() throws IOException {\n-\n-    if (gotData) {\n-      data.next();\n-      gotData = false;\n-    }\n-\n-    if (data == null || !data.hasCurrent()) {\n-      if (reader.hasNextBatch()) {\n-        data = reader.nextBatch();\n-      } else {\n-        return false;\n-      }\n-    }\n-\n-    return data.hasCurrent();\n+    return reader.hasNextBatch();\n   }\n \n   @Override\n-  public long next() {\n-    long time = data.currentTime();\n-    gotData = true;\n-    return time;\n+  public TimeSeries next() throws IOException {", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExNDMwOQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380114309", "bodyText": "that Node Interface was rename to nextTimeColumn", "author": "liutaohua", "createdAt": "2020-02-17T10:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzODQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee12a4149f05aebba4c7e8a5780cbf85e6a8085c", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/LeafNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/LeafNode.java\nindex 594522b76..5fc923d3e 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/LeafNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/LeafNode.java\n\n@@ -19,6 +19,7 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import java.sql.Time;\n import org.apache.iotdb.tsfile.read.common.BatchData;\n import org.apache.iotdb.tsfile.read.common.TimeSeries;\n import org.apache.iotdb.tsfile.read.reader.series.AbstractFileSeriesReader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzODY2NQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380038665", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              TimeSeries next() throws IOException;\n          \n          \n            \n              TimeSeries nextTimeColumn() throws IOException;", "author": "qiaojialin", "createdAt": "2020-02-17T08:27:31Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java", "diffHunk": "@@ -19,12 +19,13 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public interface Node {\n \n   boolean hasNext() throws IOException;\n \n-  long next() throws IOException;\n+  TimeSeries next() throws IOException;", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java\nindex cc6a32604..aa8c8506b 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java\n\n@@ -19,13 +19,13 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public interface Node {\n \n-  boolean hasNext() throws IOException;\n+  boolean hasNextTimeColumn() throws IOException;\n \n-  TimeSeries next() throws IOException;\n+  TimeColumn nextTimeColumn() throws IOException;\n \n   NodeType getType();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzODczMQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380038731", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              boolean hasNext() throws IOException;\n          \n          \n            \n              boolean hasNextTimeColumn() throws IOException;", "author": "qiaojialin", "createdAt": "2020-02-17T08:27:41Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java", "diffHunk": "@@ -19,12 +19,13 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public interface Node {\n \n   boolean hasNext() throws IOException;", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java\nindex cc6a32604..aa8c8506b 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/Node.java\n\n@@ -19,13 +19,13 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public interface Node {\n \n-  boolean hasNext() throws IOException;\n+  boolean hasNextTimeColumn() throws IOException;\n \n-  TimeSeries next() throws IOException;\n+  TimeColumn nextTimeColumn() throws IOException;\n \n   NodeType getType();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzOTIzMw==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380039233", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private TimeSeries cachedValue;\n          \n          \n            \n              private TimeSeries cachedTimeColumn;", "author": "qiaojialin", "createdAt": "2020-02-17T08:28:53Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -19,19 +19,24 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public class AndNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private long cachedValue;\n+  private TimeSeries cachedValue;", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\nindex 10acd014f..8fc60c8a5 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n\n@@ -19,19 +19,19 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class AndNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private TimeSeries cachedValue;\n+  private TimeColumn cachedValue;\n   private boolean hasCachedValue;\n \n \n-  private TimeSeries leftPageData;\n-  private TimeSeries rightPageData;\n+  private TimeColumn leftTimeColumn;\n+  private TimeColumn rightTimeColumn;\n \n   /**\n    * Constructor of AndNode.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzOTM1NA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380039354", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private TimeSeries leftPageData;\n          \n          \n            \n              private TimeSeries leftTimeColumn;", "author": "qiaojialin", "createdAt": "2020-02-17T08:29:11Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -19,19 +19,24 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public class AndNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private long cachedValue;\n+  private TimeSeries cachedValue;\n   private boolean hasCachedValue;\n \n+\n+  private TimeSeries leftPageData;", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\nindex 10acd014f..8fc60c8a5 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n\n@@ -19,19 +19,19 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class AndNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private TimeSeries cachedValue;\n+  private TimeColumn cachedValue;\n   private boolean hasCachedValue;\n \n \n-  private TimeSeries leftPageData;\n-  private TimeSeries rightPageData;\n+  private TimeColumn leftTimeColumn;\n+  private TimeColumn rightTimeColumn;\n \n   /**\n    * Constructor of AndNode.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzOTQzNA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380039434", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private TimeSeries rightPageData;\n          \n          \n            \n              private TimeSeries rightTimeColumn;", "author": "qiaojialin", "createdAt": "2020-02-17T08:29:24Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -19,19 +19,24 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeSeries;\n \n public class AndNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private long cachedValue;\n+  private TimeSeries cachedValue;\n   private boolean hasCachedValue;\n \n+\n+  private TimeSeries leftPageData;\n+  private TimeSeries rightPageData;", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\nindex 10acd014f..8fc60c8a5 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n\n@@ -19,19 +19,19 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n-import org.apache.iotdb.tsfile.read.common.TimeSeries;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class AndNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private TimeSeries cachedValue;\n+  private TimeColumn cachedValue;\n   private boolean hasCachedValue;\n \n \n-  private TimeSeries leftPageData;\n-  private TimeSeries rightPageData;\n+  private TimeColumn leftTimeColumn;\n+  private TimeColumn rightTimeColumn;\n \n   /**\n    * Constructor of AndNode.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0MDQ0OQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380040449", "bodyText": "add javadoc: no more data in cache and has more data in child", "author": "qiaojialin", "createdAt": "2020-02-17T08:31:46Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -45,42 +50,78 @@ public boolean hasNext() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedValue = new TimeSeries(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftPageData.hasMoreData() && rightPageData.hasMoreData()) {\n+      long leftValue = leftPageData.currentTime();\n+      long rightValue = rightPageData.currentTime();\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedValue.add(leftValue);\n+        leftPageData.next();\n+        rightPageData.next();\n+      } else if (leftValue > rightValue) {\n+        rightPageData.next();\n+      } else { // leftValue < rightValue\n+        leftPageData.next();\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {\n+        if (hasCachedValue) {\n+          break;\n         }\n       }\n+      /*\n+       *  [1,2,3,4,5]   <-   reFill data and cal stopBatchTime\n+       *             [6,7,8,9,10,11]\n+       */\n+      fillLeftData();\n+      fillRightData();\n+      stopBatchTime = getStopBatchTime();\n     }\n-    return false;\n+    return hasCachedValue;\n+  }\n+\n+  private long getStopBatchTime() {\n+    long rMax = leftPageData.getLastTime();\n+    long lMax = rightPageData.getLastTime();\n+    return rMax > lMax ? lMax : rMax;\n+  }\n+\n+  private void fillRightData() throws IOException {\n+    if (hasMoreData(rightPageData, rightChild)) {\n+      rightPageData = rightChild.next();\n+    }\n+  }\n+\n+  private void fillLeftData() throws IOException {\n+    if (hasMoreData(leftPageData, leftChild)) {\n+      leftPageData = leftChild.next();\n+    }\n+  }\n+\n+  private boolean hasMoreData(TimeSeries timeSeries, Node child) throws IOException {", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee12a4149f05aebba4c7e8a5780cbf85e6a8085c", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\nindex 10acd014f..94649db91 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n\n@@ -91,8 +91,14 @@ public class AndNode implements Node {\n   }\n \n   private long getStopBatchTime() {\n-    long rMax = leftPageData.getLastTime();\n-    long lMax = rightPageData.getLastTime();\n+    long rMax = Long.MAX_VALUE;\n+    long lMax = Long.MAX_VALUE;\n+    if (leftPageData.hasMoreData()) {\n+      lMax = leftPageData.getLastTime();\n+    }\n+    if (rightPageData.hasMoreData()) {\n+      rMax = rightPageData.getLastTime();\n+    }\n     return rMax > lMax ? lMax : rMax;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjA2OQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380046069", "bodyText": "this seems to be update again and again, consider the following case:\nleft child:  [1,2,3]  [4,5,6] [7,8,9]...\nright child: [1,2,3,4]  [5,6,7,8] [9,10,11]...\nI suggest to stop at 4 in this next(), only call one getStopBatchTime at the beginning.", "author": "qiaojialin", "createdAt": "2020-02-17T08:44:53Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -45,42 +50,78 @@ public boolean hasNext() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedValue = new TimeSeries(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftPageData.hasMoreData() && rightPageData.hasMoreData()) {\n+      long leftValue = leftPageData.currentTime();\n+      long rightValue = rightPageData.currentTime();\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedValue.add(leftValue);\n+        leftPageData.next();\n+        rightPageData.next();\n+      } else if (leftValue > rightValue) {\n+        rightPageData.next();\n+      } else { // leftValue < rightValue\n+        leftPageData.next();\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {\n+        if (hasCachedValue) {\n+          break;\n         }\n       }\n+      /*\n+       *  [1,2,3,4,5]   <-   reFill data and cal stopBatchTime\n+       *             [6,7,8,9,10,11]\n+       */\n+      fillLeftData();\n+      fillRightData();\n+      stopBatchTime = getStopBatchTime();", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyODIxMQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380128211", "bodyText": "left child:[1,2,3] [4,5,6] [7,8,9]\nright child:[1,10]\nthat will load many page into memory", "author": "liutaohua", "createdAt": "2020-02-17T11:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMTQzNw==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380221437", "bodyText": "what about 1000 for each time ?", "author": "liutaohua", "createdAt": "2020-02-17T14:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee12a4149f05aebba4c7e8a5780cbf85e6a8085c", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\nindex 10acd014f..94649db91 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n\n@@ -91,8 +91,14 @@ public class AndNode implements Node {\n   }\n \n   private long getStopBatchTime() {\n-    long rMax = leftPageData.getLastTime();\n-    long lMax = rightPageData.getLastTime();\n+    long rMax = Long.MAX_VALUE;\n+    long lMax = Long.MAX_VALUE;\n+    if (leftPageData.hasMoreData()) {\n+      lMax = leftPageData.getLastTime();\n+    }\n+    if (rightPageData.hasMoreData()) {\n+      rMax = rightPageData.getLastTime();\n+    }\n     return rMax > lMax ? lMax : rMax;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjMwOA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380046308", "bodyText": "if stop time is 4, the time 5 seems could be cached at this round", "author": "qiaojialin", "createdAt": "2020-02-17T08:45:23Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -45,42 +50,78 @@ public boolean hasNext() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedValue = new TimeSeries(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftPageData.hasMoreData() && rightPageData.hasMoreData()) {\n+      long leftValue = leftPageData.currentTime();\n+      long rightValue = rightPageData.currentTime();\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedValue.add(leftValue);\n+        leftPageData.next();\n+        rightPageData.next();\n+      } else if (leftValue > rightValue) {\n+        rightPageData.next();\n+      } else { // leftValue < rightValue\n+        leftPageData.next();\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {", "originalCommit": "f932713089b92bdf869f7668ed835c3c3eb2daa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMTU0Ng==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380131546", "bodyText": "yes , it's bug ,i will fix", "author": "liutaohua", "createdAt": "2020-02-17T11:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0NjMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "ee12a4149f05aebba4c7e8a5780cbf85e6a8085c", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\nindex 10acd014f..94649db91 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n\n@@ -91,8 +91,14 @@ public class AndNode implements Node {\n   }\n \n   private long getStopBatchTime() {\n-    long rMax = leftPageData.getLastTime();\n-    long lMax = rightPageData.getLastTime();\n+    long rMax = Long.MAX_VALUE;\n+    long lMax = Long.MAX_VALUE;\n+    if (leftPageData.hasMoreData()) {\n+      lMax = leftPageData.getLastTime();\n+    }\n+    if (rightPageData.hasMoreData()) {\n+      rMax = rightPageData.getLastTime();\n+    }\n     return rMax > lMax ? lMax : rMax;\n   }\n \n"}}, {"oid": "ee12a4149f05aebba4c7e8a5780cbf85e6a8085c", "url": "https://github.com/apache/iotdb/commit/ee12a4149f05aebba4c7e8a5780cbf85e6a8085c", "message": "fix bug", "committedDate": "2020-02-17T10:10:31Z", "type": "commit"}, {"oid": "fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "url": "https://github.com/apache/iotdb/commit/fd8e0d08ff27c9f5a29d4e9dfea1e424ebd8c2c4", "message": "review change", "committedDate": "2020-02-17T10:37:04Z", "type": "commit"}, {"oid": "b8ce5d29df0de7c1e65b2757085a58fcf3c0ce4d", "url": "https://github.com/apache/iotdb/commit/b8ce5d29df0de7c1e65b2757085a58fcf3c0ce4d", "message": "Merge branch 'new_series_reader' of https://github.com/apache/incubator-iotdb into batch_time_generator\n\n\u0001 Conflicts:\n\u0001\ttsfile/src/test/java/org/apache/iotdb/tsfile/read/ReadTest.java", "committedDate": "2020-02-17T10:37:46Z", "type": "commit"}, {"oid": "4834efd207763ff04879c446d7b61c2b6d263751", "url": "https://github.com/apache/iotdb/commit/4834efd207763ff04879c446d7b61c2b6d263751", "message": "fix bug", "committedDate": "2020-02-17T10:50:06Z", "type": "commit"}, {"oid": "f1a49b29849b4d1856f314f48d444fe8e9da146c", "url": "https://github.com/apache/iotdb/commit/f1a49b29849b4d1856f314f48d444fe8e9da146c", "message": "add comments", "committedDate": "2020-02-17T10:58:06Z", "type": "commit"}, {"oid": "4728e702b8c8b92f31199f71a498bc506369de2c", "url": "https://github.com/apache/iotdb/commit/4728e702b8c8b92f31199f71a498bc506369de2c", "message": "Optimize AndNode", "committedDate": "2020-02-17T11:20:04Z", "type": "commit"}, {"oid": "61ba9dfeafb51c8425d5636331c3de7ff719224f", "url": "https://github.com/apache/iotdb/commit/61ba9dfeafb51c8425d5636331c3de7ff719224f", "message": "revert", "committedDate": "2020-02-17T11:25:20Z", "type": "commit"}, {"oid": "e7cca8a346709e02dec6ffeb38aa4daef019d5c0", "url": "https://github.com/apache/iotdb/commit/e7cca8a346709e02dec6ffeb38aa4daef019d5c0", "message": "fix stop time bug", "committedDate": "2020-02-17T11:35:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMDg1Nw==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380130857", "bodyText": "This unused import could be removed", "author": "samperson1997", "createdAt": "2020-02-17T11:34:00Z", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "diffHunk": "@@ -25,6 +25,7 @@\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.control.QueryResourceManager;\n+import org.apache.iotdb.db.query.reader.series.SeriesRawDataBatchReader;\n import org.apache.iotdb.db.query.reader.series.SeriesRawDataPointReader;", "originalCommit": "61ba9dfeafb51c8425d5636331c3de7ff719224f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzOTMyNA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380139324", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-02-17T11:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMDg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0017c2e64a8d8632261c5a8115611bbc60a24eef", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java\nindex 4a9889cf1..4f81f5117 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java\n\n@@ -19,6 +19,8 @@\n \n package org.apache.iotdb.db.query.timegenerator;\n \n+import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n+\n import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.path.PathException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMTQ4MA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380131480", "bodyText": "How about changing to getTimeColumn, as all the naming in this method", "author": "samperson1997", "createdAt": "2020-02-17T11:35:33Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java", "diffHunk": "@@ -515,6 +515,14 @@ public long getMaxTimestamp() {\n     return getTimeByIndex(length() - 1);\n   }\n \n+  public TimeColumn getTimeSeries() {", "originalCommit": "61ba9dfeafb51c8425d5636331c3de7ff719224f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzOTM4Mw==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380139383", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-02-17T11:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "0017c2e64a8d8632261c5a8115611bbc60a24eef", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java\nindex d1c3f6522..eb483acc9 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java\n\n@@ -515,7 +515,7 @@ public class BatchData implements Serializable {\n     return getTimeByIndex(length() - 1);\n   }\n \n-  public TimeColumn getTimeSeries() {\n+  public TimeColumn getTimeColumn() {\n     TimeColumn timeSeries = new TimeColumn(length());\n     for (int i = 0; i < length(); i++) {\n       timeSeries.add(getTimeByIndex(i));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMjA4OQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380132089", "bodyText": "This constructor is not used?", "author": "samperson1997", "createdAt": "2020-02-17T11:36:51Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.tsfile.read.common;\n+\n+\n+public class TimeColumn {\n+\n+  private long[] times;\n+\n+  private int size;\n+\n+  private int cur;\n+\n+\n+  public TimeColumn(int initSize) {\n+    times = new long[initSize];\n+  }\n+\n+\n+  public TimeColumn(long[] times) {", "originalCommit": "61ba9dfeafb51c8425d5636331c3de7ff719224f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzODMwMw==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380138303", "bodyText": "not used , it can used for 0 copy batchdata's timeRet.", "author": "liutaohua", "createdAt": "2020-02-17T11:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMjA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "501e4fb9ff17be9bf15a34c925dbe46e530376ff", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java\nindex 20c06e595..4626f0662 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeColumn.java\n\n@@ -50,7 +50,7 @@ public class TimeColumn {\n     return times;\n   }\n \n-  public boolean hasMoreData() {\n+  public boolean hasCurrent() {\n     return size > 0 && cur < size;\n   }\n \n"}}, {"oid": "0017c2e64a8d8632261c5a8115611bbc60a24eef", "url": "https://github.com/apache/iotdb/commit/0017c2e64a8d8632261c5a8115611bbc60a24eef", "message": "rename getTimeSeries", "committedDate": "2020-02-17T11:55:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0OTMzNw==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380149337", "bodyText": "Actually, I can't get the meaning of AbstractNodeConstructor. Why we need constructNotSeriesNode() and construct() these two methods. These two methods call each other iteratively. I think we can combine these two to reduce the meaningless function call costs.", "author": "JackieTien97", "createdAt": "2020-02-17T12:17:43Z", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "diffHunk": "@@ -19,22 +19,22 @@\n \n package org.apache.iotdb.db.query.timegenerator;\n \n+import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n+\n import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.path.PathException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.control.QueryResourceManager;\n-import org.apache.iotdb.db.query.reader.series.SeriesRawDataPointReader;\n+import org.apache.iotdb.db.query.reader.series.SeriesRawDataBatchReader;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.expression.IExpression;\n import org.apache.iotdb.tsfile.read.expression.impl.SingleSeriesExpression;\n import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n import org.apache.iotdb.tsfile.read.query.timegenerator.node.Node;\n \n-import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n-\n public class EngineNodeConstructor extends AbstractNodeConstructor {", "originalCommit": "0017c2e64a8d8632261c5a8115611bbc60a24eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4MDYwMQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380180601", "bodyText": "yes...", "author": "qiaojialin", "createdAt": "2020-02-17T13:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0OTMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwOTA1MQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380209051", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-02-17T14:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0OTMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMTU1NQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380221555", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-02-17T14:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0OTMzNw=="}], "type": "inlineReview", "revised_code": {"commit": "501e4fb9ff17be9bf15a34c925dbe46e530376ff", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java\nindex 4f81f5117..882f6d5a7 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java\n\n@@ -19,6 +19,8 @@\n \n package org.apache.iotdb.db.query.timegenerator;\n \n+import static org.apache.iotdb.tsfile.read.expression.ExpressionType.AND;\n+import static org.apache.iotdb.tsfile.read.expression.ExpressionType.OR;\n import static org.apache.iotdb.tsfile.read.expression.ExpressionType.SERIES;\n \n import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MTEyOQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380151129", "bodyText": "I think the logic here should be same as TimeGeneratorImpl in tsfile, hasCache should not be set to false directly. It may be better to be set to cacheTimes.hasNext();", "author": "JackieTien97", "createdAt": "2020-02-17T12:21:51Z", "path": "server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java", "diffHunk": "@@ -51,12 +55,32 @@ private void initNode(QueryContext context) throws StorageEngineException {\n \n   @Override\n   public boolean hasNext() throws IOException {\n-    return operatorNode.hasNext();\n+    if (hasCache) {\n+      return true;\n+    }\n+    if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+      hasCache = true;\n+      return true;\n+    }\n+    while (operatorNode.hasNextTimeColumn()) {\n+      cacheTimes = operatorNode.nextTimeColumn();\n+      if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+        hasCache = true;\n+        break;\n+      }\n+    }\n+    return hasCache;\n   }\n \n   @Override\n   public long next() throws IOException {\n-    return operatorNode.next();\n+    if (hasCache || hasNext()) {\n+      hasCache = false;\n+      long currentTime = cacheTimes.currentTime();\n+      cacheTimes.next();\n+      return currentTime;\n+    }\n+    throw new IOException(\"no more data\");", "originalCommit": "0017c2e64a8d8632261c5a8115611bbc60a24eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMDcwNQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380220705", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-02-17T14:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MTEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "501e4fb9ff17be9bf15a34c925dbe46e530376ff", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\nindex e215c2d8e..50c315f42 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineTimeGenerator.java\n\n@@ -58,13 +58,10 @@ public class EngineTimeGenerator implements TimeGenerator {\n     if (hasCache) {\n       return true;\n     }\n-    if (cacheTimes != null && cacheTimes.hasMoreData()) {\n-      hasCache = true;\n-      return true;\n-    }\n+\n     while (operatorNode.hasNextTimeColumn()) {\n       cacheTimes = operatorNode.nextTimeColumn();\n-      if (cacheTimes != null && cacheTimes.hasMoreData()) {\n+      if (cacheTimes != null && cacheTimes.hasCurrent()) {\n         hasCache = true;\n         break;\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTU4Mg==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380155582", "bodyText": "Here can be replaced by Math.min(); It will be more readable", "author": "JackieTien97", "createdAt": "2020-02-17T12:32:04Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +46,90 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (leftTimeColumn.hasMoreData() && rightTimeColumn.hasMoreData()) {\n+      long leftValue = leftTimeColumn.currentTime();\n+      long rightValue = rightTimeColumn.currentTime();\n+\n+      if (leftValue == rightValue) {\n+        this.hasCachedValue = true;\n+        this.cachedTimeColumn.add(leftValue);\n+        leftTimeColumn.next();\n+        rightTimeColumn.next();\n+      } else if (leftValue > rightValue) {\n+        rightTimeColumn.next();\n+      } else { // leftValue < rightValue\n+        leftTimeColumn.next();\n+      }\n+\n+      if (leftValue == stopBatchTime || rightValue == stopBatchTime) {\n+        if (hasCachedValue) {\n+          break;\n         }\n       }\n+      /*\n+       *  [1,2,3,4,5]   <-   reFill data and cal stopBatchTime\n+       *             [6,7,8,9,10,11]\n+       */\n+      fillLeftData();\n+      fillRightData();\n+      stopBatchTime = getStopBatchTime();\n+    }\n+    return hasCachedValue;\n+  }\n+\n+  private long getStopBatchTime() {\n+    long rMax = Long.MAX_VALUE;\n+    long lMax = Long.MAX_VALUE;\n+    if (leftTimeColumn.hasMoreData()) {\n+      lMax = leftTimeColumn.getLastTime();\n     }\n-    return false;\n+    if (rightTimeColumn.hasMoreData()) {\n+      rMax = rightTimeColumn.getLastTime();\n+    }\n+    return rMax > lMax ? lMax : rMax;", "originalCommit": "0017c2e64a8d8632261c5a8115611bbc60a24eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NzMzMA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380177330", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-02-17T13:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "501e4fb9ff17be9bf15a34c925dbe46e530376ff", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\nindex 16ec05741..ee9447529 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n\n@@ -54,13 +58,8 @@ public class AndNode implements Node {\n     //fill data\n     fillLeftData();\n     fillRightData();\n-    /*\n-     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n-     *  [1,2,3,4,5,6]\n-     */\n-    long stopBatchTime = getStopBatchTime();\n \n-    while (leftTimeColumn.hasMoreData() && rightTimeColumn.hasMoreData()) {\n+    while (leftTimeColumn.hasCurrent() && rightTimeColumn.hasCurrent()) {\n       long leftValue = leftTimeColumn.currentTime();\n       long rightValue = rightTimeColumn.currentTime();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Nzc4MA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380157780", "bodyText": "Why we need this field. Why not set a fixed size for cachedTimeColumn", "author": "JackieTien97", "createdAt": "2020-02-17T12:37:05Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +46,90 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);\n+    //fill data\n+    fillLeftData();\n+    fillRightData();\n+    /*\n+     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n+     *  [1,2,3,4,5,6]\n+     */\n+    long stopBatchTime = getStopBatchTime();", "originalCommit": "0017c2e64a8d8632261c5a8115611bbc60a24eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4MDkxMg==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380180912", "bodyText": "this is similar to SeriesReader.getOverlappedPage..", "author": "qiaojialin", "createdAt": "2020-02-17T13:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Nzc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4Mzc2MQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380183761", "bodyText": "I think @JackieTien97  has a point here. It should be aligned with limit or fetchSize, but TsFile doesn't have that in mind. Maybe we should set a big value", "author": "liutaohua", "createdAt": "2020-02-17T13:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Nzc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMDgwMA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380220800", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-02-17T14:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Nzc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "501e4fb9ff17be9bf15a34c925dbe46e530376ff", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\nindex 16ec05741..ee9447529 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n\n@@ -54,13 +58,8 @@ public class AndNode implements Node {\n     //fill data\n     fillLeftData();\n     fillRightData();\n-    /*\n-     *  [1,2,3,4,5]   <-   that was stopBatchTime mean\n-     *  [1,2,3,4,5,6]\n-     */\n-    long stopBatchTime = getStopBatchTime();\n \n-    while (leftTimeColumn.hasMoreData() && rightTimeColumn.hasMoreData()) {\n+    while (leftTimeColumn.hasCurrent() && rightTimeColumn.hasCurrent()) {\n       long leftValue = leftTimeColumn.currentTime();\n       long rightValue = rightTimeColumn.currentTime();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTcxMQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380169711", "bodyText": "use Math.max()", "author": "JackieTien97", "createdAt": "2020-02-17T13:04:02Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "diffHunk": "@@ -19,80 +19,119 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n   private Node leftChild;\n   private Node rightChild;\n \n-  private boolean hasCachedLeftValue;\n-  private long cachedLeftValue;\n-  private boolean hasCachedRightValue;\n-  private long cachedRightValue;\n+  private TimeColumn leftTimes;\n+  private TimeColumn rightTimes;\n+\n+  private TimeColumn cachedValue;\n+  private boolean hasCachedValue;\n+\n \n   public OrNode(Node leftChild, Node rightChild) {\n     this.leftChild = leftChild;\n     this.rightChild = rightChild;\n-    this.hasCachedLeftValue = false;\n-    this.hasCachedRightValue = false;\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n-    if (hasCachedLeftValue || hasCachedRightValue) {\n+  public boolean hasNextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n       return true;\n     }\n-    return leftChild.hasNext() || rightChild.hasNext();\n-  }\n \n-  private boolean hasLeftValue() throws IOException {\n-    return hasCachedLeftValue || leftChild.hasNext();\n+    return leftChild.hasNextTimeColumn() || rightChild.hasNextTimeColumn()\n+        || leftTimes.hasMoreData() || rightTimes.hasMoreData();\n   }\n \n-  private long getLeftValue() throws IOException {\n-    if (hasCachedLeftValue) {\n-      hasCachedLeftValue = false;\n-      return cachedLeftValue;\n+  @Override\n+  public TimeColumn nextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n+      hasCachedValue = false;\n+      return cachedValue;\n     }\n-    return leftChild.next();\n-  }\n-\n-  private boolean hasRightValue() throws IOException {\n-    return hasCachedRightValue || rightChild.hasNext();\n-  }\n+    hasCachedValue = false;\n+    cachedValue = new TimeColumn(1000);\n \n-  private long getRightValue() throws IOException {\n-    if (hasCachedRightValue) {\n-      hasCachedRightValue = false;\n-      return cachedRightValue;\n+    if (!hasLeftValue() && leftChild.hasNextTimeColumn()) {\n+      leftTimes = leftChild.nextTimeColumn();\n+    }\n+    if (!hasRightValue() && rightChild.hasNextTimeColumn()) {\n+      rightTimes = rightChild.nextTimeColumn();\n     }\n-    return rightChild.next();\n-  }\n \n-  @Override\n-  public long next() throws IOException {\n     if (hasLeftValue() && !hasRightValue()) {\n-      return getLeftValue();\n+      return leftTimes;\n     } else if (!hasLeftValue() && hasRightValue()) {\n-      return getRightValue();\n-    } else if (hasLeftValue() && hasRightValue()) {\n-      long leftValue = getLeftValue();\n-      long rightValue = getRightValue();\n+      return rightTimes;\n+    }\n+\n+    long stopBatchTime = getStopBatchTime();\n+\n+    while (hasLeftValue() && hasRightValue()) {\n+      long leftValue = leftTimes.currentTime();\n+      long rightValue = rightTimes.currentTime();\n+\n       if (leftValue < rightValue) {\n-        hasCachedRightValue = true;\n-        cachedRightValue = rightValue;\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedValue.add(leftValue);\n+        leftTimes.next();\n+        if (!leftTimes.hasMoreData() && leftChild.hasNextTimeColumn()) {\n+          leftTimes = leftChild.nextTimeColumn();\n+        }\n       } else if (leftValue > rightValue) {\n-        hasCachedLeftValue = true;\n-        cachedLeftValue = leftValue;\n-        return rightValue;\n+        hasCachedValue = true;\n+        cachedValue.add(rightValue);\n+        rightTimes.next();\n+        if (!rightTimes.hasMoreData() && rightChild.hasNextTimeColumn()) {\n+          rightTimes = rightChild.nextTimeColumn();\n+        }\n       } else {\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedValue.add(leftValue);\n+        leftTimes.next();\n+        rightTimes.next();\n+        if (!leftTimes.hasMoreData() && leftChild.hasNextTimeColumn()) {\n+          leftTimes = leftChild.nextTimeColumn();\n+        }\n+        if (!rightTimes.hasMoreData() && rightChild.hasNextTimeColumn()) {\n+          rightTimes = rightChild.nextTimeColumn();\n+        }\n+      }\n+\n+      if (leftValue > stopBatchTime && rightValue > stopBatchTime) {\n+        break;\n       }\n     }\n-    return -1;\n+    hasCachedValue = false;\n+    return cachedValue;\n+  }\n+\n+  private long getStopBatchTime() {\n+    long rMax = Long.MAX_VALUE;\n+    long lMax = Long.MAX_VALUE;\n+    if (leftTimes.hasMoreData()) {\n+      lMax = leftTimes.getLastTime();\n+    }\n+    if (rightTimes.hasMoreData()) {\n+      rMax = rightTimes.getLastTime();\n+    }\n+    return rMax > lMax ? lMax : rMax;", "originalCommit": "0017c2e64a8d8632261c5a8115611bbc60a24eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NzQzOQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380177439", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-02-17T13:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "501e4fb9ff17be9bf15a34c925dbe46e530376ff", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java\nindex a2c2ebc17..98f9a8bf1 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java\n\n@@ -19,17 +19,21 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n+  private final int fetchSize = TSFileDescriptor.getInstance().getConfig()\n+      .getFetchSizeOfTimeGenerator();\n+\n   private Node leftChild;\n   private Node rightChild;\n \n-  private TimeColumn leftTimes;\n-  private TimeColumn rightTimes;\n+  private TimeColumn leftTimeColumn;\n+  private TimeColumn rightTimeColumn;\n \n-  private TimeColumn cachedValue;\n+  private TimeColumn cachedTimeColumn;\n   private boolean hasCachedValue;\n \n \n"}}, {"oid": "501e4fb9ff17be9bf15a34c925dbe46e530376ff", "url": "https://github.com/apache/iotdb/commit/501e4fb9ff17be9bf15a34c925dbe46e530376ff", "message": "del AbstractNodeConstructor and add fetchSize config", "committedDate": "2020-02-17T14:43:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwOTM0MA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380409340", "bodyText": "This magic number can be replaced by a constant.", "author": "JackieTien97", "createdAt": "2020-02-18T00:48:16Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java", "diffHunk": "@@ -41,46 +50,68 @@ public AndNode(Node leftChild, Node rightChild) {\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n+  public boolean hasNextTimeColumn() throws IOException {\n     if (hasCachedValue) {\n       return true;\n     }\n-    if (leftChild.hasNext() && rightChild.hasNext()) {\n-      long leftValue = leftChild.next();\n-      long rightValue = rightChild.next();\n-      while (true) {\n-        if (leftValue == rightValue) {\n-          this.hasCachedValue = true;\n-          this.cachedValue = leftValue;\n-          return true;\n-        } else if (leftValue > rightValue) {\n-          if (rightChild.hasNext()) {\n-            rightValue = rightChild.next();\n-          } else {\n-            return false;\n-          }\n-        } else { // leftValue < rightValue\n-          if (leftChild.hasNext()) {\n-            leftValue = leftChild.next();\n-          } else {\n-            return false;\n-          }\n+    cachedTimeColumn = new TimeColumn(1000);", "originalCommit": "501e4fb9ff17be9bf15a34c925dbe46e530376ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyMjAxOA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380422018", "bodyText": "yes ,  maybe can use fetchSize", "author": "liutaohua", "createdAt": "2020-02-18T01:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwOTM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "2aeb7698db38f407e891d9b17740f01d7b305057", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\nindex ee9447529..e08c31e42 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/AndNode.java\n\n@@ -54,10 +54,10 @@ public class AndNode implements Node {\n     if (hasCachedValue) {\n       return true;\n     }\n-    cachedTimeColumn = new TimeColumn(1000);\n+    cachedTimeColumn = new TimeColumn(fetchSize);\n     //fill data\n-    fillLeftData();\n-    fillRightData();\n+    fillLeftCache();\n+    fillRightCache();\n \n     while (leftTimeColumn.hasCurrent() && rightTimeColumn.hasCurrent()) {\n       long leftValue = leftTimeColumn.currentTime();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwOTU1Ng==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380409556", "bodyText": "The same magic number here. You can use a constant and put it into Node.java", "author": "JackieTien97", "createdAt": "2020-02-18T00:49:36Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "diffHunk": "@@ -19,80 +19,109 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n+  private final int fetchSize = TSFileDescriptor.getInstance().getConfig()\n+      .getFetchSizeOfTimeGenerator();\n+\n   private Node leftChild;\n   private Node rightChild;\n \n-  private boolean hasCachedLeftValue;\n-  private long cachedLeftValue;\n-  private boolean hasCachedRightValue;\n-  private long cachedRightValue;\n+  private TimeColumn leftTimeColumn;\n+  private TimeColumn rightTimeColumn;\n+\n+  private TimeColumn cachedTimeColumn;\n+  private boolean hasCachedValue;\n+\n \n   public OrNode(Node leftChild, Node rightChild) {\n     this.leftChild = leftChild;\n     this.rightChild = rightChild;\n-    this.hasCachedLeftValue = false;\n-    this.hasCachedRightValue = false;\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n-    if (hasCachedLeftValue || hasCachedRightValue) {\n+  public boolean hasNextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n       return true;\n     }\n-    return leftChild.hasNext() || rightChild.hasNext();\n-  }\n \n-  private boolean hasLeftValue() throws IOException {\n-    return hasCachedLeftValue || leftChild.hasNext();\n+    return leftChild.hasNextTimeColumn() || rightChild.hasNextTimeColumn()\n+        || leftTimeColumn.hasCurrent() || rightTimeColumn.hasCurrent();\n   }\n \n-  private long getLeftValue() throws IOException {\n-    if (hasCachedLeftValue) {\n-      hasCachedLeftValue = false;\n-      return cachedLeftValue;\n+  @Override\n+  public TimeColumn nextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n+      hasCachedValue = false;\n+      return cachedTimeColumn;\n     }\n-    return leftChild.next();\n-  }\n+    hasCachedValue = false;\n+    cachedTimeColumn = new TimeColumn(1000);", "originalCommit": "501e4fb9ff17be9bf15a34c925dbe46e530376ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyMjAzNA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380422034", "bodyText": "done, replace to fetchSize", "author": "liutaohua", "createdAt": "2020-02-18T01:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwOTU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2aeb7698db38f407e891d9b17740f01d7b305057", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java\nindex 98f9a8bf1..5c9edc88f 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java\n\n@@ -59,7 +59,7 @@ public class OrNode implements Node {\n       return cachedTimeColumn;\n     }\n     hasCachedValue = false;\n-    cachedTimeColumn = new TimeColumn(1000);\n+    cachedTimeColumn = new TimeColumn(fetchSize);\n \n     if (!hasLeftValue() && leftChild.hasNextTimeColumn()) {\n       leftTimeColumn = leftChild.nextTimeColumn();\n"}}, {"oid": "2aeb7698db38f407e891d9b17740f01d7b305057", "url": "https://github.com/apache/iotdb/commit/2aeb7698db38f407e891d9b17740f01d7b305057", "message": "use BatchSize replace FetchSizeOfTimeGenerator", "committedDate": "2020-02-18T01:56:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyMzA0MA==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380423040", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      properties.getProperty(\"fetch_size_time_generator\",\n          \n          \n            \n                      properties.getProperty(\"batch_size\",", "author": "qiaojialin", "createdAt": "2020-02-18T02:04:53Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/common/conf/TSFileDescriptor.java", "diffHunk": "@@ -128,6 +130,9 @@ private void loadProps() {\n       conf.setTimeEncoder(properties.getProperty(\"time_encoder\", conf.getTimeEncoder()));\r\n       conf.setValueEncoder(properties.getProperty(\"value_encoder\", conf.getValueEncoder()));\r\n       conf.setCompressor(properties.getProperty(\"compressor\", conf.getCompressor()));\r\n+      conf.setFetchSizeOfTimeGenerator(Integer.parseInt(\r\n+          properties.getProperty(\"fetch_size_time_generator\",\r", "originalCommit": "2aeb7698db38f407e891d9b17740f01d7b305057", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e7f605fb4ecc1d051a095198ced621d59162123", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/common/conf/TSFileDescriptor.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/common/conf/TSFileDescriptor.java\nindex d40c15176..df68b4426 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/common/conf/TSFileDescriptor.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/common/conf/TSFileDescriptor.java\n\n@@ -130,9 +129,8 @@ public class TSFileDescriptor {\n       conf.setTimeEncoder(properties.getProperty(\"time_encoder\", conf.getTimeEncoder()));\n       conf.setValueEncoder(properties.getProperty(\"value_encoder\", conf.getValueEncoder()));\n       conf.setCompressor(properties.getProperty(\"compressor\", conf.getCompressor()));\n-      conf.setFetchSizeOfTimeGenerator(Integer.parseInt(\n-          properties.getProperty(\"fetch_size_time_generator\",\n-              Integer.toString(conf.getFetchSizeOfTimeGenerator()))));\n+      conf.setBatchSize(Integer.parseInt(properties.getProperty(\"batch_size\",\n+          Integer.toString(conf.getBatchSize()))));\n     } catch (IOException e) {\n       logger.warn(\"Cannot load config file, use default configuration\", e);\n     } catch (Exception e) {\n"}}, {"oid": "1e7f605fb4ecc1d051a095198ced621d59162123", "url": "https://github.com/apache/iotdb/commit/1e7f605fb4ecc1d051a095198ced621d59162123", "message": "rename fetchSizeOfTimeGenerator to batchSize", "committedDate": "2020-02-18T02:12:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ0NDA5OQ==", "url": "https://github.com/apache/iotdb/pull/818#discussion_r380444099", "bodyText": "this field is unsless now", "author": "qiaojialin", "createdAt": "2020-02-18T03:55:50Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java", "diffHunk": "@@ -19,80 +19,109 @@\n package org.apache.iotdb.tsfile.read.query.timegenerator.node;\n \n import java.io.IOException;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n+  private final int fetchSize = TSFileDescriptor.getInstance().getConfig()\n+      .getBatchSize();\n+\n   private Node leftChild;\n   private Node rightChild;\n \n-  private boolean hasCachedLeftValue;\n-  private long cachedLeftValue;\n-  private boolean hasCachedRightValue;\n-  private long cachedRightValue;\n+  private TimeColumn leftTimeColumn;\n+  private TimeColumn rightTimeColumn;\n+\n+  private TimeColumn cachedTimeColumn;\n+  private boolean hasCachedValue;\n+\n \n   public OrNode(Node leftChild, Node rightChild) {\n     this.leftChild = leftChild;\n     this.rightChild = rightChild;\n-    this.hasCachedLeftValue = false;\n-    this.hasCachedRightValue = false;\n   }\n \n   @Override\n-  public boolean hasNext() throws IOException {\n-    if (hasCachedLeftValue || hasCachedRightValue) {\n+  public boolean hasNextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n       return true;\n     }\n-    return leftChild.hasNext() || rightChild.hasNext();\n-  }\n \n-  private boolean hasLeftValue() throws IOException {\n-    return hasCachedLeftValue || leftChild.hasNext();\n+    return leftChild.hasNextTimeColumn() || rightChild.hasNextTimeColumn()\n+        || leftTimeColumn.hasCurrent() || rightTimeColumn.hasCurrent();\n   }\n \n-  private long getLeftValue() throws IOException {\n-    if (hasCachedLeftValue) {\n-      hasCachedLeftValue = false;\n-      return cachedLeftValue;\n+  @Override\n+  public TimeColumn nextTimeColumn() throws IOException {\n+    if (hasCachedValue) {\n+      hasCachedValue = false;\n+      return cachedTimeColumn;\n     }\n-    return leftChild.next();\n-  }\n+    hasCachedValue = false;\n+    cachedTimeColumn = new TimeColumn(fetchSize);\n \n-  private boolean hasRightValue() throws IOException {\n-    return hasCachedRightValue || rightChild.hasNext();\n-  }\n-\n-  private long getRightValue() throws IOException {\n-    if (hasCachedRightValue) {\n-      hasCachedRightValue = false;\n-      return cachedRightValue;\n+    if (!hasLeftValue() && leftChild.hasNextTimeColumn()) {\n+      leftTimeColumn = leftChild.nextTimeColumn();\n+    }\n+    if (!hasRightValue() && rightChild.hasNextTimeColumn()) {\n+      rightTimeColumn = rightChild.nextTimeColumn();\n     }\n-    return rightChild.next();\n-  }\n \n-  @Override\n-  public long next() throws IOException {\n     if (hasLeftValue() && !hasRightValue()) {\n-      return getLeftValue();\n+      return leftTimeColumn;\n     } else if (!hasLeftValue() && hasRightValue()) {\n-      return getRightValue();\n-    } else if (hasLeftValue() && hasRightValue()) {\n-      long leftValue = getLeftValue();\n-      long rightValue = getRightValue();\n+      return rightTimeColumn;\n+    }\n+\n+    while (hasLeftValue() && hasRightValue()) {\n+      long leftValue = leftTimeColumn.currentTime();\n+      long rightValue = rightTimeColumn.currentTime();\n+\n       if (leftValue < rightValue) {\n-        hasCachedRightValue = true;\n-        cachedRightValue = rightValue;\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedTimeColumn.add(leftValue);\n+        leftTimeColumn.next();\n+        if (!leftTimeColumn.hasCurrent() && leftChild.hasNextTimeColumn()) {\n+          leftTimeColumn = leftChild.nextTimeColumn();\n+        }\n       } else if (leftValue > rightValue) {\n-        hasCachedLeftValue = true;\n-        cachedLeftValue = leftValue;\n-        return rightValue;\n+        hasCachedValue = true;\n+        cachedTimeColumn.add(rightValue);\n+        rightTimeColumn.next();\n+        if (!rightTimeColumn.hasCurrent() && rightChild.hasNextTimeColumn()) {\n+          rightTimeColumn = rightChild.nextTimeColumn();\n+        }\n       } else {\n-        return leftValue;\n+        hasCachedValue = true;\n+        cachedTimeColumn.add(leftValue);\n+        leftTimeColumn.next();\n+        rightTimeColumn.next();\n+        if (!leftTimeColumn.hasCurrent() && leftChild.hasNextTimeColumn()) {\n+          leftTimeColumn = leftChild.nextTimeColumn();\n+        }\n+        if (!rightTimeColumn.hasCurrent() && rightChild.hasNextTimeColumn()) {\n+          rightTimeColumn = rightChild.nextTimeColumn();\n+        }\n+      }\n+\n+      if (cachedTimeColumn.size() >= fetchSize) {\n+        break;\n       }\n     }\n-    return -1;\n+    hasCachedValue = false;", "originalCommit": "1e7f605fb4ecc1d051a095198ced621d59162123", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ad26a2328e4ba14e7bf0f80e4d816252a03fe4d6", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java\nindex b966a8bec..aef0419e2 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/query/timegenerator/node/OrNode.java\n\n@@ -24,8 +24,7 @@ import org.apache.iotdb.tsfile.read.common.TimeColumn;\n \n public class OrNode implements Node {\n \n-  private final int fetchSize = TSFileDescriptor.getInstance().getConfig()\n-      .getBatchSize();\n+  private final int fetchSize = TSFileDescriptor.getInstance().getConfig().getBatchSize();\n \n   private Node leftChild;\n   private Node rightChild;\n"}}, {"oid": "ad26a2328e4ba14e7bf0f80e4d816252a03fe4d6", "url": "https://github.com/apache/iotdb/commit/ad26a2328e4ba14e7bf0f80e4d816252a03fe4d6", "message": "rename and abstract TimeGenerator, combine LeafNode", "committedDate": "2020-02-18T04:26:14Z", "type": "commit"}, {"oid": "0ab5adaab9781b0a419e44b260b264b1e17f4f0c", "url": "https://github.com/apache/iotdb/commit/0ab5adaab9781b0a419e44b260b264b1e17f4f0c", "message": "remove unused cache in AbstractFileSeriesReader", "committedDate": "2020-02-18T05:54:35Z", "type": "commit"}]}