{"pr_number": 1512, "pr_title": "[IOTDB-801]Separate data port and heartbeat port", "pr_createdAt": "2020-07-17T03:55:55Z", "pr_url": "https://github.com/apache/iotdb/pull/1512", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxMDEwNA==", "url": "https://github.com/apache/iotdb/pull/1512#discussion_r457010104", "bodyText": "I think maybe you can just extend AsyncDataClient and override the factory and constructor so there will be fewer duplicated codes.\nOr maybe you can extract heartbeat-related methods in RaftService into a new service, so it can be better decoupled.", "author": "jt2594838", "createdAt": "2020-07-20T03:17:05Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/client/async/AsyncDataHeartbeatClient.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cluster.client.async;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.iotdb.cluster.config.ClusterDescriptor;\n+import org.apache.iotdb.cluster.rpc.thrift.Node;\n+import org.apache.iotdb.cluster.rpc.thrift.RaftService;\n+import org.apache.iotdb.cluster.rpc.thrift.TSDataService.AsyncClient;\n+import org.apache.iotdb.cluster.server.RaftServer;\n+import org.apache.iotdb.cluster.utils.ClusterUtils;\n+import org.apache.thrift.async.TAsyncClientManager;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+import org.apache.thrift.transport.TNonblockingSocket;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Notice: Because a client will be returned to a pool immediately after a successful request, you\n+ * should not cache it anywhere else or there may be conflicts.\n+ */\n+public class AsyncDataHeartbeatClient extends AsyncClient {", "originalCommit": "52d8de8871ca28740efaa6cc1a87fb83a05f7910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNzczMQ==", "url": "https://github.com/apache/iotdb/pull/1512#discussion_r457017731", "bodyText": "Good idea, I will resolve it.", "author": "neuyilan", "createdAt": "2020-07-20T03:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxMDEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "f59469cce2d8b51f9e106c12749f46537c9c4e58", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/client/async/AsyncDataHeartbeatClient.java b/cluster/src/main/java/org/apache/iotdb/cluster/client/async/AsyncDataHeartbeatClient.java\nindex 9ae11ebf19..845f7cb81f 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/client/async/AsyncDataHeartbeatClient.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/client/async/AsyncDataHeartbeatClient.java\n\n@@ -48,7 +48,7 @@ public class AsyncDataHeartbeatClient extends AsyncClient {\n       TAsyncClientManager clientManager, Node node, AsyncClientPool pool) throws IOException {\n     // the difference of the two clients lies in the port\n     super(protocolFactory, clientManager,\n-        new TNonblockingSocket(node.getIp(), node.getDataPort() + ClusterUtils.DATA_HEARTBEAT_OFFSET\n+        new TNonblockingSocket(node.getIp(), node.getDataPort() + ClusterUtils.DATA_HEARTBEAT_PORT_OFFSET\n             , RaftServer.getConnectionTimeoutInMS()));\n     this.node = node;\n     this.pool = pool;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNDA5Ng==", "url": "https://github.com/apache/iotdb/pull/1512#discussion_r457014096", "bodyText": "How about using \"DATA_HEARTBEAT_PORT_OFFSET\" so it would be more clear what the port is for?", "author": "jt2594838", "createdAt": "2020-07-20T03:27:52Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java", "diffHunk": "@@ -48,11 +50,24 @@\n \n   public static final long START_UP_CHECK_TIME_INTERVAL = 5; // second\n \n+  /**\n+   * the data group member's heartbeat offset relative to the {@link ClusterConfig#getLocalDataPort()},\n+   * which means the dataHeartbeatPort = getLocalDataPort() + DATA_HEARTBEAT_OFFSET.\n+   */\n+  public static final int DATA_HEARTBEAT_OFFSET = 1;", "originalCommit": "52d8de8871ca28740efaa6cc1a87fb83a05f7910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNzc2Nw==", "url": "https://github.com/apache/iotdb/pull/1512#discussion_r457017767", "bodyText": "sure, i will change it", "author": "neuyilan", "createdAt": "2020-07-20T03:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNDA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f59469cce2d8b51f9e106c12749f46537c9c4e58", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java b/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java\nindex 456f750aac..2b2b0d66f4 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java\n\n@@ -21,88 +21,70 @@ package org.apache.iotdb.cluster.utils;\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.iotdb.cluster.config.ClusterConfig;\n import org.apache.iotdb.cluster.config.ClusterConstant;\n import org.apache.iotdb.cluster.config.ClusterDescriptor;\n import org.apache.iotdb.cluster.exception.ConfigInconsistentException;\n-import org.apache.iotdb.cluster.exception.StartUpCheckFailureException;\n import org.apache.iotdb.cluster.rpc.thrift.CheckStatusResponse;\n import org.apache.iotdb.cluster.rpc.thrift.Node;\n import org.apache.iotdb.cluster.rpc.thrift.StartUpStatus;\n-import org.apache.iotdb.cluster.server.member.MetaGroupMember;\n-import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ClusterUtils {\n-\n   private static final Logger logger = LoggerFactory.getLogger(ClusterUtils.class);\n \n-  public static final int STARTUP_CHECK_THREAD_POOL_SIZE = 6;\n-\n-  public static final int WAIT_START_UP_CHECK_TIME = 5;\n-\n-  public static final TimeUnit WAIT_START_UP_CHECK_TIME_UNIT = TimeUnit.MINUTES;\n+  public static final int WAIT_START_UP_CHECK_TIME_SEC = 5;\n \n-  public static final long START_UP_TIME_THRESHOLD = 1; // minute\n+  public static final long START_UP_TIME_THRESHOLD_MS = 60 * 1000;\n \n-  public static final long START_UP_CHECK_TIME_INTERVAL = 5; // second\n+  public static final long START_UP_CHECK_TIME_INTERVAL_MS = 3 * 1000;\n \n   /**\n-   * the data group member's heartbeat offset relative to the {@link ClusterConfig#getLocalDataPort()},\n-   * which means the dataHeartbeatPort = getLocalDataPort() + DATA_HEARTBEAT_OFFSET.\n+   * the data group member's heartbeat offset relative to the {@link ClusterConfig#getInternalDataPort()},\n+   * which means the dataHeartbeatPort = getInternalDataPort() + DATA_HEARTBEAT_OFFSET.\n    */\n-  public static final int DATA_HEARTBEAT_OFFSET = 1;\n+  public static final int DATA_HEARTBEAT_PORT_OFFSET = 1;\n \n   /**\n-   * the meta group member's heartbeat offset relative to the {@link ClusterConfig#getLocalMetaPort()},\n-   * which means the metaHeartbeatPort = getLocalMetaPort() + META_HEARTBEAT_OFFSET.\n+   * the meta group member's heartbeat offset relative to the {@link ClusterConfig#getInternalMetaPort()} ()},\n+   * which means the metaHeartbeatPort = getInternalMetaPort() + META_HEARTBEAT_OFFSET.\n    */\n-  public static final int META_HEARTBEAT_OFFSET = 1;\n+  public static final int META_HEARTBEAT_PORT_OFFSET = 1;\n \n   private ClusterUtils() {\n     // util class\n   }\n \n-  public static CheckStatusResponse checkStatus(StartUpStatus startUpStatus,\n-      MetaGroupMember metaGroupMember) {\n-    long remotePartitionInterval = startUpStatus.getPartitionInterval();\n-    int remoteHashSalt = startUpStatus.getHashSalt();\n-    int remoteReplicationNum = startUpStatus.getReplicationNumber();\n-    List<Node> remoteSeedNodeList = startUpStatus.getSeedNodeList();\n-    long localPartitionInterval = IoTDBDescriptor.getInstance().getConfig()\n-        .getPartitionInterval();\n-    int localHashSalt = ClusterConstant.HASH_SALT;\n-    int localReplicationNum = ClusterDescriptor.getInstance().getConfig().getReplicationNum();\n+  public static CheckStatusResponse checkStatus(StartUpStatus remoteStartUpStatus,\n+      StartUpStatus localStartUpStatus) {\n     boolean partitionIntervalEquals = true;\n     boolean hashSaltEquals = true;\n     boolean replicationNumEquals = true;\n     boolean seedNodeListEquals = true;\n \n-    if (localPartitionInterval != remotePartitionInterval) {\n+    if (localStartUpStatus.getPartitionInterval() != remoteStartUpStatus.getPartitionInterval()) {\n       partitionIntervalEquals = false;\n-      logger.info(\"Remote partition interval conflicts with the leader's. Leader: {}, remote: {}\",\n-          localPartitionInterval, remotePartitionInterval);\n+      logger.info(\"Remote partition interval conflicts with local. local: {}, remote: {}\",\n+          localStartUpStatus.getPartitionInterval(), remoteStartUpStatus.getPartitionInterval());\n     }\n-    if (localHashSalt != remoteHashSalt) {\n+    if (localStartUpStatus.getHashSalt() != remoteStartUpStatus.getHashSalt()) {\n       hashSaltEquals = false;\n-      logger.info(\"Remote hash salt conflicts with the leader's. Leader: {}, remote: {}\",\n-          localHashSalt, remoteHashSalt);\n+      logger.info(\"Remote hash salt conflicts with local. local: {}, remote: {}\",\n+          localStartUpStatus.getHashSalt(), remoteStartUpStatus.getHashSalt());\n     }\n-    if (localReplicationNum != remoteReplicationNum) {\n+    if (localStartUpStatus.getReplicationNumber() != remoteStartUpStatus.getReplicationNumber()) {\n       replicationNumEquals = false;\n-      logger.info(\"Remote replication number conflicts with the leader's. Leader: {}, remote: {}\",\n-          localReplicationNum, remoteReplicationNum);\n+      logger.info(\"Remote replication number conflicts with local. local: {}, remote: {}\",\n+          localStartUpStatus.getReplicationNumber(), remoteStartUpStatus.getReplicationNumber());\n     }\n     if (!ClusterUtils\n-        .checkSeedNodes(false, (List<Node>) metaGroupMember.getAllNodes(), remoteSeedNodeList)) {\n+        .checkSeedNodes(false, localStartUpStatus.getSeedNodeList(), remoteStartUpStatus.getSeedNodeList())) {\n       seedNodeListEquals = false;\n       if (logger.isInfoEnabled()) {\n-        logger.info(\"Remote seed node list conflicts with the leader's. Leader: {}, remote: {}\",\n-            Arrays.toString(metaGroupMember.getAllNodes().toArray(new Node[0])),\n-            Arrays.toString(remoteSeedNodeList.toArray(new Node[0])));\n+        logger.info(\"Remote seed node list conflicts with local. local: {}, remote: {}\",\n+            localStartUpStatus.getSeedNodeList(), remoteStartUpStatus.getSeedNodeList());\n       }\n     }\n \n"}}, {"oid": "f59469cce2d8b51f9e106c12749f46537c9c4e58", "url": "https://github.com/apache/iotdb/commit/f59469cce2d8b51f9e106c12749f46537c9c4e58", "message": "split the heartbeat port with the data port", "committedDate": "2020-07-20T07:09:27Z", "type": "commit"}, {"oid": "5e20824e78ef05de7c13df84b7fde75e82562f30", "url": "https://github.com/apache/iotdb/commit/5e20824e78ef05de7c13df84b7fde75e82562f30", "message": "bug fix", "committedDate": "2020-07-20T07:09:27Z", "type": "commit"}, {"oid": "c38d67af4bf4833dc6a63e560c714e0773f65ac8", "url": "https://github.com/apache/iotdb/commit/c38d67af4bf4833dc6a63e560c714e0773f65ac8", "message": "bug fix", "committedDate": "2020-07-20T07:09:28Z", "type": "commit"}, {"oid": "23f7771fb2acc6d2bc79ff7e889e87fc7e96d6ba", "url": "https://github.com/apache/iotdb/commit/23f7771fb2acc6d2bc79ff7e889e87fc7e96d6ba", "message": "add some annotation", "committedDate": "2020-07-20T07:09:28Z", "type": "commit"}, {"oid": "2c5dbcbeaed66573f4e168f15f7cf7c0a01eaffa", "url": "https://github.com/apache/iotdb/commit/2c5dbcbeaed66573f4e168f15f7cf7c0a01eaffa", "message": "fix bug test", "committedDate": "2020-07-20T07:10:01Z", "type": "commit"}, {"oid": "2c5dbcbeaed66573f4e168f15f7cf7c0a01eaffa", "url": "https://github.com/apache/iotdb/commit/2c5dbcbeaed66573f4e168f15f7cf7c0a01eaffa", "message": "fix bug test", "committedDate": "2020-07-20T07:10:01Z", "type": "forcePushed"}, {"oid": "20bed6b9da149840ab09c89558cc6b98f12b302b", "url": "https://github.com/apache/iotdb/commit/20bed6b9da149840ab09c89558cc6b98f12b302b", "message": "fix review", "committedDate": "2020-07-20T08:14:22Z", "type": "commit"}, {"oid": "db5d959bfc03e94bbc8aeb6f1fdb3ba69b81260e", "url": "https://github.com/apache/iotdb/commit/db5d959bfc03e94bbc8aeb6f1fdb3ba69b81260e", "message": "remove blank lines", "committedDate": "2020-07-20T08:21:04Z", "type": "commit"}]}