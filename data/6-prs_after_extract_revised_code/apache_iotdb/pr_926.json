{"pr_number": 926, "pr_title": "avoid flushing empty memtable", "pr_createdAt": "2020-03-20T04:23:11Z", "pr_url": "https://github.com/apache/iotdb/pull/926", "timeline": [{"oid": "9498f129f31b803c8d742491c64de194eb368d29", "url": "https://github.com/apache/iotdb/commit/9498f129f31b803c8d742491c64de194eb368d29", "message": "avoid flushing empty memtable", "committedDate": "2020-03-20T04:21:13Z", "type": "commit"}, {"oid": "980a45b81666c176e2a8834f2dab58216307ef1b", "url": "https://github.com/apache/iotdb/commit/980a45b81666c176e2a8834f2dab58216307ef1b", "message": "fix globalLatestFlushTime", "committedDate": "2020-03-20T04:45:30Z", "type": "commit"}, {"oid": "68283e0715de6eab967dae718a02e49fa0cfef0b", "url": "https://github.com/apache/iotdb/commit/68283e0715de6eab967dae718a02e49fa0cfef0b", "message": "update globalLatestFlushedTimeForEachDevice in batch", "committedDate": "2020-03-20T05:27:07Z", "type": "commit"}, {"oid": "af7d04ba0e8383a0896634e47c11dd0e523c89dd", "url": "https://github.com/apache/iotdb/commit/af7d04ba0e8383a0896634e47c11dd0e523c89dd", "message": "fix sonar", "committedDate": "2020-03-20T05:38:10Z", "type": "commit"}, {"oid": "ad679145c9df6f331368b64462a50dc53af816e5", "url": "https://github.com/apache/iotdb/commit/ad679145c9df6f331368b64462a50dc53af816e5", "message": "signale memtable should flush", "committedDate": "2020-03-20T05:47:57Z", "type": "commit"}, {"oid": "97b9128e300ac7eb2be13b808ae06a4c9175321e", "url": "https://github.com/apache/iotdb/commit/97b9128e300ac7eb2be13b808ae06a4c9175321e", "message": "flush signal memtable at any case", "committedDate": "2020-03-20T06:11:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1ODM2MQ==", "url": "https://github.com/apache/iotdb/pull/926#discussion_r395458361", "bodyText": "How could you ensure resource end time is larger than global end time?", "author": "SilverNarcissus", "createdAt": "2020-03-20T06:40:41Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -282,14 +282,7 @@ private void recover() throws StorageGroupProcessorException {\n             .putAll(resource.getEndTimeMap());\n         partitionLatestFlushedTimeForEachDevice.computeIfAbsent(timePartitionId, id -> new HashMap<>())\n             .putAll(resource.getEndTimeMap());\n-\n-        for (Map.Entry<String, Long> mapEntry : resource.getEndTimeMap().entrySet()) {\n-          if (!globalLatestFlushedTimeForEachDevice.containsKey(mapEntry.getKey())\n-              || globalLatestFlushedTimeForEachDevice.get(mapEntry.getKey())\n-                  < mapEntry.getValue()) {\n-            globalLatestFlushedTimeForEachDevice.put(mapEntry.getKey(), mapEntry.getValue());\n-          }\n-        }\n+        globalLatestFlushedTimeForEachDevice.putAll(resource.getEndTimeMap());", "originalCommit": "97b9128e300ac7eb2be13b808ae06a4c9175321e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5NzIzNQ==", "url": "https://github.com/apache/iotdb/pull/926#discussion_r395497235", "bodyText": "I know that~", "author": "SilverNarcissus", "createdAt": "2020-03-20T08:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1ODM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwMDAyMw==", "url": "https://github.com/apache/iotdb/pull/926#discussion_r395500023", "bodyText": "I think the files are sorted by the partition number and version, so the later one cannot have timestamps earlier than the previous one.", "author": "jt2594838", "createdAt": "2020-03-20T08:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1ODM2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwMTA2OA==", "url": "https://github.com/apache/iotdb/pull/926#discussion_r395501068", "bodyText": "How could the client know anything about this?", "author": "jt2594838", "createdAt": "2020-03-20T08:48:40Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -598,23 +591,24 @@ private void insertBatchToTsFileProcessor(BatchInsertPlan batchInsertPlan,\n       return;\n     }\n \n-    tsFileProcessor.insertBatch(batchInsertPlan, start, end, results);\n+    try {\n+      tsFileProcessor.insertBatch(batchInsertPlan, start, end, results);\n+    } catch (WriteProcessException e) {\n+      logger.error(\"insert to TsFileProcessor error \", e);\n+      return;", "originalCommit": "97b9128e300ac7eb2be13b808ae06a4c9175321e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwMjE2NA==", "url": "https://github.com/apache/iotdb/pull/926#discussion_r395502164", "bodyText": "Preserve the stack trace.", "author": "jt2594838", "createdAt": "2020-03-20T08:51:09Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -167,10 +165,9 @@ public boolean insert(InsertPlan insertPlan) throws QueryProcessException {\n     if (IoTDBDescriptor.getInstance().getConfig().isEnableWal()) {\n       try {\n         getLogNode().write(insertPlan);\n-      } catch (IOException e) {\n-        logger.error(\"{}: {} write WAL failed\", storageGroupName,\n-            tsFileResource.getFile().getName(), e);\n-        return false;\n+      } catch (Exception e) {\n+        throw new WriteProcessException(String.format(\"%s: %s write WAL failed, because %s\",\n+            storageGroupName, tsFileResource.getFile().getAbsolutePath(), e.getMessage()));", "originalCommit": "97b9128e300ac7eb2be13b808ae06a4c9175321e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}