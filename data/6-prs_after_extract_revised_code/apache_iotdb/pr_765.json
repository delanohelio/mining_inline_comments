{"pr_number": 765, "pr_title": "[IOTDB-335] Merge different aggregations on same timeseries", "pr_createdAt": "2020-02-04T05:27:16Z", "pr_url": "https://github.com/apache/iotdb/pull/765", "timeline": [{"oid": "93ed6e3d2390e1355800cff76705e4d52244b3b7", "url": "https://github.com/apache/iotdb/commit/93ed6e3d2390e1355800cff76705e4d52244b3b7", "message": "[IOTDB-335] Separate query executions of the same timeseries with different aggregate functions may be optimized", "committedDate": "2020-02-04T05:24:51Z", "type": "commit"}, {"oid": "4c3a1d6cf92e2d4e332964f0175e3116cffbbb6f", "url": "https://github.com/apache/iotdb/commit/4c3a1d6cf92e2d4e332964f0175e3116cffbbb6f", "message": "Merge remote-tracking branch 'upstream/new_series_reader' into new_series_reader\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "committedDate": "2020-02-04T06:32:29Z", "type": "commit"}, {"oid": "ef2ebf3c2072d0ca199e15b473d286c782a8795d", "url": "https://github.com/apache/iotdb/commit/ef2ebf3c2072d0ca199e15b473d286c782a8795d", "message": "Solve conflict", "committedDate": "2020-02-04T06:35:19Z", "type": "commit"}, {"oid": "81439c03ea56560f1372b62e253317c1365d4dc7", "url": "https://github.com/apache/iotdb/commit/81439c03ea56560f1372b62e253317c1365d4dc7", "message": "Code refactor", "committedDate": "2020-02-04T07:20:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNTYxMg==", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374525612", "bodyText": "If one series relates to a   min_time and first_value, we'd better return result if all aggregateResult  has calculated aggregation results.", "author": "qiaojialin", "createdAt": "2020-02-04T08:16:10Z", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "diffHunk": "@@ -121,23 +127,21 @@ private AggregateResult aggregateOneSeries(int i, Filter timeFilter, QueryContex\n         //cal by pageheader\n         if (seriesReader.canUseCurrentPageStatistics()) {\n           Statistics pageStatistic = seriesReader.currentPageStatistics();\n-          aggregateResult.updateResultFromStatistics(pageStatistic);\n-          if (aggregateResult.isCalculatedAggregationResult()) {", "originalCommit": "81439c03ea56560f1372b62e253317c1365d4dc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0Mjg2MA==", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374542860", "bodyText": "Thanks for your proposal. I use an aggregateResultList to store whether the aggregateResult is calculated... which is consistent with the aggregateResultList. Do you think it is okay?", "author": "samperson1997", "createdAt": "2020-02-04T08:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNTYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "c711f3031300a360881cc902fee832d812f308dd", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java b/server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java\nindex 50584b0db2..ee3be3145f 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java\n\n@@ -127,16 +142,28 @@ public class AggregationExecutor {\n         //cal by pageheader\n         if (seriesReader.canUseCurrentPageStatistics()) {\n           Statistics pageStatistic = seriesReader.currentPageStatistics();\n-          for (AggregateResult aggregateResult : aggregateResultList) {\n-            aggregateResult.updateResultFromStatistics(pageStatistic);\n+          for (int i = 0; i < aggregateResultList.size(); i++) {\n+            if (!isCalculatedList.get(i)) {\n+              AggregateResult aggregateResult = aggregateResultList.get(i);\n+              aggregateResult.updateResultFromStatistics(pageStatistic);\n+              if (aggregateResult.isCalculatedAggregationResult()) {\n+                isCalculatedList.set(i, true);\n+              }\n+            }\n           }\n           seriesReader.skipCurrentPage();\n           continue;\n         }\n         //cal by pagedata\n         while (seriesReader.hasNextOverlappedPage()) {\n-          for (AggregateResult aggregateResult : aggregateResultList) {\n-            aggregateResult.updateResultFromPageData(seriesReader.nextOverlappedPage());\n+          for (int i = 0; i < aggregateResultList.size(); i++) {\n+            if (!isCalculatedList.get(i)) {\n+              AggregateResult aggregateResult = aggregateResultList.get(i);\n+              aggregateResult.updateResultFromPageData(seriesReader.nextOverlappedPage());\n+              if (aggregateResult.isCalculatedAggregationResult()) {\n+                isCalculatedList.set(i, true);\n+              }\n+            }\n           }\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNjY5Ng==", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374526696", "bodyText": "add javadoc and an example\ngiven :\npaths: s1, s2, s3, s1\naggregations: count, sum, count, sum\nseriesMap:\ns1 -> 0, 3\ns2 -> 2\ns3 -> 3", "author": "qiaojialin", "createdAt": "2020-02-04T08:18:57Z", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java", "diffHunk": "@@ -80,39 +82,43 @@ public QueryDataSet executeWithoutValueFilter(QueryContext context)\n       timeFilter = ((GlobalTimeExpression) expression).getFilter();\n     }\n \n-    List<AggregateResult> aggregateResultList = new ArrayList<>();\n     //TODO use multi-thread\n-    for (int i = 0; i < selectedSeries.size(); i++) {\n-      AggregateResult aggregateResult = aggregateOneSeries(i, timeFilter, context);\n-      aggregateResultList.add(aggregateResult);\n+    Map<Path, List<Integer>> seriesMap = mergeSameSeries(selectedSeries);\n+    AggregateResult[] aggregateResultList = new AggregateResult[selectedSeries.size()];\n+    for (Map.Entry<Path, List<Integer>> entry : seriesMap.entrySet()) {\n+      List<AggregateResult> aggregateResults = aggregateOneSeries(entry, timeFilter, context);\n+      int index = 0;\n+      for (int i : entry.getValue()) {\n+        aggregateResultList[i] = aggregateResults.get(index);\n+        index++;\n+      }\n     }\n-    return constructDataSet(aggregateResultList);\n-  }\n \n+    return constructDataSet(Arrays.asList(aggregateResultList));\n+  }\n \n-  /**\n-   * get aggregation result for one series\n-   */\n-  private AggregateResult aggregateOneSeries(int i, Filter timeFilter, QueryContext context)\n+  private List<AggregateResult> aggregateOneSeries(Map.Entry<Path, List<Integer>> series,", "originalCommit": "81439c03ea56560f1372b62e253317c1365d4dc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzMTcyNA==", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374531724", "bodyText": "Hi, thanks! I have intended put the example to mergeSameSeries method", "author": "samperson1997", "createdAt": "2020-02-04T08:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNjY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNTAwOQ==", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374535009", "bodyText": "this function could be renamed to  groupAggregationsBySeries", "author": "qiaojialin", "createdAt": "2020-02-04T08:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNjY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0MzE3MQ==", "url": "https://github.com/apache/iotdb/pull/765#discussion_r374543171", "bodyText": "Done.", "author": "samperson1997", "createdAt": "2020-02-04T08:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyNjY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c711f3031300a360881cc902fee832d812f308dd", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java b/server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java\nindex 50584b0db2..ee3be3145f 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/executor/AggregationExecutor.java\n\n@@ -86,7 +86,8 @@ public class AggregationExecutor {\n     Map<Path, List<Integer>> seriesMap = mergeSameSeries(selectedSeries);\n     AggregateResult[] aggregateResultList = new AggregateResult[selectedSeries.size()];\n     for (Map.Entry<Path, List<Integer>> entry : seriesMap.entrySet()) {\n-      List<AggregateResult> aggregateResults = aggregateOneSeries(entry, timeFilter, context);\n+      List<AggregateResult> aggregateResults = groupAggregationsBySeries(entry, timeFilter,\n+          context);\n       int index = 0;\n       for (int i : entry.getValue()) {\n         aggregateResultList[i] = aggregateResults.get(index);\n"}}, {"oid": "c711f3031300a360881cc902fee832d812f308dd", "url": "https://github.com/apache/iotdb/commit/c711f3031300a360881cc902fee832d812f308dd", "message": "More optimization", "committedDate": "2020-02-04T08:54:51Z", "type": "commit"}, {"oid": "a97eb4fc3ae379544dc2bb01413348cf13529573", "url": "https://github.com/apache/iotdb/commit/a97eb4fc3ae379544dc2bb01413348cf13529573", "message": "More optimization", "committedDate": "2020-02-04T10:04:54Z", "type": "commit"}, {"oid": "fa438fc70e5c9e91ab3c246ad7febca514e2bd27", "url": "https://github.com/apache/iotdb/commit/fa438fc70e5c9e91ab3c246ad7febca514e2bd27", "message": "More optimization", "committedDate": "2020-02-04T10:13:17Z", "type": "commit"}]}