{"pr_number": 793, "pr_title": "[IOTDB-274] Refactor MManager", "pr_createdAt": "2020-02-12T01:14:05Z", "pr_url": "https://github.com/apache/iotdb/pull/793", "timeline": [{"oid": "14e9b6cf5524a3dbcbf8829ec8043614116bb887", "url": "https://github.com/apache/iotdb/commit/14e9b6cf5524a3dbcbf8829ec8043614116bb887", "message": "Refactor metadata related exception", "committedDate": "2020-02-10T10:12:58Z", "type": "commit"}, {"oid": "cbca114807d1fef922e0ab97223aab7a6e7760cb", "url": "https://github.com/apache/iotdb/commit/cbca114807d1fef922e0ab97223aab7a6e7760cb", "message": "Fix tests", "committedDate": "2020-02-10T12:00:00Z", "type": "commit"}, {"oid": "991545cf37635061db046bbd57d3eb203a85fca6", "url": "https://github.com/apache/iotdb/commit/991545cf37635061db046bbd57d3eb203a85fca6", "message": "Remove MGraph", "committedDate": "2020-02-10T15:03:06Z", "type": "commit"}, {"oid": "6de0c93c7907f28c87bb610271c29cab7920b59a", "url": "https://github.com/apache/iotdb/commit/6de0c93c7907f28c87bb610271c29cab7920b59a", "message": "Fix IT tests", "committedDate": "2020-02-11T00:32:16Z", "type": "commit"}, {"oid": "b5d8864174c3addf8453d0bbdcf6e5dca58fb695", "url": "https://github.com/apache/iotdb/commit/b5d8864174c3addf8453d0bbdcf6e5dca58fb695", "message": "Remove PTree and PropertyPlan", "committedDate": "2020-02-11T03:13:34Z", "type": "commit"}, {"oid": "e5edb054f69589d9c8ff3a9f968b52a7950a8cff", "url": "https://github.com/apache/iotdb/commit/e5edb054f69589d9c8ff3a9f968b52a7950a8cff", "message": "Add java doc for MNode", "committedDate": "2020-02-11T12:03:24Z", "type": "commit"}, {"oid": "6db29645b31c4b7d8a2ac7aea4168a47ecc1c692", "url": "https://github.com/apache/iotdb/commit/6db29645b31c4b7d8a2ac7aea4168a47ecc1c692", "message": "Add java doc for MNode", "committedDate": "2020-02-12T01:12:47Z", "type": "commit"}, {"oid": "62e757d1563d78c46df762657383be1568af70bb", "url": "https://github.com/apache/iotdb/commit/62e757d1563d78c46df762657383be1568af70bb", "message": "Refactor all paths in `Path` to `String` in MManager", "committedDate": "2020-02-12T04:18:46Z", "type": "commit"}, {"oid": "43d0062f3a4a20568df969d8eeb8db497ad3110e", "url": "https://github.com/apache/iotdb/commit/43d0062f3a4a20568df969d8eeb8db497ad3110e", "message": "Refactor some exception", "committedDate": "2020-02-12T06:33:27Z", "type": "commit"}, {"oid": "56147c00375a6d8ae75a7d573191ee593e4ded21", "url": "https://github.com/apache/iotdb/commit/56147c00375a6d8ae75a7d573191ee593e4ded21", "message": "Delete duplicated with check methods", "committedDate": "2020-02-12T07:16:24Z", "type": "commit"}, {"oid": "25dc27840f8fd757786817521fb0d6cf2e8c85b4", "url": "https://github.com/apache/iotdb/commit/25dc27840f8fd757786817521fb0d6cf2e8c85b4", "message": "Merge remote-tracking branch 'upstream/new_series_reader' into mmanager", "committedDate": "2020-02-12T07:44:14Z", "type": "commit"}, {"oid": "fcae0caee6ed5773beb11d0e206d231d3153c69b", "url": "https://github.com/apache/iotdb/commit/fcae0caee6ed5773beb11d0e206d231d3153c69b", "message": "Remove checkAndGetDataTypeCache", "committedDate": "2020-02-12T12:40:55Z", "type": "commit"}, {"oid": "5deb23f6c7ee3aecc60d68c113eb5aea22202c29", "url": "https://github.com/apache/iotdb/commit/5deb23f6c7ee3aecc60d68c113eb5aea22202c29", "message": "Rename some functions", "committedDate": "2020-02-12T15:51:29Z", "type": "commit"}, {"oid": "ea7574810d79300b3916d2420fc68c1da6f495de", "url": "https://github.com/apache/iotdb/commit/ea7574810d79300b3916d2420fc68c1da6f495de", "message": "Rename and refactor some functions", "committedDate": "2020-02-13T06:24:03Z", "type": "commit"}, {"oid": "f2f242fda70fd95931f2a4b43fc5426f74510f07", "url": "https://github.com/apache/iotdb/commit/f2f242fda70fd95931f2a4b43fc5426f74510f07", "message": "Reverse some format", "committedDate": "2020-02-13T06:25:59Z", "type": "commit"}, {"oid": "17f30ea2c8a7509f08f63b9dd5ecc7cf710f5b31", "url": "https://github.com/apache/iotdb/commit/17f30ea2c8a7509f08f63b9dd5ecc7cf710f5b31", "message": "Merge remote-tracking branch 'upstream/new_series_reader' into mmanager\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java\n#\tserver/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java\n#\tserver/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java\n#\tserver/src/test/java/org/apache/iotdb/db/qp/plan/PhysicalPlanTest.java", "committedDate": "2020-02-13T13:39:06Z", "type": "commit"}, {"oid": "9b82629f5ebd58abb0df365c9c427ebbe3b26283", "url": "https://github.com/apache/iotdb/commit/9b82629f5ebd58abb0df365c9c427ebbe3b26283", "message": "Merge with new_series_reader", "committedDate": "2020-02-13T13:59:30Z", "type": "commit"}, {"oid": "15149ceb182cd4c85a8823f395bba1d5ba156e58", "url": "https://github.com/apache/iotdb/commit/15149ceb182cd4c85a8823f395bba1d5ba156e58", "message": "Merge with new_series_reader and rename some functions", "committedDate": "2020-02-13T14:01:27Z", "type": "commit"}, {"oid": "68fb24d0458b723a8151364a62ec6f736862c2a7", "url": "https://github.com/apache/iotdb/commit/68fb24d0458b723a8151364a62ec6f736862c2a7", "message": "Fix TTL test (according to new_cluster branch)", "committedDate": "2020-02-14T03:49:05Z", "type": "commit"}, {"oid": "9fb410006edf4cfd8c44264e9c3d4d81ee1a9142", "url": "https://github.com/apache/iotdb/commit/9fb410006edf4cfd8c44264e9c3d4d81ee1a9142", "message": "Fix code smells", "committedDate": "2020-02-14T06:40:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MDMyNQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r379280325", "bodyText": "what is Root not exist?  StorageGroup not exist?", "author": "qiaojialin", "createdAt": "2020-02-14T07:17:13Z", "path": "server/src/main/java/org/apache/iotdb/db/exception/metadata/RootNotExistException.java", "diffHunk": "@@ -15,16 +15,16 @@\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n+ *\n  */\n \n-package org.apache.iotdb.db.exception.storageGroup;\n+package org.apache.iotdb.db.exception.metadata;\n \n-public class StorageGroupPathException extends StorageGroupException {\n+public class RootNotExistException extends MetadataException {", "originalCommit": "9fb410006edf4cfd8c44264e9c3d4d81ee1a9142", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwMjQ5NQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r379302495", "bodyText": "This method used to call StorageGroupPathException because it shows the storage group doesn't exist, but in the cluster branch, it is renamed to be thrown when the root node is wrong. For example when users enter rooot.vehicle.d0, he will get this error.", "author": "samperson1997", "createdAt": "2020-02-14T08:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MDMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMzUzMA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380433530", "bodyText": "Incorrect root exception", "author": "qiaojialin", "createdAt": "2020-02-18T02:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MDMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY0NjM1MA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380646350", "bodyText": "Renamed", "author": "samperson1997", "createdAt": "2020-02-18T12:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MDMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/exception/metadata/RootNotExistException.java b/server/src/main/java/org/apache/iotdb/db/exception/metadata/IncorrectRootException.java\nsimilarity index 83%\nrename from server/src/main/java/org/apache/iotdb/db/exception/metadata/RootNotExistException.java\nrename to server/src/main/java/org/apache/iotdb/db/exception/metadata/IncorrectRootException.java\nindex 6efd983da5..eb7237781b 100644\n--- a/server/src/main/java/org/apache/iotdb/db/exception/metadata/RootNotExistException.java\n+++ b/server/src/main/java/org/apache/iotdb/db/exception/metadata/IncorrectRootException.java\n\n@@ -20,11 +20,11 @@\n \n package org.apache.iotdb.db.exception.metadata;\n \n-public class RootNotExistException extends MetadataException {\n+public class IncorrectRootException extends MetadataException {\n \n   private static final long serialVersionUID = 9093228946085335945L;\n \n-  public RootNotExistException(String rootName) {\n-    super(String.format(\"%s is not a existing root name\", rootName));\n+  public IncorrectRootException(String rootName) {\n+    super(String.format(\"Incorrect root [%s]\", rootName));\n   }\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4NDMwNA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r379284304", "bodyText": "what is this field for?", "author": "qiaojialin", "createdAt": "2020-02-14T07:31:19Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MNode.java", "diffHunk": "@@ -36,29 +36,47 @@\n \n   private static final long serialVersionUID = -770028375899514063L;\n \n-  // The name of the MNode\n+  /**\n+   * Name of the MNode\n+   */\n   private String name;\n-  // Whether current node is a leaf in the Metadata Tree\n+\n+  /**\n+   * Whether current node is a leaf in the Metadata Tree\n+   */\n   private boolean isLeaf;\n-  // Whether current node is Storage group in the Metadata Tree\n+\n+  /**\n+   * Whether current node is Storage group in the Metadata Tree\n+   */\n   private boolean isStorageGroup;\n-  // Map for the schema in this storage group\n+\n+  /**\n+   * Map for the schema in this storage group\n+   */\n   private Map<String, MeasurementSchema> schemaMap;\n+\n   private Map<String, Integer> numSchemaMap;", "originalCommit": "9fb410006edf4cfd8c44264e9c3d4d81ee1a9142", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNDI2NA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r379304264", "bodyText": "It was used for addPath and deletePath in MManager... but is truly useless now. Deleted.", "author": "samperson1997", "createdAt": "2020-02-14T08:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4NDMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "bb48c8ecb2094c615e2d71c2157cc845ad5a34ce", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/MNode.java\nindex a31f865136..9e76d55230 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MNode.java\n\n@@ -56,8 +56,6 @@ public class MNode implements Serializable {\n    */\n   private Map<String, MeasurementSchema> schemaMap;\n \n-  private Map<String, Integer> numSchemaMap;\n-\n   /**\n    * Corresponding storage group name for current node\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4ODc1OQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r379288759", "bodyText": "Rename this class to ConcatOptimizerTest", "author": "qiaojialin", "createdAt": "2020-02-14T07:47:05Z", "path": "server/src/test/java/org/apache/iotdb/db/qp/plan/TestConcatOptimizer.java", "diffHunk": "@@ -52,7 +52,7 @@\n   public void before() throws MetadataException, PathException {\n     processor = new Planner();\n     MManager.getInstance().init();", "originalCommit": "9fb410006edf4cfd8c44264e9c3d4d81ee1a9142", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwNDczOA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r379304738", "bodyText": "Fixed.", "author": "samperson1997", "createdAt": "2020-02-14T08:35:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4ODc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bb48c8ecb2094c615e2d71c2157cc845ad5a34ce", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/qp/plan/TestConcatOptimizer.java b/server/src/test/java/org/apache/iotdb/db/qp/plan/ConcatOptimizerTest.java\nsimilarity index 98%\nrename from server/src/test/java/org/apache/iotdb/db/qp/plan/TestConcatOptimizer.java\nrename to server/src/test/java/org/apache/iotdb/db/qp/plan/ConcatOptimizerTest.java\nindex 7570826ac7..7e04c3cf77 100644\n--- a/server/src/test/java/org/apache/iotdb/db/qp/plan/TestConcatOptimizer.java\n+++ b/server/src/test/java/org/apache/iotdb/db/qp/plan/ConcatOptimizerTest.java\n\n@@ -44,7 +44,7 @@ import org.junit.Test;\n /**\n  * test the correctness of {@linkplain ConcatPathOptimizer ConcatPathOptimizer}\n  */\n-public class TestConcatOptimizer {\n+public class ConcatOptimizerTest {\n \n   private Planner processor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5NDQwNg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r379294406", "bodyText": "I don't understant this method... This is not only a get function, it also changes the tree structure.", "author": "qiaojialin", "createdAt": "2020-02-14T08:05:45Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -50,131 +52,127 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n-  private static final String PATH_SEPARATOR = \"\\\\.\";\n-  private static final String NO_CHILD_ERROR = \"Node [%s] doesn't have child named: [%s]\";\n-  private static final String NOT_LEAF_NODE = \"is NOT the leaf node\";\n   private MNode root;\n+  /**\n+   * dummy node is used for the default param of traverse methods\n+   */\n+  private MNode dummyNode;\n \n   MTree(String rootName) {\n     this.root = new MNode(rootName, null, false);\n+    this.dummyNode = new MNode(\"dummy\", null, false);\n   }\n \n   /**\n-   * function for adding timeseries.It should check whether seriesPath exists.\n-   */\n-  void addTimeseriesPath(String timeseriesPath, TSDataType dataType, TSEncoding encoding,\n-      CompressionType compressor, Map<String, String> props) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(timeseriesPath, PATH_SEPARATOR);\n+   * Add timeseries path\n+   *\n+   * @param path timeseries path\n+   * @param dataType data type\n+   * @param encoding encoding\n+   * @param compressor compressor\n+   * @param props props\n+   */\n+  void addPath(String path, TSDataType dataType, TSEncoding encoding,\n+      CompressionType compressor, Map<String, String> props) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n     if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", timeseriesPath);\n+      throw new IllegalPathException(path);\n     }\n-    MNode cur = findLeafParent(nodeNames);\n-    String levelPath = cur.getDataFileName();\n+    MNode cur = getParent(nodeNames);\n+    String storageGroupName = cur.getStorageGroupName();\n \n     MNode leaf = new MNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding, compressor);\n     if (props != null && !props.isEmpty()) {\n       leaf.getSchema().setProps(props);\n     }\n-    leaf.setDataFileName(levelPath);\n+    leaf.setStorageGroupName(storageGroupName);\n     if (cur.isLeaf()) {\n-      throw new MTreePathException(timeseriesPath, \"can't be created\",\n-          String.format(\"node [%s] is left node\", cur.getName()));\n+      throw new PathAlreadyExistException(cur.getFullPath());\n     }\n     cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n   }\n \n   /**\n-   * function for adding deviceId\n+   * Add device to MTree. This is available IF and ONLY IF creating schema automatically is enabled\n+   *\n+   * @param deviceId device id\n    */\n-  MNode addDeviceId(String deviceId) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(deviceId, PATH_SEPARATOR);\n+  MNode addDevice(String deviceId) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(deviceId);\n     if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", deviceId);\n+      throw new IllegalPathException(deviceId);\n     }\n-    MNode cur = getRoot();\n+    MNode cur = root;\n     for (int i = 1; i < nodeNames.length; i++) {\n-      if (!cur.hasChild(nodeNames[i])) {\n+      if (!cur.hasChildWithKey(nodeNames[i])) {\n         cur.addChild(nodeNames[i], new MNode(nodeNames[i], cur, false));\n       }\n       cur = cur.getChild(nodeNames[i]);\n     }\n     return cur;\n   }\n \n-  private MNode findLeafParent(String[] nodeNames) throws PathException {\n+  /**\n+   * Get nodes parent\n+   *\n+   * @param nodeNames node names\n+   */\n+  private MNode getParent(String[] nodeNames) throws MetadataException {", "originalCommit": "9fb410006edf4cfd8c44264e9c3d4d81ee1a9142", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxOTMxOQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r379419319", "bodyText": "Actually I don't think it changes the tree structure, for it only addChild when current node doesn't have child with the node name (!cur.hasChildWithKey(nodeName)). But I combine codes in this method into the addPath method to avoid misunderstandings of parent.", "author": "samperson1997", "createdAt": "2020-02-14T13:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5NDQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "bb48c8ecb2094c615e2d71c2157cc845ad5a34ce", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex 1eebe08e92..cc98d454c1 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -78,46 +78,6 @@ public class MTree implements Serializable {\n     if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n       throw new IllegalPathException(path);\n     }\n-    MNode cur = getParent(nodeNames);\n-    String storageGroupName = cur.getStorageGroupName();\n-\n-    MNode leaf = new MNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding, compressor);\n-    if (props != null && !props.isEmpty()) {\n-      leaf.getSchema().setProps(props);\n-    }\n-    leaf.setStorageGroupName(storageGroupName);\n-    if (cur.isLeaf()) {\n-      throw new PathAlreadyExistException(cur.getFullPath());\n-    }\n-    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n-  }\n-\n-  /**\n-   * Add device to MTree. This is available IF and ONLY IF creating schema automatically is enabled\n-   *\n-   * @param deviceId device id\n-   */\n-  MNode addDevice(String deviceId) throws MetadataException {\n-    String[] nodeNames = MetaUtils.getNodeNames(deviceId);\n-    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new IllegalPathException(deviceId);\n-    }\n-    MNode cur = root;\n-    for (int i = 1; i < nodeNames.length; i++) {\n-      if (!cur.hasChildWithKey(nodeNames[i])) {\n-        cur.addChild(nodeNames[i], new MNode(nodeNames[i], cur, false));\n-      }\n-      cur = cur.getChild(nodeNames[i]);\n-    }\n-    return cur;\n-  }\n-\n-  /**\n-   * Get nodes parent\n-   *\n-   * @param nodeNames node names\n-   */\n-  private MNode getParent(String[] nodeNames) throws MetadataException {\n     MNode cur = root;\n     String storageGroupName = null;\n     int i = 1;\n"}}, {"oid": "bb48c8ecb2094c615e2d71c2157cc845ad5a34ce", "url": "https://github.com/apache/iotdb/commit/bb48c8ecb2094c615e2d71c2157cc845ad5a34ce", "message": "Fix some code reviews", "committedDate": "2020-02-14T12:45:25Z", "type": "commit"}, {"oid": "d7d12ae37476f832686c4e583da70f200f9adf45", "url": "https://github.com/apache/iotdb/commit/d7d12ae37476f832686c4e583da70f200f9adf45", "message": "Refactor MNode to some specific nodes", "committedDate": "2020-02-15T06:58:57Z", "type": "commit"}, {"oid": "e63aa2d9bf4d5221b0b3970dee45301621ca0151", "url": "https://github.com/apache/iotdb/commit/e63aa2d9bf4d5221b0b3970dee45301621ca0151", "message": "Move MMTree related methods in PlanExecutor into MManager", "committedDate": "2020-02-15T08:15:44Z", "type": "commit"}, {"oid": "fc267f1f22d02e9f67fa6f72739ecbe7a8d3c3c5", "url": "https://github.com/apache/iotdb/commit/fc267f1f22d02e9f67fa6f72739ecbe7a8d3c3c5", "message": "Change MNode method to isNodeType", "committedDate": "2020-02-15T12:41:23Z", "type": "commit"}, {"oid": "f73c0bd04debaa5d6817f91d1f7ef611dcb96201", "url": "https://github.com/apache/iotdb/commit/f73c0bd04debaa5d6817f91d1f7ef611dcb96201", "message": "Refactor of StorageEngine", "committedDate": "2020-02-15T13:47:18Z", "type": "commit"}, {"oid": "5e0fffc53ec9d167e590a2cbe825e6b913f812be", "url": "https://github.com/apache/iotdb/commit/5e0fffc53ec9d167e590a2cbe825e6b913f812be", "message": "Fix test", "committedDate": "2020-02-15T14:22:14Z", "type": "commit"}, {"oid": "481453b8ed95f1a30ca81ffa42490e9fc786acc6", "url": "https://github.com/apache/iotdb/commit/481453b8ed95f1a30ca81ffa42490e9fc786acc6", "message": "Fix getChildren method", "committedDate": "2020-02-15T15:17:09Z", "type": "commit"}, {"oid": "8c8e29136522e34e8716fc706d892787b0a5e669", "url": "https://github.com/apache/iotdb/commit/8c8e29136522e34e8716fc706d892787b0a5e669", "message": "Refactor deletePath and getAllPath", "committedDate": "2020-02-17T02:43:49Z", "type": "commit"}, {"oid": "8352b0f78144f50a7c01a83c606c83dfde45dd8c", "url": "https://github.com/apache/iotdb/commit/8352b0f78144f50a7c01a83c606c83dfde45dd8c", "message": "Merge remote-tracking branch 'upstream/new_series_reader' into mmanager\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n#\tserver/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java\n#\tserver/src/main/java/org/apache/iotdb/db/query/timegenerator/EngineNodeConstructor.java", "committedDate": "2020-02-18T02:23:27Z", "type": "commit"}, {"oid": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "url": "https://github.com/apache/iotdb/commit/00a4cadcc9957c8226ae6e45931d3575d62d6884", "message": "Solve conflict", "committedDate": "2020-02-18T03:05:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzNDU2Mg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380434562", "bodyText": "cache path.split to avoid splitting twice", "author": "qiaojialin", "createdAt": "2020-02-18T03:05:11Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MetaUtils.java", "diffHunk": "@@ -18,27 +18,33 @@\n  */\n package org.apache.iotdb.db.metadata;\n \n-public class MetaUtils {\n-  public static String[] getNodeNames(String path, String separator) {\n+import static org.apache.iotdb.db.conf.IoTDBConstant.PATH_WILDCARD;\n+\n+class MetaUtils {\n+\n+  private static final String PATH_SEPARATOR = \"\\\\.\";\n+\n+  private MetaUtils() {\n+\n+  }\n+\n+  static String[] getNodeNames(String path) {\n     String[] nodeNames;\n-    path = path.trim();\n     if (path.contains(\"\\\"\") || path.contains(\"\\'\")) {\n-      String[] deviceAndMeasurement;\n-      if (path.contains(\"\\\"\")) {\n-        deviceAndMeasurement = path.split(\"\\\"\");\n-      } else {\n-        deviceAndMeasurement = path.split(\"\\'\");\n-      }\n-      String device = deviceAndMeasurement[0];\n-      String measurement = deviceAndMeasurement[1];\n-      String[] deviceNodeName = device.split(separator);\n+      path = path.trim().replace(\"\\'\", \"\\\"\");\n+      String measurement = path.split(\"\\\"\")[1];", "originalCommit": "8c8e29136522e34e8716fc706d892787b0a5e669", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY0NjUxMg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380646512", "bodyText": "Fixed", "author": "samperson1997", "createdAt": "2020-02-18T12:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzNDU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MetaUtils.java b/server/src/main/java/org/apache/iotdb/db/metadata/MetaUtils.java\nindex 369dd2a4bb..0f6b28cb44 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MetaUtils.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MetaUtils.java\n\n@@ -31,9 +31,9 @@ class MetaUtils {\n   static String[] getNodeNames(String path) {\n     String[] nodeNames;\n     if (path.contains(\"\\\"\") || path.contains(\"\\'\")) {\n-      path = path.trim().replace(\"\\'\", \"\\\"\");\n-      String measurement = path.split(\"\\\"\")[1];\n-      String[] deviceNodeName = path.split(\"\\\"\")[0].split(PATH_SEPARATOR);\n+      String[] measurementDeviceNode = path.trim().replace(\"\\'\", \"\\\"\").split(\"\\\"\");\n+      String measurement = measurementDeviceNode[1];\n+      String[] deviceNodeName = measurementDeviceNode[0].split(PATH_SEPARATOR);\n       int nodeNumber = deviceNodeName.length + 1;\n       nodeNames = new String[nodeNumber];\n       System.arraycopy(deviceNodeName, 0, nodeNames, 0, nodeNumber - 1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4OTYzMA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380489630", "bodyText": "use a StorageGroupMNode, move this method into it", "author": "qiaojialin", "createdAt": "2020-02-18T07:04:37Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public abstract class MNode implements Serializable {\n+\n+  private static final long serialVersionUID = -770028375899514063L;\n+\n+  /**\n+   * Name of the MNode\n+   */\n+  private String name;\n+\n+  /**\n+   * Map for the schema in this storage group\n+   */\n+  private Map<String, MeasurementSchema> schemaMap;\n+\n+  /**\n+   * Corresponding storage group name for current node\n+   */\n+  private String storageGroupName;\n+\n+  private MNode parent;\n+\n+  private String fullPath;\n+\n+  /**\n+   * Column's Schema for one timeseries represented by current node if current node is one leaf\n+   */\n+  MeasurementSchema schema;\n+\n+  Map<String, MNode> children;\n+\n+  MNodeType nodeType;\n+\n+  /**\n+   * when the data in a storage group is older than dataTTL, it is considered invalid and will be\n+   * eventually removed. only set at storage group level.\n+   */\n+  private long dataTTL = Long.MAX_VALUE;\n+\n+  /**\n+   * Constructor of MNode.\n+   */\n+  public MNode(String name, MNode parent) {\n+    this.setName(name);\n+    this.parent = parent;\n+  }\n+\n+  abstract public boolean isNodeType(MNodeType nodeType);\n+\n+  /**\n+   * Set storage group\n+   */\n+  public void setStorageGroup() {\n+    nodeType = MNodeType.STORAGE_GROUP_MNODE;\n+    schemaMap = new HashMap<>();\n+  }\n+\n+  public Map<String, MeasurementSchema> getSchemaMap() {\n+    return schemaMap;\n+  }\n+\n+  /**\n+   * check whether the MNode has children\n+   */\n+  abstract public boolean hasChildren();\n+\n+  /**\n+   * check whether the MNode has child with the given key\n+   *\n+   * @param key key\n+   */\n+  abstract public boolean hasChildWithKey(String key);\n+\n+  /**\n+   * add the given key to given child MNode\n+   *\n+   * @param key key\n+   * @param child child MNode\n+   */\n+  abstract public void addChild(String key, MNode child);\n+\n+  /**\n+   * delete key from given child MNode\n+   *\n+   * @param key key\n+   */\n+  abstract public void deleteChild(String key);\n+\n+  /**\n+   * get the child MNode under the given key.\n+   *\n+   * @param key key\n+   */\n+  abstract public MNode getChild(String key);\n+\n+  /**\n+   * get the count of all leaves whose ancestor is current node\n+   */\n+  abstract public int getLeafCount();\n+\n+  /**\n+   * get full path\n+   */\n+  public String getFullPath() {\n+    if (fullPath != null) {\n+      return fullPath;\n+    }\n+    StringBuilder builder = new StringBuilder(name);\n+    MNode curr = this;\n+    while (curr.parent != null) {\n+      curr = curr.parent;\n+      builder.insert(0, IoTDBConstant.PATH_SEPARATOR).insert(0, curr.name);\n+    }\n+    return fullPath = builder.toString();\n+  }\n+\n+  public String getStorageGroupName() {\n+    return storageGroupName;\n+  }\n+\n+  public void setStorageGroupName(String storageGroupName) {\n+    this.storageGroupName = storageGroupName;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return this.getName();\n+  }\n+\n+  public MeasurementSchema getSchema() {\n+    return schema;\n+  }\n+\n+  public MNode getParent() {\n+    return parent;\n+  }\n+\n+  abstract public Map<String, MNode> getChildren();\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n+  public long getDataTTL() {\n+    return dataTTL;\n+  }\n+\n+  public void setDataTTL(long dataTTL) {", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NDIzMg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381044232", "bodyText": "Moved.", "author": "samperson1997", "createdAt": "2020-02-19T02:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4OTYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\nindex 362250af27..73aaec95ba 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n\n@@ -96,9 +96,9 @@ public abstract class MNode implements Serializable {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName child name\n    */\n-  abstract public boolean hasChildWithKey(String key);\n+  abstract public boolean hasChild(String childName);\n \n   /**\n    * add the given key to given child MNode\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4OTY5OA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380489698", "bodyText": "add props map", "author": "qiaojialin", "createdAt": "2020-02-18T07:04:56Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/LeafMNode.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public class LeafMNode extends MNode {\n+\n+  private static final long serialVersionUID = -1199657856921206435L;\n+\n+  public LeafMNode(String name, MNode parent) {\n+    super(name, parent);\n+  }\n+\n+  public LeafMNode(String name, MNode parent, TSDataType dataType, TSEncoding encoding,\n+      CompressionType type) {", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY0NjYzNQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380646635", "bodyText": "Fixed", "author": "samperson1997", "createdAt": "2020-02-18T12:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4OTY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/LeafMNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/LeafMNode.java\nindex cf3f6d78f7..4823afcd4c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/LeafMNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/LeafMNode.java\n\n@@ -38,9 +38,9 @@ public class LeafMNode extends MNode {\n   }\n \n   public LeafMNode(String name, MNode parent, TSDataType dataType, TSEncoding encoding,\n-      CompressionType type) {\n+      CompressionType type, Map<String, String> props) {\n     this(name, parent);\n-    this.schema = new MeasurementSchema(name, dataType, encoding, type);\n+    this.schema = new MeasurementSchema(name, dataType, encoding, type, props);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMTY3OA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380501678", "bodyText": "if we use Class type to distinguish the types, this method could be removed", "author": "qiaojialin", "createdAt": "2020-02-18T07:43:35Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public abstract class MNode implements Serializable {\n+\n+  private static final long serialVersionUID = -770028375899514063L;\n+\n+  /**\n+   * Name of the MNode\n+   */\n+  private String name;\n+\n+  /**\n+   * Map for the schema in this storage group\n+   */\n+  private Map<String, MeasurementSchema> schemaMap;\n+\n+  /**\n+   * Corresponding storage group name for current node\n+   */\n+  private String storageGroupName;\n+\n+  private MNode parent;\n+\n+  private String fullPath;\n+\n+  /**\n+   * Column's Schema for one timeseries represented by current node if current node is one leaf\n+   */\n+  MeasurementSchema schema;\n+\n+  Map<String, MNode> children;\n+\n+  MNodeType nodeType;\n+\n+  /**\n+   * when the data in a storage group is older than dataTTL, it is considered invalid and will be\n+   * eventually removed. only set at storage group level.\n+   */\n+  private long dataTTL = Long.MAX_VALUE;\n+\n+  /**\n+   * Constructor of MNode.\n+   */\n+  public MNode(String name, MNode parent) {\n+    this.setName(name);\n+    this.parent = parent;\n+  }\n+\n+  abstract public boolean isNodeType(MNodeType nodeType);", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NDI3NQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381054275", "bodyText": "Removed.", "author": "samperson1997", "createdAt": "2020-02-19T03:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMTY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\nindex 362250af27..73aaec95ba 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n\n@@ -96,9 +96,9 @@ public abstract class MNode implements Serializable {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName child name\n    */\n-  abstract public boolean hasChildWithKey(String key);\n+  abstract public boolean hasChild(String childName);\n \n   /**\n    * add the given key to given child MNode\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMTg1MA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380501850", "bodyText": "the nodeType could be retained, add a getter", "author": "qiaojialin", "createdAt": "2020-02-18T07:44:04Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public abstract class MNode implements Serializable {\n+\n+  private static final long serialVersionUID = -770028375899514063L;\n+\n+  /**\n+   * Name of the MNode\n+   */\n+  private String name;\n+\n+  /**\n+   * Map for the schema in this storage group\n+   */\n+  private Map<String, MeasurementSchema> schemaMap;\n+\n+  /**\n+   * Corresponding storage group name for current node\n+   */\n+  private String storageGroupName;\n+\n+  private MNode parent;\n+\n+  private String fullPath;\n+\n+  /**\n+   * Column's Schema for one timeseries represented by current node if current node is one leaf\n+   */\n+  MeasurementSchema schema;\n+\n+  Map<String, MNode> children;\n+\n+  MNodeType nodeType;\n+\n+  /**\n+   * when the data in a storage group is older than dataTTL, it is considered invalid and will be\n+   * eventually removed. only set at storage group level.\n+   */\n+  private long dataTTL = Long.MAX_VALUE;\n+\n+  /**\n+   * Constructor of MNode.\n+   */\n+  public MNode(String name, MNode parent) {\n+    this.setName(name);\n+    this.parent = parent;\n+  }\n+\n+  abstract public boolean isNodeType(MNodeType nodeType);\n+\n+  /**\n+   * Set storage group\n+   */\n+  public void setStorageGroup() {\n+    nodeType = MNodeType.STORAGE_GROUP_MNODE;", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NDM2NA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381054364", "bodyText": "If it is used in the future, I'd like to add it back.", "author": "samperson1997", "createdAt": "2020-02-19T03:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMTg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\nindex 362250af27..73aaec95ba 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n\n@@ -96,9 +96,9 @@ public abstract class MNode implements Serializable {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName child name\n    */\n-  abstract public boolean hasChildWithKey(String key);\n+  abstract public boolean hasChild(String childName);\n \n   /**\n    * add the given key to given child MNode\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzg4OA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380503888", "bodyText": "move this to StorageGroupMNode", "author": "qiaojialin", "createdAt": "2020-02-18T07:49:34Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public abstract class MNode implements Serializable {\n+\n+  private static final long serialVersionUID = -770028375899514063L;\n+\n+  /**\n+   * Name of the MNode\n+   */\n+  private String name;\n+\n+  /**\n+   * Map for the schema in this storage group\n+   */\n+  private Map<String, MeasurementSchema> schemaMap;\n+\n+  /**\n+   * Corresponding storage group name for current node\n+   */\n+  private String storageGroupName;\n+\n+  private MNode parent;\n+\n+  private String fullPath;\n+\n+  /**\n+   * Column's Schema for one timeseries represented by current node if current node is one leaf\n+   */\n+  MeasurementSchema schema;\n+\n+  Map<String, MNode> children;\n+\n+  MNodeType nodeType;\n+\n+  /**\n+   * when the data in a storage group is older than dataTTL, it is considered invalid and will be\n+   * eventually removed. only set at storage group level.\n+   */\n+  private long dataTTL = Long.MAX_VALUE;", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NDY5MA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381044690", "bodyText": "Moved.", "author": "samperson1997", "createdAt": "2020-02-19T02:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\nindex 362250af27..73aaec95ba 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n\n@@ -96,9 +96,9 @@ public abstract class MNode implements Serializable {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName child name\n    */\n-  abstract public boolean hasChildWithKey(String key);\n+  abstract public boolean hasChild(String childName);\n \n   /**\n    * add the given key to given child MNode\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzk0Mw==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380503943", "bodyText": "move this to LeafNode", "author": "qiaojialin", "createdAt": "2020-02-18T07:49:43Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public abstract class MNode implements Serializable {\n+\n+  private static final long serialVersionUID = -770028375899514063L;\n+\n+  /**\n+   * Name of the MNode\n+   */\n+  private String name;\n+\n+  /**\n+   * Map for the schema in this storage group\n+   */\n+  private Map<String, MeasurementSchema> schemaMap;\n+\n+  /**\n+   * Corresponding storage group name for current node\n+   */\n+  private String storageGroupName;\n+\n+  private MNode parent;\n+\n+  private String fullPath;\n+\n+  /**\n+   * Column's Schema for one timeseries represented by current node if current node is one leaf\n+   */\n+  MeasurementSchema schema;", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzNjk3NA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381036974", "bodyText": "Moved.", "author": "samperson1997", "createdAt": "2020-02-19T01:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\nindex 362250af27..73aaec95ba 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n\n@@ -96,9 +96,9 @@ public abstract class MNode implements Serializable {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName child name\n    */\n-  abstract public boolean hasChildWithKey(String key);\n+  abstract public boolean hasChild(String childName);\n \n   /**\n    * add the given key to given child MNode\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwNDc4OQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380504789", "bodyText": "move this to LeafNode. I wonder if this will occupy much memory.", "author": "qiaojialin", "createdAt": "2020-02-18T07:51:43Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public abstract class MNode implements Serializable {\n+\n+  private static final long serialVersionUID = -770028375899514063L;\n+\n+  /**\n+   * Name of the MNode\n+   */\n+  private String name;\n+\n+  /**\n+   * Map for the schema in this storage group\n+   */\n+  private Map<String, MeasurementSchema> schemaMap;\n+\n+  /**\n+   * Corresponding storage group name for current node\n+   */\n+  private String storageGroupName;\n+\n+  private MNode parent;\n+\n+  private String fullPath;", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzODkwMQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381038901", "bodyText": "An internal node may also need this method. For example, the fullpath of node sg1 is root.sg1, and this could be used for setting storage group.", "author": "samperson1997", "createdAt": "2020-02-19T01:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwNDc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\nindex 362250af27..73aaec95ba 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n\n@@ -96,9 +96,9 @@ public abstract class MNode implements Serializable {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName child name\n    */\n-  abstract public boolean hasChildWithKey(String key);\n+  abstract public boolean hasChild(String childName);\n \n   /**\n    * add the given key to given child MNode\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwNTEyNg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380505126", "bodyText": "move this to StorageGroupMNode", "author": "qiaojialin", "createdAt": "2020-02-18T07:52:42Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public abstract class MNode implements Serializable {\n+\n+  private static final long serialVersionUID = -770028375899514063L;\n+\n+  /**\n+   * Name of the MNode\n+   */\n+  private String name;\n+\n+  /**\n+   * Map for the schema in this storage group\n+   */\n+  private Map<String, MeasurementSchema> schemaMap;", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NDM4Mw==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381054383", "bodyText": "Moved.", "author": "samperson1997", "createdAt": "2020-02-19T03:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwNTEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\nindex 362250af27..73aaec95ba 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n\n@@ -96,9 +96,9 @@ public abstract class MNode implements Serializable {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName child name\n    */\n-  abstract public boolean hasChildWithKey(String key);\n+  abstract public boolean hasChild(String childName);\n \n   /**\n    * add the given key to given child MNode\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzNDcwNg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380534706", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param key key\n          \n          \n            \n               * @param key the queried child name", "author": "qiaojialin", "createdAt": "2020-02-18T09:00:09Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public class InternalMNode extends MNode {\n+\n+  private static final long serialVersionUID = 7999036474525817732L;\n+\n+  public InternalMNode(String name, MNode parent) {\n+    super(name, parent);\n+    this.nodeType = MNodeType.INTERNAL_MNODE;\n+    this.children = new LinkedHashMap<>();\n+  }\n+\n+  @Override\n+  public boolean isNodeType(MNodeType nodeType) {\n+    return this.nodeType.equals(nodeType);\n+  }\n+\n+  /**\n+   * check whether the MNode has children\n+   */\n+  @Override\n+  public boolean hasChildren() {\n+    return true;\n+  }\n+\n+  /**\n+   * check whether the MNode has child with the given key\n+   *\n+   * @param key key\n+   */\n+  @Override\n+  public boolean hasChildWithKey(String key) {\n+    return this.children.containsKey(key);\n+  }\n+\n+  /**\n+   * add the given key to given child MNode\n+   *\n+   * @param key key\n+   * @param child child MNode\n+   */\n+  @Override\n+  public void addChild(String key, MNode child) {\n+    this.children.put(key, child);\n+  }\n+\n+  /**\n+   * delete key from given child MNode\n+   *\n+   * @param key key\n+   */\n+  @Override\n+  public void deleteChild(String key) {\n+    children.remove(key);\n+  }\n+\n+  /**\n+   * get the child MNode under the given key.\n+   *\n+   * @param key key", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY0Njk1Ng==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380646956", "bodyText": "Updated.", "author": "samperson1997", "createdAt": "2020-02-18T12:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzNDcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java\nindex c7c12c5432..b545039629 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java\n\n@@ -51,11 +51,11 @@ public class InternalMNode extends MNode {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName key\n    */\n   @Override\n-  public boolean hasChildWithKey(String key) {\n-    return this.children.containsKey(key);\n+  public boolean hasChild(String childName) {\n+    return this.children.containsKey(childName);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzNTAwNA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380535004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param key key\n          \n          \n            \n               * @param key deleted child name", "author": "qiaojialin", "createdAt": "2020-02-18T09:00:41Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public class InternalMNode extends MNode {\n+\n+  private static final long serialVersionUID = 7999036474525817732L;\n+\n+  public InternalMNode(String name, MNode parent) {\n+    super(name, parent);\n+    this.nodeType = MNodeType.INTERNAL_MNODE;\n+    this.children = new LinkedHashMap<>();\n+  }\n+\n+  @Override\n+  public boolean isNodeType(MNodeType nodeType) {\n+    return this.nodeType.equals(nodeType);\n+  }\n+\n+  /**\n+   * check whether the MNode has children\n+   */\n+  @Override\n+  public boolean hasChildren() {\n+    return true;\n+  }\n+\n+  /**\n+   * check whether the MNode has child with the given key\n+   *\n+   * @param key key\n+   */\n+  @Override\n+  public boolean hasChildWithKey(String key) {\n+    return this.children.containsKey(key);\n+  }\n+\n+  /**\n+   * add the given key to given child MNode\n+   *\n+   * @param key key\n+   * @param child child MNode\n+   */\n+  @Override\n+  public void addChild(String key, MNode child) {\n+    this.children.put(key, child);\n+  }\n+\n+  /**\n+   * delete key from given child MNode\n+   *\n+   * @param key key", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY0Njk4Mg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380646982", "bodyText": "Updated.", "author": "samperson1997", "createdAt": "2020-02-18T12:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzNTAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java\nindex c7c12c5432..b545039629 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java\n\n@@ -51,11 +51,11 @@ public class InternalMNode extends MNode {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName key\n    */\n   @Override\n-  public boolean hasChildWithKey(String key) {\n-    return this.children.containsKey(key);\n+  public boolean hasChild(String childName) {\n+    return this.children.containsKey(childName);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDgwMA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380540800", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              MNode addPath(String path) throws MetadataException {\n          \n          \n            \n              MNode addInternalPath(String path) throws MetadataException {", "author": "qiaojialin", "createdAt": "2020-02-18T09:11:40Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -50,131 +56,111 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n-  private static final String PATH_SEPARATOR = \"\\\\.\";\n-  private static final String NO_CHILD_ERROR = \"Node [%s] doesn't have child named: [%s]\";\n-  private static final String NOT_LEAF_NODE = \"is NOT the leaf node\";\n   private MNode root;\n-\n-  MTree(String rootName) {\n-    this.root = new MNode(rootName, null, false);\n-  }\n-\n   /**\n-   * function for adding timeseries.It should check whether seriesPath exists.\n+   * dummy node is used for the default param of traverse methods\n    */\n-  void addTimeseriesPath(String timeseriesPath, TSDataType dataType, TSEncoding encoding,\n-      CompressionType compressor, Map<String, String> props) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(timeseriesPath, PATH_SEPARATOR);\n-    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", timeseriesPath);\n-    }\n-    MNode cur = findLeafParent(nodeNames);\n-    String levelPath = cur.getDataFileName();\n+  private MNode dummyNode;\n \n-    MNode leaf = new MNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding, compressor);\n-    if (props != null && !props.isEmpty()) {\n-      leaf.getSchema().setProps(props);\n-    }\n-    leaf.setDataFileName(levelPath);\n-    if (cur.isLeaf()) {\n-      throw new MTreePathException(timeseriesPath, \"can't be created\",\n-          String.format(\"node [%s] is left node\", cur.getName()));\n-    }\n-    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n+  MTree(String rootName) {\n+    this.root = new InternalMNode(rootName, null);\n+    this.dummyNode = new InternalMNode(\"dummy\", null);\n   }\n \n   /**\n-   * function for adding deviceId\n-   */\n-  MNode addDeviceId(String deviceId) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(deviceId, PATH_SEPARATOR);\n+   * Add path\n+   *\n+   * @param path timeseries path\n+   * @param dataType data type\n+   * @param encoding encoding\n+   * @param compressor compressor\n+   * @param props props\n+   */\n+  void addPath(String path, TSDataType dataType, TSEncoding encoding,\n+      CompressionType compressor, Map<String, String> props) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n     if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", deviceId);\n-    }\n-    MNode cur = getRoot();\n-    for (int i = 1; i < nodeNames.length; i++) {\n-      if (!cur.hasChild(nodeNames[i])) {\n-        cur.addChild(nodeNames[i], new MNode(nodeNames[i], cur, false));\n-      }\n-      cur = cur.getChild(nodeNames[i]);\n+      throw new IllegalPathException(path);\n     }\n-    return cur;\n-  }\n-\n-  private MNode findLeafParent(String[] nodeNames) throws PathException {\n     MNode cur = root;\n-    String levelPath = null;\n+    String storageGroupName = null;\n     int i = 1;\n     while (i < nodeNames.length - 1) {\n       String nodeName = nodeNames[i];\n-      if (cur.isStorageGroup()) {\n-        levelPath = cur.getDataFileName();\n+      if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChild(nodeName)) {\n-        if (cur.isLeaf()) {\n-          throw new MTreePathException(String.join(\",\", nodeNames), \"can't be created\",\n-              String.format(\"node [%s] is left node\", cur.getName()));\n+      if (!cur.hasChildWithKey(nodeName)) {\n+        if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n+          throw new PathAlreadyExistException(cur.getFullPath());\n         }\n-        cur.addChild(nodeName, new MNode(nodeName, cur, false));\n+        cur.addChild(nodeName, new InternalMNode(nodeName, cur));\n       }\n-      cur.setDataFileName(levelPath);\n+      cur.setStorageGroupName(storageGroupName);\n       cur = cur.getChild(nodeName);\n-      if (levelPath == null) {\n-        levelPath = cur.getDataFileName();\n+      if (storageGroupName == null) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n       i++;\n     }\n-    cur.setDataFileName(levelPath);\n-    return cur;\n+    cur.setStorageGroupName(storageGroupName);\n+    MNode leaf = new LeafMNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding,\n+        compressor);\n+    leaf.getSchema().setProps(props);\n+    leaf.setStorageGroupName(cur.getStorageGroupName());\n+    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n   }\n \n-\n   /**\n-   * function for checking whether the given path exists.\n+   * Add path to MTree. This is available IF and ONLY IF creating schema automatically is enabled\n    *\n-   * @param path -seriesPath not necessarily the whole seriesPath (possibly a prefix of a sequence)\n+   * @param path device id\n    */\n-  boolean isPathExist(String path) {\n-    String[] nodeNames = nodeNames = MetaUtils.getNodeNames(path, PATH_SEPARATOR);\n+  MNode addPath(String path) throws MetadataException {", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MjgzNw==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380542837", "bodyText": "I wonder why this method exists, could this be replaced by addPath(String path, TSDataType dataType, TSEncoding encoding, CompressionType compressor, Map<String, String> props)?", "author": "qiaojialin", "createdAt": "2020-02-18T09:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0OTI5Nw==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380549297", "bodyText": "The other unclear thing is,   I add a path to MTree, which MNode this method returns to me? It's better to return void", "author": "qiaojialin", "createdAt": "2020-02-18T09:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0Mzg5NQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381043895", "bodyText": "This method is used for getNodeByPathFromCache, and I think it may omit some steps of addPath(String path, TSDataType dataType, TSEncoding encoding, CompressionType compressor, Map<String, String> props)... And in the getNodeByPathFromCache method, it needs the return value.", "author": "samperson1997", "createdAt": "2020-02-19T02:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex 05f6cb75c7..87d37fd67c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -90,7 +90,7 @@ public class MTree implements Serializable {\n       if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n         storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChildWithKey(nodeName)) {\n+      if (!cur.hasChild(nodeName)) {\n         if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n           throw new PathAlreadyExistException(cur.getFullPath());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MTAyMA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380541020", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Add path to MTree. This is available IF and ONLY IF creating schema automatically is enabled\n          \n          \n            \n               * Add an interval path to MTree. This is only used for automatically creating schema", "author": "qiaojialin", "createdAt": "2020-02-18T09:12:05Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -50,131 +56,111 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n-  private static final String PATH_SEPARATOR = \"\\\\.\";\n-  private static final String NO_CHILD_ERROR = \"Node [%s] doesn't have child named: [%s]\";\n-  private static final String NOT_LEAF_NODE = \"is NOT the leaf node\";\n   private MNode root;\n-\n-  MTree(String rootName) {\n-    this.root = new MNode(rootName, null, false);\n-  }\n-\n   /**\n-   * function for adding timeseries.It should check whether seriesPath exists.\n+   * dummy node is used for the default param of traverse methods\n    */\n-  void addTimeseriesPath(String timeseriesPath, TSDataType dataType, TSEncoding encoding,\n-      CompressionType compressor, Map<String, String> props) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(timeseriesPath, PATH_SEPARATOR);\n-    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", timeseriesPath);\n-    }\n-    MNode cur = findLeafParent(nodeNames);\n-    String levelPath = cur.getDataFileName();\n+  private MNode dummyNode;\n \n-    MNode leaf = new MNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding, compressor);\n-    if (props != null && !props.isEmpty()) {\n-      leaf.getSchema().setProps(props);\n-    }\n-    leaf.setDataFileName(levelPath);\n-    if (cur.isLeaf()) {\n-      throw new MTreePathException(timeseriesPath, \"can't be created\",\n-          String.format(\"node [%s] is left node\", cur.getName()));\n-    }\n-    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n+  MTree(String rootName) {\n+    this.root = new InternalMNode(rootName, null);\n+    this.dummyNode = new InternalMNode(\"dummy\", null);\n   }\n \n   /**\n-   * function for adding deviceId\n-   */\n-  MNode addDeviceId(String deviceId) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(deviceId, PATH_SEPARATOR);\n+   * Add path\n+   *\n+   * @param path timeseries path\n+   * @param dataType data type\n+   * @param encoding encoding\n+   * @param compressor compressor\n+   * @param props props\n+   */\n+  void addPath(String path, TSDataType dataType, TSEncoding encoding,\n+      CompressionType compressor, Map<String, String> props) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n     if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", deviceId);\n-    }\n-    MNode cur = getRoot();\n-    for (int i = 1; i < nodeNames.length; i++) {\n-      if (!cur.hasChild(nodeNames[i])) {\n-        cur.addChild(nodeNames[i], new MNode(nodeNames[i], cur, false));\n-      }\n-      cur = cur.getChild(nodeNames[i]);\n+      throw new IllegalPathException(path);\n     }\n-    return cur;\n-  }\n-\n-  private MNode findLeafParent(String[] nodeNames) throws PathException {\n     MNode cur = root;\n-    String levelPath = null;\n+    String storageGroupName = null;\n     int i = 1;\n     while (i < nodeNames.length - 1) {\n       String nodeName = nodeNames[i];\n-      if (cur.isStorageGroup()) {\n-        levelPath = cur.getDataFileName();\n+      if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChild(nodeName)) {\n-        if (cur.isLeaf()) {\n-          throw new MTreePathException(String.join(\",\", nodeNames), \"can't be created\",\n-              String.format(\"node [%s] is left node\", cur.getName()));\n+      if (!cur.hasChildWithKey(nodeName)) {\n+        if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n+          throw new PathAlreadyExistException(cur.getFullPath());\n         }\n-        cur.addChild(nodeName, new MNode(nodeName, cur, false));\n+        cur.addChild(nodeName, new InternalMNode(nodeName, cur));\n       }\n-      cur.setDataFileName(levelPath);\n+      cur.setStorageGroupName(storageGroupName);\n       cur = cur.getChild(nodeName);\n-      if (levelPath == null) {\n-        levelPath = cur.getDataFileName();\n+      if (storageGroupName == null) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n       i++;\n     }\n-    cur.setDataFileName(levelPath);\n-    return cur;\n+    cur.setStorageGroupName(storageGroupName);\n+    MNode leaf = new LeafMNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding,\n+        compressor);\n+    leaf.getSchema().setProps(props);\n+    leaf.setStorageGroupName(cur.getStorageGroupName());\n+    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n   }\n \n-\n   /**\n-   * function for checking whether the given path exists.\n+   * Add path to MTree. This is available IF and ONLY IF creating schema automatically is enabled", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY0NzExOQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380647119", "bodyText": "Updated.", "author": "samperson1997", "createdAt": "2020-02-18T12:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MTAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex 05f6cb75c7..87d37fd67c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -90,7 +90,7 @@ public class MTree implements Serializable {\n       if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n         storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChildWithKey(nodeName)) {\n+      if (!cur.hasChild(nodeName)) {\n         if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n           throw new PathAlreadyExistException(cur.getFullPath());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0ODI0Ng==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380548246", "bodyText": "I find that isPathExist(MNode node, String path) is only used in isPathExist(String path). So, the node must be a dummyNode. Then, we could init the cur = root without this check. And I really do not get why we need a dummyNode. It's better to remove it.", "author": "qiaojialin", "createdAt": "2020-02-18T09:24:43Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -50,131 +56,111 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n-  private static final String PATH_SEPARATOR = \"\\\\.\";\n-  private static final String NO_CHILD_ERROR = \"Node [%s] doesn't have child named: [%s]\";\n-  private static final String NOT_LEAF_NODE = \"is NOT the leaf node\";\n   private MNode root;\n-\n-  MTree(String rootName) {\n-    this.root = new MNode(rootName, null, false);\n-  }\n-\n   /**\n-   * function for adding timeseries.It should check whether seriesPath exists.\n+   * dummy node is used for the default param of traverse methods\n    */\n-  void addTimeseriesPath(String timeseriesPath, TSDataType dataType, TSEncoding encoding,\n-      CompressionType compressor, Map<String, String> props) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(timeseriesPath, PATH_SEPARATOR);\n-    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", timeseriesPath);\n-    }\n-    MNode cur = findLeafParent(nodeNames);\n-    String levelPath = cur.getDataFileName();\n+  private MNode dummyNode;\n \n-    MNode leaf = new MNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding, compressor);\n-    if (props != null && !props.isEmpty()) {\n-      leaf.getSchema().setProps(props);\n-    }\n-    leaf.setDataFileName(levelPath);\n-    if (cur.isLeaf()) {\n-      throw new MTreePathException(timeseriesPath, \"can't be created\",\n-          String.format(\"node [%s] is left node\", cur.getName()));\n-    }\n-    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n+  MTree(String rootName) {\n+    this.root = new InternalMNode(rootName, null);\n+    this.dummyNode = new InternalMNode(\"dummy\", null);\n   }\n \n   /**\n-   * function for adding deviceId\n-   */\n-  MNode addDeviceId(String deviceId) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(deviceId, PATH_SEPARATOR);\n+   * Add path\n+   *\n+   * @param path timeseries path\n+   * @param dataType data type\n+   * @param encoding encoding\n+   * @param compressor compressor\n+   * @param props props\n+   */\n+  void addPath(String path, TSDataType dataType, TSEncoding encoding,\n+      CompressionType compressor, Map<String, String> props) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n     if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", deviceId);\n-    }\n-    MNode cur = getRoot();\n-    for (int i = 1; i < nodeNames.length; i++) {\n-      if (!cur.hasChild(nodeNames[i])) {\n-        cur.addChild(nodeNames[i], new MNode(nodeNames[i], cur, false));\n-      }\n-      cur = cur.getChild(nodeNames[i]);\n+      throw new IllegalPathException(path);\n     }\n-    return cur;\n-  }\n-\n-  private MNode findLeafParent(String[] nodeNames) throws PathException {\n     MNode cur = root;\n-    String levelPath = null;\n+    String storageGroupName = null;\n     int i = 1;\n     while (i < nodeNames.length - 1) {\n       String nodeName = nodeNames[i];\n-      if (cur.isStorageGroup()) {\n-        levelPath = cur.getDataFileName();\n+      if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChild(nodeName)) {\n-        if (cur.isLeaf()) {\n-          throw new MTreePathException(String.join(\",\", nodeNames), \"can't be created\",\n-              String.format(\"node [%s] is left node\", cur.getName()));\n+      if (!cur.hasChildWithKey(nodeName)) {\n+        if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n+          throw new PathAlreadyExistException(cur.getFullPath());\n         }\n-        cur.addChild(nodeName, new MNode(nodeName, cur, false));\n+        cur.addChild(nodeName, new InternalMNode(nodeName, cur));\n       }\n-      cur.setDataFileName(levelPath);\n+      cur.setStorageGroupName(storageGroupName);\n       cur = cur.getChild(nodeName);\n-      if (levelPath == null) {\n-        levelPath = cur.getDataFileName();\n+      if (storageGroupName == null) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n       i++;\n     }\n-    cur.setDataFileName(levelPath);\n-    return cur;\n+    cur.setStorageGroupName(storageGroupName);\n+    MNode leaf = new LeafMNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding,\n+        compressor);\n+    leaf.getSchema().setProps(props);\n+    leaf.setStorageGroupName(cur.getStorageGroupName());\n+    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n   }\n \n-\n   /**\n-   * function for checking whether the given path exists.\n+   * Add path to MTree. This is available IF and ONLY IF creating schema automatically is enabled\n    *\n-   * @param path -seriesPath not necessarily the whole seriesPath (possibly a prefix of a sequence)\n+   * @param path device id\n    */\n-  boolean isPathExist(String path) {\n-    String[] nodeNames = nodeNames = MetaUtils.getNodeNames(path, PATH_SEPARATOR);\n+  MNode addPath(String path) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n+    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n+      throw new IllegalPathException(path);\n+    }\n     MNode cur = root;\n-    int i = 0;\n-    while (i < nodeNames.length - 1) {\n-      String nodeName = nodeNames[i];\n-      if (cur.getName().equals(nodeName)) {\n-        i++;\n-        nodeName = nodeNames[i];\n-        if (cur.hasChild(nodeName)) {\n-          cur = cur.getChild(nodeName);\n-        } else {\n-          return false;\n-        }\n-      } else {\n-        return false;\n+    for (int i = 1; i < nodeNames.length; i++) {\n+      if (!cur.hasChildWithKey(nodeNames[i])) {\n+        cur.addChild(nodeNames[i], new InternalMNode(nodeNames[i], cur));\n       }\n+      cur = cur.getChild(nodeNames[i]);\n     }\n-    return cur.getName().equals(nodeNames[i]);\n+    return cur;\n+  }\n+\n+  /**\n+   * Check whether the given path exists\n+   *\n+   * @param path not necessarily the whole seriesPath (possibly a prefix of a sequence)\n+   */\n+  boolean isPathExist(String path) {\n+    return isPathExist(dummyNode, path);\n   }\n \n   /**\n-   * function for checking whether the given path exists under the given mNode.\n+   * Check whether the given path exists under the given MNode\n    */\n-  boolean isPathExist(MNode node, String path) {\n-    String[] nodeNames = MetaUtils.getNodeNames(path, PATH_SEPARATOR);\n-    if (nodeNames.length < 1) {\n-      return true;\n-    }\n-    if (!node.hasChild(nodeNames[0])) {\n-      return false;\n+  private boolean isPathExist(MNode node, String path) {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n+    MNode cur;\n+    if (node.equals(dummyNode)) {", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY0ODc1Mg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380648752", "bodyText": "I'm not sure whether this method will be used in the future, so I retained this method. It could be removed currently.", "author": "samperson1997", "createdAt": "2020-02-18T12:45:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0ODI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex 05f6cb75c7..87d37fd67c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -90,7 +90,7 @@ public class MTree implements Serializable {\n       if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n         storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChildWithKey(nodeName)) {\n+      if (!cur.hasChild(nodeName)) {\n         if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n           throw new PathAlreadyExistException(cur.getFullPath());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MDQyMg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380550422", "bodyText": "is the path a full path that starts from the root? add javadoc", "author": "qiaojialin", "createdAt": "2020-02-18T09:28:15Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -50,131 +56,111 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n-  private static final String PATH_SEPARATOR = \"\\\\.\";\n-  private static final String NO_CHILD_ERROR = \"Node [%s] doesn't have child named: [%s]\";\n-  private static final String NOT_LEAF_NODE = \"is NOT the leaf node\";\n   private MNode root;\n-\n-  MTree(String rootName) {\n-    this.root = new MNode(rootName, null, false);\n-  }\n-\n   /**\n-   * function for adding timeseries.It should check whether seriesPath exists.\n+   * dummy node is used for the default param of traverse methods\n    */\n-  void addTimeseriesPath(String timeseriesPath, TSDataType dataType, TSEncoding encoding,\n-      CompressionType compressor, Map<String, String> props) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(timeseriesPath, PATH_SEPARATOR);\n-    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", timeseriesPath);\n-    }\n-    MNode cur = findLeafParent(nodeNames);\n-    String levelPath = cur.getDataFileName();\n+  private MNode dummyNode;\n \n-    MNode leaf = new MNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding, compressor);\n-    if (props != null && !props.isEmpty()) {\n-      leaf.getSchema().setProps(props);\n-    }\n-    leaf.setDataFileName(levelPath);\n-    if (cur.isLeaf()) {\n-      throw new MTreePathException(timeseriesPath, \"can't be created\",\n-          String.format(\"node [%s] is left node\", cur.getName()));\n-    }\n-    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n+  MTree(String rootName) {\n+    this.root = new InternalMNode(rootName, null);\n+    this.dummyNode = new InternalMNode(\"dummy\", null);\n   }\n \n   /**\n-   * function for adding deviceId\n-   */\n-  MNode addDeviceId(String deviceId) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(deviceId, PATH_SEPARATOR);\n+   * Add path\n+   *\n+   * @param path timeseries path\n+   * @param dataType data type\n+   * @param encoding encoding\n+   * @param compressor compressor\n+   * @param props props\n+   */\n+  void addPath(String path, TSDataType dataType, TSEncoding encoding,\n+      CompressionType compressor, Map<String, String> props) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n     if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", deviceId);\n-    }\n-    MNode cur = getRoot();\n-    for (int i = 1; i < nodeNames.length; i++) {\n-      if (!cur.hasChild(nodeNames[i])) {\n-        cur.addChild(nodeNames[i], new MNode(nodeNames[i], cur, false));\n-      }\n-      cur = cur.getChild(nodeNames[i]);\n+      throw new IllegalPathException(path);\n     }\n-    return cur;\n-  }\n-\n-  private MNode findLeafParent(String[] nodeNames) throws PathException {\n     MNode cur = root;\n-    String levelPath = null;\n+    String storageGroupName = null;\n     int i = 1;\n     while (i < nodeNames.length - 1) {\n       String nodeName = nodeNames[i];\n-      if (cur.isStorageGroup()) {\n-        levelPath = cur.getDataFileName();\n+      if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChild(nodeName)) {\n-        if (cur.isLeaf()) {\n-          throw new MTreePathException(String.join(\",\", nodeNames), \"can't be created\",\n-              String.format(\"node [%s] is left node\", cur.getName()));\n+      if (!cur.hasChildWithKey(nodeName)) {\n+        if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n+          throw new PathAlreadyExistException(cur.getFullPath());\n         }\n-        cur.addChild(nodeName, new MNode(nodeName, cur, false));\n+        cur.addChild(nodeName, new InternalMNode(nodeName, cur));\n       }\n-      cur.setDataFileName(levelPath);\n+      cur.setStorageGroupName(storageGroupName);\n       cur = cur.getChild(nodeName);\n-      if (levelPath == null) {\n-        levelPath = cur.getDataFileName();\n+      if (storageGroupName == null) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n       i++;\n     }\n-    cur.setDataFileName(levelPath);\n-    return cur;\n+    cur.setStorageGroupName(storageGroupName);\n+    MNode leaf = new LeafMNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding,\n+        compressor);\n+    leaf.getSchema().setProps(props);\n+    leaf.setStorageGroupName(cur.getStorageGroupName());\n+    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n   }\n \n-\n   /**\n-   * function for checking whether the given path exists.\n+   * Add path to MTree. This is available IF and ONLY IF creating schema automatically is enabled\n    *\n-   * @param path -seriesPath not necessarily the whole seriesPath (possibly a prefix of a sequence)\n+   * @param path device id\n    */\n-  boolean isPathExist(String path) {\n-    String[] nodeNames = nodeNames = MetaUtils.getNodeNames(path, PATH_SEPARATOR);\n+  MNode addPath(String path) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n+    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n+      throw new IllegalPathException(path);\n+    }\n     MNode cur = root;\n-    int i = 0;\n-    while (i < nodeNames.length - 1) {\n-      String nodeName = nodeNames[i];\n-      if (cur.getName().equals(nodeName)) {\n-        i++;\n-        nodeName = nodeNames[i];\n-        if (cur.hasChild(nodeName)) {\n-          cur = cur.getChild(nodeName);\n-        } else {\n-          return false;\n-        }\n-      } else {\n-        return false;\n+    for (int i = 1; i < nodeNames.length; i++) {\n+      if (!cur.hasChildWithKey(nodeNames[i])) {\n+        cur.addChild(nodeNames[i], new InternalMNode(nodeNames[i], cur));\n       }\n+      cur = cur.getChild(nodeNames[i]);\n     }\n-    return cur.getName().equals(nodeNames[i]);\n+    return cur;\n+  }\n+\n+  /**\n+   * Check whether the given path exists\n+   *\n+   * @param path not necessarily the whole seriesPath (possibly a prefix of a sequence)\n+   */\n+  boolean isPathExist(String path) {\n+    return isPathExist(dummyNode, path);\n   }\n \n   /**\n-   * function for checking whether the given path exists under the given mNode.\n+   * Check whether the given path exists under the given MNode\n    */\n-  boolean isPathExist(MNode node, String path) {\n-    String[] nodeNames = MetaUtils.getNodeNames(path, PATH_SEPARATOR);\n-    if (nodeNames.length < 1) {\n-      return true;\n-    }\n-    if (!node.hasChild(nodeNames[0])) {\n-      return false;\n+  private boolean isPathExist(MNode node, String path) {", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzMzE2Mw==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381033163", "bodyText": "Starts from the root. Javadoc added.", "author": "samperson1997", "createdAt": "2020-02-19T01:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MDQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex 05f6cb75c7..87d37fd67c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -90,7 +90,7 @@ public class MTree implements Serializable {\n       if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n         storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChildWithKey(nodeName)) {\n+      if (!cur.hasChild(nodeName)) {\n         if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n           throw new PathAlreadyExistException(cur.getFullPath());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MDkyMQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380550921", "bodyText": "if the path is from root, we could start from i = 1", "author": "qiaojialin", "createdAt": "2020-02-18T09:29:03Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -50,131 +56,111 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n-  private static final String PATH_SEPARATOR = \"\\\\.\";\n-  private static final String NO_CHILD_ERROR = \"Node [%s] doesn't have child named: [%s]\";\n-  private static final String NOT_LEAF_NODE = \"is NOT the leaf node\";\n   private MNode root;\n-\n-  MTree(String rootName) {\n-    this.root = new MNode(rootName, null, false);\n-  }\n-\n   /**\n-   * function for adding timeseries.It should check whether seriesPath exists.\n+   * dummy node is used for the default param of traverse methods\n    */\n-  void addTimeseriesPath(String timeseriesPath, TSDataType dataType, TSEncoding encoding,\n-      CompressionType compressor, Map<String, String> props) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(timeseriesPath, PATH_SEPARATOR);\n-    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", timeseriesPath);\n-    }\n-    MNode cur = findLeafParent(nodeNames);\n-    String levelPath = cur.getDataFileName();\n+  private MNode dummyNode;\n \n-    MNode leaf = new MNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding, compressor);\n-    if (props != null && !props.isEmpty()) {\n-      leaf.getSchema().setProps(props);\n-    }\n-    leaf.setDataFileName(levelPath);\n-    if (cur.isLeaf()) {\n-      throw new MTreePathException(timeseriesPath, \"can't be created\",\n-          String.format(\"node [%s] is left node\", cur.getName()));\n-    }\n-    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n+  MTree(String rootName) {\n+    this.root = new InternalMNode(rootName, null);\n+    this.dummyNode = new InternalMNode(\"dummy\", null);\n   }\n \n   /**\n-   * function for adding deviceId\n-   */\n-  MNode addDeviceId(String deviceId) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(deviceId, PATH_SEPARATOR);\n+   * Add path\n+   *\n+   * @param path timeseries path\n+   * @param dataType data type\n+   * @param encoding encoding\n+   * @param compressor compressor\n+   * @param props props\n+   */\n+  void addPath(String path, TSDataType dataType, TSEncoding encoding,\n+      CompressionType compressor, Map<String, String> props) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n     if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", deviceId);\n-    }\n-    MNode cur = getRoot();\n-    for (int i = 1; i < nodeNames.length; i++) {\n-      if (!cur.hasChild(nodeNames[i])) {\n-        cur.addChild(nodeNames[i], new MNode(nodeNames[i], cur, false));\n-      }\n-      cur = cur.getChild(nodeNames[i]);\n+      throw new IllegalPathException(path);\n     }\n-    return cur;\n-  }\n-\n-  private MNode findLeafParent(String[] nodeNames) throws PathException {\n     MNode cur = root;\n-    String levelPath = null;\n+    String storageGroupName = null;\n     int i = 1;\n     while (i < nodeNames.length - 1) {\n       String nodeName = nodeNames[i];\n-      if (cur.isStorageGroup()) {\n-        levelPath = cur.getDataFileName();\n+      if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChild(nodeName)) {\n-        if (cur.isLeaf()) {\n-          throw new MTreePathException(String.join(\",\", nodeNames), \"can't be created\",\n-              String.format(\"node [%s] is left node\", cur.getName()));\n+      if (!cur.hasChildWithKey(nodeName)) {\n+        if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n+          throw new PathAlreadyExistException(cur.getFullPath());\n         }\n-        cur.addChild(nodeName, new MNode(nodeName, cur, false));\n+        cur.addChild(nodeName, new InternalMNode(nodeName, cur));\n       }\n-      cur.setDataFileName(levelPath);\n+      cur.setStorageGroupName(storageGroupName);\n       cur = cur.getChild(nodeName);\n-      if (levelPath == null) {\n-        levelPath = cur.getDataFileName();\n+      if (storageGroupName == null) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n       i++;\n     }\n-    cur.setDataFileName(levelPath);\n-    return cur;\n+    cur.setStorageGroupName(storageGroupName);\n+    MNode leaf = new LeafMNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding,\n+        compressor);\n+    leaf.getSchema().setProps(props);\n+    leaf.setStorageGroupName(cur.getStorageGroupName());\n+    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n   }\n \n-\n   /**\n-   * function for checking whether the given path exists.\n+   * Add path to MTree. This is available IF and ONLY IF creating schema automatically is enabled\n    *\n-   * @param path -seriesPath not necessarily the whole seriesPath (possibly a prefix of a sequence)\n+   * @param path device id\n    */\n-  boolean isPathExist(String path) {\n-    String[] nodeNames = nodeNames = MetaUtils.getNodeNames(path, PATH_SEPARATOR);\n+  MNode addPath(String path) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n+    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n+      throw new IllegalPathException(path);\n+    }\n     MNode cur = root;\n-    int i = 0;\n-    while (i < nodeNames.length - 1) {\n-      String nodeName = nodeNames[i];\n-      if (cur.getName().equals(nodeName)) {\n-        i++;\n-        nodeName = nodeNames[i];\n-        if (cur.hasChild(nodeName)) {\n-          cur = cur.getChild(nodeName);\n-        } else {\n-          return false;\n-        }\n-      } else {\n-        return false;\n+    for (int i = 1; i < nodeNames.length; i++) {\n+      if (!cur.hasChildWithKey(nodeNames[i])) {\n+        cur.addChild(nodeNames[i], new InternalMNode(nodeNames[i], cur));\n       }\n+      cur = cur.getChild(nodeNames[i]);\n     }\n-    return cur.getName().equals(nodeNames[i]);\n+    return cur;\n+  }\n+\n+  /**\n+   * Check whether the given path exists\n+   *\n+   * @param path not necessarily the whole seriesPath (possibly a prefix of a sequence)\n+   */\n+  boolean isPathExist(String path) {\n+    return isPathExist(dummyNode, path);\n   }\n \n   /**\n-   * function for checking whether the given path exists under the given mNode.\n+   * Check whether the given path exists under the given MNode\n    */\n-  boolean isPathExist(MNode node, String path) {\n-    String[] nodeNames = MetaUtils.getNodeNames(path, PATH_SEPARATOR);\n-    if (nodeNames.length < 1) {\n-      return true;\n-    }\n-    if (!node.hasChild(nodeNames[0])) {\n-      return false;\n+  private boolean isPathExist(MNode node, String path) {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n+    MNode cur;\n+    if (node.equals(dummyNode)) {\n+      cur = root;\n+    } else {\n+      cur = node.getChild(nodeNames[0]);\n+      if (!node.hasChildWithKey(nodeNames[0])) {\n+        return false;\n+      }\n     }\n-    MNode cur = node.getChild(nodeNames[0]);\n-\n     int i = 0;", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzNTQ0Mw==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381035443", "bodyText": "I rearranged the loop logic.", "author": "samperson1997", "createdAt": "2020-02-19T01:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MDkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex 05f6cb75c7..87d37fd67c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -90,7 +90,7 @@ public class MTree implements Serializable {\n       if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n         storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChildWithKey(nodeName)) {\n+      if (!cur.hasChild(nodeName)) {\n         if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n           throw new PathAlreadyExistException(cur.getFullPath());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MTUxNA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380551514", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              abstract public boolean hasChildWithKey(String key);\n          \n          \n            \n              abstract public boolean hasChild(String childName);", "author": "qiaojialin", "createdAt": "2020-02-18T09:30:08Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public abstract class MNode implements Serializable {\n+\n+  private static final long serialVersionUID = -770028375899514063L;\n+\n+  /**\n+   * Name of the MNode\n+   */\n+  private String name;\n+\n+  /**\n+   * Map for the schema in this storage group\n+   */\n+  private Map<String, MeasurementSchema> schemaMap;\n+\n+  /**\n+   * Corresponding storage group name for current node\n+   */\n+  private String storageGroupName;\n+\n+  private MNode parent;\n+\n+  private String fullPath;\n+\n+  /**\n+   * Column's Schema for one timeseries represented by current node if current node is one leaf\n+   */\n+  MeasurementSchema schema;\n+\n+  Map<String, MNode> children;\n+\n+  MNodeType nodeType;\n+\n+  /**\n+   * when the data in a storage group is older than dataTTL, it is considered invalid and will be\n+   * eventually removed. only set at storage group level.\n+   */\n+  private long dataTTL = Long.MAX_VALUE;\n+\n+  /**\n+   * Constructor of MNode.\n+   */\n+  public MNode(String name, MNode parent) {\n+    this.setName(name);\n+    this.parent = parent;\n+  }\n+\n+  abstract public boolean isNodeType(MNodeType nodeType);\n+\n+  /**\n+   * Set storage group\n+   */\n+  public void setStorageGroup() {\n+    nodeType = MNodeType.STORAGE_GROUP_MNODE;\n+    schemaMap = new HashMap<>();\n+  }\n+\n+  public Map<String, MeasurementSchema> getSchemaMap() {\n+    return schemaMap;\n+  }\n+\n+  /**\n+   * check whether the MNode has children\n+   */\n+  abstract public boolean hasChildren();\n+\n+  /**\n+   * check whether the MNode has child with the given key\n+   *\n+   * @param key key\n+   */\n+  abstract public boolean hasChildWithKey(String key);", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY0ODg0NA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380648844", "bodyText": "Fixed", "author": "samperson1997", "createdAt": "2020-02-18T12:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MTUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\nindex 362250af27..73aaec95ba 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java\n\n@@ -96,9 +96,9 @@ public abstract class MNode implements Serializable {\n   /**\n    * check whether the MNode has child with the given key\n    *\n-   * @param key key\n+   * @param childName child name\n    */\n-  abstract public boolean hasChildWithKey(String key);\n+  abstract public boolean hasChild(String childName);\n \n   /**\n    * add the given key to given child MNode\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzE4OA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r380553188", "bodyText": "if we start from root and check if nodeName[0] is root, then, we do not need this check in this while", "author": "qiaojialin", "createdAt": "2020-02-18T09:32:58Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -50,131 +56,111 @@\n public class MTree implements Serializable {\n \n   private static final long serialVersionUID = -4200394435237291964L;\n-  private static final String PATH_SEPARATOR = \"\\\\.\";\n-  private static final String NO_CHILD_ERROR = \"Node [%s] doesn't have child named: [%s]\";\n-  private static final String NOT_LEAF_NODE = \"is NOT the leaf node\";\n   private MNode root;\n-\n-  MTree(String rootName) {\n-    this.root = new MNode(rootName, null, false);\n-  }\n-\n   /**\n-   * function for adding timeseries.It should check whether seriesPath exists.\n+   * dummy node is used for the default param of traverse methods\n    */\n-  void addTimeseriesPath(String timeseriesPath, TSDataType dataType, TSEncoding encoding,\n-      CompressionType compressor, Map<String, String> props) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(timeseriesPath, PATH_SEPARATOR);\n-    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", timeseriesPath);\n-    }\n-    MNode cur = findLeafParent(nodeNames);\n-    String levelPath = cur.getDataFileName();\n+  private MNode dummyNode;\n \n-    MNode leaf = new MNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding, compressor);\n-    if (props != null && !props.isEmpty()) {\n-      leaf.getSchema().setProps(props);\n-    }\n-    leaf.setDataFileName(levelPath);\n-    if (cur.isLeaf()) {\n-      throw new MTreePathException(timeseriesPath, \"can't be created\",\n-          String.format(\"node [%s] is left node\", cur.getName()));\n-    }\n-    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n+  MTree(String rootName) {\n+    this.root = new InternalMNode(rootName, null);\n+    this.dummyNode = new InternalMNode(\"dummy\", null);\n   }\n \n   /**\n-   * function for adding deviceId\n-   */\n-  MNode addDeviceId(String deviceId) throws PathException {\n-    String[] nodeNames = MetaUtils.getNodeNames(deviceId, PATH_SEPARATOR);\n+   * Add path\n+   *\n+   * @param path timeseries path\n+   * @param dataType data type\n+   * @param encoding encoding\n+   * @param compressor compressor\n+   * @param props props\n+   */\n+  void addPath(String path, TSDataType dataType, TSEncoding encoding,\n+      CompressionType compressor, Map<String, String> props) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n     if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n-      throw new MTreePathException(\"Timeseries\", deviceId);\n-    }\n-    MNode cur = getRoot();\n-    for (int i = 1; i < nodeNames.length; i++) {\n-      if (!cur.hasChild(nodeNames[i])) {\n-        cur.addChild(nodeNames[i], new MNode(nodeNames[i], cur, false));\n-      }\n-      cur = cur.getChild(nodeNames[i]);\n+      throw new IllegalPathException(path);\n     }\n-    return cur;\n-  }\n-\n-  private MNode findLeafParent(String[] nodeNames) throws PathException {\n     MNode cur = root;\n-    String levelPath = null;\n+    String storageGroupName = null;\n     int i = 1;\n     while (i < nodeNames.length - 1) {\n       String nodeName = nodeNames[i];\n-      if (cur.isStorageGroup()) {\n-        levelPath = cur.getDataFileName();\n+      if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChild(nodeName)) {\n-        if (cur.isLeaf()) {\n-          throw new MTreePathException(String.join(\",\", nodeNames), \"can't be created\",\n-              String.format(\"node [%s] is left node\", cur.getName()));\n+      if (!cur.hasChildWithKey(nodeName)) {\n+        if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n+          throw new PathAlreadyExistException(cur.getFullPath());\n         }\n-        cur.addChild(nodeName, new MNode(nodeName, cur, false));\n+        cur.addChild(nodeName, new InternalMNode(nodeName, cur));\n       }\n-      cur.setDataFileName(levelPath);\n+      cur.setStorageGroupName(storageGroupName);\n       cur = cur.getChild(nodeName);\n-      if (levelPath == null) {\n-        levelPath = cur.getDataFileName();\n+      if (storageGroupName == null) {\n+        storageGroupName = cur.getStorageGroupName();\n       }\n       i++;\n     }\n-    cur.setDataFileName(levelPath);\n-    return cur;\n+    cur.setStorageGroupName(storageGroupName);\n+    MNode leaf = new LeafMNode(nodeNames[nodeNames.length - 1], cur, dataType, encoding,\n+        compressor);\n+    leaf.getSchema().setProps(props);\n+    leaf.setStorageGroupName(cur.getStorageGroupName());\n+    cur.addChild(nodeNames[nodeNames.length - 1], leaf);\n   }\n \n-\n   /**\n-   * function for checking whether the given path exists.\n+   * Add path to MTree. This is available IF and ONLY IF creating schema automatically is enabled\n    *\n-   * @param path -seriesPath not necessarily the whole seriesPath (possibly a prefix of a sequence)\n+   * @param path device id\n    */\n-  boolean isPathExist(String path) {\n-    String[] nodeNames = nodeNames = MetaUtils.getNodeNames(path, PATH_SEPARATOR);\n+  MNode addPath(String path) throws MetadataException {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n+    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n+      throw new IllegalPathException(path);\n+    }\n     MNode cur = root;\n-    int i = 0;\n-    while (i < nodeNames.length - 1) {\n-      String nodeName = nodeNames[i];\n-      if (cur.getName().equals(nodeName)) {\n-        i++;\n-        nodeName = nodeNames[i];\n-        if (cur.hasChild(nodeName)) {\n-          cur = cur.getChild(nodeName);\n-        } else {\n-          return false;\n-        }\n-      } else {\n-        return false;\n+    for (int i = 1; i < nodeNames.length; i++) {\n+      if (!cur.hasChildWithKey(nodeNames[i])) {\n+        cur.addChild(nodeNames[i], new InternalMNode(nodeNames[i], cur));\n       }\n+      cur = cur.getChild(nodeNames[i]);\n     }\n-    return cur.getName().equals(nodeNames[i]);\n+    return cur;\n+  }\n+\n+  /**\n+   * Check whether the given path exists\n+   *\n+   * @param path not necessarily the whole seriesPath (possibly a prefix of a sequence)\n+   */\n+  boolean isPathExist(String path) {\n+    return isPathExist(dummyNode, path);\n   }\n \n   /**\n-   * function for checking whether the given path exists under the given mNode.\n+   * Check whether the given path exists under the given MNode\n    */\n-  boolean isPathExist(MNode node, String path) {\n-    String[] nodeNames = MetaUtils.getNodeNames(path, PATH_SEPARATOR);\n-    if (nodeNames.length < 1) {\n-      return true;\n-    }\n-    if (!node.hasChild(nodeNames[0])) {\n-      return false;\n+  private boolean isPathExist(MNode node, String path) {\n+    String[] nodeNames = MetaUtils.getNodeNames(path);\n+    MNode cur;\n+    if (node.equals(dummyNode)) {\n+      cur = root;\n+    } else {\n+      cur = node.getChild(nodeNames[0]);\n+      if (!node.hasChildWithKey(nodeNames[0])) {\n+        return false;\n+      }\n     }\n-    MNode cur = node.getChild(nodeNames[0]);\n-\n     int i = 0;\n     while (i < nodeNames.length - 1) {\n       String nodeName = nodeNames[i];\n       if (cur.getName().equals(nodeName)) {", "originalCommit": "00a4cadcc9957c8226ae6e45931d3575d62d6884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzNTIyMw==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381035223", "bodyText": "Removed.", "author": "samperson1997", "createdAt": "2020-02-19T01:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex 05f6cb75c7..87d37fd67c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -90,7 +90,7 @@ public class MTree implements Serializable {\n       if (cur.isNodeType(MNodeType.STORAGE_GROUP_MNODE)) {\n         storageGroupName = cur.getStorageGroupName();\n       }\n-      if (!cur.hasChildWithKey(nodeName)) {\n+      if (!cur.hasChild(nodeName)) {\n         if (cur.isNodeType(MNodeType.LEAF_MNODE)) {\n           throw new PathAlreadyExistException(cur.getFullPath());\n         }\n"}}, {"oid": "38fa1e1aeb19bf5852ebfe6b6507a6e3befacfad", "url": "https://github.com/apache/iotdb/commit/38fa1e1aeb19bf5852ebfe6b6507a6e3befacfad", "message": "Merge remote-tracking branch 'upstream/new_series_reader' into mmanager\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/query/timegenerator/ServerTimeGenerator.java", "committedDate": "2020-02-18T10:09:59Z", "type": "commit"}, {"oid": "2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "url": "https://github.com/apache/iotdb/commit/2029fe5fb2377a4e0a7bb30c9bbce99ba9214840", "message": "Solve conflict and fix some review suggestions", "committedDate": "2020-02-18T12:48:07Z", "type": "commit"}, {"oid": "11483daf61c4db8282ea16269bb60fa8003c410e", "url": "https://github.com/apache/iotdb/commit/11483daf61c4db8282ea16269bb60fa8003c410e", "message": "Add StorageGroupMNode", "committedDate": "2020-02-19T03:07:15Z", "type": "commit"}, {"oid": "91aeabe1669987fc7b5642c70786b74eb71e8528", "url": "https://github.com/apache/iotdb/commit/91aeabe1669987fc7b5642c70786b74eb71e8528", "message": "Move storage group name into StorageGroupMNode", "committedDate": "2020-02-19T05:15:47Z", "type": "commit"}, {"oid": "9cd68b47387718bbd1fb10c1a5ca01413beed206", "url": "https://github.com/apache/iotdb/commit/9cd68b47387718bbd1fb10c1a5ca01413beed206", "message": "refactor MTree", "committedDate": "2020-02-19T09:23:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5NjgyNg==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381096826", "bodyText": "If InternalMNode and StorageGroupMNode all return true, then this function is not needed. We could use instance of LeafMNode to check this", "author": "qiaojialin", "createdAt": "2020-02-19T06:22:55Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public class InternalMNode extends MNode {\n+\n+  private static final long serialVersionUID = 7999036474525817732L;\n+\n+  private Map<String, MNode> children;\n+\n+  public InternalMNode(String name, MNode parent) {\n+    super(name, parent);\n+    this.children = new LinkedHashMap<>();\n+  }\n+\n+  /**\n+   * check whether the MNode has children\n+   */\n+  @Override\n+  public boolean hasChildren() {\n+    return true;", "originalCommit": "91aeabe1669987fc7b5642c70786b74eb71e8528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4MDY1MA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381180650", "bodyText": "Removed.", "author": "samperson1997", "createdAt": "2020-02-19T09:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5NjgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "9cd68b47387718bbd1fb10c1a5ca01413beed206", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java\nindex ae0876e6a9..0dc6d35401 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java\n\n@@ -32,62 +32,36 @@ public class InternalMNode extends MNode {\n \n   private Map<String, MNode> children;\n \n-  public InternalMNode(String name, MNode parent) {\n-    super(name, parent);\n+  public InternalMNode(MNode parent, String name) {\n+    super(parent, name);\n     this.children = new LinkedHashMap<>();\n   }\n \n-  /**\n-   * check whether the MNode has children\n-   */\n   @Override\n   public boolean hasChildren() {\n     return true;\n   }\n \n-  /**\n-   * check whether the MNode has child with the given key\n-   *\n-   * @param childName key\n-   */\n   @Override\n   public boolean hasChild(String childName) {\n     return this.children.containsKey(childName);\n   }\n \n-  /**\n-   * add given child MNode\n-   *\n-   * @param child child MNode\n-   */\n   @Override\n   public void addChild(MNode child) {\n     this.children.put(child.getName(), child);\n   }\n \n-  /**\n-   * delete key from given child MNode\n-   *\n-   * @param key deleted child name\n-   */\n   @Override\n   public void deleteChild(String key) {\n     children.remove(key);\n   }\n \n-  /**\n-   * get the child MNode under the given key.\n-   *\n-   * @param key the queried child name\n-   */\n   @Override\n   public MNode getChild(String key) {\n     return children.get(key);\n   }\n \n-  /**\n-   * get the count of all leaves whose ancestor is current node\n-   */\n   @Override\n   public int getLeafCount() {\n     int leafCount = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5Njk0NA==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381096944", "bodyText": "why we need a serialVersionUID?", "author": "qiaojialin", "createdAt": "2020-02-19T06:23:22Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/StorageGroupMNode.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata.mnode;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * This class is the implementation of Metadata Node. One MNode instance represents one node in the\n+ * Metadata Tree\n+ */\n+public class StorageGroupMNode extends InternalMNode {\n+\n+  private static final long serialVersionUID = 7999036474525817732L;", "originalCommit": "91aeabe1669987fc7b5642c70786b74eb71e8528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3NjM5OQ==", "url": "https://github.com/apache/iotdb/pull/793#discussion_r381176399", "bodyText": "Because MNode implements Serializable interface and without a serialVersionUID field, any change to a class will make previously serialized versions unreadable.", "author": "samperson1997", "createdAt": "2020-02-19T09:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5Njk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "9cd68b47387718bbd1fb10c1a5ca01413beed206", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/StorageGroupMNode.java b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/StorageGroupMNode.java\nindex 6706155396..802633f63a 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/mnode/StorageGroupMNode.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/mnode/StorageGroupMNode.java\n\n@@ -18,7 +18,6 @@\n  */\n package org.apache.iotdb.db.metadata.mnode;\n \n-import java.util.LinkedHashMap;\n import java.util.Map;\n import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n \n"}}, {"oid": "9ca8dd2dbdf98f2015d04f2b03fc16b47d4963a3", "url": "https://github.com/apache/iotdb/commit/9ca8dd2dbdf98f2015d04f2b03fc16b47d4963a3", "message": "Remove hasChildren() method", "committedDate": "2020-02-19T09:47:27Z", "type": "forcePushed"}, {"oid": "9cd68b47387718bbd1fb10c1a5ca01413beed206", "url": "https://github.com/apache/iotdb/commit/9cd68b47387718bbd1fb10c1a5ca01413beed206", "message": "refactor MTree", "committedDate": "2020-02-19T09:23:13Z", "type": "forcePushed"}, {"oid": "c99b58bcfc9eacf657ae6bb9fc552e14f574f9f5", "url": "https://github.com/apache/iotdb/commit/c99b58bcfc9eacf657ae6bb9fc552e14f574f9f5", "message": "Remove hasChildren() method", "committedDate": "2020-02-19T10:01:49Z", "type": "commit"}, {"oid": "e187bb36cb326f1ef753229a48508e4c2885e64e", "url": "https://github.com/apache/iotdb/commit/e187bb36cb326f1ef753229a48508e4c2885e64e", "message": "Remove hasChildren() method", "committedDate": "2020-02-19T10:12:36Z", "type": "commit"}, {"oid": "3cbbb4fcb40bb6e59634158f6c33491506ab547c", "url": "https://github.com/apache/iotdb/commit/3cbbb4fcb40bb6e59634158f6c33491506ab547c", "message": "Fix some code smells", "committedDate": "2020-02-19T14:14:18Z", "type": "commit"}, {"oid": "2e1ba16d15fe2e28427ac29f1be421e3ce400b2f", "url": "https://github.com/apache/iotdb/commit/2e1ba16d15fe2e28427ac29f1be421e3ce400b2f", "message": "Merge remote-tracking branch 'upstream/new_series_reader' into mmanager", "committedDate": "2020-02-20T02:29:30Z", "type": "commit"}, {"oid": "a1935518f1a4e748bf7ed827d01f50517e755c63", "url": "https://github.com/apache/iotdb/commit/a1935518f1a4e748bf7ed827d01f50517e755c63", "message": "Rebase", "committedDate": "2020-02-20T02:30:00Z", "type": "commit"}, {"oid": "ecfda43a486cdd4b6a81aa0ba25ceea599e4e0d0", "url": "https://github.com/apache/iotdb/commit/ecfda43a486cdd4b6a81aa0ba25ceea599e4e0d0", "message": "Delete some unused check in MManager", "committedDate": "2020-02-20T04:17:13Z", "type": "commit"}, {"oid": "786a1f64ecbaf51753ae7e942c2b800ed9e695e8", "url": "https://github.com/apache/iotdb/commit/786a1f64ecbaf51753ae7e942c2b800ed9e695e8", "message": "refactor mmanager", "committedDate": "2020-02-20T14:03:07Z", "type": "commit"}, {"oid": "96e37936451efc22ad2b34ee202e06ee279c5fc5", "url": "https://github.com/apache/iotdb/commit/96e37936451efc22ad2b34ee202e06ee279c5fc5", "message": "Fix bugs and code smells", "committedDate": "2020-02-20T16:08:01Z", "type": "commit"}, {"oid": "7a223289d6d1bd46b8cf5777efa885058768ec1c", "url": "https://github.com/apache/iotdb/commit/7a223289d6d1bd46b8cf5777efa885058768ec1c", "message": "Reverse test", "committedDate": "2020-02-20T16:13:14Z", "type": "commit"}, {"oid": "9a6723269b5b00531313abcc22dc004601d2a0e7", "url": "https://github.com/apache/iotdb/commit/9a6723269b5b00531313abcc22dc004601d2a0e7", "message": "Fix tsfile WriteTest", "committedDate": "2020-02-21T00:45:02Z", "type": "commit"}, {"oid": "8f94a863f773fb99996bd44c79c5ae3d6aae7ead", "url": "https://github.com/apache/iotdb/commit/8f94a863f773fb99996bd44c79c5ae3d6aae7ead", "message": "update properties description", "committedDate": "2020-02-21T01:55:54Z", "type": "commit"}, {"oid": "f15da828888c81cbfb095164fab369b7b20ca9df", "url": "https://github.com/apache/iotdb/commit/f15da828888c81cbfb095164fab369b7b20ca9df", "message": "change setStorageGroup to shouldSet", "committedDate": "2020-02-21T01:58:10Z", "type": "commit"}, {"oid": "7bf500d93f8c9fc15fdf719c431608489fca9369", "url": "https://github.com/apache/iotdb/commit/7bf500d93f8c9fc15fdf719c431608489fca9369", "message": "move an error log to info log.(resourceLogger)", "committedDate": "2020-02-21T01:58:30Z", "type": "commit"}, {"oid": "2852a1bfda1e121fe9561bf230d2a69b68bc8b3b", "url": "https://github.com/apache/iotdb/commit/2852a1bfda1e121fe9561bf230d2a69b68bc8b3b", "message": "enable mergeLog for checking why merging is hanged", "committedDate": "2020-02-21T01:58:30Z", "type": "commit"}, {"oid": "a08a10dc3d591a52cc204a838ab1b30b1707b0bf", "url": "https://github.com/apache/iotdb/commit/a08a10dc3d591a52cc204a838ab1b30b1707b0bf", "message": "try to set stoptime as 0 to accelerate MetrcsService close", "committedDate": "2020-02-21T01:58:30Z", "type": "commit"}, {"oid": "97e3331740caf4b5187e62b42829049323268c09", "url": "https://github.com/apache/iotdb/commit/97e3331740caf4b5187e62b42829049323268c09", "message": "try to solve the bug 'if the flushing thread is too fast, the tmpMemTable.wait() may never wakeup' in TsFileProcessor syncFlush()", "committedDate": "2020-02-21T01:58:30Z", "type": "commit"}, {"oid": "7b167175b0cb2663d007e12c25a8058de55107d1", "url": "https://github.com/apache/iotdb/commit/7b167175b0cb2663d007e12c25a8058de55107d1", "message": "try to solve the bug 'if the flushing thread is too fast, the tmpMemTable.wait() may never wakeup' in TsFileProcessor syncFlush() 2", "committedDate": "2020-02-21T01:58:30Z", "type": "commit"}, {"oid": "ea1d3bb428a6acc3692ea718de99c4b7e27f1199", "url": "https://github.com/apache/iotdb/commit/ea1d3bb428a6acc3692ea718de99c4b7e27f1199", "message": "debug why 8181 is not closed", "committedDate": "2020-02-21T01:58:30Z", "type": "commit"}, {"oid": "2a5621368d262e5bdc183aae655024569b335eb1", "url": "https://github.com/apache/iotdb/commit/2a5621368d262e5bdc183aae655024569b335eb1", "message": "Fix TSFHiveInputFormatTest.testGetSplits", "committedDate": "2020-02-21T02:24:56Z", "type": "commit"}, {"oid": "101149da4890f070db8fddc9efdcff7c4899d096", "url": "https://github.com/apache/iotdb/commit/101149da4890f070db8fddc9efdcff7c4899d096", "message": "resolve conflict after merging master", "committedDate": "2020-02-23T07:21:07Z", "type": "commit"}, {"oid": "a4dfa1aee2c86993685d74c639a158d1532aaf1f", "url": "https://github.com/apache/iotdb/commit/a4dfa1aee2c86993685d74c639a158d1532aaf1f", "message": "resolve confilct", "committedDate": "2020-02-23T07:22:10Z", "type": "commit"}]}