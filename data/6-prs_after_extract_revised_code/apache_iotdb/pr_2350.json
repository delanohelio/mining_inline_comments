{"pr_number": 2350, "pr_title": "[To rel/0.11] [IOTDB-1069] restrict the flushing memtable number to avoid OOM when mem_control is disabled", "pr_createdAt": "2020-12-27T06:57:18Z", "pr_url": "https://github.com/apache/iotdb/pull/2350", "timeline": [{"oid": "f9780a9370fc46f12cee0c54560b68693e831fe7", "url": "https://github.com/apache/iotdb/commit/f9780a9370fc46f12cee0c54560b68693e831fe7", "message": "restrict flushing memtable number", "committedDate": "2020-12-23T08:20:17Z", "type": "commit"}, {"oid": "db70c362929c10d326c9047ca1ba90a1705f46ef", "url": "https://github.com/apache/iotdb/commit/db70c362929c10d326c9047ca1ba90a1705f46ef", "message": "restrict flushing memtable number", "committedDate": "2020-12-23T08:23:28Z", "type": "commit"}, {"oid": "360750937d282f47de4264df66e041caaa7afd59", "url": "https://github.com/apache/iotdb/commit/360750937d282f47de4264df66e041caaa7afd59", "message": "fix code smells", "committedDate": "2020-12-24T01:38:16Z", "type": "commit"}, {"oid": "fa02e4ef5185057477f0d9ceff57cc8c41da5e78", "url": "https://github.com/apache/iotdb/commit/fa02e4ef5185057477f0d9ceff57cc8c41da5e78", "message": "fix flushing memtable size", "committedDate": "2020-12-24T05:01:43Z", "type": "commit"}, {"oid": "c2cca41e7227c000547ea4fb5813af6684cd8170", "url": "https://github.com/apache/iotdb/commit/c2cca41e7227c000547ea4fb5813af6684cd8170", "message": "fix code smell", "committedDate": "2020-12-24T06:08:57Z", "type": "commit"}, {"oid": "3d6d89ead67e5bdd4a6a935f1c29974be070d2fe", "url": "https://github.com/apache/iotdb/commit/3d6d89ead67e5bdd4a6a935f1c29974be070d2fe", "message": "fix synchronized", "committedDate": "2020-12-24T06:28:25Z", "type": "commit"}, {"oid": "921ac8af1afd790e313d48d1b75da9e6e91d9163", "url": "https://github.com/apache/iotdb/commit/921ac8af1afd790e313d48d1b75da9e6e91d9163", "message": "change 1000 to 100", "committedDate": "2020-12-25T00:59:31Z", "type": "commit"}, {"oid": "e67c336ad1fa1b511dbb760b0de2054395c512f6", "url": "https://github.com/apache/iotdb/commit/e67c336ad1fa1b511dbb760b0de2054395c512f6", "message": "add max memtable number", "committedDate": "2020-12-25T05:49:18Z", "type": "commit"}, {"oid": "dd833f52775ffdb4a3ed9fe467f51b291c602362", "url": "https://github.com/apache/iotdb/commit/dd833f52775ffdb4a3ed9fe467f51b291c602362", "message": "change max memtable number to 0", "committedDate": "2020-12-25T08:45:49Z", "type": "commit"}, {"oid": "888c769eaf7d06fd4e4174250f3c8db00e2beb02", "url": "https://github.com/apache/iotdb/commit/888c769eaf7d06fd4e4174250f3c8db00e2beb02", "message": "add synchronized", "committedDate": "2020-12-25T09:08:35Z", "type": "commit"}, {"oid": "bd0084d06d8255f422bc790e251cc81be8edbfd2", "url": "https://github.com/apache/iotdb/commit/bd0084d06d8255f422bc790e251cc81be8edbfd2", "message": "add memtable manager", "committedDate": "2020-12-25T16:25:36Z", "type": "commit"}, {"oid": "6eeb002ce00e2bad7975633f87ca373d7259fa72", "url": "https://github.com/apache/iotdb/commit/6eeb002ce00e2bad7975633f87ca373d7259fa72", "message": "fix name", "committedDate": "2020-12-26T07:19:02Z", "type": "commit"}, {"oid": "8b17a6288536af9254b622481be4ef568bcd6c84", "url": "https://github.com/apache/iotdb/commit/8b17a6288536af9254b622481be4ef568bcd6c84", "message": "Update server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "committedDate": "2020-12-27T05:48:13Z", "type": "commit"}, {"oid": "105f38a0b5cb14108d48d391ca27bbfde14d8dc8", "url": "https://github.com/apache/iotdb/commit/105f38a0b5cb14108d48d391ca27bbfde14d8dc8", "message": "fix wait", "committedDate": "2020-12-27T06:49:41Z", "type": "commit"}, {"oid": "05c8be1c43806d96e7e42743c2b78ecb829e06b1", "url": "https://github.com/apache/iotdb/commit/05c8be1c43806d96e7e42743c2b78ecb829e06b1", "message": "Merge branch 'restrict_memtable_11' of https://github.com/apache/iotdb into restrict_memtable_11", "committedDate": "2020-12-27T06:50:29Z", "type": "commit"}, {"oid": "3abacc3acb83c584c80851acf879c9b391cec0f8", "url": "https://github.com/apache/iotdb/commit/3abacc3acb83c584c80851acf879c9b391cec0f8", "message": "code smell", "committedDate": "2020-12-27T07:07:04Z", "type": "commit"}, {"oid": "ff93f314aaac38ebc63d5610a94b0c76c4c50b73", "url": "https://github.com/apache/iotdb/commit/ff93f314aaac38ebc63d5610a94b0c76c4c50b73", "message": "fix review", "committedDate": "2020-12-28T09:09:56Z", "type": "commit"}, {"oid": "d8c751a2fd3b53db9219546e13960a9e274a829b", "url": "https://github.com/apache/iotdb/commit/d8c751a2fd3b53db9219546e13960a9e274a829b", "message": "Merge branch 'rel/0.11' of https://github.com/apache/iotdb into restrict_memtable_11", "committedDate": "2020-12-28T15:50:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1Mjc5OQ==", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549552799", "bodyText": "We shouldn't use wait without notify. We should notifyAll at \"decreaseMemtableNumber\"", "author": "SilverNarcissus", "createdAt": "2020-12-29T03:14:15Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);", "originalCommit": "d8c751a2fd3b53db9219546e13960a9e274a829b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ef9526932021e18200f422608e6ef653ca2da22", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java b/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\nindex ab0f56509..6d67b09f7 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\n\n@@ -22,6 +22,7 @@ import org.apache.iotdb.db.conf.IoTDBConfig;\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.engine.memtable.IMemTable;\n import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.apache.iotdb.db.exception.WriteProcessException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1MzM0Ng==", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549553346", "bodyText": "After interrupt. We should also throw the exception. Or this will loop forever without wait. (When enter wait with interrupt, wait will just return without wait.)", "author": "SilverNarcissus", "createdAt": "2020-12-29T03:17:20Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();", "originalCommit": "d8c751a2fd3b53db9219546e13960a9e274a829b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3OTc5MQ==", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549579791", "bodyText": "Make sense~", "author": "HTHou", "createdAt": "2020-12-29T06:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1MzM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7ef9526932021e18200f422608e6ef653ca2da22", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java b/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\nindex ab0f56509..6d67b09f7 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\n\n@@ -22,6 +22,7 @@ import org.apache.iotdb.db.conf.IoTDBConfig;\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.engine.memtable.IMemTable;\n import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.apache.iotdb.db.exception.WriteProcessException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NDc5MQ==", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549554791", "bodyText": "Also notifyAll at here", "author": "SilverNarcissus", "createdAt": "2020-12-29T03:27:07Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();\n+        }\n+        if (waitCount++ % 10 == 0) {\n+          logger.info(\"{} has waited for a memtable for {}ms\", storageGroup, waitCount * WAIT_TIME);\n+        }\n+      }\n+    }\n+  }\n+\n+  public synchronized int getCurrentMemtableNumber() {\n+    return currentMemtableNumber;\n+  }\n+\n+  public synchronized void addMemtableNumber() {\n+    currentMemtableNumber++;\n+  }\n+\n+  public synchronized void decreaseMemtableNumber() {\n+    currentMemtableNumber--;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  private boolean reachMaxMemtableNumber() {\n+    return currentMemtableNumber >= CONFIG.getMaxMemtableNumber();\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized void addOrDeleteStorageGroup(int diff) {\n+    int maxMemTableNum = CONFIG.getMaxMemtableNumber();\n+    maxMemTableNum += MEMTABLE_NUM_FOR_EACH_PARTITION \n+        * CONFIG.getConcurrentWritingTimePartition() * diff;\n+    CONFIG.setMaxMemtableNumber(maxMemTableNum);", "originalCommit": "d8c751a2fd3b53db9219546e13960a9e274a829b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ef9526932021e18200f422608e6ef653ca2da22", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java b/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\nindex ab0f56509..6d67b09f7 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\n\n@@ -22,6 +22,7 @@ import org.apache.iotdb.db.conf.IoTDBConfig;\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.engine.memtable.IMemTable;\n import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.apache.iotdb.db.exception.WriteProcessException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NDg0Nw==", "url": "https://github.com/apache/iotdb/pull/2350#discussion_r549554847", "bodyText": "NotifyAll at here", "author": "SilverNarcissus", "createdAt": "2020-12-29T03:27:31Z", "path": "server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.rescon;\n+\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.memtable.IMemTable;\n+import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MemTableManager {\n+\n+  private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MemTableManager.class);\n+\n+  private static final int WAIT_TIME = 100;\n+  public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;\n+  private int currentMemtableNumber = 0;\n+\n+  private MemTableManager() {\n+  }\n+\n+  public static MemTableManager getInstance() {\n+    return InstanceHolder.INSTANCE;\n+  }\n+\n+  /**\n+   * Called when memory control is disabled\n+   */\n+  public synchronized IMemTable getAvailableMemTable(String storageGroup) {\n+    if (!reachMaxMemtableNumber()) {\n+      currentMemtableNumber++;\n+      return new PrimitiveMemTable();\n+    } else {\n+      // wait until the total memtable number is less than the capacity of the system\n+      int waitCount = 1;\n+      while (true) {\n+        if (!reachMaxMemtableNumber()) {\n+          currentMemtableNumber++;\n+          return new PrimitiveMemTable();\n+        }\n+        try {\n+          wait(WAIT_TIME);\n+        } catch (InterruptedException e) {\n+          logger.error(\"{} fails to wait for memtables {}, continue to wait\", storageGroup, e);\n+          Thread.currentThread().interrupt();\n+        }\n+        if (waitCount++ % 10 == 0) {\n+          logger.info(\"{} has waited for a memtable for {}ms\", storageGroup, waitCount * WAIT_TIME);\n+        }\n+      }\n+    }\n+  }\n+\n+  public synchronized int getCurrentMemtableNumber() {\n+    return currentMemtableNumber;\n+  }\n+\n+  public synchronized void addMemtableNumber() {\n+    currentMemtableNumber++;\n+  }\n+\n+  public synchronized void decreaseMemtableNumber() {\n+    currentMemtableNumber--;", "originalCommit": "d8c751a2fd3b53db9219546e13960a9e274a829b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ef9526932021e18200f422608e6ef653ca2da22", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java b/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\nindex ab0f56509..6d67b09f7 100644\n--- a/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/rescon/MemTableManager.java\n\n@@ -22,6 +22,7 @@ import org.apache.iotdb.db.conf.IoTDBConfig;\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.engine.memtable.IMemTable;\n import org.apache.iotdb.db.engine.memtable.PrimitiveMemTable;\n+import org.apache.iotdb.db.exception.WriteProcessException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"oid": "7ef9526932021e18200f422608e6ef653ca2da22", "url": "https://github.com/apache/iotdb/commit/7ef9526932021e18200f422608e6ef653ca2da22", "message": "fix concurrent", "committedDate": "2020-12-29T06:37:31Z", "type": "commit"}, {"oid": "5e9bec7df5a6de27f4690a90f87240583bbf3014", "url": "https://github.com/apache/iotdb/commit/5e9bec7df5a6de27f4690a90f87240583bbf3014", "message": "Merge branch 'rel/0.11' of https://github.com/apache/iotdb into restrict_memtable_11", "committedDate": "2020-12-29T10:08:14Z", "type": "commit"}]}