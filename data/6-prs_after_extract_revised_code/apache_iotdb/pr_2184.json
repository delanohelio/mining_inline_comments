{"pr_number": 2184, "pr_title": "[IOTDB-1081] New TsFile Format", "pr_createdAt": "2020-12-04T05:38:34Z", "pr_url": "https://github.com/apache/iotdb/pull/2184", "timeline": [{"oid": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "url": "https://github.com/apache/iotdb/commit/fd747f4f56e17aca069e1e48762a3c9d39cef26d", "message": "code smell", "committedDate": "2021-01-21T01:03:35Z", "type": "commit"}, {"oid": "5d4ae00f87a80a86e19f370e53b60f351f8435b4", "url": "https://github.com/apache/iotdb/commit/5d4ae00f87a80a86e19f370e53b60f351f8435b4", "message": "bug killed", "committedDate": "2021-01-21T02:14:02Z", "type": "commit"}, {"oid": "3d01eec2597b8e313ff418746d787002c194a8ed", "url": "https://github.com/apache/iotdb/commit/3d01eec2597b8e313ff418746d787002c194a8ed", "message": "init", "committedDate": "2020-11-25T05:48:39Z", "type": "commit"}, {"oid": "314c38af5197aaf33079761021a28108e655cfbf", "url": "https://github.com/apache/iotdb/commit/314c38af5197aaf33079761021a28108e655cfbf", "message": "change some", "committedDate": "2020-11-25T06:29:30Z", "type": "commit"}, {"oid": "f51296c0bacdd711fdd519ae18db74aa26d62736", "url": "https://github.com/apache/iotdb/commit/f51296c0bacdd711fdd519ae18db74aa26d62736", "message": "some changes", "committedDate": "2020-11-25T07:46:44Z", "type": "commit"}, {"oid": "6b8a0608187ca96c8a8df481cbcd836c32f7a3c2", "url": "https://github.com/apache/iotdb/commit/6b8a0608187ca96c8a8df481cbcd836c32f7a3c2", "message": "next is to delete Edian type", "committedDate": "2020-11-26T01:50:13Z", "type": "commit"}, {"oid": "5470d7c3c1c8bb9b846fd9d755dd81fb0e1e3766", "url": "https://github.com/apache/iotdb/commit/5470d7c3c1c8bb9b846fd9d755dd81fb0e1e3766", "message": "change encode and decode way", "committedDate": "2020-11-26T03:46:46Z", "type": "commit"}, {"oid": "c0a7ee3b94c1d67a01ba74a1a5209fdadb0f6d48", "url": "https://github.com/apache/iotdb/commit/c0a7ee3b94c1d67a01ba74a1a5209fdadb0f6d48", "message": "fix compile error", "committedDate": "2020-11-26T03:54:46Z", "type": "commit"}, {"oid": "e84b33e88c80e517c376d2598c6751d1cb211451", "url": "https://github.com/apache/iotdb/commit/e84b33e88c80e517c376d2598c6751d1cb211451", "message": "debug", "committedDate": "2020-11-27T01:53:33Z", "type": "commit"}, {"oid": "57bc1b69098b5759ec4d27c996db5bca4b8585d8", "url": "https://github.com/apache/iotdb/commit/57bc1b69098b5759ec4d27c996db5bca4b8585d8", "message": "some changes", "committedDate": "2020-11-27T12:32:05Z", "type": "commit"}, {"oid": "50b9da45446e553f89adcf1b106f8e391ce34474", "url": "https://github.com/apache/iotdb/commit/50b9da45446e553f89adcf1b106f8e391ce34474", "message": "have a good day", "committedDate": "2020-11-30T12:59:58Z", "type": "commit"}, {"oid": "d5c34e8d2e378513e765779968c3b15964e9a32f", "url": "https://github.com/apache/iotdb/commit/d5c34e8d2e378513e765779968c3b15964e9a32f", "message": "fuck bug day", "committedDate": "2020-12-01T13:05:43Z", "type": "commit"}, {"oid": "0b153b20404515f69889bb77fde579f5804dd6e4", "url": "https://github.com/apache/iotdb/commit/0b153b20404515f69889bb77fde579f5804dd6e4", "message": "fix bug", "committedDate": "2020-12-02T08:03:52Z", "type": "commit"}, {"oid": "a9bed897faad28991ce219efdc30fd9d058ffa66", "url": "https://github.com/apache/iotdb/commit/a9bed897faad28991ce219efdc30fd9d058ffa66", "message": "resolve conflicts", "committedDate": "2020-12-02T08:08:38Z", "type": "commit"}, {"oid": "0e25b571dc5b5a07b94e0f702997bcb43916d18b", "url": "https://github.com/apache/iotdb/commit/0e25b571dc5b5a07b94e0f702997bcb43916d18b", "message": "add merge IT for new tsfile format", "committedDate": "2020-12-04T10:00:46Z", "type": "commit"}, {"oid": "9d0de83a001a72efe54040efd48aec9c3caf6de5", "url": "https://github.com/apache/iotdb/commit/9d0de83a001a72efe54040efd48aec9c3caf6de5", "message": "compatible with v2 tsfile", "committedDate": "2020-12-05T06:03:34Z", "type": "commit"}, {"oid": "883a0e45b453a88cf104bebcf7c546c2e774ee2c", "url": "https://github.com/apache/iotdb/commit/883a0e45b453a88cf104bebcf7c546c2e774ee2c", "message": "fix format", "committedDate": "2020-12-05T06:19:56Z", "type": "commit"}, {"oid": "7e232be48075055a9cb707637336bf0a342f18b8", "url": "https://github.com/apache/iotdb/commit/7e232be48075055a9cb707637336bf0a342f18b8", "message": "Merge branch 'NewTsFile' of https://github.com/apache/iotdb into UpgradeToolV3", "committedDate": "2020-12-05T06:21:48Z", "type": "commit"}, {"oid": "aea74ffbcbee946444a340e2c4d74b446266573e", "url": "https://github.com/apache/iotdb/commit/aea74ffbcbee946444a340e2c4d74b446266573e", "message": "code smell", "committedDate": "2020-12-05T16:19:40Z", "type": "commit"}, {"oid": "a9e9c447236719c74818a9f6e41064ed0679a628", "url": "https://github.com/apache/iotdb/commit/a9e9c447236719c74818a9f6e41064ed0679a628", "message": "fix code smell", "committedDate": "2020-12-07T08:18:09Z", "type": "commit"}, {"oid": "8430e468c7623e5be51fcdc4a0006342ef3a4d9e", "url": "https://github.com/apache/iotdb/commit/8430e468c7623e5be51fcdc4a0006342ef3a4d9e", "message": "remove some code", "committedDate": "2020-12-07T09:30:53Z", "type": "commit"}, {"oid": "f9f37e80becd8a741f74fadb4e51bbefd8f52714", "url": "https://github.com/apache/iotdb/commit/f9f37e80becd8a741f74fadb4e51bbefd8f52714", "message": "refact upgrade tool", "committedDate": "2020-12-09T07:38:01Z", "type": "commit"}, {"oid": "b08e80f7a2486fe1d1e79860775be3c32d2f3ce4", "url": "https://github.com/apache/iotdb/commit/b08e80f7a2486fe1d1e79860775be3c32d2f3ce4", "message": "fix a code smell", "committedDate": "2020-12-12T16:36:06Z", "type": "commit"}, {"oid": "a5f97ba104d1626ea412da2af259a611c2a5235a", "url": "https://github.com/apache/iotdb/commit/a5f97ba104d1626ea412da2af259a611c2a5235a", "message": "fix upgrade resource", "committedDate": "2020-12-14T02:34:45Z", "type": "commit"}, {"oid": "0aea9204f3dc6d41e7f0133d6aa366849cc02991", "url": "https://github.com/apache/iotdb/commit/0aea9204f3dc6d41e7f0133d6aa366849cc02991", "message": "change the chunkType to 5", "committedDate": "2020-12-15T01:39:28Z", "type": "commit"}, {"oid": "f65ec13301c35f22e9f93ac868fbae621525ce8d", "url": "https://github.com/apache/iotdb/commit/f65ec13301c35f22e9f93ac868fbae621525ce8d", "message": "merge master branch", "committedDate": "2020-12-15T06:56:04Z", "type": "commit"}, {"oid": "197ebfeed118ce82c8dee2161626aec684b3c916", "url": "https://github.com/apache/iotdb/commit/197ebfeed118ce82c8dee2161626aec684b3c916", "message": "fix deserialize tsdatatype", "committedDate": "2020-12-15T07:08:00Z", "type": "commit"}, {"oid": "453f46b1732ad8b321becd5e24bd9fcdb423bcf2", "url": "https://github.com/apache/iotdb/commit/453f46b1732ad8b321becd5e24bd9fcdb423bcf2", "message": "fix a tsfile ut", "committedDate": "2020-12-15T07:49:58Z", "type": "commit"}, {"oid": "51dfc6e7fce3f163d88ab936c8fd96bda58a3c7e", "url": "https://github.com/apache/iotdb/commit/51dfc6e7fce3f163d88ab936c8fd96bda58a3c7e", "message": "merge NewTsFile", "committedDate": "2020-12-15T10:01:57Z", "type": "commit"}, {"oid": "9d45b23602d9e714e30310b350e04b7ac2a14d36", "url": "https://github.com/apache/iotdb/commit/9d45b23602d9e714e30310b350e04b7ac2a14d36", "message": "fix spark ut", "committedDate": "2020-12-15T14:29:59Z", "type": "commit"}, {"oid": "45dd9bc8787493e30a9a6094685defc7ae5c5a61", "url": "https://github.com/apache/iotdb/commit/45dd9bc8787493e30a9a6094685defc7ae5c5a61", "message": "merge master", "committedDate": "2020-12-15T14:32:24Z", "type": "commit"}, {"oid": "e81aac92fc547fe9c9f1f10fc81fe2788baf5855", "url": "https://github.com/apache/iotdb/commit/e81aac92fc547fe9c9f1f10fc81fe2788baf5855", "message": "make sonar happy", "committedDate": "2020-12-15T14:54:38Z", "type": "commit"}, {"oid": "7220ae160a953524c302065aced2fd8840e63d4e", "url": "https://github.com/apache/iotdb/commit/7220ae160a953524c302065aced2fd8840e63d4e", "message": "Merge branch 'NewTsFile' of https://github.com/apache/iotdb into UpgradeToolV3", "committedDate": "2020-12-15T15:15:42Z", "type": "commit"}, {"oid": "b2e29c241d1d2a4d4dc3e9b01dd40601e34a78c6", "url": "https://github.com/apache/iotdb/commit/b2e29c241d1d2a4d4dc3e9b01dd40601e34a78c6", "message": "remove old file", "committedDate": "2020-12-16T05:18:03Z", "type": "commit"}, {"oid": "a7a148646d3f6e97206e63b0e3fa47496656c768", "url": "https://github.com/apache/iotdb/commit/a7a148646d3f6e97206e63b0e3fa47496656c768", "message": "Merge branch 'master' of https://github.com/apache/iotdb into NewTsFile", "committedDate": "2020-12-16T05:22:56Z", "type": "commit"}, {"oid": "169843d1831ee1f8b9902718fb5d55e5088fed7e", "url": "https://github.com/apache/iotdb/commit/169843d1831ee1f8b9902718fb5d55e5088fed7e", "message": "Merge branch 'NewTsFile' of https://github.com/apache/iotdb into UpgradeToolV3", "committedDate": "2020-12-16T05:24:18Z", "type": "commit"}, {"oid": "06dc16efd0aabd2b60bfc8b621d36ff0f79cad43", "url": "https://github.com/apache/iotdb/commit/06dc16efd0aabd2b60bfc8b621d36ff0f79cad43", "message": "upgrade tool works", "committedDate": "2020-12-16T07:32:18Z", "type": "commit"}, {"oid": "ae1f198adc74fdac9f811e6db6040de50b7e8331", "url": "https://github.com/apache/iotdb/commit/ae1f198adc74fdac9f811e6db6040de50b7e8331", "message": "small fix", "committedDate": "2020-12-16T07:38:19Z", "type": "commit"}, {"oid": "c0a5d5b1baf56b0070f48bbfe3b905af415b8b2d", "url": "https://github.com/apache/iotdb/commit/c0a5d5b1baf56b0070f48bbfe3b905af415b8b2d", "message": "remove unused offline upgrade shell script", "committedDate": "2020-12-16T08:21:12Z", "type": "commit"}, {"oid": "ee5a32f0c1d0beb283a877671e1767eb4e3749c2", "url": "https://github.com/apache/iotdb/commit/ee5a32f0c1d0beb283a877671e1767eb4e3749c2", "message": "merge", "committedDate": "2020-12-17T02:47:54Z", "type": "commit"}, {"oid": "ab672277b6e519170264616c3e89a5c1b413ded5", "url": "https://github.com/apache/iotdb/commit/ab672277b6e519170264616c3e89a5c1b413ded5", "message": "Merge pull request #2194 from apache/UpgradeToolV3\n\nUpgrade tool for New TsFile", "committedDate": "2020-12-17T02:50:21Z", "type": "commit"}, {"oid": "a519308a02c727f118cf8665c1bb20f8e3f40437", "url": "https://github.com/apache/iotdb/commit/a519308a02c727f118cf8665c1bb20f8e3f40437", "message": "Merge branch 'master' of https://github.com/apache/iotdb into NewTsFile", "committedDate": "2020-12-18T03:20:05Z", "type": "commit"}, {"oid": "3d5f885221e5fca68519d9af6717eacbccc0a841", "url": "https://github.com/apache/iotdb/commit/3d5f885221e5fca68519d9af6717eacbccc0a841", "message": "[IOTDB-1082] Update MetadataIndexTree structure for v0.12 (#2401)\n\n* [IOTDB-1082] Update MetadataIndexTree structure\r\n\r\n* Revert config", "committedDate": "2021-01-04T06:23:59Z", "type": "commit"}, {"oid": "1cf50bbf0e39d01ffa4a8edf1087e305b72fd3fe", "url": "https://github.com/apache/iotdb/commit/1cf50bbf0e39d01ffa4a8edf1087e305b72fd3fe", "message": "Merge branch 'master' of https://github.com/apache/iotdb into NewTsFile", "committedDate": "2021-01-04T07:04:27Z", "type": "commit"}, {"oid": "990e3a74e08a3d855a1cea89b87a3f7a3bf6577d", "url": "https://github.com/apache/iotdb/commit/990e3a74e08a3d855a1cea89b87a3f7a3bf6577d", "message": "fix test", "committedDate": "2021-01-04T07:06:47Z", "type": "commit"}, {"oid": "2536cda2582f5ad98a5d4629703574327e42b7fd", "url": "https://github.com/apache/iotdb/commit/2536cda2582f5ad98a5d4629703574327e42b7fd", "message": "Merge branch 'master' of https://github.com/apache/iotdb into NewTsFile", "committedDate": "2021-01-04T13:41:32Z", "type": "commit"}, {"oid": "235200ae7bb74300bc3b792f611a806af662e437", "url": "https://github.com/apache/iotdb/commit/235200ae7bb74300bc3b792f611a806af662e437", "message": "resolve conflicts", "committedDate": "2021-01-04T14:28:43Z", "type": "commit"}, {"oid": "efd75ea2b851205c39dcd5d4aa764548d0d46c29", "url": "https://github.com/apache/iotdb/commit/efd75ea2b851205c39dcd5d4aa764548d0d46c29", "message": "fix code smells", "committedDate": "2021-01-05T03:29:43Z", "type": "commit"}, {"oid": "94d983aec00e18f8c1b17a39e01ae4d883a7590d", "url": "https://github.com/apache/iotdb/commit/94d983aec00e18f8c1b17a39e01ae4d883a7590d", "message": "fix code smells", "committedDate": "2021-01-05T03:46:24Z", "type": "commit"}, {"oid": "3ac9e3a0f899e636d15add1b0d4ec2afa1f05f29", "url": "https://github.com/apache/iotdb/commit/3ac9e3a0f899e636d15add1b0d4ec2afa1f05f29", "message": "optimize some enum class (#2455)", "committedDate": "2021-01-08T09:37:01Z", "type": "commit"}, {"oid": "4589dae93658bf5762ac2203cd4ed928eed14e7c", "url": "https://github.com/apache/iotdb/commit/4589dae93658bf5762ac2203cd4ed928eed14e7c", "message": "merge master", "committedDate": "2021-01-14T14:26:07Z", "type": "commit"}, {"oid": "1a99d8e9cc265145441812ad26d9c57230ac89dc", "url": "https://github.com/apache/iotdb/commit/1a99d8e9cc265145441812ad26d9c57230ac89dc", "message": "fix read old tsfile", "committedDate": "2021-01-14T14:54:22Z", "type": "commit"}, {"oid": "1f7185b1d1ba178ace0c01701f971a042b88f738", "url": "https://github.com/apache/iotdb/commit/1f7185b1d1ba178ace0c01701f971a042b88f738", "message": "code smell", "committedDate": "2021-01-14T15:48:39Z", "type": "commit"}, {"oid": "06cb6695946646d64df547724f29123296553d88", "url": "https://github.com/apache/iotdb/commit/06cb6695946646d64df547724f29123296553d88", "message": "Merge remote-tracking branch 'upstream/master' into NewTsFile", "committedDate": "2021-01-15T02:15:20Z", "type": "commit"}, {"oid": "883911c0b130c87f5c7037a454a25c052c68c9ce", "url": "https://github.com/apache/iotdb/commit/883911c0b130c87f5c7037a454a25c052c68c9ce", "message": "Remove unnecessary logs", "committedDate": "2021-01-15T02:28:24Z", "type": "commit"}, {"oid": "569890025a4b2be4de94013a50105e0b27e8ff28", "url": "https://github.com/apache/iotdb/commit/569890025a4b2be4de94013a50105e0b27e8ff28", "message": "Merge pull request #2498 from wshao08/NewTsFile\n\nMerge Tsfile version delete into NewTsFile", "committedDate": "2021-01-15T02:29:46Z", "type": "commit"}, {"oid": "8dd79609e2b56a8d78b032d35538350921c91e5f", "url": "https://github.com/apache/iotdb/commit/8dd79609e2b56a8d78b032d35538350921c91e5f", "message": "remove apply version in v2", "committedDate": "2021-01-15T02:42:23Z", "type": "commit"}, {"oid": "b116c9e8521b33dd7b98c3de767ffd598ea87f5b", "url": "https://github.com/apache/iotdb/commit/b116c9e8521b33dd7b98c3de767ffd598ea87f5b", "message": "If there is only one chunk group, we should truncate it", "committedDate": "2021-01-15T08:10:39Z", "type": "commit"}, {"oid": "6533078498867d32f82fbf2c81b3787d35463b04", "url": "https://github.com/apache/iotdb/commit/6533078498867d32f82fbf2c81b3787d35463b04", "message": "fix version bug", "committedDate": "2021-01-15T09:26:56Z", "type": "commit"}, {"oid": "004a9a0cb8561befa8ae1acf27eb8fb821952493", "url": "https://github.com/apache/iotdb/commit/004a9a0cb8561befa8ae1acf27eb8fb821952493", "message": "write plan indices for upgraded file", "committedDate": "2021-01-17T07:07:04Z", "type": "commit"}, {"oid": "d8b29de1de4e2e7cd0809ad22b8a323e7c7bc077", "url": "https://github.com/apache/iotdb/commit/d8b29de1de4e2e7cd0809ad22b8a323e7c7bc077", "message": "remove merging tsfiles before upgrading", "committedDate": "2021-01-17T07:53:52Z", "type": "commit"}, {"oid": "368d98621e054747a78e4b9367fc4ab13f0334ba", "url": "https://github.com/apache/iotdb/commit/368d98621e054747a78e4b9367fc4ab13f0334ba", "message": "optimize upgrade logic", "committedDate": "2021-01-17T13:11:40Z", "type": "commit"}, {"oid": "8161da5e2cd9028ff3fbc554f040e298d55b08b1", "url": "https://github.com/apache/iotdb/commit/8161da5e2cd9028ff3fbc554f040e298d55b08b1", "message": "fix sonar bug", "committedDate": "2021-01-17T13:22:06Z", "type": "commit"}, {"oid": "d8ff450ce840a1635ad44edb14621e6d67a24768", "url": "https://github.com/apache/iotdb/commit/d8ff450ce840a1635ad44edb14621e6d67a24768", "message": "Merge branch 'master' of https://github.com/apache/iotdb into NewTsFile", "committedDate": "2021-01-17T14:40:16Z", "type": "commit"}, {"oid": "f910562f33b9b4f4c17c74f63ea83843a6127bad", "url": "https://github.com/apache/iotdb/commit/f910562f33b9b4f4c17c74f63ea83843a6127bad", "message": "serialize upgraded resource", "committedDate": "2021-01-18T01:09:29Z", "type": "commit"}, {"oid": "b389da33961cce1852b8acc3a691dfea75630f54", "url": "https://github.com/apache/iotdb/commit/b389da33961cce1852b8acc3a691dfea75630f54", "message": "fix a small bug and add TsFile change list", "committedDate": "2021-01-18T02:14:55Z", "type": "commit"}, {"oid": "35f7ea50b9576f32f111da53977a3653b077bdbf", "url": "https://github.com/apache/iotdb/commit/35f7ea50b9576f32f111da53977a3653b077bdbf", "message": "fix some code smell", "committedDate": "2021-01-18T05:37:58Z", "type": "commit"}, {"oid": "fd7fd8583117662911b98346feb87c2c28fa406b", "url": "https://github.com/apache/iotdb/commit/fd7fd8583117662911b98346feb87c2c28fa406b", "message": "add applyVersion back for qurey old TsFile", "committedDate": "2021-01-18T07:46:45Z", "type": "commit"}, {"oid": "df466bb26dfea4c55d944e824b2c2aa4c8e92a60", "url": "https://github.com/apache/iotdb/commit/df466bb26dfea4c55d944e824b2c2aa4c8e92a60", "message": "finish upgrading modification", "committedDate": "2021-01-18T13:31:49Z", "type": "commit"}, {"oid": "17fabcb7ac1a0921991d4a0e0f1e634053e59cfe", "url": "https://github.com/apache/iotdb/commit/17fabcb7ac1a0921991d4a0e0f1e634053e59cfe", "message": "Merge branch 'NewTsFile' of https://github.com/apache/iotdb into NewTsFile", "committedDate": "2021-01-18T13:32:10Z", "type": "commit"}, {"oid": "89865a5d13faa35a55eb6f0207e2cb1ac5f0f158", "url": "https://github.com/apache/iotdb/commit/89865a5d13faa35a55eb6f0207e2cb1ac5f0f158", "message": "code smells", "committedDate": "2021-01-18T14:15:53Z", "type": "commit"}, {"oid": "c0af57ba9905491d94d979de990280329a2cf97d", "url": "https://github.com/apache/iotdb/commit/c0af57ba9905491d94d979de990280329a2cf97d", "message": "disable deletion when old files is upgrading", "committedDate": "2021-01-18T14:42:04Z", "type": "commit"}, {"oid": "2e0c710d0ca30b140c54621c046ad1f95a767d21", "url": "https://github.com/apache/iotdb/commit/2e0c710d0ca30b140c54621c046ad1f95a767d21", "message": "remove a useless method", "committedDate": "2021-01-18T15:38:05Z", "type": "commit"}, {"oid": "55e8c041d218e6294e2a194c1a7c33babf5ce54e", "url": "https://github.com/apache/iotdb/commit/55e8c041d218e6294e2a194c1a7c33babf5ce54e", "message": "fix TsFileSequenceRead and tsFileSketchTool", "committedDate": "2021-01-18T16:46:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUwNTcyNw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559505727", "bodyText": "The comments belong to line 369.", "author": "jixuan1989", "createdAt": "2021-01-18T11:39:25Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -334,18 +342,117 @@ private void checkUnClosedTsFileV2InFolders(List<String> folders) {\n           if (!partitionDir.isDirectory()) {\n             continue;\n           }\n-          File[] tsfiles = FSFactoryProducer.getFSFactory()\n-            .listFilesBySuffix(partitionDir.toString(), TsFileConstant.TSFILE_SUFFIX);\n-          File[] resources = FSFactoryProducer.getFSFactory()\n-            .listFilesBySuffix(partitionDir.toString(), TsFileResource.RESOURCE_SUFFIX);\n+          File[] tsfiles = fsFactory\n+              .listFilesBySuffix(partitionDir.toString(), TsFileConstant.TSFILE_SUFFIX);\n+          File[] resources = fsFactory\n+              .listFilesBySuffix(partitionDir.toString(), TsFileResource.RESOURCE_SUFFIX);\n           if (tsfiles.length != resources.length) {\n-            logger.error(\"Unclosed Version-2 TsFile detected, please run 'flush' on v0.10 IoTDB\"\n-              + \" before upgrading to v0.11\");\n-            System.exit(-1);\n+            // If upgrading from v0.11.2 to v0.12, there may be some Unclosed merging files.", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg2ODI5OA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559868298", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2021-01-19T01:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUwNTcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\nindex 106219dd44..ef33e6d8b6 100644\n--- a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\n+++ b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\n\n@@ -347,33 +356,36 @@ public class IoTDBConfigCheck {\n           File[] resources = fsFactory\n               .listFilesBySuffix(partitionDir.toString(), TsFileResource.RESOURCE_SUFFIX);\n           if (tsfiles.length != resources.length) {\n-            // If upgrading from v0.11.2 to v0.12, there may be some Unclosed merging files.\n-            // We have to delete these files before upgrading\n-            File[] unmergedTsfiles = fsFactory\n+            File[] zeroLevelTsFiles = fsFactory\n                 .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileConstant.TSFILE_SUFFIX);\n-            File[] unmergedResources = fsFactory\n+            File[] zeroLevelResources = fsFactory\n                 .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileResource.RESOURCE_SUFFIX);\n-            if (unmergedTsfiles.length != unmergedResources.length) {\n+            if (zeroLevelTsFiles.length != zeroLevelResources.length) {\n               logger.error(\"Unclosed Version-2 TsFile detected, please stop insertion, then run 'flush' \"\n                   + \"on v0.11 IoTDB before upgrading to v0.12\");\n               System.exit(-1);\n             }\n-            deleteMergeingTsFiles(tsfiles, resources);\n           }\n         }\n       }\n     }\n   }\n \n-  private void deleteMergeingTsFiles(File[] tsfiles, File[] resources) {\n+  /**\n+   * If upgrading from v0.11.2 to v0.12, there may be some unsealed merging files.\n+   * We have to delete these files before upgrading.\n+   */\n+  private void deleteMergingTsFiles(File[] tsfiles, File[] resources) {\n     Set<String> resourcesSet = new HashSet<>();\n     for (File resource : resources) {\n       resourcesSet.add(resource.getName());\n     }\n     for (File tsfile : tsfiles) {\n       if (!resourcesSet.contains(tsfile.getName() + TsFileResource.RESOURCE_SUFFIX)) {\n-        if (!tsfile.delete()) {\n-          logger.error(\"Failed to delete merging tsfile {}\", tsfile);\n+        try {\n+          Files.delete(tsfile.toPath());\n+        } catch (Exception e) {\n+          logger.error(\"Failed to delete merging tsfile {} \", tsfile, e);\n           System.exit(-1);\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUwNjQwMA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559506400", "bodyText": "Point out that the upgrade tool will remove all files that having no resources, no matter whether they are complete tsfiles or in-merging files.", "author": "jixuan1989", "createdAt": "2021-01-18T11:40:43Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -334,18 +342,117 @@ private void checkUnClosedTsFileV2InFolders(List<String> folders) {\n           if (!partitionDir.isDirectory()) {\n             continue;\n           }\n-          File[] tsfiles = FSFactoryProducer.getFSFactory()\n-            .listFilesBySuffix(partitionDir.toString(), TsFileConstant.TSFILE_SUFFIX);\n-          File[] resources = FSFactoryProducer.getFSFactory()\n-            .listFilesBySuffix(partitionDir.toString(), TsFileResource.RESOURCE_SUFFIX);\n+          File[] tsfiles = fsFactory\n+              .listFilesBySuffix(partitionDir.toString(), TsFileConstant.TSFILE_SUFFIX);\n+          File[] resources = fsFactory\n+              .listFilesBySuffix(partitionDir.toString(), TsFileResource.RESOURCE_SUFFIX);\n           if (tsfiles.length != resources.length) {\n-            logger.error(\"Unclosed Version-2 TsFile detected, please run 'flush' on v0.10 IoTDB\"\n-              + \" before upgrading to v0.11\");\n-            System.exit(-1);\n+            // If upgrading from v0.11.2 to v0.12, there may be some Unclosed merging files.\n+            // We have to delete these files before upgrading\n+            File[] unmergedTsfiles = fsFactory\n+                .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileConstant.TSFILE_SUFFIX);\n+            File[] unmergedResources = fsFactory\n+                .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileResource.RESOURCE_SUFFIX);\n+            if (unmergedTsfiles.length != unmergedResources.length) {\n+              logger.error(\"Unclosed Version-2 TsFile detected, please stop insertion, then run 'flush' \"\n+                  + \"on v0.11 IoTDB before upgrading to v0.12\");\n+              System.exit(-1);\n+            }\n+            deleteMergeingTsFiles(tsfiles, resources);\n           }\n         }\n       }\n     }\n   }\n+\n+  private void deleteMergeingTsFiles(File[] tsfiles, File[] resources) {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg2OTU1Ng==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559869556", "bodyText": "eh... actually we won't remove level-0 tsfiles, even they may not have resources.. In this case, the log will guide users to  re-start 0.11 and run flush manually to seal those level-0 files.", "author": "HTHou", "createdAt": "2021-01-19T02:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUwNjQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\nindex 106219dd44..ef33e6d8b6 100644\n--- a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\n+++ b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\n\n@@ -347,33 +356,36 @@ public class IoTDBConfigCheck {\n           File[] resources = fsFactory\n               .listFilesBySuffix(partitionDir.toString(), TsFileResource.RESOURCE_SUFFIX);\n           if (tsfiles.length != resources.length) {\n-            // If upgrading from v0.11.2 to v0.12, there may be some Unclosed merging files.\n-            // We have to delete these files before upgrading\n-            File[] unmergedTsfiles = fsFactory\n+            File[] zeroLevelTsFiles = fsFactory\n                 .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileConstant.TSFILE_SUFFIX);\n-            File[] unmergedResources = fsFactory\n+            File[] zeroLevelResources = fsFactory\n                 .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileResource.RESOURCE_SUFFIX);\n-            if (unmergedTsfiles.length != unmergedResources.length) {\n+            if (zeroLevelTsFiles.length != zeroLevelResources.length) {\n               logger.error(\"Unclosed Version-2 TsFile detected, please stop insertion, then run 'flush' \"\n                   + \"on v0.11 IoTDB before upgrading to v0.12\");\n               System.exit(-1);\n             }\n-            deleteMergeingTsFiles(tsfiles, resources);\n           }\n         }\n       }\n     }\n   }\n \n-  private void deleteMergeingTsFiles(File[] tsfiles, File[] resources) {\n+  /**\n+   * If upgrading from v0.11.2 to v0.12, there may be some unsealed merging files.\n+   * We have to delete these files before upgrading.\n+   */\n+  private void deleteMergingTsFiles(File[] tsfiles, File[] resources) {\n     Set<String> resourcesSet = new HashSet<>();\n     for (File resource : resources) {\n       resourcesSet.add(resource.getName());\n     }\n     for (File tsfile : tsfiles) {\n       if (!resourcesSet.contains(tsfile.getName() + TsFileResource.RESOURCE_SUFFIX)) {\n-        if (!tsfile.delete()) {\n-          logger.error(\"Failed to delete merging tsfile {}\", tsfile);\n+        try {\n+          Files.delete(tsfile.toPath());\n+        } catch (Exception e) {\n+          logger.error(\"Failed to delete merging tsfile {} \", tsfile, e);\n           System.exit(-1);\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUyNjA1MA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559526050", "bodyText": "replace all \"FOOTER\"s in this file", "author": "jixuan1989", "createdAt": "2021-01-18T12:16:40Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.file.header;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.file.MetaMarker;\n+import org.apache.iotdb.tsfile.read.reader.TsFileInput;\n+import org.apache.iotdb.tsfile.utils.ReadWriteForEncodingUtils;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+\n+public class ChunkGroupHeader {\n+\n+  private static final byte MARKER = MetaMarker.CHUNK_GROUP_HEADER;\n+\n+  private final String deviceID;\n+\n+  // this field does not need to be serialized.\n+  private int serializedSize;\n+\n+  /**\n+   * constructor of CHUNK_GROUP_FOOTER.", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java\nindex 429a9b43c2..e8b86d04bc 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java\n\n@@ -38,7 +38,7 @@ public class ChunkGroupHeader {\n   private int serializedSize;\n \n   /**\n-   * constructor of CHUNK_GROUP_FOOTER.\n+   * constructor of CHUNK_GROUP_HEADER.\n    *  @param deviceID       device ID\n    *\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUzMTMyMA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559531320", "bodyText": "Chunk header marker and this chunk has more than one page.", "author": "jixuan1989", "createdAt": "2021-01-18T12:26:10Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java", "diffHunk": "@@ -26,15 +26,24 @@\n  */\n public class MetaMarker {\n \n-  public static final byte CHUNK_GROUP_FOOTER = 0;\n+  public static final byte CHUNK_GROUP_HEADER = 0;\n+  /**\n+   * means this chunk has more than one page", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java\nindex d6d8d50712..74ec4a3c69 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java\n\n@@ -24,14 +24,20 @@ import java.io.IOException;\n /**\n  * MetaMarker denotes the type of headers and footers. Enum is not used for space saving.\n  */\n+@SuppressWarnings({ \"squid:S1133\" }) //Deprecated code should be removed\n public class MetaMarker {\n \n   public static final byte CHUNK_GROUP_HEADER = 0;\n   /**\n-   * means this chunk has more than one page\n+   * Chunk header marker and this chunk has more than one page.\n    */\n   public static final byte CHUNK_HEADER = 1;\n   public static final byte SEPARATOR = 2;\n+  /**\n+   * @deprecated (Since TsFile version 3, the marker VERSION is no longer used in TsFile.\n+   * It should be removed when TsFile upgrade to version 4)\n+   */\n+  @Deprecated\n   public static final byte VERSION = 3;\n   \n   // following this marker are two longs marking the minimum and maximum indices of operations\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUzMzAwMw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559533003", "bodyText": "Chunk header marker and this chunk has only one page.", "author": "jixuan1989", "createdAt": "2021-01-18T12:29:10Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java", "diffHunk": "@@ -26,15 +26,24 @@\n  */\n public class MetaMarker {\n \n-  public static final byte CHUNK_GROUP_FOOTER = 0;\n+  public static final byte CHUNK_GROUP_HEADER = 0;\n+  /**\n+   * means this chunk has more than one page\n+   */\n   public static final byte CHUNK_HEADER = 1;\n   public static final byte SEPARATOR = 2;\n   public static final byte VERSION = 3;\n+  \n   // following this marker are two longs marking the minimum and maximum indices of operations\n   // involved in the last flushed MemTable, which are generally used to support checkpoint,\n   // snapshot, or backup.\n   public static final byte OPERATION_INDEX_RANGE = 4;\n \n+  /**\n+   * means this chunk has only one page", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java\nindex d6d8d50712..74ec4a3c69 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java\n\n@@ -24,14 +24,20 @@ import java.io.IOException;\n /**\n  * MetaMarker denotes the type of headers and footers. Enum is not used for space saving.\n  */\n+@SuppressWarnings({ \"squid:S1133\" }) //Deprecated code should be removed\n public class MetaMarker {\n \n   public static final byte CHUNK_GROUP_HEADER = 0;\n   /**\n-   * means this chunk has more than one page\n+   * Chunk header marker and this chunk has more than one page.\n    */\n   public static final byte CHUNK_HEADER = 1;\n   public static final byte SEPARATOR = 2;\n+  /**\n+   * @deprecated (Since TsFile version 3, the marker VERSION is no longer used in TsFile.\n+   * It should be removed when TsFile upgrade to version 4)\n+   */\n+  @Deprecated\n   public static final byte VERSION = 3;\n   \n   // following this marker are two longs marking the minimum and maximum indices of operations\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUzMzYzNQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559533635", "bodyText": "1 and 5!", "author": "jixuan1989", "createdAt": "2021-01-18T12:30:21Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java", "diffHunk": "@@ -33,101 +34,119 @@\n \n public class ChunkHeader {\n \n+\n+  /**\n+   * 1 means this chunk has more than one page, so each page has its own page statistic 4 means this", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java\nindex a3841bb28c..e9e75446e9 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java\n\n@@ -36,7 +36,7 @@ public class ChunkHeader {\n \n \n   /**\n-   * 1 means this chunk has more than one page, so each page has its own page statistic 4 means this\n+   * 1 means this chunk has more than one page, so each page has its own page statistic 5 means this\n    * chunk has only one page, and this page has no page statistic\n    */\n   private byte chunkType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUzNzUzMA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559537530", "bodyText": "this method begins from the position behind the marker, while the deserializeFrom(ByteBufer) begins from the position of the marker.\nIt is inconsistent and hard to maintain codes.", "author": "jixuan1989", "createdAt": "2021-01-18T12:37:40Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java", "diffHunk": "@@ -33,101 +34,119 @@\n \n public class ChunkHeader {\n \n+\n+  /**\n+   * 1 means this chunk has more than one page, so each page has its own page statistic 4 means this\n+   * chunk has only one page, and this page has no page statistic\n+   */\n+  private byte chunkType;\n   private String measurementID;\n   private int dataSize;\n   private TSDataType dataType;\n   private CompressionType compressionType;\n   private TSEncoding encodingType;\n-  private int numOfPages;\n \n-  // this field does not need to be serialized.\n+  // the following fields do not need to be serialized.\n+  private int numOfPages;\n   private int serializedSize;\n \n   public ChunkHeader(String measurementID, int dataSize, TSDataType dataType,\n-      CompressionType compressionType,\n-      TSEncoding encoding, int numOfPages) {\n-    this(measurementID, dataSize, getSerializedSize(measurementID), dataType, compressionType,\n-        encoding, numOfPages);\n+      CompressionType compressionType, TSEncoding encoding, int numOfPages) {\n+    this(numOfPages <= 1 ? MetaMarker.ONLY_ONE_PAGE_CHUNK_HEADER : MetaMarker.CHUNK_HEADER,\n+        measurementID, dataSize, getSerializedSize(measurementID, dataSize), dataType,\n+        compressionType,\n+        encoding);\n+    this.numOfPages = numOfPages;\n   }\n \n-  private ChunkHeader(String measurementID, int dataSize, int headerSize, TSDataType dataType,\n-      CompressionType compressionType, TSEncoding encoding, int numOfPages) {\n+  public ChunkHeader(byte chunkType, String measurementID, int dataSize, TSDataType dataType,\n+      CompressionType compressionType, TSEncoding encoding) {\n+    this(chunkType, measurementID, dataSize, getSerializedSize(measurementID, dataSize), dataType,\n+        compressionType, encoding);\n+  }\n+\n+  public ChunkHeader(byte chunkType, String measurementID, int dataSize, int headerSize,\n+      TSDataType dataType, CompressionType compressionType, TSEncoding encoding) {\n+    this.chunkType = chunkType;\n     this.measurementID = measurementID;\n     this.dataSize = dataSize;\n     this.dataType = dataType;\n     this.compressionType = compressionType;\n-    this.numOfPages = numOfPages;\n     this.encodingType = encoding;\n     this.serializedSize = headerSize;\n   }\n \n+  /**\n+   * the exact serialized size of chunk header\n+   */\n+  public static int getSerializedSize(String measurementID, int dataSize) {\n+    int measurementIdLength = measurementID.getBytes(TSFileConfig.STRING_CHARSET).length;\n+    return Byte.BYTES // chunkType\n+        + ReadWriteForEncodingUtils.varIntSize(measurementIdLength) // measurementID length\n+        + measurementIdLength // measurementID\n+        + ReadWriteForEncodingUtils.uVarIntSize(dataSize) // dataSize\n+        + TSDataType.getSerializedSize() // dataType\n+        + CompressionType.getSerializedSize() // compressionType\n+        + TSEncoding.getSerializedSize(); // encodingType\n+  }\n+\n+  /**\n+   * The estimated serialized size of chunk header. Only used when we don't know the actual dataSize\n+   * attribute\n+   */\n   public static int getSerializedSize(String measurementID) {\n-    return Byte.BYTES // marker\n-        + Integer.BYTES // measurementID length\n-        + measurementID.getBytes(TSFileConfig.STRING_CHARSET).length // measurementID\n-        + Integer.BYTES // dataSize\n+\n+    int measurementIdLength = measurementID.getBytes(TSFileConfig.STRING_CHARSET).length;\n+    return  Byte.BYTES // chunkType\n+        + ReadWriteForEncodingUtils.varIntSize(measurementIdLength) // measurementID length\n+        + measurementIdLength // measurementID\n+        + Integer.BYTES + 1 // uVarInt dataSize\n         + TSDataType.getSerializedSize() // dataType\n         + CompressionType.getSerializedSize() // compressionType\n-        + TSEncoding.getSerializedSize() // encodingType\n-        + Integer.BYTES; // numOfPages\n+        + TSEncoding.getSerializedSize(); // encodingType\n   }\n \n   /**\n    * deserialize from inputStream.\n-   *\n-   * @param markerRead Whether the marker of the CHUNK_HEADER has been read\n    */\n-  public static ChunkHeader deserializeFrom(InputStream inputStream, boolean markerRead)\n+  public static ChunkHeader deserializeFrom(InputStream inputStream, byte chunkType)", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkzMTUyOA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559931528", "bodyText": "Yes, but we can get that from the method signature, because this method pass the marker as a parameter. And, i will add some comments for these two methods", "author": "JackieTien97", "createdAt": "2021-01-19T06:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUzNzUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java\nindex a3841bb28c..e9e75446e9 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java\n\n@@ -36,7 +36,7 @@ public class ChunkHeader {\n \n \n   /**\n-   * 1 means this chunk has more than one page, so each page has its own page statistic 4 means this\n+   * 1 means this chunk has more than one page, so each page has its own page statistic 5 means this\n    * chunk has only one page, and this page has no page statistic\n    */\n   private byte chunkType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU3ODc3OQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559578779", "bodyText": "comment why +1?", "author": "jixuan1989", "createdAt": "2021-01-18T13:49:05Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/PageHeader.java", "diffHunk": "@@ -41,25 +40,37 @@ public PageHeader(int uncompressedSize, int compressedSize, Statistics statistic\n     this.statistics = statistics;\n   }\n \n-  public static int calculatePageHeaderSizeWithoutStatistics() {\n-    return 2 * Integer.BYTES; // uncompressedSize, compressedSize\n+  /**\n+   * max page header size without statistics\n+   */\n+  public static int estimateMaxPageHeaderSizeWithoutStatistics() {\n+    return 2 * (Integer.BYTES + 1); // uncompressedSize, compressedSize", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/PageHeader.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/PageHeader.java\nindex a990430782..0ee8404082 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/PageHeader.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/PageHeader.java\n\n@@ -44,7 +44,10 @@ public class PageHeader {\n    * max page header size without statistics\n    */\n   public static int estimateMaxPageHeaderSizeWithoutStatistics() {\n-    return 2 * (Integer.BYTES + 1); // uncompressedSize, compressedSize\n+    // uncompressedSize, compressedSize\n+    // because we use unsigned varInt to encode these two integer,\n+    //each unsigned arInt will cost at most 5 bytes\n+    return 2 * (Integer.BYTES + 1);\n   }\n \n   public static PageHeader deserializeFrom(InputStream inputStream, TSDataType dataType,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYzMDQyNg==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559630426", "bodyText": "using two static Byte is better..", "author": "jixuan1989", "createdAt": "2021-01-18T15:08:15Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/TimeseriesMetadata.java", "diffHunk": "@@ -27,10 +27,17 @@\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n import org.apache.iotdb.tsfile.read.controller.IChunkMetadataLoader;\n+import org.apache.iotdb.tsfile.utils.ReadWriteForEncodingUtils;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class TimeseriesMetadata implements Accountable {\n \n+  /**\n+   * 0 means this time series has only one chunk, no need to save the statistic again in chunk metadata", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYzNDM4MQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559634381", "bodyText": "not good using for-loop", "author": "jixuan1989", "createdAt": "2021-01-18T15:14:28Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/MetadataIndexNodeType.java", "diffHunk": "@@ -42,19 +66,13 @@\n    * @return MetadataIndexNodeType\n    */\n   public static MetadataIndexNodeType deserialize(byte i) {\n-    if (i >= 4) {\n-      throw new IllegalArgumentException(\"Invalid input: \" + i);\n-    }\n-    switch (i) {\n-      case 0:\n-        return INTERNAL_DEVICE;\n-      case 1:\n-        return LEAF_DEVICE;\n-      case 2:\n-        return INTERNAL_MEASUREMENT;\n-      default:\n-        return LEAF_MEASUREMENT;\n+    for (MetadataIndexNodeType metadataIndexNodeType : MetadataIndexNodeType.values()) {\n+      if (i == metadataIndexNodeType.type) {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYzNTE2OQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559635169", "bodyText": "please double check whether the modification is correct.", "author": "jixuan1989", "createdAt": "2021-01-18T15:15:42Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/MetadataIndexConstructor.java", "diffHunk": "@@ -81,7 +80,7 @@ public static MetadataIndexNode constructMetadataIndex(Map<String, List<Timeseri\n     // if not exceed the max child nodes num, ignore the device index and directly point to the measurement\n     if (deviceMetadataIndexMap.size() <= config.getMaxDegreeOfIndexNode()) {\n       MetadataIndexNode metadataIndexNode = new MetadataIndexNode(\n-          MetadataIndexNodeType.INTERNAL_MEASUREMENT);\n+          MetadataIndexNodeType.LEAF_DEVICE);", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkzNzA2MQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559937061", "bodyText": "Correct. This modification is mentioned in our design document : )", "author": "samperson1997", "createdAt": "2021-01-19T06:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYzNTE2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY0NjM4Ng==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559646386", "bodyText": "what's the difference of using swtch-case", "author": "jixuan1989", "createdAt": "2021-01-18T15:32:23Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSEncoding.java", "diffHunk": "@@ -32,85 +46,27 @@ public static TSEncoding deserialize(short encoding) {\n     return getTsEncoding(encoding);\r\n   }\r\n \r\n-  public static byte deserializeToByte(short encoding) {\r\n-    if (encoding < 0 || 8 < encoding) {\r\n-      throw new IllegalArgumentException(\"Invalid input: \" + encoding);\r\n-    }\r\n-    return (byte) encoding;\r\n-  }\r\n \r\n   private static TSEncoding getTsEncoding(short encoding) {\r\n-    if (encoding < 0 || 8 < encoding) {\r\n-      throw new IllegalArgumentException(\"Invalid input: \" + encoding);\r\n-    }\r\n-    switch (encoding) {\r\n-      case 1:\r\n-        return PLAIN_DICTIONARY;\r\n-      case 2:\r\n-        return RLE;\r\n-      case 3:\r\n-        return DIFF;\r\n-      case 4:\r\n-        return TS_2DIFF;\r\n-      case 5:\r\n-        return BITMAP;\r\n-      case 6:\r\n-        return GORILLA_V1;\r\n-      case 7:\r\n-        return REGULAR;\r\n-      case 8:\r\n-        return GORILLA;\r\n-      default:\r\n-        return PLAIN;\r\n+    for (TSEncoding tsEncoding : TSEncoding.values()) {\r", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSEncoding.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSEncoding.java\nindex 6d016a88a4..8af115dd5d 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSEncoding.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/enums/TSEncoding.java\n\n@@ -42,12 +42,12 @@ public enum TSEncoding {\n    * @param encoding -use to determine encoding type\n    * @return -encoding type\n    */\n-  public static TSEncoding deserialize(short encoding) {\n+  public static TSEncoding deserialize(byte encoding) {\n     return getTsEncoding(encoding);\n   }\n \n \n-  private static TSEncoding getTsEncoding(short encoding) {\n+  private static TSEncoding getTsEncoding(byte encoding) {\n     for (TSEncoding tsEncoding : TSEncoding.values()) {\n       if (encoding == tsEncoding.type) {\n         return tsEncoding;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2MDUyNg==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559660526", "bodyText": "e...  it is not equal with previous version:\npublic void encode(short value, ByteArrayOutputStream out) uses varint while this function does not.", "author": "jixuan1989", "createdAt": "2021-01-18T15:53:22Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/encoder/PlainEncoder.java", "diffHunk": "@@ -66,46 +54,29 @@ public void encode(boolean value, ByteArrayOutputStream out) {\n \n   @Override\n   public void encode(short value, ByteArrayOutputStream out) {\n-    if (this.endianType == EndianType.LITTLE_ENDIAN) {\n-      out.write(value & 0xFF);\n-      out.write((value >> 8) & 0xFF);\n-    } else if (this.endianType == EndianType.BIG_ENDIAN) {\n-      out.write((value >> 8) & 0xFF);\n-      out.write(value & 0xFF);\n-    }\n+    out.write((value >> 8) & 0xFF);\n+    out.write(value & 0xFF);\n   }\n \n   @Override\n   public void encode(int value, ByteArrayOutputStream out) {\n-    if (this.endianType == EndianType.LITTLE_ENDIAN) {\n-      out.write(value & 0xFF);\n-      out.write((value >> 8) & 0xFF);\n-      out.write((value >> 16) & 0xFF);\n-      out.write((value >> 24) & 0xFF);\n-    } else if (this.endianType == EndianType.BIG_ENDIAN) {\n-      out.write((value >> 24) & 0xFF);\n-      out.write((value >> 16) & 0xFF);\n-      out.write((value >> 8) & 0xFF);\n-      out.write(value & 0xFF);\n-    }\n+    ReadWriteForEncodingUtils.writeVarInt(value, out);\n   }\n \n   @Override\n   public void encode(long value, ByteArrayOutputStream out) {\n-    if (this.endianType == EndianType.LITTLE_ENDIAN) {\n-      for (int i = 0; i < 8; i++) {\n-        out.write((byte) (((value) >> (i * 8)) & 0xFF));\n-      }\n-    } else if (this.endianType == EndianType.BIG_ENDIAN) {\n-      for (int i = 7; i >= 0; i--) {\n-        out.write((byte) (((value) >> (i * 8)) & 0xFF));\n-      }\n+    for (int i = 7; i >= 0; i--) {\n+      out.write((byte) (((value) >> (i * 8)) & 0xFF));\n     }\n   }\n \n   @Override\n   public void encode(float value, ByteArrayOutputStream out) {\n-    encode(Float.floatToIntBits(value), out);\n+    int floatInt = Float.floatToIntBits(value);", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkzOTg5MQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559939891", "bodyText": "Previous version use encode(int value , ByteArrayOutputStream out) which in the previous version is not encode it as varInt. However, in the current version encode(int value , ByteArrayOutputStream out) encode the integer as a varInt, so the encode(float value, ByteArrayOutputStream out) can no longer call that method, because we don't want our float value become a varInt.", "author": "JackieTien97", "createdAt": "2021-01-19T06:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2MDUyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2MDk3Nw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559660977", "bodyText": "contact @jt2594838  whether LITTLE_ENDIAN is not used anymore.", "author": "jixuan1989", "createdAt": "2021-01-18T15:54:05Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/encoder/PlainEncoder.java", "diffHunk": "@@ -66,46 +54,29 @@ public void encode(boolean value, ByteArrayOutputStream out) {\n \n   @Override\n   public void encode(short value, ByteArrayOutputStream out) {\n-    if (this.endianType == EndianType.LITTLE_ENDIAN) {\n-      out.write(value & 0xFF);\n-      out.write((value >> 8) & 0xFF);\n-    } else if (this.endianType == EndianType.BIG_ENDIAN) {\n-      out.write((value >> 8) & 0xFF);\n-      out.write(value & 0xFF);\n-    }\n+    out.write((value >> 8) & 0xFF);\n+    out.write(value & 0xFF);\n   }\n \n   @Override\n   public void encode(int value, ByteArrayOutputStream out) {\n-    if (this.endianType == EndianType.LITTLE_ENDIAN) {\n-      out.write(value & 0xFF);\n-      out.write((value >> 8) & 0xFF);\n-      out.write((value >> 16) & 0xFF);\n-      out.write((value >> 24) & 0xFF);\n-    } else if (this.endianType == EndianType.BIG_ENDIAN) {\n-      out.write((value >> 24) & 0xFF);\n-      out.write((value >> 16) & 0xFF);\n-      out.write((value >> 8) & 0xFF);\n-      out.write(value & 0xFF);\n-    }\n+    ReadWriteForEncodingUtils.writeVarInt(value, out);\n   }\n \n   @Override\n   public void encode(long value, ByteArrayOutputStream out) {\n-    if (this.endianType == EndianType.LITTLE_ENDIAN) {\n-      for (int i = 0; i < 8; i++) {\n-        out.write((byte) (((value) >> (i * 8)) & 0xFF));\n-      }\n-    } else if (this.endianType == EndianType.BIG_ENDIAN) {\n-      for (int i = 7; i >= 0; i--) {\n-        out.write((byte) (((value) >> (i * 8)) & 0xFF));\n-      }\n+    for (int i = 7; i >= 0; i--) {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg4MjI3Mg==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559882272", "bodyText": "There has been only one endian for a long time.", "author": "jt2594838", "createdAt": "2021-01-19T02:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2MDk3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2NjQ4OA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559666488", "bodyText": "modify javadoc:\n@return -1 or int(>=0)", "author": "jixuan1989", "createdAt": "2021-01-18T16:02:31Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteForEncodingUtils.java", "diffHunk": "@@ -98,14 +98,24 @@ public static int getLongMaxBitWidth(List<Long> list) {\n   public static int readUnsignedVarInt(InputStream in) throws IOException {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2NzIzNA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559667234", "bodyText": "by the way, how about  public static int readUnsignedVarInt(ByteBuffer buffer) (line 125)", "author": "jixuan1989", "createdAt": "2021-01-18T16:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2NjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk0NjM3NA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559946374", "bodyText": "Even if the actual value is negative, readUnsignedVarInt() will not return -1, it will return a unknown positive num.", "author": "JackieTien97", "createdAt": "2021-01-19T06:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2NjQ4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2NzM4NQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559667385", "bodyText": "correct? how about -1?", "author": "jixuan1989", "createdAt": "2021-01-18T16:04:07Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteForEncodingUtils.java", "diffHunk": "@@ -98,14 +98,24 @@ public static int getLongMaxBitWidth(List<Long> list) {\n   public static int readUnsignedVarInt(InputStream in) throws IOException {\n     int value = 0;\n     int i = 0;\n-    int b;\n-    while (((b = in.read()) & 0x80) != 0) {\n+    int b = in.read();\n+    while (b != -1 && (b & 0x80) != 0) {\n       value |= (b & 0x7F) << i;\n       i += 7;\n+      b = in.read();\n     }\n     return value | (b << i);\n   }\n \n+  public static int readVarInt(InputStream in) throws IOException {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk0NjUzMA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559946530", "bodyText": "Yes, it is right, i will add some ut for this class", "author": "JackieTien97", "createdAt": "2021-01-19T06:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2NzM4NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY2Nzk5Nw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559667997", "bodyText": "add javadoc for @return", "author": "jixuan1989", "createdAt": "2021-01-18T16:05:10Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteForEncodingUtils.java", "diffHunk": "@@ -134,12 +153,42 @@ public static int readUnsignedVarInt(ByteBuffer buffer) {\n    * @param value value to write into stream\n    * @param out   output stream\n    */\n-  public static void writeUnsignedVarInt(int value, ByteArrayOutputStream out) {\n+  public static int writeUnsignedVarInt(int value, ByteArrayOutputStream out) {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteForEncodingUtils.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteForEncodingUtils.java\nindex d3783df96a..63b3372d3b 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteForEncodingUtils.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteForEncodingUtils.java\n\n@@ -152,6 +152,7 @@ public class ReadWriteForEncodingUtils {\n    *\n    * @param value value to write into stream\n    * @param out   output stream\n+   * @return the number of bytes that the value consume.\n    */\n   public static int writeUnsignedVarInt(int value, ByteArrayOutputStream out) {\n     int position = 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3NDkzOQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559674939", "bodyText": "this method needs a lot of comments. Will review it after supplying comments.", "author": "jixuan1989", "createdAt": "2021-01-18T16:16:39Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/Chunk.java", "diffHunk": "@@ -60,12 +67,51 @@ public void setDeleteIntervalList(List<TimeRange> list) {\n     this.deleteIntervalList = list;\n   }\n \n-  public void mergeChunk(Chunk chunk) {\n-    chunkHeader.mergeChunkHeader(chunk.chunkHeader);\n-    ByteBuffer newChunkData = ByteBuffer\n-        .allocate(chunkData.array().length + chunk.chunkData.array().length);\n-    newChunkData.put(chunkData.array());\n-    newChunkData.put(chunk.chunkData.array());\n+  public void mergeChunk(Chunk chunk) throws IOException {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk1NTEzOQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559955139", "bodyText": "already add, you can start reviewing", "author": "JackieTien97", "createdAt": "2021-01-19T07:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3NDkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/Chunk.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/Chunk.java\nindex 84efd9da5d..8bb7a0837e 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/Chunk.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/Chunk.java\n\n@@ -69,47 +69,72 @@ public class Chunk implements Accountable {\n \n   public void mergeChunk(Chunk chunk) throws IOException {\n     int dataSize = 0;\n+    // from where the page data of the merged chunk starts, if -1, it means the merged chunk has more than one page\n     int offset1 = -1;\n+    // if the merged chunk has only one page, after merge with current chunk ,it will have more than page\n+    // so we should add page statistics for it\n     if (chunk.chunkHeader.getChunkType() == MetaMarker.ONLY_ONE_PAGE_CHUNK_HEADER) {\n+      // read the uncompressedSize and compressedSize of this page\n       ReadWriteForEncodingUtils.readUnsignedVarInt(chunk.chunkData);\n       ReadWriteForEncodingUtils.readUnsignedVarInt(chunk.chunkData);\n+      // record the position from which we can reuse\n       offset1 = chunk.chunkData.position();\n       chunk.chunkData.flip();\n+      // the actual size should add another page statistics size\n       dataSize += (chunk.chunkData.array().length + chunk.chunkStatistic.getSerializedSize());\n     } else {\n+      // if the merge chunk already has more than one page, we can reuse all the part of its data\n+      // the dataSize is equal to the before\n       dataSize += chunk.chunkData.array().length;\n     }\n+    // from where the page data of the current chunk starts, if -1, it means the current chunk has more than one page\n     int offset2 = -1;\n+    // if the current chunk has only one page, after merge with the merged chunk ,it will have more than page\n+    // so we should add page statistics for it\n     if (chunkHeader.getChunkType() == MetaMarker.ONLY_ONE_PAGE_CHUNK_HEADER) {\n+      // change the chunk type\n       chunkHeader.setChunkType(MetaMarker.CHUNK_HEADER);\n+      // read the uncompressedSize and compressedSize of this page\n       ReadWriteForEncodingUtils.readUnsignedVarInt(chunkData);\n       ReadWriteForEncodingUtils.readUnsignedVarInt(chunkData);\n+      // record the position from which we can reuse\n       offset2 = chunkData.position();\n       chunkData.flip();\n+      // the actual size should add another page statistics size\n       dataSize += (chunkData.array().length + chunkStatistic.getSerializedSize());\n     } else {\n+      // if the current chunk already has more than one page, we can reuse all the part of its data\n+      // the dataSize is equal to the before\n       dataSize += chunkData.array().length;\n     }\n     chunkHeader.setDataSize(dataSize);\n     ByteBuffer newChunkData = ByteBuffer.allocate(dataSize);\n+    // the current chunk has more than one page, we can use its data part directly without any changes\n     if (offset2 == -1) {\n       newChunkData.put(chunkData.array());\n-    } else {\n+    } else { // the current chunk has only one page, we need to add one page statistics for it\n       byte[] b = chunkData.array();\n+      // put the uncompressedSize and compressedSize of this page\n       newChunkData.put(b, 0, offset2);\n+      // add page statistics\n       PublicBAOS a = new PublicBAOS();\n       chunkStatistic.serialize(a);\n       newChunkData.put(a.getBuf(), 0, a.size());\n+      // put the remaining page data\n       newChunkData.put(b, offset2, b.length - offset2);\n     }\n+    // the merged chunk has more than one page, we can use its data part directly without any changes\n     if (offset1 == -1) {\n       newChunkData.put(chunk.chunkData.array());\n     } else {\n+      // put the uncompressedSize and compressedSize of this page\n       byte[] b = chunk.chunkData.array();\n       newChunkData.put(b, 0, offset1);\n+      // add page statistics\n       PublicBAOS a = new PublicBAOS();\n       chunk.chunkStatistic.serialize(a);\n       newChunkData.put(a.getBuf(), 0, a.size());\n+      // put the remaining page data\n       newChunkData.put(b, offset1, b.length - offset1);\n     }\n     chunkData = newChunkData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3NjI4Nw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559676287", "bodyText": "why add statistics here?", "author": "jixuan1989", "createdAt": "2021-01-18T16:18:52Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/Chunk.java", "diffHunk": "@@ -18,30 +18,37 @@\n  */\n package org.apache.iotdb.tsfile.read.common;\n \n+import java.io.IOException;\n import java.nio.ByteBuffer;\n-\n import java.util.List;\n import org.apache.iotdb.tsfile.common.cache.Accountable;\n+import org.apache.iotdb.tsfile.file.MetaMarker;\n import org.apache.iotdb.tsfile.file.header.ChunkHeader;\n+import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n+import org.apache.iotdb.tsfile.utils.PublicBAOS;\n+import org.apache.iotdb.tsfile.utils.ReadWriteForEncodingUtils;\n \n /**\n  * used in query.\n  */\n public class Chunk implements Accountable {\n \n   private ChunkHeader chunkHeader;\n+  private Statistics chunkStatistic;", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk0OTc2OQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559949769", "bodyText": "If the chunk has only one page, the page won't have page statistics, while constructing page of this chunk, we need to pass the chunk's statistics to the page as its page statistics.", "author": "JackieTien97", "createdAt": "2021-01-19T06:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3NjI4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3OTc4OA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559679788", "bodyText": "this method... is not thread-safe... see how other functions use the channel.", "author": "jixuan1989", "createdAt": "2021-01-18T16:24:26Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java", "diffHunk": "@@ -145,4 +146,13 @@ public void close() throws IOException {\n   public int readInt() {\n     throw new UnsupportedOperationException();\n   }\n+\n+  @Override\n+  public String readVarIntString(long offset) throws IOException {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk1OTUyOA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559959528", "bodyText": "Ok, I've changed it to be thread-safe.", "author": "JackieTien97", "createdAt": "2021-01-19T07:22:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3OTc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java\nindex ac84535c6d..b2a228cde4 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java\n\n@@ -149,10 +129,20 @@ public class LocalTsFileInput implements TsFileInput {\n \n   @Override\n   public String readVarIntString(long offset) throws IOException {\n-    long position = channel.position();\n-    channel.position(offset);\n-    String res = ReadWriteIOUtils.readVarIntString(wrapAsInputStream());\n-    channel.position(position);\n-    return res;\n+    ByteBuffer byteBuffer = ByteBuffer.allocate(5);\n+    channel.read(byteBuffer, offset);\n+    byteBuffer.flip();\n+    int strLength = ReadWriteForEncodingUtils.readVarInt(byteBuffer);\n+    if (strLength < 0) {\n+      return null;\n+    } else if (strLength == 0) {\n+      return \"\";\n+    }\n+    ByteBuffer strBuffer = ByteBuffer.allocate(strLength);\n+    int varIntLength = ReadWriteForEncodingUtils.varIntSize(strLength);\n+    byte[] bytes = new byte[strLength];\n+    channel.read(strBuffer, offset + varIntLength);\n+    strBuffer.get(bytes, 0, strLength);\n+    return new String(bytes, 0, strLength);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY4MTg2OA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559681868", "bodyText": "comment for Byte.BYTES.", "author": "jixuan1989", "createdAt": "2021-01-18T16:27:34Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java", "diffHunk": "@@ -208,10 +211,14 @@ public String readTailMagic() throws IOException {\n    * whether the file is a complete TsFile: only if the head magic and tail magic string exists.\n    */\n   public boolean isComplete() throws IOException {\n-    return tsFileInput.size() >= TSFileConfig.MAGIC_STRING.getBytes().length * 2\n-        + TSFileConfig.VERSION_NUMBER.getBytes().length\n-        && (readTailMagic().equals(readHeadMagic()) || readTailMagic()\n-        .equals(TSFileConfig.VERSION_NUMBER_V1));\n+    long size = tsFileInput.size();\n+    if (size >= TSFileConfig.MAGIC_STRING.getBytes().length * 2 + Byte.BYTES) {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java\nindex cef92ffcd1..a13ac62979 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java\n\n@@ -212,6 +212,8 @@ public class TsFileSequenceReader implements AutoCloseable {\n    */\n   public boolean isComplete() throws IOException {\n     long size = tsFileInput.size();\n+    // TSFileConfig.MAGIC_STRING.getBytes().length * 2 for two magic string\n+    // Byte.BYTES for the file version number\n     if (size >= TSFileConfig.MAGIC_STRING.getBytes().length * 2 + Byte.BYTES) {\n       String tailMagic = readTailMagic();\n       String headMagic = readHeadMagic();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY4NjQ3Mg==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559686472", "bodyText": "run index++ and curSize+= after seeriesMetadata.computeIfAbsent?", "author": "jixuan1989", "createdAt": "2021-01-18T16:35:13Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java", "diffHunk": "@@ -583,8 +593,15 @@ private int binarySearchInTimeseriesMetadataList(List<TimeseriesMetadata> timese\n     // read buffer of all ChunkMetadatas of this device\n     ByteBuffer buffer = readData(start, size);\n     Map<String, List<ChunkMetadata>> seriesMetadata = new HashMap<>();\n+    int index = 0;\n+    int curSize = timeseriesMetadataMap.get(index).getDataSizeOfChunkMetaDataList();\n     while (buffer.hasRemaining()) {\n-      ChunkMetadata chunkMetadata = ChunkMetadata.deserializeFrom(buffer);\n+      if (buffer.position() >= curSize) {", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk2NDc5Ng==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559964796", "bodyText": "Both ok, i think.", "author": "JackieTien97", "createdAt": "2021-01-19T07:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY4NjQ3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY5NTU3Nw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559695577", "bodyText": "add @deprecated annotation here?", "author": "jixuan1989", "createdAt": "2021-01-18T16:51:34Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java", "diffHunk": "@@ -26,15 +26,24 @@\n  */\n public class MetaMarker {\n \n-  public static final byte CHUNK_GROUP_FOOTER = 0;\n+  public static final byte CHUNK_GROUP_HEADER = 0;\n+  /**\n+   * means this chunk has more than one page\n+   */\n   public static final byte CHUNK_HEADER = 1;\n   public static final byte SEPARATOR = 2;\n   public static final byte VERSION = 3;", "originalCommit": "35f7ea50b9576f32f111da53977a3653b077bdbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java\nindex d6d8d50712..74ec4a3c69 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/MetaMarker.java\n\n@@ -24,14 +24,20 @@ import java.io.IOException;\n /**\n  * MetaMarker denotes the type of headers and footers. Enum is not used for space saving.\n  */\n+@SuppressWarnings({ \"squid:S1133\" }) //Deprecated code should be removed\n public class MetaMarker {\n \n   public static final byte CHUNK_GROUP_HEADER = 0;\n   /**\n-   * means this chunk has more than one page\n+   * Chunk header marker and this chunk has more than one page.\n    */\n   public static final byte CHUNK_HEADER = 1;\n   public static final byte SEPARATOR = 2;\n+  /**\n+   * @deprecated (Since TsFile version 3, the marker VERSION is no longer used in TsFile.\n+   * It should be removed when TsFile upgrade to version 4)\n+   */\n+  @Deprecated\n   public static final byte VERSION = 3;\n   \n   // following this marker are two longs marking the minimum and maximum indices of operations\n"}}, {"oid": "654b99c8a3e8b5e3f909aaf5631f8bf41463d8f1", "url": "https://github.com/apache/iotdb/commit/654b99c8a3e8b5e3f909aaf5631f8bf41463d8f1", "message": "small fix", "committedDate": "2021-01-18T17:04:59Z", "type": "commit"}, {"oid": "071e3b6da82f1a2d7f0cf74a9d6fe1c6c38e7f0c", "url": "https://github.com/apache/iotdb/commit/071e3b6da82f1a2d7f0cf74a9d6fe1c6c38e7f0c", "message": "sonar bug", "committedDate": "2021-01-18T17:43:06Z", "type": "commit"}, {"oid": "cc2ad1648cb109abe594841003e607066e113ca1", "url": "https://github.com/apache/iotdb/commit/cc2ad1648cb109abe594841003e607066e113ca1", "message": "fix typo", "committedDate": "2021-01-19T01:30:10Z", "type": "commit"}, {"oid": "65bb04b6411e8e93e78c9bd3e9bc60d8e910b73f", "url": "https://github.com/apache/iotdb/commit/65bb04b6411e8e93e78c9bd3e9bc60d8e910b73f", "message": "Merge branch 'master' of https://github.com/apache/iotdb into NewTsFile", "committedDate": "2021-01-19T02:04:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NDAxMw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559284013", "bodyText": "It seems upgradeFolder has been created in line402.", "author": "jt2594838", "createdAt": "2021-01-18T02:22:04Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -334,18 +342,117 @@ private void checkUnClosedTsFileV2InFolders(List<String> folders) {\n           if (!partitionDir.isDirectory()) {\n             continue;\n           }\n-          File[] tsfiles = FSFactoryProducer.getFSFactory()\n-            .listFilesBySuffix(partitionDir.toString(), TsFileConstant.TSFILE_SUFFIX);\n-          File[] resources = FSFactoryProducer.getFSFactory()\n-            .listFilesBySuffix(partitionDir.toString(), TsFileResource.RESOURCE_SUFFIX);\n+          File[] tsfiles = fsFactory\n+              .listFilesBySuffix(partitionDir.toString(), TsFileConstant.TSFILE_SUFFIX);\n+          File[] resources = fsFactory\n+              .listFilesBySuffix(partitionDir.toString(), TsFileResource.RESOURCE_SUFFIX);\n           if (tsfiles.length != resources.length) {\n-            logger.error(\"Unclosed Version-2 TsFile detected, please run 'flush' on v0.10 IoTDB\"\n-              + \" before upgrading to v0.11\");\n-            System.exit(-1);\n+            // If upgrading from v0.11.2 to v0.12, there may be some Unclosed merging files.\n+            // We have to delete these files before upgrading\n+            File[] unmergedTsfiles = fsFactory\n+                .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileConstant.TSFILE_SUFFIX);\n+            File[] unmergedResources = fsFactory\n+                .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileResource.RESOURCE_SUFFIX);\n+            if (unmergedTsfiles.length != unmergedResources.length) {\n+              logger.error(\"Unclosed Version-2 TsFile detected, please stop insertion, then run 'flush' \"\n+                  + \"on v0.11 IoTDB before upgrading to v0.12\");\n+              System.exit(-1);\n+            }\n+            deleteMergeingTsFiles(tsfiles, resources);\n           }\n         }\n       }\n     }\n   }\n+\n+  private void deleteMergeingTsFiles(File[] tsfiles, File[] resources) {\n+    Set<String> resourcesSet = new HashSet<>();\n+    for (File resource : resources) {\n+      resourcesSet.add(resource.getName());\n+    }\n+    for (File tsfile : tsfiles) {\n+      if (!resourcesSet.contains(tsfile.getName() + TsFileResource.RESOURCE_SUFFIX)) {\n+        if (!tsfile.delete()) {\n+          logger.error(\"Failed to delete merging tsfile {}\", tsfile);\n+          System.exit(-1);\n+        }\n+      }\n+    }\n+  }\n+\n+  private void moveTsFileV2() {\n+    moveFileToUpgradeFolder(DirectoryManager.getInstance().getAllSequenceFileFolders());\n+    moveFileToUpgradeFolder(DirectoryManager.getInstance().getAllUnSequenceFileFolders());\n+    logger.info(\"Move version-2 TsFile successfully\");\n+  }\n+\n+  @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n+  private void moveFileToUpgradeFolder(List<String> folders) {\n+    for (String baseDir : folders) {\n+      File fileFolder = fsFactory.getFile(baseDir);\n+      if (!fileFolder.isDirectory()) {\n+        continue;\n+      }\n+      for (File storageGroup : fileFolder.listFiles()) {\n+        if (!storageGroup.isDirectory()) {\n+          continue;\n+        }\n+        File upgradeFolder = fsFactory.getFile(storageGroup, IoTDBConstant.UPGRADE_FOLDER_NAME);\n+        // create upgrade directory if not exist\n+        if (upgradeFolder.mkdirs()) {\n+          logger.info(\"Upgrade Directory {} doesn't exist, create it\",\n+              upgradeFolder.getPath());\n+        } else if (!upgradeFolder.exists()) {\n+          logger.error(\"Create upgrade Directory {} failed\",\n+              upgradeFolder.getPath());\n+        }\n+        for (File partitionDir : storageGroup.listFiles()) {\n+          if (!partitionDir.isDirectory() || \n+              partitionDir.getName().equals(IoTDBConstant.UPGRADE_FOLDER_NAME)) {\n+            continue;\n+          }\n+          File[] oldTsfileArray = fsFactory\n+              .listFilesBySuffix(partitionDir.getAbsolutePath(), TsFileConstant.TSFILE_SUFFIX);\n+          File[] oldResourceFileArray = fsFactory\n+              .listFilesBySuffix(partitionDir.getAbsolutePath(), TsFileResource.RESOURCE_SUFFIX);\n+          File[] oldModificationFileArray = fsFactory\n+              .listFilesBySuffix(partitionDir.getAbsolutePath(), ModificationFile.FILE_SUFFIX);\n+          // move the old files to upgrade folder if exists\n+          if (oldTsfileArray.length != 0) {\n+            // create upgrade directory if not exist\n+            if (upgradeFolder.mkdirs()) {\n+              logger.info(\"Upgrade Directory {} doesn't exist, create it\",\n+                  upgradeFolder.getPath());\n+            } else if (!upgradeFolder.exists()) {\n+              logger.error(\"Create upgrade Directory {} failed\",\n+                  upgradeFolder.getPath());\n+            }", "originalCommit": "b389da33961cce1852b8acc3a691dfea75630f54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\nindex 106219dd44..ef33e6d8b6 100644\n--- a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\n+++ b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java\n\n@@ -347,33 +356,36 @@ public class IoTDBConfigCheck {\n           File[] resources = fsFactory\n               .listFilesBySuffix(partitionDir.toString(), TsFileResource.RESOURCE_SUFFIX);\n           if (tsfiles.length != resources.length) {\n-            // If upgrading from v0.11.2 to v0.12, there may be some Unclosed merging files.\n-            // We have to delete these files before upgrading\n-            File[] unmergedTsfiles = fsFactory\n+            File[] zeroLevelTsFiles = fsFactory\n                 .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileConstant.TSFILE_SUFFIX);\n-            File[] unmergedResources = fsFactory\n+            File[] zeroLevelResources = fsFactory\n                 .listFilesBySuffix(partitionDir.toString(), \"0\" + TsFileResource.RESOURCE_SUFFIX);\n-            if (unmergedTsfiles.length != unmergedResources.length) {\n+            if (zeroLevelTsFiles.length != zeroLevelResources.length) {\n               logger.error(\"Unclosed Version-2 TsFile detected, please stop insertion, then run 'flush' \"\n                   + \"on v0.11 IoTDB before upgrading to v0.12\");\n               System.exit(-1);\n             }\n-            deleteMergeingTsFiles(tsfiles, resources);\n           }\n         }\n       }\n     }\n   }\n \n-  private void deleteMergeingTsFiles(File[] tsfiles, File[] resources) {\n+  /**\n+   * If upgrading from v0.11.2 to v0.12, there may be some unsealed merging files.\n+   * We have to delete these files before upgrading.\n+   */\n+  private void deleteMergingTsFiles(File[] tsfiles, File[] resources) {\n     Set<String> resourcesSet = new HashSet<>();\n     for (File resource : resources) {\n       resourcesSet.add(resource.getName());\n     }\n     for (File tsfile : tsfiles) {\n       if (!resourcesSet.contains(tsfile.getName() + TsFileResource.RESOURCE_SUFFIX)) {\n-        if (!tsfile.delete()) {\n-          logger.error(\"Failed to delete merging tsfile {}\", tsfile);\n+        try {\n+          Files.delete(tsfile.toPath());\n+        } catch (Exception e) {\n+          logger.error(\"Failed to delete merging tsfile {} \", tsfile, e);\n           System.exit(-1);\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NDk2Mw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559284963", "bodyText": "Remove this if it is truly unused.", "author": "jt2594838", "createdAt": "2021-01-18T02:27:07Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1748,10 +1717,39 @@ private void upgradeTsFileResourceCallBack(TsFileResource tsFileResource) {\n           }\n         }\n       }\n-      if (StorageEngine.getInstance().countUpgradeFiles() == 0) {\n-        UpgradeSevice.getINSTANCE().stop();\n+//      if (StorageEngine.getInstance().countUpgradeFiles() == 0) {\n+//        UpgradeSevice.getINSTANCE().stop();\n+//      }", "originalCommit": "b389da33961cce1852b8acc3a691dfea75630f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkzOTgyMw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559939823", "bodyText": "removed", "author": "HTHou", "createdAt": "2021-01-19T06:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NDk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 4f83478918..7d3f114011 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -1717,9 +1851,6 @@ public class StorageGroupProcessor {\n           }\n         }\n       }\n-//      if (StorageEngine.getInstance().countUpgradeFiles() == 0) {\n-//        UpgradeSevice.getINSTANCE().stop();\n-//      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NTU0Mw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559285543", "bodyText": "Just to confirm, what if the storage group name contains a comma?", "author": "jt2594838", "createdAt": "2021-01-18T02:29:32Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1748,10 +1717,39 @@ private void upgradeTsFileResourceCallBack(TsFileResource tsFileResource) {\n           }\n         }\n       }\n-      if (StorageEngine.getInstance().countUpgradeFiles() == 0) {\n-        UpgradeSevice.getINSTANCE().stop();\n+//      if (StorageEngine.getInstance().countUpgradeFiles() == 0) {\n+//        UpgradeSevice.getINSTANCE().stop();\n+//      }\n+    }\n+  }\n+\n+  private void loadUpgradedResources(List<TsFileResource> resources, boolean isseq) {\n+    if (resources.isEmpty()) {\n+      return;\n+    }\n+    for (TsFileResource resource : resources) {\n+      try {\n+        UpgradeUtils.moveUpgradedFiles(resource);\n+        tsFileManagement.addAll(resource.getUpgradedResources(), isseq); \n+        // delete old TsFile and resource\n+        resource.delete();\n+        UpgradeLog.writeUpgradeLogFile(\n+            resource.getTsFile().getAbsolutePath() + \",\" + UpgradeCheckStatus.UPGRADE_SUCCESS);", "originalCommit": "b389da33961cce1852b8acc3a691dfea75630f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk0MTM2MQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559941361", "bodyText": "Name of storage group can only be characters, numbers and underscores.\nSee https://iotdb.apache.org/UserGuide/Master/Concept/Data%20Model%20and%20Terminology.html", "author": "HTHou", "createdAt": "2021-01-19T06:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NTU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 4f83478918..7d3f114011 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -1717,9 +1851,6 @@ public class StorageGroupProcessor {\n           }\n         }\n       }\n-//      if (StorageEngine.getInstance().countUpgradeFiles() == 0) {\n-//        UpgradeSevice.getINSTANCE().stop();\n-//      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI5MjQ0MQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559292441", "bodyText": "It would be better to add a comment and explain why such data types need decoding.", "author": "jt2594838", "createdAt": "2021-01-18T03:00:18Z", "path": "server/src/main/java/org/apache/iotdb/db/tools/upgrade/TsFileOnlineUpgradeTool.java", "diffHunk": "@@ -319,118 +104,133 @@ private ByteBuffer readData(long position, int size) throws IOException {\n    * @throws IOException, WriteProcessException\n    */\n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n-  public void upgradeFile(List<TsFileResource> upgradedResources)\n+  private void upgradeFile(List<TsFileResource> upgradedResources)\n       throws IOException, WriteProcessException {\n-    File oldTsFile = FSFactoryProducer.getFSFactory().getFile(this.file);\n \n-    // check if the old TsFile has correct header \n-    if (!fileCheck(oldTsFile)) {\n+    // check if the old TsFile has correct header\n+    if (!fileCheck()) {\n       return;\n     }\n \n+    int headerLength = TSFileConfig.MAGIC_STRING.getBytes().length +\n+        TSFileConfig.VERSION_NUMBER_V2.getBytes().length;\n+    reader.position(headerLength);\n     // start to scan chunks and chunkGroups\n     boolean newChunkGroup = true;\n-    int chunkGroupCount = 0;\n     List<List<PageHeader>> pageHeadersInChunkGroup = new ArrayList<>();\n     List<List<ByteBuffer>> pageDataInChunkGroup = new ArrayList<>();\n-    List<List<Boolean>> pagePartitionInfoInChunkGroup = new ArrayList<>();\n+    List<List<Boolean>> needToDecodeInfoInChunkGroup = new ArrayList<>();\n     byte marker;\n     List<MeasurementSchema> measurementSchemaList = new ArrayList<>();\n     try {\n-      while ((marker = this.readMarker()) != MetaMarker.SEPARATOR) {\n+      while ((marker = reader.readMarker()) != MetaMarker.SEPARATOR) {\n         switch (marker) {\n           case MetaMarker.CHUNK_HEADER:\n             // this is the first chunk of a new ChunkGroup.\n             if (newChunkGroup) {\n               newChunkGroup = false;\n             }\n-            ChunkHeader header = this.readChunkHeader();\n-            MeasurementSchema measurementSchema = new MeasurementSchema(header.getMeasurementID(),\n+            ChunkHeader header = reader.readChunkHeader();\n+            MeasurementSchema measurementSchema = new MeasurementSchema(\n+                header.getMeasurementID(),\n                 header.getDataType(),\n                 header.getEncodingType(),\n                 header.getCompressionType());\n             measurementSchemaList.add(measurementSchema);\n+            TSDataType dataType = header.getDataType();\n+            TSEncoding encoding = header.getEncodingType();\n             List<PageHeader> pageHeadersInChunk = new ArrayList<>();\n             List<ByteBuffer> dataInChunk = new ArrayList<>();\n-            List<Boolean> pagePartitionInfo = new ArrayList<>();\n+            List<Boolean> needToDecodeInfo = new ArrayList<>();\n             for (int j = 0; j < header.getNumOfPages(); j++) {\n-              PageHeader pageHeader = readPageHeader(header.getDataType());\n-              boolean pageInSamePartition = checkIfPageInSameTimePartition(pageHeader);\n-              pagePartitionInfo.add(pageInSamePartition);\n-              ByteBuffer pageData = pageInSamePartition ?\n-                  readCompressedPage(pageHeader)\n-                  : readPage(pageHeader, header.getCompressionType());\n+              // a new Page\n+              PageHeader pageHeader = reader.readPageHeader(dataType);\n+              boolean needToDecode = \n+                  checkIfNeedToDecode(dataType, encoding, pageHeader);\n+              needToDecodeInfo.add(needToDecode);\n+              ByteBuffer pageData = !needToDecode\n+                  ? reader.readCompressedPage(pageHeader) \n+                  : reader.readPage(pageHeader, header.getCompressionType());\n               pageHeadersInChunk.add(pageHeader);\n               dataInChunk.add(pageData);\n             }\n             pageHeadersInChunkGroup.add(pageHeadersInChunk);\n             pageDataInChunkGroup.add(dataInChunk);\n-            pagePartitionInfoInChunkGroup.add(pagePartitionInfo);\n+            needToDecodeInfoInChunkGroup.add(needToDecodeInfo);\n             break;\n-          case MetaMarker.CHUNK_GROUP_FOOTER:\n+          case MetaMarker.CHUNK_GROUP_HEADER:\n             // this is the footer of a ChunkGroup.\n-            ChunkGroupFooter chunkGroupFooter = this.readChunkGroupFooter();\n+            ChunkGroupHeader chunkGroupFooter = reader.readChunkGroupFooter();\n             String deviceID = chunkGroupFooter.getDeviceID();\n-            rewrite(oldTsFile, deviceID, measurementSchemaList, pageHeadersInChunkGroup,\n-                pageDataInChunkGroup, pagePartitionInfoInChunkGroup);\n-\n+            rewrite(deviceID, measurementSchemaList, pageHeadersInChunkGroup,\n+                pageDataInChunkGroup, needToDecodeInfoInChunkGroup);\n             pageHeadersInChunkGroup.clear();\n             pageDataInChunkGroup.clear();\n             measurementSchemaList.clear();\n-            pagePartitionInfoInChunkGroup.clear();\n+            needToDecodeInfoInChunkGroup.clear();\n             newChunkGroup = true;\n-            chunkGroupCount++;\n             break;\n-\n+          case MetaMarker.VERSION:\n+            reader.readVersion();\n+            // write plan indices\n+            for (TsFileIOWriter tsFileIOWriter : partitionWriterMap.values()) { \n+              tsFileIOWriter.writePlanIndices(); \n+            }\n+            break;\n           default:\n             // the disk file is corrupted, using this file may be dangerous\n-            logger.error(\"Unrecognized marker detected, this file may be corrupted\");\n-            return;\n+            throw new IOException(\"Unrecognized marker detected, \"\n+                + \"this file may be corrupted\");\n         }\n       }\n       // close upgraded tsFiles and generate resources for them\n       for (TsFileIOWriter tsFileIOWriter : partitionWriterMap.values()) {\n         upgradedResources.add(endFileAndGenerateResource(tsFileIOWriter));\n       }\n     } catch (IOException e2) {\n-      logger.info(\"TsFile upgrade process cannot proceed at position {} after {} chunk groups \"\n-          + \"recovered, because : {}\", this.position(), chunkGroupCount, e2.getMessage());\n+      throw new IOException(\"TsFile upgrade process cannot proceed at position \" +\n+          reader.position() + \"because: \" + e2.getMessage());\n     } finally {\n-      if (tsFileInput != null) {\n-        tsFileInput.close();\n+      if (reader != null) {\n+        reader.close();\n       }\n     }\n   }\n \n-  private boolean checkIfPageInSameTimePartition(PageHeader pageHeader) {\n-    return StorageEngine.getTimePartition(pageHeader.getStartTime())\n-        == StorageEngine.getTimePartition(pageHeader.getEndTime());\n+  private boolean checkIfNeedToDecode(TSDataType dataType, TSEncoding encoding,\n+      PageHeader pageHeader) {\n+    return dataType == TSDataType.BOOLEAN ||\n+        dataType == TSDataType.TEXT ||\n+        (dataType == TSDataType.INT32 && encoding == TSEncoding.PLAIN) ||", "originalCommit": "b389da33961cce1852b8acc3a691dfea75630f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk0NzY3OA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559947678", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2021-01-19T06:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI5MjQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/tools/upgrade/TsFileOnlineUpgradeTool.java b/server/src/main/java/org/apache/iotdb/db/tools/upgrade/TsFileOnlineUpgradeTool.java\nindex a45d7638a2..adbb22e1cb 100644\n--- a/server/src/main/java/org/apache/iotdb/db/tools/upgrade/TsFileOnlineUpgradeTool.java\n+++ b/server/src/main/java/org/apache/iotdb/db/tools/upgrade/TsFileOnlineUpgradeTool.java\n\n@@ -99,11 +115,11 @@ public class TsFileOnlineUpgradeTool implements AutoCloseable {\n   }\n \n   /**\n-   * upgrade file and resource\n+   * upgrade file resource\n    *\n    * @throws IOException, WriteProcessException\n    */\n-  @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n+  @SuppressWarnings({ \"squid:S3776\", \"deprecation\" }) // Suppress high Cognitive Complexity warning\n   private void upgradeFile(List<TsFileResource> upgradedResources)\n       throws IOException, WriteProcessException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI5NzA4OA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559297088", "bodyText": "String.getBytes is a bit wasteful here as the conversion result is discarded immediately, but I think maybe you can make this method non-static and cache the returned byte[] in this object, and use it when serializeTo is called.\nThe same technique may be applied to other structures where string length is calculated before actually serialized.", "author": "jt2594838", "createdAt": "2021-01-18T03:22:08Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.file.header;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.file.MetaMarker;\n+import org.apache.iotdb.tsfile.read.reader.TsFileInput;\n+import org.apache.iotdb.tsfile.utils.ReadWriteForEncodingUtils;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+\n+public class ChunkGroupHeader {\n+\n+  private static final byte MARKER = MetaMarker.CHUNK_GROUP_HEADER;\n+\n+  private final String deviceID;\n+\n+  // this field does not need to be serialized.\n+  private int serializedSize;\n+\n+  /**\n+   * constructor of CHUNK_GROUP_FOOTER.\n+   *  @param deviceID       device ID\n+   *\n+   */\n+  public ChunkGroupHeader(String deviceID) {\n+    this.deviceID = deviceID;\n+    this.serializedSize = getSerializedSize(deviceID);\n+  }\n+\n+  public static int getSerializedSize(String deviceID) {\n+    int length = deviceID.getBytes(TSFileConfig.STRING_CHARSET).length;\n+    return Byte.BYTES + ReadWriteForEncodingUtils.varIntSize(length) + length;\n+  }", "originalCommit": "b389da33961cce1852b8acc3a691dfea75630f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk2OTExMw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559969113", "bodyText": "Actually, the method is called only once in the contructor method. But you are right, this method shouldn't be a statis method, it should be a private and non-static method", "author": "JackieTien97", "createdAt": "2021-01-19T07:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI5NzA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java\nindex 429a9b43c2..e8b86d04bc 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkGroupHeader.java\n\n@@ -38,7 +38,7 @@ public class ChunkGroupHeader {\n   private int serializedSize;\n \n   /**\n-   * constructor of CHUNK_GROUP_FOOTER.\n+   * constructor of CHUNK_GROUP_HEADER.\n    *  @param deviceID       device ID\n    *\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI5ODEwNA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559298104", "bodyText": "Better to use some final static fields to explain this. And is it really necessary to use the numbers from Marker? It is confusing when you have 1 and 4, but there are no 2 and 3.", "author": "jt2594838", "createdAt": "2021-01-18T03:27:02Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java", "diffHunk": "@@ -33,101 +34,119 @@\n \n public class ChunkHeader {\n \n+\n+  /**\n+   * 1 means this chunk has more than one page, so each page has its own page statistic 4 means this\n+   * chunk has only one page, and this page has no page statistic\n+   */\n+  private byte chunkType;", "originalCommit": "b389da33961cce1852b8acc3a691dfea75630f54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java\nindex a3841bb28c..e9e75446e9 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/header/ChunkHeader.java\n\n@@ -36,7 +36,7 @@ public class ChunkHeader {\n \n \n   /**\n-   * 1 means this chunk has more than one page, so each page has its own page statistic 4 means this\n+   * 1 means this chunk has more than one page, so each page has its own page statistic 5 means this\n    * chunk has only one page, and this page has no page statistic\n    */\n   private byte chunkType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTMwMDgwMg==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559300802", "bodyText": "Better to wrap this in a more semantic way.", "author": "jt2594838", "createdAt": "2021-01-18T03:38:54Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java", "diffHunk": "@@ -142,31 +142,32 @@ public TSDataType getDataType() {\n    * @return length\n    * @throws IOException IOException\n    */\n-  public int serializeTo(OutputStream outputStream) throws IOException {\n+  public int serializeTo(OutputStream outputStream, boolean serializeStatistic) throws IOException {\n     int byteLen = 0;\n-\n-    byteLen += ReadWriteIOUtils.write(measurementUid, outputStream);\n     byteLen += ReadWriteIOUtils.write(offsetOfChunkHeader, outputStream);\n-    byteLen += ReadWriteIOUtils.write(tsDataType, outputStream);\n-    byteLen += statistics.serialize(outputStream);\n+    if (serializeStatistic) {\n+      byteLen += statistics.serialize(outputStream);\n+    }\n     return byteLen;\n   }\n \n   /**\n    * deserialize from ByteBuffer.\n    *\n-   * @param buffer ByteBuffer\n+   * @param buffer          ByteBuffer\n    * @return ChunkMetaData object\n    */\n-  public static ChunkMetadata deserializeFrom(ByteBuffer buffer) {\n+  public static ChunkMetadata deserializeFrom(ByteBuffer buffer, TimeseriesMetadata timeseriesMetadata) {\n     ChunkMetadata chunkMetaData = new ChunkMetadata();\n \n-    chunkMetaData.measurementUid = ReadWriteIOUtils.readString(buffer);\n+    chunkMetaData.measurementUid = timeseriesMetadata.getMeasurementId();\n+    chunkMetaData.tsDataType = timeseriesMetadata.getTSDataType();\n     chunkMetaData.offsetOfChunkHeader = ReadWriteIOUtils.readLong(buffer);\n-    chunkMetaData.tsDataType = ReadWriteIOUtils.readDataType(buffer);\n-\n-    chunkMetaData.statistics = Statistics.deserialize(buffer, chunkMetaData.tsDataType);\n-\n+    if (timeseriesMetadata.getTimeSeriesMetadataType() != 0) {", "originalCommit": "b389da33961cce1852b8acc3a691dfea75630f54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java\nindex 083c9e1e20..a377b7b88a 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/ChunkMetadata.java\n\n@@ -163,9 +163,13 @@ public class ChunkMetadata implements Accountable {\n     chunkMetaData.measurementUid = timeseriesMetadata.getMeasurementId();\n     chunkMetaData.tsDataType = timeseriesMetadata.getTSDataType();\n     chunkMetaData.offsetOfChunkHeader = ReadWriteIOUtils.readLong(buffer);\n+    // if the TimeSeriesMetadataType is not 0, it means it has more than one chunk\n+    // and each chunk's metadata has its own statistics\n     if (timeseriesMetadata.getTimeSeriesMetadataType() != 0) {\n       chunkMetaData.statistics = Statistics.deserialize(buffer, chunkMetaData.tsDataType);\n     } else {\n+      // if the TimeSeriesMetadataType is 0, it means it has only one chunk\n+      //and that chunk's metadata has no statistic\n       chunkMetaData.statistics = timeseriesMetadata.getStatistics();\n     }\n     return chunkMetaData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTMwMTQ3OQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559301479", "bodyText": "How about changing it to a boolean and using a more accurate name?", "author": "jt2594838", "createdAt": "2021-01-18T03:42:18Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/TimeseriesMetadata.java", "diffHunk": "@@ -27,10 +27,17 @@\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n import org.apache.iotdb.tsfile.read.controller.IChunkMetadataLoader;\n+import org.apache.iotdb.tsfile.utils.ReadWriteForEncodingUtils;\n import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class TimeseriesMetadata implements Accountable {\n \n+  /**\n+   * 0 means this time series has only one chunk, no need to save the statistic again in chunk metadata\n+   * 1 means this time series has more than one chunk, should save the statistic again in chunk metadata\n+   */\n+  private byte timeSeriesMetadataType;", "originalCommit": "b389da33961cce1852b8acc3a691dfea75630f54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg2NTY0NA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559865644", "bodyText": "If the result is read-only, Collections.emptyMap should be enough.", "author": "jt2594838", "createdAt": "2021-01-19T01:47:33Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/TsFileSequenceReader.java", "diffHunk": "@@ -567,13 +576,14 @@ private int binarySearchInTimeseriesMetadataList(List<TimeseriesMetadata> timese\n    */\n   public Map<String, List<ChunkMetadata>> readChunkMetadataInDevice(String device)\n       throws IOException {\n-    if (tsFileMetaData == null) {\n-      readFileMetadata();\n-    }\n+    readFileMetadata();\n \n     long start = 0;\n     int size = 0;\n     List<TimeseriesMetadata> timeseriesMetadataMap = getDeviceTimeseriesMetadata(device);\n+    if (timeseriesMetadataMap.isEmpty()) {\n+      return new HashMap<>();", "originalCommit": "cc2ad1648cb109abe594841003e607066e113ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3NjQ3Mw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559876473", "bodyText": "Use TsFileConfig.STRING_CHARSET.", "author": "jt2594838", "createdAt": "2021-01-19T02:28:36Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java", "diffHunk": "@@ -352,6 +352,25 @@ public static int write(String s, OutputStream outputStream) throws IOException\n     return len;\n   }\n \n+  /**\n+   * write string to outputStream.\n+   *\n+   * @return the length of string represented by byte[].\n+   */\n+  public static int writeVar(String s, OutputStream outputStream) throws IOException {\n+    int len = 0;\n+    if (s == null) {\n+      len += ReadWriteForEncodingUtils.writeVarInt(-1, outputStream);\n+      return len;\n+    }\n+\n+    byte[] bytes = s.getBytes();", "originalCommit": "cc2ad1648cb109abe594841003e607066e113ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java\nindex dda5f73c71..3858f1983b 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java\n\n@@ -364,7 +364,7 @@ public class ReadWriteIOUtils {\n       return len;\n     }\n \n-    byte[] bytes = s.getBytes();\n+    byte[] bytes = s.getBytes(TSFileConfig.STRING_CHARSET);\n     len += ReadWriteForEncodingUtils.writeVarInt(bytes.length, outputStream);\n     outputStream.write(bytes);\n     len += bytes.length;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg5NTM3MA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559895370", "bodyText": "if numberOfPages == 0, then write page0;\nelse if numberOfPages ==1, then rewrite page0 and write page1,\nelse write page_i.\nso we can reduce copy page1 data", "author": "jixuan1989", "createdAt": "2021-01-19T03:42:59Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/write/chunk/ChunkWriterImpl.java", "diffHunk": "@@ -300,7 +308,19 @@ private void checkPageSizeAndMayOpenANewPage() {\n \n   private void writePageToPageBuffer() {\n     try {\n-      pageWriter.writePageHeaderAndDataIntoBuff(pageBuffer);\n+      int size = pageWriter", "originalCommit": "cc2ad1648cb109abe594841003e607066e113ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk3NzAxMQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559977011", "bodyText": "great idea!", "author": "JackieTien97", "createdAt": "2021-01-19T08:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg5NTM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/write/chunk/ChunkWriterImpl.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/write/chunk/ChunkWriterImpl.java\nindex ccf87a6aa7..80d4e9f0b6 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/write/chunk/ChunkWriterImpl.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/write/chunk/ChunkWriterImpl.java\n\n@@ -308,18 +310,19 @@ public class ChunkWriterImpl implements IChunkWriter {\n \n   private void writePageToPageBuffer() {\n     try {\n-      int size = pageWriter\n-          .writePageHeaderAndDataIntoBuff(pageBuffer, numOfPages == 0);\n       if (numOfPages == 0) { // record the firstPageStatistics\n         this.firstPageStatistics = pageWriter.getStatistics();\n-        this.sizeWithoutStatistic = size;\n+        this.sizeWithoutStatistic = pageWriter.writePageHeaderAndDataIntoBuff(pageBuffer, true);\n       } else if (numOfPages == 1) { // put the firstPageStatistics into pageBuffer\n         byte[] b = pageBuffer.toByteArray();\n         pageBuffer.reset();\n         pageBuffer.write(b, 0, this.sizeWithoutStatistic);\n         firstPageStatistics.serialize(pageBuffer);\n         pageBuffer.write(b, this.sizeWithoutStatistic, b.length - this.sizeWithoutStatistic);\n+        pageWriter.writePageHeaderAndDataIntoBuff(pageBuffer, false);\n         firstPageStatistics = null;\n+      } else {\n+        pageWriter.writePageHeaderAndDataIntoBuff(pageBuffer, false);\n       }\n \n       // update statistics of this chunk\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg5NjIzNA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559896234", "bodyText": "check Python and Go....", "author": "jixuan1989", "createdAt": "2021-01-19T03:46:33Z", "path": "session/src/test/java/org/apache/iotdb/session/IoTDBSessionIteratorIT.java", "diffHunk": "@@ -295,7 +295,7 @@ private void prepareData() throws IoTDBConnectionException, StatementExecutionEx\n     List<TSDataType> types = new ArrayList<>();\n     for (int i = 1; i <= 6; i++) {\n       measurements.add(\"s\" + i);\n-      types.add(TSDataType.deserialize((short) (i - 1)));\n+      types.add(TSDataType.deserialize((byte) (i - 1)));", "originalCommit": "cc2ad1648cb109abe594841003e607066e113ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg5NzA1NQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559897055", "bodyText": "where to check if the user uses Version 1 (i.e., version <0.10), then reject the upgrade.", "author": "jixuan1989", "createdAt": "2021-01-19T03:49:35Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/UpgradeUtils.java", "diffHunk": "@@ -66,9 +73,9 @@ public static boolean isNeedUpgrade(TsFileResource tsFileResource) {\n     } finally {\n       tsFileResource.readUnlock();\n     }\n-    try (TsFileSequenceReader tsFileSequenceReader = new TsFileSequenceReader(\n+    try (TsFileSequenceReaderForV2 tsFileSequenceReader = new TsFileSequenceReaderForV2(\n         tsFileResource.getTsFile().getAbsolutePath())) {\n-      if (tsFileSequenceReader.readVersionNumber().equals(TSFileConfig.VERSION_NUMBER_V1)) {\n+      if (tsFileSequenceReader.readVersionNumberV2().equals(TSFileConfig.VERSION_NUMBER_V2)) {", "originalCommit": "cc2ad1648cb109abe594841003e607066e113ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI5MTg5NQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r560291895", "bodyText": "This method is only called by load external TsFile module, which is no related with the upgrade.\nWhen user uses version 1, we will check System.properties file to know the version, show the error logs and close the IoTDB server.", "author": "HTHou", "createdAt": "2021-01-19T16:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg5NzA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/utils/UpgradeUtils.java b/server/src/main/java/org/apache/iotdb/db/utils/UpgradeUtils.java\nindex 185d3703d1..e16a118b6f 100644\n--- a/server/src/main/java/org/apache/iotdb/db/utils/UpgradeUtils.java\n+++ b/server/src/main/java/org/apache/iotdb/db/utils/UpgradeUtils.java\n\n@@ -73,12 +73,15 @@ public class UpgradeUtils {\n     } finally {\n       tsFileResource.readUnlock();\n     }\n+    tsFileResource.readLock();\n     try (TsFileSequenceReaderForV2 tsFileSequenceReader = new TsFileSequenceReaderForV2(\n         tsFileResource.getTsFile().getAbsolutePath())) {\n-      if (tsFileSequenceReader.readVersionNumberV2().equals(TSFileConfig.VERSION_NUMBER_V2)) {\n+      String versionNumber = tsFileSequenceReader.readVersionNumberV2();\n+      if (versionNumber.equals(TSFileConfig.VERSION_NUMBER_V2) \n+          || versionNumber.equals(TSFileConfig.VERSION_NUMBER_V1)) {\n         return true;\n       }\n-    } catch (Exception e) {\n+    } catch (IOException e) {\n       logger.error(\"meet error when judge whether file needs to be upgraded, the file's path:{}\",\n           tsFileResource.getTsFile().getAbsolutePath(), e);\n     } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg5NzQ3Nw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559897477", "bodyText": "how about other TsFileTools", "author": "jixuan1989", "createdAt": "2021-01-19T03:51:22Z", "path": "server/src/main/java/org/apache/iotdb/db/tools/TsFileSketchTool.java", "diffHunk": "@@ -75,38 +75,33 @@ public static void main(String[] args) throws IOException {\n                 String.format(\"%20d\", TSFileConfig.MAGIC_STRING.getBytes().length)\n                         + \"|\\t[version number] \"\n                         + reader.readVersionNumber());\n+        long nextChunkGroupHeaderPos = (long) TSFileConfig.MAGIC_STRING.getBytes().length ", "originalCommit": "cc2ad1648cb109abe594841003e607066e113ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkzODU0Nw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559938547", "bodyText": "I checked the TsFileSeqenceRead in TsFile example and it works well.", "author": "HTHou", "createdAt": "2021-01-19T06:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg5NzQ3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkwMjk0Mw==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559902943", "bodyText": "\"move\" ?", "author": "jixuan1989", "createdAt": "2021-01-19T04:12:47Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -515,6 +480,11 @@ else if (upgradeFolder.exists()) {\n             Collections.addAll(tsFiles,\n                 fsFactory.listFilesBySuffix(partitionFolder.getAbsolutePath(), TSFILE_SUFFIX));\n           }\n+          else {\n+            // move ", "originalCommit": "cc2ad1648cb109abe594841003e607066e113ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk0NTIyNA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559945224", "bodyText": "Fixed", "author": "HTHou", "createdAt": "2021-01-19T06:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkwMjk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fd747f4f56e17aca069e1e48762a3c9d39cef26d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 01f5c73aa1..7d3f114011 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -481,7 +599,7 @@ public class StorageGroupProcessor {\n                 fsFactory.listFilesBySuffix(partitionFolder.getAbsolutePath(), TSFILE_SUFFIX));\n           }\n           else {\n-            // move \n+            // collect old TsFiles for upgrading\n             Collections.addAll(upgradeFiles,\n                 fsFactory.listFilesBySuffix(partitionFolder.getAbsolutePath(), TSFILE_SUFFIX));\n           }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkwMzkyNQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559903925", "bodyText": "any side-effect that only moving finished files from upgrade list to the normal fileList  after all files are upgraded?", "author": "jixuan1989", "createdAt": "2021-01-19T04:17:00Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1717,23 +1692,19 @@ private void upgradeTsFileResourceCallBack(TsFileResource tsFileResource) {\n               resource.getEndTime(device))\n       );\n     }\n-    insertLock.writeLock().lock();\n-    tsFileManagement.writeLock();\n-    try {\n-      if (tsFileResource.isSeq()) {\n-        tsFileManagement.addAll(upgradedResources, true);\n-        upgradeSeqFileList.remove(tsFileResource);\n-      } else {\n-        tsFileManagement.addAll(upgradedResources, false);\n-        upgradeUnseqFileList.remove(tsFileResource);\n+    upgradeFileCount.getAndAdd(-1);\n+    // load all upgraded resources in this sg to tsFileManagement\n+    if (upgradeFileCount.get() == 0) {", "originalCommit": "cc2ad1648cb109abe594841003e607066e113ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkwNDI5OA==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559904298", "bodyText": "So, when to stop the service?", "author": "jixuan1989", "createdAt": "2021-01-19T04:18:31Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1748,10 +1719,38 @@ private void upgradeTsFileResourceCallBack(TsFileResource tsFileResource) {\n           }\n         }\n       }\n-      if (StorageEngine.getInstance().countUpgradeFiles() == 0) {", "originalCommit": "cc2ad1648cb109abe594841003e607066e113ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkzNzc2NQ==", "url": "https://github.com/apache/iotdb/pull/2184#discussion_r559937765", "bodyText": "At the end of the runMayThrow method of UpgradeTask.", "author": "HTHou", "createdAt": "2021-01-19T06:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkwNDI5OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "cb9cc1413bb8d1046a39c67e944dec5a69371938", "url": "https://github.com/apache/iotdb/commit/cb9cc1413bb8d1046a39c67e944dec5a69371938", "message": "support virtual sg", "committedDate": "2021-01-19T06:11:08Z", "type": "commit"}, {"oid": "816b18c8af7bdbcb62528ad50e567ddc0efa9308", "url": "https://github.com/apache/iotdb/commit/816b18c8af7bdbcb62528ad50e567ddc0efa9308", "message": "fix conflicts", "committedDate": "2021-01-19T06:18:11Z", "type": "commit"}, {"oid": "c66becae613a38e794efffd8fb225ec6cdc8ec41", "url": "https://github.com/apache/iotdb/commit/c66becae613a38e794efffd8fb225ec6cdc8ec41", "message": "code smells and review", "committedDate": "2021-01-19T06:51:03Z", "type": "commit"}, {"oid": "6e875aa68c90eeaea3dc6fb269695da92cbaef8b", "url": "https://github.com/apache/iotdb/commit/6e875aa68c90eeaea3dc6fb269695da92cbaef8b", "message": "fix conflict", "committedDate": "2021-01-19T07:23:49Z", "type": "commit"}, {"oid": "682c5ad2a12b8137275d4837e4f558579cafe688", "url": "https://github.com/apache/iotdb/commit/682c5ad2a12b8137275d4837e4f558579cafe688", "message": "changes for dong ge", "committedDate": "2021-01-19T07:35:47Z", "type": "commit"}, {"oid": "e7fc7b8061e97fe5d870f0aa6ad86c87fdd5f878", "url": "https://github.com/apache/iotdb/commit/e7fc7b8061e97fe5d870f0aa6ad86c87fdd5f878", "message": "fix conflicts", "committedDate": "2021-01-19T07:40:21Z", "type": "commit"}, {"oid": "fe30ca36482d1c28bd8cf5a176f54d6b342b96bd", "url": "https://github.com/apache/iotdb/commit/fe30ca36482d1c28bd8cf5a176f54d6b342b96bd", "message": "delete merging file when move to upgrade folder", "committedDate": "2021-01-19T07:57:34Z", "type": "commit"}, {"oid": "dfbef83f9924a6b9efc598bc994cbdf200e4a3e5", "url": "https://github.com/apache/iotdb/commit/dfbef83f9924a6b9efc598bc994cbdf200e4a3e5", "message": "Merge branch 'NewTsFile' of https://github.com/apache/iotdb into NewTsFile", "committedDate": "2021-01-19T07:58:23Z", "type": "commit"}, {"oid": "99224c59cb617da53da1c0a48af8c0e824e9ba29", "url": "https://github.com/apache/iotdb/commit/99224c59cb617da53da1c0a48af8c0e824e9ba29", "message": "fix bug", "committedDate": "2021-01-19T08:21:43Z", "type": "commit"}, {"oid": "59c7391a2c49de46e00618990100466c69149c23", "url": "https://github.com/apache/iotdb/commit/59c7391a2c49de46e00618990100466c69149c23", "message": "Merge branch 'NewTsFile' of https://github.com/apache/incubator-iotdb into NewTsFile", "committedDate": "2021-01-19T08:22:03Z", "type": "commit"}, {"oid": "4680438faec260997f9b2e2e3a6db7a9ecd664e1", "url": "https://github.com/apache/iotdb/commit/4680438faec260997f9b2e2e3a6db7a9ecd664e1", "message": "Merge branch 'master' into NewTsFile", "committedDate": "2021-01-19T08:26:37Z", "type": "commit"}, {"oid": "8bf1cccd68b2fdb72d7a7f156b1a66aeb67ea670", "url": "https://github.com/apache/iotdb/commit/8bf1cccd68b2fdb72d7a7f156b1a66aeb67ea670", "message": "add miss apache header", "committedDate": "2021-01-19T08:40:59Z", "type": "commit"}, {"oid": "869405e7b3a83b98af77209961806597cf5e1c2f", "url": "https://github.com/apache/iotdb/commit/869405e7b3a83b98af77209961806597cf5e1c2f", "message": "fix isNeedUpgrade method in UpgradeUtils", "committedDate": "2021-01-19T13:30:53Z", "type": "commit"}, {"oid": "c53e1fd30ce460c3a04453bc6fedeccfedca34ee", "url": "https://github.com/apache/iotdb/commit/c53e1fd30ce460c3a04453bc6fedeccfedca34ee", "message": "fix code smell about VERSION marker", "committedDate": "2021-01-19T15:58:40Z", "type": "commit"}, {"oid": "4c2ac0ac11ec653dfb3ef7aaa83fd9e855ec0064", "url": "https://github.com/apache/iotdb/commit/4c2ac0ac11ec653dfb3ef7aaa83fd9e855ec0064", "message": "support upgrade from 0.10", "committedDate": "2021-01-20T03:13:20Z", "type": "commit"}, {"oid": "af1fb5782af10947c0976cf9a72a953f7aab6367", "url": "https://github.com/apache/iotdb/commit/af1fb5782af10947c0976cf9a72a953f7aab6367", "message": "support upgrade from 0.10", "committedDate": "2021-01-20T03:25:16Z", "type": "commit"}, {"oid": "586491634fa4cf13536cc1759ecf116e04b1280a", "url": "https://github.com/apache/iotdb/commit/586491634fa4cf13536cc1759ecf116e04b1280a", "message": "support upgrade from 0.10", "committedDate": "2021-01-20T03:25:37Z", "type": "commit"}, {"oid": "43309ebbcd8802cf50e34c5b3ff1094ff0f26e4e", "url": "https://github.com/apache/iotdb/commit/43309ebbcd8802cf50e34c5b3ff1094ff0f26e4e", "message": "Merge branch 'master' of https://github.com/apache/iotdb into NewTsFile", "committedDate": "2021-01-20T15:15:24Z", "type": "commit"}, {"oid": "c98b9919a94a5e5ac0efa3e5fc96326f457fd57e", "url": "https://github.com/apache/iotdb/commit/c98b9919a94a5e5ac0efa3e5fc96326f457fd57e", "message": "fix move version file and a latestFlushTime bug", "committedDate": "2021-01-20T16:54:21Z", "type": "commit"}, {"oid": "fafc9317cf746c3d8bdd6b54ab581296e4022834", "url": "https://github.com/apache/iotdb/commit/fafc9317cf746c3d8bdd6b54ab581296e4022834", "message": "fix move version file and a latestFlushTime bug", "committedDate": "2021-01-20T16:54:56Z", "type": "commit"}]}