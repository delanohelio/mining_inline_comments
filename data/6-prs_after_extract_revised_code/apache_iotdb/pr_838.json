{"pr_number": 838, "pr_title": "[IOTDB-429] return empty dataset instead of throw exception", "pr_createdAt": "2020-02-26T02:08:44Z", "pr_url": "https://github.com/apache/iotdb/pull/838", "timeline": [{"oid": "140827d661b7ca153f920567688ac0936b003c27", "url": "https://github.com/apache/iotdb/commit/140827d661b7ca153f920567688ac0936b003c27", "message": "return empty dataset instead of throw exception", "committedDate": "2020-02-26T02:07:50Z", "type": "commit"}, {"oid": "db1fa5ac466fa284e572db1dd34065f73e446b42", "url": "https://github.com/apache/iotdb/commit/db1fa5ac466fa284e572db1dd34065f73e446b42", "message": "add header", "committedDate": "2020-02-26T02:13:04Z", "type": "commit"}, {"oid": "d5467c92b884cb21fed2cfd4e63913f67e167940", "url": "https://github.com/apache/iotdb/commit/d5467c92b884cb21fed2cfd4e63913f67e167940", "message": "add test", "committedDate": "2020-02-26T04:12:51Z", "type": "commit"}, {"oid": "c65a696eef2a43456cee2d4ae1f504e2df1780b7", "url": "https://github.com/apache/iotdb/commit/c65a696eef2a43456cee2d4ae1f504e2df1780b7", "message": "fix test", "committedDate": "2020-02-26T05:40:11Z", "type": "commit"}, {"oid": "ae560a9cf4fa10c07bcaa9b356254d6515834193", "url": "https://github.com/apache/iotdb/commit/ae560a9cf4fa10c07bcaa9b356254d6515834193", "message": "fix test", "committedDate": "2020-02-26T05:40:32Z", "type": "commit"}, {"oid": "4627079207cce1d15f182b60ea74cd5e32479df1", "url": "https://github.com/apache/iotdb/commit/4627079207cce1d15f182b60ea74cd5e32479df1", "message": "fix align by device", "committedDate": "2020-02-26T06:51:05Z", "type": "commit"}, {"oid": "cbf9d6f7c89dd6471b7cc77fe60e9cbc0b09191c", "url": "https://github.com/apache/iotdb/commit/cbf9d6f7c89dd6471b7cc77fe60e9cbc0b09191c", "message": "fix align by device", "committedDate": "2020-02-26T06:56:50Z", "type": "commit"}, {"oid": "a56942d8819ea8663ee9ddb79c3e6ed033105bff", "url": "https://github.com/apache/iotdb/commit/a56942d8819ea8663ee9ddb79c3e6ed033105bff", "message": "fix align by device", "committedDate": "2020-02-26T06:57:05Z", "type": "commit"}, {"oid": "2ea5601fc405829a745585ef70c6ae81c940fb9d", "url": "https://github.com/apache/iotdb/commit/2ea5601fc405829a745585ef70c6ae81c940fb9d", "message": "fix align by device", "committedDate": "2020-02-26T07:06:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NDMxMQ==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384864311", "bodyText": "What if columnInfoList is null? I think you can return 0 if it is null.", "author": "JackieTien97", "createdAt": "2020-02-27T01:22:54Z", "path": "jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBResultMetadata.java", "diffHunk": "@@ -59,10 +59,7 @@ public String getColumnClassName(int arg0) throws SQLException {\n   }\n \n   @Override\n-  public int getColumnCount() throws SQLException {\n-    if (columnInfoList == null || columnInfoList.isEmpty()) {\n-      throw new SQLException(\"No column exists\");\n-    }\n+  public int getColumnCount() {\n     return columnInfoList.size();", "originalCommit": "2ea5601fc405829a745585ef70c6ae81c940fb9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2ODY3MQ==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384868671", "bodyText": "I think it is okay to have null columnInfoList, which means some error occurs. If the size columnInfoList is 0, it means it is an empty list. What do you think?", "author": "samperson1997", "createdAt": "2020-02-27T01:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NDMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3MDkxMA==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384870910", "bodyText": "Actually, in the normal process, this couldn't be null, but in case others set a null in the future, check null is better", "author": "qiaojialin", "createdAt": "2020-02-27T01:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NDMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6cfe88b4767ca0e9b9e7a173d37156f2ba04200", "chunk": "diff --git a/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBResultMetadata.java b/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBResultMetadata.java\nindex e0af511c52..b89042849c 100644\n--- a/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBResultMetadata.java\n+++ b/jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBResultMetadata.java\n\n@@ -60,7 +60,7 @@ public class IoTDBResultMetadata implements ResultSetMetaData {\n \n   @Override\n   public int getColumnCount() {\n-    return columnInfoList.size();\n+    return columnInfoList == null ? 0 : columnInfoList.size();\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NDcwNQ==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384864705", "bodyText": "If you also return 0 when it's null, like I suggested above, don't forget to change assert here.", "author": "JackieTien97", "createdAt": "2020-02-27T01:24:23Z", "path": "jdbc/src/test/java/org/apache/iotdb/jdbc/IoTDBResultMetadataTest.java", "diffHunk": "@@ -120,7 +124,7 @@ public void testGetColumnType() throws SQLException {\n     } catch (Exception e) {\n       flag = true;\n     }\n-    assertEquals(flag, true);\n+    assertTrue(flag);", "originalCommit": "2ea5601fc405829a745585ef70c6ae81c940fb9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3MjY0OQ==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384872649", "bodyText": "fixed", "author": "qiaojialin", "createdAt": "2020-02-27T01:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NDcwNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NTg3Mw==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384865873", "bodyText": "The comment here should be has an empty time column and device column", "author": "JackieTien97", "createdAt": "2020-02-27T01:28:56Z", "path": "server/src/test/java/org/apache/iotdb/db/integration/IoTDBSimpleQueryTest.java", "diffHunk": "@@ -41,6 +44,62 @@ public void tearDown() throws Exception {\n     EnvironmentUtils.cleanEnv();\n   }\n \n+  @Test\n+  public void testEmptyDataSet() throws SQLException, ClassNotFoundException {\n+    Class.forName(Config.JDBC_DRIVER_NAME);\n+    try(Connection connection = DriverManager\n+        .getConnection(Config.IOTDB_URL_PREFIX + \"127.0.0.1:6667/\", \"root\", \"root\");\n+        Statement statement = connection.createStatement()){\n+\n+      ResultSet resultSet = statement.executeQuery(\"select * from root\");\n+      // has an empty time column\n+      Assert.assertEquals(1, resultSet.getMetaData().getColumnCount());\n+      while(resultSet.next()) {\n+        fail();\n+      }\n+\n+      resultSet = statement.executeQuery(\n+          \"select count(*) from root where time >= 1 and time <= 100 group by ([0, 100), 20ms, 20ms)\");\n+      // has an empty time column\n+      Assert.assertEquals(1, resultSet.getMetaData().getColumnCount());\n+      while (resultSet.next()) {\n+        fail();\n+      }\n+\n+      resultSet = statement.executeQuery(\"select count(*) from root\");\n+      // has no column\n+      Assert.assertEquals(0, resultSet.getMetaData().getColumnCount());\n+      while(resultSet.next()) {\n+        fail();\n+      }\n+\n+      resultSet = statement.executeQuery(\"select * from root align by device\");\n+      // has time and device columns\n+      Assert.assertEquals(2, resultSet.getMetaData().getColumnCount());\n+      while(resultSet.next()) {\n+        fail();\n+      }\n+\n+      resultSet = statement.executeQuery(\"select count(*) from root align by device\");\n+      // has device column\n+      Assert.assertEquals(1, resultSet.getMetaData().getColumnCount());\n+      while(resultSet.next()) {\n+        fail();\n+      }\n+\n+      resultSet = statement.executeQuery(\n+          \"select count(*) from root where time >= 1 and time <= 100 \"\n+              + \"group by ([0, 100), 20ms, 20ms) align by device\");\n+      // has an empty time column\n+      Assert.assertEquals(2, resultSet.getMetaData().getColumnCount());", "originalCommit": "2ea5601fc405829a745585ef70c6ae81c940fb9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3MzU0OQ==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384873549", "bodyText": "fixed", "author": "qiaojialin", "createdAt": "2020-02-27T01:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NTg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c6cfe88b4767ca0e9b9e7a173d37156f2ba04200", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/integration/IoTDBSimpleQueryTest.java b/server/src/test/java/org/apache/iotdb/db/integration/IoTDBSimpleQueryTest.java\nindex c6ff5ad990..2fb5acf714 100644\n--- a/server/src/test/java/org/apache/iotdb/db/integration/IoTDBSimpleQueryTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/integration/IoTDBSimpleQueryTest.java\n\n@@ -90,7 +90,7 @@ public class IoTDBSimpleQueryTest {\n       resultSet = statement.executeQuery(\n           \"select count(*) from root where time >= 1 and time <= 100 \"\n               + \"group by ([0, 100), 20ms, 20ms) align by device\");\n-      // has an empty time column\n+      // has time and device columns\n       Assert.assertEquals(2, resultSet.getMetaData().getColumnCount());\n       while (resultSet.next()) {\n         fail();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NzEzOQ==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384867139", "bodyText": "No need to do this change, the limit and offset are ignored in group by.", "author": "JackieTien97", "createdAt": "2020-02-27T01:33:27Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -228,9 +229,12 @@ private QueryDataSet processDataQuery(QueryPlan queryPlan, QueryContext context)\n     if (queryPlan instanceof AlignByDevicePlan) {\n       queryDataSet = new AlignByDeviceDataSet((AlignByDevicePlan) queryPlan, context, queryRouter);\n     } else {\n-      if (queryPlan instanceof GroupByPlan) {\n+      if (queryPlan.getPaths() == null || queryPlan.getPaths().isEmpty()) {\n+        // no time series are selected, return EmptyDataSet\n+        return new EmptyDataSet();\n+      } else if (queryPlan instanceof GroupByPlan) {\n         GroupByPlan groupByPlan = (GroupByPlan) queryPlan;\n-        return queryRouter.groupBy(groupByPlan, context);\n+        queryDataSet =  queryRouter.groupBy(groupByPlan, context);", "originalCommit": "2ea5601fc405829a745585ef70c6ae81c940fb9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NzQ3MQ==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384867471", "bodyText": "Or you can add a JIRA to report this, actually in syntax, we support limit and offset in group by, but we just ignore these two in the code.", "author": "JackieTien97", "createdAt": "2020-02-27T01:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NzEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3OTMyOA==", "url": "https://github.com/apache/iotdb/pull/838#discussion_r384879328", "bodyText": "I updated the docs", "author": "qiaojialin", "createdAt": "2020-02-27T02:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NzEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6cfe88b4767ca0e9b9e7a173d37156f2ba04200", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java b/server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java\nindex 053e524f7d..1d84b97f9d 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java\n\n@@ -234,7 +234,7 @@ public class PlanExecutor implements IPlanExecutor {\n         return new EmptyDataSet();\n       } else if (queryPlan instanceof GroupByPlan) {\n         GroupByPlan groupByPlan = (GroupByPlan) queryPlan;\n-        queryDataSet =  queryRouter.groupBy(groupByPlan, context);\n+        return queryRouter.groupBy(groupByPlan, context);\n       } else if (queryPlan instanceof AggregationPlan) {\n         AggregationPlan aggregationPlan = (AggregationPlan) queryPlan;\n         queryDataSet = queryRouter.aggregate(aggregationPlan, context);\n"}}, {"oid": "c6cfe88b4767ca0e9b9e7a173d37156f2ba04200", "url": "https://github.com/apache/iotdb/commit/c6cfe88b4767ca0e9b9e7a173d37156f2ba04200", "message": "fix review", "committedDate": "2020-02-27T02:12:20Z", "type": "commit"}]}