{"pr_number": 1732, "pr_title": "[IOTDB-829] Accelerate delete timeseries", "pr_createdAt": "2020-09-14T23:41:34Z", "pr_url": "https://github.com/apache/iotdb/pull/1732", "timeline": [{"oid": "efcd0078e12ed6127d587c00e189921a65e5a805", "url": "https://github.com/apache/iotdb/commit/efcd0078e12ed6127d587c00e189921a65e5a805", "message": "Optimize performance of delete from and delete timeseries", "committedDate": "2020-09-14T07:00:48Z", "type": "commit"}, {"oid": "63c6d05db822b5c591d6e60c6013e4edcfadc644", "url": "https://github.com/apache/iotdb/commit/63c6d05db822b5c591d6e60c6013e4edcfadc644", "message": "Merge remote-tracking branch 'upstream/master' into delete_perf", "committedDate": "2020-09-14T07:07:02Z", "type": "commit"}, {"oid": "577217e361b2cef23224a6684dfe98d531b636c2", "url": "https://github.com/apache/iotdb/commit/577217e361b2cef23224a6684dfe98d531b636c2", "message": "optimize partialpath match()", "committedDate": "2020-09-14T23:53:57Z", "type": "commit"}, {"oid": "dfed1a36143ca4a05660d8e26a78604fe47761c9", "url": "https://github.com/apache/iotdb/commit/dfed1a36143ca4a05660d8e26a78604fe47761c9", "message": "Fix bugs", "committedDate": "2020-09-15T06:49:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1MDE5Mw==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r488650193", "bodyText": "remove this", "author": "qiaojialin", "createdAt": "2020-09-15T13:05:34Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -447,27 +447,36 @@ public void update(String deviceId, String measurementId, long startTime, long e\n     // TODO\n   }\n \n+  public void delete(PartialPath path, long startTime, long endTime)\n+          throws StorageEngineException {\n+    StorageGroupProcessor storageGroupProcessor = getProcessor(path);\n+    try {\n+      storageGroupProcessor.delete(path, startTime, endTime);\n+    } catch (IOException e) {\n+      throw new StorageEngineException(e.getMessage());\n+    }\n+  }\n   /**\n    * delete data of timeseries \"{deviceId}.{measurementId}\" with time <= timestamp.\n    */\n-  public void delete(PartialPath deviceId, String measurementId, long startTime, long endTime)", "originalCommit": "dfed1a36143ca4a05660d8e26a78604fe47761c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1c408364babee15cfd4a7a3f2b27672c5253862", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java b/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\nindex 1e9a78a638..f8d5ef35b6 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\n\n@@ -456,18 +456,6 @@ public class StorageEngine implements IService {\n       throw new StorageEngineException(e.getMessage());\n     }\n   }\n-  /**\n-   * delete data of timeseries \"{deviceId}.{measurementId}\" with time <= timestamp.\n-   */\n-  /*public void delete(PartialPath deviceId, String measurementId, long startTime, long endTime)\n-      throws StorageEngineException {\n-    StorageGroupProcessor storageGroupProcessor = getProcessor(deviceId);\n-    try {\n-      storageGroupProcessor.delete(deviceId, measurementId, startTime, endTime);\n-    } catch (IOException e) {\n-      throw new StorageEngineException(e.getMessage());\n-    }\n-  }*/\n \n   /**\n    * delete data of timeseries \"{deviceId}.{measurementId}\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NjUxMQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r488666511", "bodyText": "what if the path is root.*?", "author": "qiaojialin", "createdAt": "2020-09-15T13:28:01Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -447,27 +447,36 @@ public void update(String deviceId, String measurementId, long startTime, long e\n     // TODO\n   }\n \n+  public void delete(PartialPath path, long startTime, long endTime)\n+          throws StorageEngineException {\n+    StorageGroupProcessor storageGroupProcessor = getProcessor(path);", "originalCommit": "dfed1a36143ca4a05660d8e26a78604fe47761c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1c408364babee15cfd4a7a3f2b27672c5253862", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java b/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\nindex 1e9a78a638..f8d5ef35b6 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\n\n@@ -456,18 +456,6 @@ public class StorageEngine implements IService {\n       throw new StorageEngineException(e.getMessage());\n     }\n   }\n-  /**\n-   * delete data of timeseries \"{deviceId}.{measurementId}\" with time <= timestamp.\n-   */\n-  /*public void delete(PartialPath deviceId, String measurementId, long startTime, long endTime)\n-      throws StorageEngineException {\n-    StorageGroupProcessor storageGroupProcessor = getProcessor(deviceId);\n-    try {\n-      storageGroupProcessor.delete(deviceId, measurementId, startTime, endTime);\n-    } catch (IOException e) {\n-      throw new StorageEngineException(e.getMessage());\n-    }\n-  }*/\n \n   /**\n    * delete data of timeseries \"{deviceId}.{measurementId}\"\n"}}, {"oid": "e1c408364babee15cfd4a7a3f2b27672c5253862", "url": "https://github.com/apache/iotdb/commit/e1c408364babee15cfd4a7a3f2b27672c5253862", "message": "Remove unused code", "committedDate": "2020-09-16T00:02:21Z", "type": "commit"}, {"oid": "7604daf9aaf1c2b5927dacf7bcc460cf0ee67b50", "url": "https://github.com/apache/iotdb/commit/7604daf9aaf1c2b5927dacf7bcc460cf0ee67b50", "message": "Fix pr review issues", "committedDate": "2020-09-16T06:35:32Z", "type": "commit"}, {"oid": "db3514c159aa3a220378dd71a44908f216ea508d", "url": "https://github.com/apache/iotdb/commit/db3514c159aa3a220378dd71a44908f216ea508d", "message": "deal with delete root.* case", "committedDate": "2020-09-17T09:00:36Z", "type": "commit"}, {"oid": "598b95df66882a84b5e3d72166627888f579fdab", "url": "https://github.com/apache/iotdb/commit/598b95df66882a84b5e3d72166627888f579fdab", "message": "remove redundant imports", "committedDate": "2020-09-17T09:07:16Z", "type": "commit"}, {"oid": "042d06c61e3e10182f8a8efcdeee16ce778c7c88", "url": "https://github.com/apache/iotdb/commit/042d06c61e3e10182f8a8efcdeee16ce778c7c88", "message": "Remove unused code and imports", "committedDate": "2020-09-18T03:31:21Z", "type": "commit"}, {"oid": "9720b26925115a8ffbe9d84c25097d8c4d8b074e", "url": "https://github.com/apache/iotdb/commit/9720b26925115a8ffbe9d84c25097d8c4d8b074e", "message": "Revert \"deal with delete root.* case\"\n\nThis reverts commit db3514c159aa3a220378dd71a44908f216ea508d.", "committedDate": "2020-09-18T06:36:32Z", "type": "commit"}, {"oid": "085c5b0721ead85ddf78b77dc7e0400889504b48", "url": "https://github.com/apache/iotdb/commit/085c5b0721ead85ddf78b77dc7e0400889504b48", "message": "Revert \"Fix pr review issues\"\n\nThis reverts commit 7604daf9aaf1c2b5927dacf7bcc460cf0ee67b50.", "committedDate": "2020-09-18T06:37:30Z", "type": "commit"}, {"oid": "a550d410349314da2337bc10d25a97b824eec5fa", "url": "https://github.com/apache/iotdb/commit/a550d410349314da2337bc10d25a97b824eec5fa", "message": "deal with delete root.* case", "committedDate": "2020-09-18T08:02:03Z", "type": "commit"}, {"oid": "3f04134fb573b5a7ac2096600b29987b1fcd21ec", "url": "https://github.com/apache/iotdb/commit/3f04134fb573b5a7ac2096600b29987b1fcd21ec", "message": "Add logs to debug CI issues", "committedDate": "2020-09-18T08:52:56Z", "type": "commit"}, {"oid": "830645fbabcba4e8a592194499706062d6da53cd", "url": "https://github.com/apache/iotdb/commit/830645fbabcba4e8a592194499706062d6da53cd", "message": "Revert \"deal with delete root.* case\"\n\nThis reverts commit a550d410349314da2337bc10d25a97b824eec5fa.", "committedDate": "2020-09-18T09:31:05Z", "type": "commit"}, {"oid": "0535d430540b774d66f62be666f948af59734bd2", "url": "https://github.com/apache/iotdb/commit/0535d430540b774d66f62be666f948af59734bd2", "message": "Revert \"Revert \"deal with delete root.* case\"\"\n\nThis reverts commit 830645fbabcba4e8a592194499706062d6da53cd.", "committedDate": "2020-09-18T10:04:20Z", "type": "commit"}, {"oid": "aaa26007bb4885fccc5f640d155b513f54d03adb", "url": "https://github.com/apache/iotdb/commit/aaa26007bb4885fccc5f640d155b513f54d03adb", "message": "Add more testing log", "committedDate": "2020-09-18T14:30:44Z", "type": "commit"}, {"oid": "9e3ba83870c29c062c4f8a064b152a61fd33c04b", "url": "https://github.com/apache/iotdb/commit/9e3ba83870c29c062c4f8a064b152a61fd33c04b", "message": "Merge remote-tracking branch 'upstream/master' into delete_perf", "committedDate": "2020-09-18T14:35:03Z", "type": "commit"}, {"oid": "b39026aa61b50891089b6a44a3bacf634913063f", "url": "https://github.com/apache/iotdb/commit/b39026aa61b50891089b6a44a3bacf634913063f", "message": "Fix attempts", "committedDate": "2020-09-18T15:57:09Z", "type": "commit"}, {"oid": "064599916fc9c12a2b8f376c376819a77f26ec6e", "url": "https://github.com/apache/iotdb/commit/064599916fc9c12a2b8f376c376819a77f26ec6e", "message": "add logs", "committedDate": "2020-09-19T02:17:18Z", "type": "commit"}, {"oid": "d8c560e7218d7ed04c727ab761a2c214caa88819", "url": "https://github.com/apache/iotdb/commit/d8c560e7218d7ed04c727ab761a2c214caa88819", "message": "Add additional interface  to get all related storage path", "committedDate": "2020-09-21T01:37:49Z", "type": "commit"}, {"oid": "b7d77af0d1b9054cba9248864faafd996ff9714c", "url": "https://github.com/apache/iotdb/commit/b7d77af0d1b9054cba9248864faafd996ff9714c", "message": "utilize new interface in delete timeseries", "committedDate": "2020-09-21T02:15:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4NDM5Mw==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r491784393", "bodyText": "put the for into the if", "author": "qiaojialin", "createdAt": "2020-09-21T04:01:06Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -226,17 +229,18 @@ public void insertTablet(InsertTabletPlan insertTabletPlan, int start, int end,\n    * <p>\n    * Delete data in both working MemTable and flushing MemTables.\n    */\n-  public void deleteDataInMemory(Deletion deletion) {\n+  public void deleteDataInMemory(Deletion deletion) throws MetadataException {\n     flushQueryLock.writeLock().lock();\n     if (logger.isDebugEnabled()) {\n       logger\n           .debug(FLUSH_QUERY_WRITE_LOCKED, storageGroupName, tsFileResource.getTsFile().getName());\n     }\n     try {\n-      if (workMemTable != null) {\n-        workMemTable\n-            .delete(deletion.getDevice(), deletion.getMeasurement(), deletion.getStartTime(),\n-                deletion.getEndTime());\n+      for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {", "originalCommit": "b7d77af0d1b9054cba9248864faafd996ff9714c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNDMzMw==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r495514333", "bodyText": "Fixed", "author": "wshao08", "createdAt": "2020-09-27T01:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4NDM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "970220d7af0ec3a1d61c85fb755119927e15f003", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\nindex d2fbc88fda..36a53058ac 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\n\n@@ -236,10 +236,10 @@ public class TsFileProcessor {\n           .debug(FLUSH_QUERY_WRITE_LOCKED, storageGroupName, tsFileResource.getTsFile().getName());\n     }\n     try {\n-      for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n-        if (workMemTable != null) {\n-          workMemTable\n-                  .delete(p.getDevice(), p.getMeasurement(), deletion.getStartTime(), deletion.getEndTime());\n+      if (workMemTable != null) {\n+        for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n+          workMemTable.delete(p.getDevice(), p.getMeasurement(), deletion.getStartTime(),\n+              deletion.getEndTime());\n         }\n       }\n       // flushing memTables are immutable, only record this deletion in these memTables for query\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4NTI1MA==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r491785250", "bodyText": "add javadoc", "author": "qiaojialin", "createdAt": "2020-09-21T04:06:34Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -99,6 +105,41 @@ public PartialPath concatNode(String node) {\n     return nodes;\n   }\n \n+  public int getNodeLength() {\n+    return nodes.length;\n+  }\n+\n+  public PartialPath alterPrefixPath(PartialPath prefixPath) {", "originalCommit": "b7d77af0d1b9054cba9248864faafd996ff9714c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNDMzNQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r495514335", "bodyText": "Added", "author": "wshao08", "createdAt": "2020-09-27T01:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4NTI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "970220d7af0ec3a1d61c85fb755119927e15f003", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java b/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\nindex 56a6e8f2c8..5ed814f550 100755\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\n\n@@ -109,22 +111,25 @@ public class PartialPath extends Path implements Comparable<Path> {\n     return nodes.length;\n   }\n \n+  /**\n+   * Construct a new PartialPath by resetting the prefix nodes to prefixPath\n+   * @param prefixPath the prefix path used to replace current nodes\n+   * @return A new PartialPath with altered prefix\n+   */\n   public PartialPath alterPrefixPath(PartialPath prefixPath) {\n     String[] newNodes = Arrays.copyOf(nodes, Math.max(nodes.length, prefixPath.getNodeLength()));\n     System.arraycopy(prefixPath.getNodes(), 0, newNodes, 0, prefixPath.getNodeLength());\n     return new PartialPath(newNodes);\n   }\n \n-  public void setPrefixPath(PartialPath prefixPath) {\n-    this.nodes = Arrays.copyOf(nodes, Math.max(nodes.length, prefixPath.getNodeLength()));\n-    System.arraycopy(prefixPath.getNodes(), 0, nodes, 0, prefixPath.getNodeLength());\n-    fullPath = String.join(TsFileConstant.PATH_SEPARATOR, nodes);\n-  }\n-\n-  public boolean matchFullPath(String rPath) throws IllegalPathException {\n-    return matchFullPath(new PartialPath(rPath));\n-  }\n-\n+  /**\n+   * Test if this PartialPath matches a full path. rPath is supposed to be a full timeseries path\n+   * without wildcards.\n+   * e.g. \"root.sg.device.*\" matches path \"root.sg.device.s1\"\n+   * whereas it does not match \"root.sg.device\" and \"root.sg.vehicle.s1\"\n+   * @param rPath a plain full path of a timeseries\n+   * @return true if a successful match, otherwise return false\n+   */\n   public boolean matchFullPath(PartialPath rPath) {\n     String[] rNodes = rPath.getNodes();\n     if ((rNodes.length < nodes.length) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4NTQxNQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r491785415", "bodyText": "add an example", "author": "qiaojialin", "createdAt": "2020-09-21T04:07:27Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -503,7 +503,22 @@ private void findStorageGroup(\n   }\n \n   /**\n-   * Get all storage group under give path\n+   * Get the storage group that given path belonged to or under given path", "originalCommit": "b7d77af0d1b9054cba9248864faafd996ff9714c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNDM2MQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r495514361", "bodyText": "done", "author": "wshao08", "createdAt": "2020-09-27T01:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4NTQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "970220d7af0ec3a1d61c85fb755119927e15f003", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex f91a66d78a..a39790fa31 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -504,10 +504,15 @@ public class MTree implements Serializable {\n \n   /**\n    * Get the storage group that given path belonged to or under given path\n+   * All related storage groups refer two cases:\n+   * 1. Storage groups with a prefix that is identical to path, e.g. given path \"root.sg1\",\n+   *    storage group \"root.sg1.sg2\" and \"root.sg1.sg3\" will be added into result list.\n+   * 2. Storage group that this path belongs to, e.g. given path \"root.sg1.d1\", and it is in\n+   *    storage group \"root.sg1\". Then we adds \"root.sg1\" into result list.\n    *\n-   * @return a list contains all storage group names under give path\n+   * @return a list contains all storage groups related to given path\n    */\n-  List<PartialPath> getRelatedStorageGroups(PartialPath path) throws MetadataException {\n+  List<PartialPath> searchAllRelatedStorageGroups(PartialPath path) throws MetadataException {\n     String[] nodes = path.getNodes();\n     if (nodes.length == 0 || !nodes[0].equals(root.getName())) {\n       throw new IllegalPathException(path.getFullPath());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4NjM1OA==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r491786358", "bodyText": "change the fullPath in concatPath()", "author": "qiaojialin", "createdAt": "2020-09-21T04:13:55Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -99,6 +105,41 @@ public PartialPath concatNode(String node) {\n     return nodes;\n   }\n \n+  public int getNodeLength() {", "originalCommit": "b7d77af0d1b9054cba9248864faafd996ff9714c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNDM2OA==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r495514368", "bodyText": "fixed", "author": "wshao08", "createdAt": "2020-09-27T01:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc4NjM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "970220d7af0ec3a1d61c85fb755119927e15f003", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java b/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\nindex 56a6e8f2c8..5ed814f550 100755\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\n\n@@ -109,22 +111,25 @@ public class PartialPath extends Path implements Comparable<Path> {\n     return nodes.length;\n   }\n \n+  /**\n+   * Construct a new PartialPath by resetting the prefix nodes to prefixPath\n+   * @param prefixPath the prefix path used to replace current nodes\n+   * @return A new PartialPath with altered prefix\n+   */\n   public PartialPath alterPrefixPath(PartialPath prefixPath) {\n     String[] newNodes = Arrays.copyOf(nodes, Math.max(nodes.length, prefixPath.getNodeLength()));\n     System.arraycopy(prefixPath.getNodes(), 0, newNodes, 0, prefixPath.getNodeLength());\n     return new PartialPath(newNodes);\n   }\n \n-  public void setPrefixPath(PartialPath prefixPath) {\n-    this.nodes = Arrays.copyOf(nodes, Math.max(nodes.length, prefixPath.getNodeLength()));\n-    System.arraycopy(prefixPath.getNodes(), 0, nodes, 0, prefixPath.getNodeLength());\n-    fullPath = String.join(TsFileConstant.PATH_SEPARATOR, nodes);\n-  }\n-\n-  public boolean matchFullPath(String rPath) throws IllegalPathException {\n-    return matchFullPath(new PartialPath(rPath));\n-  }\n-\n+  /**\n+   * Test if this PartialPath matches a full path. rPath is supposed to be a full timeseries path\n+   * without wildcards.\n+   * e.g. \"root.sg.device.*\" matches path \"root.sg.device.s1\"\n+   * whereas it does not match \"root.sg.device\" and \"root.sg.vehicle.s1\"\n+   * @param rPath a plain full path of a timeseries\n+   * @return true if a successful match, otherwise return false\n+   */\n   public boolean matchFullPath(PartialPath rPath) {\n     String[] rNodes = rPath.getNodes();\n     if ((rNodes.length < nodes.length) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMzQzMQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r491813431", "bodyText": "add javadoc and give an example for each case", "author": "qiaojialin", "createdAt": "2020-09-21T06:22:36Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -99,6 +105,41 @@ public PartialPath concatNode(String node) {\n     return nodes;\n   }\n \n+  public int getNodeLength() {\n+    return nodes.length;\n+  }\n+\n+  public PartialPath alterPrefixPath(PartialPath prefixPath) {\n+    String[] newNodes = Arrays.copyOf(nodes, Math.max(nodes.length, prefixPath.getNodeLength()));\n+    System.arraycopy(prefixPath.getNodes(), 0, newNodes, 0, prefixPath.getNodeLength());\n+    return new PartialPath(newNodes);\n+  }\n+\n+  public void setPrefixPath(PartialPath prefixPath) {\n+    this.nodes = Arrays.copyOf(nodes, Math.max(nodes.length, prefixPath.getNodeLength()));\n+    System.arraycopy(prefixPath.getNodes(), 0, nodes, 0, prefixPath.getNodeLength());\n+    fullPath = String.join(TsFileConstant.PATH_SEPARATOR, nodes);\n+  }\n+\n+  public boolean matchFullPath(String rPath) throws IllegalPathException {\n+    return matchFullPath(new PartialPath(rPath));\n+  }\n+\n+  public boolean matchFullPath(PartialPath rPath) {", "originalCommit": "b7d77af0d1b9054cba9248864faafd996ff9714c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNDM3OQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r495514379", "bodyText": "Added", "author": "wshao08", "createdAt": "2020-09-27T01:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMzQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "970220d7af0ec3a1d61c85fb755119927e15f003", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java b/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\nindex 56a6e8f2c8..5ed814f550 100755\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\n\n@@ -109,22 +111,25 @@ public class PartialPath extends Path implements Comparable<Path> {\n     return nodes.length;\n   }\n \n+  /**\n+   * Construct a new PartialPath by resetting the prefix nodes to prefixPath\n+   * @param prefixPath the prefix path used to replace current nodes\n+   * @return A new PartialPath with altered prefix\n+   */\n   public PartialPath alterPrefixPath(PartialPath prefixPath) {\n     String[] newNodes = Arrays.copyOf(nodes, Math.max(nodes.length, prefixPath.getNodeLength()));\n     System.arraycopy(prefixPath.getNodes(), 0, newNodes, 0, prefixPath.getNodeLength());\n     return new PartialPath(newNodes);\n   }\n \n-  public void setPrefixPath(PartialPath prefixPath) {\n-    this.nodes = Arrays.copyOf(nodes, Math.max(nodes.length, prefixPath.getNodeLength()));\n-    System.arraycopy(prefixPath.getNodes(), 0, nodes, 0, prefixPath.getNodeLength());\n-    fullPath = String.join(TsFileConstant.PATH_SEPARATOR, nodes);\n-  }\n-\n-  public boolean matchFullPath(String rPath) throws IllegalPathException {\n-    return matchFullPath(new PartialPath(rPath));\n-  }\n-\n+  /**\n+   * Test if this PartialPath matches a full path. rPath is supposed to be a full timeseries path\n+   * without wildcards.\n+   * e.g. \"root.sg.device.*\" matches path \"root.sg.device.s1\"\n+   * whereas it does not match \"root.sg.device\" and \"root.sg.vehicle.s1\"\n+   * @param rPath a plain full path of a timeseries\n+   * @return true if a successful match, otherwise return false\n+   */\n   public boolean matchFullPath(PartialPath rPath) {\n     String[] rNodes = rPath.getNodes();\n     if ((rNodes.length < nodes.length) ||\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMzc5NQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r491813795", "bodyText": "add javadoc", "author": "qiaojialin", "createdAt": "2020-09-21T06:23:43Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -771,6 +771,15 @@ public PartialPath getStorageGroupPath(PartialPath path) throws StorageGroupNotS\n     }\n   }\n \n+  public List<PartialPath> getRelatedStorageGroups(PartialPath path) throws MetadataException {", "originalCommit": "b7d77af0d1b9054cba9248864faafd996ff9714c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "970220d7af0ec3a1d61c85fb755119927e15f003", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex 86cb5b6288..1e3fc9abb1 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -771,10 +771,10 @@ public class MManager {\n     }\n   }\n \n-  public List<PartialPath> getRelatedStorageGroups(PartialPath path) throws MetadataException {\n+  public List<PartialPath> searchAllRelatedStorageGroups(PartialPath path) throws MetadataException {\n     lock.readLock().lock();\n     try {\n-      return mtree.getRelatedStorageGroups(path);\n+      return mtree.searchAllRelatedStorageGroups(path);\n     } finally {\n       lock.readLock().unlock();\n     }\n"}}, {"oid": "970220d7af0ec3a1d61c85fb755119927e15f003", "url": "https://github.com/apache/iotdb/commit/970220d7af0ec3a1d61c85fb755119927e15f003", "message": "Add java doc and update design docs", "committedDate": "2020-09-22T09:45:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzI0OQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r495517249", "bodyText": "I think you also write every mod record into tsfile resource's mod file. In jira, you said that\nWe need to record N*M modifications, which is time consuming. \n\nCould you explain that?   Thanks~", "author": "SilverNarcissus", "createdAt": "2020-09-27T02:17:21Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1443,13 +1443,15 @@ private void logDeletion(long startTime, long endTime, PartialPath deviceId, Str\n \n   private void deleteDataInFiles(Collection<TsFileResource> tsFileResourceList, Deletion deletion,\n       List<ModificationFile> updatedModFiles)\n-      throws IOException {\n-    String deviceId = deletion.getDevice();\n+          throws IOException, MetadataException {\n     for (TsFileResource tsFileResource : tsFileResourceList) {\n-      if (!tsFileResource.containsDevice(deviceId) ||\n-          deletion.getEndTime() < tsFileResource.getStartTime(deviceId) ||\n-          deletion.getStartTime() > tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE)) {\n-        continue;\n+      for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n+        String deviceId = p.getDevice();\n+        if (!tsFileResource.containsDevice(deviceId) ||\n+                deletion.getEndTime() < tsFileResource.getStartTime(deviceId) ||\n+                deletion.getStartTime() > tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE)) {\n+          continue;\n+        }", "originalCommit": "970220d7af0ec3a1d61c85fb755119927e15f003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0NjM0Nw==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r495546347", "bodyText": "Sure! In previous implementation, only timeseries fullpath is written into mod file.\nE.g. the deletion path is \"root.sg.d1.*\" and d1 has N measurements, we have to access mod file N times to record all the fullpaths.\nFor now, we record \"root.sg.d1.*\" into mod file only once.", "author": "wshao08", "createdAt": "2020-09-27T08:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1OTEzNQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r497259135", "bodyText": "The for (PartialPath p ) statement is of no use. Check the code carefully.\ninsert into root.turbine1.a.d1(timestamp,s1) values(1,1);\ninsert into root.turbine1.a.d2(timestamp,s1) values(1,1);\nflush\ninsert into root.turbine1.b.d1(timestamp,s1) values(2,1);\ninsert into root.turbine1.b.d2(timestamp,s1) values(2,1);\nflush\ndelete from root.turbine1 where time < 5\nYou will record all files a mod.", "author": "qiaojialin", "createdAt": "2020-09-30T05:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMzOTI0MQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r499339241", "bodyText": "That's what we expected.\nFor one delete time series, record one mod information for all mod files, but only one record per file.", "author": "wshao08", "createdAt": "2020-10-05T04:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8981086502773305e6bb6b5023edd7ca4836e259", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 67cb7eab1d..7a9b41e743 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -1440,18 +1439,27 @@ public class StorageGroupProcessor {\n     }\n   }\n \n+  private boolean canSkipDelete(TsFileResource tsFileResource, Deletion deletion)\n+      throws MetadataException {\n+    for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n+      String deviceId = p.getDevice();\n+      if (tsFileResource.containsDevice(deviceId) &&\n+          ((deletion.getEndTime() < tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE) &&\n+              tsFileResource.getStartTime(deviceId) < deletion.getEndTime()) ||\n+          (deletion.getStartTime() < tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE) &&\n+              deletion.getStartTime() < tsFileResource.getStartTime(deviceId)))) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n \n   private void deleteDataInFiles(Collection<TsFileResource> tsFileResourceList, Deletion deletion,\n       List<ModificationFile> updatedModFiles)\n           throws IOException, MetadataException {\n     for (TsFileResource tsFileResource : tsFileResourceList) {\n-      for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n-        String deviceId = p.getDevice();\n-        if (!tsFileResource.containsDevice(deviceId) ||\n-                deletion.getEndTime() < tsFileResource.getStartTime(deviceId) ||\n-                deletion.getStartTime() > tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE)) {\n-          continue;\n-        }\n+      if (canSkipDelete(tsFileResource, deletion)) {\n+        continue;\n       }\n \n       long partitionId = tsFileResource.getTimePartition();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzI3OQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r495517279", "bodyText": "Have you finish the TODO?", "author": "SilverNarcissus", "createdAt": "2020-09-27T02:17:41Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1378,26 +1375,30 @@ public void delete(PartialPath deviceId, String measurementId, long startTime, l\n     List<ModificationFile> updatedModFiles = new ArrayList<>();\n \n     try {\n-      Long lastUpdateTime = null;\n-      for (Map<String, Long> latestTimeMap : latestTimeForEachDevice.values()) {\n-        Long curTime = latestTimeMap.get(deviceId.getFullPath());\n-        if (curTime != null && (lastUpdateTime == null || lastUpdateTime < curTime)) {\n-          lastUpdateTime = curTime;\n+      for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(path)) {\n+        PartialPath deviceId = p.getDevicePath();\n+        String measurementId = p.getMeasurement();\n+        Long lastUpdateTime = null;\n+        for (Map<String, Long> latestTimeMap : latestTimeForEachDevice.values()) {\n+          Long curTime = latestTimeMap.get(deviceId.getFullPath());\n+          if (curTime != null && (lastUpdateTime == null || lastUpdateTime < curTime)) {\n+            lastUpdateTime = curTime;\n+          }\n         }\n-      }\n-\n-      // There is no tsfile data, the delete operation is invalid\n-      if (lastUpdateTime == null) {\n-        logger.debug(\"No device {} in SG {}, deletion invalid\", deviceId, storageGroupName);\n-        return;\n+        // There is no tsfile data, the delete operation is invalid\n+        if (lastUpdateTime == null) {\n+          logger.debug(\"No device {} in SG {}, deletion invalid\", deviceId, storageGroupName);\n+          return;\n+        }\n+        // delete Last cache record if necessary\n+        tryToDeleteLastCache(deviceId, measurementId, startTime, endTime);\n       }\n \n       // write log to impacted working TsFileProcessors\n-      logDeletion(startTime, endTime, deviceId, measurementId);\n-      // delete Last cache record if necessary\n-      tryToDeleteLastCache(deviceId, measurementId, startTime, endTime);\n-      Deletion deletion = new Deletion(deviceId.concatNode(measurementId),\n-          MERGE_MOD_START_VERSION_NUM, startTime, endTime);\n+      // TODO rewrite logDeletion", "originalCommit": "970220d7af0ec3a1d61c85fb755119927e15f003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MDgyNQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r495540825", "bodyText": "It's resolved. Remove the TODO", "author": "wshao08", "createdAt": "2020-09-27T07:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f4c5f61d98794046ca380d4b273609f79a4c2249", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 67cb7eab1d..29ef5b83f6 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -1395,7 +1395,6 @@ public class StorageGroupProcessor {\n       }\n \n       // write log to impacted working TsFileProcessors\n-      // TODO rewrite logDeletion\n       logDeletion(startTime, endTime, path);\n \n       Deletion deletion = new Deletion(path, MERGE_MOD_START_VERSION_NUM, startTime, endTime);\n"}}, {"oid": "f4c5f61d98794046ca380d4b273609f79a4c2249", "url": "https://github.com/apache/iotdb/commit/f4c5f61d98794046ca380d4b273609f79a4c2249", "message": "remove TODO tag", "committedDate": "2020-09-27T08:33:14Z", "type": "commit"}, {"oid": "f6f49d7e39365e2efa314a8ce8739b0329f3ef42", "url": "https://github.com/apache/iotdb/commit/f6f49d7e39365e2efa314a8ce8739b0329f3ef42", "message": "Add tests and fix errors", "committedDate": "2020-09-27T09:56:35Z", "type": "commit"}, {"oid": "8981086502773305e6bb6b5023edd7ca4836e259", "url": "https://github.com/apache/iotdb/commit/8981086502773305e6bb6b5023edd7ca4836e259", "message": "Fix delete filter bug", "committedDate": "2020-10-05T03:12:44Z", "type": "commit"}, {"oid": "29685af3908820a8eb3f1aed78936efcd90fc2a4", "url": "https://github.com/apache/iotdb/commit/29685af3908820a8eb3f1aed78936efcd90fc2a4", "message": "Remove unnecessary if condition", "committedDate": "2020-10-05T04:20:38Z", "type": "commit"}, {"oid": "9f0e44d3213c038c6afebc095e5fcb23bf25bd2e", "url": "https://github.com/apache/iotdb/commit/9f0e44d3213c038c6afebc095e5fcb23bf25bd2e", "message": "Fix bugs", "committedDate": "2020-10-05T05:47:20Z", "type": "commit"}, {"oid": "3c680d9118db64a80b0921d7fa4e115f66475b31", "url": "https://github.com/apache/iotdb/commit/3c680d9118db64a80b0921d7fa4e115f66475b31", "message": "bug fix", "committedDate": "2020-10-05T06:13:27Z", "type": "commit"}, {"oid": "a7f882e3b68b727f1fc8ebfecb8ecb83d2ef1904", "url": "https://github.com/apache/iotdb/commit/a7f882e3b68b727f1fc8ebfecb8ecb83d2ef1904", "message": "Fix test cases", "committedDate": "2020-10-05T07:33:11Z", "type": "commit"}, {"oid": "b39d815078c79b90c94453275f814f15c2f60a5a", "url": "https://github.com/apache/iotdb/commit/b39d815078c79b90c94453275f814f15c2f60a5a", "message": "Remove unused import", "committedDate": "2020-10-05T08:28:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzOTExMw==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r500039113", "bodyText": "This may cause OOM, you'd better provide a match method for TsFileResource.\nFor each device in TsFileResource, check if it matches the given path", "author": "qiaojialin", "createdAt": "2020-10-06T06:43:23Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1440,15 +1439,26 @@ private void logDeletion(long startTime, long endTime, PartialPath deviceId, Str\n     }\n   }\n \n+  private boolean canSkipDelete(TsFileResource tsFileResource, Deletion deletion)\n+      throws MetadataException {\n+    for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {", "originalCommit": "b39d815078c79b90c94453275f814f15c2f60a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5273d6e78821e625d96853f8c0e53b563bc7891", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 44a0593ba1..fabc523fa3 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -1439,15 +1444,13 @@ public class StorageGroupProcessor {\n     }\n   }\n \n-  private boolean canSkipDelete(TsFileResource tsFileResource, Deletion deletion)\n-      throws MetadataException {\n-    for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n-      String deviceId = p.getDevice();\n+  private boolean canSkipDelete(TsFileResource tsFileResource, List<PartialPath> fullPaths,\n+       long deleteStart, long deleteEnd) {\n+    for (PartialPath path : fullPaths) {\n+      String deviceId = path.getDevice();\n       if (tsFileResource.containsDevice(deviceId) &&\n-          (deletion.getStartTime() <= tsFileResource.getStartTime(deviceId)\n-              && tsFileResource.getStartTime(deviceId) <= deletion.getEndTime())\n-          || (deletion.getStartTime() >= tsFileResource.getStartTime(deviceId)\n-          && deletion.getStartTime() <= tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE))) {\n+              (deleteEnd >= tsFileResource.getStartTime(deviceId) &&\n+                      deleteStart <= tsFileResource.getEndTime(deviceId))) {\n         return false;\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzMzQxNA==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r500133414", "bodyText": "It seems that deleteTimeseries function can directly call the delete function to avoid code duplication.", "author": "JackieTien97", "createdAt": "2020-10-06T09:26:23Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -447,28 +447,32 @@ public void update(String deviceId, String measurementId, long startTime, long e\n     // TODO\n   }\n \n-  /**\n-   * delete data of timeseries \"{deviceId}.{measurementId}\" with time <= timestamp.\n-   */\n-  public void delete(PartialPath deviceId, String measurementId, long startTime, long endTime)\n-      throws StorageEngineException {\n-    StorageGroupProcessor storageGroupProcessor = getProcessor(deviceId);\n+  public void delete(PartialPath path, long startTime, long endTime)\n+          throws StorageEngineException {\n     try {\n-      storageGroupProcessor.delete(deviceId, measurementId, startTime, endTime);\n-    } catch (IOException e) {\n+      List<PartialPath> sgPaths = IoTDB.metaManager.searchAllRelatedStorageGroups(path);\n+      for (PartialPath storageGroupPath : sgPaths) {\n+        StorageGroupProcessor storageGroupProcessor = getProcessor(storageGroupPath);\n+        PartialPath newPath = path.alterPrefixPath(storageGroupPath);\n+        storageGroupProcessor.delete(newPath, startTime, endTime);\n+      }\n+    } catch (IOException | MetadataException e) {\n       throw new StorageEngineException(e.getMessage());\n     }\n   }\n \n   /**\n    * delete data of timeseries \"{deviceId}.{measurementId}\"\n    */\n-  public void deleteTimeseries(PartialPath deviceId, String measurementId)\n+  public void deleteTimeseries(PartialPath path)\n       throws StorageEngineException {\n-    StorageGroupProcessor storageGroupProcessor = getProcessor(deviceId);\n     try {\n-      storageGroupProcessor.delete(deviceId, measurementId, Long.MIN_VALUE, Long.MAX_VALUE);\n-    } catch (IOException e) {\n+      for (PartialPath storageGroupPath : IoTDB.metaManager.searchAllRelatedStorageGroups(path)) {\n+        StorageGroupProcessor storageGroupProcessor = getProcessor(storageGroupPath);\n+        PartialPath newPath = path.alterPrefixPath(storageGroupPath);\n+        storageGroupProcessor.delete(newPath, Long.MIN_VALUE, Long.MAX_VALUE);\n+      }\n+    } catch (IOException | MetadataException e) {", "originalCommit": "b39d815078c79b90c94453275f814f15c2f60a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzOTMzOA==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r500139338", "bodyText": "Before, the modication record corresponds to only one timeseries, so it's safe to delete it while occuring one matched time series. However. now, one modification record could correspond to many timeseries, it won't be right to delete it.", "author": "JackieTien97", "createdAt": "2020-10-06T09:36:01Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/merge/manage/MergeResource.java", "diffHunk": "@@ -184,7 +184,7 @@ public IChunkWriter getChunkWriter(MeasurementSchema measurementSchema) {\n     // each path is visited only once in a merge, so the modifications can be removed after visiting\n     while (modificationIterator.hasNext()) {\n       Modification modification = modificationIterator.next();\n-      if (modification.getPath().equals(path)) {\n+      if (modification.getPath().matchFullPath(path)) {\n         pathModifications.add(modification);\n         modificationIterator.remove();", "originalCommit": "b39d815078c79b90c94453275f814f15c2f60a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0288c133edaacdd2a7625b3f74cb524c5ac34d70", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/merge/manage/MergeResource.java b/server/src/main/java/org/apache/iotdb/db/engine/merge/manage/MergeResource.java\nindex 5ac23c1b00..4d31ffb3ce 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/merge/manage/MergeResource.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/merge/manage/MergeResource.java\n\n@@ -179,17 +181,16 @@ public class MergeResource {\n     // copy from TsFileResource so queries are not affected\n     List<Modification> modifications = modificationCache.computeIfAbsent(tsFileResource,\n         resource -> new LinkedList<>(resource.getModFile().getModifications()));\n-    List<Modification> pathModifications = new ArrayList<>();\n+    Set<Modification> pathModifications = new HashSet<>();\n     Iterator<Modification> modificationIterator = modifications.iterator();\n     // each path is visited only once in a merge, so the modifications can be removed after visiting\n     while (modificationIterator.hasNext()) {\n       Modification modification = modificationIterator.next();\n       if (modification.getPath().matchFullPath(path)) {\n         pathModifications.add(modification);\n-        modificationIterator.remove();\n       }\n     }\n-    return pathModifications;\n+    return new ArrayList<>(pathModifications);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MTE4OQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r500171189", "bodyText": "The if condition is wrong. Maybe you can change a way, think about when it will return true.Like:\n!tsFileResource.containsDevice(deviceId) ||\t      if (canSkipDelete(tsFileResource, deletion)) {\ndeletion.getEndTime() < tsFileResource.getStartTime(deviceId) ||\ndeletion.getStartTime() > tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE)", "author": "JackieTien97", "createdAt": "2020-10-06T10:32:21Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1440,15 +1439,26 @@ private void logDeletion(long startTime, long endTime, PartialPath deviceId, Str\n     }\n   }\n \n+  private boolean canSkipDelete(TsFileResource tsFileResource, Deletion deletion)\n+      throws MetadataException {\n+    for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n+      String deviceId = p.getDevice();\n+      if (tsFileResource.containsDevice(deviceId) &&\n+          (deletion.getStartTime() <= tsFileResource.getStartTime(deviceId)\n+              && tsFileResource.getStartTime(deviceId) <= deletion.getEndTime())\n+          || (deletion.getStartTime() >= tsFileResource.getStartTime(deviceId)\n+          && deletion.getStartTime() <= tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE))) {", "originalCommit": "b39d815078c79b90c94453275f814f15c2f60a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5273d6e78821e625d96853f8c0e53b563bc7891", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 44a0593ba1..fabc523fa3 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -1439,15 +1444,13 @@ public class StorageGroupProcessor {\n     }\n   }\n \n-  private boolean canSkipDelete(TsFileResource tsFileResource, Deletion deletion)\n-      throws MetadataException {\n-    for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n-      String deviceId = p.getDevice();\n+  private boolean canSkipDelete(TsFileResource tsFileResource, List<PartialPath> fullPaths,\n+       long deleteStart, long deleteEnd) {\n+    for (PartialPath path : fullPaths) {\n+      String deviceId = path.getDevice();\n       if (tsFileResource.containsDevice(deviceId) &&\n-          (deletion.getStartTime() <= tsFileResource.getStartTime(deviceId)\n-              && tsFileResource.getStartTime(deviceId) <= deletion.getEndTime())\n-          || (deletion.getStartTime() >= tsFileResource.getStartTime(deviceId)\n-          && deletion.getStartTime() <= tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE))) {\n+              (deleteEnd >= tsFileResource.getStartTime(deviceId) &&\n+                      deleteStart <= tsFileResource.getEndTime(deviceId))) {\n         return false;\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3Mjc1MQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r500172751", "bodyText": "The canSkipDelete function will can the IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath()), it shouldn't be in the for loop, and actually, you already have it in the caller of this function.", "author": "JackieTien97", "createdAt": "2020-10-06T10:35:22Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1440,15 +1439,26 @@ private void logDeletion(long startTime, long endTime, PartialPath deviceId, Str\n     }\n   }\n \n+  private boolean canSkipDelete(TsFileResource tsFileResource, Deletion deletion)\n+      throws MetadataException {\n+    for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n+      String deviceId = p.getDevice();\n+      if (tsFileResource.containsDevice(deviceId) &&\n+          (deletion.getStartTime() <= tsFileResource.getStartTime(deviceId)\n+              && tsFileResource.getStartTime(deviceId) <= deletion.getEndTime())\n+          || (deletion.getStartTime() >= tsFileResource.getStartTime(deviceId)\n+          && deletion.getStartTime() <= tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE))) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n \n   private void deleteDataInFiles(Collection<TsFileResource> tsFileResourceList, Deletion deletion,\n       List<ModificationFile> updatedModFiles)\n-      throws IOException {\n-    String deviceId = deletion.getDevice();\n+          throws IOException, MetadataException {\n     for (TsFileResource tsFileResource : tsFileResourceList) {\n-      if (!tsFileResource.containsDevice(deviceId) ||\n-          deletion.getEndTime() < tsFileResource.getStartTime(deviceId) ||\n-          deletion.getStartTime() > tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE)) {\n+      if (canSkipDelete(tsFileResource, deletion)) {", "originalCommit": "b39d815078c79b90c94453275f814f15c2f60a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5273d6e78821e625d96853f8c0e53b563bc7891", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 44a0593ba1..fabc523fa3 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -1439,15 +1444,13 @@ public class StorageGroupProcessor {\n     }\n   }\n \n-  private boolean canSkipDelete(TsFileResource tsFileResource, Deletion deletion)\n-      throws MetadataException {\n-    for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {\n-      String deviceId = p.getDevice();\n+  private boolean canSkipDelete(TsFileResource tsFileResource, List<PartialPath> fullPaths,\n+       long deleteStart, long deleteEnd) {\n+    for (PartialPath path : fullPaths) {\n+      String deviceId = path.getDevice();\n       if (tsFileResource.containsDevice(deviceId) &&\n-          (deletion.getStartTime() <= tsFileResource.getStartTime(deviceId)\n-              && tsFileResource.getStartTime(deviceId) <= deletion.getEndTime())\n-          || (deletion.getStartTime() >= tsFileResource.getStartTime(deviceId)\n-          && deletion.getStartTime() <= tsFileResource.getOrDefaultEndTime(deviceId, Long.MAX_VALUE))) {\n+              (deleteEnd >= tsFileResource.getStartTime(deviceId) &&\n+                      deleteStart <= tsFileResource.getEndTime(deviceId))) {\n         return false;\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3Mzg0Mw==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r500173843", "bodyText": "no need to call getAllTimeseriesPath again, you can pass it from the caller.", "author": "JackieTien97", "createdAt": "2020-10-06T10:37:22Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -226,17 +229,18 @@ public void insertTablet(InsertTabletPlan insertTabletPlan, int start, int end,\n    * <p>\n    * Delete data in both working MemTable and flushing MemTables.\n    */\n-  public void deleteDataInMemory(Deletion deletion) {\n+  public void deleteDataInMemory(Deletion deletion) throws MetadataException {\n     flushQueryLock.writeLock().lock();\n     if (logger.isDebugEnabled()) {\n       logger\n           .debug(FLUSH_QUERY_WRITE_LOCKED, storageGroupName, tsFileResource.getTsFile().getName());\n     }\n     try {\n       if (workMemTable != null) {\n-        workMemTable\n-            .delete(deletion.getDevice(), deletion.getMeasurement(), deletion.getStartTime(),\n-                deletion.getEndTime());\n+        for (PartialPath p : IoTDB.metaManager.getAllTimeseriesPath(deletion.getPath())) {", "originalCommit": "b39d815078c79b90c94453275f814f15c2f60a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5273d6e78821e625d96853f8c0e53b563bc7891", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\nindex 36a53058ac..20cd5d4c34 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\n\n@@ -229,7 +229,8 @@ public class TsFileProcessor {\n    * <p>\n    * Delete data in both working MemTable and flushing MemTables.\n    */\n-  public void deleteDataInMemory(Deletion deletion) throws MetadataException {\n+  public void deleteDataInMemory(Deletion deletion, List<PartialPath> fullPaths)\n+          throws MetadataException {\n     flushQueryLock.writeLock().lock();\n     if (logger.isDebugEnabled()) {\n       logger\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4MDY3Ng==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r500180676", "bodyText": "No need to get full path here.", "author": "JackieTien97", "createdAt": "2020-10-06T10:50:38Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -50,11 +50,17 @@ public PartialPath(String path) throws IllegalPathException {\n     this.fullPath = path;\n   }\n \n+  public PartialPath(String device, String measurement) throws IllegalPathException {\n+    this.fullPath = device + TsFileConstant.PATH_SEPARATOR + measurement;\n+    this.nodes = MetaUtils.splitPathToDetachedPath(fullPath);\n+  }\n+\n   /**\n    * @param partialNodes nodes of a time series path\n    */\n   public PartialPath(String[] partialNodes) {\n-    nodes = partialNodes;\n+    this.nodes = partialNodes;\n+    this.fullPath = String.join(TsFileConstant.PATH_SEPARATOR, nodes);", "originalCommit": "b39d815078c79b90c94453275f814f15c2f60a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5273d6e78821e625d96853f8c0e53b563bc7891", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java b/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\nindex 91b4c7c66b..47037ae106 100755\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java\n\n@@ -59,8 +59,7 @@ public class PartialPath extends Path implements Comparable<Path> {\n    * @param partialNodes nodes of a time series path\n    */\n   public PartialPath(String[] partialNodes) {\n-    this.nodes = partialNodes;\n-    this.fullPath = String.join(TsFileConstant.PATH_SEPARATOR, nodes);\n+    nodes = partialNodes;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4MDc5MQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r500180791", "bodyText": "Same as above.", "author": "JackieTien97", "createdAt": "2020-10-06T10:50:50Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -87,6 +93,7 @@ void concatPath(String[] otherNodes) {\n     int len = nodes.length;\n     this.nodes = Arrays.copyOf(nodes, nodes.length + otherNodes.length);\n     System.arraycopy(otherNodes, 0, nodes, len, otherNodes.length);\n+    fullPath = String.join(TsFileConstant.PATH_SEPARATOR, nodes);", "originalCommit": "b39d815078c79b90c94453275f814f15c2f60a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4NTk3Mw==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r500185973", "bodyText": "It seems that you have get all the timeseries for each path here, there is no need for you to call it again somewhere else, you can pass it from here.", "author": "JackieTien97", "createdAt": "2020-10-06T11:00:12Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -713,7 +713,9 @@ public void delete(DeletePlan deletePlan) throws QueryProcessException {\n     try {\n       Set<PartialPath> existingPaths = new HashSet<>();\n       for (PartialPath p : deletePlan.getPaths()) {\n-        existingPaths.addAll(getPathsName(p));\n+        if (!getPathsName(p).isEmpty()) {", "originalCommit": "b39d815078c79b90c94453275f814f15c2f60a5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f12db202e063ed1fe934afc7aa0dc360107acc00", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java b/server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java\nindex aa90df1830..57175f4782 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java\n\n@@ -710,21 +708,8 @@ public class PlanExecutor implements IPlanExecutor {\n \n   @Override\n   public void delete(DeletePlan deletePlan) throws QueryProcessException {\n-    try {\n-      Set<PartialPath> existingPaths = new HashSet<>();\n-      for (PartialPath p : deletePlan.getPaths()) {\n-        if (!getPathsName(p).isEmpty()) {\n-          existingPaths.add(p);\n-        }\n-      }\n-      if (existingPaths.isEmpty()) {\n-        throw new QueryProcessException(\"TimeSeries does not exist and its data cannot be deleted\");\n-      }\n-      for (PartialPath path : existingPaths) {\n-        delete(path, deletePlan.getDeleteStartTime(), deletePlan.getDeleteEndTime());\n-      }\n-    } catch (MetadataException e) {\n-      throw new QueryProcessException(e);\n+    for (PartialPath path : deletePlan.getPaths()) {\n+      delete(path, deletePlan.getDeleteStartTime(), deletePlan.getDeleteEndTime());\n     }\n   }\n \n"}}, {"oid": "6a2bf2d54d465373e3828f27b8d94685a9c23534", "url": "https://github.com/apache/iotdb/commit/6a2bf2d54d465373e3828f27b8d94685a9c23534", "message": "Merge remote-tracking branch 'upstream/master' into delete_perf", "committedDate": "2020-10-08T07:58:20Z", "type": "commit"}, {"oid": "b5273d6e78821e625d96853f8c0e53b563bc7891", "url": "https://github.com/apache/iotdb/commit/b5273d6e78821e625d96853f8c0e53b563bc7891", "message": "Fix review issues", "committedDate": "2020-10-11T23:56:34Z", "type": "commit"}, {"oid": "0288c133edaacdd2a7625b3f74cb524c5ac34d70", "url": "https://github.com/apache/iotdb/commit/0288c133edaacdd2a7625b3f74cb524c5ac34d70", "message": "Fix delete merge bug", "committedDate": "2020-10-12T01:04:26Z", "type": "commit"}, {"oid": "e93a3e3ff1f82e4879a8d603c81413802ba62ee9", "url": "https://github.com/apache/iotdb/commit/e93a3e3ff1f82e4879a8d603c81413802ba62ee9", "message": "Fix testing issue", "committedDate": "2020-10-12T01:14:02Z", "type": "commit"}, {"oid": "3957519a17f44a599da55ede7a67f9268b8ea1b9", "url": "https://github.com/apache/iotdb/commit/3957519a17f44a599da55ede7a67f9268b8ea1b9", "message": "remove some comments", "committedDate": "2020-10-12T03:06:56Z", "type": "commit"}, {"oid": "be11e765597280173e627e3b8db76bb7b429ae06", "url": "https://github.com/apache/iotdb/commit/be11e765597280173e627e3b8db76bb7b429ae06", "message": "Remove incorrect change", "committedDate": "2020-10-13T06:19:31Z", "type": "commit"}, {"oid": "f12db202e063ed1fe934afc7aa0dc360107acc00", "url": "https://github.com/apache/iotdb/commit/f12db202e063ed1fe934afc7aa0dc360107acc00", "message": "Avoid invoking getAllTimeseriesPath() for performance's sake", "committedDate": "2020-10-13T10:46:33Z", "type": "commit"}, {"oid": "e214434c80920cc417962d8662476c0544a2e7a3", "url": "https://github.com/apache/iotdb/commit/e214434c80920cc417962d8662476c0544a2e7a3", "message": "modifications for performance reason", "committedDate": "2020-10-13T11:56:37Z", "type": "commit"}, {"oid": "f98f213c1b67e182a83079f3351a96c734568fb5", "url": "https://github.com/apache/iotdb/commit/f98f213c1b67e182a83079f3351a96c734568fb5", "message": "Fix testing issue", "committedDate": "2020-10-15T02:31:16Z", "type": "commit"}, {"oid": "54760ee4a7cce5eea8bce8b75b92d56998a2189e", "url": "https://github.com/apache/iotdb/commit/54760ee4a7cce5eea8bce8b75b92d56998a2189e", "message": "Fix logreplayer test case", "committedDate": "2020-10-15T02:56:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MTAwMg==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r505141002", "bodyText": "hi, why clear the deviceMap?   if originalPath is root.ln.sg and devicePath is root.ln.sg.d1, we only need to delete the points in time range [89, 100], but the memChunk maybe have points in time range [0, 100].  Same as the second condition which check  the last path is *.", "author": "mychaow", "createdAt": "2020-10-15T03:20:57Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -230,20 +233,27 @@ public ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType da\n   }\n \n   @Override\n-  public void delete(String deviceId, String measurementId, long startTimestamp, long endTimestamp) {\n-    Map<String, IWritableMemChunk> deviceMap = memTableMap.get(deviceId);\n-    if (deviceMap != null) {\n-      IWritableMemChunk chunk = deviceMap.get(measurementId);\n-      if (chunk == null) {\n-        return;\n-      }\n-      // If startTimestamp == Long.MIN_VALUE && endTimestamp == Long.MAX_VALUE,\n-      // it means that the whole timeseries is deleted\n-      if (startTimestamp == Long.MIN_VALUE && endTimestamp == Long.MAX_VALUE) {\n-        deviceMap.remove(measurementId);\n+  public void delete(PartialPath originalPath, PartialPath devicePath, long startTimestamp, long endTimestamp) {\n+    Map<String, IWritableMemChunk> deviceMap = memTableMap.get(devicePath.getFullPath());\n+    if (deviceMap == null) {\n+      return;\n+    }\n+    if (originalPath.getNodes().length <= devicePath.getNodes().length ||", "originalCommit": "54760ee4a7cce5eea8bce8b75b92d56998a2189e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxOTA3NQ==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r505919075", "bodyText": "Oh, I forgot the delete range check. Fixed, thanks", "author": "wshao08", "createdAt": "2020-10-15T23:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MTAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "efbf00a70c1614c2783d4ab46e300a1a3ba05e0f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\nindex 64a030a4b9..4625a47420 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n\n@@ -238,8 +238,9 @@ public abstract class AbstractMemTable implements IMemTable {\n     if (deviceMap == null) {\n       return;\n     }\n-    if (originalPath.getNodes().length <= devicePath.getNodes().length ||\n-        originalPath.getTailNode().equals(IoTDBConstant.PATH_WILDCARD)) {\n+    if ((originalPath.getNodes().length <= devicePath.getNodes().length ||\n+        originalPath.getTailNode().equals(IoTDBConstant.PATH_WILDCARD)) &&\n+        (startTimestamp == Long.MIN_VALUE && endTimestamp == Long.MAX_VALUE)) {\n       deviceMap.clear();\n     } else {\n       Iterator<Entry<String, IWritableMemChunk>> iter = deviceMap.entrySet().iterator();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MTQ3Mw==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r505141473", "bodyText": "help me change the MManager.getInstance() to IoTDB.metaManager", "author": "mychaow", "createdAt": "2020-10-15T03:22:49Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1467,26 +1473,30 @@ private void deleteDataInFiles(Collection<TsFileResource> tsFileResourceList, De\n       // delete data in memory of unsealed file\n       if (!tsFileResource.isClosed()) {\n         TsFileProcessor tsfileProcessor = tsFileResource.getUnsealedFileProcessor();\n-        tsfileProcessor.deleteDataInMemory(deletion);\n+        tsfileProcessor.deleteDataInMemory(deletion, devicePaths);\n       }\n \n       // add a record in case of rollback\n       updatedModFiles.add(tsFileResource.getModFile());\n     }\n   }\n \n-  private void tryToDeleteLastCache(PartialPath deviceId, String measurementId, long startTime,\n-      long endTime) throws WriteProcessException {\n+  private void tryToDeleteLastCache(PartialPath deviceId, PartialPath originalPath,\n+      long startTime, long endTime) throws WriteProcessException {\n+    if (!IoTDBDescriptor.getInstance().getConfig().isLastCacheEnabled()) {\n+      return;\n+    }\n     try {\n       MManager manager = MManager.getInstance();", "originalCommit": "54760ee4a7cce5eea8bce8b75b92d56998a2189e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxOTA1MA==", "url": "https://github.com/apache/iotdb/pull/1732#discussion_r505919050", "bodyText": "Fixed", "author": "wshao08", "createdAt": "2020-10-15T23:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "efbf00a70c1614c2783d4ab46e300a1a3ba05e0f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 1dad952ab8..8c8739758d 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -1487,8 +1487,7 @@ public class StorageGroupProcessor {\n       return;\n     }\n     try {\n-      MManager manager = MManager.getInstance();\n-      MNode node = manager.getDeviceNode(deviceId);\n+      MNode node = IoTDB.metaManager.getDeviceNode(deviceId);\n \n       for (MNode measurementNode : node.getChildren().values()) {\n         if (measurementNode != null && originalPath.matchFullPath(measurementNode.getPartialPath())) {\n"}}, {"oid": "efbf00a70c1614c2783d4ab46e300a1a3ba05e0f", "url": "https://github.com/apache/iotdb/commit/efbf00a70c1614c2783d4ab46e300a1a3ba05e0f", "message": "Fix code bugs", "committedDate": "2020-10-15T23:23:45Z", "type": "commit"}, {"oid": "2d03ddd7fb3174727e9b320d73dbeee62c276c87", "url": "https://github.com/apache/iotdb/commit/2d03ddd7fb3174727e9b320d73dbeee62c276c87", "message": "Fix testing issue", "committedDate": "2020-10-16T02:11:33Z", "type": "commit"}, {"oid": "a1ae553da68c1a4ab492392a1a4d1b758acc2967", "url": "https://github.com/apache/iotdb/commit/a1ae553da68c1a4ab492392a1a4d1b758acc2967", "message": "modify java doc", "committedDate": "2020-10-19T02:52:28Z", "type": "commit"}]}