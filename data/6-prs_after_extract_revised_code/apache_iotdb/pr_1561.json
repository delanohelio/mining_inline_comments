{"pr_number": 1561, "pr_title": "limit log size of batch catch up task", "pr_createdAt": "2020-07-25T07:45:49Z", "pr_url": "https://github.com/apache/iotdb/pull/1561", "timeline": [{"oid": "6703266290a1e364a2ec52fb44e734786cf3455f", "url": "https://github.com/apache/iotdb/commit/6703266290a1e364a2ec52fb44e734786cf3455f", "message": "limit log size of batch catch up task", "committedDate": "2020-07-25T08:27:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5Nzk5Ng==", "url": "https://github.com/apache/iotdb/pull/1561#discussion_r460597996", "bodyText": "These variables seems to be easier to maintain and modify in the clusterUtil or clusterConfig", "author": "LebronAl", "createdAt": "2020-07-27T00:59:11Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "diffHunk": "@@ -50,8 +52,9 @@\n \n   // sending logs may take longer than normal communications\n   private static final long SEND_LOGS_WAIT_MS = 5 * 60 * 1000L;\n+  private static final int LOG_NUM_IN_BATCH = 1024;\n+  private static final int LEFT_SIZE_IN_REQUEST = 1024;", "originalCommit": "6703266290a1e364a2ec52fb44e734786cf3455f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01f210758ec5c91e454cddb2e7d975249279ec24", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java b/cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java\nindex 90bbf2c27d..d9405092ae 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java\n\n@@ -52,8 +53,6 @@ public class LogCatchUpTask implements Callable<Boolean> {\n \n   // sending logs may take longer than normal communications\n   private static final long SEND_LOGS_WAIT_MS = 5 * 60 * 1000L;\n-  private static final int LOG_NUM_IN_BATCH = 1024;\n-  private static final int LEFT_SIZE_IN_REQUEST = 1024;\n   private static final Logger logger = LoggerFactory.getLogger(LogCatchUpTask.class);\n   Node node;\n   RaftMember raftMember;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwNTE2NQ==", "url": "https://github.com/apache/iotdb/pull/1561#discussion_r460605165", "bodyText": "Report an error or warning here if the logList is empty when breaking, which means the configured size is too small to hold even one log and this may end up in a dead loop.\nBut more importantly, does it matter if a request's size exceeds FrameSize? Will not thrift break a request into several frames? If so, what is the point to enforce request size, and if not, why does thrift call it a FramedTransport?", "author": "jt2594838", "createdAt": "2020-07-27T01:37:03Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java", "diffHunk": "@@ -178,11 +181,21 @@ void doLogCatchUpInBatch() throws TException, InterruptedException {\n     }\n \n     List<ByteBuffer> logList = new ArrayList<>();\n-    for (int i = 0; i < logs.size() && !abort; i += LOG_NUM_IN_BATCH) {\n+    for (int i = 0; i < logs.size() && !abort;) {\n       logList.clear();\n-      for (int j = i; j < i + LOG_NUM_IN_BATCH && j < logs.size(); j++) {\n-        logList.add(logs.get(j).serialize());\n+      long totalLogSize = 0;\n+      int newStart = i;\n+      for (int curNum = 0; curNum < LOG_NUM_IN_BATCH && i < logs.size(); i++, curNum++) {\n+        ByteBuffer logData = logs.get(i).serialize();\n+        totalLogSize += logData.array().length;\n+        // we should send logs who's size is smaller than the max frame size of thrift\n+        // left 200 byte for other fields of AppendEntriesRequest\n+        if (totalLogSize > IoTDBDescriptor.getInstance().getConfig().getThriftMaxFrameSize() - LEFT_SIZE_IN_REQUEST) {\n+          break;\n+        }", "originalCommit": "6703266290a1e364a2ec52fb44e734786cf3455f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYyMTMxNg==", "url": "https://github.com/apache/iotdb/pull/1561#discussion_r460621316", "bodyText": "Not break a request into several frames. If a request is too large, it will be failed. A frame hold a full request data.  https://blog.csdn.net/duyuanhai/article/details/53332981, https://andrewpqc.github.io/2019/02/24/thrift/", "author": "mychaow", "createdAt": "2020-07-27T02:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwNTE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "01f210758ec5c91e454cddb2e7d975249279ec24", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java b/cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java\nindex 90bbf2c27d..d9405092ae 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/log/catchup/LogCatchUpTask.java\n\n@@ -185,17 +184,24 @@ public class LogCatchUpTask implements Callable<Boolean> {\n       logList.clear();\n       long totalLogSize = 0;\n       int newStart = i;\n-      for (int curNum = 0; curNum < LOG_NUM_IN_BATCH && i < logs.size(); i++, curNum++) {\n+      for (int curNum = 0; curNum < ClusterConstant.LOG_NUM_IN_BATCH && i < logs.size(); i++, curNum++) {\n         ByteBuffer logData = logs.get(i).serialize();\n         totalLogSize += logData.array().length;\n         // we should send logs who's size is smaller than the max frame size of thrift\n         // left 200 byte for other fields of AppendEntriesRequest\n-        if (totalLogSize > IoTDBDescriptor.getInstance().getConfig().getThriftMaxFrameSize() - LEFT_SIZE_IN_REQUEST) {\n+        if (totalLogSize >\n+          IoTDBDescriptor.getInstance().getConfig().getThriftMaxFrameSize() - ClusterConstant.LEFT_SIZE_IN_REQUEST) {\n           break;\n         }\n         logList.add(logData);\n       }\n \n+      if (logList.isEmpty()) {\n+        logger.warn(\"the frame size {} of thrift is too small\", IoTDBDescriptor.getInstance().getConfig().getThriftMaxFrameSize());\n+        abort = true;\n+        break;\n+      }\n+\n       synchronized (raftMember.getTerm()) {\n         // make sure this node is still a leader\n         if (raftMember.getCharacter() != NodeCharacter.LEADER) {\n"}}, {"oid": "01f210758ec5c91e454cddb2e7d975249279ec24", "url": "https://github.com/apache/iotdb/commit/01f210758ec5c91e454cddb2e7d975249279ec24", "message": "fix bug for small frame size of thrift", "committedDate": "2020-07-27T03:11:07Z", "type": "forcePushed"}, {"oid": "ee2e28f4f0431d8a90d2a222aec6451cd0f3fcca", "url": "https://github.com/apache/iotdb/commit/ee2e28f4f0431d8a90d2a222aec6451cd0f3fcca", "message": "limit log size of batch catch up task", "committedDate": "2020-07-28T02:44:33Z", "type": "commit"}, {"oid": "9843e435e274c6bf5235240ef14c3a8fd705f1c7", "url": "https://github.com/apache/iotdb/commit/9843e435e274c6bf5235240ef14c3a8fd705f1c7", "message": "fix bug for small frame size of thrift", "committedDate": "2020-07-28T02:44:34Z", "type": "commit"}, {"oid": "9843e435e274c6bf5235240ef14c3a8fd705f1c7", "url": "https://github.com/apache/iotdb/commit/9843e435e274c6bf5235240ef14c3a8fd705f1c7", "message": "fix bug for small frame size of thrift", "committedDate": "2020-07-28T02:44:34Z", "type": "forcePushed"}]}