{"pr_number": 1204, "pr_title": "[IOTDB-622] add count records for all databases", "pr_createdAt": "2020-05-13T04:27:28Z", "pr_url": "https://github.com/apache/iotdb/pull/1204", "timeline": [{"oid": "48489133289c86a40699c26c9f8739dfd2a96809", "url": "https://github.com/apache/iotdb/commit/48489133289c86a40699c26c9f8739dfd2a96809", "message": "[IOTDB-622] add count records for all databases", "committedDate": "2020-05-13T06:16:17Z", "type": "forcePushed"}, {"oid": "82a02fd138719781c3a14ccebbcd895fe073c037", "url": "https://github.com/apache/iotdb/commit/82a02fd138719781c3a14ccebbcd895fe073c037", "message": "[IOTDB-622] add count records for all databases", "committedDate": "2020-05-13T11:07:15Z", "type": "forcePushed"}, {"oid": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "url": "https://github.com/apache/iotdb/commit/c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "message": "[IOTDB-622] add count records for all databases", "committedDate": "2020-05-16T03:34:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NDc5MA==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426994790", "bodyText": "dataSet is not used as a global variable. Actually, level and isByTime could also be converted to local variables", "author": "samperson1997", "createdAt": "2020-05-19T02:31:19Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+\n+public class GroupByLevelDataSet extends QueryDataSet {\n+\n+  private static final Logger logger = LoggerFactory\n+    .getLogger(GroupByLevelDataSet.class);\n+\n+  private List<RowRecord> records = new ArrayList<>();\n+  private int index = 0;\n+\n+  private int level = -1;\n+  private boolean isByTime = false;\n+  protected long queryId;\n+  private GroupByEngineDataSet dataSet;", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\nindex 3af01f0514..b24c610249 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n\n@@ -21,11 +21,12 @@ package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.query.QueryProcessException;\n-import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n import org.apache.iotdb.db.query.aggregation.AggregateResult;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NjQwMA==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426996400", "bodyText": "I think you'd better use logger.error instead of assertion, what do you think?", "author": "samperson1997", "createdAt": "2020-05-19T02:36:56Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+\n+public class GroupByLevelDataSet extends QueryDataSet {\n+\n+  private static final Logger logger = LoggerFactory\n+    .getLogger(GroupByLevelDataSet.class);\n+\n+  private List<RowRecord> records = new ArrayList<>();\n+  private int index = 0;\n+\n+  private int level = -1;\n+  private boolean isByTime = false;\n+  protected long queryId;\n+  private GroupByEngineDataSet dataSet;\n+  private GroupByPlan groupByPlan;\n+  private QueryContext context;\n+\n+  private Map<Path, GroupByExecutor> pathExecutors = new HashMap<>();\n+  private Map<Path, List<Integer>> resultIndexes = new HashMap<>();\n+\n+  public GroupByLevelDataSet(QueryContext context, GroupByPlan plan, GroupByEngineDataSet dataSet)\n+    throws QueryProcessException, StorageEngineException, IOException {\n+    this.queryId = context.getQueryId();\n+    this.level = plan.getLevel();\n+    this.isByTime = plan.isByTime();\n+    this.dataSet = dataSet;\n+    this.paths = plan.getPaths();\n+    this.dataTypes = plan.getDataTypes();\n+    this.groupByPlan = plan;\n+    this.context = context;\n+\n+    logger.debug(\"paths \" + this.paths);\n+\n+    RowRecord record = new RowRecord(0);\n+    if (!isByTime) {\n+      initGroupBy();\n+      record = getRecordWithoutTimeInterval();\n+    } else {\n+      // get all records from GroupByDataSet, then we merge them to one record\n+      logger.debug(\"only group by level, paths:\" + groupByPlan.getPaths());\n+      while (dataSet != null && dataSet.hasNextWithoutConstraint()) {\n+        RowRecord curRecord = dataSet.nextWithoutConstraint();\n+        record = mergeRecords(curRecord, record);\n+      }\n+    }\n+\n+    // prepare final records\n+    // group by level\n+    // path -> count\n+    Map<String, Long> finalPaths = new TreeMap<String, Long>();\n+\n+    for (int j = 0; j < this.paths.size(); j++) {\n+      String[] tmpPath = this.paths.get(j).getFullPath().split(\"\\\\.\");\n+\n+      String key;\n+      if (tmpPath.length <= level) {\n+        key = this.paths.get(j).getFullPath();\n+      } else {\n+        StringBuilder path = new StringBuilder();\n+        for (int k = 0; k <= level; k++) {\n+          if (k == 0) {\n+            path.append(tmpPath[k]);\n+          } else {\n+            path.append(\".\" + tmpPath[k]);\n+          }\n+        }\n+        key = path.toString();\n+      }\n+      logger.debug(\"records \" + record.getFields().toString());\n+      finalPaths.put(key,\n+        record.getFields().get(j).getLongV()\n+          + finalPaths.getOrDefault(key, 0L));\n+    }\n+\n+    this.paths = Arrays.asList(new Path(COLUMN_COLUMN), new Path(COLUMN_COUNT));\n+    this.dataTypes = Arrays.asList(TSDataType.TEXT, TSDataType.TEXT);\n+\n+    for (Map.Entry<String, Long> entry : finalPaths.entrySet()) {\n+      RowRecord tmpRecord = new RowRecord(0);\n+      Field field = new Field(TSDataType.TEXT);\n+      field.setBinaryV(new Binary(entry.getKey()));\n+      logger.debug(\"rowRecord \" + entry.getKey());\n+      Field field1 = new Field(TSDataType.TEXT);\n+      field1.setBinaryV(new Binary(Long.toString(entry.getValue())));\n+      tmpRecord.addField(field);\n+      tmpRecord.addField(field1);\n+      records.add(tmpRecord);\n+      logger.info(tmpRecord.toString());\n+    }\n+  }\n+\n+  @Override\n+  protected boolean hasNextWithoutConstraint() throws IOException {\n+    return index < records.size();\n+  }\n+\n+  @Override\n+  protected RowRecord nextWithoutConstraint() {\n+    return records.get(index++);\n+  }\n+\n+  private void initGroupBy()\n+    throws QueryProcessException, StorageEngineException {\n+    // get all aggregation results, then we package them to one record\n+    for (int i = 0; i < paths.size(); i++) {\n+      Path path = paths.get(i);\n+      if (!pathExecutors.containsKey(path)) {\n+        //init GroupByExecutor\n+        pathExecutors.put(path,\n+          getGroupByExecutor(path, groupByPlan.getAllMeasurementsInDevice(path.getDevice()), dataTypes.get(i), this.context, null, null));\n+        resultIndexes.put(path, new ArrayList<>());\n+      } else {\n+        throw new QueryProcessException(\"duplicated path found, path:\" + path);\n+      }\n+      resultIndexes.get(path).add(i);\n+      AggregateResult aggrResult = AggregateResultFactory\n+        .getAggrResultByName(groupByPlan.getDeduplicatedAggregations().get(i), dataTypes.get(i));\n+      pathExecutors.get(path).addAggregateResult(aggrResult);\n+    }\n+  }\n+\n+  private GroupByExecutor getGroupByExecutor(Path path, Set<String> allSensors, TSDataType dataType,\n+                                             QueryContext context, Filter timeFilter, TsFileFilter fileFilter)\n+    throws StorageEngineException, QueryProcessException {\n+    return new LocalGroupByExecutor(path, allSensors, dataType, context, timeFilter, fileFilter);\n+  }\n+\n+  private RowRecord getRecordWithoutTimeInterval()\n+    throws IOException {\n+    RowRecord record = new RowRecord(0);\n+    AggregateResult[] fields = new AggregateResult[paths.size()];\n+\n+    try {\n+      for (Map.Entry<Path, GroupByExecutor> pathToExecutorEntry : pathExecutors.entrySet()) {\n+        GroupByExecutor executor = pathToExecutorEntry.getValue();\n+        List<AggregateResult> aggregations = executor.calcResult(Long.MIN_VALUE, Long.MAX_VALUE);\n+        for (int i = 0; i < aggregations.size(); i++) {\n+          int resultIndex = resultIndexes.get(pathToExecutorEntry.getKey()).get(i);\n+          fields[resultIndex] = aggregations.get(i);\n+        }\n+      }\n+    } catch (QueryProcessException e) {\n+      logger.error(\"GroupByWithoutValueFilterDataSet execute has error\", e);\n+      throw new IOException(e.getMessage(), e);\n+    }\n+\n+    for (AggregateResult res : fields) {\n+      if (res == null) {\n+        record.addField(null);\n+        continue;\n+      }\n+      record.addField(res.getResult(), res.getResultDataType());\n+    }\n+    return record;\n+  }\n+\n+  private RowRecord mergeRecords(RowRecord newRecord, RowRecord oldRecord) {\n+    if (oldRecord.getFields().isEmpty()) {\n+      oldRecord.setFields(newRecord.getFields());\n+    } else {\n+      assert oldRecord.getFields().size() == newRecord.getFields().size();", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MzQwMQ==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r427053401", "bodyText": "ok, assert will help me found bug fastly. I can change it to error.", "author": "mychaow", "createdAt": "2020-05-19T06:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NjQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1NjEyOA==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r427056128", "bodyText": "And, I will maintain the User Guide docluments after merge.", "author": "mychaow", "createdAt": "2020-05-19T06:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NjQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\nindex 3af01f0514..b24c610249 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n\n@@ -21,11 +21,12 @@ package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.query.QueryProcessException;\n-import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n import org.apache.iotdb.db.query.aggregation.AggregateResult;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk4ODU0NQ==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426988545", "bodyText": "The GroupByPlan is actually GroupByTimePlan, so no need to add a byTime field, we can rename the class.", "author": "qiaojialin", "createdAt": "2020-05-19T02:07:15Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java", "diffHunk": "@@ -33,6 +33,8 @@\n   // if it is left close and right open interval\n   private boolean leftCRightO = true;\n \n+  private boolean byTime = false;", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java b/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByTimePlan.java\nsimilarity index 93%\nrename from server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java\nrename to server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByTimePlan.java\nindex 1ff7c55959..cc76465bd5 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByTimePlan.java\n\n@@ -35,9 +35,9 @@ public class GroupByPlan extends AggregationPlan {\n \n   private boolean byTime = false;\n \n-  public GroupByPlan() {\n+  public GroupByTimePlan() {\n     super();\n-    setOperatorType(Operator.OperatorType.GROUPBY);\n+    setOperatorType(Operator.OperatorType.GROUPBYTIME);\n   }\n \n   public long getStartTime() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MTI3Mg==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426991272", "bodyText": "Actually, we support path like this:  root.sg.d.\"s.1\"\ns.1 is measurement name", "author": "qiaojialin", "createdAt": "2020-05-19T02:17:59Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+\n+public class GroupByLevelDataSet extends QueryDataSet {\n+\n+  private static final Logger logger = LoggerFactory\n+    .getLogger(GroupByLevelDataSet.class);\n+\n+  private List<RowRecord> records = new ArrayList<>();\n+  private int index = 0;\n+\n+  private int level = -1;\n+  private boolean isByTime = false;\n+  protected long queryId;\n+  private GroupByEngineDataSet dataSet;\n+  private GroupByPlan groupByPlan;\n+  private QueryContext context;\n+\n+  private Map<Path, GroupByExecutor> pathExecutors = new HashMap<>();\n+  private Map<Path, List<Integer>> resultIndexes = new HashMap<>();\n+\n+  public GroupByLevelDataSet(QueryContext context, GroupByPlan plan, GroupByEngineDataSet dataSet)\n+    throws QueryProcessException, StorageEngineException, IOException {\n+    this.queryId = context.getQueryId();\n+    this.level = plan.getLevel();\n+    this.isByTime = plan.isByTime();\n+    this.dataSet = dataSet;\n+    this.paths = plan.getPaths();\n+    this.dataTypes = plan.getDataTypes();\n+    this.groupByPlan = plan;\n+    this.context = context;\n+\n+    logger.debug(\"paths \" + this.paths);\n+\n+    RowRecord record = new RowRecord(0);\n+    if (!isByTime) {\n+      initGroupBy();\n+      record = getRecordWithoutTimeInterval();\n+    } else {\n+      // get all records from GroupByDataSet, then we merge them to one record\n+      logger.debug(\"only group by level, paths:\" + groupByPlan.getPaths());\n+      while (dataSet != null && dataSet.hasNextWithoutConstraint()) {\n+        RowRecord curRecord = dataSet.nextWithoutConstraint();\n+        record = mergeRecords(curRecord, record);\n+      }\n+    }\n+\n+    // prepare final records\n+    // group by level\n+    // path -> count\n+    Map<String, Long> finalPaths = new TreeMap<String, Long>();\n+\n+    for (int j = 0; j < this.paths.size(); j++) {\n+      String[] tmpPath = this.paths.get(j).getFullPath().split(\"\\\\.\");", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\nindex 3af01f0514..b24c610249 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n\n@@ -21,11 +21,12 @@ package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.query.QueryProcessException;\n-import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n import org.apache.iotdb.db.query.aggregation.AggregateResult;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MTQ5OQ==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426991499", "bodyText": "add if (logger.isDebugEnabled())", "author": "qiaojialin", "createdAt": "2020-05-19T02:18:50Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+\n+public class GroupByLevelDataSet extends QueryDataSet {\n+\n+  private static final Logger logger = LoggerFactory\n+    .getLogger(GroupByLevelDataSet.class);\n+\n+  private List<RowRecord> records = new ArrayList<>();\n+  private int index = 0;\n+\n+  private int level = -1;\n+  private boolean isByTime = false;\n+  protected long queryId;\n+  private GroupByEngineDataSet dataSet;\n+  private GroupByPlan groupByPlan;\n+  private QueryContext context;\n+\n+  private Map<Path, GroupByExecutor> pathExecutors = new HashMap<>();\n+  private Map<Path, List<Integer>> resultIndexes = new HashMap<>();\n+\n+  public GroupByLevelDataSet(QueryContext context, GroupByPlan plan, GroupByEngineDataSet dataSet)\n+    throws QueryProcessException, StorageEngineException, IOException {\n+    this.queryId = context.getQueryId();\n+    this.level = plan.getLevel();\n+    this.isByTime = plan.isByTime();\n+    this.dataSet = dataSet;\n+    this.paths = plan.getPaths();\n+    this.dataTypes = plan.getDataTypes();\n+    this.groupByPlan = plan;\n+    this.context = context;\n+\n+    logger.debug(\"paths \" + this.paths);\n+\n+    RowRecord record = new RowRecord(0);\n+    if (!isByTime) {\n+      initGroupBy();\n+      record = getRecordWithoutTimeInterval();\n+    } else {\n+      // get all records from GroupByDataSet, then we merge them to one record\n+      logger.debug(\"only group by level, paths:\" + groupByPlan.getPaths());\n+      while (dataSet != null && dataSet.hasNextWithoutConstraint()) {\n+        RowRecord curRecord = dataSet.nextWithoutConstraint();\n+        record = mergeRecords(curRecord, record);\n+      }\n+    }\n+\n+    // prepare final records\n+    // group by level\n+    // path -> count\n+    Map<String, Long> finalPaths = new TreeMap<String, Long>();\n+\n+    for (int j = 0; j < this.paths.size(); j++) {\n+      String[] tmpPath = this.paths.get(j).getFullPath().split(\"\\\\.\");\n+\n+      String key;\n+      if (tmpPath.length <= level) {\n+        key = this.paths.get(j).getFullPath();\n+      } else {\n+        StringBuilder path = new StringBuilder();\n+        for (int k = 0; k <= level; k++) {\n+          if (k == 0) {\n+            path.append(tmpPath[k]);\n+          } else {\n+            path.append(\".\" + tmpPath[k]);\n+          }\n+        }\n+        key = path.toString();\n+      }\n+      logger.debug(\"records \" + record.getFields().toString());", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\nindex 3af01f0514..b24c610249 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n\n@@ -21,11 +21,12 @@ package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.query.QueryProcessException;\n-import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n import org.apache.iotdb.db.query.aggregation.AggregateResult;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MTg4OA==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426991888", "bodyText": "please add javadoc and an example", "author": "qiaojialin", "createdAt": "2020-05-19T02:20:22Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+\n+public class GroupByLevelDataSet extends QueryDataSet {\n+\n+  private static final Logger logger = LoggerFactory\n+    .getLogger(GroupByLevelDataSet.class);\n+\n+  private List<RowRecord> records = new ArrayList<>();\n+  private int index = 0;\n+\n+  private int level = -1;\n+  private boolean isByTime = false;\n+  protected long queryId;\n+  private GroupByEngineDataSet dataSet;\n+  private GroupByPlan groupByPlan;\n+  private QueryContext context;\n+\n+  private Map<Path, GroupByExecutor> pathExecutors = new HashMap<>();\n+  private Map<Path, List<Integer>> resultIndexes = new HashMap<>();\n+\n+  public GroupByLevelDataSet(QueryContext context, GroupByPlan plan, GroupByEngineDataSet dataSet)\n+    throws QueryProcessException, StorageEngineException, IOException {\n+    this.queryId = context.getQueryId();\n+    this.level = plan.getLevel();\n+    this.isByTime = plan.isByTime();\n+    this.dataSet = dataSet;\n+    this.paths = plan.getPaths();\n+    this.dataTypes = plan.getDataTypes();\n+    this.groupByPlan = plan;\n+    this.context = context;\n+\n+    logger.debug(\"paths \" + this.paths);\n+\n+    RowRecord record = new RowRecord(0);\n+    if (!isByTime) {\n+      initGroupBy();\n+      record = getRecordWithoutTimeInterval();\n+    } else {\n+      // get all records from GroupByDataSet, then we merge them to one record\n+      logger.debug(\"only group by level, paths:\" + groupByPlan.getPaths());\n+      while (dataSet != null && dataSet.hasNextWithoutConstraint()) {\n+        RowRecord curRecord = dataSet.nextWithoutConstraint();\n+        record = mergeRecords(curRecord, record);\n+      }\n+    }\n+\n+    // prepare final records\n+    // group by level\n+    // path -> count\n+    Map<String, Long> finalPaths = new TreeMap<String, Long>();\n+\n+    for (int j = 0; j < this.paths.size(); j++) {\n+      String[] tmpPath = this.paths.get(j).getFullPath().split(\"\\\\.\");\n+\n+      String key;\n+      if (tmpPath.length <= level) {\n+        key = this.paths.get(j).getFullPath();\n+      } else {\n+        StringBuilder path = new StringBuilder();\n+        for (int k = 0; k <= level; k++) {\n+          if (k == 0) {\n+            path.append(tmpPath[k]);\n+          } else {\n+            path.append(\".\" + tmpPath[k]);\n+          }\n+        }\n+        key = path.toString();\n+      }\n+      logger.debug(\"records \" + record.getFields().toString());\n+      finalPaths.put(key,\n+        record.getFields().get(j).getLongV()\n+          + finalPaths.getOrDefault(key, 0L));\n+    }\n+\n+    this.paths = Arrays.asList(new Path(COLUMN_COLUMN), new Path(COLUMN_COUNT));\n+    this.dataTypes = Arrays.asList(TSDataType.TEXT, TSDataType.TEXT);\n+\n+    for (Map.Entry<String, Long> entry : finalPaths.entrySet()) {\n+      RowRecord tmpRecord = new RowRecord(0);\n+      Field field = new Field(TSDataType.TEXT);\n+      field.setBinaryV(new Binary(entry.getKey()));\n+      logger.debug(\"rowRecord \" + entry.getKey());\n+      Field field1 = new Field(TSDataType.TEXT);\n+      field1.setBinaryV(new Binary(Long.toString(entry.getValue())));\n+      tmpRecord.addField(field);\n+      tmpRecord.addField(field1);\n+      records.add(tmpRecord);\n+      logger.info(tmpRecord.toString());\n+    }\n+  }\n+\n+  @Override\n+  protected boolean hasNextWithoutConstraint() throws IOException {\n+    return index < records.size();\n+  }\n+\n+  @Override\n+  protected RowRecord nextWithoutConstraint() {\n+    return records.get(index++);\n+  }\n+\n+  private void initGroupBy()\n+    throws QueryProcessException, StorageEngineException {\n+    // get all aggregation results, then we package them to one record\n+    for (int i = 0; i < paths.size(); i++) {\n+      Path path = paths.get(i);\n+      if (!pathExecutors.containsKey(path)) {\n+        //init GroupByExecutor\n+        pathExecutors.put(path,\n+          getGroupByExecutor(path, groupByPlan.getAllMeasurementsInDevice(path.getDevice()), dataTypes.get(i), this.context, null, null));\n+        resultIndexes.put(path, new ArrayList<>());\n+      } else {\n+        throw new QueryProcessException(\"duplicated path found, path:\" + path);\n+      }\n+      resultIndexes.get(path).add(i);\n+      AggregateResult aggrResult = AggregateResultFactory\n+        .getAggrResultByName(groupByPlan.getDeduplicatedAggregations().get(i), dataTypes.get(i));\n+      pathExecutors.get(path).addAggregateResult(aggrResult);\n+    }\n+  }\n+\n+  private GroupByExecutor getGroupByExecutor(Path path, Set<String> allSensors, TSDataType dataType,\n+                                             QueryContext context, Filter timeFilter, TsFileFilter fileFilter)\n+    throws StorageEngineException, QueryProcessException {\n+    return new LocalGroupByExecutor(path, allSensors, dataType, context, timeFilter, fileFilter);\n+  }\n+\n+  private RowRecord getRecordWithoutTimeInterval()\n+    throws IOException {\n+    RowRecord record = new RowRecord(0);\n+    AggregateResult[] fields = new AggregateResult[paths.size()];\n+\n+    try {\n+      for (Map.Entry<Path, GroupByExecutor> pathToExecutorEntry : pathExecutors.entrySet()) {\n+        GroupByExecutor executor = pathToExecutorEntry.getValue();\n+        List<AggregateResult> aggregations = executor.calcResult(Long.MIN_VALUE, Long.MAX_VALUE);\n+        for (int i = 0; i < aggregations.size(); i++) {\n+          int resultIndex = resultIndexes.get(pathToExecutorEntry.getKey()).get(i);\n+          fields[resultIndex] = aggregations.get(i);\n+        }\n+      }\n+    } catch (QueryProcessException e) {\n+      logger.error(\"GroupByWithoutValueFilterDataSet execute has error\", e);\n+      throw new IOException(e.getMessage(), e);\n+    }\n+\n+    for (AggregateResult res : fields) {\n+      if (res == null) {\n+        record.addField(null);\n+        continue;\n+      }\n+      record.addField(res.getResult(), res.getResultDataType());\n+    }\n+    return record;\n+  }\n+\n+  private RowRecord mergeRecords(RowRecord newRecord, RowRecord oldRecord) {", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\nindex 3af01f0514..b24c610249 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n\n@@ -21,11 +21,12 @@ package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.query.QueryProcessException;\n-import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n import org.apache.iotdb.db.query.aggregation.AggregateResult;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5Mjg0Nw==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426992847", "bodyText": "initGroupByLevel?", "author": "qiaojialin", "createdAt": "2020-05-19T02:23:58Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+\n+public class GroupByLevelDataSet extends QueryDataSet {\n+\n+  private static final Logger logger = LoggerFactory\n+    .getLogger(GroupByLevelDataSet.class);\n+\n+  private List<RowRecord> records = new ArrayList<>();\n+  private int index = 0;\n+\n+  private int level = -1;\n+  private boolean isByTime = false;\n+  protected long queryId;\n+  private GroupByEngineDataSet dataSet;\n+  private GroupByPlan groupByPlan;\n+  private QueryContext context;\n+\n+  private Map<Path, GroupByExecutor> pathExecutors = new HashMap<>();\n+  private Map<Path, List<Integer>> resultIndexes = new HashMap<>();\n+\n+  public GroupByLevelDataSet(QueryContext context, GroupByPlan plan, GroupByEngineDataSet dataSet)\n+    throws QueryProcessException, StorageEngineException, IOException {\n+    this.queryId = context.getQueryId();\n+    this.level = plan.getLevel();\n+    this.isByTime = plan.isByTime();\n+    this.dataSet = dataSet;\n+    this.paths = plan.getPaths();\n+    this.dataTypes = plan.getDataTypes();\n+    this.groupByPlan = plan;\n+    this.context = context;\n+\n+    logger.debug(\"paths \" + this.paths);\n+\n+    RowRecord record = new RowRecord(0);\n+    if (!isByTime) {\n+      initGroupBy();\n+      record = getRecordWithoutTimeInterval();\n+    } else {\n+      // get all records from GroupByDataSet, then we merge them to one record\n+      logger.debug(\"only group by level, paths:\" + groupByPlan.getPaths());\n+      while (dataSet != null && dataSet.hasNextWithoutConstraint()) {\n+        RowRecord curRecord = dataSet.nextWithoutConstraint();\n+        record = mergeRecords(curRecord, record);\n+      }\n+    }\n+\n+    // prepare final records\n+    // group by level\n+    // path -> count\n+    Map<String, Long> finalPaths = new TreeMap<String, Long>();\n+\n+    for (int j = 0; j < this.paths.size(); j++) {\n+      String[] tmpPath = this.paths.get(j).getFullPath().split(\"\\\\.\");\n+\n+      String key;\n+      if (tmpPath.length <= level) {\n+        key = this.paths.get(j).getFullPath();\n+      } else {\n+        StringBuilder path = new StringBuilder();\n+        for (int k = 0; k <= level; k++) {\n+          if (k == 0) {\n+            path.append(tmpPath[k]);\n+          } else {\n+            path.append(\".\" + tmpPath[k]);\n+          }\n+        }\n+        key = path.toString();\n+      }\n+      logger.debug(\"records \" + record.getFields().toString());\n+      finalPaths.put(key,\n+        record.getFields().get(j).getLongV()\n+          + finalPaths.getOrDefault(key, 0L));\n+    }\n+\n+    this.paths = Arrays.asList(new Path(COLUMN_COLUMN), new Path(COLUMN_COUNT));\n+    this.dataTypes = Arrays.asList(TSDataType.TEXT, TSDataType.TEXT);\n+\n+    for (Map.Entry<String, Long> entry : finalPaths.entrySet()) {\n+      RowRecord tmpRecord = new RowRecord(0);\n+      Field field = new Field(TSDataType.TEXT);\n+      field.setBinaryV(new Binary(entry.getKey()));\n+      logger.debug(\"rowRecord \" + entry.getKey());\n+      Field field1 = new Field(TSDataType.TEXT);\n+      field1.setBinaryV(new Binary(Long.toString(entry.getValue())));\n+      tmpRecord.addField(field);\n+      tmpRecord.addField(field1);\n+      records.add(tmpRecord);\n+      logger.info(tmpRecord.toString());\n+    }\n+  }\n+\n+  @Override\n+  protected boolean hasNextWithoutConstraint() throws IOException {\n+    return index < records.size();\n+  }\n+\n+  @Override\n+  protected RowRecord nextWithoutConstraint() {\n+    return records.get(index++);\n+  }\n+\n+  private void initGroupBy()", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\nindex 3af01f0514..b24c610249 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n\n@@ -21,11 +21,12 @@ package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.query.QueryProcessException;\n-import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n import org.apache.iotdb.db.query.aggregation.AggregateResult;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MzAzMA==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426993030", "bodyText": "check if debug enabled", "author": "qiaojialin", "createdAt": "2020-05-19T02:24:52Z", "path": "server/src/main/java/org/apache/iotdb/db/query/executor/QueryRouter.java", "diffHunk": "@@ -113,34 +114,45 @@ protected AggregationExecutor getAggregationExecutor(AggregationPlan aggregation\n \n   @Override\n   public QueryDataSet groupBy(GroupByPlan groupByPlan, QueryContext context)\n-      throws QueryFilterOptimizationException, StorageEngineException, QueryProcessException {\n-    long unit = groupByPlan.getInterval();\n-    long slidingStep = groupByPlan.getSlidingStep();\n-    long startTime = groupByPlan.getStartTime();\n-    long endTime = groupByPlan.getEndTime();\n+    throws QueryFilterOptimizationException, StorageEngineException, QueryProcessException, IOException {\n+\n+    logger.debug(\"paths:\" + groupByPlan.getPaths() + \" level:\" + groupByPlan.getLevel() + \" byTime:\" + groupByPlan.isByTime());", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1ODYxNQ==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r427058615", "bodyText": "ok", "author": "mychaow", "createdAt": "2020-05-19T06:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MzAzMA=="}], "type": "inlineReview", "revised_code": {"commit": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/executor/QueryRouter.java b/server/src/main/java/org/apache/iotdb/db/query/executor/QueryRouter.java\nindex a9d46efc39..4823cc6fc9 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/executor/QueryRouter.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/executor/QueryRouter.java\n\n@@ -113,20 +113,20 @@ public class QueryRouter implements IQueryRouter {\n   }\n \n   @Override\n-  public QueryDataSet groupBy(GroupByPlan groupByPlan, QueryContext context)\n+  public QueryDataSet groupBy(GroupByTimePlan groupByTimePlan, QueryContext context)\n     throws QueryFilterOptimizationException, StorageEngineException, QueryProcessException, IOException {\n \n-    logger.debug(\"paths:\" + groupByPlan.getPaths() + \" level:\" + groupByPlan.getLevel() + \" byTime:\" + groupByPlan.isByTime());\n+    logger.debug(\"paths:\" + groupByTimePlan.getPaths() + \" level:\" + groupByTimePlan.getLevel() + \" byTime:\" + groupByTimePlan.isByTime());\n \n     GroupByEngineDataSet dataSet = null;\n-    if (groupByPlan.isByTime()) {\n-      long unit = groupByPlan.getInterval();\n-      long slidingStep = groupByPlan.getSlidingStep();\n-      long startTime = groupByPlan.getStartTime();\n-      long endTime = groupByPlan.getEndTime();\n+    if (groupByTimePlan.isByTime()) {\n+      long unit = groupByTimePlan.getInterval();\n+      long slidingStep = groupByTimePlan.getSlidingStep();\n+      long startTime = groupByTimePlan.getStartTime();\n+      long endTime = groupByTimePlan.getEndTime();\n \n-      IExpression expression = groupByPlan.getExpression();\n-      List<Path> selectedSeries = groupByPlan.getDeduplicatedPaths();\n+      IExpression expression = groupByTimePlan.getExpression();\n+      List<Path> selectedSeries = groupByTimePlan.getDeduplicatedPaths();\n \n       GlobalTimeExpression timeExpression = new GlobalTimeExpression(\n         new GroupByFilter(unit, slidingStep, startTime, endTime));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5Njg0Mg==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426996842", "bodyText": "since there is more than one group by, it's better to use full name.   GroupByLevel and GroupByTime", "author": "qiaojialin", "createdAt": "2020-05-19T02:38:38Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -664,6 +668,7 @@ public void enterGroupByFillClause(SqlBaseParser.GroupByFillClauseContext ctx) {\n     super.enterGroupByFillClause(ctx);\n     queryOp.setGroupBy(true);\n     queryOp.setFill(true);\n+    queryOp.setGroupByTime(true);", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1aafb4d7bb71538b9a874c833ef2a78fd734a7", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java b/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\nindex 40b86656ba..421f0b5650 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n\n@@ -666,7 +676,7 @@ public class LogicalGenerator extends SqlBaseBaseListener {\n   @Override\n   public void enterGroupByFillClause(SqlBaseParser.GroupByFillClauseContext ctx) {\n     super.enterGroupByFillClause(ctx);\n-    queryOp.setGroupBy(true);\n+    queryOp.setGroupByLevel(true);\n     queryOp.setFill(true);\n     queryOp.setGroupByTime(true);\n     queryOp.setLeftCRightO(ctx.timeInterval().LS_BRACKET() != null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTIwOQ==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r426999209", "bodyText": "Replace this with an AggregationPlan", "author": "qiaojialin", "createdAt": "2020-05-19T02:47:56Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+\n+public class GroupByLevelDataSet extends QueryDataSet {\n+\n+  private static final Logger logger = LoggerFactory\n+    .getLogger(GroupByLevelDataSet.class);\n+\n+  private List<RowRecord> records = new ArrayList<>();\n+  private int index = 0;\n+\n+  private int level = -1;\n+  private boolean isByTime = false;\n+  protected long queryId;\n+  private GroupByEngineDataSet dataSet;\n+  private GroupByPlan groupByPlan;", "originalCommit": "c18f4b65c8a4221c1fbf93f3c9fc3b9b458075a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\nindex 3af01f0514..b24c610249 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n\n@@ -21,11 +21,12 @@ package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.exception.StorageEngineException;\n import org.apache.iotdb.db.exception.query.QueryProcessException;\n-import org.apache.iotdb.db.qp.physical.crud.GroupByPlan;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n import org.apache.iotdb.db.query.aggregation.AggregateResult;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n"}}, {"oid": "dfc719dee08337eaffcb4a90ea950255ff25cc9f", "url": "https://github.com/apache/iotdb/commit/dfc719dee08337eaffcb4a90ea950255ff25cc9f", "message": "[IOTDB-622] add count records for all databases", "committedDate": "2020-05-20T07:56:23Z", "type": "forcePushed"}, {"oid": "b0103b4c72df9543419ae31f49929d54d623bfa3", "url": "https://github.com/apache/iotdb/commit/b0103b4c72df9543419ae31f49929d54d623bfa3", "message": "[IOTDB-622] add count records for all databases", "committedDate": "2020-05-20T12:55:30Z", "type": "forcePushed"}, {"oid": "9a1aafb4d7bb71538b9a874c833ef2a78fd734a7", "url": "https://github.com/apache/iotdb/commit/9a1aafb4d7bb71538b9a874c833ef2a78fd734a7", "message": "[IOTDB-622] add count records for all databases", "committedDate": "2020-05-21T02:56:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDk2MQ==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r428404961", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GroupByFillTimePlan extends GroupByTimePlan {\n          \n          \n            \n            public class GroupByTimeFillPlan extends GroupByTimePlan {", "author": "qiaojialin", "createdAt": "2020-05-21T02:02:52Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByFillTimePlan.java", "diffHunk": "@@ -24,11 +24,11 @@\n \n import java.util.Map;\n \n-public class GroupByFillPlan extends GroupByPlan {\n+public class GroupByFillTimePlan extends GroupByTimePlan {", "originalCommit": "b0103b4c72df9543419ae31f49929d54d623bfa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46386cd6a9af2826c6d5d2b8ecbd349269e6ea45", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByFillTimePlan.java b/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByTimeFillPlan.java\nsimilarity index 93%\nrename from server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByFillTimePlan.java\nrename to server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByTimeFillPlan.java\nindex 55400f7ae8..c5d741b68e 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByFillTimePlan.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByTimeFillPlan.java\n\n@@ -24,11 +24,11 @@ import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n \n import java.util.Map;\n \n-public class GroupByFillTimePlan extends GroupByTimePlan {\n+public class GroupByTimeFillPlan extends GroupByTimePlan {\n \n   private Map<TSDataType, IFill> fillTypes;\n \n-  public GroupByFillTimePlan() {\n+  public GroupByTimeFillPlan() {\n     super();\n     setOperatorType(Operator.OperatorType.GROUP_BY_FILL);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNTc0Ng==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r428405746", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean isGroupBy = false;\n          \n          \n            \n              private boolean isGroupByLevel = false;", "author": "qiaojialin", "createdAt": "2020-05-21T02:06:08Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "diffHunk": "@@ -42,6 +42,9 @@\n   private Map<TSDataType, IFill> fillTypes;\n   private boolean isFill = false;\n \n+  private boolean isGroupBy = false;", "originalCommit": "b0103b4c72df9543419ae31f49929d54d623bfa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1aafb4d7bb71538b9a874c833ef2a78fd734a7", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java b/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java\nindex 6f71ba5178..1166592d82 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java\n\n@@ -42,7 +42,7 @@ public class QueryOperator extends SFWOperator {\n   private Map<TSDataType, IFill> fillTypes;\n   private boolean isFill = false;\n \n-  private boolean isGroupBy = false;\n+  private boolean isGroupByLevel = false;\n   private int level = -1;\n \n   private int rowLimit = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyNjQxNA==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r429526414", "bodyText": "The GroupByTimePlan extends AggregationPlan extends RawDataQueryPlan extends QueryPlan.\nThe paths in QueryPlan are not duplicated, here we should use plan.getDeduplicatedPath()\nBesides, please add some test for duplicated queries like\nselect count(s1), count(s1) from root.turbine1.d1 group by([1,10),2ms), level=2", "author": "qiaojialin", "createdAt": "2020-05-23T08:19:13Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+\n+public class GroupByLevelDataSet extends QueryDataSet {\n+\n+  private static final Logger logger = LoggerFactory\n+    .getLogger(GroupByLevelDataSet.class);\n+\n+  private List<RowRecord> records = new ArrayList<>();\n+  private int index = 0;\n+\n+  protected long queryId;\n+  private GroupByTimePlan groupByTimePlan;\n+  private QueryContext context;\n+\n+  private Map<Path, GroupByExecutor> pathExecutors = new HashMap<>();\n+  private Map<Path, List<Integer>> resultIndexes = new HashMap<>();\n+\n+  public GroupByLevelDataSet(QueryContext context, GroupByTimePlan plan, GroupByEngineDataSet dataSet)\n+    throws QueryProcessException, StorageEngineException, IOException {\n+    this.queryId = context.getQueryId();\n+    this.paths = plan.getPaths();", "originalCommit": "9a1aafb4d7bb71538b9a874c833ef2a78fd734a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MTE2Mw==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r429541163", "bodyText": "ok", "author": "mychaow", "createdAt": "2020-05-23T12:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyNjQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "46386cd6a9af2826c6d5d2b8ecbd349269e6ea45", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\nindex b24c610249..d72045e1f6 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n\n@@ -19,29 +19,22 @@\n \n package org.apache.iotdb.db.query.dataset.groupby;\n \n-import org.apache.iotdb.db.exception.StorageEngineException;\n-import org.apache.iotdb.db.exception.query.QueryProcessException;\n-import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n-import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.qp.physical.crud.AggregationPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n-import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n-import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.query.dataset.SingleDataSet;\n import org.apache.iotdb.db.utils.FilePathUtils;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Field;\n-import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n-import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n-import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n-import java.util.*;\n-\n-import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n-import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n public class GroupByLevelDataSet extends QueryDataSet {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyODE3Mw==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r429528173", "bodyText": "We need to maintain the time filter user, this implementation can not handle the following sql correctly\nselect count(*) from root where time < 5 group by level=2\nI suggest extending the AggregationExecutor to do this. It's more intuitive...", "author": "qiaojialin", "createdAt": "2020-05-23T08:47:52Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+\n+public class GroupByLevelDataSet extends QueryDataSet {\n+\n+  private static final Logger logger = LoggerFactory\n+    .getLogger(GroupByLevelDataSet.class);\n+\n+  private List<RowRecord> records = new ArrayList<>();\n+  private int index = 0;\n+\n+  protected long queryId;\n+  private GroupByTimePlan groupByTimePlan;\n+  private QueryContext context;\n+\n+  private Map<Path, GroupByExecutor> pathExecutors = new HashMap<>();\n+  private Map<Path, List<Integer>> resultIndexes = new HashMap<>();\n+\n+  public GroupByLevelDataSet(QueryContext context, GroupByTimePlan plan, GroupByEngineDataSet dataSet)\n+    throws QueryProcessException, StorageEngineException, IOException {\n+    this.queryId = context.getQueryId();\n+    this.paths = plan.getPaths();\n+    this.dataTypes = plan.getDataTypes();\n+    this.groupByTimePlan = plan;\n+    this.context = context;\n+\n+    if (logger.isDebugEnabled()) {\n+      logger.debug(\"paths \" + this.paths + \" level:\" + plan.getLevel());\n+    }\n+\n+    Map<Integer, String> pathIndex = new HashMap<>();\n+    Map<String, Long> finalPaths = FilePathUtils.getPathByLevel(plan.getPaths(), plan.getLevel(), pathIndex);\n+\n+    if (!plan.isByTime()) {\n+      // does not has time interval,\n+      // so we could group by time interval [MIN_VALUE, MAX_VALUE] to get the total number\n+      initGroupByLevel();\n+      RowRecord record = mergeRecordByPath(getRecordWithoutTimeInterval(), finalPaths, pathIndex);\n+      if (record != null) {\n+        records.add(record);\n+      }\n+    } else {\n+      // get all records from GroupByDataSet, then we merge every record\n+      if (logger.isDebugEnabled()) {\n+        logger.debug(\"only group by level, paths:\" + groupByTimePlan.getPaths());\n+      }\n+      while (dataSet != null && dataSet.hasNextWithoutConstraint()) {\n+        RowRecord curRecord = mergeRecordByPath(dataSet.nextWithoutConstraint(), finalPaths, pathIndex);\n+        if (curRecord != null) {\n+          records.add(curRecord);\n+        }\n+      }\n+    }\n+\n+    this.dataTypes = new ArrayList<>();\n+    this.paths = new ArrayList<>();\n+    for (int i = 0; i < finalPaths.size(); i++) {\n+      this.dataTypes.add(TSDataType.INT64);\n+    }\n+  }\n+\n+  @Override\n+  protected boolean hasNextWithoutConstraint() throws IOException {\n+    return index < records.size();\n+  }\n+\n+  @Override\n+  protected RowRecord nextWithoutConstraint() {\n+    return records.get(index++);\n+  }\n+\n+  private void initGroupByLevel()\n+    throws QueryProcessException, StorageEngineException {\n+    // get all aggregation results, then we package them to one record\n+    for (int i = 0; i < paths.size(); i++) {\n+      Path path = paths.get(i);\n+      if (!pathExecutors.containsKey(path)) {\n+        //init GroupByExecutor\n+        pathExecutors.put(path,\n+          getGroupByExecutor(path, groupByTimePlan.getAllMeasurementsInDevice(path.getDevice()), dataTypes.get(i), this.context, null, null));\n+        resultIndexes.put(path, new ArrayList<>());", "originalCommit": "9a1aafb4d7bb71538b9a874c833ef2a78fd734a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46386cd6a9af2826c6d5d2b8ecbd349269e6ea45", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\nindex b24c610249..d72045e1f6 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByLevelDataSet.java\n\n@@ -19,29 +19,22 @@\n \n package org.apache.iotdb.db.query.dataset.groupby;\n \n-import org.apache.iotdb.db.exception.StorageEngineException;\n-import org.apache.iotdb.db.exception.query.QueryProcessException;\n-import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n-import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.qp.physical.crud.AggregationPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n-import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n-import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.query.dataset.SingleDataSet;\n import org.apache.iotdb.db.utils.FilePathUtils;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.Field;\n-import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n-import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n-import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n-import java.util.*;\n-\n-import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COLUMN;\n-import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_COUNT;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n public class GroupByLevelDataSet extends QueryDataSet {\n \n"}}, {"oid": "46386cd6a9af2826c6d5d2b8ecbd349269e6ea45", "url": "https://github.com/apache/iotdb/commit/46386cd6a9af2826c6d5d2b8ecbd349269e6ea45", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-05-26T03:45:28Z", "type": "forcePushed"}, {"oid": "a01ec1aa74a337a9c7cfb12fe6fc4391dd58da4f", "url": "https://github.com/apache/iotdb/commit/a01ec1aa74a337a9c7cfb12fe6fc4391dd58da4f", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-06-02T04:24:07Z", "type": "forcePushed"}, {"oid": "03684ce65390625171c2dfaab984c12710ea4827", "url": "https://github.com/apache/iotdb/commit/03684ce65390625171c2dfaab984c12710ea4827", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-06-02T06:16:22Z", "type": "forcePushed"}, {"oid": "fe790833a4927eb8877275b4fd6657eafc0d0290", "url": "https://github.com/apache/iotdb/commit/fe790833a4927eb8877275b4fd6657eafc0d0290", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-06-02T08:18:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMDc5Mg==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r435820792", "bodyText": "Hey, just like @qiaojialin said, you can reuse MetaUtils.getNodesName() method here~", "author": "Alima777", "createdAt": "2020-06-05T10:02:27Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/FilePathUtils.java", "diffHunk": "@@ -46,4 +54,82 @@ public static String regularizePath(String filePath){\n     return resource.getFile().getAbsolutePath().split(PATH_SPLIT_STRING);\n   }\n \n+  /**\n+   * get paths from group by level, like root.sg1.d2.s0, root.sg1.d1.s1\n+   * level=1, return [root.sg1, 0] and pathIndex turns to be [[0, root.sg1], [1, root.sg1]]\n+   * @param rawPaths\n+   * @param level\n+   * @param pathIndex\n+   * @return\n+   */\n+  public static Map<String, Long> getPathByLevel(List<Path> rawPaths, int level, Map<Integer, String> pathIndex) {\n+    // pathGroupByLevel -> count\n+    Map<String, Long> finalPaths = new TreeMap<>();\n+\n+    int i = 0;\n+    for (Path value : rawPaths) {\n+      String[] tmpPath = value.getFullPath().split(\"\\\\.\");", "originalCommit": "fe790833a4927eb8877275b4fd6657eafc0d0290", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa298ab3fc549c48a288d4d902746801e57099a1", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/utils/FilePathUtils.java b/server/src/main/java/org/apache/iotdb/db/utils/FilePathUtils.java\nindex 6277608220..3c545416b6 100644\n--- a/server/src/main/java/org/apache/iotdb/db/utils/FilePathUtils.java\n+++ b/server/src/main/java/org/apache/iotdb/db/utils/FilePathUtils.java\n\n@@ -93,43 +90,4 @@ public class FilePathUtils {\n     return finalPaths;\n   }\n \n-  /**\n-   * merge the raw record by level, for example\n-   * raw record [timestamp, root.sg1.d1.s0, root.sg1.d1.s1, root.sg1.d2.s2], level=1\n-   * and newRecord data is [100, 1, 1, 1]\n-   * return [100, 3]\n-   *\n-   * @param newRecord\n-   * @param finalPaths\n-   * @param pathIndex\n-   * @return\n-   */\n-  public static RowRecord mergeRecordByPath(RowRecord newRecord,\n-                                      Map<String, Long> finalPaths,\n-                                      Map<Integer, String> pathIndex) {\n-    if (newRecord.getFields().size() < finalPaths.size()) {\n-      return null;\n-    }\n-\n-    // reset final paths\n-    for (Map.Entry<String, Long> entry : finalPaths.entrySet()) {\n-      entry.setValue(0L);\n-    }\n-\n-    RowRecord tmpRecord = new RowRecord(newRecord.getTimestamp());\n-\n-    for (int i = 0; i < newRecord.getFields().size(); i++) {\n-      if (newRecord.getFields().get(i) != null) {\n-        finalPaths.put(pathIndex.get(i),\n-          finalPaths.get(pathIndex.get(i)) + newRecord.getFields().get(i).getLongV());\n-      }\n-    }\n-\n-    for (Map.Entry<String, Long> entry : finalPaths.entrySet()) {\n-      tmpRecord.addField(Field.getField(entry.getValue(), TSDataType.INT64));\n-    }\n-\n-    return tmpRecord;\n-  }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyODczNg==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r435828736", "bodyText": "I think this level parameter shouldn't be inserted here in Queryplan which is the base class. Maybe groupByTimePlan or AggregationPlan is better.", "author": "Alima777", "createdAt": "2020-06-05T10:18:52Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/QueryPlan.java", "diffHunk": "@@ -36,6 +36,8 @@\n   private int rowLimit = 0;\n   private int rowOffset = 0;\n \n+  private int level = -1;", "originalCommit": "fe790833a4927eb8877275b4fd6657eafc0d0290", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b530135b6b98d92e482be76dfd51c486ff5f917", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/QueryPlan.java b/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/QueryPlan.java\nindex 7f3b9bdcc7..58b4c13a0d 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/QueryPlan.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/physical/crud/QueryPlan.java\n\n@@ -36,8 +36,6 @@ public abstract class QueryPlan extends PhysicalPlan {\n   private int rowLimit = 0;\n   private int rowOffset = 0;\n \n-  private int level = -1;\n-\n   private Map<String, Integer> pathToIndex = new HashMap<>();\n \n   public QueryPlan() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMTM4OA==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r435831388", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (plan.getOperatorType() == GROUPBYTIME) {\n          \n          \n            \n                    if (plan.getOperatorType() == OperatorType.GROUPBYTIME) {", "author": "Alima777", "createdAt": "2020-06-05T10:24:28Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -549,7 +540,7 @@ private TSExecuteStatementResp internalExecuteQueryStatement(String statement,\n         if (plan.getOperatorType() == OperatorType.FILL) {\n           throw new QueryProcessException(\"Fill doesn't support disable align clause.\");\n         }\n-        if (plan.getOperatorType() == OperatorType.GROUPBY) {\n+        if (plan.getOperatorType() == GROUPBYTIME) {", "originalCommit": "fe790833a4927eb8877275b4fd6657eafc0d0290", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43782cc1224941b8875a8091e8486318e6d1b7fa", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java b/server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java\nindex ff788dfd2e..81501413af 100644\n--- a/server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java\n+++ b/server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java\n\n@@ -540,7 +538,7 @@ public class TSServiceImpl implements TSIService.Iface, ServerContext {\n         if (plan.getOperatorType() == OperatorType.FILL) {\n           throw new QueryProcessException(\"Fill doesn't support disable align clause.\");\n         }\n-        if (plan.getOperatorType() == GROUPBYTIME) {\n+        if (plan.getOperatorType() == OperatorType.GROUPBYTIME) {\n           throw new QueryProcessException(\"Group by doesn't support disable align clause.\");\n         }\n       }\n"}}, {"oid": "fa298ab3fc549c48a288d4d902746801e57099a1", "url": "https://github.com/apache/iotdb/commit/fa298ab3fc549c48a288d4d902746801e57099a1", "message": "[IOTDB-622] add count records for all databases", "committedDate": "2020-06-05T12:13:24Z", "type": "commit"}, {"oid": "a8b4bcdd344bc7c49851bc0f6335fc96883199c8", "url": "https://github.com/apache/iotdb/commit/a8b4bcdd344bc7c49851bc0f6335fc96883199c8", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-06-05T12:37:04Z", "type": "forcePushed"}, {"oid": "43782cc1224941b8875a8091e8486318e6d1b7fa", "url": "https://github.com/apache/iotdb/commit/43782cc1224941b8875a8091e8486318e6d1b7fa", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-06-06T01:21:30Z", "type": "forcePushed"}, {"oid": "6b530135b6b98d92e482be76dfd51c486ff5f917", "url": "https://github.com/apache/iotdb/commit/6b530135b6b98d92e482be76dfd51c486ff5f917", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-06-06T01:52:24Z", "type": "forcePushed"}, {"oid": "cc37618f912bc52d90e0e9a0a8159f1e62fde199", "url": "https://github.com/apache/iotdb/commit/cc37618f912bc52d90e0e9a0a8159f1e62fde199", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-06-06T02:53:26Z", "type": "forcePushed"}, {"oid": "d9ff8cd7c8250f944cb0ad01b738578822e58028", "url": "https://github.com/apache/iotdb/commit/d9ff8cd7c8250f944cb0ad01b738578822e58028", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-06-06T05:53:19Z", "type": "commit"}, {"oid": "d9ff8cd7c8250f944cb0ad01b738578822e58028", "url": "https://github.com/apache/iotdb/commit/d9ff8cd7c8250f944cb0ad01b738578822e58028", "message": "[IOTDB-622] split group by level to two parts", "committedDate": "2020-06-06T05:53:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0OTI2MQ==", "url": "https://github.com/apache/iotdb/pull/1204#discussion_r436249261", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GroupByTimeDataSet extends QueryDataSet {\n          \n          \n            \n            // To process statement like, select count group by time interval, level = x\n          \n          \n            \n            public class GroupByTimeDataSet extends QueryDataSet {", "author": "Alima777", "createdAt": "2020-06-06T08:05:03Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/GroupByTimeDataSet.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.query.dataset.groupby;\n+\n+import org.apache.iotdb.db.exception.StorageEngineException;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n+import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;\n+import org.apache.iotdb.db.query.aggregation.AggregateResult;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.factory.AggregateResultFactory;\n+import org.apache.iotdb.db.query.filter.TsFileFilter;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.common.RowRecord;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class GroupByTimeDataSet extends QueryDataSet {", "originalCommit": "d9ff8cd7c8250f944cb0ad01b738578822e58028", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}