{"pr_number": 1693, "pr_title": "[IOTDB-863]: add a switch to drop ouf-of-order data that is recognized by IoTDB", "pr_createdAt": "2020-09-05T09:49:26Z", "pr_url": "https://github.com/apache/iotdb/pull/1693", "timeline": [{"oid": "130cef83fdf1f4ff33ab31a361e65ab41ae97c6d", "url": "https://github.com/apache/iotdb/commit/130cef83fdf1f4ff33ab31a361e65ab41ae97c6d", "message": "server/src/assembly/resources/conf/logback.xml", "committedDate": "2020-08-05T01:15:27Z", "type": "commit"}, {"oid": "a5c1684947a562dbbbd667c7046a1d13956d6334", "url": "https://github.com/apache/iotdb/commit/a5c1684947a562dbbbd667c7046a1d13956d6334", "message": "fix loginfo appender ref to FILEINFO", "committedDate": "2020-08-05T03:30:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzNDUxMQ==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r483934511", "bodyText": "you should move the code to the position before previous two line, because the two line  has no meaning if the data will be discarded.", "author": "mychaow", "createdAt": "2020-09-05T09:55:49Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -733,10 +733,15 @@ public void insert(InsertRowPlan insertRowPlan) throws WriteProcessException {\n       partitionLatestFlushedTimeForEachDevice\n           .computeIfAbsent(timePartitionId, id -> new HashMap<>());\n \n+      boolean isSequence = insertRowPlan.getTime() > partitionLatestFlushedTimeForEachDevice.get(timePartitionId)", "originalCommit": "c890fb9057d3d96a7d37533e8e2b54a2c166f989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NDY5Nw==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r484384697", "bodyText": "edited! thank you", "author": "haimeiguo", "createdAt": "2020-09-07T11:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzNDUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "314211aae4062769bf165613df034d556fef9b77", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 3970a2c27..a76683ca7 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -729,7 +729,6 @@ public class StorageGroupProcessor {\n       // init map\n       long timePartitionId = StorageEngine.getTimePartition(insertRowPlan.getTime());\n \n-      latestTimeForEachDevice.computeIfAbsent(timePartitionId, l -> new HashMap<>());\n       partitionLatestFlushedTimeForEachDevice\n           .computeIfAbsent(timePartitionId, id -> new HashMap<>());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzNzMzMw==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r483937333", "bodyText": "so, the first row of one timepartition always insert into unsequence memtable?", "author": "mychaow", "createdAt": "2020-09-05T10:33:06Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -808,8 +815,11 @@ public void insertTablet(InsertTabletPlan insertTabletPlan) throws BatchInsertio\n           // judge if we should insert sequence\n           if (!isSequence && time > lastFlushTime) {", "originalCommit": "c890fb9057d3d96a7d37533e8e2b54a2c166f989", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3607ffd248d51e6eaf886c329adc6eaa88b9d008", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 3970a2c27..d3fd8748e 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -815,11 +706,8 @@ public class StorageGroupProcessor {\n           // judge if we should insert sequence\n           if (!isSequence && time > lastFlushTime) {\n             // insert into unsequence and then start sequence\n-            if (!IoTDBDescriptor.getInstance().getConfig().isEnableDiscardOutOfOrderData()) {\n-              noFailure =\n-                  insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n-                      beforeTimePartition) && noFailure;\n-            }\n+            noFailure = insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n+                beforeTimePartition) && noFailure;\n             before = loc;\n             isSequence = true;\n           }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwODgyOQ==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r484208829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean enable_discard_out_of_order_data = false;\n          \n          \n            \n              private boolean enableDiscardOutOfOrderData = false;", "author": "samperson1997", "createdAt": "2020-09-07T06:31:45Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -144,6 +144,8 @@\n \n   private volatile boolean readOnly = false;\n \n+  private boolean enable_discard_out_of_order_data = false;", "originalCommit": "c890fb9057d3d96a7d37533e8e2b54a2c166f989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwNzUxMA==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r484307510", "bodyText": "edited! thank you", "author": "haimeiguo", "createdAt": "2020-09-07T09:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwODgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NTYxNA==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r484385614", "bodyText": "My pleasure ; )", "author": "samperson1997", "createdAt": "2020-09-07T11:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwODgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "314211aae4062769bf165613df034d556fef9b77", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\nindex 21252299b..83f9e2380 100644\n--- a/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n+++ b/server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java\n\n@@ -144,7 +144,7 @@ public class IoTDBConfig {\n \n   private volatile boolean readOnly = false;\n \n-  private boolean enable_discard_out_of_order_data = false;\n+  private boolean enableDiscardOutOfOrderData = false;\n \n   /**\n    * When a certain amount of write ahead logs is reached, they will be flushed to the disk. It is\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMjk0NA==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486802944", "bodyText": "remember to reset this to its default value in the end of the test\nWe usually do this as follows:\nboolean defaultValue = config.isEnableDiscard...;\nconfig.setEnableDiscard(true);\ndo some test\nconfig.setEnableDiscard(defaultValue);", "author": "qiaojialin", "createdAt": "2020-09-11T06:34:04Z", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -273,6 +274,112 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);", "originalCommit": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3607ffd248d51e6eaf886c329adc6eaa88b9d008", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\nindex 4819e8013..246d066a6 100644\n--- a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n\n@@ -274,112 +273,6 @@ public class StorageGroupProcessorTest {\n     }\n   }\n \n-  @Test\n-  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n-      throws WriteProcessException, QueryProcessException, IllegalPathException {\n-    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n-    config.setEnableDiscardOutOfOrderData(true);\n-\n-    for (int j = 21; j <= 30; j++) {\n-      TSRecord record = new TSRecord(j, deviceId);\n-      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n-      insertToStorageGroupProcessor(record);\n-      processor.asyncCloseAllWorkingTsFileProcessors();\n-    }\n-    processor.syncCloseAllWorkingTsFileProcessors();\n-\n-    for (int j = 10; j >= 1; j--) {\n-      TSRecord record = new TSRecord(j, deviceId);\n-      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n-      insertToStorageGroupProcessor(record);\n-      processor.asyncCloseAllWorkingTsFileProcessors();\n-    }\n-\n-    processor.syncCloseAllWorkingTsFileProcessors();\n-\n-    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n-        null, null);\n-    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n-    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n-    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n-      Assert.assertTrue(resource.isClosed());\n-    }\n-    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n-      Assert.assertTrue(resource.isClosed());\n-    }\n-  }\n-\n-  @Test\n-  public void testEnableDiscardOutOfOrderDataForInsertTablet()\n-      throws QueryProcessException, IllegalPathException {\n-    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n-    config.setEnableDiscardOutOfOrderData(true);\n-\n-    String[] measurements = new String[2];\n-    measurements[0] = \"s0\";\n-    measurements[1] = \"s1\";\n-    List<Integer> dataTypes = new ArrayList<>();\n-    dataTypes.add(TSDataType.INT32.ordinal());\n-    dataTypes.add(TSDataType.INT64.ordinal());\n-\n-    MeasurementSchema[] schemas = new MeasurementSchema[2];\n-    schemas[0] = new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN);\n-    schemas[1] = new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN);\n-\n-    MNode deviceMNode = new MNode(null, deviceId);\n-    deviceMNode.addChild(\"s0\", new MeasurementMNode(null, null, null, null));\n-    deviceMNode.addChild(\"s1\", new MeasurementMNode(null, null, null, null));\n-\n-    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n-        dataTypes);\n-    insertTabletPlan1.setSchemas(schemas);\n-\n-    long[] times = new long[100];\n-    Object[] columns = new Object[2];\n-    columns[0] = new int[100];\n-    columns[1] = new long[100];\n-\n-    for (int r = 0; r < 100; r++) {\n-      times[r] = r;\n-      ((int[]) columns[0])[r] = 1;\n-      ((long[]) columns[1])[r] = 1;\n-    }\n-    insertTabletPlan1.setTimes(times);\n-    insertTabletPlan1.setColumns(columns);\n-    insertTabletPlan1.setRowCount(times.length);\n-    insertTabletPlan1.setDeviceMNode(deviceMNode);\n-\n-    processor.insertTablet(insertTabletPlan1);\n-    processor.asyncCloseAllWorkingTsFileProcessors();\n-\n-    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n-        dataTypes);\n-    insertTabletPlan2.setSchemas(schemas);\n-\n-    for (int r = 50; r < 149; r++) {\n-      times[r - 50] = r;\n-      ((int[]) columns[0])[r - 50] = 1;\n-      ((long[]) columns[1])[r - 50] = 1;\n-    }\n-    insertTabletPlan2.setTimes(times);\n-    insertTabletPlan2.setColumns(columns);\n-    insertTabletPlan2.setRowCount(times.length);\n-    insertTabletPlan2.setDeviceMNode(deviceMNode);\n-\n-    processor.insertTablet(insertTabletPlan2);\n-    processor.asyncCloseAllWorkingTsFileProcessors();\n-    processor.syncCloseAllWorkingTsFileProcessors();\n-\n-    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n-        null, null);\n-\n-    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n-    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n-    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n-      Assert.assertTrue(resource.isClosed());\n-    }\n-  }\n-\n   @Test\n   public void testMerge() throws WriteProcessException, QueryProcessException, IllegalPathException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMTQwNw==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486811407", "bodyText": "I think you forget to control last batch of data and update cache part. These part also need to filter unsequence data", "author": "SilverNarcissus", "createdAt": "2020-09-11T06:54:42Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -706,8 +714,11 @@ public void insertTablet(InsertTabletPlan insertTabletPlan) throws BatchInsertio\n           // judge if we should insert sequence\n           if (!isSequence && time > lastFlushTime) {\n             // insert into unsequence and then start sequence\n-            noFailure = insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n-                beforeTimePartition) && noFailure;\n+            if (!IoTDBDescriptor.getInstance().getConfig().isEnableDiscardOutOfOrderData()) {\n+              noFailure =\n+                  insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n+                      beforeTimePartition) && noFailure;\n+            }", "originalCommit": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3607ffd248d51e6eaf886c329adc6eaa88b9d008", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex 0810caeb6..d3fd8748e 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -714,11 +706,8 @@ public class StorageGroupProcessor {\n           // judge if we should insert sequence\n           if (!isSequence && time > lastFlushTime) {\n             // insert into unsequence and then start sequence\n-            if (!IoTDBDescriptor.getInstance().getConfig().isEnableDiscardOutOfOrderData()) {\n-              noFailure =\n-                  insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n-                      beforeTimePartition) && noFailure;\n-            }\n+            noFailure = insertTabletToTsFileProcessor(insertTabletPlan, before, loc, false, results,\n+                beforeTimePartition) && noFailure;\n             before = loc;\n             isSequence = true;\n           }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMzE4Mw==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486813183", "bodyText": "You may change the time partition range to test some conner case of your code", "author": "SilverNarcissus", "createdAt": "2020-09-11T06:58:42Z", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -273,6 +274,112 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet()\n+      throws QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementSchema[] schemas = new MeasurementSchema[2];\n+    schemas[0] = new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN);\n+    schemas[1] = new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN);\n+\n+    MNode deviceMNode = new MNode(null, deviceId);\n+    deviceMNode.addChild(\"s0\", new MeasurementMNode(null, null, null, null));\n+    deviceMNode.addChild(\"s1\", new MeasurementMNode(null, null, null, null));\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan1.setSchemas(schemas);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan2.setSchemas(schemas);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();", "originalCommit": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3607ffd248d51e6eaf886c329adc6eaa88b9d008", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\nindex 4819e8013..246d066a6 100644\n--- a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n\n@@ -274,112 +273,6 @@ public class StorageGroupProcessorTest {\n     }\n   }\n \n-  @Test\n-  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n-      throws WriteProcessException, QueryProcessException, IllegalPathException {\n-    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n-    config.setEnableDiscardOutOfOrderData(true);\n-\n-    for (int j = 21; j <= 30; j++) {\n-      TSRecord record = new TSRecord(j, deviceId);\n-      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n-      insertToStorageGroupProcessor(record);\n-      processor.asyncCloseAllWorkingTsFileProcessors();\n-    }\n-    processor.syncCloseAllWorkingTsFileProcessors();\n-\n-    for (int j = 10; j >= 1; j--) {\n-      TSRecord record = new TSRecord(j, deviceId);\n-      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n-      insertToStorageGroupProcessor(record);\n-      processor.asyncCloseAllWorkingTsFileProcessors();\n-    }\n-\n-    processor.syncCloseAllWorkingTsFileProcessors();\n-\n-    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n-        null, null);\n-    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n-    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n-    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n-      Assert.assertTrue(resource.isClosed());\n-    }\n-    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n-      Assert.assertTrue(resource.isClosed());\n-    }\n-  }\n-\n-  @Test\n-  public void testEnableDiscardOutOfOrderDataForInsertTablet()\n-      throws QueryProcessException, IllegalPathException {\n-    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n-    config.setEnableDiscardOutOfOrderData(true);\n-\n-    String[] measurements = new String[2];\n-    measurements[0] = \"s0\";\n-    measurements[1] = \"s1\";\n-    List<Integer> dataTypes = new ArrayList<>();\n-    dataTypes.add(TSDataType.INT32.ordinal());\n-    dataTypes.add(TSDataType.INT64.ordinal());\n-\n-    MeasurementSchema[] schemas = new MeasurementSchema[2];\n-    schemas[0] = new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN);\n-    schemas[1] = new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN);\n-\n-    MNode deviceMNode = new MNode(null, deviceId);\n-    deviceMNode.addChild(\"s0\", new MeasurementMNode(null, null, null, null));\n-    deviceMNode.addChild(\"s1\", new MeasurementMNode(null, null, null, null));\n-\n-    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n-        dataTypes);\n-    insertTabletPlan1.setSchemas(schemas);\n-\n-    long[] times = new long[100];\n-    Object[] columns = new Object[2];\n-    columns[0] = new int[100];\n-    columns[1] = new long[100];\n-\n-    for (int r = 0; r < 100; r++) {\n-      times[r] = r;\n-      ((int[]) columns[0])[r] = 1;\n-      ((long[]) columns[1])[r] = 1;\n-    }\n-    insertTabletPlan1.setTimes(times);\n-    insertTabletPlan1.setColumns(columns);\n-    insertTabletPlan1.setRowCount(times.length);\n-    insertTabletPlan1.setDeviceMNode(deviceMNode);\n-\n-    processor.insertTablet(insertTabletPlan1);\n-    processor.asyncCloseAllWorkingTsFileProcessors();\n-\n-    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n-        dataTypes);\n-    insertTabletPlan2.setSchemas(schemas);\n-\n-    for (int r = 50; r < 149; r++) {\n-      times[r - 50] = r;\n-      ((int[]) columns[0])[r - 50] = 1;\n-      ((long[]) columns[1])[r - 50] = 1;\n-    }\n-    insertTabletPlan2.setTimes(times);\n-    insertTabletPlan2.setColumns(columns);\n-    insertTabletPlan2.setRowCount(times.length);\n-    insertTabletPlan2.setDeviceMNode(deviceMNode);\n-\n-    processor.insertTablet(insertTabletPlan2);\n-    processor.asyncCloseAllWorkingTsFileProcessors();\n-    processor.syncCloseAllWorkingTsFileProcessors();\n-\n-    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n-        null, null);\n-\n-    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n-    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n-    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n-      Assert.assertTrue(resource.isClosed());\n-    }\n-  }\n-\n   @Test\n   public void testMerge() throws WriteProcessException, QueryProcessException, IllegalPathException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxNDYyMg==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r486814622", "bodyText": "You should also add some flush operation to test your code", "author": "SilverNarcissus", "createdAt": "2020-09-11T07:02:01Z", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -273,6 +274,112 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet()\n+      throws QueryProcessException, IllegalPathException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementSchema[] schemas = new MeasurementSchema[2];\n+    schemas[0] = new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN);\n+    schemas[1] = new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN);\n+\n+    MNode deviceMNode = new MNode(null, deviceId);\n+    deviceMNode.addChild(\"s0\", new MeasurementMNode(null, null, null, null));\n+    deviceMNode.addChild(\"s1\", new MeasurementMNode(null, null, null, null));\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan1.setSchemas(schemas);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+    insertTabletPlan2.setSchemas(schemas);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setDeviceMNode(deviceMNode);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());", "originalCommit": "5c46fdf34080e9c37b20ebb0159e7f0f170b2538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3607ffd248d51e6eaf886c329adc6eaa88b9d008", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\nindex 4819e8013..246d066a6 100644\n--- a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n\n@@ -274,112 +273,6 @@ public class StorageGroupProcessorTest {\n     }\n   }\n \n-  @Test\n-  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n-      throws WriteProcessException, QueryProcessException, IllegalPathException {\n-    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n-    config.setEnableDiscardOutOfOrderData(true);\n-\n-    for (int j = 21; j <= 30; j++) {\n-      TSRecord record = new TSRecord(j, deviceId);\n-      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n-      insertToStorageGroupProcessor(record);\n-      processor.asyncCloseAllWorkingTsFileProcessors();\n-    }\n-    processor.syncCloseAllWorkingTsFileProcessors();\n-\n-    for (int j = 10; j >= 1; j--) {\n-      TSRecord record = new TSRecord(j, deviceId);\n-      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n-      insertToStorageGroupProcessor(record);\n-      processor.asyncCloseAllWorkingTsFileProcessors();\n-    }\n-\n-    processor.syncCloseAllWorkingTsFileProcessors();\n-\n-    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n-        null, null);\n-    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n-    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n-    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n-      Assert.assertTrue(resource.isClosed());\n-    }\n-    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n-      Assert.assertTrue(resource.isClosed());\n-    }\n-  }\n-\n-  @Test\n-  public void testEnableDiscardOutOfOrderDataForInsertTablet()\n-      throws QueryProcessException, IllegalPathException {\n-    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n-    config.setEnableDiscardOutOfOrderData(true);\n-\n-    String[] measurements = new String[2];\n-    measurements[0] = \"s0\";\n-    measurements[1] = \"s1\";\n-    List<Integer> dataTypes = new ArrayList<>();\n-    dataTypes.add(TSDataType.INT32.ordinal());\n-    dataTypes.add(TSDataType.INT64.ordinal());\n-\n-    MeasurementSchema[] schemas = new MeasurementSchema[2];\n-    schemas[0] = new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN);\n-    schemas[1] = new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN);\n-\n-    MNode deviceMNode = new MNode(null, deviceId);\n-    deviceMNode.addChild(\"s0\", new MeasurementMNode(null, null, null, null));\n-    deviceMNode.addChild(\"s1\", new MeasurementMNode(null, null, null, null));\n-\n-    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n-        dataTypes);\n-    insertTabletPlan1.setSchemas(schemas);\n-\n-    long[] times = new long[100];\n-    Object[] columns = new Object[2];\n-    columns[0] = new int[100];\n-    columns[1] = new long[100];\n-\n-    for (int r = 0; r < 100; r++) {\n-      times[r] = r;\n-      ((int[]) columns[0])[r] = 1;\n-      ((long[]) columns[1])[r] = 1;\n-    }\n-    insertTabletPlan1.setTimes(times);\n-    insertTabletPlan1.setColumns(columns);\n-    insertTabletPlan1.setRowCount(times.length);\n-    insertTabletPlan1.setDeviceMNode(deviceMNode);\n-\n-    processor.insertTablet(insertTabletPlan1);\n-    processor.asyncCloseAllWorkingTsFileProcessors();\n-\n-    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n-        dataTypes);\n-    insertTabletPlan2.setSchemas(schemas);\n-\n-    for (int r = 50; r < 149; r++) {\n-      times[r - 50] = r;\n-      ((int[]) columns[0])[r - 50] = 1;\n-      ((long[]) columns[1])[r - 50] = 1;\n-    }\n-    insertTabletPlan2.setTimes(times);\n-    insertTabletPlan2.setColumns(columns);\n-    insertTabletPlan2.setRowCount(times.length);\n-    insertTabletPlan2.setDeviceMNode(deviceMNode);\n-\n-    processor.insertTablet(insertTabletPlan2);\n-    processor.asyncCloseAllWorkingTsFileProcessors();\n-    processor.syncCloseAllWorkingTsFileProcessors();\n-\n-    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n-        null, null);\n-\n-    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n-    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n-    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n-      Assert.assertTrue(resource.isClosed());\n-    }\n-  }\n-\n   @Test\n   public void testMerge() throws WriteProcessException, QueryProcessException, IllegalPathException {\n \n"}}, {"oid": "314211aae4062769bf165613df034d556fef9b77", "url": "https://github.com/apache/iotdb/commit/314211aae4062769bf165613df034d556fef9b77", "message": "changed code position", "committedDate": "2020-09-07T11:53:23Z", "type": "forcePushed"}, {"oid": "3607ffd248d51e6eaf886c329adc6eaa88b9d008", "url": "https://github.com/apache/iotdb/commit/3607ffd248d51e6eaf886c329adc6eaa88b9d008", "message": "Merge branch 'master' into apache_master", "committedDate": "2020-09-21T07:11:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzg3MA==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r492513870", "bodyText": "use this line to change the time partition and add some test over different time partition. IoTDBDescriptor.getInstance().getConfig().setPartitionInterval(100);\ndo not forget to set it back to original value. You can refer to IoTDBMultiSeriesIT.java for this. Thank you very much XD", "author": "SilverNarcissus", "createdAt": "2020-09-22T07:04:14Z", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -26,6 +26,7 @@\n import java.util.Collections;", "originalCommit": "3d970378893628cee00521c9149f275d497fe254", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzNzY5Nw==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r493237697", "bodyText": "Thank you for your review! I added test cases for time partition = 100, 500 and 1000.", "author": "haimeiguo", "createdAt": "2020-09-23T06:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "355ac34138db36b9b61b1958e02903eaf023161e", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\nindex 48b5978c0..246d066a6 100644\n--- a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n\n@@ -26,7 +26,6 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicLong;\n-import org.apache.iotdb.db.conf.IoTDBConfig;\n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.apache.iotdb.db.conf.adapter.ActiveTimeSeriesCounter;\n import org.apache.iotdb.db.constant.TestConstant;\n"}}, {"oid": "355ac34138db36b9b61b1958e02903eaf023161e", "url": "https://github.com/apache/iotdb/commit/355ac34138db36b9b61b1958e02903eaf023161e", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into apache_master", "committedDate": "2020-09-23T01:38:14Z", "type": "commit"}, {"oid": "e5bb3b129f03154724c0298f9a6b858e8db128d4", "url": "https://github.com/apache/iotdb/commit/e5bb3b129f03154724c0298f9a6b858e8db128d4", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into apache_master", "committedDate": "2020-09-24T01:29:49Z", "type": "commit"}, {"oid": "1b54c38be3b408877170cec629c44932a49876ee", "url": "https://github.com/apache/iotdb/commit/1b54c38be3b408877170cec629c44932a49876ee", "message": "initial code", "committedDate": "2020-09-24T01:54:40Z", "type": "commit"}, {"oid": "2bb5b8e2d0af1608742fbc4a99c6426ab72583f0", "url": "https://github.com/apache/iotdb/commit/2bb5b8e2d0af1608742fbc4a99c6426ab72583f0", "message": "edit name", "committedDate": "2020-09-24T01:54:45Z", "type": "commit"}, {"oid": "230db07b90663c3277e4fd23019f92a1f4db7709", "url": "https://github.com/apache/iotdb/commit/230db07b90663c3277e4fd23019f92a1f4db7709", "message": "changed code position", "committedDate": "2020-09-24T01:54:46Z", "type": "commit"}, {"oid": "00af34490d988ed93a0b28921e9f34300d1f525b", "url": "https://github.com/apache/iotdb/commit/00af34490d988ed93a0b28921e9f34300d1f525b", "message": "edit test case", "committedDate": "2020-09-24T01:55:21Z", "type": "commit"}, {"oid": "5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e", "url": "https://github.com/apache/iotdb/commit/5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e", "message": "add test cases for different time paritition", "committedDate": "2020-09-24T01:58:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5NTM2MQ==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r494795361", "bodyText": "Sure, you set the time partition. But your insert time range only from 0 -150 which never cross the partition interval. By the way, you should also enable the partition like this:\nconfig.setEnablePartition(true);\n\nand do not forget:\nconfig.setEnablePartition(false);\n\nThank you very much~", "author": "SilverNarcissus", "createdAt": "2020-09-25T07:19:56Z", "path": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java", "diffHunk": "@@ -267,6 +269,279 @@ public void testSeqAndUnSeqSyncClose()\n     }\n   }\n \n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertRowPlan()\n+      throws WriteProcessException, QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+\n+    for (int j = 21; j <= 30; j++) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (int j = 10; j >= 1; j--) {\n+      TSRecord record = new TSRecord(j, deviceId);\n+      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n+      insertToStorageGroupProcessor(record);\n+      processor.asyncCloseAllWorkingTsFileProcessors();\n+    }\n+\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet1()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(100);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementMNode[] measurementMNodes = new MeasurementMNode[2];\n+    measurementMNodes[0] = new MeasurementMNode(null, \"s0\",\n+        new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN), null);\n+    measurementMNodes[1] = new MeasurementMNode(null, \"s1\",\n+        new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN), null);\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+    config.setPartitionInterval(defaultTimePartition);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet2()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(500);\n+\n+    String[] measurements = new String[2];\n+    measurements[0] = \"s0\";\n+    measurements[1] = \"s1\";\n+    List<Integer> dataTypes = new ArrayList<>();\n+    dataTypes.add(TSDataType.INT32.ordinal());\n+    dataTypes.add(TSDataType.INT64.ordinal());\n+\n+    MeasurementMNode[] measurementMNodes = new MeasurementMNode[2];\n+    measurementMNodes[0] = new MeasurementMNode(null, \"s0\",\n+        new MeasurementSchema(\"s0\", TSDataType.INT32, TSEncoding.PLAIN), null);\n+    measurementMNodes[1] = new MeasurementMNode(null, \"s1\",\n+        new MeasurementSchema(\"s1\", TSDataType.INT64, TSEncoding.PLAIN), null);\n+\n+    InsertTabletPlan insertTabletPlan1 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    long[] times = new long[100];\n+    Object[] columns = new Object[2];\n+    columns[0] = new int[100];\n+    columns[1] = new long[100];\n+\n+    for (int r = 0; r < 100; r++) {\n+      times[r] = r;\n+      ((int[]) columns[0])[r] = 1;\n+      ((long[]) columns[1])[r] = 1;\n+    }\n+    insertTabletPlan1.setTimes(times);\n+    insertTabletPlan1.setColumns(columns);\n+    insertTabletPlan1.setRowCount(times.length);\n+    insertTabletPlan1.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan1);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+\n+    InsertTabletPlan insertTabletPlan2 = new InsertTabletPlan(new PartialPath(\"root.vehicle.d0\"), measurements,\n+        dataTypes);\n+\n+    for (int r = 50; r < 149; r++) {\n+      times[r - 50] = r;\n+      ((int[]) columns[0])[r - 50] = 1;\n+      ((long[]) columns[1])[r - 50] = 1;\n+    }\n+    insertTabletPlan2.setTimes(times);\n+    insertTabletPlan2.setColumns(columns);\n+    insertTabletPlan2.setRowCount(times.length);\n+    insertTabletPlan2.setMeasurementMNodes(measurementMNodes);\n+\n+    processor.insertTablet(insertTabletPlan2);\n+    processor.asyncCloseAllWorkingTsFileProcessors();\n+    processor.syncCloseAllWorkingTsFileProcessors();\n+\n+    for (TsFileProcessor tsfileProcessor : processor.getWorkUnsequenceTsFileProcessor()) {\n+      tsfileProcessor.syncFlush();\n+    }\n+\n+    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n+        null, null);\n+\n+    Assert.assertEquals(2, queryDataSource.getSeqResources().size());\n+    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n+    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n+      Assert.assertTrue(resource.isClosed());\n+    }\n+\n+    config.setEnableDiscardOutOfOrderData(defaultValue);\n+    config.setPartitionInterval(defaultTimePartition);\n+  }\n+\n+  @Test\n+  public void testEnableDiscardOutOfOrderDataForInsertTablet3()\n+      throws QueryProcessException, IllegalPathException, IOException {\n+    IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+    boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n+    config.setEnableDiscardOutOfOrderData(true);\n+    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    config.setPartitionInterval(1000);", "originalCommit": "5faef9ffb6bbecfab9a8ef4458cf0cf2ef1e989e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMTE4MA==", "url": "https://github.com/apache/iotdb/pull/1693#discussion_r495521180", "bodyText": "boolean defaultEnablePartition = config.getEnablePartition...", "author": "qiaojialin", "createdAt": "2020-09-27T03:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5NTM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "29e90ee5765b806bc261f822451fb50aabb514d9", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\nindex 3d9d453f9..e6e43380f 100644\n--- a/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java\n\n@@ -317,7 +315,8 @@ public class StorageGroupProcessorTest {\n     IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n     boolean defaultValue = config.isEnableDiscardOutOfOrderData();\n     config.setEnableDiscardOutOfOrderData(true);\n-    long defaultTimePartition = IoTDBDescriptor.getInstance().getConfig().getPartitionInterval();\n+    long defaultTimePartition = config.getPartitionInterval();\n+    config.setEnablePartition(true);\n     config.setPartitionInterval(100);\n \n     String[] measurements = new String[2];\n"}}, {"oid": "29e90ee5765b806bc261f822451fb50aabb514d9", "url": "https://github.com/apache/iotdb/commit/29e90ee5765b806bc261f822451fb50aabb514d9", "message": "add test cases for different time paritition", "committedDate": "2020-09-27T03:22:11Z", "type": "forcePushed"}, {"oid": "7a830239131e84ccd7118e8d091ffe9887063803", "url": "https://github.com/apache/iotdb/commit/7a830239131e84ccd7118e8d091ffe9887063803", "message": "add test cases for different time paritition", "committedDate": "2020-09-27T03:43:04Z", "type": "commit"}, {"oid": "7a830239131e84ccd7118e8d091ffe9887063803", "url": "https://github.com/apache/iotdb/commit/7a830239131e84ccd7118e8d091ffe9887063803", "message": "add test cases for different time paritition", "committedDate": "2020-09-27T03:43:04Z", "type": "forcePushed"}]}