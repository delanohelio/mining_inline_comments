{"pr_number": 753, "pr_title": "[IOTDB-433] Add iterators to TVList to prevent data copy", "pr_createdAt": "2020-01-17T12:08:53Z", "pr_url": "https://github.com/apache/iotdb/pull/753", "timeline": [{"oid": "96386f9af6f160796fc75060c170a42dec8460c5", "url": "https://github.com/apache/iotdb/commit/96386f9af6f160796fc75060c170a42dec8460c5", "message": "write tvlist", "committedDate": "2020-01-17T11:21:24Z", "type": "commit"}, {"oid": "694f84875dc9b7946f71298195c4e7a60df1de20", "url": "https://github.com/apache/iotdb/commit/694f84875dc9b7946f71298195c4e7a60df1de20", "message": "fixbug", "committedDate": "2020-01-17T12:12:33Z", "type": "commit"}, {"oid": "9f1dd69139c8c02a17adccc68428ebcf527066c5", "url": "https://github.com/apache/iotdb/commit/9f1dd69139c8c02a17adccc68428ebcf527066c5", "message": "fix bug", "committedDate": "2020-01-17T12:20:04Z", "type": "commit"}, {"oid": "20d22368449a65e2c5d73fe74b0c7c28cbc32555", "url": "https://github.com/apache/iotdb/commit/20d22368449a65e2c5d73fe74b0c7c28cbc32555", "message": "fix bug of format", "committedDate": "2020-01-17T12:35:42Z", "type": "commit"}, {"oid": "44e3958c1ca560e8a77a7f8dba278fa3e88e983d", "url": "https://github.com/apache/iotdb/commit/44e3958c1ca560e8a77a7f8dba278fa3e88e983d", "message": "delete unused code", "committedDate": "2020-01-17T12:38:56Z", "type": "commit"}, {"oid": "b22338202c2d2db62f1023bae1bd459b186a27bd", "url": "https://github.com/apache/iotdb/commit/b22338202c2d2db62f1023bae1bd459b186a27bd", "message": "fix asf header", "committedDate": "2020-01-17T13:06:35Z", "type": "commit"}, {"oid": "180c0345f998a57f8ff38eabea610d87eeaee2d0", "url": "https://github.com/apache/iotdb/commit/180c0345f998a57f8ff38eabea610d87eeaee2d0", "message": "fix asf header", "committedDate": "2020-01-18T05:08:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MTc0NQ==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368261745", "bodyText": "put this to clone method of TVList", "author": "qiaojialin", "createdAt": "2020-01-19T02:58:43Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -195,19 +199,19 @@ public boolean isEmpty() {\n   }\n \n   @Override\n-  public ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType dataType,\n+  public TVList query(String deviceId, String measurement, TSDataType dataType,\n       Map<String, String> props, long timeLowerBound) {\n-    TimeValuePairSorter sorter;\n     if (!checkPath(deviceId, measurement)) {\n       return null;\n-    } else {\n-      long undeletedTime = findUndeletedTime(deviceId, measurement, timeLowerBound);\n-      IWritableMemChunk memChunk = memTableMap.get(deviceId).get(measurement);\n-      IWritableMemChunk chunkCopy = new WritableMemChunk(dataType, memChunk.getTVList().clone());\n-      chunkCopy.setTimeOffset(undeletedTime);\n-      sorter = chunkCopy;\n     }\n-    return new ReadOnlyMemChunk(measurement, dataType, sorter, props);\n+    long undeletedTime = findUndeletedTime(deviceId, measurement, timeLowerBound);\n+    IWritableMemChunk memChunk = memTableMap.get(deviceId).get(measurement);\n+    TVList chunkCopy = memChunk.getTVList().clone();\n+\n+    chunkCopy.setVersion(getVersion());", "originalCommit": "180c0345f998a57f8ff38eabea610d87eeaee2d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2NTUzOQ==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368265539", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-01-19T04:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MTc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b26bcc41a356091c90f82f9224eb6d49eecd90a", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\nindex 5490bca88b..0c99b6fcf6 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java\n\n@@ -199,8 +201,8 @@ public abstract class AbstractMemTable implements IMemTable {\n   }\n \n   @Override\n-  public TVList query(String deviceId, String measurement, TSDataType dataType,\n-      Map<String, String> props, long timeLowerBound) {\n+  public ReadOnlyMemChunk query(String deviceId, String measurement, TSDataType dataType,\n+      Map<String, String> props, long timeLowerBound) throws IOException {\n     if (!checkPath(deviceId, measurement)) {\n       return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MjE3Ng==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368262176", "bodyText": "remove the sortedList field in this class and unused import", "author": "qiaojialin", "createdAt": "2020-01-19T03:10:55Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/WritableMemChunk.java", "diffHunk": "@@ -223,51 +223,6 @@ public void setTimeOffset(long offset) {\n     list.setTimeOffset(offset);\n   }\n \n-  @Override\n-  public synchronized List<TimeValuePair> getSortedTimeValuePairList() {", "originalCommit": "180c0345f998a57f8ff38eabea610d87eeaee2d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2NTUyMg==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368265522", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-01-19T04:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MjE3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MjcyOA==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368262728", "bodyText": "I suggest using one ReadOnlyMemChunk to store one chunk in a memtable. The TsFileProcessor return a Pair<List, List>\nInit the chunk metadata in the constructor in this class and cache it.\nTherefore, we only need one chunkreader, and it should not be a mergereader, we could directly get the  IPointReader in TVList.\nIn the AbstractMemTable, the version should be init by Long.MAX_VALUE for a working memtable, the memtable version is set only when it comes to a  flushing memtable.", "author": "qiaojialin", "createdAt": "2020-01-19T03:24:32Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java", "diffHunk": "@@ -18,106 +18,69 @@\n  */\n package org.apache.iotdb.db.engine.querycontext;\n \n-import java.util.Collections;\n-import java.util.Iterator;\n+import java.io.IOException;\n import java.util.List;\n import java.util.Map;\n-import org.apache.iotdb.db.engine.memtable.MemSeriesLazyMerger;\n-import org.apache.iotdb.db.engine.memtable.TimeValuePairSorter;\n import org.apache.iotdb.db.query.reader.MemChunkLoader;\n-import org.apache.iotdb.db.utils.MathUtils;\n-import org.apache.iotdb.tsfile.read.TimeValuePair;\n+import org.apache.iotdb.db.query.reader.universal.PriorityMergeReader;\n+import org.apache.iotdb.db.utils.datastructure.TVList;\n import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n import org.apache.iotdb.tsfile.encoding.encoder.Encoder;\n import org.apache.iotdb.tsfile.file.metadata.ChunkMetaData;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n-import org.apache.iotdb.tsfile.utils.TsPrimitiveType.TsDouble;\n-import org.apache.iotdb.tsfile.utils.TsPrimitiveType.TsFloat;\n+import org.apache.iotdb.tsfile.read.IPointReader;\n+import org.apache.iotdb.tsfile.read.TimeValuePair;\n \n //TODO: merge ReadOnlyMemChunk and WritableMemChunk and IWritableMemChunk\n-public class ReadOnlyMemChunk implements TimeValuePairSorter {\n+public class ReadOnlyMemChunk {\n \n-  private boolean initialized;\n   private String measurementUid;\n   private TSDataType dataType;\n-  private TimeValuePairSorter memSeries;\n-  private List<TimeValuePair> sortedTimeValuePairList;\n \n   Map<String, String> props;\n   private int floatPrecision = TSFileDescriptor.getInstance().getConfig().getFloatPrecision();\n+  private ChunkMetaData cachedMetaData;\n+\n+  private PriorityMergeReader mergeReader;\n+  private PriorityMergeReader chunkedReader;", "originalCommit": "180c0345f998a57f8ff38eabea610d87eeaee2d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2ODU3Mg==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368268572", "bodyText": "this is a pretty nice design", "author": "liutaohua", "createdAt": "2020-01-19T06:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MjcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "1b26bcc41a356091c90f82f9224eb6d49eecd90a", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java b/server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java\nindex 89c6da70c2..c7fc098481 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java\n\n@@ -19,10 +19,8 @@\n package org.apache.iotdb.db.engine.querycontext;\n \n import java.io.IOException;\n-import java.util.List;\n import java.util.Map;\n import org.apache.iotdb.db.query.reader.MemChunkLoader;\n-import org.apache.iotdb.db.query.reader.universal.PriorityMergeReader;\n import org.apache.iotdb.db.utils.datastructure.TVList;\n import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n import org.apache.iotdb.tsfile.encoding.encoder.Encoder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2Mjk0Nw==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368262947", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (TVList pair : memSeries) {\n          \n          \n            \n                for (TVList tvlist : memSeries) {", "author": "qiaojialin", "createdAt": "2020-01-19T03:30:37Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java", "diffHunk": "@@ -18,106 +18,69 @@\n  */\n package org.apache.iotdb.db.engine.querycontext;\n \n-import java.util.Collections;\n-import java.util.Iterator;\n+import java.io.IOException;\n import java.util.List;\n import java.util.Map;\n-import org.apache.iotdb.db.engine.memtable.MemSeriesLazyMerger;\n-import org.apache.iotdb.db.engine.memtable.TimeValuePairSorter;\n import org.apache.iotdb.db.query.reader.MemChunkLoader;\n-import org.apache.iotdb.db.utils.MathUtils;\n-import org.apache.iotdb.tsfile.read.TimeValuePair;\n+import org.apache.iotdb.db.query.reader.universal.PriorityMergeReader;\n+import org.apache.iotdb.db.utils.datastructure.TVList;\n import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n import org.apache.iotdb.tsfile.encoding.encoder.Encoder;\n import org.apache.iotdb.tsfile.file.metadata.ChunkMetaData;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n-import org.apache.iotdb.tsfile.utils.TsPrimitiveType.TsDouble;\n-import org.apache.iotdb.tsfile.utils.TsPrimitiveType.TsFloat;\n+import org.apache.iotdb.tsfile.read.IPointReader;\n+import org.apache.iotdb.tsfile.read.TimeValuePair;\n \n //TODO: merge ReadOnlyMemChunk and WritableMemChunk and IWritableMemChunk\n-public class ReadOnlyMemChunk implements TimeValuePairSorter {\n+public class ReadOnlyMemChunk {\n \n-  private boolean initialized;\n   private String measurementUid;\n   private TSDataType dataType;\n-  private TimeValuePairSorter memSeries;\n-  private List<TimeValuePair> sortedTimeValuePairList;\n \n   Map<String, String> props;\n   private int floatPrecision = TSFileDescriptor.getInstance().getConfig().getFloatPrecision();\n+  private ChunkMetaData cachedMetaData;\n+\n+  private PriorityMergeReader mergeReader;\n+  private PriorityMergeReader chunkedReader;\n \n   /**\n    * init by TSDataType and TimeValuePairSorter.\n    */\n-  public ReadOnlyMemChunk(String measurementUid, TSDataType dataType, TimeValuePairSorter memSeries,\n-      Map<String, String> props) {\n+  public ReadOnlyMemChunk(String measurementUid, TSDataType dataType,\n+      List<TVList> memSeries, Map<String, String> props) throws IOException {\n     this.measurementUid = measurementUid;\n     this.dataType = dataType;\n-    this.memSeries = memSeries;\n-    this.initialized = false;\n     this.props = props;\n     if (props.containsKey(Encoder.MAX_POINT_NUMBER)) {\n       this.floatPrecision = Integer.parseInt(props.get(Encoder.MAX_POINT_NUMBER));\n     }\n-  }\n-\n-  private void checkInitialized() {\n-    if (!initialized) {\n-      init();\n-    }\n-  }\n-\n-  private void init() {\n-    sortedTimeValuePairList = memSeries.getSortedTimeValuePairList();\n-    if (!(memSeries instanceof MemSeriesLazyMerger)) {\n-      switch (dataType) {\n-        case FLOAT:\n-          sortedTimeValuePairList.replaceAll(x -> new TimeValuePair(x.getTimestamp(),\n-              new TsFloat(\n-                  MathUtils.roundWithGivenPrecision(x.getValue().getFloat(), floatPrecision))));\n-          break;\n-        case DOUBLE:\n-          sortedTimeValuePairList.replaceAll(x -> new TimeValuePair(x.getTimestamp(),\n-              new TsDouble(\n-                  MathUtils.roundWithGivenPrecision(x.getValue().getDouble(), floatPrecision))));\n-          break;\n-        default:\n-          break;\n-      }\n+    mergeReader = new PriorityMergeReader(floatPrecision);\n+    chunkedReader = new PriorityMergeReader(floatPrecision);\n+    for (TVList pair : memSeries) {", "originalCommit": "180c0345f998a57f8ff38eabea610d87eeaee2d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2NTU3MQ==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368265571", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-01-19T04:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2Mjk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1b26bcc41a356091c90f82f9224eb6d49eecd90a", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java b/server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java\nindex 89c6da70c2..c7fc098481 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/querycontext/ReadOnlyMemChunk.java\n\n@@ -19,10 +19,8 @@\n package org.apache.iotdb.db.engine.querycontext;\n \n import java.io.IOException;\n-import java.util.List;\n import java.util.Map;\n import org.apache.iotdb.db.query.reader.MemChunkLoader;\n-import org.apache.iotdb.db.query.reader.universal.PriorityMergeReader;\n import org.apache.iotdb.db.utils.datastructure.TVList;\n import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n import org.apache.iotdb.tsfile.encoding.encoder.Encoder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MzAxNA==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368263014", "bodyText": "replace this with List", "author": "qiaojialin", "createdAt": "2020-01-19T03:32:00Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -583,28 +587,28 @@ public String getStorageGroupName() {\n       String measurementId, TSDataType dataType, Map<String, String> props, QueryContext context) {\n     flushQueryLock.readLock().lock();\n     try {\n-      MemSeriesLazyMerger memSeriesLazyMerger = new MemSeriesLazyMerger();\n+      List<TVList> tvLists = new ArrayList<>();", "originalCommit": "180c0345f998a57f8ff38eabea610d87eeaee2d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b26bcc41a356091c90f82f9224eb6d49eecd90a", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\nindex bcace0c95e..9f6d7ff0b3 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java\n\n@@ -583,32 +583,28 @@ public class TsFileProcessor {\n    * @param dataType      data type\n    * @return left: the chunk data in memory; right: the chunkMetadatas of data on disk\n    */\n-  public Pair<ReadOnlyMemChunk, List<ChunkMetaData>> query(String deviceId,\n+  public Pair<List<ReadOnlyMemChunk>, List<ChunkMetaData>> query(String deviceId,\n       String measurementId, TSDataType dataType, Map<String, String> props, QueryContext context) {\n     flushQueryLock.readLock().lock();\n     try {\n-      List<TVList> tvLists = new ArrayList<>();\n+      List<ReadOnlyMemChunk> readOnlyMemChunks = new ArrayList<>();\n       for (IMemTable flushingMemTable : flushingMemTables) {\n         if (flushingMemTable.isSignalMemTable()) {\n           continue;\n         }\n-        TVList memChunk = flushingMemTable\n+        ReadOnlyMemChunk memChunk = flushingMemTable\n             .query(deviceId, measurementId, dataType, props, context.getQueryTimeLowerBound());\n         if (memChunk != null) {\n-          tvLists.add(memChunk);\n+          readOnlyMemChunks.add(memChunk);\n         }\n       }\n       if (workMemTable != null) {\n-        TVList memChunk = workMemTable.query(deviceId, measurementId, dataType, props,\n+        ReadOnlyMemChunk memChunk = workMemTable.query(deviceId, measurementId, dataType, props,\n             context.getQueryTimeLowerBound());\n         if (memChunk != null) {\n-          tvLists.add(memChunk);\n+          readOnlyMemChunks.add(memChunk);\n         }\n       }\n-      // memSeriesLazyMerger has handled the props,\n-      // so we do not need to handle it again in the following readOnlyMemChunk\n-      ReadOnlyMemChunk timeValuePairSorter = new ReadOnlyMemChunk(measurementId, dataType,\n-          tvLists, props);\n \n       ModificationFile modificationFile = tsFileResource.getModFile();\n       List<Modification> modifications = context.getPathModifications(modificationFile,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MzA5NA==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368263094", "bodyText": "If we use a List , this class should not be changed.\nis this a bug before?", "author": "qiaojialin", "createdAt": "2020-01-19T03:33:54Z", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/universal/PriorityMergeReader.java", "diffHunk": "@@ -42,6 +47,11 @@\n   public PriorityMergeReader() {\n   }\n \n+  public PriorityMergeReader(int floatPrecision) {", "originalCommit": "180c0345f998a57f8ff38eabea610d87eeaee2d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2ODYxMA==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368268610", "bodyText": "It's for formatting data in memory", "author": "liutaohua", "createdAt": "2020-01-19T06:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MzA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "1b26bcc41a356091c90f82f9224eb6d49eecd90a", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/reader/universal/PriorityMergeReader.java b/server/src/main/java/org/apache/iotdb/db/query/reader/universal/PriorityMergeReader.java\nindex 9b70bfdd41..9d098c750e 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/reader/universal/PriorityMergeReader.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/reader/universal/PriorityMergeReader.java\n\n@@ -47,11 +42,6 @@ public class PriorityMergeReader implements IPointReader {\n   public PriorityMergeReader() {\n   }\n \n-  public PriorityMergeReader(int floatPrecision) {\n-    this.floatPrecision = floatPrecision;\n-  }\n-\n-\n   public PriorityMergeReader(List<IPointReader> prioritySeriesReaders, int startPriority)\n       throws IOException {\n     for (IPointReader reader : prioritySeriesReaders) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MzE2NQ==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368263165", "bodyText": "if (hasCachedPair || hasNextTimeValuePair) {\nhasCachedPair = false\nreturn cachedTimeValuePair\n} else {\nthrow new IOException(\"no next time value pair\");\n}", "author": "qiaojialin", "createdAt": "2020-01-19T03:36:02Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java", "diffHunk": "@@ -452,11 +470,62 @@ void updateMinTimeAndSorted(long[] time, int start, int end) {\n     boolean inputSorted = true;\n     for (int i = start; i < end; i++) {\n       inPutMinTime = inPutMinTime <= time[i] ? inPutMinTime : time[i];\n-      if (inputSorted && i < length - 1 && time[i] > time[i+1]) {\n+      if (inputSorted && i < length - 1 && time[i] > time[i + 1]) {\n         inputSorted = false;\n       }\n     }\n     minTime = inPutMinTime < minTime ? inPutMinTime : minTime;\n     sorted = sorted && inputSorted && (size == 0 || inPutMinTime >= getTime(size - 1));\n   }\n+\n+  protected abstract TimeValuePair getTimeValuePair(int index, long time);\n+\n+  public IPointReader getIterator() {\n+    return new Ite();\n+  }\n+\n+  private class Ite implements IPointReader {\n+\n+    private TimeValuePair cachedTimeValuePair;\n+    private boolean hasCachedPair;\n+    private int cur;\n+\n+    @Override\n+    public boolean hasNextTimeValuePair() {\n+      if (hasCachedPair) {\n+        return true;\n+      }\n+\n+      while (cur < size) {\n+        long time = getTime(cur);\n+        if (time < getTimeOffset() || (cur + 1 < size() && (time == getTime(cur + 1)))) {\n+          cur++;\n+          continue;\n+        }\n+        cachedTimeValuePair = getTimeValuePair(cur, time);\n+        hasCachedPair = true;\n+        cur++;\n+        return true;\n+      }\n+      return hasCachedPair;\n+    }\n+\n+    @Override\n+    public TimeValuePair nextTimeValuePair() {\n+      hasCachedPair = false;", "originalCommit": "180c0345f998a57f8ff38eabea610d87eeaee2d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2NTYxMw==", "url": "https://github.com/apache/iotdb/pull/753#discussion_r368265613", "bodyText": "done", "author": "liutaohua", "createdAt": "2020-01-19T04:49:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI2MzE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b26bcc41a356091c90f82f9224eb6d49eecd90a", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\nindex 08e4256f35..3da52ca1e1 100644\n--- a/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n+++ b/server/src/main/java/org/apache/iotdb/db/utils/datastructure/TVList.java\n\n@@ -478,17 +479,30 @@ public abstract class TVList {\n     sorted = sorted && inputSorted && (size == 0 || inPutMinTime >= getTime(size - 1));\n   }\n \n-  protected abstract TimeValuePair getTimeValuePair(int index, long time);\n+  protected abstract TimeValuePair getTimeValuePair(int index, long time,\n+      Integer floatPrecision);\n \n   public IPointReader getIterator() {\n     return new Ite();\n   }\n \n+  public IPointReader getIterator(int floatPrecision) {\n+    return new Ite(floatPrecision);\n+  }\n+\n   private class Ite implements IPointReader {\n \n     private TimeValuePair cachedTimeValuePair;\n     private boolean hasCachedPair;\n     private int cur;\n+    private Integer floatPrecision;\n+\n+    public Ite() {\n+    }\n+\n+    public Ite(int floatPrecision) {\n+      this.floatPrecision = floatPrecision;\n+    }\n \n     @Override\n     public boolean hasNextTimeValuePair() {\n"}}, {"oid": "1b26bcc41a356091c90f82f9224eb6d49eecd90a", "url": "https://github.com/apache/iotdb/commit/1b26bcc41a356091c90f82f9224eb6d49eecd90a", "message": "ReadOnlyMemChunk to save one TVList", "committedDate": "2020-01-19T06:06:22Z", "type": "commit"}]}