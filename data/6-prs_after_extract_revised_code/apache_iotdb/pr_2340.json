{"pr_number": 2340, "pr_title": "[IOTDB-1076] Create interface of TimeIndex", "pr_createdAt": "2020-12-25T11:47:59Z", "pr_url": "https://github.com/apache/iotdb/pull/2340", "timeline": [{"oid": "daf104c8d076bae8e3091c440f243e930fd05920", "url": "https://github.com/apache/iotdb/commit/daf104c8d076bae8e3091c440f243e930fd05920", "message": "Move time arrays to DeviceTimeIndex", "committedDate": "2020-12-24T12:48:14Z", "type": "commit"}, {"oid": "a74e06c8f024daa5ad464db795bdacf320a83798", "url": "https://github.com/apache/iotdb/commit/a74e06c8f024daa5ad464db795bdacf320a83798", "message": "Add configuration", "committedDate": "2020-12-25T11:26:25Z", "type": "commit"}, {"oid": "ced7b03432a693ee47ee4c82a5d108a86d31c95f", "url": "https://github.com/apache/iotdb/commit/ced7b03432a693ee47ee4c82a5d108a86d31c95f", "message": "Modify RemoteTsFileResource for cluster", "committedDate": "2020-12-25T11:46:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg2MjgwMA==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r548862800", "bodyText": "We need some comment on the interface", "author": "SilverNarcissus", "createdAt": "2020-12-25T11:56:06Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+import org.apache.iotdb.db.rescon.CachedStringPool;\n+\n+public interface ITimeIndex {", "originalCommit": "ced7b03432a693ee47ee4c82a5d108a86d31c95f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg2ODA1Mg==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r548868052", "bodyText": "Added, thanks.", "author": "samperson1997", "createdAt": "2020-12-25T12:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg2MjgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "d76f26d2c95bfa2f7ec2f8e90c75ad3a376b5d3d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\nindex 3f5f5601b4..607dcd2c44 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\n\n@@ -23,45 +23,121 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.nio.ByteBuffer;\n-import java.util.Map;\n import java.util.Set;\n import org.apache.iotdb.db.exception.PartitionViolationException;\n-import org.apache.iotdb.db.rescon.CachedStringPool;\n \n public interface ITimeIndex {\n \n-  Map<String, String> cachedDevicePool = CachedStringPool.getInstance()\n-      .getCachedPool();\n-\n+  /**\n+   * init startTimes with Long.MAX_VALUE, endTimes with Long.MIN_VALUE\n+   */\n   void init();\n \n+  /**\n+   * serialize to outputStream\n+   *\n+   * @param outputStream outputStream\n+   */\n   void serialize(OutputStream outputStream) throws IOException;\n \n+  /**\n+   * deserialize from inputStream\n+   *\n+   * @param inputStream inputStream\n+   * @return TimeIndex\n+   */\n   ITimeIndex deserialize(InputStream inputStream) throws IOException;\n \n+  /**\n+   * deserialize from byte buffer\n+   *\n+   * @param buffer byte buffer\n+   * @return TimeIndex\n+   */\n   ITimeIndex deserialize(ByteBuffer buffer);\n \n+  /**\n+   * called by TsFileResource.close()\n+   */\n   void close();\n \n+  /**\n+   * get devices in TimeIndex\n+   *\n+   * @return device names\n+   */\n   Set<String> getDevices();\n \n+  /**\n+   * @return whether end time is empty (Long.MIN_VALUE)\n+   */\n   boolean endTimeEmpty();\n \n+  /**\n+   * @param timeLowerBound time lower bound\n+   * @return whether any of the device lives over the given time bound\n+   */\n   boolean stillLives(long timeLowerBound);\n \n+  /**\n+   * @return initial resource map size\n+   */\n   long calculateRamSize();\n \n+  /**\n+   * Calculate the resource ram increment when insert data in TsFileProcessor\n+   *\n+   * @param deviceToBeChecked device to be checked\n+   * @return ramIncrement\n+   */\n   long estimateRamIncrement(String deviceToBeChecked);\n \n+  /**\n+   * get time partition\n+   *\n+   * @param file file path\n+   * @return partition\n+   */\n   long getTimePartition(String file);\n \n+  /**\n+   * get time partition with check. If data of file cross partitions, an exception will be thrown\n+   *\n+   * @param file file absolute path\n+   * @return partition\n+   * @throws PartitionViolationException data of file cross partitions\n+   */\n   long getTimePartitionWithCheck(String file) throws PartitionViolationException;\n \n-  void updateStartTime(String deviceId, long startTime);\n-\n-  void updateEndTime(String deviceId, long endTime);\n-\n+  /**\n+   * update start time\n+   *\n+   * @param deviceId device name\n+   * @param time     start time\n+   */\n+  void updateStartTime(String deviceId, long time);\n+\n+  /**\n+   * update end time\n+   *\n+   * @param deviceId device name\n+   * @param time     end time\n+   */\n+  void updateEndTime(String deviceId, long time);\n+\n+  /**\n+   * get start time of device\n+   *\n+   * @param deviceId device name\n+   * @return start time\n+   */\n   long getStartTime(String deviceId);\n \n+  /**\n+   * get end time of device\n+   *\n+   * @param deviceId device name\n+   * @return end time\n+   */\n   long getEndTime(String deviceId);\n }\n"}}, {"oid": "d76f26d2c95bfa2f7ec2f8e90c75ad3a376b5d3d", "url": "https://github.com/apache/iotdb/commit/d76f26d2c95bfa2f7ec2f8e90c75ad3a376b5d3d", "message": "Fix sonar and add comments", "committedDate": "2020-12-25T12:39:26Z", "type": "commit"}, {"oid": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "url": "https://github.com/apache/iotdb/commit/8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "message": "Fix sonar", "committedDate": "2020-12-25T12:48:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI2NDgyMw==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549264823", "bodyText": "I think you may continue here since you have found that the file does not contain the device.", "author": "jt2594838", "createdAt": "2020-12-28T08:46:41Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1558,10 +1516,14 @@ private void logDeletion(long startTime, long endTime, PartialPath path)\n   private boolean canSkipDelete(TsFileResource tsFileResource, Set<PartialPath> devicePaths,\n       long deleteStart, long deleteEnd) {\n     for (PartialPath device : devicePaths) {\n-      if (tsFileResource.containsDevice(device.getFullPath()) &&\n-          (deleteEnd >= tsFileResource.getStartTime(device.getFullPath()) &&\n-              deleteStart <= tsFileResource\n-                  .getOrDefaultEndTime(device.getFullPath(), Long.MAX_VALUE))) {\n+      String deviceId = device.getFullPath();\n+      long endTime = tsFileResource.getEndTime(deviceId);\n+      if (endTime == Long.MIN_VALUE) {\n+        endTime = Long.MAX_VALUE;", "originalCommit": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI5NjI0Mg==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549296242", "bodyText": "Good point, thanks!", "author": "samperson1997", "createdAt": "2020-12-28T10:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI2NDgyMw=="}], "type": "inlineReview", "revised_code": {"commit": "f3c088b71834b23760d111a4596f3538c313904f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\nindex c38a5db662..a61491c1ba 100755\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n\n@@ -1519,7 +1519,7 @@ public class StorageGroupProcessor {\n       String deviceId = device.getFullPath();\n       long endTime = tsFileResource.getEndTime(deviceId);\n       if (endTime == Long.MIN_VALUE) {\n-        endTime = Long.MAX_VALUE;\n+        continue;\n       }\n \n       if (tsFileResource.getDevices().contains(deviceId) &&\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MDQzNw==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549270437", "bodyText": "You use getAbsolutePath() previously but toString() here, will this make any difference?", "author": "jt2594838", "createdAt": "2020-12-28T09:04:23Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileResource.java", "diffHunk": "@@ -700,31 +571,7 @@ public long getTimePartition() {\n    * @throws PartitionViolationException if the data of the file cross partitions or it is empty\n    */\n   public long getTimePartitionWithCheck() throws PartitionViolationException {\n-    long partitionId = -1;\n-    for (Long startTime : startTimes) {\n-      long p = StorageEngine.getTimePartition(startTime);\n-      if (partitionId == -1) {\n-        partitionId = p;\n-      } else {\n-        if (partitionId != p) {\n-          throw new PartitionViolationException(this);\n-        }\n-      }\n-    }\n-    for (Long endTime : endTimes) {\n-      long p = StorageEngine.getTimePartition(endTime);\n-      if (partitionId == -1) {\n-        partitionId = p;\n-      } else {\n-        if (partitionId != p) {\n-          throw new PartitionViolationException(this);\n-        }\n-      }\n-    }\n-    if (partitionId == -1) {\n-      throw new PartitionViolationException(this);\n-    }\n-    return partitionId;\n+    return timeIndex.getTimePartitionWithCheck(file.toString());", "originalCommit": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI5ODU1OQ==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549298559", "bodyText": "The codes used to be like this...  Actually here the file.toString() is just used for exception information,\nwhile the file.getAbsolutePath() is used for path split.", "author": "samperson1997", "createdAt": "2020-12-28T10:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MDQzNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MTc4OQ==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549271789", "bodyText": "Maybe we can record the device number of the last TsFile in each storage group, and use them to initialize because it is reasonable to assume that the adjacent files should have similar numbers of devices.", "author": "jt2594838", "createdAt": "2020-12-28T09:08:41Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.iotdb.db.engine.StorageEngine;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+import org.apache.iotdb.db.rescon.CachedStringPool;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n+import org.apache.iotdb.db.utils.SerializeUtils;\n+import org.apache.iotdb.tsfile.utils.RamUsageEstimator;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+\n+public class DeviceTimeIndex implements ITimeIndex {\n+\n+  protected static final int INIT_ARRAY_SIZE = 64;", "originalCommit": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3c088b71834b23760d111a4596f3538c313904f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java\nindex 89ed3ba105..dc2b39e2aa 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java\n\n@@ -24,7 +24,6 @@ import java.io.InputStream;\n import java.io.OutputStream;\n import java.nio.ByteBuffer;\n import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MzA3NA==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549273074", "bodyText": "How about serializing the three fields in a columnar style? This way we may be able to encode them.", "author": "jt2594838", "createdAt": "2020-12-28T09:13:11Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.iotdb.db.engine.StorageEngine;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+import org.apache.iotdb.db.rescon.CachedStringPool;\n+import org.apache.iotdb.db.utils.FilePathUtils;\n+import org.apache.iotdb.db.utils.SerializeUtils;\n+import org.apache.iotdb.tsfile.utils.RamUsageEstimator;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+\n+public class DeviceTimeIndex implements ITimeIndex {\n+\n+  protected static final int INIT_ARRAY_SIZE = 64;\n+\n+  protected static final Map<String, String> cachedDevicePool = CachedStringPool.getInstance()\n+      .getCachedPool();\n+\n+  /**\n+   * start times array.\n+   */\n+  protected long[] startTimes;\n+\n+  /**\n+   * end times array. The values in this array are Long.MIN_VALUE if it's an unsealed sequence\n+   * tsfile\n+   */\n+  protected long[] endTimes;\n+\n+  /**\n+   * device -> index of start times array and end times array\n+   */\n+  protected Map<String, Integer> deviceToIndex;\n+\n+  public DeviceTimeIndex() {\n+    init();\n+  }\n+\n+  public DeviceTimeIndex(Map<String, Integer> deviceToIndex, long[] startTimes, long[] endTimes) {\n+    this.startTimes = startTimes;\n+    this.endTimes = endTimes;\n+    this.deviceToIndex = deviceToIndex;\n+  }\n+\n+  @Override\n+  public void init() {\n+    this.deviceToIndex = new ConcurrentHashMap<>();\n+    this.startTimes = new long[INIT_ARRAY_SIZE];\n+    this.endTimes = new long[INIT_ARRAY_SIZE];\n+    initTimes(startTimes, Long.MAX_VALUE);\n+    initTimes(endTimes, Long.MIN_VALUE);\n+  }\n+\n+  @Override\n+  public void serialize(OutputStream outputStream) throws IOException {\n+    ReadWriteIOUtils.write(deviceToIndex.size(), outputStream);\n+    for (Entry<String, Integer> entry : deviceToIndex.entrySet()) {\n+      ReadWriteIOUtils.write(entry.getKey(), outputStream);\n+      ReadWriteIOUtils.write(startTimes[entry.getValue()], outputStream);\n+      ReadWriteIOUtils.write(endTimes[entry.getValue()], outputStream);\n+    }", "originalCommit": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMwNjA4NA==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549306084", "bodyText": "Very good point! Thanks!", "author": "samperson1997", "createdAt": "2020-12-28T11:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3MzA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f3c088b71834b23760d111a4596f3538c313904f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java\nindex 89ed3ba105..dc2b39e2aa 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/DeviceTimeIndex.java\n\n@@ -24,7 +24,6 @@ import java.io.InputStream;\n import java.io.OutputStream;\n import java.nio.ByteBuffer;\n import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NzkyNA==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549277924", "bodyText": "This method is a bit confusing. What is this method used for? Or what should the caller expect when calling it?", "author": "jt2594838", "createdAt": "2020-12-28T09:27:43Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+\n+public interface ITimeIndex {\n+\n+  /**\n+   * init startTimes with Long.MAX_VALUE, endTimes with Long.MIN_VALUE\n+   */\n+  void init();\n+\n+  /**\n+   * serialize to outputStream\n+   *\n+   * @param outputStream outputStream\n+   */\n+  void serialize(OutputStream outputStream) throws IOException;\n+\n+  /**\n+   * deserialize from inputStream\n+   *\n+   * @param inputStream inputStream\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(InputStream inputStream) throws IOException;\n+\n+  /**\n+   * deserialize from byte buffer\n+   *\n+   * @param buffer byte buffer\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(ByteBuffer buffer);\n+\n+  /**\n+   * called by TsFileResource.close()\n+   */\n+  void close();", "originalCommit": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMwMDU3Ng==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549300576", "bodyText": "TimeIndex may do something (for example, trim start time array and end time array) when TsFileResource is closing. I updated the java doc.", "author": "samperson1997", "createdAt": "2020-12-28T10:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NzkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "f3c088b71834b23760d111a4596f3538c313904f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\nindex 607dcd2c44..afeb91d3c0 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\n\n@@ -57,7 +57,7 @@ public interface ITimeIndex {\n   ITimeIndex deserialize(ByteBuffer buffer);\n \n   /**\n-   * called by TsFileResource.close()\n+   * do something when TsFileResource is closing (may be empty method)\n    */\n   void close();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3ODE2OQ==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549278169", "bodyText": "What does \"initial resource map\" mean?", "author": "jt2594838", "createdAt": "2020-12-28T09:28:30Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+\n+public interface ITimeIndex {\n+\n+  /**\n+   * init startTimes with Long.MAX_VALUE, endTimes with Long.MIN_VALUE\n+   */\n+  void init();\n+\n+  /**\n+   * serialize to outputStream\n+   *\n+   * @param outputStream outputStream\n+   */\n+  void serialize(OutputStream outputStream) throws IOException;\n+\n+  /**\n+   * deserialize from inputStream\n+   *\n+   * @param inputStream inputStream\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(InputStream inputStream) throws IOException;\n+\n+  /**\n+   * deserialize from byte buffer\n+   *\n+   * @param buffer byte buffer\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(ByteBuffer buffer);\n+\n+  /**\n+   * called by TsFileResource.close()\n+   */\n+  void close();\n+\n+  /**\n+   * get devices in TimeIndex\n+   *\n+   * @return device names\n+   */\n+  Set<String> getDevices();\n+\n+  /**\n+   * @return whether end time is empty (Long.MIN_VALUE)\n+   */\n+  boolean endTimeEmpty();\n+\n+  /**\n+   * @param timeLowerBound time lower bound\n+   * @return whether any of the device lives over the given time bound\n+   */\n+  boolean stillLives(long timeLowerBound);\n+\n+  /**\n+   * @return initial resource map size\n+   */\n+  long calculateRamSize();", "originalCommit": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMwMDk3NA==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549300974", "bodyText": "Updated to file index ram size", "author": "samperson1997", "createdAt": "2020-12-28T10:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3ODE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f3c088b71834b23760d111a4596f3538c313904f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\nindex 607dcd2c44..afeb91d3c0 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\n\n@@ -57,7 +57,7 @@ public interface ITimeIndex {\n   ITimeIndex deserialize(ByteBuffer buffer);\n \n   /**\n-   * called by TsFileResource.close()\n+   * do something when TsFileResource is closing (may be empty method)\n    */\n   void close();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3OTMzMw==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549279333", "bodyText": "No files are involved previously, yet a file is introduced here. What is the relationship between the file and the ITimeIndex?", "author": "jt2594838", "createdAt": "2020-12-28T09:32:34Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.PartitionViolationException;\n+\n+public interface ITimeIndex {\n+\n+  /**\n+   * init startTimes with Long.MAX_VALUE, endTimes with Long.MIN_VALUE\n+   */\n+  void init();\n+\n+  /**\n+   * serialize to outputStream\n+   *\n+   * @param outputStream outputStream\n+   */\n+  void serialize(OutputStream outputStream) throws IOException;\n+\n+  /**\n+   * deserialize from inputStream\n+   *\n+   * @param inputStream inputStream\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(InputStream inputStream) throws IOException;\n+\n+  /**\n+   * deserialize from byte buffer\n+   *\n+   * @param buffer byte buffer\n+   * @return TimeIndex\n+   */\n+  ITimeIndex deserialize(ByteBuffer buffer);\n+\n+  /**\n+   * called by TsFileResource.close()\n+   */\n+  void close();\n+\n+  /**\n+   * get devices in TimeIndex\n+   *\n+   * @return device names\n+   */\n+  Set<String> getDevices();\n+\n+  /**\n+   * @return whether end time is empty (Long.MIN_VALUE)\n+   */\n+  boolean endTimeEmpty();\n+\n+  /**\n+   * @param timeLowerBound time lower bound\n+   * @return whether any of the device lives over the given time bound\n+   */\n+  boolean stillLives(long timeLowerBound);\n+\n+  /**\n+   * @return initial resource map size\n+   */\n+  long calculateRamSize();\n+\n+  /**\n+   * Calculate the resource ram increment when insert data in TsFileProcessor\n+   *\n+   * @param deviceToBeChecked device to be checked\n+   * @return ramIncrement\n+   */\n+  long estimateRamIncrement(String deviceToBeChecked);\n+\n+  /**\n+   * get time partition\n+   *\n+   * @param file file path\n+   * @return partition\n+   */\n+  long getTimePartition(String file);\n+\n+  /**\n+   * get time partition with check. If data of file cross partitions, an exception will be thrown\n+   *\n+   * @param file file absolute path\n+   * @return partition\n+   * @throws PartitionViolationException data of file cross partitions\n+   */\n+  long getTimePartitionWithCheck(String file) throws PartitionViolationException;", "originalCommit": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMwMTQzMg==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549301432", "bodyText": "They are the path of tsfile, which is indexed by this file index. I changed the name to tsfilePath", "author": "samperson1997", "createdAt": "2020-12-28T10:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3OTMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "f3c088b71834b23760d111a4596f3538c313904f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\nindex 607dcd2c44..afeb91d3c0 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/ITimeIndex.java\n\n@@ -57,7 +57,7 @@ public interface ITimeIndex {\n   ITimeIndex deserialize(ByteBuffer buffer);\n \n   /**\n-   * called by TsFileResource.close()\n+   * do something when TsFileResource is closing (may be empty method)\n    */\n   void close();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4MTcwMg==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549281702", "bodyText": "Although FILE_TIME_INDEX is provided, ITimeIndex is heavily bound to devices, as many of its methods involve devices, which leaves FileTimeIndex in an embarrassing position. Maybe it would be better to do some abstraction between DeviceTimeIndex and ITimeIndex and put device-related methods into this abstraction.", "author": "jt2594838", "createdAt": "2020-12-28T09:40:27Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/TimeIndexLevel.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.storagegroup.timeindex;\n+\n+public enum TimeIndexLevel {\n+  FILE_TIME_INDEX, DEVICE_TIME_INDEX;\n+\n+  public ITimeIndex getTimeIndex() {\n+    switch (this) {\n+      case FILE_TIME_INDEX:\n+        return new FileTimeIndex();\n+      case DEVICE_TIME_INDEX:\n+      default:\n+        return new DeviceTimeIndex();", "originalCommit": "8f1354e1f6e3663fbeebfa7f44b357de88f8c441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMwNjYwNw==", "url": "https://github.com/apache/iotdb/pull/2340#discussion_r549306607", "bodyText": "I'll try this in next PR when supporting the conversion of two kinds of TimeIndex.", "author": "samperson1997", "createdAt": "2020-12-28T11:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4MTcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "8fe84c7a95ff0277368b80fc0915dfcce7a79617", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/TimeIndexLevel.java b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/TimeIndexLevel.java\nindex e1a80b015a..7f3b62440a 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/TimeIndexLevel.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/storagegroup/timeindex/TimeIndexLevel.java\n\n@@ -31,4 +31,14 @@ public enum TimeIndexLevel {\n         return new DeviceTimeIndex();\n     }\n   }\n+\n+  public ITimeIndex getTimeIndex(int deviceNumInLastClosedTsFile) {\n+    switch (this) {\n+      case FILE_TIME_INDEX:\n+        return new FileTimeIndex();\n+      case DEVICE_TIME_INDEX:\n+      default:\n+        return new DeviceTimeIndex(deviceNumInLastClosedTsFile);\n+    }\n+  }\n }\n"}}, {"oid": "f3c088b71834b23760d111a4596f3538c313904f", "url": "https://github.com/apache/iotdb/commit/f3c088b71834b23760d111a4596f3538c313904f", "message": "Fix review", "committedDate": "2020-12-28T11:05:40Z", "type": "commit"}, {"oid": "c85af5935a045a93e70210f7ddfc0639986dacad", "url": "https://github.com/apache/iotdb/commit/c85af5935a045a93e70210f7ddfc0639986dacad", "message": "Fix bug", "committedDate": "2020-12-28T11:53:25Z", "type": "commit"}, {"oid": "8fe84c7a95ff0277368b80fc0915dfcce7a79617", "url": "https://github.com/apache/iotdb/commit/8fe84c7a95ff0277368b80fc0915dfcce7a79617", "message": "[IOTDB-1076] Record the device number of the last TsFile in each storage group (#2379)\n\n* Record the device number of the last TsFile in each storage group", "committedDate": "2020-12-30T06:51:58Z", "type": "commit"}, {"oid": "de4a1bb1a22a2a857100a599eade1f87f67dedfc", "url": "https://github.com/apache/iotdb/commit/de4a1bb1a22a2a857100a599eade1f87f67dedfc", "message": "Merge remote-tracking branch 'origin/master' into time_index\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/conf/IoTDBDescriptor.java", "committedDate": "2020-12-30T06:54:02Z", "type": "commit"}, {"oid": "d27029747ea27b3810f93bfc17acb3f496d8841b", "url": "https://github.com/apache/iotdb/commit/d27029747ea27b3810f93bfc17acb3f496d8841b", "message": "Add version number and time index type", "committedDate": "2021-01-06T06:48:27Z", "type": "commit"}, {"oid": "1445dc41772718e79419ef4a52c241e52e91934c", "url": "https://github.com/apache/iotdb/commit/1445dc41772718e79419ef4a52c241e52e91934c", "message": "Fix sonar and update change list", "committedDate": "2021-01-06T08:54:29Z", "type": "commit"}]}