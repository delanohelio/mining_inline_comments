{"pr_number": 1750, "pr_title": "[Sonar] Fix Codesmell blocker and critical issue", "pr_createdAt": "2020-09-22T07:02:00Z", "pr_url": "https://github.com/apache/iotdb/pull/1750", "timeline": [{"oid": "11b9b16680e852293f29c8ec07d2111a1a55f007", "url": "https://github.com/apache/iotdb/commit/11b9b16680e852293f29c8ec07d2111a1a55f007", "message": "fix sonar blocker issue", "committedDate": "2020-09-19T11:32:34Z", "type": "commit"}, {"oid": "c9ae58e9fd2c47656d787b09a0ad5ae46a73f6e7", "url": "https://github.com/apache/iotdb/commit/c9ae58e9fd2c47656d787b09a0ad5ae46a73f6e7", "message": "fix codesmell critical issue of duplicating string", "committedDate": "2020-09-21T08:46:48Z", "type": "commit"}, {"oid": "2aef7535100de4a60ded7b114093933ce84cb52d", "url": "https://github.com/apache/iotdb/commit/2aef7535100de4a60ded7b114093933ce84cb52d", "message": "Merge remote-tracking branch 'upstream/master' into codesmell-blocker", "committedDate": "2020-09-22T06:49:01Z", "type": "commit"}, {"oid": "d8a73cd5fae8d1cbcf4dc8c9ead839658c83e951", "url": "https://github.com/apache/iotdb/commit/d8a73cd5fae8d1cbcf4dc8c9ead839658c83e951", "message": "fix some bugs", "committedDate": "2020-09-23T03:19:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NjcwNw==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r493256707", "bodyText": "Combine to one String template, use String.format", "author": "qiaojialin", "createdAt": "2020-09-23T07:28:05Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/decoder/Decoder.java", "diffHunk": "@@ -31,6 +31,9 @@\n \n public abstract class Decoder {\n \n+  private static final String DECODER_NOT_FOUND = \"Decoder not found:\";\n+  private static final String DATA_TYPE = \" , DataType is :\";", "originalCommit": "d8a73cd5fae8d1cbcf4dc8c9ead839658c83e951", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/decoder/Decoder.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/decoder/Decoder.java\nindex 25965fa992..76892a4f80 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/decoder/Decoder.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/decoder/Decoder.java\n\n@@ -31,8 +31,7 @@ import org.apache.iotdb.tsfile.utils.Binary;\n \n public abstract class Decoder {\n \n-  private static final String DECODER_NOT_FOUND = \"Decoder not found:\";\n-  private static final String DATA_TYPE = \" , DataType is :\";\n+  private static final String ERROR_MSG = \"Decoder not found: %s , DataType is : %s\";\n \n   private TSEncoding type;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2NjI5Mg==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r493266292", "bodyText": "combine these two", "author": "qiaojialin", "createdAt": "2020-09-23T07:43:26Z", "path": "hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java", "diffHunk": "@@ -34,7 +34,8 @@\n \n public class TsFileDeserializer {\n   private static final Logger LOG = LoggerFactory.getLogger(TsFileDeserializer.class);\n-\n+  private static final String UNEXPECTED_DATA_TYPE = \"Unexpected data type: \";\n+  private static final String FOR_DATE_TYPEINFO = \" for Date TypeInfo: \";", "originalCommit": "d8a73cd5fae8d1cbcf4dc8c9ead839658c83e951", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "chunk": "diff --git a/hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java b/hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java\nindex 5ef88b1f8f..5625ac62ff 100644\n--- a/hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java\n+++ b/hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java\n\n@@ -34,8 +34,7 @@ import java.util.Objects;\n \n public class TsFileDeserializer {\n   private static final Logger LOG = LoggerFactory.getLogger(TsFileDeserializer.class);\n-  private static final String UNEXPECTED_DATA_TYPE = \"Unexpected data type: \";\n-  private static final String FOR_DATE_TYPEINFO = \" for Date TypeInfo: \";\n+  private static final String ERROR_MSG = \"Unexpected data type: %s for Date TypeInfo: %s\";\n   private List<Object> row;\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2ODE1Ng==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r493268156", "bodyText": "combine to one string", "author": "qiaojialin", "createdAt": "2020-09-23T07:46:23Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -200,6 +200,9 @@\n   private UpdateOperator updateOp;\n   private QueryOperator queryOp;\n   private DeleteDataOperator deleteDataOp;\n+  private static final String FOR_DELETE_STATEMENT = \"For delete statement, where clause can only contain atomic expressions like : \";\n+  private static final String ATOMIC_EXPRESSION_RULE = \"time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";", "originalCommit": "d8a73cd5fae8d1cbcf4dc8c9ead839658c83e951", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02e97ab572905f3c9da6f95eb9f380667a9fb31", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java b/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\nindex 5c12aea79c..105d87ffd1 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n\n@@ -200,8 +200,8 @@ public class LogicalGenerator extends SqlBaseBaseListener {\n   private UpdateOperator updateOp;\n   private QueryOperator queryOp;\n   private DeleteDataOperator deleteDataOp;\n-  private static final String FOR_DELETE_STATEMENT = \"For delete statement, where clause can only contain atomic expressions like : \";\n-  private static final String ATOMIC_EXPRESSION_RULE = \"time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";\n+  private static final String DELETE_RANGE_ERROR_MSG = \n+  \"For delete statement, where clause can only contain atomic expressions like : time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";\n \n \n   LogicalGenerator(ZoneId zoneId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU1Nzc0MQ==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r493557741", "bodyText": "String.format(\"Unexpected data type: %s for Date TypeInfo: %s\", data.getClass().getName(), type)", "author": "jixuan1989", "createdAt": "2020-09-23T12:57:55Z", "path": "hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java", "diffHunk": "@@ -90,55 +91,55 @@ public Object deserialize(List<String> columnNames, List<TypeInfo> columnTypes,\n             row.add(((BooleanWritable)data).get());\n           }\n           else {\n-            throw new TsFileSerDeException(\"Unexpected data type: \" + data.getClass().getName() + \" for Date TypeInfo: \" + type);\n+            throw new TsFileSerDeException(UNEXPECTED_DATA_TYPE + data.getClass().getName() + FOR_DATE_TYPEINFO + type);", "originalCommit": "d8a73cd5fae8d1cbcf4dc8c9ead839658c83e951", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "chunk": "diff --git a/hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java b/hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java\nindex 5ef88b1f8f..5625ac62ff 100644\n--- a/hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java\n+++ b/hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java\n\n@@ -91,15 +90,16 @@ public class TsFileDeserializer {\n             row.add(((BooleanWritable)data).get());\n           }\n           else {\n-            throw new TsFileSerDeException(UNEXPECTED_DATA_TYPE + data.getClass().getName() + FOR_DATE_TYPEINFO + type);\n+            throw new TsFileSerDeException(String.format(ERROR_MSG, data.getClass().getName(), type));\n           }\n+          \n           break;\n         case INT:\n           if (data instanceof IntWritable) {\n             row.add(((IntWritable)data).get());\n           }\n           else {\n-            throw new TsFileSerDeException(UNEXPECTED_DATA_TYPE + data.getClass().getName() + FOR_DATE_TYPEINFO + type);\n+            throw new TsFileSerDeException(String.format(ERROR_MSG, data.getClass().getName(), type));\n           }\n           break;\n         case LONG:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU1ODcwNw==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r493558707", "bodyText": "why change this name?", "author": "jixuan1989", "createdAt": "2020-09-23T12:58:57Z", "path": "server/src/main/java/org/apache/iotdb/db/cost/statistic/Measurement.java", "diffHunk": "@@ -112,7 +112,7 @@\n   private long displayIntervalInMs;\n   private Map<String, Boolean> operationSwitch;\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(Measurement.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(Measurement.class);", "originalCommit": "d8a73cd5fae8d1cbcf4dc8c9ead839658c83e951", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/cost/statistic/Measurement.java b/server/src/main/java/org/apache/iotdb/db/cost/statistic/Measurement.java\nindex 3e83b23134..63cae0a782 100644\n--- a/server/src/main/java/org/apache/iotdb/db/cost/statistic/Measurement.java\n+++ b/server/src/main/java/org/apache/iotdb/db/cost/statistic/Measurement.java\n\n@@ -112,7 +112,6 @@ public class Measurement implements MeasurementMBean, IService {\n   private long displayIntervalInMs;\n   private Map<String, Boolean> operationSwitch;\n \n-  private static final Logger LOG = LoggerFactory.getLogger(Measurement.class);\n   private final String mbeanName = String\n       .format(\"%s:%s=%s\", \"org.apache.iotdb.db.cost.statistic\", IoTDBConstant.JMX_TYPE,\n           getID().getJmxName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU2MTQ2NA==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r493561464", "bodyText": "public final static String ?", "author": "jixuan1989", "createdAt": "2020-09-23T13:01:55Z", "path": "server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java", "diffHunk": "@@ -26,23 +26,23 @@\n \r\n public class JvmSource implements Source {\r\n \r\n-  public String sourceName = \"jvm\";\r\n+  public String SOURCE_NAME = \"jvm\";\r", "originalCommit": "d8a73cd5fae8d1cbcf4dc8c9ead839658c83e951", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java b/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java\nindex ecbce41dc2..c9b99918d2 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java\n\n@@ -26,7 +26,7 @@ import com.codahale.metrics.jvm.MemoryUsageGaugeSet;\n \n public class JvmSource implements Source {\n \n-  public String SOURCE_NAME = \"jvm\";\n+  public final static String SOURCE_NAME = \"jvm\";\n   public MetricRegistry metricRegistry;\n \n   public JvmSource(MetricRegistry metricRegistry) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU2MTc3OA==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r493561778", "bodyText": "final static String", "author": "jixuan1989", "createdAt": "2020-09-23T13:02:15Z", "path": "server/src/main/java/org/apache/iotdb/db/metrics/source/MetricsSource.java", "diffHunk": "@@ -24,7 +24,7 @@\n \r\n public class MetricsSource implements Source {\r\n \r\n-  public String sourceName = \"iot-metrics\";\r\n+  public String SOURCE_NAME = \"iot-metrics\";\r", "originalCommit": "d8a73cd5fae8d1cbcf4dc8c9ead839658c83e951", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afb99b2c3b1721f7ac5ffab126a392745e90b3de", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metrics/source/MetricsSource.java b/server/src/main/java/org/apache/iotdb/db/metrics/source/MetricsSource.java\nindex bf39a5c5fb..227f9409c1 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metrics/source/MetricsSource.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metrics/source/MetricsSource.java\n\n@@ -24,7 +24,7 @@ import com.codahale.metrics.MetricRegistry;\n \n public class MetricsSource implements Source {\n \n-  public String SOURCE_NAME = \"iot-metrics\";\n+  private static final String SOURCE_NAME = \"iot-metrics\";\n   public MetricRegistry metricRegistry;\n   public ServerArgument serverArgument;\n \n"}}, {"oid": "afb99b2c3b1721f7ac5ffab126a392745e90b3de", "url": "https://github.com/apache/iotdb/commit/afb99b2c3b1721f7ac5ffab126a392745e90b3de", "message": "fix some major codesmell issues", "committedDate": "2020-09-27T03:13:20Z", "type": "commit"}, {"oid": "8f0d09383a2a9fd85a64b274c8969e290d068320", "url": "https://github.com/apache/iotdb/commit/8f0d09383a2a9fd85a64b274c8969e290d068320", "message": "fix conflict", "committedDate": "2020-09-27T03:31:59Z", "type": "commit"}, {"oid": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "url": "https://github.com/apache/iotdb/commit/812ea07f011e3d8904dba8e2e416b50d67d87b3d", "message": "code revision", "committedDate": "2020-09-27T07:17:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MjY0Nw==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r495542647", "bodyText": "Remove this pair of  parentheses", "author": "wshao08", "createdAt": "2020-09-27T07:53:23Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java", "diffHunk": "@@ -132,8 +133,8 @@ public static void upgradeMLog(String schemaDir, String logFileName) throws IOEx\n     }\n \n     // if both old mlog and mlog.tmp exist, delete mlog tmp, then do upgrading\n-    if (tmpLogFile.exists()) {\n-      if (!tmpLogFile.delete()) {\n+    if (tmpLogFile.exists() && !tmpLogFile.delete()) {\n+      {", "originalCommit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02e97ab572905f3c9da6f95eb9f380667a9fb31", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java b/server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java\nindex 986f57839f..2d55a369e5 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MLogWriter.java\n\n@@ -133,7 +133,7 @@ public class MLogWriter {\n     }\n \n     // if both old mlog and mlog.tmp exist, delete mlog tmp, then do upgrading\n-    if (tmpLogFile.exists() && !tmpLogFile.delete()) {\n+    if (tmpLogFile.exists() && !tmpLogFile.delete) {\n       {\n         throw new IOException(\"Deleting \" + tmpLogFile + \"failed.\");\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MjczNg==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r495542736", "bodyText": "remove this parentheses", "author": "wshao08", "createdAt": "2020-09-27T07:54:15Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -898,8 +899,8 @@ private void findPath(MNode node, String[] nodes, int idx, List<Pair<PartialPath\n           continue;\n         }\n         findPath(child, nodes, idx + 1, timeseriesSchemaList, hasLimit, needLast, queryContext);\n-        if (hasLimit) {\n-          if (count.get().intValue() == limit.get().intValue()) {\n+        if (hasLimit && count.get().intValue() == limit.get().intValue()) {\n+           {", "originalCommit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02e97ab572905f3c9da6f95eb9f380667a9fb31", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\nindex 472a9267d9..8bc494e251 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MTree.java\n\n@@ -899,10 +899,8 @@ public class MTree implements Serializable {\n           continue;\n         }\n         findPath(child, nodes, idx + 1, timeseriesSchemaList, hasLimit, needLast, queryContext);\n-        if (hasLimit && count.get().intValue() == limit.get().intValue()) {\n-           {\n+        if (hasLimit && count.get().intValue == limit.get().intValue) {\n             return;\n-          }\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0Mjc2NQ==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r495542765", "bodyText": "public static final", "author": "wshao08", "createdAt": "2020-09-27T07:54:29Z", "path": "server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java", "diffHunk": "@@ -26,23 +26,23 @@\n \r\n public class JvmSource implements Source {\r\n \r\n-  public String sourceName = \"jvm\";\r\n+  public final static String SOURCE_NAME = \"jvm\";\r", "originalCommit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02e97ab572905f3c9da6f95eb9f380667a9fb31", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java b/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java\nindex c9b99918d2..7b8c681fea 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java\n\n@@ -26,7 +26,7 @@ import com.codahale.metrics.jvm.MemoryUsageGaugeSet;\n \n public class JvmSource implements Source {\n \n-  public final static String SOURCE_NAME = \"jvm\";\n+  public static final String SOURCE_NAME = \"jvm\";\n   public MetricRegistry metricRegistry;\n \n   public JvmSource(MetricRegistry metricRegistry) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0MzAwOA==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r495543008", "bodyText": "remove blank line", "author": "wshao08", "createdAt": "2020-09-27T07:57:29Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java", "diffHunk": "@@ -41,6 +42,7 @@\n    * @param name CompressionType\n    * @return the UnCompressor of specified CompressionType\n    */\n+", "originalCommit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02e97ab572905f3c9da6f95eb9f380667a9fb31", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java\nindex dcaef1a8a3..77c7439296 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/compress/IUnCompressor.java\n\n@@ -42,7 +42,6 @@ public interface IUnCompressor {\n    * @param name CompressionType\n    * @return the UnCompressor of specified CompressionType\n    */\n-\n   static IUnCompressor getUnCompressor(CompressionType name) {\n     if (name == null) {\n       throw new CompressionTypeNotSupportedException(\"NULL\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0NDA2Mw==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r495544063", "bodyText": "Combine to one error message. Call it \"DELETE_RANGE_ERROR_MSG\"", "author": "wshao08", "createdAt": "2020-09-27T08:09:27Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -200,6 +200,9 @@\n   private UpdateOperator updateOp;\n   private QueryOperator queryOp;\n   private DeleteDataOperator deleteDataOp;\n+  private static final String FOR_DELETE_STATEMENT = \"For delete statement, where clause can only contain atomic expressions like : \";", "originalCommit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02e97ab572905f3c9da6f95eb9f380667a9fb31", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java b/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\nindex 5c12aea79c..105d87ffd1 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n\n@@ -200,8 +200,8 @@ public class LogicalGenerator extends SqlBaseBaseListener {\n   private UpdateOperator updateOp;\n   private QueryOperator queryOp;\n   private DeleteDataOperator deleteDataOp;\n-  private static final String FOR_DELETE_STATEMENT = \"For delete statement, where clause can only contain atomic expressions like : \";\n-  private static final String ATOMIC_EXPRESSION_RULE = \"time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";\n+  private static final String DELETE_RANGE_ERROR_MSG = \n+  \"For delete statement, where clause can only contain atomic expressions like : time > XXX, time <= XXX, or two atomic expressions connected by 'AND'\";\n \n \n   LogicalGenerator(ZoneId zoneId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU0NDcxNg==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r495544716", "bodyText": "Use BINARY_STATS_UNSUPPORTED_MSG to represent \"Binary statistics does not support: %s\",\nand use String.format(BINARY_STATS_UNSUPPORTED_MSG, \"min\");", "author": "wshao08", "createdAt": "2020-09-27T08:15:52Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/statistics/BinaryStatistics.java", "diffHunk": "@@ -36,6 +36,9 @@\n \n   private Binary firstValue = new Binary(\"\");\n   private Binary lastValue = new Binary(\"\");\n+  private static final String BINARY_STATISTICS_NOT_SUPPORT_MIN = \"Binary statistics does not support: min\";\n+  private static final String BINARY_STATISTICS_NOT_SUPPORT_MAX = \"Binary statistics does not support: max\";\n+  private static final String BINARY_STATISTICS_NOT_SUPPORT_SUM = \"Binary statistics does not support: sum\";", "originalCommit": "812ea07f011e3d8904dba8e2e416b50d67d87b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02e97ab572905f3c9da6f95eb9f380667a9fb31", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/statistics/BinaryStatistics.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/statistics/BinaryStatistics.java\nindex 064ba38565..ab6fc6fd68 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/statistics/BinaryStatistics.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/file/metadata/statistics/BinaryStatistics.java\n\n@@ -36,10 +36,7 @@ public class BinaryStatistics extends Statistics<Binary> {\n \n   private Binary firstValue = new Binary(\"\");\n   private Binary lastValue = new Binary(\"\");\n-  private static final String BINARY_STATISTICS_NOT_SUPPORT_MIN = \"Binary statistics does not support: min\";\n-  private static final String BINARY_STATISTICS_NOT_SUPPORT_MAX = \"Binary statistics does not support: max\";\n-  private static final String BINARY_STATISTICS_NOT_SUPPORT_SUM = \"Binary statistics does not support: sum\";\n-\n+  private static final String BINARY_STATS_UNSUPPORTED_MSG = \"Binary statistics does not support: %s\"; \n   @Override\n   public TSDataType getType() {\n     return TSDataType.TEXT;\n"}}, {"oid": "e02e97ab572905f3c9da6f95eb9f380667a9fb31", "url": "https://github.com/apache/iotdb/commit/e02e97ab572905f3c9da6f95eb9f380667a9fb31", "message": "code revision 02", "committedDate": "2020-09-27T09:38:09Z", "type": "commit"}, {"oid": "fac2703673be12d829bb9d24387052044d5a20ab", "url": "https://github.com/apache/iotdb/commit/fac2703673be12d829bb9d24387052044d5a20ab", "message": "code revision 03", "committedDate": "2020-09-27T09:57:51Z", "type": "commit"}, {"oid": "021f16b499fa9d910be94bb8d79445e47adf5764", "url": "https://github.com/apache/iotdb/commit/021f16b499fa9d910be94bb8d79445e47adf5764", "message": "code revision 04", "committedDate": "2020-09-27T11:15:04Z", "type": "commit"}, {"oid": "81109a6bb14f16589410f068efb9bb2c5653eaa4", "url": "https://github.com/apache/iotdb/commit/81109a6bb14f16589410f068efb9bb2c5653eaa4", "message": "fix code indentation", "committedDate": "2020-09-27T11:24:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2MjY3OQ==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r495662679", "bodyText": "Remove blank line and set indentation to 2", "author": "wshao08", "createdAt": "2020-09-28T02:43:40Z", "path": "example/tsfile/src/main/java/org/apache/iotdb/tsfile/TsFileWriteWithTablet.java", "diffHunk": "@@ -46,10 +46,9 @@ public static void main(String[] args) {\n     try {\n       String path = \"test.tsfile\";\n       File f = FSFactoryProducer.getFSFactory().getFile(path);\n-      if (f.exists()) {\n-        if (!f.delete()) {\n+      if (f.exists() && !f.delete()) {\n           throw new RuntimeException(\"can not delete \" + f.getAbsolutePath());\n-        }\n+        ", "originalCommit": "81109a6bb14f16589410f068efb9bb2c5653eaa4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "126af2b9e2cee83567fedc2ce7e17e181d9343a4", "chunk": "diff --git a/example/tsfile/src/main/java/org/apache/iotdb/tsfile/TsFileWriteWithTablet.java b/example/tsfile/src/main/java/org/apache/iotdb/tsfile/TsFileWriteWithTablet.java\nindex da86b7bce9..9c0bc315e7 100644\n--- a/example/tsfile/src/main/java/org/apache/iotdb/tsfile/TsFileWriteWithTablet.java\n+++ b/example/tsfile/src/main/java/org/apache/iotdb/tsfile/TsFileWriteWithTablet.java\n\n@@ -47,8 +47,7 @@ public class TsFileWriteWithTablet {\n       String path = \"test.tsfile\";\n       File f = FSFactoryProducer.getFSFactory().getFile(path);\n       if (f.exists() && !f.delete()) {\n-          throw new RuntimeException(\"can not delete \" + f.getAbsolutePath());\n-        \n+        throw new RuntimeException(\"can not delete \" + f.getAbsolutePath());\n       }\n \n       Schema schema = new Schema();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2Mjc0Nw==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r495662747", "bodyText": "set indentation to 2", "author": "wshao08", "createdAt": "2020-09-28T02:44:01Z", "path": "session/src/main/java/org/apache/iotdb/session/SessionDataSet.java", "diffHunk": "@@ -129,10 +129,8 @@ private RowRecord constructRowRecordFromValueArray() throws StatementExecutionEx\n \n \n   public RowRecord next() throws StatementExecutionException, IoTDBConnectionException {\n-    if (!ioTDBRpcDataSet.hasCachedRecord) {\n-      if (!hasNext()) {\n+    if (!ioTDBRpcDataSet.hasCachedRecord && !hasNext()) {\n         return null;", "originalCommit": "81109a6bb14f16589410f068efb9bb2c5653eaa4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "126af2b9e2cee83567fedc2ce7e17e181d9343a4", "chunk": "diff --git a/session/src/main/java/org/apache/iotdb/session/SessionDataSet.java b/session/src/main/java/org/apache/iotdb/session/SessionDataSet.java\nindex 1b8a0ead9d..dbe078df58 100644\n--- a/session/src/main/java/org/apache/iotdb/session/SessionDataSet.java\n+++ b/session/src/main/java/org/apache/iotdb/session/SessionDataSet.java\n\n@@ -130,7 +130,7 @@ public class SessionDataSet {\n \n   public RowRecord next() throws StatementExecutionException, IoTDBConnectionException {\n     if (!ioTDBRpcDataSet.hasCachedRecord && !hasNext()) {\n-        return null;\n+      return null;\n     }\n     ioTDBRpcDataSet.hasCachedRecord = false;\n \n"}}, {"oid": "126af2b9e2cee83567fedc2ce7e17e181d9343a4", "url": "https://github.com/apache/iotdb/commit/126af2b9e2cee83567fedc2ce7e17e181d9343a4", "message": "set indentation to 2", "committedDate": "2020-09-28T03:41:36Z", "type": "commit"}, {"oid": "fdb18fd844a85d86a27da172b9ab5a607978355a", "url": "https://github.com/apache/iotdb/commit/fdb18fd844a85d86a27da172b9ab5a607978355a", "message": "fix bug", "committedDate": "2020-09-28T08:05:20Z", "type": "commit"}, {"oid": "1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "url": "https://github.com/apache/iotdb/commit/1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "message": "swap arguments so they are in correct order", "committedDate": "2020-09-29T07:59:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2MDQ4MQ==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r500760481", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String  UNSUPPORT_FILE_SYSTEM = \"Unsupported file system: \";\n          \n          \n            \n              private static final String UNSUPPORT_FILE_SYSTEM = \"Unsupported file system: \";", "author": "HTHou", "createdAt": "2020-10-07T06:14:36Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/fileSystem/SystemFileFactory.java", "diffHunk": "@@ -30,10 +30,10 @@\n   INSTANCE;\n \n   private static FSType fsType = IoTDBDescriptor.getInstance().getConfig().getSystemFileStorageFs();\n-\n+  private static final String  UNSUPPORT_FILE_SYSTEM = \"Unsupported file system: \";", "originalCommit": "1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5de34e876f949be13f2fbb0996f1756ddacf9d4f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/engine/fileSystem/SystemFileFactory.java b/server/src/main/java/org/apache/iotdb/db/engine/fileSystem/SystemFileFactory.java\nindex e9310723c5..800a47131d 100644\n--- a/server/src/main/java/org/apache/iotdb/db/engine/fileSystem/SystemFileFactory.java\n+++ b/server/src/main/java/org/apache/iotdb/db/engine/fileSystem/SystemFileFactory.java\n\n@@ -30,7 +30,7 @@ public enum SystemFileFactory {\n   INSTANCE;\n \n   private static FSType fsType = IoTDBDescriptor.getInstance().getConfig().getSystemFileStorageFs();\n-  private static final String  UNSUPPORT_FILE_SYSTEM = \"Unsupported file system: \";\n+  private static final String UNSUPPORT_FILE_SYSTEM = \"Unsupported file system: \";\n   public File getFile(String pathname) {\n     if (fsType.equals(FSType.HDFS)) {\n       throw new UnsupportedOperationException(UNSUPPORT_FILE_SYSTEM + fsType.name());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2MTg3OA==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r500761878", "bodyText": "TimeSeries %s is removed from tag inverted index,  can also be const string.", "author": "HTHou", "createdAt": "2020-10-07T06:18:29Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -516,7 +518,7 @@ private void removeFromTagInvertedIndex(MeasurementMNode node) throws IOExceptio\n           if (logger.isDebugEnabled()) {\n             logger.debug(String.format(\n                 \"Delete: TimeSeries %s is removed from tag inverted index, \"", "originalCommit": "1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5de34e876f949be13f2fbb0996f1756ddacf9d4f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex 7782de330a..73ce5db0b8 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -517,7 +494,7 @@ public class MManager {\n             .containsKey(entry.getValue())) {\n           if (logger.isDebugEnabled()) {\n             logger.debug(String.format(\n-                \"Delete: TimeSeries %s is removed from tag inverted index, \"\n+                DEBUG_MSG, \"Delete\"\n                     + TAG_FORMAT,\n                 node.getFullPath(), entry.getKey(), entry.getValue(), node.getOffset()));\n           }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2MjAzNw==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r500762037", "bodyText": "Same as above", "author": "HTHou", "createdAt": "2020-10-07T06:19:01Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1378,7 +1380,7 @@ public void upsertTagsAndAttributes(String alias, Map<String, String> tagsMap,\n               if (logger.isDebugEnabled()) {\n                 logger.debug(String.format(\n                     \"Upsert: TimeSeries %s's tag info has been removed from tag inverted index \"", "originalCommit": "1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4be808198add24e047649a367cb050e9cb52964b", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\nindex 7782de330a..6b443acec9 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n\n@@ -1272,305 +1083,273 @@ public class MManager {\n    * Check whether the given path contains a storage group change or set the new offset of a\n    * timeseries\n    *\n-   * @param path timeseries\n+   * @param path   timeseries\n    * @param offset offset in the tag file\n    */\n   public void changeOffset(PartialPath path, long offset) throws MetadataException {\n-    lock.writeLock().lock();\n-    try {\n-      ((MeasurementMNode) mtree.getNodeByPath(path)).setOffset(offset);\n-    } finally {\n-      lock.writeLock().unlock();\n-    }\n+    ((MeasurementMNode) mtree.getNodeByPath(path)).setOffset(offset);\n   }\n \n   public void changeAlias(PartialPath path, String alias) throws MetadataException {\n-    lock.writeLock().lock();\n-    try {\n-      MeasurementMNode leafMNode = (MeasurementMNode) mtree.getNodeByPath(path);\n-      if (leafMNode.getAlias() != null) {\n-        leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n-      }\n-      leafMNode.getParent().addAlias(alias, leafMNode);\n-      leafMNode.setAlias(alias);\n-    } finally {\n-      lock.writeLock().unlock();\n+    MeasurementMNode leafMNode = (MeasurementMNode) mtree.getNodeByPath(path);\n+    if (leafMNode.getAlias() != null) {\n+      leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n     }\n+    leafMNode.getParent().addAlias(alias, leafMNode);\n+    leafMNode.setAlias(alias);\n   }\n \n   /**\n    * upsert tags and attributes key-value for the timeseries if the key has existed, just use the\n    * new value to update it.\n    *\n-   * @param alias newly added alias\n-   * @param tagsMap newly added tags map\n+   * @param alias         newly added alias\n+   * @param tagsMap       newly added tags map\n    * @param attributesMap newly added attributes map\n-   * @param fullPath timeseries\n+   * @param fullPath      timeseries\n    */\n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n   public void upsertTagsAndAttributes(String alias, Map<String, String> tagsMap,\n       Map<String, String> attributesMap, PartialPath fullPath)\n       throws MetadataException, IOException {\n-    lock.writeLock().lock();\n-    try {\n-      MNode mNode = mtree.getNodeByPath(fullPath);\n-      if (!(mNode instanceof MeasurementMNode)) {\n-        throw new PathNotExistException(fullPath.getFullPath());\n+    MNode mNode = mtree.getNodeByPath(fullPath);\n+    if (!(mNode instanceof MeasurementMNode)) {\n+      throw new PathNotExistException(fullPath.getFullPath());\n+    }\n+    MeasurementMNode leafMNode = (MeasurementMNode) mNode;\n+    // upsert alias\n+    if (alias != null && !alias.equals(leafMNode.getAlias())) {\n+      if (!leafMNode.getParent().addAlias(alias, leafMNode)) {\n+        throw new MetadataException(\"The alias already exists.\");\n       }\n-      MeasurementMNode leafMNode = (MeasurementMNode) mNode;\n-      // upsert alias\n-      if (alias != null && !alias.equals(leafMNode.getAlias())) {\n \n-        if (leafMNode.getParent().hasChild(alias)) {\n-          throw new MetadataException(\"The alias already exists.\");\n-        }\n-        if (leafMNode.getAlias() != null) {\n-          leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n-        }\n-        leafMNode.getParent().addAlias(alias, leafMNode);\n-        leafMNode.setAlias(alias);\n-        // persist to WAL\n-        logWriter.changeAlias(fullPath.getFullPath(), alias);\n+      if (leafMNode.getAlias() != null) {\n+        leafMNode.getParent().deleteAliasChild(leafMNode.getAlias());\n       }\n \n-      if (tagsMap == null && attributesMap == null) {\n-        return;\n-      }\n-      // no tag or attribute, we need to add a new record in log\n-      if (leafMNode.getOffset() < 0) {\n-        long offset = tagLogFile.write(tagsMap, attributesMap);\n-        logWriter.changeOffset(fullPath.getFullPath(), offset);\n-        leafMNode.setOffset(offset);\n-        // update inverted Index map\n-        if (tagsMap != null) {\n-          for (Entry<String, String> entry : tagsMap.entrySet()) {\n-            tagIndex.computeIfAbsent(entry.getKey(), k -> new HashMap<>())\n-                .computeIfAbsent(entry.getValue(), v -> new HashSet<>()).add(leafMNode);\n-          }\n+      leafMNode.setAlias(alias);\n+      // persist to WAL\n+      logWriter.changeAlias(fullPath.getFullPath(), alias);\n+    }\n+\n+    if (tagsMap == null && attributesMap == null) {\n+      return;\n+    }\n+    // no tag or attribute, we need to add a new record in log\n+    if (leafMNode.getOffset() < 0) {\n+      long offset = tagLogFile.write(tagsMap, attributesMap);\n+      logWriter.changeOffset(fullPath.getFullPath(), offset);\n+      leafMNode.setOffset(offset);\n+      // update inverted Index map\n+      if (tagsMap != null) {\n+        for (Entry<String, String> entry : tagsMap.entrySet()) {\n+          tagIndex.computeIfAbsent(entry.getKey(), k -> new HashMap<>())\n+              .computeIfAbsent(entry.getValue(), v -> new HashSet<>()).add(leafMNode);\n         }\n-        return;\n       }\n+      return;\n+    }\n \n-      Pair<Map<String, String>, Map<String, String>> pair =\n-          tagLogFile.read(config.getTagAttributeTotalSize(), leafMNode.getOffset());\n+    Pair<Map<String, String>, Map<String, String>> pair =\n+        tagLogFile.read(config.getTagAttributeTotalSize(), leafMNode.getOffset());\n \n-      if (tagsMap != null) {\n-        for (Entry<String, String> entry : tagsMap.entrySet()) {\n-          String key = entry.getKey();\n-          String value = entry.getValue();\n-          String beforeValue = pair.left.get(key);\n-          pair.left.put(key, value);\n-          // if the key has existed and the value is not equal to the new one\n-          // we should remove before key-value from inverted index map\n-          if (beforeValue != null && !beforeValue.equals(value)) {\n-\n-            if (tagIndex.containsKey(key) && tagIndex.get(key).containsKey(beforeValue)) {\n-              if (logger.isDebugEnabled()) {\n-                logger.debug(String.format(\n-                    \"Upsert: TimeSeries %s is removed from tag inverted index, \"\n-                        + TAG_FORMAT,\n-                    leafMNode.getFullPath(), key, beforeValue, leafMNode.getOffset()));\n-              }\n-\n-              tagIndex.get(key).get(beforeValue).remove(leafMNode);\n-              if (tagIndex.get(key).get(beforeValue).isEmpty()) {\n-                tagIndex.get(key).remove(beforeValue);\n-              }\n-            } else {\n-              if (logger.isDebugEnabled()) {\n-                logger.debug(String.format(\n-                    \"Upsert: TimeSeries %s's tag info has been removed from tag inverted index \"\n-                        + BEFORE_DELETE_TAG_FORMAT,\n-                    leafMNode.getFullPath(), key, beforeValue, leafMNode.getOffset(),\n-                    tagIndex.containsKey(key)));\n-              }\n+    if (tagsMap != null) {\n+      for (Entry<String, String> entry : tagsMap.entrySet()) {\n+        String key = entry.getKey();\n+        String value = entry.getValue();\n+        String beforeValue = pair.left.get(key);\n+        pair.left.put(key, value);\n+        // if the key has existed and the value is not equal to the new one\n+        // we should remove before key-value from inverted index map\n+        if (beforeValue != null && !beforeValue.equals(value)) {\n+\n+          if (tagIndex.containsKey(key) && tagIndex.get(key).containsKey(beforeValue)) {\n+            if (logger.isDebugEnabled()) {\n+              logger.debug(String.format(\n+                  \"Upsert: TimeSeries %s is removed from tag inverted index, \"\n+                      + TAG_FORMAT,\n+                  leafMNode.getFullPath(), key, beforeValue, leafMNode.getOffset()));\n             }\n-          }\n \n-          // if the key doesn't exist or the value is not equal to the new one\n-          // we should add a new key-value to inverted index map\n-          if (beforeValue == null || !beforeValue.equals(value)) {\n-            tagIndex.computeIfAbsent(key, k -> new HashMap<>())\n-                .computeIfAbsent(value, v -> new HashSet<>()).add(leafMNode);\n+            tagIndex.get(key).get(beforeValue).remove(leafMNode);\n+            if (tagIndex.get(key).get(beforeValue).isEmpty()) {\n+              tagIndex.get(key).remove(beforeValue);\n+            }\n+          } else {\n+            if (logger.isDebugEnabled()) {\n+              logger.debug(String.format(\n+                  \"Upsert: TimeSeries %s's tag info has been removed from tag inverted index \"\n+                      + \"before deleting it, tag key is %s, tag value is %s, tlog offset is %d, contains key %b\",\n+                  leafMNode.getFullPath(), key, beforeValue, leafMNode.getOffset(),\n+                  tagIndex.containsKey(key)));\n+            }\n           }\n         }\n+\n+        // if the key doesn't exist or the value is not equal to the new one\n+        // we should add a new key-value to inverted index map\n+        if (beforeValue == null || !beforeValue.equals(value)) {\n+          tagIndex.computeIfAbsent(key, k -> new HashMap<>())\n+              .computeIfAbsent(value, v -> new HashSet<>()).add(leafMNode);\n+        }\n       }\n+    }\n \n-      pair.right.putAll(attributesMap);\n+    pair.right.putAll(attributesMap);\n \n-      // persist the change to disk\n-      tagLogFile.write(pair.left, pair.right, leafMNode.getOffset());\n-\n-    } finally {\n-      lock.writeLock().unlock();\n-    }\n+    // persist the change to disk\n+    tagLogFile.write(pair.left, pair.right, leafMNode.getOffset());\n   }\n \n   /**\n    * add new attributes key-value for the timeseries\n    *\n    * @param attributesMap newly added attributes map\n-   * @param fullPath timeseries\n+   * @param fullPath      timeseries\n    */\n   public void addAttributes(Map<String, String> attributesMap, PartialPath fullPath)\n       throws MetadataException, IOException {\n-    lock.writeLock().lock();\n-    try {\n-      MNode mNode = mtree.getNodeByPath(fullPath);\n-      if (!(mNode instanceof MeasurementMNode)) {\n-        throw new PathNotExistException(fullPath.getFullPath());\n-      }\n-      MeasurementMNode leafMNode = (MeasurementMNode) mNode;\n-      // no tag or attribute, we need to add a new record in log\n-      if (leafMNode.getOffset() < 0) {\n-        long offset = tagLogFile.write(Collections.emptyMap(), attributesMap);\n-        logWriter.changeOffset(fullPath.getFullPath(), offset);\n-        leafMNode.setOffset(offset);\n-        return;\n-      }\n+    MNode mNode = mtree.getNodeByPath(fullPath);\n+    if (!(mNode instanceof MeasurementMNode)) {\n+      throw new PathNotExistException(fullPath.getFullPath());\n+    }\n+    MeasurementMNode leafMNode = (MeasurementMNode) mNode;\n+    // no tag or attribute, we need to add a new record in log\n+    if (leafMNode.getOffset() < 0) {\n+      long offset = tagLogFile.write(Collections.emptyMap(), attributesMap);\n+      logWriter.changeOffset(fullPath.getFullPath(), offset);\n+      leafMNode.setOffset(offset);\n+      return;\n+    }\n \n-      Pair<Map<String, String>, Map<String, String>> pair =\n-          tagLogFile.read(config.getTagAttributeTotalSize(), leafMNode.getOffset());\n+    Pair<Map<String, String>, Map<String, String>> pair =\n+        tagLogFile.read(config.getTagAttributeTotalSize(), leafMNode.getOffset());\n \n-      for (Entry<String, String> entry : attributesMap.entrySet()) {\n-        String key = entry.getKey();\n-        String value = entry.getValue();\n-        if (pair.right.containsKey(key)) {\n-          throw new MetadataException(\n-              String.format(\"TimeSeries [%s] already has the attribute [%s].\", fullPath, key));\n-        }\n-        pair.right.put(key, value);\n+    for (Entry<String, String> entry : attributesMap.entrySet()) {\n+      String key = entry.getKey();\n+      String value = entry.getValue();\n+      if (pair.right.containsKey(key)) {\n+        throw new MetadataException(\n+            String.format(\"TimeSeries [%s] already has the attribute [%s].\", fullPath, key));\n       }\n-\n-      // persist the change to disk\n-      tagLogFile.write(pair.left, pair.right, leafMNode.getOffset());\n-    } finally {\n-      lock.writeLock().unlock();\n+      pair.right.put(key, value);\n     }\n+\n+    // persist the change to disk\n+    tagLogFile.write(pair.left, pair.right, leafMNode.getOffset());\n   }\n \n   /**\n    * add new tags key-value for the timeseries\n    *\n-   * @param tagsMap newly added tags map\n+   * @param tagsMap  newly added tags map\n    * @param fullPath timeseries\n    */\n   public void addTags(Map<String, String> tagsMap, PartialPath fullPath)\n       throws MetadataException, IOException {\n-    lock.writeLock().lock();\n-    try {\n-      MNode mNode = mtree.getNodeByPath(fullPath);\n-      if (!(mNode instanceof MeasurementMNode)) {\n-        throw new PathNotExistException(fullPath.getFullPath());\n-      }\n-      MeasurementMNode leafMNode = (MeasurementMNode) mNode;\n-      // no tag or attribute, we need to add a new record in log\n-      if (leafMNode.getOffset() < 0) {\n-        long offset = tagLogFile.write(tagsMap, Collections.emptyMap());\n-        logWriter.changeOffset(fullPath.getFullPath(), offset);\n-        leafMNode.setOffset(offset);\n-        // update inverted Index map\n-        for (Entry<String, String> entry : tagsMap.entrySet()) {\n-          tagIndex.computeIfAbsent(entry.getKey(), k -> new HashMap<>())\n-              .computeIfAbsent(entry.getValue(), v -> new HashSet<>()).add(leafMNode);\n-        }\n-        return;\n+    MNode mNode = mtree.getNodeByPath(fullPath);\n+    if (!(mNode instanceof MeasurementMNode)) {\n+      throw new PathNotExistException(fullPath.getFullPath());\n+    }\n+    MeasurementMNode leafMNode = (MeasurementMNode) mNode;\n+    // no tag or attribute, we need to add a new record in log\n+    if (leafMNode.getOffset() < 0) {\n+      long offset = tagLogFile.write(tagsMap, Collections.emptyMap());\n+      logWriter.changeOffset(fullPath.getFullPath(), offset);\n+      leafMNode.setOffset(offset);\n+      // update inverted Index map\n+      for (Entry<String, String> entry : tagsMap.entrySet()) {\n+        tagIndex.computeIfAbsent(entry.getKey(), k -> new HashMap<>())\n+            .computeIfAbsent(entry.getValue(), v -> new HashSet<>()).add(leafMNode);\n       }\n+      return;\n+    }\n \n-      Pair<Map<String, String>, Map<String, String>> pair =\n-          tagLogFile.read(config.getTagAttributeTotalSize(), leafMNode.getOffset());\n+    Pair<Map<String, String>, Map<String, String>> pair =\n+        tagLogFile.read(config.getTagAttributeTotalSize(), leafMNode.getOffset());\n \n-      for (Entry<String, String> entry : tagsMap.entrySet()) {\n-        String key = entry.getKey();\n-        String value = entry.getValue();\n-        if (pair.left.containsKey(key)) {\n-          throw new MetadataException(\n-              String.format(\"TimeSeries [%s] already has the tag [%s].\", fullPath, key));\n-        }\n-        pair.left.put(key, value);\n+    for (Entry<String, String> entry : tagsMap.entrySet()) {\n+      String key = entry.getKey();\n+      String value = entry.getValue();\n+      if (pair.left.containsKey(key)) {\n+        throw new MetadataException(\n+            String.format(\"TimeSeries [%s] already has the tag [%s].\", fullPath, key));\n       }\n+      pair.left.put(key, value);\n+    }\n \n-      // persist the change to disk\n-      tagLogFile.write(pair.left, pair.right, leafMNode.getOffset());\n-\n-      // update tag inverted map\n-      tagsMap.forEach((key, value) -> tagIndex.computeIfAbsent(key, k -> new HashMap<>())\n-          .computeIfAbsent(value, v -> new HashSet<>()).add(leafMNode));\n+    // persist the change to disk\n+    tagLogFile.write(pair.left, pair.right, leafMNode.getOffset());\n \n-    } finally {\n-      lock.writeLock().unlock();\n-    }\n+    // update tag inverted map\n+    tagsMap.forEach((key, value) -> tagIndex.computeIfAbsent(key, k -> new HashMap<>())\n+        .computeIfAbsent(value, v -> new HashSet<>()).add(leafMNode));\n   }\n \n   /**\n    * drop tags or attributes of the timeseries\n    *\n-   * @param keySet tags key or attributes key\n+   * @param keySet   tags key or attributes key\n    * @param fullPath timeseries path\n    */\n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n   public void dropTagsOrAttributes(Set<String> keySet, PartialPath fullPath)\n       throws MetadataException, IOException {\n-    lock.writeLock().lock();\n-    try {\n-      MNode mNode = mtree.getNodeByPath(fullPath);\n-      if (!(mNode instanceof MeasurementMNode)) {\n-        throw new PathNotExistException(fullPath.getFullPath());\n-      }\n-      MeasurementMNode leafMNode = (MeasurementMNode) mNode;\n-      // no tag or attribute, just do nothing.\n-      if (leafMNode.getOffset() < 0) {\n-        return;\n-      }\n-      Pair<Map<String, String>, Map<String, String>> pair =\n-          tagLogFile.read(config.getTagAttributeTotalSize(), leafMNode.getOffset());\n+    MNode mNode = mtree.getNodeByPath(fullPath);\n+    if (!(mNode instanceof MeasurementMNode)) {\n+      throw new PathNotExistException(fullPath.getFullPath());\n+    }\n+    MeasurementMNode leafMNode = (MeasurementMNode) mNode;\n+    // no tag or attribute, just do nothing.\n+    if (leafMNode.getOffset() < 0) {\n+      return;\n+    }\n+    Pair<Map<String, String>, Map<String, String>> pair =\n+        tagLogFile.read(config.getTagAttributeTotalSize(), leafMNode.getOffset());\n \n-      Map<String, String> deleteTag = new HashMap<>();\n-      for (String key : keySet) {\n-        // check tag map\n-        // check attribute map\n-        if (pair.left.containsKey(key)) {\n-          deleteTag.put(key, pair.left.remove(key));\n-        } else {\n-          pair.right.remove(key);\n-        }\n+    Map<String, String> deleteTag = new HashMap<>();\n+    for (String key : keySet) {\n+      // check tag map\n+      // check attribute map\n+      if (pair.left.containsKey(key)) {\n+        deleteTag.put(key, pair.left.remove(key));\n+      } else {\n+        pair.right.remove(key);\n       }\n+    }\n \n-      // persist the change to disk\n-      tagLogFile.write(pair.left, pair.right, leafMNode.getOffset());\n+    // persist the change to disk\n+    tagLogFile.write(pair.left, pair.right, leafMNode.getOffset());\n \n-      for (Entry<String, String> entry : deleteTag.entrySet()) {\n-        String key = entry.getKey();\n-        String value = entry.getValue();\n-        // change the tag inverted index map\n-        if (tagIndex.containsKey(key) && tagIndex.get(key).containsKey(value)) {\n-          if (logger.isDebugEnabled()) {\n-            logger.debug(String.format(\n-                \"Drop: TimeSeries %s is removed from tag inverted index, \"\n-                    + TAG_FORMAT,\n-                leafMNode.getFullPath(), entry.getKey(), entry.getValue(), leafMNode.getOffset()));\n-          }\n+    for (Entry<String, String> entry : deleteTag.entrySet()) {\n+      String key = entry.getKey();\n+      String value = entry.getValue();\n+      // change the tag inverted index map\n+      if (tagIndex.containsKey(key) && tagIndex.get(key).containsKey(value)) {\n+        if (logger.isDebugEnabled()) {\n+          logger.debug(String.format(\n+              \"Drop: TimeSeries %s is removed from tag inverted index, \"\n+                  + TAG_FORMAT,\n+              leafMNode.getFullPath(), entry.getKey(), entry.getValue(), leafMNode.getOffset()));\n+        }\n \n-          tagIndex.get(key).get(value).remove(leafMNode);\n-          if (tagIndex.get(key).get(value).isEmpty()) {\n-            tagIndex.get(key).remove(value);\n-            if (tagIndex.get(key).isEmpty()) {\n-              tagIndex.remove(key);\n-            }\n-          }\n-        } else {\n-          if (logger.isDebugEnabled()) {\n-            logger.debug(String.format(\n-                \"Drop: TimeSeries %s's tag info has been removed from tag inverted index \"\n-                    + BEFORE_DELETE_TAG_FORMAT,\n-                leafMNode.getFullPath(), key, value, leafMNode.getOffset(),\n-                tagIndex.containsKey(key)));\n+        tagIndex.get(key).get(value).remove(leafMNode);\n+        if (tagIndex.get(key).get(value).isEmpty()) {\n+          tagIndex.get(key).remove(value);\n+          if (tagIndex.get(key).isEmpty()) {\n+            tagIndex.remove(key);\n           }\n         }\n-\n+      } else {\n+        if (logger.isDebugEnabled()) {\n+          logger.debug(String.format(\n+              \"Drop: TimeSeries %s's tag info has been removed from tag inverted index \"\n+                  + \"before deleting it, tag key is %s, tag value is %s, tlog offset is %d, contains key %b\",\n+              leafMNode.getFullPath(), key, value, leafMNode.getOffset(),\n+              tagIndex.containsKey(key)));\n+        }\n       }\n-    } finally {\n-      lock.writeLock().unlock();\n+\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2MjMwOQ==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r500762309", "bodyText": "Suggested change", "author": "HTHou", "createdAt": "2020-10-07T06:19:41Z", "path": "server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java", "diffHunk": "@@ -26,23 +26,23 @@\n \r\n public class JvmSource implements Source {\r\n \r\n-  public String sourceName = \"jvm\";\r\n+  public static final String SOURCE_NAME = \"jvm\";\r\n   public MetricRegistry metricRegistry;\r\n \r\n   public JvmSource(MetricRegistry metricRegistry) {\r\n     this.metricRegistry = metricRegistry;\r\n   }\r\n \r\n   public void registerInfo() {\r\n-    metricRegistry.register(MetricRegistry.name(sourceName, \"gc\"), new GarbageCollectorMetricSet());\r\n-    metricRegistry.register(MetricRegistry.name(sourceName, \"memory\"), new MemoryUsageGaugeSet());\r\n-    metricRegistry.register(MetricRegistry.name(sourceName, \"buffer-pool\"),\r\n+    metricRegistry.register(MetricRegistry.name(SOURCE_NAME, \"gc\"), new GarbageCollectorMetricSet());\r\n+    metricRegistry.register(MetricRegistry.name(SOURCE_NAME, \"memory\"), new MemoryUsageGaugeSet());\r\n+    metricRegistry.register(MetricRegistry.name(SOURCE_NAME, \"buffer-pool\"),\r\n         new BufferPoolMetricSet(ManagementFactory.getPlatformMBeanServer()));\r\n   }\r\n \r\n   @Override\r\n   public String sourceName() {\r\n-    return this.sourceName;\r\n+    return this.SOURCE_NAME;\r\n   }\r\n-\r\n+  \r", "originalCommit": "1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5de34e876f949be13f2fbb0996f1756ddacf9d4f", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java b/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java\nindex 7b8c681fea..c6441024e8 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metrics/source/JvmSource.java\n\n@@ -44,5 +44,6 @@ public class JvmSource implements Source {\n   public String sourceName() {\n     return this.SOURCE_NAME;\n   }\n+ \n   \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2Mjk4NQ==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r500762985", "bodyText": "I don't think it's necessary.", "author": "HTHou", "createdAt": "2020-10-07T06:21:29Z", "path": "server/src/main/java/org/apache/iotdb/db/metrics/ui/MetricsPage.java", "diffHunk": "@@ -39,6 +39,7 @@\n   private static final Logger logger = LoggerFactory.getLogger(MetricsPage.class);\r\n   private MetricRegistry mr;\r\n   private final List<SqlArgument> sqlArguments = TSServiceImpl.getSqlArgumentList();\r\n+  private static final String HTML_TD_TAG = \"</td>\";\r", "originalCommit": "1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84e45703468ed1c65345aa643cc1a43ce2d841b1", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/metrics/ui/MetricsPage.java b/server/src/main/java/org/apache/iotdb/db/metrics/ui/MetricsPage.java\nindex a5171cba32..6a7d01436c 100644\n--- a/server/src/main/java/org/apache/iotdb/db/metrics/ui/MetricsPage.java\n+++ b/server/src/main/java/org/apache/iotdb/db/metrics/ui/MetricsPage.java\n\n@@ -39,7 +39,6 @@ public class MetricsPage {\n   private static final Logger logger = LoggerFactory.getLogger(MetricsPage.class);\n   private MetricRegistry mr;\n   private final List<SqlArgument> sqlArguments = TSServiceImpl.getSqlArgumentList();\n-  private static final String HTML_TD_TAG = \"</td>\";\n \n   public MetricsPage(MetricRegistry metricRegistry) {\n     this.mr = metricRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2NTExMA==", "url": "https://github.com/apache/iotdb/pull/1750#discussion_r500765110", "bodyText": "NEW_LINE_QUERY_ID looks weird. I think it's better to use \"\\n\" + QUERY_ID in code below.", "author": "HTHou", "createdAt": "2020-10-07T06:26:44Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -32,6 +32,9 @@\n public class TracingManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private static final String QUERY_ID = \"Query Id: \";\n+  private static final String NEW_LINE_QUERY_ID = \"\\nQuery Id: \";", "originalCommit": "1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84e45703468ed1c65345aa643cc1a43ce2d841b1", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java b/server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java\nindex f9a15ebec3..cd23d0b464 100644\n--- a/server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java\n+++ b/server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java\n\n@@ -33,7 +33,6 @@ public class TracingManager {\n \n   private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n   private static final String QUERY_ID = \"Query Id: \";\n-  private static final String NEW_LINE_QUERY_ID = \"\\nQuery Id: \";\n   private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n   private BufferedWriter writer;\n \n"}}, {"oid": "1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "url": "https://github.com/apache/iotdb/commit/1ab1874a56c4cdea7de2d8a3722145ff0946c29a", "message": "swap arguments so they are in correct order", "committedDate": "2020-09-29T07:59:58Z", "type": "forcePushed"}, {"oid": "4be808198add24e047649a367cb050e9cb52964b", "url": "https://github.com/apache/iotdb/commit/4be808198add24e047649a367cb050e9cb52964b", "message": "Merge remote-tracking branch 'upstream/master' into codesmell-blocker", "committedDate": "2020-10-10T14:11:25Z", "type": "commit"}, {"oid": "5de34e876f949be13f2fbb0996f1756ddacf9d4f", "url": "https://github.com/apache/iotdb/commit/5de34e876f949be13f2fbb0996f1756ddacf9d4f", "message": "revise code", "committedDate": "2020-10-11T03:13:08Z", "type": "commit"}, {"oid": "84e45703468ed1c65345aa643cc1a43ce2d841b1", "url": "https://github.com/apache/iotdb/commit/84e45703468ed1c65345aa643cc1a43ce2d841b1", "message": "revise code 02", "committedDate": "2020-10-11T03:55:42Z", "type": "commit"}, {"oid": "12bc44677a53aa0d5e0b19e59e4be18c5e2a2349", "url": "https://github.com/apache/iotdb/commit/12bc44677a53aa0d5e0b19e59e4be18c5e2a2349", "message": "revise code 03", "committedDate": "2020-10-12T03:58:53Z", "type": "commit"}, {"oid": "96fb4d666863379fec0011dc4dff277bee39160c", "url": "https://github.com/apache/iotdb/commit/96fb4d666863379fec0011dc4dff277bee39160c", "message": "fix sonarcloud codesmell issues", "committedDate": "2020-10-12T10:34:05Z", "type": "commit"}, {"oid": "12def8100748d14a4f316e2c7b7cd1ad78174144", "url": "https://github.com/apache/iotdb/commit/12def8100748d14a4f316e2c7b7cd1ad78174144", "message": "fix bug", "committedDate": "2020-10-13T01:38:06Z", "type": "commit"}, {"oid": "66ee5663996c363599b163db152983b7f58b91ad", "url": "https://github.com/apache/iotdb/commit/66ee5663996c363599b163db152983b7f58b91ad", "message": "Merge remote-tracking branch 'upstream/master' into codesmell-blocker", "committedDate": "2020-10-13T03:21:17Z", "type": "commit"}]}