{"pr_number": 1198, "pr_title": "[IOTDB-355] Start up checks for seed nodes", "pr_createdAt": "2020-05-12T09:58:39Z", "pr_url": "https://github.com/apache/iotdb/pull/1198", "timeline": [{"oid": "9d04f3abc5ab1df95d92288e3396ca0bc2334ab2", "url": "https://github.com/apache/iotdb/commit/9d04f3abc5ab1df95d92288e3396ca0bc2334ab2", "message": "start up check", "committedDate": "2020-05-12T02:07:50Z", "type": "commit"}, {"oid": "328322d1ece952e07c3cf1b2e1e6277c641b8841", "url": "https://github.com/apache/iotdb/commit/328322d1ece952e07c3cf1b2e1e6277c641b8841", "message": "Merge branch 'cluster_new' of https://github.com/Ring-k/incubator-iotdb into cluster_new", "committedDate": "2020-05-12T02:09:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NjY5OA==", "url": "https://github.com/apache/iotdb/pull/1198#discussion_r424146698", "bodyText": "The log levels should be \"error\" here.", "author": "jt2594838", "createdAt": "2020-05-13T03:02:59Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -319,31 +333,119 @@ private void initSubServers() throws TTransportException, StartupException {\n    */\n   private void addSeedNodes() {\n     List<String> seedUrls = config.getSeedNodeUrls();\n-    for (String seedUrl : seedUrls) {\n-      String[] split = seedUrl.split(\":\");\n-      if (split.length != 3) {\n-        logger.warn(\"Bad seed url: {}\", seedUrl);\n-        continue;\n+    boolean canEstablishCluster = false;\n+    long startTime = System.currentTimeMillis();\n+    while (!canEstablishCluster) {\n+      ExecutorService pool = new ScheduledThreadPoolExecutor(STARTUP_CHECK_THREAD_POOL_SIZE);\n+      AtomicInteger consistentNum = new AtomicInteger(1);\n+      AtomicInteger inconsistentNum = new AtomicInteger(0);\n+      for (String seedUrl : seedUrls) {\n+        String[] split = seedUrl.split(\":\");\n+        if (split.length != 3) {\n+          logger.warn(\"Bad seed url: {}\", seedUrl);\n+          continue;\n+        }\n+        String ip = split[0];\n+        try {\n+          int metaPort = Integer.parseInt(split[1]);\n+          int dataPort = Integer.parseInt(split[2]);\n+          if (!ip.equals(thisNode.ip) || metaPort != thisNode.metaPort) {\n+            // do not add the local node since it is added in `setThisNode()`\n+            Node seedNode = new Node();\n+            seedNode.setIp(ip);\n+            seedNode.setMetaPort(metaPort);\n+            seedNode.setDataPort(dataPort);\n+            if (!allNodes.contains(seedNode)) {\n+              allNodes.add(seedNode);\n+            }\n+            pool.submit(() -> {\n+              AsyncClient client = (AsyncClient) connectNode(seedNode);\n+              AtomicReference<CheckStatusResponse> response\n+                  = new AtomicReference<>(null);\n+              CheckStartUpStatusHandler handler = new CheckStartUpStatusHandler();\n+              if (client != null) {\n+                handler.setResponse(response);\n+                synchronized (response) {\n+                  try {\n+                    client.checkStatus(startUpStatus, handler);\n+                    response.wait(10 * 1000);\n+                  } catch (TException e) {\n+                    logger.warn(\"Error occurs when check status on node : {}\", seedUrl);\n+                  } catch (InterruptedException e) {\n+                    logger.warn(\"Current thread is interrupted.\");\n+                  }\n+                }\n+                if (response.get() != null) {\n+                  // check the response\n+                  boolean partitionIntervalEquals = response.get().partitionalIntervalEquals;\n+                  boolean hashSaltEquals = response.get().hashSaltEquals;\n+                  boolean replicationNumEquals = response.get().replicationNumEquals;\n+                  if (!partitionIntervalEquals) {\n+                    logger.info(\n+                        \"Local partition interval conflicts with the majority of seed nodes.\");\n+                  }\n+                  if (!hashSaltEquals) {\n+                    logger\n+                        .info(\"Local hash salt conflicts with the majority of seed nodes.\");\n+                  }\n+                  if (!replicationNumEquals) {\n+                    logger.info(\n+                        \"Local replication number conflicts with the majority of seed nodes.\");\n+                  }\n+                  if (partitionIntervalEquals && hashSaltEquals && replicationNumEquals) {\n+                    consistentNum.set(consistentNum.get() + 1);\n+                  } else {\n+                    inconsistentNum.set(inconsistentNum.get() + 1);\n+                  }\n+                } else {\n+                  logger.warn(\n+                      \"Start up exception. Cannot connect to node {}. Try again in next turn.\",\n+                      seedNode);\n+                }\n+              }\n+            });\n+          }\n+        } catch (NumberFormatException e) {\n+          logger.warn(\"Bad seed url: {}\", seedUrl);\n+        }\n       }\n-      String ip = split[0];\n+      pool.shutdown();\n       try {\n-        int metaPort = Integer.parseInt(split[1]);\n-        int dataPort = Integer.parseInt(split[2]);\n-        if (!ip.equals(thisNode.ip) || metaPort != thisNode.metaPort) {\n-          // do not add the local node since it is added in `setThisNode()`\n-          Node seedNode = new Node();\n-          seedNode.setIp(ip);\n-          seedNode.setMetaPort(metaPort);\n-          seedNode.setDataPort(dataPort);\n-          if (!allNodes.contains(seedNode)) {\n-            // avoid duplications\n-            allNodes.add(seedNode);\n-          }\n+        pool.awaitTermination(WAIT_START_UP_CHECK_TIME, WAIT_START_UP_CHECK_TIME_UNIT);\n+      } catch (InterruptedException e) {\n+        logger.error(\"Unexpected interruption when waiting for start up checks\", e);\n+        continue;\n+      }\n+      canEstablishCluster = analyseStartUpCheckResult(consistentNum.get(), inconsistentNum.get(),\n+          seedUrls.size(), System.currentTimeMillis() - startTime);\n+    }\n+  }\n+\n+  private boolean analyseStartUpCheckResult(int consistentNum, int inconsistentNum,\n+      int totalSeedNum, long timeElapsed) {\n+    if (consistentNum >= (totalSeedNum + 1) / 2) {\n+      // break the loop and establsih the cluster\n+      return true;\n+    } else if (inconsistentNum >= (totalSeedNum + 1) / 2) {\n+      // this node is not consistent with the cluster, shut down\n+      logger.debug(\"The configuration of this node is inconsistent with the cluster.\");", "originalCommit": "328322d1ece952e07c3cf1b2e1e6277c641b8841", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1dace1ca796396831ff2bc10c24e81e956c95fd8", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\nindex 91173b61c3..689ce5e80f 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n\n@@ -428,7 +428,7 @@ public class MetaGroupMember extends RaftMember implements TSMetaService.AsyncIf\n       return true;\n     } else if (inconsistentNum >= (totalSeedNum + 1) / 2) {\n       // this node is not consistent with the cluster, shut down\n-      logger.debug(\"The configuration of this node is inconsistent with the cluster.\");\n+      logger.error(\"The configuration of this node is inconsistent with the cluster.\");\n       System.exit(0);\n     } else {\n       // If reach the start up time threshold, shut down.\n"}}, {"oid": "1dace1ca796396831ff2bc10c24e81e956c95fd8", "url": "https://github.com/apache/iotdb/commit/1dace1ca796396831ff2bc10c24e81e956c95fd8", "message": "debug -> error", "committedDate": "2020-05-13T06:22:03Z", "type": "commit"}, {"oid": "078704e7c54aee668040bb1e4ec49a89088cfa2a", "url": "https://github.com/apache/iotdb/commit/078704e7c54aee668040bb1e4ec49a89088cfa2a", "message": "check seed node list", "committedDate": "2020-05-13T11:38:29Z", "type": "commit"}, {"oid": "5db3755706b22484c4f4439d1f0616727c0f542e", "url": "https://github.com/apache/iotdb/commit/5db3755706b22484c4f4439d1f0616727c0f542e", "message": "modify test", "committedDate": "2020-05-13T14:15:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyNTc0Nw==", "url": "https://github.com/apache/iotdb/pull/1198#discussion_r424825747", "bodyText": "Is it necessary to copy them to an array rather than just use List.sort()?", "author": "jt2594838", "createdAt": "2020-05-14T01:48:45Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -905,6 +936,63 @@ private boolean processAddNodeLocally(Node node, StartUpStatus startUpStatus,\n     return false;\n   }\n \n+  private boolean checkSeedNodes(boolean isClusterEstablished, List<Node> localSeedNodes,\n+      List<Node> remoteSeedNodes) {\n+    return isClusterEstablished ? seedNodesContains(localSeedNodes, remoteSeedNodes)\n+        : seedNodesEquals(localSeedNodes, remoteSeedNodes);\n+  }\n+\n+  private boolean seedNodesEquals(List<Node> thisNodeList, List<Node> thatNodeList) {\n+    Node[] thisNodeArray = thisNodeList.toArray(new Node[0]);\n+    Node[] thatNodeArray = thatNodeList.toArray(new Node[0]);\n+    Arrays.sort(thisNodeArray, this::compareSeedNode);\n+    Arrays.sort(thatNodeArray, this::compareSeedNode);", "originalCommit": "078704e7c54aee668040bb1e4ec49a89088cfa2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e87e3426cc43af90f2ab49f1c3e8117f949bae26", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\nindex c83a1cd45a..c158d176e1 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n\n@@ -961,13 +961,14 @@ public class MetaGroupMember extends RaftMember implements TSMetaService.AsyncIf\n \n   private boolean seedNodesContains(List<Node> seedNodeList, List<Node> subSeedNodeList) {\n     // Because identifier is not compared here, List.contains() is not suitable\n-    Node[] nodeArray = seedNodeList.toArray(new Node[0]);\n-    Node[] subNodeArray = subSeedNodeList.toArray(new Node[0]);\n-    Arrays.sort(nodeArray, this::compareSeedNode);\n-    Arrays.sort(subNodeArray, this::compareSeedNode);\n+    if (subSeedNodeList == null) {\n+      return false;\n+    }\n+    seedNodeList.sort(this::compareSeedNode);\n+    subSeedNodeList.sort(this::compareSeedNode);\n     int i = 0, j = 0;\n-    while (i < nodeArray.length && j < subNodeArray.length) {\n-      int compareResult = compareSeedNode(nodeArray[i], subNodeArray[j]);\n+    while (i < seedNodeList.size() && j < subSeedNodeList.size()) {\n+      int compareResult = compareSeedNode(seedNodeList.get(i), subSeedNodeList.get(j));\n       if (compareResult > 0) {\n         return false;\n       } else if (compareResult < 0) {\n"}}, {"oid": "e87e3426cc43af90f2ab49f1c3e8117f949bae26", "url": "https://github.com/apache/iotdb/commit/e87e3426cc43af90f2ab49f1c3e8117f949bae26", "message": "list sort", "committedDate": "2020-05-14T02:44:52Z", "type": "commit"}]}