{"pr_number": 2271, "pr_title": "add auth test UT", "pr_createdAt": "2020-12-15T10:18:43Z", "pr_url": "https://github.com/apache/iotdb/pull/2271", "timeline": [{"oid": "c1ce1230c808852746f8b6d6d7a8297a7cf81080", "url": "https://github.com/apache/iotdb/commit/c1ce1230c808852746f8b6d6d7a8297a7cf81080", "message": "add test.", "committedDate": "2020-12-15T10:17:25Z", "type": "commit"}, {"oid": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "url": "https://github.com/apache/iotdb/commit/a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "message": "remove a test in IoTDBSessionSimpleIT", "committedDate": "2020-12-16T01:34:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxOTU1NA==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544219554", "bodyText": "Add javadoc to explain what the test is about, and try not to name a test as just test()", "author": "Alima777", "createdAt": "2020-12-16T11:23:07Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n+import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.User;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthorityCheckerTest {\n+\n+  IAuthorizer authorizer;\n+  User user;\n+  String nodeName = \"root.laptop.d1\";\n+  String roleName = \"role\";\n+\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.envSetUp();\n+    authorizer = BasicAuthorizer.getInstance();\n+    user = new User(\"user\", \"password\");\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws AuthException, IllegalPathException {", "originalCommit": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0733bc5284254acc45293ebcbd2a75ee6b34641", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java b/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java\nindex 70177121f..cab663b8e 100644\n--- a/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java\n\n@@ -25,6 +25,7 @@ import java.util.Set;\n import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.PrivilegeType;\n import org.apache.iotdb.db.auth.entity.User;\n import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n import org.apache.iotdb.db.metadata.PartialPath;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MDU0Ng==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544240546", "bodyText": "What's this for? You sure about the construct method?", "author": "Alima777", "createdAt": "2020-12-16T11:58:01Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n+import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.User;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthorityCheckerTest {\n+\n+  IAuthorizer authorizer;\n+  User user;\n+  String nodeName = \"root.laptop.d1\";\n+  String roleName = \"role\";\n+\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.envSetUp();\n+    authorizer = BasicAuthorizer.getInstance();\n+    user = new User(\"user\", \"password\");\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws AuthException, IllegalPathException {\n+    authorizer.createUser(user.getName(), user.getPassword());\n+    authorizer.grantPrivilegeToUser(user.getName(), nodeName, 1);\n+    PathPrivilege pathPrivilege = new PathPrivilege();\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    pathPrivilege.setPrivileges(set);", "originalCommit": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg1MjUyMA==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544852520", "bodyText": "update", "author": "Genius-pig", "createdAt": "2020-12-17T06:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MDU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e0733bc5284254acc45293ebcbd2a75ee6b34641", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java b/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java\nindex 70177121f..cab663b8e 100644\n--- a/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java\n\n@@ -25,6 +25,7 @@ import java.util.Set;\n import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.PrivilegeType;\n import org.apache.iotdb.db.auth.entity.User;\n import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n import org.apache.iotdb.db.metadata.PartialPath;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0ODA2NA==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544248064", "bodyText": "It's not a good test. The user created has no privilege at all, so all assertions return false. The correct test method may be: 1. test the authority before granting, return false. 2. grant the privilege 3. test the authority again, return true.", "author": "Alima777", "createdAt": "2020-12-16T12:10:28Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n+import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.User;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.db.metadata.PartialPath;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthorityCheckerTest {\n+\n+  IAuthorizer authorizer;\n+  User user;\n+  String nodeName = \"root.laptop.d1\";\n+  String roleName = \"role\";\n+\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    EnvironmentUtils.envSetUp();\n+    authorizer = BasicAuthorizer.getInstance();\n+    user = new User(\"user\", \"password\");\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Test\n+  public void test() throws AuthException, IllegalPathException {\n+    authorizer.createUser(user.getName(), user.getPassword());\n+    authorizer.grantPrivilegeToUser(user.getName(), nodeName, 1);\n+    PathPrivilege pathPrivilege = new PathPrivilege();\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    pathPrivilege.setPrivileges(set);\n+\n+    Assert.assertTrue(\n+        AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+            OperatorType.INSERT, user.getName()));\n+\n+    Assert.assertTrue(AuthorityChecker.check(\"root\", null, null, null));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.CREATE_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.QUERY, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.UPDATE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DROP_INDEX, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.UNION, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), new ArrayList<>(),\n+        OperatorType.INSERT, user.getName()));\n+\n+    Assert.assertTrue(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.MODIFY_PASSWORD, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.GRANT_USER_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.GRANT_ROLE_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.REVOKE_USER_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.REVOKE_ROLE_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.REVOKE_ROLE_PRIVILEGE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.GRANT_USER_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DELETE_USER, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DELETE_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.LIST_ROLE, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.LIST_USER, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.SET_STORAGE_GROUP, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.CREATE_TIMESERIES, user.getName()));\n+\n+    Assert.assertFalse(AuthorityChecker.check(user.getName(), Collections.singletonList(new PartialPath(nodeName)),\n+        OperatorType.DELETE_TIMESERIES, user.getName()));\n+  }\n+}", "originalCommit": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg1MjU1OA==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544852558", "bodyText": "update", "author": "Genius-pig", "createdAt": "2020-12-17T06:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0ODA2NA=="}], "type": "inlineReview", "revised_code": {"commit": "e0733bc5284254acc45293ebcbd2a75ee6b34641", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java b/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java\nindex 70177121f..cab663b8e 100644\n--- a/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/auth/AuthorityCheckerTest.java\n\n@@ -25,6 +25,7 @@ import java.util.Set;\n import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n import org.apache.iotdb.db.auth.entity.PathPrivilege;\n+import org.apache.iotdb.db.auth.entity.PrivilegeType;\n import org.apache.iotdb.db.auth.entity.User;\n import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n import org.apache.iotdb.db.metadata.PartialPath;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MDg1MA==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544250850", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class LocalFileAuthorizerTest {\n          \n          \n            \n            public class BasicAuthorizerTest {", "author": "Alima777", "createdAt": "2020-12-16T12:15:00Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/LocalFileAuthorizerTest.java", "diffHunk": "@@ -16,29 +16,37 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.iotdb.db.auth;\n+package org.apache.iotdb.db.auth.authorizer;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n \n+import java.util.HashMap;\n import java.util.List;\n import java.util.Set;\n-import org.apache.iotdb.db.auth.authorizer.IAuthorizer;\n-import org.apache.iotdb.db.auth.authorizer.BasicAuthorizer;\n+import org.apache.iotdb.db.auth.AuthException;\n+import org.apache.iotdb.db.auth.entity.Role;\n import org.apache.iotdb.db.auth.entity.User;\n import org.apache.iotdb.db.conf.IoTDBConstant;\n import org.apache.iotdb.db.utils.EnvironmentUtils;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n public class LocalFileAuthorizerTest {", "originalCommit": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1NDk4Nw==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544254987", "bodyText": "I think BasicAuthorizerTest is better..", "author": "Alima777", "createdAt": "2020-12-16T12:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MDg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNzg4MA==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544837880", "bodyText": "In fact, BasicAuthorizer getInstance  return a LocalFileAuthorizer instance", "author": "Genius-pig", "createdAt": "2020-12-17T06:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MDg1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1OTU1Mg==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544259552", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Set<Integer> set = new HashSet<>();\n          \n          \n            \n                set.add(1);\n          \n          \n            \n                user.setPrivileges(\"root.ln\", set);\n          \n          \n            \n                user.setPrivileges(\"root.ln\", Collections.singleton(1));", "author": "Alima777", "createdAt": "2020-12-16T12:29:08Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/entity/UserTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth.entity;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class UserTest {\n+\n+  @Test\n+  public void testUser() {\n+    User user = new User(\"user\", \"password\");\n+    PathPrivilege pathPrivilege = new PathPrivilege(\"root.ln\");\n+    user.setPrivilegeList(Collections.singletonList(pathPrivilege));\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    user.setPrivileges(\"root.ln\", set);", "originalCommit": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22c6f81573f7260b1279b8ac477b7d067863f948", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/auth/entity/UserTest.java b/server/src/test/java/org/apache/iotdb/db/auth/entity/UserTest.java\nindex a43417e35..2c1b7e528 100644\n--- a/server/src/test/java/org/apache/iotdb/db/auth/entity/UserTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/auth/entity/UserTest.java\n\n@@ -31,9 +31,7 @@ public class UserTest {\n     User user = new User(\"user\", \"password\");\n     PathPrivilege pathPrivilege = new PathPrivilege(\"root.ln\");\n     user.setPrivilegeList(Collections.singletonList(pathPrivilege));\n-    Set<Integer> set = new HashSet<>();\n-    set.add(1);\n-    user.setPrivileges(\"root.ln\", set);\n+    user.setPrivileges(\"root.ln\", Collections.singleton(1));\n     Assert.assertEquals(\n         \"User{name='user', password='password', privilegeList=[root.ln : INSERT_TIMESERIES], roleList=[], useWaterMark=false, lastActiveTime=0}\",\n         user.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2MDQwNw==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544260407", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Set<Integer> set = new HashSet<>();\n          \n          \n            \n                set.add(1);\n          \n          \n            \n                role.setPrivileges(\"root.ln\", set);\n          \n          \n            \n                role.setPrivileges(\"root.ln\", Collections.singleton(1));", "author": "Alima777", "createdAt": "2020-12-16T12:30:29Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/entity/RoleTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth.entity;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class RoleTest {\n+\n+  @Test\n+  public void testRole() {\n+    Role role = new Role(\"role\");\n+    PathPrivilege pathPrivilege = new PathPrivilege(\"root.ln\");\n+    role.setPrivilegeList(Collections.singletonList(pathPrivilege));\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    role.setPrivileges(\"root.ln\", set);", "originalCommit": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f47df68c6c590293db86b6760563d9030e53855b", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/auth/entity/RoleTest.java b/server/src/test/java/org/apache/iotdb/db/auth/entity/RoleTest.java\nindex 058ff1e5f..8504d06c4 100644\n--- a/server/src/test/java/org/apache/iotdb/db/auth/entity/RoleTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/auth/entity/RoleTest.java\n\n@@ -31,9 +31,7 @@ public class RoleTest {\n     Role role = new Role(\"role\");\n     PathPrivilege pathPrivilege = new PathPrivilege(\"root.ln\");\n     role.setPrivilegeList(Collections.singletonList(pathPrivilege));\n-    Set<Integer> set = new HashSet<>();\n-    set.add(1);\n-    role.setPrivileges(\"root.ln\", set);\n+    role.setPrivileges(\"root.ln\", Collections.singleton(1));\n     Assert.assertEquals(\"Role{name='role', privilegeList=[root.ln : INSERT_TIMESERIES]}\",\n         role.toString());\n     Role role1 = new Role(\"role1\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2MTI0MQ==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544261241", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Set<Integer> set = new HashSet<>();\n          \n          \n            \n                set.add(1);\n          \n          \n            \n                pathPrivilege.setPrivileges(set);\n          \n          \n            \n                pathPrivilege.setPrivileges(\"root.ln\", Collections.singleton(1));", "author": "Alima777", "createdAt": "2020-12-16T12:31:55Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/entity/PathPrivilegeTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.auth.entity;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PathPrivilegeTest {\n+\n+  @Test\n+  public void testPathPrivilege() {\n+    PathPrivilege pathPrivilege = new PathPrivilege();\n+    pathPrivilege.setPath(\"root.ln\");\n+    Set<Integer> set = new HashSet<>();\n+    set.add(1);\n+    pathPrivilege.setPrivileges(set);", "originalCommit": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b726c80aea4023ed28ac63394d059e692f4b1799", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/auth/entity/PathPrivilegeTest.java b/server/src/test/java/org/apache/iotdb/db/auth/entity/PathPrivilegeTest.java\nindex 5ae49d878..ffac3eaed 100644\n--- a/server/src/test/java/org/apache/iotdb/db/auth/entity/PathPrivilegeTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/auth/entity/PathPrivilegeTest.java\n\n@@ -29,9 +29,7 @@ public class PathPrivilegeTest {\n   public void testPathPrivilege() {\n     PathPrivilege pathPrivilege = new PathPrivilege();\n     pathPrivilege.setPath(\"root.ln\");\n-    Set<Integer> set = new HashSet<>();\n-    set.add(1);\n-    pathPrivilege.setPrivileges(set);\n+    pathPrivilege.setPrivileges(\"root.ln\", Collections.singleton(1));\n     Assert.assertEquals(\"root.ln : INSERT_TIMESERIES\", pathPrivilege.toString());\n     PathPrivilege pathPrivilege1 = new PathPrivilege();\n     pathPrivilege1.setPath(\"root.sg\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2MjcwMQ==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544262701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void isAdmin_hasAccess()\n          \n          \n            \n                  throws AuthException, ParseException {\n          \n          \n            \n              public void isAdmin_hasAccess() throws AuthException, ParseException {", "author": "Alima777", "createdAt": "2020-12-16T12:34:13Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java", "diffHunk": "@@ -32,49 +35,63 @@\n \n public class OpenIdAuthorizerTest {\n \n-    private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";\n+  private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  @Test\n+  public void loginWithJWT() throws AuthException, ParseException, URISyntaxException {\n+    String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMTcxNzYsImlhdCI6MTU5MDMxNjg3NiwianRpIjoiY2MyNWQ3MDAtYjc5NC00OTA4LTg0OGUtOTRhNzYzNmM5YzQxIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6Ijg2YWRmNGIzLWE4ZTUtNDc1NC1iNWEwLTQ4OGI0OWY0M2VkMiIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6Ijk0ZmI5NGZjLTg3YTMtNDg4Ny04M2Q3LWE5MmQ1MzMzOTMzMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImNsaWVudEhvc3QiOiIxOTIuMTY4LjE2OS4yMSIsImNsaWVudElkIjoiaW90ZGIiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC1pb3RkYiIsImNsaWVudEFkZHJlc3MiOiIxOTIuMTY4LjE2OS4yMSJ9.GxQFltm1PrZzVL7rR6K-GpQINFLymjqAxxoDt_DGfQEMt61M6ebmx2oHiP_3G0HDSl7sbamajQbbRrfyTg--emBC2wfhdZ7v_7O0qWC60Yd8cWZ9qxwqwTFKYb8a0Z6_TeH9-vUmsy6kp2BfJZXq3mSy0My21VGUAXRmWTbghiM4RFoHKjAZVhsPHWelFmtLftYPdOGxv-7c9iUOVh_W-nOcCNRJpYY7BEjUYN24TsjvCEwWDQWD9E29LMYfA6LNeG0KdL9Jvqad4bc2FTJn9TaCnJMCiAJ7wEEiotqhXn70uEBWYxGXIVlm3vn3MDe3pTKA2TZy7U5xcrE7S8aGMg\";\n+\n+    OpenIdAuthorizer authorizer = new OpenIdAuthorizer(JSONObjectUtils.parse(OPEN_ID_PUBLIC_JWK));\n+    boolean login = authorizer.login(jwt, null);\n+\n+    assertTrue(login);\n+  }\n+\n+  @Test\n+  public void isAdmin_hasAccess()\n+      throws AuthException, ParseException {", "originalCommit": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a13afdf71bca5cc7787a4e96787aba46860534f", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java b/server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java\nindex f0bde2665..5349dfc5e 100644\n--- a/server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java\n\n@@ -49,8 +49,7 @@ public class OpenIdAuthorizerTest {\n   }\n \n   @Test\n-  public void isAdmin_hasAccess()\n-      throws AuthException, ParseException {\n+  public void isAdmin_hasAccess() throws AuthException, ParseException {\n     // IOTDB_ADMIN = true\n     String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMjM5MjgsImlhdCI6MTU5MDMyMzYyOCwianRpIjoiZGQ5ZDZhNmItZjgzOC00Mjk3LTg5YWUtMjdlZTgxNzVhMThiIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6ImJhMzJlNDcxLWM3NzItNGIzMy04ZGE2LTZmZThhY2RhMDA3MyIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6IjViZDRhNmM5LTBmYzItNGIxMy05Y2QxLTFhN2NjMzk3NjVhNyIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImlvdGRiX2FkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyIn0.LthDI93A3jqATc_8Fm0ismqQSN62TUknD6ara6w43eao2hY6KBoMXVY1c6SXSy8hhQeHLiWpopjJE6fsG9xbaV2Gs24SJYnP4DkHvhULlBJ_PUjFy18QxzeexwYK358a99eVHG_8yu-f2kN3mJslOSrlny8oZDxeSxUi9wYNIuQFeLPmGfSISVFn_5V8lpoUAHeENmf9h8mSyEcUHGqtZfVm5zEYIbPPSBqvNei2NvKAFle6qoaJ1l13dpbw39KkOtIUF8dJ7v8XY_xgO2GXCJCvZ5YGr-q4UnA9v_GM3h3vSa5dyCuG0HXBmAujxSxywzPl5RB_QCTiYcTm7MGKLg\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2MjkwNw==", "url": "https://github.com/apache/iotdb/pull/2271#discussion_r544262907", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void isAdmin_noAdminClaim()\n          \n          \n            \n                  throws AuthException, ParseException {\n          \n          \n            \n              public void isAdmin_noAdminClaim() throws AuthException, ParseException {", "author": "Alima777", "createdAt": "2020-12-16T12:34:32Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java", "diffHunk": "@@ -32,49 +35,63 @@\n \n public class OpenIdAuthorizerTest {\n \n-    private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";\n+  private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";\n+  private static final IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+  @Test\n+  public void loginWithJWT() throws AuthException, ParseException, URISyntaxException {\n+    String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMTcxNzYsImlhdCI6MTU5MDMxNjg3NiwianRpIjoiY2MyNWQ3MDAtYjc5NC00OTA4LTg0OGUtOTRhNzYzNmM5YzQxIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6Ijg2YWRmNGIzLWE4ZTUtNDc1NC1iNWEwLTQ4OGI0OWY0M2VkMiIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6Ijk0ZmI5NGZjLTg3YTMtNDg4Ny04M2Q3LWE5MmQ1MzMzOTMzMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImNsaWVudEhvc3QiOiIxOTIuMTY4LjE2OS4yMSIsImNsaWVudElkIjoiaW90ZGIiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC1pb3RkYiIsImNsaWVudEFkZHJlc3MiOiIxOTIuMTY4LjE2OS4yMSJ9.GxQFltm1PrZzVL7rR6K-GpQINFLymjqAxxoDt_DGfQEMt61M6ebmx2oHiP_3G0HDSl7sbamajQbbRrfyTg--emBC2wfhdZ7v_7O0qWC60Yd8cWZ9qxwqwTFKYb8a0Z6_TeH9-vUmsy6kp2BfJZXq3mSy0My21VGUAXRmWTbghiM4RFoHKjAZVhsPHWelFmtLftYPdOGxv-7c9iUOVh_W-nOcCNRJpYY7BEjUYN24TsjvCEwWDQWD9E29LMYfA6LNeG0KdL9Jvqad4bc2FTJn9TaCnJMCiAJ7wEEiotqhXn70uEBWYxGXIVlm3vn3MDe3pTKA2TZy7U5xcrE7S8aGMg\";\n+\n+    OpenIdAuthorizer authorizer = new OpenIdAuthorizer(JSONObjectUtils.parse(OPEN_ID_PUBLIC_JWK));\n+    boolean login = authorizer.login(jwt, null);\n+\n+    assertTrue(login);\n+  }\n+\n+  @Test\n+  public void isAdmin_hasAccess()\n+      throws AuthException, ParseException {\n+    // IOTDB_ADMIN = true\n+    String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMjM5MjgsImlhdCI6MTU5MDMyMzYyOCwianRpIjoiZGQ5ZDZhNmItZjgzOC00Mjk3LTg5YWUtMjdlZTgxNzVhMThiIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6ImJhMzJlNDcxLWM3NzItNGIzMy04ZGE2LTZmZThhY2RhMDA3MyIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6IjViZDRhNmM5LTBmYzItNGIxMy05Y2QxLTFhN2NjMzk3NjVhNyIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImlvdGRiX2FkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyIn0.LthDI93A3jqATc_8Fm0ismqQSN62TUknD6ara6w43eao2hY6KBoMXVY1c6SXSy8hhQeHLiWpopjJE6fsG9xbaV2Gs24SJYnP4DkHvhULlBJ_PUjFy18QxzeexwYK358a99eVHG_8yu-f2kN3mJslOSrlny8oZDxeSxUi9wYNIuQFeLPmGfSISVFn_5V8lpoUAHeENmf9h8mSyEcUHGqtZfVm5zEYIbPPSBqvNei2NvKAFle6qoaJ1l13dpbw39KkOtIUF8dJ7v8XY_xgO2GXCJCvZ5YGr-q4UnA9v_GM3h3vSa5dyCuG0HXBmAujxSxywzPl5RB_QCTiYcTm7MGKLg\";\n+\n+    OpenIdAuthorizer authorizer = new OpenIdAuthorizer(JSONObjectUtils.parse(OPEN_ID_PUBLIC_JWK));\n+    boolean admin = authorizer.isAdmin(jwt);\n+\n+    assertTrue(admin);\n+  }\n+\n+  @Test\n+  public void isAdmin_noAdminClaim()\n+      throws AuthException, ParseException {", "originalCommit": "a2ba1f5e2a9717bf1427cfcea9c66d93f32c459d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a13afdf71bca5cc7787a4e96787aba46860534f", "chunk": "diff --git a/server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java b/server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java\nindex f0bde2665..5349dfc5e 100644\n--- a/server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java\n+++ b/server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java\n\n@@ -49,8 +49,7 @@ public class OpenIdAuthorizerTest {\n   }\n \n   @Test\n-  public void isAdmin_hasAccess()\n-      throws AuthException, ParseException {\n+  public void isAdmin_hasAccess() throws AuthException, ParseException {\n     // IOTDB_ADMIN = true\n     String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMjM5MjgsImlhdCI6MTU5MDMyMzYyOCwianRpIjoiZGQ5ZDZhNmItZjgzOC00Mjk3LTg5YWUtMjdlZTgxNzVhMThiIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6ImJhMzJlNDcxLWM3NzItNGIzMy04ZGE2LTZmZThhY2RhMDA3MyIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6IjViZDRhNmM5LTBmYzItNGIxMy05Y2QxLTFhN2NjMzk3NjVhNyIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImlvdGRiX2FkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ1c2VyIn0.LthDI93A3jqATc_8Fm0ismqQSN62TUknD6ara6w43eao2hY6KBoMXVY1c6SXSy8hhQeHLiWpopjJE6fsG9xbaV2Gs24SJYnP4DkHvhULlBJ_PUjFy18QxzeexwYK358a99eVHG_8yu-f2kN3mJslOSrlny8oZDxeSxUi9wYNIuQFeLPmGfSISVFn_5V8lpoUAHeENmf9h8mSyEcUHGqtZfVm5zEYIbPPSBqvNei2NvKAFle6qoaJ1l13dpbw39KkOtIUF8dJ7v8XY_xgO2GXCJCvZ5YGr-q4UnA9v_GM3h3vSa5dyCuG0HXBmAujxSxywzPl5RB_QCTiYcTm7MGKLg\";\n \n"}}, {"oid": "5a13afdf71bca5cc7787a4e96787aba46860534f", "url": "https://github.com/apache/iotdb/commit/5a13afdf71bca5cc7787a4e96787aba46860534f", "message": "Update server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java\n\nCo-authored-by: Xiangwei Wei <34242296+Alima777@users.noreply.github.com>", "committedDate": "2020-12-17T05:51:22Z", "type": "commit"}, {"oid": "f47df68c6c590293db86b6760563d9030e53855b", "url": "https://github.com/apache/iotdb/commit/f47df68c6c590293db86b6760563d9030e53855b", "message": "Update server/src/test/java/org/apache/iotdb/db/auth/entity/RoleTest.java\n\nCo-authored-by: Xiangwei Wei <34242296+Alima777@users.noreply.github.com>", "committedDate": "2020-12-17T05:51:40Z", "type": "commit"}, {"oid": "8f1f9d8d14016c7294d66535b866c9a6f1de9383", "url": "https://github.com/apache/iotdb/commit/8f1f9d8d14016c7294d66535b866c9a6f1de9383", "message": "Update server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java\n\nCo-authored-by: Xiangwei Wei <34242296+Alima777@users.noreply.github.com>", "committedDate": "2020-12-17T05:51:54Z", "type": "commit"}, {"oid": "22c6f81573f7260b1279b8ac477b7d067863f948", "url": "https://github.com/apache/iotdb/commit/22c6f81573f7260b1279b8ac477b7d067863f948", "message": "Update server/src/test/java/org/apache/iotdb/db/auth/entity/UserTest.java\n\nCo-authored-by: Xiangwei Wei <34242296+Alima777@users.noreply.github.com>", "committedDate": "2020-12-17T05:52:24Z", "type": "commit"}, {"oid": "b726c80aea4023ed28ac63394d059e692f4b1799", "url": "https://github.com/apache/iotdb/commit/b726c80aea4023ed28ac63394d059e692f4b1799", "message": "Update server/src/test/java/org/apache/iotdb/db/auth/entity/PathPrivilegeTest.java\n\nCo-authored-by: Xiangwei Wei <34242296+Alima777@users.noreply.github.com>", "committedDate": "2020-12-17T05:52:39Z", "type": "commit"}, {"oid": "e0733bc5284254acc45293ebcbd2a75ee6b34641", "url": "https://github.com/apache/iotdb/commit/e0733bc5284254acc45293ebcbd2a75ee6b34641", "message": "update according to review", "committedDate": "2020-12-17T06:46:27Z", "type": "commit"}, {"oid": "6d7388d9c12f9f5e4b8ac82afe75a951fa97eeb9", "url": "https://github.com/apache/iotdb/commit/6d7388d9c12f9f5e4b8ac82afe75a951fa97eeb9", "message": "Merge branch 'master' into refactor_auth_test", "committedDate": "2020-12-17T07:31:37Z", "type": "commit"}, {"oid": "66854a0f16929fb13a3a6d67b0c8c64d6d24a805", "url": "https://github.com/apache/iotdb/commit/66854a0f16929fb13a3a6d67b0c8c64d6d24a805", "message": "Update BrokerAuthenticatorTest.java", "committedDate": "2020-12-17T08:04:13Z", "type": "commit"}, {"oid": "04236c2d4efca32942318a68def8b461f020b216", "url": "https://github.com/apache/iotdb/commit/04236c2d4efca32942318a68def8b461f020b216", "message": "Merge branch 'master' into refactor_auth_test", "committedDate": "2020-12-18T05:05:12Z", "type": "commit"}]}