{"pr_number": 1499, "pr_title": "[Distrubuted] Fix startup checkstatus and optimize some related logic", "pr_createdAt": "2020-07-15T09:54:16Z", "pr_url": "https://github.com/apache/iotdb/pull/1499", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxNzQzNw==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455017437", "bodyText": "can those code combine with the generateNode method in MetaGroupMember?", "author": "neuyilan", "createdAt": "2020-07-15T12:36:18Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/ClusterMain.java", "diffHunk": "@@ -75,36 +79,70 @@ public static void main(String[] args) {\n     IoTDBDescriptor.getInstance().getConfig().setAutoCreateSchemaEnabled(false);\n     logger.info(\"Running mode {}\", mode);\n     try {\n-\n       if (MODE_START.equals(mode)) {\n         metaServer = new MetaClusterServer();\n-        ClusterConfig config = ClusterDescriptor.getInstance().getConfig();\n-        // check the initial cluster size and refuse to start when the size < quorum\n-        int quorum = config.getReplicationNum() / 2 + 1;\n-        if (config.getSeedNodeUrls().size() < quorum) {\n-          String message = String.format(\"Seed number less than quorum, seed number: %s, quorum: \"\n-                  + \"%s.\",\n-              config.getSeedNodeUrls().size(), quorum);\n-          throw new StartupException(metaServer.getMember().getName(), message);\n-        }\n+        startServerCheck();\n         metaServer.start();\n         metaServer.buildCluster();\n       } else if (MODE_ADD.equals(mode)) {\n         metaServer = new MetaClusterServer();\n         metaServer.start();\n         if (!metaServer.joinCluster()) {\n           metaServer.stop();\n+          logger.error(\"Fail to join cluster\");\n         }\n       } else if (MODE_REMOVE.equals(mode)) {\n         doRemoveNode(args);\n       } else {\n         logger.error(\"Unrecognized mode {}\", mode);\n       }\n-    } catch (IOException | TTransportException | StartupException | QueryProcessException e) {\n+    } catch (IOException | TTransportException | StartupException | QueryProcessException |\n+        StartUpCheckFailureException | ConfigInconsistentException e) {\n+      metaServer.stop();\n       logger.error(\"Fail to start meta server\", e);\n     }\n   }\n \n+  private static void startServerCheck() throws StartupException {\n+    ClusterConfig config = ClusterDescriptor.getInstance().getConfig();\n+    // check the initial replicateNum and refuse to start when the replicateNum <= 0\n+    if (config.getReplicationNum() <= 0) {\n+      String message = String.format(\"ReplicateNum should be greater than 0 instead of %d.\",\n+          config.getReplicationNum());\n+      throw new StartupException(metaServer.getMember().getName(), message);\n+    }\n+    // check the initial cluster size and refuse to start when the size < quorum\n+    int quorum = config.getReplicationNum() / 2 + 1;\n+    if (config.getSeedNodeUrls().size() < quorum) {\n+      String message = String.format(\"Seed number less than quorum, seed number: %s, quorum: \"\n+              + \"%s.\",\n+          config.getSeedNodeUrls().size(), quorum);\n+      throw new StartupException(metaServer.getMember().getName(), message);\n+    }\n+    Set<Node> seedNodes = new HashSet<>();\n+    for (String url : config.getSeedNodeUrls()) {\n+      String[] splits = url.split(\":\");\n+      Node node = new Node();\n+      node.setIp(splits[0]).setMetaPort(Integer.parseInt(splits[1]))", "originalCommit": "36c7096901873c51df7dc2d584b7cef6dd052655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MTU2MQ==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455091561", "bodyText": "YES~I will change here,but the generation of localNode has no need to use this function.", "author": "LebronAl", "createdAt": "2020-07-15T14:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxNzQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "1b78b54e821a1de306ba0f871e20fea523f474aa", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/ClusterMain.java b/cluster/src/main/java/org/apache/iotdb/cluster/ClusterMain.java\nindex f7c03b8cc2..8972ea3194 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/ClusterMain.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/ClusterMain.java\n\n@@ -121,10 +122,7 @@ public class ClusterMain {\n     }\n     Set<Node> seedNodes = new HashSet<>();\n     for (String url : config.getSeedNodeUrls()) {\n-      String[] splits = url.split(\":\");\n-      Node node = new Node();\n-      node.setIp(splits[0]).setMetaPort(Integer.parseInt(splits[1]))\n-          .setDataPort(Integer.parseInt(splits[2]));\n+      Node node = MetaGroupMember.generateNode(url);\n       if (seedNodes.contains(node)) {\n         String message = String.format(\n             \"SeedNodes must not repeat each other. SeedNodes: %s\", config.getSeedNodeUrls());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDgyNQ==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455020825", "bodyText": "START_UP_TIME_THRESHOLD -> START_UP_TIME_THRESHOLD_SEC ? its better to specify timeunit at the end of the variable.", "author": "neuyilan", "createdAt": "2020-07-15T12:42:18Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java", "diffHunk": "@@ -23,71 +23,59 @@\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n-import org.apache.iotdb.cluster.config.ClusterConstant;\n-import org.apache.iotdb.cluster.config.ClusterDescriptor;\n import org.apache.iotdb.cluster.exception.ConfigInconsistentException;\n-import org.apache.iotdb.cluster.exception.StartUpCheckFailureException;\n import org.apache.iotdb.cluster.rpc.thrift.CheckStatusResponse;\n import org.apache.iotdb.cluster.rpc.thrift.Node;\n import org.apache.iotdb.cluster.rpc.thrift.StartUpStatus;\n-import org.apache.iotdb.cluster.server.member.MetaGroupMember;\n-import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ClusterUtils {\n+\n   private static final Logger logger = LoggerFactory.getLogger(ClusterUtils.class);\n \n   public static final int STARTUP_CHECK_THREAD_POOL_SIZE = 6;\n \n   public static final int WAIT_START_UP_CHECK_TIME = 5;\n \n-  public static final TimeUnit WAIT_START_UP_CHECK_TIME_UNIT = TimeUnit.MINUTES;\n+  public static final TimeUnit WAIT_START_UP_CHECK_TIME_UNIT = TimeUnit.SECONDS;\n \n-  public static final long START_UP_TIME_THRESHOLD = 1; // minute\n+  public static final long START_UP_TIME_THRESHOLD = 60 ; // second", "originalCommit": "36c7096901873c51df7dc2d584b7cef6dd052655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3NjQ2OQ==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455076469", "bodyText": "Sure~I'll keep that in mind.", "author": "LebronAl", "createdAt": "2020-07-15T14:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b78b54e821a1de306ba0f871e20fea523f474aa", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java b/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java\nindex 4bb80022b7..f0de7e5e7d 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java\n\n@@ -21,7 +21,6 @@ package org.apache.iotdb.cluster.utils;\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.iotdb.cluster.exception.ConfigInconsistentException;\n import org.apache.iotdb.cluster.rpc.thrift.CheckStatusResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDk3MA==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455020970", "bodyText": "the same as above", "author": "neuyilan", "createdAt": "2020-07-15T12:42:33Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java", "diffHunk": "@@ -23,71 +23,59 @@\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n-import org.apache.iotdb.cluster.config.ClusterConstant;\n-import org.apache.iotdb.cluster.config.ClusterDescriptor;\n import org.apache.iotdb.cluster.exception.ConfigInconsistentException;\n-import org.apache.iotdb.cluster.exception.StartUpCheckFailureException;\n import org.apache.iotdb.cluster.rpc.thrift.CheckStatusResponse;\n import org.apache.iotdb.cluster.rpc.thrift.Node;\n import org.apache.iotdb.cluster.rpc.thrift.StartUpStatus;\n-import org.apache.iotdb.cluster.server.member.MetaGroupMember;\n-import org.apache.iotdb.db.conf.IoTDBDescriptor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ClusterUtils {\n+\n   private static final Logger logger = LoggerFactory.getLogger(ClusterUtils.class);\n \n   public static final int STARTUP_CHECK_THREAD_POOL_SIZE = 6;\n \n   public static final int WAIT_START_UP_CHECK_TIME = 5;\n \n-  public static final TimeUnit WAIT_START_UP_CHECK_TIME_UNIT = TimeUnit.MINUTES;\n+  public static final TimeUnit WAIT_START_UP_CHECK_TIME_UNIT = TimeUnit.SECONDS;\n \n-  public static final long START_UP_TIME_THRESHOLD = 1; // minute\n+  public static final long START_UP_TIME_THRESHOLD = 60 ; // second\n \n-  public static final long START_UP_CHECK_TIME_INTERVAL = 5; // second\n+  public static final long START_UP_CHECK_TIME_INTERVAL = 3; // second", "originalCommit": "36c7096901873c51df7dc2d584b7cef6dd052655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3NjU0NA==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455076544", "bodyText": "sure", "author": "LebronAl", "createdAt": "2020-07-15T14:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "1b78b54e821a1de306ba0f871e20fea523f474aa", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java b/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java\nindex 4bb80022b7..f0de7e5e7d 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/utils/ClusterUtils.java\n\n@@ -21,7 +21,6 @@ package org.apache.iotdb.cluster.utils;\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.iotdb.cluster.exception.ConfigInconsistentException;\n import org.apache.iotdb.cluster.rpc.thrift.CheckStatusResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNTk1Nw==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455025957", "bodyText": "its better not use magic values.", "author": "neuyilan", "createdAt": "2020-07-15T12:50:34Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -830,35 +895,48 @@ private boolean checkNodeConfig(StartUpStatus remoteStartUpStatus, AddNodeRespon\n    * Check if the seed nodes are consistent with other nodes. Only used when establishing the\n    * initial cluster.\n    */\n-  private void checkSeedNodes() {\n+  private void checkSeedNodesStatus()\n+      throws ConfigInconsistentException, StartUpCheckFailureException {\n     boolean canEstablishCluster = false;\n     long startTime = System.currentTimeMillis();\n     AtomicInteger consistentNum = new AtomicInteger(1);\n     AtomicInteger inconsistentNum = new AtomicInteger(0);\n     while (!canEstablishCluster) {\n       consistentNum.set(1);\n       inconsistentNum.set(0);\n-      checkSeedNodesOnce(consistentNum, inconsistentNum);\n-\n+      checkSeedNodesStatusOnce(consistentNum, inconsistentNum);\n       canEstablishCluster = analyseStartUpCheckResult(consistentNum.get(), inconsistentNum.get(),\n-          getAllNodes().size(), System.currentTimeMillis() - startTime);\n+          getAllNodes().size());\n+      // If reach the start up time threshold, shut down.\n+      // Otherwise, wait for a while, start the loop again.\n+      if (System.currentTimeMillis() - startTime\n+          > ClusterUtils.START_UP_TIME_THRESHOLD * 1000) {", "originalCommit": "36c7096901873c51df7dc2d584b7cef6dd052655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MTE4MA==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455081180", "bodyText": "OK~", "author": "LebronAl", "createdAt": "2020-07-15T14:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNTk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1b78b54e821a1de306ba0f871e20fea523f474aa", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\nindex 4934108415..4e5a236738 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n\n@@ -909,12 +907,11 @@ public class MetaGroupMember extends RaftMember {\n           getAllNodes().size());\n       // If reach the start up time threshold, shut down.\n       // Otherwise, wait for a while, start the loop again.\n-      if (System.currentTimeMillis() - startTime\n-          > ClusterUtils.START_UP_TIME_THRESHOLD * 1000) {\n+      if (System.currentTimeMillis() - startTime > ClusterUtils.START_UP_TIME_THRESHOLD_MS) {\n         throw new StartUpCheckFailureException();\n       } else {\n         try {\n-          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL * 1000);\n+          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL_MS);\n         } catch (InterruptedException e) {\n           Thread.currentThread().interrupt();\n           logger.error(\"Unexpected interruption when waiting for next start up check\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNjExNw==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455026117", "bodyText": "magic value", "author": "neuyilan", "createdAt": "2020-07-15T12:50:49Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -830,35 +895,48 @@ private boolean checkNodeConfig(StartUpStatus remoteStartUpStatus, AddNodeRespon\n    * Check if the seed nodes are consistent with other nodes. Only used when establishing the\n    * initial cluster.\n    */\n-  private void checkSeedNodes() {\n+  private void checkSeedNodesStatus()\n+      throws ConfigInconsistentException, StartUpCheckFailureException {\n     boolean canEstablishCluster = false;\n     long startTime = System.currentTimeMillis();\n     AtomicInteger consistentNum = new AtomicInteger(1);\n     AtomicInteger inconsistentNum = new AtomicInteger(0);\n     while (!canEstablishCluster) {\n       consistentNum.set(1);\n       inconsistentNum.set(0);\n-      checkSeedNodesOnce(consistentNum, inconsistentNum);\n-\n+      checkSeedNodesStatusOnce(consistentNum, inconsistentNum);\n       canEstablishCluster = analyseStartUpCheckResult(consistentNum.get(), inconsistentNum.get(),\n-          getAllNodes().size(), System.currentTimeMillis() - startTime);\n+          getAllNodes().size());\n+      // If reach the start up time threshold, shut down.\n+      // Otherwise, wait for a while, start the loop again.\n+      if (System.currentTimeMillis() - startTime\n+          > ClusterUtils.START_UP_TIME_THRESHOLD * 1000) {\n+        throw new StartUpCheckFailureException();\n+      } else {\n+        try {\n+          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL * 1000);", "originalCommit": "36c7096901873c51df7dc2d584b7cef6dd052655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MTI0MQ==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455081241", "bodyText": "OK~", "author": "LebronAl", "createdAt": "2020-07-15T14:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNjExNw=="}], "type": "inlineReview", "revised_code": {"commit": "1b78b54e821a1de306ba0f871e20fea523f474aa", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\nindex 4934108415..4e5a236738 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n\n@@ -909,12 +907,11 @@ public class MetaGroupMember extends RaftMember {\n           getAllNodes().size());\n       // If reach the start up time threshold, shut down.\n       // Otherwise, wait for a while, start the loop again.\n-      if (System.currentTimeMillis() - startTime\n-          > ClusterUtils.START_UP_TIME_THRESHOLD * 1000) {\n+      if (System.currentTimeMillis() - startTime > ClusterUtils.START_UP_TIME_THRESHOLD_MS) {\n         throw new StartUpCheckFailureException();\n       } else {\n         try {\n-          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL * 1000);\n+          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL_MS);\n         } catch (InterruptedException e) {\n           Thread.currentThread().interrupt();\n           logger.error(\"Unexpected interruption when waiting for next start up check\", e);\n"}}, {"oid": "1b78b54e821a1de306ba0f871e20fea523f474aa", "url": "https://github.com/apache/iotdb/commit/1b78b54e821a1de306ba0f871e20fea523f474aa", "message": "fix review", "committedDate": "2020-07-15T14:31:23Z", "type": "forcePushed"}, {"oid": "89379e395053bedff0a82577753ab5cde60e2f5e", "url": "https://github.com/apache/iotdb/commit/89379e395053bedff0a82577753ab5cde60e2f5e", "message": "fix review", "committedDate": "2020-07-15T14:34:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MDQyNg==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455850426", "bodyText": "Will there be some problems if there are lots of nodes?", "author": "Ring-k", "createdAt": "2020-07-16T14:55:35Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java", "diffHunk": "@@ -898,35 +899,47 @@ private boolean checkNodeConfig(StartUpStatus remoteStartUpStatus, AddNodeRespon\n    * Check if the seed nodes are consistent with other nodes. Only used when establishing the\n    * initial cluster.\n    */\n-  private void checkSeedNodes() {\n+  private void checkSeedNodesStatus()\n+      throws ConfigInconsistentException, StartUpCheckFailureException {\n     boolean canEstablishCluster = false;\n     long startTime = System.currentTimeMillis();\n     AtomicInteger consistentNum = new AtomicInteger(1);\n     AtomicInteger inconsistentNum = new AtomicInteger(0);\n     while (!canEstablishCluster) {\n       consistentNum.set(1);\n       inconsistentNum.set(0);\n-      checkSeedNodesOnce(consistentNum, inconsistentNum);\n-\n+      checkSeedNodesStatusOnce(consistentNum, inconsistentNum);\n       canEstablishCluster = analyseStartUpCheckResult(consistentNum.get(), inconsistentNum.get(),\n-          getAllNodes().size(), System.currentTimeMillis() - startTime);\n+          getAllNodes().size());\n+      // If reach the start up time threshold, shut down.\n+      // Otherwise, wait for a while, start the loop again.\n+      if (System.currentTimeMillis() - startTime > ClusterUtils.START_UP_TIME_THRESHOLD_MS) {\n+        throw new StartUpCheckFailureException();\n+      } else {\n+        try {\n+          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL_MS);\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          logger.error(\"Unexpected interruption when waiting for next start up check\", e);\n+        }\n+      }\n     }\n   }\n \n-  private void checkSeedNodesOnce(AtomicInteger consistentNum, AtomicInteger inconsistentNum) {\n-    ExecutorService pool = new ScheduledThreadPoolExecutor(STARTUP_CHECK_THREAD_POOL_SIZE);\n+  private void checkSeedNodesStatusOnce(AtomicInteger consistentNum,\n+      AtomicInteger inconsistentNum) {\n+    ExecutorService pool = new ScheduledThreadPoolExecutor(getAllNodes().size());", "originalCommit": "c9de2e1973c9c21bb29db62e61a4e287d8f28793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4NDM2NQ==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455884365", "bodyText": "If user uses sh sbin/start-server.sh to start server, every node in seednodes should be checked, thus the minimum should be  'getAllNodes().size() - 1'.\nIf user uses sh sbin/add-server.sh to add server,then this funcation will never be called,the newly added server will try to check status by the node which will help it to join the cluster.\nSo it seems no problem will occur?", "author": "LebronAl", "createdAt": "2020-07-16T15:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMDU3Nw==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r455910577", "bodyText": "Yes. But I'm not sure if it is possible that there are tens of seed nodes. In that case, will the core pool size be too large for the machine?", "author": "Ring-k", "createdAt": "2020-07-16T16:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE2ODQwNQ==", "url": "https://github.com/apache/iotdb/pull/1499#discussion_r456168405", "bodyText": "I think it's OK to create dozens of threads to accelerate the start-up check as it will only be used during building cluster, so it will cause no effect to cluster's read or write performance. As for the larger cluster such as hundreds of nodes, I think we should change not only the current design of the meta group but also the current p2p mode of checkStatus.\nSo maybe it's almost OK for current design.", "author": "LebronAl", "createdAt": "2020-07-17T01:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MDQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "fab2bd5dd7eaec0ec0a2276874c79f5d51be7f4d", "chunk": "diff --git a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\nindex 85bf5f8124..f2198c1090 100644\n--- a/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n+++ b/cluster/src/main/java/org/apache/iotdb/cluster/server/member/MetaGroupMember.java\n\n@@ -913,11 +914,12 @@ public class MetaGroupMember extends RaftMember {\n           getAllNodes().size());\n       // If reach the start up time threshold, shut down.\n       // Otherwise, wait for a while, start the loop again.\n-      if (System.currentTimeMillis() - startTime > ClusterUtils.START_UP_TIME_THRESHOLD_MS) {\n+      if (System.currentTimeMillis() - startTime\n+          > ClusterUtils.START_UP_TIME_THRESHOLD * 20 * 1000) {\n         throw new StartUpCheckFailureException();\n       } else {\n         try {\n-          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL_MS);\n+          Thread.sleep(ClusterUtils.START_UP_CHECK_TIME_INTERVAL * 1000);\n         } catch (InterruptedException e) {\n           Thread.currentThread().interrupt();\n           logger.error(\"Unexpected interruption when waiting for next start up check\", e);\n"}}, {"oid": "fab2bd5dd7eaec0ec0a2276874c79f5d51be7f4d", "url": "https://github.com/apache/iotdb/commit/fab2bd5dd7eaec0ec0a2276874c79f5d51be7f4d", "message": "fix checkstatus", "committedDate": "2020-07-17T08:24:33Z", "type": "commit"}, {"oid": "eb5af5c0a2b9e6540819ae049a020e63d6ade165", "url": "https://github.com/apache/iotdb/commit/eb5af5c0a2b9e6540819ae049a020e63d6ade165", "message": "stop when encounter exception && add some check && adjust some time field", "committedDate": "2020-07-17T08:24:33Z", "type": "commit"}, {"oid": "b1756a4100fe476c5080be7dbbdf33a677db6164", "url": "https://github.com/apache/iotdb/commit/b1756a4100fe476c5080be7dbbdf33a677db6164", "message": "fix review", "committedDate": "2020-07-17T08:24:33Z", "type": "commit"}, {"oid": "ee8525563b23ec3a207ccb2d2904ac9a41a01e7e", "url": "https://github.com/apache/iotdb/commit/ee8525563b23ec3a207ccb2d2904ac9a41a01e7e", "message": "decrease threadPoolExecutor corePoolsize && fix addNode thread Init", "committedDate": "2020-07-17T08:24:33Z", "type": "commit"}, {"oid": "ee8525563b23ec3a207ccb2d2904ac9a41a01e7e", "url": "https://github.com/apache/iotdb/commit/ee8525563b23ec3a207ccb2d2904ac9a41a01e7e", "message": "decrease threadPoolExecutor corePoolsize && fix addNode thread Init", "committedDate": "2020-07-17T08:24:33Z", "type": "forcePushed"}, {"oid": "3a057f8d24b8c5b3c0c75a34e4b0f4a546df0e27", "url": "https://github.com/apache/iotdb/commit/3a057f8d24b8c5b3c0c75a34e4b0f4a546df0e27", "message": "Merge branch 'cluster_new' into cluster_new", "committedDate": "2020-07-20T03:32:57Z", "type": "commit"}]}