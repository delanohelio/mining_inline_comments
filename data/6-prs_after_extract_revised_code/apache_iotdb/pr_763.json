{"pr_number": 763, "pr_title": "[IOTDB-448]Add IN operation", "pr_createdAt": "2020-02-03T13:47:53Z", "pr_url": "https://github.com/apache/iotdb/pull/763", "timeline": [{"oid": "6b6bfe49a56e1c42d14ae3b521716cc742a3b158", "url": "https://github.com/apache/iotdb/commit/6b6bfe49a56e1c42d14ae3b521716cc742a3b158", "message": "add IN operation", "committedDate": "2020-02-03T13:27:18Z", "type": "commit"}, {"oid": "dd4840b4028f060b02afcb892309798a65ff1b31", "url": "https://github.com/apache/iotdb/commit/dd4840b4028f060b02afcb892309798a65ff1b31", "message": "merge master", "committedDate": "2020-02-03T13:43:07Z", "type": "commit"}, {"oid": "41423723916e207d4fa88bb1838c53df9d1d53a9", "url": "https://github.com/apache/iotdb/commit/41423723916e207d4fa88bb1838c53df9d1d53a9", "message": "fix sonar issues", "committedDate": "2020-02-04T01:51:14Z", "type": "commit"}, {"oid": "41423723916e207d4fa88bb1838c53df9d1d53a9", "url": "https://github.com/apache/iotdb/commit/41423723916e207d4fa88bb1838c53df9d1d53a9", "message": "fix sonar issues", "committedDate": "2020-02-04T01:51:14Z", "type": "forcePushed"}, {"oid": "09d4b01f5ad26f1292dcd40e56aa2a5c76d13f1f", "url": "https://github.com/apache/iotdb/commit/09d4b01f5ad26f1292dcd40e56aa2a5c76d13f1f", "message": "add ut test", "committedDate": "2020-02-04T02:18:58Z", "type": "commit"}, {"oid": "efec75b27e7df89cc01eb1a2a29c39cc03e30879", "url": "https://github.com/apache/iotdb/commit/efec75b27e7df89cc01eb1a2a29c39cc03e30879", "message": "modify anltr4", "committedDate": "2020-02-04T02:44:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1MTA3NA==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374451074", "bodyText": "is it necessary to store valueToString? we could generate valueToString in toString method", "author": "qiaojialin", "createdAt": "2020-02-04T02:51:56Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/operator/In.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.tsfile.read.filter.operator;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.filter.factory.FilterSerializeId;\n+import org.apache.iotdb.tsfile.read.filter.factory.FilterType;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n+\n+/**\n+ * in clause.\n+ *\n+ * @param <T> comparable data type\n+ */\n+public class In<T extends Comparable<T>> implements Filter {\n+\n+  private static final long serialVersionUID = 8572705136773595399L;\n+\n+  private Set<T> values;\n+\n+  private boolean not;\n+\n+  private String valueToString;\n+\n+  private FilterType filterType;\n+\n+  public In() {\n+  }\n+\n+  public In(Set<T> values, FilterType filterType, boolean not, String valueToString) {\n+    this.values = values;\n+    this.filterType = filterType;\n+    this.not = not;\n+    this.valueToString = valueToString;\n+  }\n+\n+  @Override\n+  public boolean satisfy(Statistics statistics) {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean satisfy(long time, Object value) {\n+    Object v = filterType == FilterType.TIME_FILTER ? time : value;\n+    return this.values.contains(v) != not;\n+  }\n+\n+  @Override\n+  public boolean satisfyStartEndTime(long startTime, long endTime) {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean containStartEndTime(long startTime, long endTime) {\n+    return true;\n+  }\n+\n+  @Override\n+  public Filter clone() {\n+    return new In(values, filterType, not, valueToString);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream outputStream) {\n+    try {\n+      outputStream.write(getSerializeId().ordinal());\n+      outputStream.write(filterType.ordinal());\n+      ReadWriteIOUtils.write(not, outputStream);\n+      ReadWriteIOUtils.write(valueToString, outputStream);", "originalCommit": "09d4b01f5ad26f1292dcd40e56aa2a5c76d13f1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NjQ0OA==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374456448", "bodyText": "I have removed it. fixed", "author": "fanhualta", "createdAt": "2020-02-04T03:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1MTA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "8d652f6cf396ee6cba03e380890666819b0bd772", "chunk": "diff --git a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/operator/In.java b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/operator/In.java\nindex e221c7783c..9f19c8bdfc 100644\n--- a/tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/operator/In.java\n+++ b/tsfile/src/main/java/org/apache/iotdb/tsfile/read/filter/operator/In.java\n\n@@ -21,7 +21,10 @@ package org.apache.iotdb.tsfile.read.filter.operator;\n import java.io.DataOutputStream;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n"}}, {"oid": "8d652f6cf396ee6cba03e380890666819b0bd772", "url": "https://github.com/apache/iotdb/commit/8d652f6cf396ee6cba03e380890666819b0bd772", "message": "remove valueToString", "committedDate": "2020-02-04T03:18:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTQ5Mg==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374455492", "bodyText": "return null isn't a good idea, It is really necessary to use try-catch and log in here?", "author": "Genius-pig", "createdAt": "2020-02-04T03:13:55Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.logical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.path.PathException;\n+import org.apache.iotdb.db.exception.query.LogicalOperatorException;\n+import org.apache.iotdb.db.exception.runtime.SQLParserException;\n+import org.apache.iotdb.db.qp.executor.IQueryProcessExecutor;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.expression.IUnaryExpression;\n+import org.apache.iotdb.tsfile.read.expression.impl.GlobalTimeExpression;\n+import org.apache.iotdb.tsfile.read.expression.impl.SingleSeriesExpression;\n+import org.apache.iotdb.tsfile.read.filter.TimeFilter;\n+import org.apache.iotdb.tsfile.read.filter.ValueFilter;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * operator 'in' 'not in'\n+ */\n+public class InOperator extends FunctionOperator {\n+\n+  private boolean not;\n+  protected Set<String> values;\n+  private String valueToString;\n+  private Logger logger = LoggerFactory.getLogger(InOperator.class);\n+\n+  /**\n+   * In Operator Constructor.\n+   *\n+   * @param tokenIntType token in Int Type\n+   * @param path path\n+   * @param values values\n+   * @throws LogicalOperatorException Logical Operator Exception\n+   */\n+  public InOperator(int tokenIntType, Path path, boolean not, Set<String> values) {\n+    super(tokenIntType);\n+    operatorType = Operator.OperatorType.IN;\n+    this.singlePath = path;\n+    this.values = values;\n+    this.not = not;\n+    List<String> valuesList = new ArrayList<>(values);\n+    Collections.sort(valuesList);\n+    this.valueToString = valuesList.toString();\n+    isLeaf = true;\n+    isSingle = true;\n+  }\n+\n+  public Set<String> getValues() {\n+    return values;\n+  }\n+\n+  @Override\n+  public void reverseFunc() {\n+    not = !not;\n+  }\n+\n+  @Override\n+  protected Pair<IUnaryExpression, String> transformToSingleQueryFilter(\n+      IQueryProcessExecutor executor) throws LogicalOperatorException, PathException {\n+    TSDataType type = executor.getSeriesType(singlePath);\n+    if (type == null) {\n+      throw new PathException(\n+          \"given seriesPath:{\" + singlePath.getFullPath() + \"} don't exist in metadata\");\n+    }\n+    IUnaryExpression ret;\n+\n+    switch (type) {\n+      case INT32:\n+        Set<Integer> integerValues = new HashSet<>();\n+        for (String val : values) {\n+          integerValues.add(Integer.valueOf(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, integerValues, not, valueToString);\n+        break;\n+      case INT64:\n+        Set<Long> longValues = new HashSet<>();\n+        for (String val : values) {\n+          longValues.add(Long.valueOf(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, longValues, not, valueToString);\n+        break;\n+      case BOOLEAN:\n+        Set<Boolean> booleanValues = new HashSet<>();\n+        for (String val : values) {\n+          booleanValues.add(Boolean.valueOf(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, booleanValues, not, valueToString);\n+        break;\n+      case FLOAT:\n+        Set<Float> floatValues = new HashSet<>();\n+        for (String val : values) {\n+          floatValues.add(Float.parseFloat(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, floatValues, not, valueToString);\n+        break;\n+      case DOUBLE:\n+        Set<Double> doubleValues = new HashSet<>();\n+        for (String val : values) {\n+          doubleValues.add(Double.parseDouble(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, doubleValues, not, valueToString);\n+        break;\n+      case TEXT:\n+        Set<Binary> binaryValues = new HashSet<>();\n+        for (String val : values) {\n+          binaryValues.add(\n+              (val.startsWith(\"'\") && val.endsWith(\"'\")) || (val.startsWith(\"\\\"\") && val\n+                  .endsWith(\"\\\"\")) ? new Binary(val.substring(1, val.length() - 1))\n+                  : new Binary(val));\n+        }\n+        ret = In.getUnaryExpression(singlePath, binaryValues, not, valueToString);\n+        break;\n+      default:\n+        throw new LogicalOperatorException(type.toString(), \"\");\n+    }\n+\n+    return new Pair<>(ret, singlePath.getFullPath());\n+  }\n+\n+  @Override\n+  public String showTree(int spaceNum) {\n+    StringContainer sc = new StringContainer();\n+    for (int i = 0; i < spaceNum; i++) {\n+      sc.addTail(\"  \");\n+    }\n+    sc.addTail(singlePath.toString(), this.tokenSymbol, not, valueToString, \", single\\n\");\n+    return sc.toString();\n+  }\n+\n+  @Override\n+  public InOperator clone() {\n+    InOperator ret;\n+    try {\n+      ret = new InOperator(this.tokenIntType, singlePath.clone(), not, new HashSet<>(values));", "originalCommit": "efec75b27e7df89cc01eb1a2a29c39cc03e30879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NDczNQ==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374484735", "bodyText": "fixed", "author": "fanhualta", "createdAt": "2020-02-04T05:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4Njc0Mw==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374486743", "bodyText": "can you remove loggerr in InOperator?", "author": "Genius-pig", "createdAt": "2020-02-04T05:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5MjA1Mw==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374492053", "bodyText": "fixed.", "author": "fanhualta", "createdAt": "2020-02-04T06:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8d652f6cf396ee6cba03e380890666819b0bd772", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java b/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java\nindex 69f8b17ec6..03934a4b36 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java\n\n@@ -50,7 +50,6 @@ public class InOperator extends FunctionOperator {\n \n   private boolean not;\n   protected Set<String> values;\n-  private String valueToString;\n   private Logger logger = LoggerFactory.getLogger(InOperator.class);\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTkwOQ==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374455909", "bodyText": "seems like you don't throw an exception here, the annotation is unnecessary.", "author": "Genius-pig", "createdAt": "2020-02-04T03:16:00Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.logical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.iotdb.db.exception.path.PathException;\n+import org.apache.iotdb.db.exception.query.LogicalOperatorException;\n+import org.apache.iotdb.db.exception.runtime.SQLParserException;\n+import org.apache.iotdb.db.qp.executor.IQueryProcessExecutor;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.expression.IUnaryExpression;\n+import org.apache.iotdb.tsfile.read.expression.impl.GlobalTimeExpression;\n+import org.apache.iotdb.tsfile.read.expression.impl.SingleSeriesExpression;\n+import org.apache.iotdb.tsfile.read.filter.TimeFilter;\n+import org.apache.iotdb.tsfile.read.filter.ValueFilter;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.apache.iotdb.tsfile.utils.StringContainer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * operator 'in' 'not in'\n+ */\n+public class InOperator extends FunctionOperator {\n+\n+  private boolean not;\n+  protected Set<String> values;\n+  private String valueToString;\n+  private Logger logger = LoggerFactory.getLogger(InOperator.class);\n+\n+  /**\n+   * In Operator Constructor.\n+   *\n+   * @param tokenIntType token in Int Type\n+   * @param path path\n+   * @param values values\n+   * @throws LogicalOperatorException Logical Operator Exception", "originalCommit": "efec75b27e7df89cc01eb1a2a29c39cc03e30879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NDc1OQ==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374484759", "bodyText": "fixed", "author": "fanhualta", "createdAt": "2020-02-04T05:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8d652f6cf396ee6cba03e380890666819b0bd772", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java b/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java\nindex 69f8b17ec6..03934a4b36 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java\n\n@@ -50,7 +50,6 @@ public class InOperator extends FunctionOperator {\n \n   private boolean not;\n   protected Set<String> values;\n-  private String valueToString;\n   private Logger logger = LoggerFactory.getLogger(InOperator.class);\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1OTAyOQ==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374459029", "bodyText": "If path = null, can we throw a self-defined exception instead of NullPointer exception?", "author": "Genius-pig", "createdAt": "2020-02-04T03:32:20Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -1167,31 +1176,52 @@ private FilterOperator parsePredicate(PredicateContext ctx) {\n       return parseOrExpression(ctx.orExpression());\n     } else {\n       Path path = null;", "originalCommit": "8d652f6cf396ee6cba03e380890666819b0bd772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NTQ4Mg==", "url": "https://github.com/apache/iotdb/pull/763#discussion_r374485482", "bodyText": "according to the anltr gramma (TIME | TIMESTAMP | suffixPath | prefixPath).  path == null is impossible.", "author": "fanhualta", "createdAt": "2020-02-04T05:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1OTAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "555e8a1ec5c98a2a49835067d8dda4b82d69aa36", "chunk": "diff --git a/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java b/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\nindex 46d98bbc74..583de10602 100644\n--- a/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n+++ b/server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n\n@@ -1168,7 +1167,7 @@ public class LogicalGenerator extends SqlBaseBaseListener {\n \n   private FilterOperator parsePredicate(PredicateContext ctx) {\n     if (ctx.OPERATOR_NOT() != null) {\n-      isNotWhereClause = true;\n+      boolean isNotWhereClause = true;\n       FilterOperator notOp = new FilterOperator(SQLConstant.KW_NOT);\n       notOp.addChildOperator(parseOrExpression(ctx.orExpression()));\n       return notOp;\n"}}, {"oid": "8b34e3e3b04d8fba08e8fe3a8c40921f9ad71ba2", "url": "https://github.com/apache/iotdb/commit/8b34e3e3b04d8fba08e8fe3a8c40921f9ad71ba2", "message": "remove useless codes", "committedDate": "2020-02-04T05:53:13Z", "type": "commit"}, {"oid": "16b3606db26fbeec1e429591fcc5410e3982de09", "url": "https://github.com/apache/iotdb/commit/16b3606db26fbeec1e429591fcc5410e3982de09", "message": "remove useless import", "committedDate": "2020-02-04T06:27:29Z", "type": "commit"}, {"oid": "16b3606db26fbeec1e429591fcc5410e3982de09", "url": "https://github.com/apache/iotdb/commit/16b3606db26fbeec1e429591fcc5410e3982de09", "message": "remove useless import", "committedDate": "2020-02-04T06:27:29Z", "type": "forcePushed"}, {"oid": "555e8a1ec5c98a2a49835067d8dda4b82d69aa36", "url": "https://github.com/apache/iotdb/commit/555e8a1ec5c98a2a49835067d8dda4b82d69aa36", "message": "fix sonar issues", "committedDate": "2020-02-05T02:04:49Z", "type": "commit"}, {"oid": "555e8a1ec5c98a2a49835067d8dda4b82d69aa36", "url": "https://github.com/apache/iotdb/commit/555e8a1ec5c98a2a49835067d8dda4b82d69aa36", "message": "fix sonar issues", "committedDate": "2020-02-05T02:04:49Z", "type": "forcePushed"}, {"oid": "d4049532fa3fbc74a9a91461878eb6b0c5f8f9c0", "url": "https://github.com/apache/iotdb/commit/d4049532fa3fbc74a9a91461878eb6b0c5f8f9c0", "message": "fix sonar issues", "committedDate": "2020-02-05T02:50:45Z", "type": "commit"}]}