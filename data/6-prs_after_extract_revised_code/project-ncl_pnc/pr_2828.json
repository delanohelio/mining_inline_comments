{"pr_number": 2828, "pr_title": "Endpoint to get Builds without attributes.", "pr_createdAt": "2020-02-03T10:09:19Z", "pr_url": "https://github.com/project-ncl/pnc/pull/2828", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwMzU3NQ==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374103575", "bodyText": "What about old.ifPresent(attributes::remove);", "author": "janinko", "createdAt": "2020-02-03T13:34:37Z", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "chunk": "diff --git a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\nindex db4e8acc7..2a45476c5 100644\n--- a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n+++ b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n\n@@ -700,9 +700,7 @@ public class BuildRecord implements GenericEntity<Integer> {\n         }\n         Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n         BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n-        if (old.isPresent()) {\n-            attributes.remove(old.get());\n-        }\n+        old.ifPresent(attributes::remove);\n         attributes.add(attribute);\n         if (old.isPresent()) {\n             return old.get().getValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwMzk4OQ==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374103989", "bodyText": "return old.orElse(null);", "author": "janinko", "createdAt": "2020-02-03T13:35:30Z", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }\n+        attributes.add(attribute);\n+        if (old.isPresent()) {\n+            return old.get().getValue();\n+        } else {\n+            return null;\n+        }", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4Mzg0MA==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374183840", "bodyText": "It have to return the value of the optional object.", "author": "matejonnet", "createdAt": "2020-02-03T15:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwMzk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "chunk": "diff --git a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\nindex db4e8acc7..2a45476c5 100644\n--- a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n+++ b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n\n@@ -700,9 +700,7 @@ public class BuildRecord implements GenericEntity<Integer> {\n         }\n         Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n         BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n-        if (old.isPresent()) {\n-            attributes.remove(old.get());\n-        }\n+        old.ifPresent(attributes::remove);\n         attributes.add(attribute);\n         if (old.isPresent()) {\n             return old.get().getValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNDk0MQ==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374104941", "bodyText": "I guess this is this really necessary and Hibernate can't handle it with null id?", "author": "janinko", "createdAt": "2020-02-03T13:37:26Z", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NDk3Ng==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374184976", "bodyText": "I did try with PrePersist to set the id but didn't manage to make it work.", "author": "matejonnet", "createdAt": "2020-02-03T15:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNDk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "chunk": "diff --git a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\nindex db4e8acc7..2a45476c5 100644\n--- a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n+++ b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n\n@@ -700,9 +700,7 @@ public class BuildRecord implements GenericEntity<Integer> {\n         }\n         Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n         BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n-        if (old.isPresent()) {\n-            attributes.remove(old.get());\n-        }\n+        old.ifPresent(attributes::remove);\n         attributes.add(attribute);\n         if (old.isPresent()) {\n             return old.get().getValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNTM1MA==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374105350", "bodyText": "return getAttributeEntity(key).orElse(null);", "author": "janinko", "createdAt": "2020-02-03T13:38:16Z", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTI0MQ==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374185241", "bodyText": "The value!", "author": "matejonnet", "createdAt": "2020-02-03T15:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNTM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "chunk": "diff --git a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\nindex db4e8acc7..2a45476c5 100644\n--- a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n+++ b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n\n@@ -700,9 +700,7 @@ public class BuildRecord implements GenericEntity<Integer> {\n         }\n         Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n         BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n-        if (old.isPresent()) {\n-            attributes.remove(old.get());\n-        }\n+        old.ifPresent(attributes::remove);\n         attributes.add(attribute);\n         if (old.isPresent()) {\n             return old.get().getValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNTg0NQ==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374105845", "bodyText": "Somebody finds this nicer :)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    attribute.ifPresent(a -> attributes.remove(a));\n          \n          \n            \n                    attribute.ifPresent(attributes::remove);", "author": "janinko", "createdAt": "2020-02-03T13:39:19Z", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }\n+        attributes.add(attribute);\n+        if (old.isPresent()) {\n+            return old.get().getValue();\n+        } else {\n+            return null;\n+        }\n     }\n \n     public void removeAttribute(String key) {\n-        attributes.remove(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        attribute.ifPresent(a -> attributes.remove(a));", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "chunk": "diff --git a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\nindex db4e8acc7..2a45476c5 100644\n--- a/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n+++ b/model/src/main/java/org/jboss/pnc/model/BuildRecord.java\n\n@@ -700,9 +700,7 @@ public class BuildRecord implements GenericEntity<Integer> {\n         }\n         Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n         BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n-        if (old.isPresent()) {\n-            attributes.remove(old.get());\n-        }\n+        old.ifPresent(attributes::remove);\n         attributes.add(attribute);\n         if (old.isPresent()) {\n             return old.get().getValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDExOTI1Mg==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374119252", "bodyText": "We don't want to allow : in the value? If we want then use:\n            String[] kv = attribute.split(\":\", 2);\n            if (kv.length == 2) {\n                map.put(kv[0],kv[1]);\n            } else {\n                map.put(kv[0],\"\");\n            }", "author": "janinko", "createdAt": "2020-02-03T14:05:01Z", "path": "rest-new/src/main/java/org/jboss/pnc/rest/endpoints/BuildEndpointImpl.java", "diffHunk": "@@ -119,8 +121,28 @@ public void update(String id, Build build) {\n     }\n \n     @Override\n-    public Page<Build> getAll(PageParameters pageParams, BuildsFilterParameters filterParams, BuildAttributeParameters attributes) {\n-        return provider.getBuilds(toBuildPageInfo(pageParams, filterParams));\n+    public Page<Build> getAll(PageParameters pageParams, BuildsFilterParameters filterParams, List<String> attributes) {\n+        if (attributes != null && !attributes.isEmpty()) {\n+            Map<String,String> attributeConstraints = parseAttributes(attributes);\n+            return provider.getByAttribute(toBuildPageInfo(pageParams, filterParams), attributeConstraints);\n+        } else {\n+            return provider.getBuilds(toBuildPageInfo(pageParams, filterParams));\n+        }\n+    }\n+\n+    private Map<String, String> parseAttributes(List<String> attributes) {\n+        Map<String, String> map = new HashMap<>();\n+        for (String attribute : attributes) {\n+            String[] kv = attribute.split(\":\");\n+            if (kv.length == 2) {\n+                map.put(kv[0],kv[1]);\n+            } else if (kv.length == 1) {\n+                map.put(kv[0],\"\");\n+            } else {\n+                throw new BadRequestException(\"Invalid 'attributes' query parameters.\");\n+            }", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMjIwNg==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374122206", "bodyText": "Does this result in 400 or 500 error? I think we should give 400 in this (and the key == null) case.", "author": "janinko", "createdAt": "2020-02-03T14:10:47Z", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -213,6 +216,9 @@ public void addAttribute(String id, String key, String value) {\n         if(null == key){\n             throw new IllegalArgumentException(\"Attribute key must not be null\");\n         }\n+        if(!key.matches(\"[a-zA-Z_0-9]+\")){\n+            throw new IllegalArgumentException(\"Attribute key must match [a-zA-Z_0-9]+\");", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2MTI2Ng==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374161266", "bodyText": "Should you skip the first character !?", "author": "janinko", "createdAt": "2020-02-03T15:18:35Z", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -599,6 +605,39 @@ public void setDependentArtifacts(String id, List<String> artifactIds) {\n         repository.save(buildRecord);\n     }\n \n+    public Page<Build> getByAttribute(BuildPageInfo buildPageInfo, Map<String, String> attributeConstraints) {\n+        Set<Predicate<BuildRecord>> predicates = new HashSet<>();\n+        for (Map.Entry<String, String> entry : attributeConstraints.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if (key.startsWith(\"!\")) {\n+                withoutAttribute(key);", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "chunk": "diff --git a/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java b/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java\nindex 293643b17..83c56646f 100644\n--- a/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java\n+++ b/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java\n\n@@ -611,12 +611,16 @@ public class BuildProviderImpl extends AbstractIntIdProvider<BuildRecord, Build,\n             String key = entry.getKey();\n             String value = entry.getValue();\n             if (key.startsWith(\"!\")) {\n-                withoutAttribute(key);\n+                withoutAttribute(key.substring(1));\n             } else {\n                 withAttribute(key, value);\n             }\n         }\n \n+        Predicate<BuildRecord> queryPredicate = rsqlPredicateProducer\n+                .getCriteriaPredicate(BuildRecord.class, buildPageInfo.getQ());\n+        predicates.add(queryPredicate);\n+\n         Predicate<BuildRecord>[] predicatesArray = predicates.toArray(new Predicate[predicates.size()]);\n \n         PageInfo pageInfo = toPageInfo(buildPageInfo);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2MzkyNw==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374163927", "bodyText": "You are ignoring the RSQL query. I think it should be also used.", "author": "janinko", "createdAt": "2020-02-03T15:22:56Z", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -599,6 +605,39 @@ public void setDependentArtifacts(String id, List<String> artifactIds) {\n         repository.save(buildRecord);\n     }\n \n+    public Page<Build> getByAttribute(BuildPageInfo buildPageInfo, Map<String, String> attributeConstraints) {\n+        Set<Predicate<BuildRecord>> predicates = new HashSet<>();\n+        for (Map.Entry<String, String> entry : attributeConstraints.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if (key.startsWith(\"!\")) {\n+                withoutAttribute(key);\n+            } else {\n+                withAttribute(key, value);\n+            }\n+        }\n+\n+        Predicate<BuildRecord>[] predicatesArray = predicates.toArray(new Predicate[predicates.size()]);\n+\n+        PageInfo pageInfo = toPageInfo(buildPageInfo);\n+        SortInfo sortInfo = rsqlPredicateProducer.getSortInfo(type, buildPageInfo.getSort());\n+        List<BuildRecord> resultList = ((BuildRecordRepository) BuildProviderImpl.this.repository)", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "chunk": "diff --git a/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java b/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java\nindex 293643b17..83c56646f 100644\n--- a/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java\n+++ b/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java\n\n@@ -611,12 +611,16 @@ public class BuildProviderImpl extends AbstractIntIdProvider<BuildRecord, Build,\n             String key = entry.getKey();\n             String value = entry.getValue();\n             if (key.startsWith(\"!\")) {\n-                withoutAttribute(key);\n+                withoutAttribute(key.substring(1));\n             } else {\n                 withAttribute(key, value);\n             }\n         }\n \n+        Predicate<BuildRecord> queryPredicate = rsqlPredicateProducer\n+                .getCriteriaPredicate(BuildRecord.class, buildPageInfo.getQ());\n+        predicates.add(queryPredicate);\n+\n         Predicate<BuildRecord>[] predicatesArray = predicates.toArray(new Predicate[predicates.size()]);\n \n         PageInfo pageInfo = toPageInfo(buildPageInfo);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NDQ2OA==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374164468", "bodyText": "There should be new construcotr that does the page count computation, so you don't need to include this line.", "author": "janinko", "createdAt": "2020-02-03T15:23:46Z", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -599,6 +605,39 @@ public void setDependentArtifacts(String id, List<String> artifactIds) {\n         repository.save(buildRecord);\n     }\n \n+    public Page<Build> getByAttribute(BuildPageInfo buildPageInfo, Map<String, String> attributeConstraints) {\n+        Set<Predicate<BuildRecord>> predicates = new HashSet<>();\n+        for (Map.Entry<String, String> entry : attributeConstraints.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if (key.startsWith(\"!\")) {\n+                withoutAttribute(key);\n+            } else {\n+                withAttribute(key, value);\n+            }\n+        }\n+\n+        Predicate<BuildRecord>[] predicatesArray = predicates.toArray(new Predicate[predicates.size()]);\n+\n+        PageInfo pageInfo = toPageInfo(buildPageInfo);\n+        SortInfo sortInfo = rsqlPredicateProducer.getSortInfo(type, buildPageInfo.getSort());\n+        List<BuildRecord> resultList = ((BuildRecordRepository) BuildProviderImpl.this.repository)\n+                .queryWithPredicatesUsingCursor(pageInfo, sortInfo, predicatesArray);\n+\n+        int hits = repository.count(predicatesArray);\n+\n+        return new Page<>(\n+                buildPageInfo.getPageIndex(),\n+                buildPageInfo.getPageSize(),\n+                (int) Math.ceil((double) hits / buildPageInfo.getPageSize()),", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "chunk": "diff --git a/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java b/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java\nindex 293643b17..83c56646f 100644\n--- a/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java\n+++ b/facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java\n\n@@ -611,12 +611,16 @@ public class BuildProviderImpl extends AbstractIntIdProvider<BuildRecord, Build,\n             String key = entry.getKey();\n             String value = entry.getValue();\n             if (key.startsWith(\"!\")) {\n-                withoutAttribute(key);\n+                withoutAttribute(key.substring(1));\n             } else {\n                 withAttribute(key, value);\n             }\n         }\n \n+        Predicate<BuildRecord> queryPredicate = rsqlPredicateProducer\n+                .getCriteriaPredicate(BuildRecord.class, buildPageInfo.getQ());\n+        predicates.add(queryPredicate);\n+\n         Predicate<BuildRecord>[] predicatesArray = predicates.toArray(new Predicate[predicates.size()]);\n \n         PageInfo pageInfo = toPageInfo(buildPageInfo);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NTYxOQ==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374165619", "bodyText": "Could you add to the addAttribute method mention what are the restrictions on the key format?", "author": "janinko", "createdAt": "2020-02-03T15:25:37Z", "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/BuildEndpoint.java", "diffHunk": "@@ -91,6 +90,10 @@\n     static final String BUILD_STATUS = \"Status of the build\";\n ", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NjQ2Mg==", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374166462", "bodyText": "private", "author": "janinko", "createdAt": "2020-02-03T15:26:53Z", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecordAttribute.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2019 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.model;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.Table;\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+@Entity\n+@Table(name = \"build_record_attributes\")\n+@IdClass(BuildRecordAttribute.AttributeId.class)\n+public class BuildRecordAttribute implements Serializable {\n+\n+    @Id\n+    Integer buildRecordId;\n+\n+    @Id\n+    String key;\n+\n+    String value;", "originalCommit": "51edbff0909746479d85f892c1fe9c5df26495ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "chunk": "diff --git a/model/src/main/java/org/jboss/pnc/model/BuildRecordAttribute.java b/model/src/main/java/org/jboss/pnc/model/BuildRecordAttribute.java\nindex bea91e51e..763f3c04a 100644\n--- a/model/src/main/java/org/jboss/pnc/model/BuildRecordAttribute.java\n+++ b/model/src/main/java/org/jboss/pnc/model/BuildRecordAttribute.java\n\n@@ -30,12 +30,12 @@ import java.util.Objects;\n public class BuildRecordAttribute implements Serializable {\n \n     @Id\n-    Integer buildRecordId;\n+    private Integer buildRecordId;\n \n     @Id\n-    String key;\n+    private String key;\n \n-    String value;\n+    private String value;\n \n     public BuildRecordAttribute() {\n     }\n"}}, {"oid": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "url": "https://github.com/project-ncl/pnc/commit/5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "message": "NCL-5376 - endpoint to get Builds without attributes.", "committedDate": "2020-02-03T21:43:20Z", "type": "forcePushed"}, {"oid": "36ec44c275b1b9d85c72f9ea388a4e4921e59a19", "url": "https://github.com/project-ncl/pnc/commit/36ec44c275b1b9d85c72f9ea388a4e4921e59a19", "message": "NCL-5376 - endpoint to get Builds without attributes.", "committedDate": "2020-02-03T21:52:38Z", "type": "commit"}, {"oid": "36ec44c275b1b9d85c72f9ea388a4e4921e59a19", "url": "https://github.com/project-ncl/pnc/commit/36ec44c275b1b9d85c72f9ea388a4e4921e59a19", "message": "NCL-5376 - endpoint to get Builds without attributes.", "committedDate": "2020-02-03T21:52:38Z", "type": "forcePushed"}]}