{"pr_number": 3427, "pr_title": "[NCL-6194] Add functionality to process the results of Deliverable Analysis", "pr_createdAt": "2020-12-03T11:34:40Z", "pr_url": "https://github.com/project-ncl/pnc/pull/3427", "timeline": [{"oid": "df43bc4f96f1e9329be1577db78c475492d9ac2f", "url": "https://github.com/project-ncl/pnc/commit/df43bc4f96f1e9329be1577db78c475492d9ac2f", "message": "[NCL-6194] Extract ReposiotryIdentifier constants and add Distribution archive repository type", "committedDate": "2020-12-03T10:38:17Z", "type": "commit"}, {"oid": "b4cd3db67ccf62e8030393dd7e5db7c8b26aad2d", "url": "https://github.com/project-ncl/pnc/commit/b4cd3db67ccf62e8030393dd7e5db7c8b26aad2d", "message": "[NCL-6194] Add functionality to process the results of Deliverable Analysis", "committedDate": "2020-12-03T12:29:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5MzM2OQ==", "url": "https://github.com/project-ncl/pnc/pull/3427#discussion_r535193369", "bodyText": "Add javadoc for this method, please.", "author": "jbartece", "createdAt": "2020-12-03T12:38:12Z", "path": "facade/src/main/java/org/jboss/pnc/facade/deliverables/DeliverableAnalyzerResultProcessor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.facade.deliverables;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.transaction.Transactional;\n+\n+import org.jboss.pnc.api.deliverablesanalyzer.dto.Artifact;\n+import org.jboss.pnc.api.deliverablesanalyzer.dto.ArtifactType;\n+import org.jboss.pnc.api.deliverablesanalyzer.dto.Build;\n+import org.jboss.pnc.api.deliverablesanalyzer.dto.MavenArtifact;\n+import org.jboss.pnc.api.deliverablesanalyzer.dto.NPMArtifact;\n+import org.jboss.pnc.enums.ArtifactQuality;\n+import org.jboss.pnc.enums.RepositoryType;\n+import org.jboss.pnc.model.ProductMilestone;\n+import org.jboss.pnc.model.TargetRepository;\n+import org.jboss.pnc.model.User;\n+import org.jboss.pnc.spi.datastore.predicates.ArtifactPredicates;\n+import org.jboss.pnc.spi.datastore.repositories.ArtifactRepository;\n+import org.jboss.pnc.spi.datastore.repositories.ProductMilestoneRepository;\n+import org.jboss.pnc.spi.datastore.repositories.TargetRepositoryRepository;\n+\n+import static org.jboss.pnc.constants.ReposiotryIdentifier.DISTRIBUTION_ARCHIVE;\n+import static org.jboss.pnc.constants.ReposiotryIdentifier.INDY_MAVEN;\n+\n+/**\n+ *\n+ * @author jbrazdil\n+ */\n+@Transactional\n+public class DeliverableAnalyzerResultProcessor {\n+    private static final String KOJI_PATH_MAVEN_PREFIX = \"/api/content/maven/remote/koji-\";\n+\n+    @Inject\n+    private ProductMilestoneRepository milestoneRepository;\n+    @Inject\n+    private ArtifactRepository artifactRepository;\n+    @Inject\n+    private TargetRepositoryRepository targetRepositoryRepository;\n+\n+    /**\n+     *\n+     * @param milestoneId\n+     * @param builds\n+     * @param distributionUrl\n+     */\n+    public void processBuild(int milestoneId, Collection<Build> builds, String distributionUrl, User user) {", "originalCommit": "b4cd3db67ccf62e8030393dd7e5db7c8b26aad2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwNzkwMA==", "url": "https://github.com/project-ncl/pnc/pull/3427#discussion_r535207900", "bodyText": "ah, I inteded to add javadoc as you cen see but then somehow forgot about it", "author": "janinko", "createdAt": "2020-12-03T13:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5MzM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "afcfe07eed960a3ff919c866fb20582ed8977873", "chunk": "diff --git a/facade/src/main/java/org/jboss/pnc/facade/deliverables/DeliverableAnalyzerResultProcessor.java b/facade/src/main/java/org/jboss/pnc/facade/deliverables/DeliverableAnalyzerResultProcessor.java\ndeleted file mode 100644\nindex 23ee40461..000000000\n--- a/facade/src/main/java/org/jboss/pnc/facade/deliverables/DeliverableAnalyzerResultProcessor.java\n+++ /dev/null\n\n@@ -1,199 +0,0 @@\n-/**\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.jboss.pnc.facade.deliverables;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Objects;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-import javax.inject.Inject;\n-import javax.transaction.Transactional;\n-\n-import org.jboss.pnc.api.deliverablesanalyzer.dto.Artifact;\n-import org.jboss.pnc.api.deliverablesanalyzer.dto.ArtifactType;\n-import org.jboss.pnc.api.deliverablesanalyzer.dto.Build;\n-import org.jboss.pnc.api.deliverablesanalyzer.dto.MavenArtifact;\n-import org.jboss.pnc.api.deliverablesanalyzer.dto.NPMArtifact;\n-import org.jboss.pnc.enums.ArtifactQuality;\n-import org.jboss.pnc.enums.RepositoryType;\n-import org.jboss.pnc.model.ProductMilestone;\n-import org.jboss.pnc.model.TargetRepository;\n-import org.jboss.pnc.model.User;\n-import org.jboss.pnc.spi.datastore.predicates.ArtifactPredicates;\n-import org.jboss.pnc.spi.datastore.repositories.ArtifactRepository;\n-import org.jboss.pnc.spi.datastore.repositories.ProductMilestoneRepository;\n-import org.jboss.pnc.spi.datastore.repositories.TargetRepositoryRepository;\n-\n-import static org.jboss.pnc.constants.ReposiotryIdentifier.DISTRIBUTION_ARCHIVE;\n-import static org.jboss.pnc.constants.ReposiotryIdentifier.INDY_MAVEN;\n-\n-/**\n- *\n- * @author jbrazdil\n- */\n-@Transactional\n-public class DeliverableAnalyzerResultProcessor {\n-    private static final String KOJI_PATH_MAVEN_PREFIX = \"/api/content/maven/remote/koji-\";\n-\n-    @Inject\n-    private ProductMilestoneRepository milestoneRepository;\n-    @Inject\n-    private ArtifactRepository artifactRepository;\n-    @Inject\n-    private TargetRepositoryRepository targetRepositoryRepository;\n-\n-    /**\n-     *\n-     * @param milestoneId\n-     * @param builds\n-     * @param distributionUrl\n-     */\n-    public void processBuild(int milestoneId, Collection<Build> builds, String distributionUrl, User user) {\n-        ProductMilestone milestone = milestoneRepository.queryById(milestoneId);\n-        for (Build build : builds) {\n-            Function<Artifact, org.jboss.pnc.model.Artifact> artifactParser;\n-            if (build.getBuildSystemType() == null) {\n-                TargetRepository distributionRepository = getDistributionRepository(distributionUrl);\n-                artifactParser = art -> findOrCreateArtifact(art, distributionRepository);\n-            } else {\n-                switch (build.getBuildSystemType()) {\n-                    case PNC:\n-                        artifactParser = this::getPncArtifact;\n-                        break;\n-                    case BREW:\n-                        TargetRepository brewRepository = getBrewRepository(build);\n-                        artifactParser = art -> findOrCreateArtifact(assertBrewArtifacts(art), brewRepository);\n-                        break;\n-                    default:\n-                        throw new UnsupportedOperationException(\n-                                \"Unknown build system type \" + build.getBuildSystemType());\n-                }\n-            }\n-            build.getArtifacts().stream().map(artifactParser).forEach(milestone::addDistributedArtifact);\n-        }\n-        milestone.setDistributedArtifactsImporter(user);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private org.jboss.pnc.model.Artifact findOrCreateArtifact(Artifact art, TargetRepository targetRepo) {\n-        org.jboss.pnc.model.Artifact artifact = mapArtifact(art);\n-        // find\n-        org.jboss.pnc.model.Artifact dbArtifact = artifactRepository.queryByPredicates(\n-                ArtifactPredicates.withIdentifierAndSha256(artifact.getIdentifier(), artifact.getSha256()),\n-                ArtifactPredicates.withTargetRepositoryId(targetRepo.getId()));\n-        if (dbArtifact != null) {\n-            return dbArtifact;\n-        }\n-\n-        // create\n-        artifact.setTargetRepository(targetRepo);\n-        org.jboss.pnc.model.Artifact savedArtifact = artifactRepository.save(artifact);\n-        targetRepo.getArtifacts().add(savedArtifact);\n-        return savedArtifact;\n-    }\n-\n-    private org.jboss.pnc.model.Artifact getPncArtifact(Artifact art) {\n-        org.jboss.pnc.model.Artifact artifact = artifactRepository.queryById(Integer.parseInt(art.getPncId()));\n-        if (artifact == null) {\n-            throw new IllegalArgumentException(\"PNC artifact with id \" + art.getPncId() + \" doesn't exist.\");\n-        }\n-        return artifact;\n-    }\n-\n-    private org.jboss.pnc.model.Artifact mapArtifact(Artifact art) {\n-        org.jboss.pnc.model.Artifact.Builder builder = org.jboss.pnc.model.Artifact.builder();\n-        builder.md5(art.getMd5());\n-        builder.sha1(art.getSha1());\n-        builder.sha256(art.getSha256());\n-        builder.size(art.getSize());\n-        builder.filename(art.getFilename());\n-        if (art.getArtifactType() == null) {\n-            builder.identifier(art.getFilename());\n-        } else\n-            switch (art.getArtifactType()) {\n-                case MAVEN:\n-                    builder.identifier(fill((MavenArtifact) art));\n-                    break;\n-                case NPM:\n-                    builder.identifier(fill((NPMArtifact) art));\n-                    break;\n-            }\n-        if (art.isBuiltFromSource()) {\n-            builder.artifactQuality(ArtifactQuality.NEW);\n-        } else {\n-            builder.artifactQuality(ArtifactQuality.IMPORTED);\n-        }\n-\n-        return builder.build();\n-    }\n-\n-    private String fill(MavenArtifact mavenArtifact) {\n-        return Arrays\n-                .asList(\n-                        mavenArtifact.getGroupId(),\n-                        mavenArtifact.getArtifactId(),\n-                        mavenArtifact.getType(),\n-                        mavenArtifact.getVersion(),\n-                        mavenArtifact.getClassifier())\n-                .stream()\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.joining(\":\"));\n-    }\n-\n-    private String fill(NPMArtifact mavenArtifact) {\n-        return mavenArtifact.getName() + \":\" + mavenArtifact.getVersion();\n-    }\n-\n-    private TargetRepository getBrewRepository(Build build) {\n-        String path = KOJI_PATH_MAVEN_PREFIX + build.getBrewNVR();\n-        TargetRepository tr = targetRepositoryRepository.queryByIdentifierAndPath(INDY_MAVEN, path);\n-        if (tr == null) {\n-            tr = createRepository(path, INDY_MAVEN, RepositoryType.MAVEN);\n-        }\n-        return tr;\n-    }\n-\n-    private TargetRepository getDistributionRepository(String distURL) {\n-        TargetRepository tr = targetRepositoryRepository.queryByIdentifierAndPath(DISTRIBUTION_ARCHIVE, distURL);\n-        if (tr == null) {\n-            tr = createRepository(distURL, DISTRIBUTION_ARCHIVE, RepositoryType.DISTRIBUTION_ARCHIVE);\n-        }\n-        return tr;\n-    }\n-\n-    private TargetRepository createRepository(String path, String identifier, RepositoryType type) {\n-        TargetRepository tr = TargetRepository.newBuilder()\n-                .temporaryRepo(false)\n-                .identifier(identifier)\n-                .repositoryPath(path)\n-                .repositoryType(type)\n-                .build();\n-        return targetRepositoryRepository.save(tr);\n-    }\n-\n-    private Artifact assertBrewArtifacts(Artifact artifact) {\n-        if (!(artifact.getArtifactType() == null || artifact.getArtifactType() == ArtifactType.MAVEN)) {\n-            throw new IllegalArgumentException(\n-                    \"Brew artifacts are expected to be either MAVEN or unknown, artifact \" + artifact + \" is \"\n-                            + artifact.getArtifactType());\n-        }\n-        return artifact;\n-    }\n-\n-}\n"}}, {"oid": "afcfe07eed960a3ff919c866fb20582ed8977873", "url": "https://github.com/project-ncl/pnc/commit/afcfe07eed960a3ff919c866fb20582ed8977873", "message": "[NCL-6194] Add distributedArtifactsImporter field to Product Milestone", "committedDate": "2020-12-03T13:10:47Z", "type": "commit"}, {"oid": "863b0e05e4e8c9c394d753431090716f7f638970", "url": "https://github.com/project-ncl/pnc/commit/863b0e05e4e8c9c394d753431090716f7f638970", "message": "[NCL-6194] Add functionality to process the results of Deliverable Analysis", "committedDate": "2020-12-03T13:10:47Z", "type": "forcePushed"}, {"oid": "c9f650ad8f6e36c4826161411831ddc8e5519b8e", "url": "https://github.com/project-ncl/pnc/commit/c9f650ad8f6e36c4826161411831ddc8e5519b8e", "message": "[NCL-6194] Add functionality to process the results of Deliverable Analysis", "committedDate": "2020-12-08T17:40:42Z", "type": "forcePushed"}, {"oid": "9e0c46670e6680fb67cd993a8059df8dabc564ae", "url": "https://github.com/project-ncl/pnc/commit/9e0c46670e6680fb67cd993a8059df8dabc564ae", "message": "[NCL-6194] Add functionality to process the results of Deliverable Analysis", "committedDate": "2020-12-09T13:40:15Z", "type": "forcePushed"}, {"oid": "543d7b02fd635740aad1512e0efb299dd19a59c5", "url": "https://github.com/project-ncl/pnc/commit/543d7b02fd635740aad1512e0efb299dd19a59c5", "message": "[NCL-6194] Add functionality to process the results of Deliverable Analysis", "committedDate": "2020-12-09T14:11:13Z", "type": "commit"}, {"oid": "543d7b02fd635740aad1512e0efb299dd19a59c5", "url": "https://github.com/project-ncl/pnc/commit/543d7b02fd635740aad1512e0efb299dd19a59c5", "message": "[NCL-6194] Add functionality to process the results of Deliverable Analysis", "committedDate": "2020-12-09T14:11:13Z", "type": "forcePushed"}]}