{"pr_number": 3347, "pr_title": "[NCL-6163] New endpoint on Artifact with direct filtering for DA", "pr_createdAt": "2020-10-13T14:44:10Z", "pr_url": "https://github.com/project-ncl/pnc/pull/3347", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDk3MQ==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r504554971", "bodyText": "What I don't get is why won't we just use RSQL on getArtifacts endpoint instead of creating entire new endpoint. DA needs to prepare request anyway.\nRSQL that should be equivalent example is: q=identifier=like=group:*:version;artifactQuality=in=(DELETED,BLACKLISTED,NEW...);targetRepository.repositoryType==MAVEN\nIf you don't want to use =in= you can group multiple ORs like this: q=identifier=like=group:*:version;(artifactQuality==NEW,artifactQuality==TEMPORARY...);targetRepository.repositoryType==NPM\nRSQL will create just one query to DB.", "author": "michalovjan", "createdAt": "2020-10-14T10:01:14Z", "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java", "diffHunk": "@@ -113,6 +115,43 @@\n             @Parameter(description = FILTER_MD5_DESC) @QueryParam(\"md5\") String md5,\n             @Parameter(description = FILTER_SHA1_DESC) @QueryParam(\"sha1\") String sha1);\n \n+    static final String GET_ALL_FILTERED_DESC = \"Gets all artifacts according to specified filters.\";\n+    static final String FILTER_IDENTIFIER_DESC = \"Filter by artifact identifier or its part.\";\n+    static final String FILTER_QUALITY_DESC = \"List of artifact qualities to include in result.\";\n+    static final String FILTER_REPOSITORY_TYPE_DESC = \"Type of target repository.\";\n+\n+    /**\n+     * {@value GET_ALL_FILTERED_DESC}\n+     *\n+     * @param pageParameters\n+     * @param identifier {@value FILTER_IDENTIFIER_DESC}\n+     * @param qualities {@value FILTER_QUALITY_DESC}\n+     * @param repoType {@value FILTER_REPOSITORY_TYPE_DESC}\n+     * @return\n+     */\n+    @Operation(\n+            summary = GET_ALL_FILTERED_DESC,\n+            responses = {\n+                    @ApiResponse(\n+                            responseCode = SUCCESS_CODE,\n+                            description = SUCCESS_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ArtifactPage.class))),\n+                    @ApiResponse(\n+                            responseCode = INVALID_CODE,\n+                            description = INVALID_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ErrorResponse.class))),\n+                    @ApiResponse(\n+                            responseCode = SERVER_ERROR_CODE,\n+                            description = SERVER_ERROR_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ErrorResponse.class))) })\n+    @GET\n+    @Path(\"/filter\")\n+    Page<Artifact> getAllFiltered(", "originalCommit": "71d25e349429960fac111ea632c2010fe089360b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxMDg2NQ==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r504610865", "bodyText": "I have other question. Is it necessary for the endpoint to return whole Artifact? Isn't just subset of the data needed? For example, does DA need Build or TargetRepository?\nI belive this endpoint should be really optimized.", "author": "janinko", "createdAt": "2020-10-14T11:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4NDk2NA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r505284964", "bodyText": "@michalovjan  I believe that the new endpoint was suggested because of optimization as Petr describes in his doc https://docs.engineering.redhat.com/display/JP/Design%3A+Limit+usage+of+Brew+pull -> (to avoid frequent rsql parsing). @pkocandr is that right?\n@janinko I am afraid I do not know what exactly DA needs from the Artifact. I can discuss this with Petr in more detail to crop the unnecessary data.", "author": "dominikbrazdil", "createdAt": "2020-10-15T07:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQwMjIxOQ==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r505402219", "bodyText": "@dominikbrazdil @michalovjan Yes, the concern was raised by @jbartece and it will definitely help.\n@dominikbrazdil AFAIK DA currently needs only list of versions and in the future it will need also the artifact quality, so I would add it right away. The result would be just a map version -> quality.  @janinko Correct?", "author": "pkocandr", "createdAt": "2020-10-15T09:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5MzgxMA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r505493810", "bodyText": "This endpoint should be optimized as much as possible. Using the generic endpoint with RSQL is not a good option. It will be heavily used.\nI second Honza's point, if it needs to return the whole artifact. ArtifactRef should be sufficient or possibly we could even create a new DTO entity with just id, identifier and ArtifactQuality.", "author": "jbartece", "createdAt": "2020-10-15T12:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NzcyNA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r507677724", "bodyText": "I still think that RSQL parsing is not a performance issue but with Honza's suggestion, there is need for a new endpoint anyway.", "author": "michalovjan", "createdAt": "2020-10-19T11:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0MTIxOA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r509041218", "bodyText": "It is definitely worse than without RSQL, so there is no point in parsing the string 100 000+ times a day.", "author": "jbartece", "createdAt": "2020-10-21T07:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a43902f43da309cc381d5f7fc4489c527f0f5285", "chunk": "diff --git a/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java b/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java\nindex 2dcace5ae..1292ed1ae 100644\n--- a/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java\n+++ b/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java\n\n@@ -146,8 +147,8 @@ public interface ArtifactEndpoint {\n                             content = @Content(schema = @Schema(implementation = ErrorResponse.class))) })\n     @GET\n     @Path(\"/filter\")\n-    Page<Artifact> getAllFiltered(\n-            @Valid @BeanParam PageParameters pageParameters,\n+    Page<ArtifactInfo> getAllFiltered(\n+            @Valid @BeanParam PaginationParameters paginationParameters,\n             @Parameter(description = FILTER_IDENTIFIER_DESC) @QueryParam(\"identifier\") String identifier,\n             @Parameter(description = FILTER_QUALITY_DESC) @QueryParam(\"qualities\") Set<ArtifactQuality> qualities,\n             @Parameter(description = FILTER_REPOSITORY_TYPE_DESC) @QueryParam(\"repoType\") RepositoryType repoType);\n"}}, {"oid": "a43902f43da309cc381d5f7fc4489c527f0f5285", "url": "https://github.com/project-ncl/pnc/commit/a43902f43da309cc381d5f7fc4489c527f0f5285", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA", "committedDate": "2020-10-19T16:00:19Z", "type": "forcePushed"}, {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "url": "https://github.com/project-ncl/pnc/commit/4858f15f05ec0e0091765cb18fc82509fbf7b799", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA", "committedDate": "2020-10-20T07:56:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNTkwMA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508325900", "bodyText": "AFAIK DA does not need to know id of the artifacts. Or is this \"in the future\" thing? @janinko", "author": "michalovjan", "createdAt": "2020-10-20T08:54:20Z", "path": "dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.dto.response;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.jboss.pnc.enums.ArtifactQuality;\n+\n+/**\n+ * Really basic Artifact info for optimized queries.\n+ *\n+ * @author Dominik Br\u00e1zdil &lt;dbrazdil@redhat.com&gt;\n+ */\n+@Data\n+@Builder(builderClassName = \"Builder\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonDeserialize(builder = ArtifactInfo.Builder.class)\n+public class ArtifactInfo {\n+\n+    /**\n+     * ID of the artifact.\n+     */\n+    protected final String id;", "originalCommit": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MDA5NQ==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508470095", "bodyText": "DA doesn't necessary need it, but I don't see any harm in including it.", "author": "janinko", "createdAt": "2020-10-20T12:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNTkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "chunk": "diff --git a/dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java b/dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java\nindex f9dd9dde2..f3e5c09e3 100644\n--- a/dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java\n+++ b/dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java\n\n@@ -23,6 +23,7 @@ import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n import lombok.Builder;\n import lombok.Data;\n import org.jboss.pnc.enums.ArtifactQuality;\n+import org.jboss.pnc.enums.RepositoryType;\n \n /**\n  * Really basic Artifact info for optimized queries.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyODEyMA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508328120", "bodyText": "I think there is not need to have the results in order. DA will order the results by itself, based on the best matching version.", "author": "michalovjan", "createdAt": "2020-10-20T08:57:22Z", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java", "diffHunk": "@@ -288,6 +321,41 @@ public ArtifactRevision getRevision(String id, Integer rev) {\n         return artifactRevisionMapper.toDTO(auditedArtifact);\n     }\n \n+    private CriteriaQuery<Tuple> artifactInfoQuery(\n+            CriteriaBuilder cb,\n+            Optional<String> identifierPattern,\n+            Optional<Set<ArtifactQuality>> qualities,\n+            Optional<RepositoryType> repoType) {\n+\n+        CriteriaQuery<Tuple> query = cb.createTupleQuery();\n+\n+        Root<Artifact> artifact = query.from(org.jboss.pnc.model.Artifact.class);\n+        query.multiselect(\n+                artifact.get(Artifact_.id),\n+                artifact.get(Artifact_.identifier),\n+                artifact.get(Artifact_.artifactQuality));\n+        Predicate withIdentifierLike = identifierPattern.isPresent()\n+                ? cb.like(artifact.get(Artifact_.identifier), \"%\" + identifierPattern.get().replace(\"*\", \"%\") + \"%\")\n+                : cb.and();\n+        Predicate withQualityIn = qualities.isPresent() && !qualities.get().isEmpty()\n+                ? artifact.get(Artifact_.ARTIFACT_QUALITY).in(qualities.get())\n+                : cb.and();\n+        Predicate withRepoType = repoType.isPresent() ? cb\n+                .equal(artifact.join(Artifact_.targetRepository).get(TargetRepository_.REPOSITORY_TYPE), repoType.get())\n+                : cb.and();\n+        query.where(cb.and(withIdentifierLike, withQualityIn, withRepoType));\n+        query.orderBy(cb.desc(artifact.get(Artifact_.id)));", "originalCommit": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0ODYyNQ==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508348625", "bodyText": "Alright, didn't know that.", "author": "dominikbrazdil", "createdAt": "2020-10-20T09:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyODEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "chunk": "diff --git a/facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java b/facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java\nindex f1f11f623..764880562 100644\n--- a/facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java\n+++ b/facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java\n\n@@ -330,12 +332,14 @@ public class ArtifactProviderImpl extends AbstractProvider<Integer, Artifact, or\n         CriteriaQuery<Tuple> query = cb.createTupleQuery();\n \n         Root<Artifact> artifact = query.from(org.jboss.pnc.model.Artifact.class);\n+        Path<TargetRepository> repository = artifact.get(Artifact_.targetRepository);\n         query.multiselect(\n                 artifact.get(Artifact_.id),\n                 artifact.get(Artifact_.identifier),\n-                artifact.get(Artifact_.artifactQuality));\n+                artifact.get(Artifact_.artifactQuality),\n+                repository.get(TargetRepository_.REPOSITORY_TYPE));\n         Predicate withIdentifierLike = identifierPattern.isPresent()\n-                ? cb.like(artifact.get(Artifact_.identifier), \"%\" + identifierPattern.get().replace(\"*\", \"%\") + \"%\")\n+                ? cb.like(artifact.get(Artifact_.identifier), identifierPattern.get().replace(\"*\", \"%\"))\n                 : cb.and();\n         Predicate withQualityIn = qualities.isPresent() && !qualities.get().isEmpty()\n                 ? artifact.get(Artifact_.ARTIFACT_QUALITY).in(qualities.get())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjgxOA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508336818", "bodyText": "Is there a particular reason to surround the identifier with '%'?\nIf you'd asked for \"org.jboss.pnc:pnc:jar:2.0.0.GA-redhat-00001\" specifically. You could potentially get 3 artifacts (or more):\n\norg.jboss.pnc:pnc:jar:2.0.0.GA-redhat-00001\norg.jboss.pnc:pnc:jar:2.0.0.GA-redhat-00001:sources\norg.jboss.pnc:pnc:jar:2.0.0.GA-redhat-00001:javadocs", "author": "michalovjan", "createdAt": "2020-10-20T09:10:02Z", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java", "diffHunk": "@@ -288,6 +321,41 @@ public ArtifactRevision getRevision(String id, Integer rev) {\n         return artifactRevisionMapper.toDTO(auditedArtifact);\n     }\n \n+    private CriteriaQuery<Tuple> artifactInfoQuery(\n+            CriteriaBuilder cb,\n+            Optional<String> identifierPattern,\n+            Optional<Set<ArtifactQuality>> qualities,\n+            Optional<RepositoryType> repoType) {\n+\n+        CriteriaQuery<Tuple> query = cb.createTupleQuery();\n+\n+        Root<Artifact> artifact = query.from(org.jboss.pnc.model.Artifact.class);\n+        query.multiselect(\n+                artifact.get(Artifact_.id),\n+                artifact.get(Artifact_.identifier),\n+                artifact.get(Artifact_.artifactQuality));\n+        Predicate withIdentifierLike = identifierPattern.isPresent()\n+                ? cb.like(artifact.get(Artifact_.identifier), \"%\" + identifierPattern.get().replace(\"*\", \"%\") + \"%\")", "originalCommit": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0NzYwMg==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508347602", "bodyText": "Well I thought that if the endpoint input is the identifier \"pattern\" then it should behave as LIKE functionality all the time. But if the case is more that it will be used for specific version calls then it should be probably based only on \"*\" present in the pattern.", "author": "dominikbrazdil", "createdAt": "2020-10-20T09:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MzQ3MA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508473470", "bodyText": "The queries for the identifier MUST NEVER have \"%\" at the begining, so we can utilize index prefix search in DB. Otherwise the DB would have to do full scan over the whole table.", "author": "janinko", "createdAt": "2020-10-20T12:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUxMDA3Mw==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508510073", "bodyText": "OK, so I will leave only the 'replace' part and DA will specify by \"*\" whenever it will need to search all identifiers that match the pattern.", "author": "dominikbrazdil", "createdAt": "2020-10-20T13:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "chunk": "diff --git a/facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java b/facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java\nindex f1f11f623..764880562 100644\n--- a/facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java\n+++ b/facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java\n\n@@ -330,12 +332,14 @@ public class ArtifactProviderImpl extends AbstractProvider<Integer, Artifact, or\n         CriteriaQuery<Tuple> query = cb.createTupleQuery();\n \n         Root<Artifact> artifact = query.from(org.jboss.pnc.model.Artifact.class);\n+        Path<TargetRepository> repository = artifact.get(Artifact_.targetRepository);\n         query.multiselect(\n                 artifact.get(Artifact_.id),\n                 artifact.get(Artifact_.identifier),\n-                artifact.get(Artifact_.artifactQuality));\n+                artifact.get(Artifact_.artifactQuality),\n+                repository.get(TargetRepository_.REPOSITORY_TYPE));\n         Predicate withIdentifierLike = identifierPattern.isPresent()\n-                ? cb.like(artifact.get(Artifact_.identifier), \"%\" + identifierPattern.get().replace(\"*\", \"%\") + \"%\")\n+                ? cb.like(artifact.get(Artifact_.identifier), identifierPattern.get().replace(\"*\", \"%\"))\n                 : cb.and();\n         Predicate withQualityIn = qualities.isPresent() && !qualities.get().isEmpty()\n                 ? artifact.get(Artifact_.ARTIFACT_QUALITY).in(qualities.get())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzODQzNg==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508338436", "bodyText": "ArtifactInfoPage.class?", "author": "michalovjan", "createdAt": "2020-10-20T09:12:22Z", "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java", "diffHunk": "@@ -113,6 +116,43 @@\n             @Parameter(description = FILTER_MD5_DESC) @QueryParam(\"md5\") String md5,\n             @Parameter(description = FILTER_SHA1_DESC) @QueryParam(\"sha1\") String sha1);\n \n+    static final String GET_ALL_FILTERED_DESC = \"Gets all artifacts according to specified filters.\";\n+    static final String FILTER_IDENTIFIER_DESC = \"Filter by artifact identifier or its part.\";\n+    static final String FILTER_QUALITY_DESC = \"List of artifact qualities to include in result.\";\n+    static final String FILTER_REPOSITORY_TYPE_DESC = \"Type of target repository.\";\n+\n+    /**\n+     * {@value GET_ALL_FILTERED_DESC}\n+     *\n+     * @param paginationParameters\n+     * @param identifier {@value FILTER_IDENTIFIER_DESC}\n+     * @param qualities {@value FILTER_QUALITY_DESC}\n+     * @param repoType {@value FILTER_REPOSITORY_TYPE_DESC}\n+     * @return\n+     */\n+    @Operation(\n+            summary = GET_ALL_FILTERED_DESC,\n+            responses = {\n+                    @ApiResponse(\n+                            responseCode = SUCCESS_CODE,\n+                            description = SUCCESS_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ArtifactPage.class))),", "originalCommit": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "chunk": "diff --git a/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java b/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java\nindex 3abf40124..082cbf6d6 100644\n--- a/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java\n+++ b/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java\n\n@@ -136,7 +137,7 @@ public interface ArtifactEndpoint {\n                     @ApiResponse(\n                             responseCode = SUCCESS_CODE,\n                             description = SUCCESS_DESCRIPTION,\n-                            content = @Content(schema = @Schema(implementation = ArtifactPage.class))),\n+                            content = @Content(schema = @Schema(implementation = ArtifactInfoPage.class))),\n                     @ApiResponse(\n                             responseCode = INVALID_CODE,\n                             description = INVALID_DESCRIPTION,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzOTE1Mg==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508339152", "bodyText": "left imports", "author": "michalovjan", "createdAt": "2020-10-20T09:13:22Z", "path": "spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java", "diffHunk": "@@ -18,12 +18,16 @@\n package org.jboss.pnc.spi.datastore.predicates;\n \n import org.apache.commons.collections.CollectionUtils;\n+import org.jboss.pnc.enums.ArtifactQuality;\n+import org.jboss.pnc.enums.RepositoryType;", "originalCommit": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "chunk": "diff --git a/spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java b/spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java\nindex 66034ca55..67d263e3d 100644\n--- a/spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java\n+++ b/spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java\n\n@@ -18,20 +18,15 @@\n package org.jboss.pnc.spi.datastore.predicates;\n \n import org.apache.commons.collections.CollectionUtils;\n-import org.jboss.pnc.enums.ArtifactQuality;\n-import org.jboss.pnc.enums.RepositoryType;\n import org.jboss.pnc.model.Artifact;\n import org.jboss.pnc.model.Artifact_;\n import org.jboss.pnc.model.BuildRecord;\n import org.jboss.pnc.model.BuildRecord_;\n import org.jboss.pnc.model.ProductMilestone;\n import org.jboss.pnc.model.ProductMilestone_;\n-import org.jboss.pnc.model.TargetRepository;\n-import org.jboss.pnc.model.TargetRepository_;\n import org.jboss.pnc.spi.datastore.repositories.api.Predicate;\n \n import javax.persistence.criteria.Join;\n-\n import java.util.Optional;\n import java.util.Set;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzOTI2Mg==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508339262", "bodyText": "left imports", "author": "michalovjan", "createdAt": "2020-10-20T09:13:32Z", "path": "spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java", "diffHunk": "@@ -18,12 +18,16 @@\n package org.jboss.pnc.spi.datastore.predicates;\n \n import org.apache.commons.collections.CollectionUtils;\n+import org.jboss.pnc.enums.ArtifactQuality;\n+import org.jboss.pnc.enums.RepositoryType;\n import org.jboss.pnc.model.Artifact;\n import org.jboss.pnc.model.Artifact_;\n import org.jboss.pnc.model.BuildRecord;\n import org.jboss.pnc.model.BuildRecord_;\n import org.jboss.pnc.model.ProductMilestone;\n import org.jboss.pnc.model.ProductMilestone_;\n+import org.jboss.pnc.model.TargetRepository;\n+import org.jboss.pnc.model.TargetRepository_;", "originalCommit": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "chunk": "diff --git a/spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java b/spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java\nindex 66034ca55..67d263e3d 100644\n--- a/spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java\n+++ b/spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java\n\n@@ -18,20 +18,15 @@\n package org.jboss.pnc.spi.datastore.predicates;\n \n import org.apache.commons.collections.CollectionUtils;\n-import org.jboss.pnc.enums.ArtifactQuality;\n-import org.jboss.pnc.enums.RepositoryType;\n import org.jboss.pnc.model.Artifact;\n import org.jboss.pnc.model.Artifact_;\n import org.jboss.pnc.model.BuildRecord;\n import org.jboss.pnc.model.BuildRecord_;\n import org.jboss.pnc.model.ProductMilestone;\n import org.jboss.pnc.model.ProductMilestone_;\n-import org.jboss.pnc.model.TargetRepository;\n-import org.jboss.pnc.model.TargetRepository_;\n import org.jboss.pnc.spi.datastore.repositories.api.Predicate;\n \n import javax.persistence.criteria.Join;\n-\n import java.util.Optional;\n import java.util.Set;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MTYzMA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508471630", "bodyText": "Do we have artifact type (MVN/NPM) easily available? I guess we know it from the context, but I think that we could have it here so we know how to parse the identifier.", "author": "janinko", "createdAt": "2020-10-20T12:48:54Z", "path": "dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.dto.response;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.jboss.pnc.enums.ArtifactQuality;\n+\n+/**\n+ * Really basic Artifact info for optimized queries.\n+ *\n+ * @author Dominik Br\u00e1zdil &lt;dbrazdil@redhat.com&gt;\n+ */\n+@Data\n+@Builder(builderClassName = \"Builder\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonDeserialize(builder = ArtifactInfo.Builder.class)\n+public class ArtifactInfo {\n+\n+    /**\n+     * ID of the artifact.\n+     */\n+    protected final String id;\n+\n+    /**\n+     * A unique identifier of the artifact in a repository. For example, for a maven artifact this is the GATVC\n+     * (groupId:artifactId:type:version[:classifier] The format of the identifier string is determined by the repository\n+     * type.\n+     */\n+    protected final String identifier;", "originalCommit": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUxNTQ2Ng==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508515466", "bodyText": "I can add it easily", "author": "dominikbrazdil", "createdAt": "2020-10-20T13:44:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MTYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "chunk": "diff --git a/dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java b/dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java\nindex f9dd9dde2..f3e5c09e3 100644\n--- a/dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java\n+++ b/dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java\n\n@@ -23,6 +23,7 @@ import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n import lombok.Builder;\n import lombok.Data;\n import org.jboss.pnc.enums.ArtifactQuality;\n+import org.jboss.pnc.enums.RepositoryType;\n \n /**\n  * Really basic Artifact info for optimized queries.\n"}}, {"oid": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "url": "https://github.com/project-ncl/pnc/commit/c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA", "committedDate": "2020-10-20T14:08:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MDg2NQ==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508660865", "bodyText": "No need to wrap set to Optional:\n\nIf @DefaultValue is not used and the corresponding meta-data is not present in the request, the value will be an empty collection for List, Set or SortedSet, null for other object types, and the Java-defined default for primitive types.\nhttps://docs.oracle.com/javaee/7/api/javax/ws/rs/DefaultValue.html", "author": "janinko", "createdAt": "2020-10-20T16:13:49Z", "path": "rest/src/main/java/org/jboss/pnc/rest/endpoints/ArtifactEndpointImpl.java", "diffHunk": "@@ -75,6 +79,20 @@ public void init() {\n                 Optional.ofNullable(sha1));\n     }\n \n+    @Override\n+    public Page<ArtifactInfo> getAllFiltered(\n+            PaginationParameters paginationParameters,\n+            String identifier,\n+            Set<ArtifactQuality> qualities,\n+            RepositoryType repoType) {\n+        return artifactProvider.getAllFiltered(\n+                paginationParameters.getPageIndex(),\n+                paginationParameters.getPageSize(),\n+                Optional.ofNullable(identifier),\n+                Optional.ofNullable(qualities),", "originalCommit": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e3992771753652b031a1c77af7e10946f3ae7f0", "chunk": "diff --git a/rest/src/main/java/org/jboss/pnc/rest/endpoints/ArtifactEndpointImpl.java b/rest/src/main/java/org/jboss/pnc/rest/endpoints/ArtifactEndpointImpl.java\nindex d0cbc2687..c6877ffe7 100644\n--- a/rest/src/main/java/org/jboss/pnc/rest/endpoints/ArtifactEndpointImpl.java\n+++ b/rest/src/main/java/org/jboss/pnc/rest/endpoints/ArtifactEndpointImpl.java\n\n@@ -80,14 +79,16 @@ public class ArtifactEndpointImpl implements ArtifactEndpoint {\n     }\n \n     @Override\n-    public Page<ArtifactInfo> getAllFiltered(\n-            PaginationParameters paginationParameters,\n+    public Page<Artifact> getAllFiltered(\n+            PageParameters pageParams,\n             String identifier,\n             Set<ArtifactQuality> qualities,\n             RepositoryType repoType) {\n         return artifactProvider.getAllFiltered(\n-                paginationParameters.getPageIndex(),\n-                paginationParameters.getPageSize(),\n+                pageParams.getPageIndex(),\n+                pageParams.getPageSize(),\n+                pageParams.getSort(),\n+                pageParams.getQ(),\n                 Optional.ofNullable(identifier),\n                 Optional.ofNullable(qualities),\n                 Optional.ofNullable(repoType));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzkxNA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508663914", "bodyText": "Why are all the parameters optional? Wouldn't we always want to specify at least the identifier? And I would say repoType too.", "author": "janinko", "createdAt": "2020-10-20T16:16:39Z", "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java", "diffHunk": "@@ -113,6 +117,43 @@\n             @Parameter(description = FILTER_MD5_DESC) @QueryParam(\"md5\") String md5,\n             @Parameter(description = FILTER_SHA1_DESC) @QueryParam(\"sha1\") String sha1);\n \n+    static final String GET_ALL_FILTERED_DESC = \"Gets all artifacts according to specified filters.\";\n+    static final String FILTER_IDENTIFIER_DESC = \"Filter by artifact identifier or its part.\";\n+    static final String FILTER_QUALITY_DESC = \"List of artifact qualities to include in result.\";\n+    static final String FILTER_REPOSITORY_TYPE_DESC = \"Type of target repository.\";\n+\n+    /**\n+     * {@value GET_ALL_FILTERED_DESC}\n+     *\n+     * @param paginationParameters\n+     * @param identifier {@value FILTER_IDENTIFIER_DESC}\n+     * @param qualities {@value FILTER_QUALITY_DESC}\n+     * @param repoType {@value FILTER_REPOSITORY_TYPE_DESC}\n+     * @return\n+     */\n+    @Operation(\n+            summary = GET_ALL_FILTERED_DESC,\n+            responses = {\n+                    @ApiResponse(\n+                            responseCode = SUCCESS_CODE,\n+                            description = SUCCESS_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ArtifactInfoPage.class))),\n+                    @ApiResponse(\n+                            responseCode = INVALID_CODE,\n+                            description = INVALID_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ErrorResponse.class))),\n+                    @ApiResponse(\n+                            responseCode = SERVER_ERROR_CODE,\n+                            description = SERVER_ERROR_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ErrorResponse.class))) })\n+    @GET\n+    @Path(\"/filter\")\n+    Page<ArtifactInfo> getAllFiltered(\n+            @Valid @BeanParam PaginationParameters paginationParameters,\n+            @Parameter(description = FILTER_IDENTIFIER_DESC) @QueryParam(\"identifier\") String identifier,\n+            @Parameter(description = FILTER_QUALITY_DESC) @QueryParam(\"qualities\") Set<ArtifactQuality> qualities,\n+            @Parameter(description = FILTER_REPOSITORY_TYPE_DESC) @QueryParam(\"repoType\") RepositoryType repoType);", "originalCommit": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzNjQ1MQ==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r509036451", "bodyText": "@pkocandr What parameters will be used at all times?", "author": "dominikbrazdil", "createdAt": "2020-10-21T07:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1MTQ3MQ==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r509151471", "bodyText": "@janinko Why to make some parameters mandatory? It is filtering, so it is up to the user/use-case. I'd keep all optional. It doesn't hurt and makes the usage more flexible.", "author": "jbartece", "createdAt": "2020-10-21T10:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MDE2OA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r509170168", "bodyText": "because of KISS", "author": "janinko", "createdAt": "2020-10-21T10:33:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyOTA5MA==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r509329090", "bodyText": "I think that the Optionals do not make it somehow unreadable and the endpoint is more flexible this way. But if it sure that it won't be used any other way then it wouldn't make much sense to keep it optional.", "author": "dominikbrazdil", "createdAt": "2020-10-21T14:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1NjM0Ng==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r509356346", "bodyText": "@janinko If it is optional, it is simple, isn't it? :-)", "author": "jbartece", "createdAt": "2020-10-21T14:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwMzIwNg==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r509603206", "bodyText": "For the version list read by DA we will specify all the params everytime, but for a different use-case in the future I would not limit it by making the params mandatory.", "author": "pkocandr", "createdAt": "2020-10-21T19:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzNTAzMg==", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r509935032", "bodyText": "Ok, I will leave them optional", "author": "dominikbrazdil", "createdAt": "2020-10-22T07:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "4e3992771753652b031a1c77af7e10946f3ae7f0", "chunk": "diff --git a/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java b/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java\nindex 082cbf6d6..2dcace5ae 100644\n--- a/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java\n+++ b/rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java\n\n@@ -125,7 +123,7 @@ public interface ArtifactEndpoint {\n     /**\n      * {@value GET_ALL_FILTERED_DESC}\n      *\n-     * @param paginationParameters\n+     * @param pageParameters\n      * @param identifier {@value FILTER_IDENTIFIER_DESC}\n      * @param qualities {@value FILTER_QUALITY_DESC}\n      * @param repoType {@value FILTER_REPOSITORY_TYPE_DESC}\n"}}, {"oid": "4e3992771753652b031a1c77af7e10946f3ae7f0", "url": "https://github.com/project-ncl/pnc/commit/4e3992771753652b031a1c77af7e10946f3ae7f0", "message": "[NCL-6163] New endpoint on Artifact with direct filtering for DA", "committedDate": "2020-10-22T07:25:12Z", "type": "commit"}, {"oid": "a8b770a10ef810526492e39aa75fd58538a88537", "url": "https://github.com/project-ncl/pnc/commit/a8b770a10ef810526492e39aa75fd58538a88537", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA", "committedDate": "2020-10-22T07:25:12Z", "type": "forcePushed"}, {"oid": "98f7f8099ce4cb0f9bb86afbd8387d2b593d91e9", "url": "https://github.com/project-ncl/pnc/commit/98f7f8099ce4cb0f9bb86afbd8387d2b593d91e9", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA", "committedDate": "2020-10-22T08:15:13Z", "type": "commit"}, {"oid": "98f7f8099ce4cb0f9bb86afbd8387d2b593d91e9", "url": "https://github.com/project-ncl/pnc/commit/98f7f8099ce4cb0f9bb86afbd8387d2b593d91e9", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA", "committedDate": "2020-10-22T08:15:13Z", "type": "forcePushed"}]}