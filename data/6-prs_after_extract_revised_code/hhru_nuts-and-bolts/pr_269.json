{"pr_number": 269, "pr_title": "HH-118126 add TestExecutorListener", "pr_createdAt": "2020-10-19T15:00:59Z", "pr_url": "https://github.com/hhru/nuts-and-bolts/pull/269", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyODY2Mw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507828663", "bodyText": "\u0445\u0430\u0440\u0434\u043a\u043e\u0434 - \u0445\u043e\u0442\u044f \u0431\u044b \u0445\u043e\u0441\u0442 \u0431\u044b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u044f\u0442\u044c \u043a\u0430\u043a-\u0442\u043e - \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0435\u0449\u0435 \u043a\u0430\u043a", "author": "dzharikhin", "createdAt": "2020-10-19T15:06:04Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String SERVICE_NAME_PROPERTY = \"serviceName\";\n+  private static final String DRIVER_NAME = \"org.postgresql.Driver\";\n+  private static final String STAND_TYPE_FACT_FILE = \"/etc/ansible/facts.d/test_stand_type.fact\";", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTM0Ng==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508269346", "bodyText": "\u0443\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u043d\u0435\u0434\u0430, \u043d\u043e \u043e\u043d\u0430 \u0435\u0449\u0435 \u0432 \u043e\u0431\u0440\u0430\u0437 \u043d\u0435 \u043f\u043e\u043f\u0430\u043b\u0430, \u0430 \u043f\u043e \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u043d\u0435\u043b\u044c\u0437\u044f \u043d\u0438\u043a\u0430\u043a \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0441\u0442\u0435\u043d\u0434", "author": "SCREEN88", "createdAt": "2020-10-20T07:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyODY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMDQ4Nw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508310487", "bodyText": "\u043d\u0443 \u0438 \u043f\u0440\u043e \u0443\u0440\u043b \u043a \u0411\u0414 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 - \u043b\u0443\u0447\u0448\u0435 \u0435\u0433\u043e \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0447\u0435\u0433\u043e \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0445\u043e\u0442\u0444\u0438\u043a\u0441\u0438\u0442\u044c", "author": "dzharikhin", "createdAt": "2020-10-20T08:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyODY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyOTQwNg==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508329406", "bodyText": "\u043e\u0431\u0441\u0443\u0436\u0443 \u0441 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u043a\u0430\u043a \u043b\u0443\u0447\u0448\u0435 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c", "author": "SCREEN88", "createdAt": "2020-10-20T08:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyODY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMDMxNw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507830317", "bodyText": "Interrupted \u043d\u0430\u0434\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c", "author": "dzharikhin", "createdAt": "2020-10-19T15:08:20Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String SERVICE_NAME_PROPERTY = \"serviceName\";\n+  private static final String DRIVER_NAME = \"org.postgresql.Driver\";\n+  private static final String STAND_TYPE_FACT_FILE = \"/etc/ansible/facts.d/test_stand_type.fact\";\n+  private static final String DB_URL = \"jdbc:postgresql://10.208.30.79:5432/at_stats\";\n+  private static final String LAUNCH_DATA_SQL = \"insert into unit_tests_launch_info (server_name, service_name, \" +\n+      \"branch_name, start_time) VALUES ('%s', '%s', '%s', '%s') returning unit_tests_launch_info_id\";\n+  private static final String RUN_DATA_SQL = \"INSERT INTO unit_tests_stats (unit_tests_launch_info_id, class_name, test_name, \" +\n+      \"status, duration, message) VALUES (?, ?, ?, ?::unit_test_status, ?, ?)\";\n+  private static final int INSERT_BATCH_SIZE = 1000;\n+  private final Map<String, TestExecResult> execResultMap;\n+  private boolean canUseDB;\n+\n+  public TestExecutorListener() {\n+    try {\n+      Class.forName(DRIVER_NAME);\n+      canUseDB = true;\n+    } catch (ClassNotFoundException e) {\n+      LOGGER.warn(\"Failed to load '{}' for junit test executor listener\", DRIVER_NAME, e);\n+      canUseDB = false;\n+    }\n+    execResultMap = new ConcurrentHashMap<>();\n+  }\n+\n+  @Override\n+  public void testPlanExecutionFinished(TestPlan testPlan) {\n+    StandType standType = getStandType();\n+    Connection connection = getNewConnection();\n+    String serviceName = (String) loadProperties().get(SERVICE_NAME_PROPERTY);\n+    if (connection == null || standType == null || serviceName == null || serviceName.length() == 0) {\n+      return;\n+    }\n+    try (PreparedStatement preparedStatement = connection.prepareStatement(RUN_DATA_SQL);\n+         Statement statement = connection.createStatement()) {\n+      connection.setAutoCommit(false);\n+      int launchId = sendLaunchDataAndGetId(serviceName, statement);\n+      sendExecutionData(preparedStatement, launchId);\n+      connection.commit();\n+      connection.setAutoCommit(true);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Fail to insert test execution data, making rollback\", e);\n+      try {\n+        connection.rollback();\n+      } catch (SQLException t) {\n+        LOGGER.error(\"Fail to rollback!\", t);\n+      }\n+    } finally {\n+      try {\n+        connection.close();\n+      } catch (SQLException e) {\n+        LOGGER.error(\"Fail to close JDBC connection for url '{}'\", DB_URL, e);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void executionSkipped(TestIdentifier testIdentifier, String reason) {\n+    TestExecResult testExecResult = getTestExecResult(testIdentifier);\n+    testExecResult.setEndTime(testExecResult.getStartTime());\n+    testExecResult.setStatus(ResultStatus.SKIPPED);\n+    execResultMap.put(testIdentifier.getUniqueId(), testExecResult);\n+  }\n+\n+  @Override\n+  public void executionStarted(TestIdentifier testIdentifier) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    execResultMap.put(testIdentifier.getUniqueId(), getTestExecResult(testIdentifier));\n+  }\n+\n+  @Override\n+  public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    TestExecResult testExecResult = execResultMap.get(testIdentifier.getUniqueId());\n+    testExecResult.setEndTime(Instant.now());\n+    switch (testExecutionResult.getStatus()) {\n+      case ABORTED:\n+        return;\n+      case FAILED:\n+        testExecResult.setStatus(ResultStatus.FAILED);\n+        Optional<Throwable> optionalThrowable = testExecutionResult.getThrowable();\n+        optionalThrowable.ifPresent(throwable -> testExecResult.setMessage(throwable.getMessage()));\n+        break;\n+      case SUCCESSFUL:\n+        testExecResult.setStatus(ResultStatus.SUCCESSFUL);\n+        break;\n+    }\n+  }\n+\n+  private TestExecResult getTestExecResult(TestIdentifier testIdentifier) {\n+    Optional<TestSource> source = testIdentifier.getSource();\n+    String className = testIdentifier.getParentId().orElse(\"noname\");\n+    String methodName = testIdentifier.getDisplayName();\n+    if (source.isPresent() && source.get() instanceof MethodSource) {\n+      MethodSource methodSource = (MethodSource) source.get();\n+      className = methodSource.getClassName();\n+      methodName = methodSource.getMethodName();\n+    }\n+    return new TestExecResult(className, methodName);\n+  }\n+\n+  private int sendLaunchDataAndGetId(String serviceName, Statement statement) throws SQLException {\n+    String query = String.format(\n+        LAUNCH_DATA_SQL,\n+        getComputerName(),\n+        serviceName,\n+        getCurrentGitBranch(),\n+        LocalDateTime.now().toInstant(ZoneOffset.UTC)\n+    );\n+    ResultSet resultSet = statement.executeQuery(query);\n+    resultSet.next();\n+    return resultSet.getInt(1);\n+  }\n+\n+  private void sendExecutionData(PreparedStatement preparedStatement, int launchId) throws SQLException {\n+    int count = 0;\n+    for (TestExecResult result : execResultMap.values()) {\n+      preparedStatement.setInt(1, launchId);\n+      preparedStatement.setString(2, result.getClassName());\n+      preparedStatement.setString(3, result.getMethodName());\n+      preparedStatement.setString(4, result.getStatus().name());\n+      preparedStatement.setLong(5, Duration.between(result.getStartTime(), result.getEndTime()).toMillis());\n+      if (result.getMessage() == null) {\n+        preparedStatement.setNull(6, Types.VARCHAR);\n+      } else {\n+        preparedStatement.setString(6, result.getMessage());\n+      }\n+      preparedStatement.addBatch();\n+      if (++count % INSERT_BATCH_SIZE == 0) {\n+        preparedStatement.executeBatch();\n+      }\n+    }\n+    preparedStatement.executeBatch();\n+  }\n+\n+  public Connection getNewConnection() {\n+    if (canUseDB) {\n+      try {\n+        return DriverManager.getConnection(DB_URL, \"at_stats\", \"at_stats_password\");\n+      } catch (SQLException | RuntimeException e) {\n+        LOGGER.warn(\"Failed to create DB connection for junit test executor listener\");\n+      }\n+    }\n+    return null;\n+  }\n+\n+  public String getCurrentGitBranch() {\n+    try {\n+      Process process = Runtime.getRuntime().exec(\"git rev-parse --abbrev-ref HEAD\");\n+      process.waitFor();\n+      BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+      return reader.readLine();\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.warn(\"Couldn't get current git branch from test listener\", e);", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTcyOQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508271729", "bodyText": "\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432 \u0441\u043c\u044b\u0441\u043b\u0435?", "author": "SCREEN88", "createdAt": "2020-10-20T07:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMDMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMDUzMQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507830531", "bodyText": "\u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u0444\u0430\u043a\u0442, \u0447\u0442\u043e \u0432 path \u0435\u0441\u0442\u044c \u0433\u0438\u0442", "author": "dzharikhin", "createdAt": "2020-10-19T15:08:38Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String SERVICE_NAME_PROPERTY = \"serviceName\";\n+  private static final String DRIVER_NAME = \"org.postgresql.Driver\";\n+  private static final String STAND_TYPE_FACT_FILE = \"/etc/ansible/facts.d/test_stand_type.fact\";\n+  private static final String DB_URL = \"jdbc:postgresql://10.208.30.79:5432/at_stats\";\n+  private static final String LAUNCH_DATA_SQL = \"insert into unit_tests_launch_info (server_name, service_name, \" +\n+      \"branch_name, start_time) VALUES ('%s', '%s', '%s', '%s') returning unit_tests_launch_info_id\";\n+  private static final String RUN_DATA_SQL = \"INSERT INTO unit_tests_stats (unit_tests_launch_info_id, class_name, test_name, \" +\n+      \"status, duration, message) VALUES (?, ?, ?, ?::unit_test_status, ?, ?)\";\n+  private static final int INSERT_BATCH_SIZE = 1000;\n+  private final Map<String, TestExecResult> execResultMap;\n+  private boolean canUseDB;\n+\n+  public TestExecutorListener() {\n+    try {\n+      Class.forName(DRIVER_NAME);\n+      canUseDB = true;\n+    } catch (ClassNotFoundException e) {\n+      LOGGER.warn(\"Failed to load '{}' for junit test executor listener\", DRIVER_NAME, e);\n+      canUseDB = false;\n+    }\n+    execResultMap = new ConcurrentHashMap<>();\n+  }\n+\n+  @Override\n+  public void testPlanExecutionFinished(TestPlan testPlan) {\n+    StandType standType = getStandType();\n+    Connection connection = getNewConnection();\n+    String serviceName = (String) loadProperties().get(SERVICE_NAME_PROPERTY);\n+    if (connection == null || standType == null || serviceName == null || serviceName.length() == 0) {\n+      return;\n+    }\n+    try (PreparedStatement preparedStatement = connection.prepareStatement(RUN_DATA_SQL);\n+         Statement statement = connection.createStatement()) {\n+      connection.setAutoCommit(false);\n+      int launchId = sendLaunchDataAndGetId(serviceName, statement);\n+      sendExecutionData(preparedStatement, launchId);\n+      connection.commit();\n+      connection.setAutoCommit(true);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Fail to insert test execution data, making rollback\", e);\n+      try {\n+        connection.rollback();\n+      } catch (SQLException t) {\n+        LOGGER.error(\"Fail to rollback!\", t);\n+      }\n+    } finally {\n+      try {\n+        connection.close();\n+      } catch (SQLException e) {\n+        LOGGER.error(\"Fail to close JDBC connection for url '{}'\", DB_URL, e);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void executionSkipped(TestIdentifier testIdentifier, String reason) {\n+    TestExecResult testExecResult = getTestExecResult(testIdentifier);\n+    testExecResult.setEndTime(testExecResult.getStartTime());\n+    testExecResult.setStatus(ResultStatus.SKIPPED);\n+    execResultMap.put(testIdentifier.getUniqueId(), testExecResult);\n+  }\n+\n+  @Override\n+  public void executionStarted(TestIdentifier testIdentifier) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    execResultMap.put(testIdentifier.getUniqueId(), getTestExecResult(testIdentifier));\n+  }\n+\n+  @Override\n+  public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    TestExecResult testExecResult = execResultMap.get(testIdentifier.getUniqueId());\n+    testExecResult.setEndTime(Instant.now());\n+    switch (testExecutionResult.getStatus()) {\n+      case ABORTED:\n+        return;\n+      case FAILED:\n+        testExecResult.setStatus(ResultStatus.FAILED);\n+        Optional<Throwable> optionalThrowable = testExecutionResult.getThrowable();\n+        optionalThrowable.ifPresent(throwable -> testExecResult.setMessage(throwable.getMessage()));\n+        break;\n+      case SUCCESSFUL:\n+        testExecResult.setStatus(ResultStatus.SUCCESSFUL);\n+        break;\n+    }\n+  }\n+\n+  private TestExecResult getTestExecResult(TestIdentifier testIdentifier) {\n+    Optional<TestSource> source = testIdentifier.getSource();\n+    String className = testIdentifier.getParentId().orElse(\"noname\");\n+    String methodName = testIdentifier.getDisplayName();\n+    if (source.isPresent() && source.get() instanceof MethodSource) {\n+      MethodSource methodSource = (MethodSource) source.get();\n+      className = methodSource.getClassName();\n+      methodName = methodSource.getMethodName();\n+    }\n+    return new TestExecResult(className, methodName);\n+  }\n+\n+  private int sendLaunchDataAndGetId(String serviceName, Statement statement) throws SQLException {\n+    String query = String.format(\n+        LAUNCH_DATA_SQL,\n+        getComputerName(),\n+        serviceName,\n+        getCurrentGitBranch(),\n+        LocalDateTime.now().toInstant(ZoneOffset.UTC)\n+    );\n+    ResultSet resultSet = statement.executeQuery(query);\n+    resultSet.next();\n+    return resultSet.getInt(1);\n+  }\n+\n+  private void sendExecutionData(PreparedStatement preparedStatement, int launchId) throws SQLException {\n+    int count = 0;\n+    for (TestExecResult result : execResultMap.values()) {\n+      preparedStatement.setInt(1, launchId);\n+      preparedStatement.setString(2, result.getClassName());\n+      preparedStatement.setString(3, result.getMethodName());\n+      preparedStatement.setString(4, result.getStatus().name());\n+      preparedStatement.setLong(5, Duration.between(result.getStartTime(), result.getEndTime()).toMillis());\n+      if (result.getMessage() == null) {\n+        preparedStatement.setNull(6, Types.VARCHAR);\n+      } else {\n+        preparedStatement.setString(6, result.getMessage());\n+      }\n+      preparedStatement.addBatch();\n+      if (++count % INSERT_BATCH_SIZE == 0) {\n+        preparedStatement.executeBatch();\n+      }\n+    }\n+    preparedStatement.executeBatch();\n+  }\n+\n+  public Connection getNewConnection() {\n+    if (canUseDB) {\n+      try {\n+        return DriverManager.getConnection(DB_URL, \"at_stats\", \"at_stats_password\");\n+      } catch (SQLException | RuntimeException e) {\n+        LOGGER.warn(\"Failed to create DB connection for junit test executor listener\");\n+      }\n+    }\n+    return null;\n+  }\n+\n+  public String getCurrentGitBranch() {\n+    try {\n+      Process process = Runtime.getRuntime().exec(\"git rev-parse --abbrev-ref HEAD\");", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTU4Mg==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508271582", "bodyText": "\u043f\u0440\u0438 \u0441\u0431\u043e\u0440\u043a\u0435 \u0432\u0440\u043e\u0434\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c", "author": "SCREEN88", "createdAt": "2020-10-20T07:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyODI2OA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r509228268", "bodyText": "\u0442\u0430\u043c \u0435\u0449\u0435 \u043d\u0438\u0436\u0435 InterruptedException\n\u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u0447\u0442\u043e \u0442\u0443\u0442 \u0432\u0437\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0430 \u043c\u0435\u0441\u0442\u043e \u0444\u043b\u0430\u0436\u043e\u043a \u043c\u043e\u0436\u0435\u0442 \u0438 \u0441\u043c\u044b\u0441\u043b\u0430 \u043d\u0435\u0442, \u043d\u043e \u0443\u0436 \u0434\u0430\u0432\u0430\u0439 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e \u043d\u0430\u0443\u043a\u0435", "author": "dzharikhin", "createdAt": "2020-10-21T12:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMDUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMDg0MQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507830841", "bodyText": "\u0440\u0430\u043d\u0442\u0430\u0439\u043c\u043e\u043c \u0442\u0443\u0442 \u043d\u0435\u043b\u044c\u0437\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c\u0441\u044f?", "author": "dzharikhin", "createdAt": "2020-10-19T15:09:04Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String SERVICE_NAME_PROPERTY = \"serviceName\";\n+  private static final String DRIVER_NAME = \"org.postgresql.Driver\";\n+  private static final String STAND_TYPE_FACT_FILE = \"/etc/ansible/facts.d/test_stand_type.fact\";\n+  private static final String DB_URL = \"jdbc:postgresql://10.208.30.79:5432/at_stats\";\n+  private static final String LAUNCH_DATA_SQL = \"insert into unit_tests_launch_info (server_name, service_name, \" +\n+      \"branch_name, start_time) VALUES ('%s', '%s', '%s', '%s') returning unit_tests_launch_info_id\";\n+  private static final String RUN_DATA_SQL = \"INSERT INTO unit_tests_stats (unit_tests_launch_info_id, class_name, test_name, \" +\n+      \"status, duration, message) VALUES (?, ?, ?, ?::unit_test_status, ?, ?)\";\n+  private static final int INSERT_BATCH_SIZE = 1000;\n+  private final Map<String, TestExecResult> execResultMap;\n+  private boolean canUseDB;\n+\n+  public TestExecutorListener() {\n+    try {\n+      Class.forName(DRIVER_NAME);\n+      canUseDB = true;\n+    } catch (ClassNotFoundException e) {\n+      LOGGER.warn(\"Failed to load '{}' for junit test executor listener\", DRIVER_NAME, e);\n+      canUseDB = false;\n+    }\n+    execResultMap = new ConcurrentHashMap<>();\n+  }\n+\n+  @Override\n+  public void testPlanExecutionFinished(TestPlan testPlan) {\n+    StandType standType = getStandType();\n+    Connection connection = getNewConnection();\n+    String serviceName = (String) loadProperties().get(SERVICE_NAME_PROPERTY);\n+    if (connection == null || standType == null || serviceName == null || serviceName.length() == 0) {\n+      return;\n+    }\n+    try (PreparedStatement preparedStatement = connection.prepareStatement(RUN_DATA_SQL);\n+         Statement statement = connection.createStatement()) {\n+      connection.setAutoCommit(false);\n+      int launchId = sendLaunchDataAndGetId(serviceName, statement);\n+      sendExecutionData(preparedStatement, launchId);\n+      connection.commit();\n+      connection.setAutoCommit(true);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Fail to insert test execution data, making rollback\", e);\n+      try {\n+        connection.rollback();\n+      } catch (SQLException t) {\n+        LOGGER.error(\"Fail to rollback!\", t);\n+      }\n+    } finally {\n+      try {\n+        connection.close();\n+      } catch (SQLException e) {\n+        LOGGER.error(\"Fail to close JDBC connection for url '{}'\", DB_URL, e);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void executionSkipped(TestIdentifier testIdentifier, String reason) {\n+    TestExecResult testExecResult = getTestExecResult(testIdentifier);\n+    testExecResult.setEndTime(testExecResult.getStartTime());\n+    testExecResult.setStatus(ResultStatus.SKIPPED);\n+    execResultMap.put(testIdentifier.getUniqueId(), testExecResult);\n+  }\n+\n+  @Override\n+  public void executionStarted(TestIdentifier testIdentifier) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    execResultMap.put(testIdentifier.getUniqueId(), getTestExecResult(testIdentifier));\n+  }\n+\n+  @Override\n+  public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    TestExecResult testExecResult = execResultMap.get(testIdentifier.getUniqueId());\n+    testExecResult.setEndTime(Instant.now());\n+    switch (testExecutionResult.getStatus()) {\n+      case ABORTED:\n+        return;\n+      case FAILED:\n+        testExecResult.setStatus(ResultStatus.FAILED);\n+        Optional<Throwable> optionalThrowable = testExecutionResult.getThrowable();\n+        optionalThrowable.ifPresent(throwable -> testExecResult.setMessage(throwable.getMessage()));\n+        break;\n+      case SUCCESSFUL:\n+        testExecResult.setStatus(ResultStatus.SUCCESSFUL);\n+        break;\n+    }\n+  }\n+\n+  private TestExecResult getTestExecResult(TestIdentifier testIdentifier) {\n+    Optional<TestSource> source = testIdentifier.getSource();\n+    String className = testIdentifier.getParentId().orElse(\"noname\");\n+    String methodName = testIdentifier.getDisplayName();\n+    if (source.isPresent() && source.get() instanceof MethodSource) {\n+      MethodSource methodSource = (MethodSource) source.get();\n+      className = methodSource.getClassName();\n+      methodName = methodSource.getMethodName();\n+    }\n+    return new TestExecResult(className, methodName);\n+  }\n+\n+  private int sendLaunchDataAndGetId(String serviceName, Statement statement) throws SQLException {\n+    String query = String.format(\n+        LAUNCH_DATA_SQL,\n+        getComputerName(),\n+        serviceName,\n+        getCurrentGitBranch(),\n+        LocalDateTime.now().toInstant(ZoneOffset.UTC)\n+    );\n+    ResultSet resultSet = statement.executeQuery(query);\n+    resultSet.next();\n+    return resultSet.getInt(1);\n+  }\n+\n+  private void sendExecutionData(PreparedStatement preparedStatement, int launchId) throws SQLException {\n+    int count = 0;\n+    for (TestExecResult result : execResultMap.values()) {\n+      preparedStatement.setInt(1, launchId);\n+      preparedStatement.setString(2, result.getClassName());\n+      preparedStatement.setString(3, result.getMethodName());\n+      preparedStatement.setString(4, result.getStatus().name());\n+      preparedStatement.setLong(5, Duration.between(result.getStartTime(), result.getEndTime()).toMillis());\n+      if (result.getMessage() == null) {\n+        preparedStatement.setNull(6, Types.VARCHAR);\n+      } else {\n+        preparedStatement.setString(6, result.getMessage());\n+      }\n+      preparedStatement.addBatch();\n+      if (++count % INSERT_BATCH_SIZE == 0) {\n+        preparedStatement.executeBatch();\n+      }\n+    }\n+    preparedStatement.executeBatch();\n+  }\n+\n+  public Connection getNewConnection() {\n+    if (canUseDB) {\n+      try {\n+        return DriverManager.getConnection(DB_URL, \"at_stats\", \"at_stats_password\");\n+      } catch (SQLException | RuntimeException e) {\n+        LOGGER.warn(\"Failed to create DB connection for junit test executor listener\");\n+      }\n+    }\n+    return null;\n+  }\n+\n+  public String getCurrentGitBranch() {\n+    try {\n+      Process process = Runtime.getRuntime().exec(\"git rev-parse --abbrev-ref HEAD\");\n+      process.waitFor();\n+      BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+      return reader.readLine();\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.warn(\"Couldn't get current git branch from test listener\", e);\n+    }\n+    return \"unknown\";\n+  }\n+\n+  private StandType getStandType() {\n+    Path path = Paths.get(STAND_TYPE_FACT_FILE);\n+    StandType standType = null;\n+    if (Files.exists(path)) {\n+      try {\n+        String data = new String(Files.readAllBytes(path)).toUpperCase();\n+        Optional<StandType> type = Arrays.stream(StandType.values()).filter(it -> data.contains(it.name())).findFirst();\n+        if (type.isPresent()) {\n+          standType = type.get();\n+        }\n+      } catch (Exception e) {", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NDg5OA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508274898", "bodyText": "\u043d\u0435\u0442 \u0442\u0443\u0442 IOException \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f (", "author": "SCREEN88", "createdAt": "2020-10-20T07:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMDg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMjA3OQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507832079", "bodyText": "\u0437\u0434\u0435\u0441\u044c \u0442\u043e\u0436\u0435 \u0440\u0430\u043d\u0442\u0430\u0439\u043c \u0431\u044b", "author": "dzharikhin", "createdAt": "2020-10-19T15:10:44Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String SERVICE_NAME_PROPERTY = \"serviceName\";\n+  private static final String DRIVER_NAME = \"org.postgresql.Driver\";\n+  private static final String STAND_TYPE_FACT_FILE = \"/etc/ansible/facts.d/test_stand_type.fact\";\n+  private static final String DB_URL = \"jdbc:postgresql://10.208.30.79:5432/at_stats\";\n+  private static final String LAUNCH_DATA_SQL = \"insert into unit_tests_launch_info (server_name, service_name, \" +\n+      \"branch_name, start_time) VALUES ('%s', '%s', '%s', '%s') returning unit_tests_launch_info_id\";\n+  private static final String RUN_DATA_SQL = \"INSERT INTO unit_tests_stats (unit_tests_launch_info_id, class_name, test_name, \" +\n+      \"status, duration, message) VALUES (?, ?, ?, ?::unit_test_status, ?, ?)\";\n+  private static final int INSERT_BATCH_SIZE = 1000;\n+  private final Map<String, TestExecResult> execResultMap;\n+  private boolean canUseDB;\n+\n+  public TestExecutorListener() {\n+    try {\n+      Class.forName(DRIVER_NAME);\n+      canUseDB = true;\n+    } catch (ClassNotFoundException e) {\n+      LOGGER.warn(\"Failed to load '{}' for junit test executor listener\", DRIVER_NAME, e);\n+      canUseDB = false;\n+    }\n+    execResultMap = new ConcurrentHashMap<>();\n+  }\n+\n+  @Override\n+  public void testPlanExecutionFinished(TestPlan testPlan) {\n+    StandType standType = getStandType();\n+    Connection connection = getNewConnection();\n+    String serviceName = (String) loadProperties().get(SERVICE_NAME_PROPERTY);\n+    if (connection == null || standType == null || serviceName == null || serviceName.length() == 0) {\n+      return;\n+    }\n+    try (PreparedStatement preparedStatement = connection.prepareStatement(RUN_DATA_SQL);\n+         Statement statement = connection.createStatement()) {\n+      connection.setAutoCommit(false);\n+      int launchId = sendLaunchDataAndGetId(serviceName, statement);\n+      sendExecutionData(preparedStatement, launchId);\n+      connection.commit();\n+      connection.setAutoCommit(true);\n+    } catch (Exception e) {", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NDI4Mw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508274283", "bodyText": "\u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f, SQLException \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 Exception", "author": "SCREEN88", "createdAt": "2020-10-20T07:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMjA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0OTcyMA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r509449720", "bodyText": "\u043d\u0443 \u0442\u0430\u043a \u0435\u0433\u043e \u0438 \u043b\u043e\u0432\u0438\u0442\u044c. \u043d\u0435 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u043b\u043e\u0432\u0438\u0442\u044c \u0447\u0435\u043a\u0435\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u043b\u043e\u0441\u044c \u043b\u043e\u0432\u0438\u0442\u044c \u0440\u0430\u043d\u044c\u0448\u0435, \u0447\u0442\u043e\u0431\u044b \u0435\u0441\u043b\u0438 \u0432\u0434\u0440\u0443\u0433 \u043e\u043d \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f - \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043b.\n\u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043b\u0443\u0447\u0448\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0447\u0435\u0440\u0435\u0437 |", "author": "dzharikhin", "createdAt": "2020-10-21T16:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMjA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDYwMQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507834601", "bodyText": "NabCommonConfig?", "author": "dzharikhin", "createdAt": "2020-10-19T15:14:18Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String SERVICE_NAME_PROPERTY = \"serviceName\";", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2ODIzOA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508268238", "bodyText": "\ud83d\udc4c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c", "author": "SCREEN88", "createdAt": "2020-10-20T07:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDg2Mg==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507834862", "bodyText": "\u043d\u0435 \u0444\u0430\u043a\u0442, \u0447\u0442\u043e \u0442\u0430\u043a \u043f\u0440\u043e\u043f\u0435\u0440\u0442\u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f. \u043c\u044b \u043d\u0435 \u0445\u0430\u0440\u0434\u043a\u043e\u0434\u0438\u043c \u0438\u043c\u044f", "author": "dzharikhin", "createdAt": "2020-10-19T15:14:37Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2NzI4NQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508267285", "bodyText": "\u0431\u0440\u0430\u043b \u043a\u0430\u043a \u0432 \u0441\u0442\u0430\u0440\u0442\u0430\u043f\u0435", "author": "SCREEN88", "createdAt": "2020-10-20T07:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMjEzNA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508312134", "bodyText": "\u043d\u0443 \u0432\u043e\u0442 \u0441\u0442\u0430\u0440\u0442\u0430\u043f - \u044d\u0442\u043e \u0436 \u043d\u0435 \u0444\u044e\u0440\u0435\u0440. \u043e\u043d\u043e \u0442\u0435\u0431\u0435 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0434\u0435\u0444\u043e\u043b\u0442 \u0432\u044b\u0434\u0430\u0435\u0442, \u043d\u043e \u0435\u0441\u043b\u0438 \u0442\u044b \u0435\u0433\u043e \u043f\u043e\u0442\u0440\u043e\u0433\u0430\u0435\u0448\u044c, \u0442\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u0442\u0435\u0431\u0435 \u0437\u0430 \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442. \u043c\u0435\u043d\u044f\u0435\u0448\u044c \u043a\u043e\u0434 \u0431\u0438\u043d\u0430 \u0438 \u043f\u043e\u0433\u043d\u0430\u043b\u0438. \u043d\u0443 \u0442\u0430\u043a\u043e\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043b\u043e \u043a\u0442\u043e, \u043d\u043e \u0438 \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u0432\u043e\u043e\u0431\u0449\u0435 \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 - \u043d\u0435\u043b\u044c\u0437\u044f", "author": "dzharikhin", "createdAt": "2020-10-20T08:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMjY4OQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508312689", "bodyText": "\u0430 \u0435\u0449\u0435 \u0432\u043e\u043f\u0440\u043e\u0441 - \u044d\u0442\u043e\u0442 \u043b\u0438\u0441\u0442\u0435\u043d\u0435\u0440 \u043a\u0430\u043a-\u0442\u043e \u0441\u043e\u0433\u043b\u0430\u0441\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u043e \u0441\u043f\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u043c? \u043c\u043e\u0436\u0435\u0442, \u0432\u043e\u043e\u0431\u0449\u0435 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u044e\u0437\u0430\u0442\u044c, \u043d\u0435?", "author": "dzharikhin", "createdAt": "2020-10-20T08:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyODYxNQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508328615", "bodyText": "\u044f \u043d\u0435 \u0437\u043d\u0430\u044e \u043a\u0430\u043a \u043b\u0443\u0447\u0448\u0435, \u0432 \u043d\u0430\u0431\u0435 \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u0437\u0430\u0445\u0430\u0440\u0434\u043a\u043e\u0436\u0435\u043d\u043e\n\n  \n    \n      nuts-and-bolts/nab-testbase/src/main/java/ru/hh/nab/testbase/NabTestConfig.java\n    \n    \n         Line 30\n      in\n      375e3ae\n    \n    \n    \n    \n\n        \n          \n           return createProperties(\"service-test.properties\");", "author": "SCREEN88", "createdAt": "2020-10-20T08:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzMTQ3Mw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508331473", "bodyText": "\u043d\u0435 \u043f\u043e\u043d\u044f\u043b \u043f\u0440\u043e \u043a\u0430\u043a\u043e\u0439 \u043b\u0438\u0441\u0442\u0435\u043d\u0435\u0440 \u0440\u0435\u0447, \u043c\u043e\u0436\u0435\u0442 \u0442\u044b \u0438\u043c\u0435\u0435\u0448\u044c \u0432\u0432\u0438\u0434\u0443 Extension?\n\u041d\u0443 \u0438 \u044f \u0441\u0442\u0430\u0440\u0430\u043b\u0441\u044f \u043e\u0442\u0432\u044f\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u0441\u0435\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0442\u0435\u0441\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438 \u0431\u0435\u0437 Spring-a, \u0434\u0430\u0436\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0433\u0434\u0435 \u043e\u043d \u0435\u0441\u0442\u044c", "author": "SCREEN88", "createdAt": "2020-10-20T09:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNDg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNzIyNA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507837224", "bodyText": "\u0447\u0442\u043e \u043c\u0435\u0448\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u0442\u043e \u0443\u0436 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u0430\u044e\u0437\u0430\u0442\u044c?", "author": "dzharikhin", "createdAt": "2020-10-19T15:17:37Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String SERVICE_NAME_PROPERTY = \"serviceName\";\n+  private static final String DRIVER_NAME = \"org.postgresql.Driver\";\n+  private static final String STAND_TYPE_FACT_FILE = \"/etc/ansible/facts.d/test_stand_type.fact\";\n+  private static final String DB_URL = \"jdbc:postgresql://10.208.30.79:5432/at_stats\";\n+  private static final String LAUNCH_DATA_SQL = \"insert into unit_tests_launch_info (server_name, service_name, \" +\n+      \"branch_name, start_time) VALUES ('%s', '%s', '%s', '%s') returning unit_tests_launch_info_id\";\n+  private static final String RUN_DATA_SQL = \"INSERT INTO unit_tests_stats (unit_tests_launch_info_id, class_name, test_name, \" +\n+      \"status, duration, message) VALUES (?, ?, ?, ?::unit_test_status, ?, ?)\";\n+  private static final int INSERT_BATCH_SIZE = 1000;\n+  private final Map<String, TestExecResult> execResultMap;\n+  private boolean canUseDB;\n+\n+  public TestExecutorListener() {\n+    try {\n+      Class.forName(DRIVER_NAME);\n+      canUseDB = true;\n+    } catch (ClassNotFoundException e) {\n+      LOGGER.warn(\"Failed to load '{}' for junit test executor listener\", DRIVER_NAME, e);\n+      canUseDB = false;\n+    }\n+    execResultMap = new ConcurrentHashMap<>();\n+  }\n+\n+  @Override\n+  public void testPlanExecutionFinished(TestPlan testPlan) {\n+    StandType standType = getStandType();\n+    Connection connection = getNewConnection();\n+    String serviceName = (String) loadProperties().get(SERVICE_NAME_PROPERTY);\n+    if (connection == null || standType == null || serviceName == null || serviceName.length() == 0) {\n+      return;\n+    }\n+    try (PreparedStatement preparedStatement = connection.prepareStatement(RUN_DATA_SQL);\n+         Statement statement = connection.createStatement()) {\n+      connection.setAutoCommit(false);\n+      int launchId = sendLaunchDataAndGetId(serviceName, statement);\n+      sendExecutionData(preparedStatement, launchId);\n+      connection.commit();\n+      connection.setAutoCommit(true);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Fail to insert test execution data, making rollback\", e);\n+      try {\n+        connection.rollback();\n+      } catch (SQLException t) {\n+        LOGGER.error(\"Fail to rollback!\", t);\n+      }\n+    } finally {\n+      try {\n+        connection.close();\n+      } catch (SQLException e) {\n+        LOGGER.error(\"Fail to close JDBC connection for url '{}'\", DB_URL, e);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void executionSkipped(TestIdentifier testIdentifier, String reason) {\n+    TestExecResult testExecResult = getTestExecResult(testIdentifier);\n+    testExecResult.setEndTime(testExecResult.getStartTime());\n+    testExecResult.setStatus(ResultStatus.SKIPPED);\n+    execResultMap.put(testIdentifier.getUniqueId(), testExecResult);\n+  }\n+\n+  @Override\n+  public void executionStarted(TestIdentifier testIdentifier) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    execResultMap.put(testIdentifier.getUniqueId(), getTestExecResult(testIdentifier));\n+  }\n+\n+  @Override\n+  public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    TestExecResult testExecResult = execResultMap.get(testIdentifier.getUniqueId());\n+    testExecResult.setEndTime(Instant.now());\n+    switch (testExecutionResult.getStatus()) {\n+      case ABORTED:\n+        return;\n+      case FAILED:\n+        testExecResult.setStatus(ResultStatus.FAILED);\n+        Optional<Throwable> optionalThrowable = testExecutionResult.getThrowable();\n+        optionalThrowable.ifPresent(throwable -> testExecResult.setMessage(throwable.getMessage()));\n+        break;\n+      case SUCCESSFUL:\n+        testExecResult.setStatus(ResultStatus.SUCCESSFUL);\n+        break;\n+    }\n+  }\n+\n+  private TestExecResult getTestExecResult(TestIdentifier testIdentifier) {\n+    Optional<TestSource> source = testIdentifier.getSource();\n+    String className = testIdentifier.getParentId().orElse(\"noname\");\n+    String methodName = testIdentifier.getDisplayName();\n+    if (source.isPresent() && source.get() instanceof MethodSource) {\n+      MethodSource methodSource = (MethodSource) source.get();\n+      className = methodSource.getClassName();\n+      methodName = methodSource.getMethodName();\n+    }\n+    return new TestExecResult(className, methodName);\n+  }\n+\n+  private int sendLaunchDataAndGetId(String serviceName, Statement statement) throws SQLException {\n+    String query = String.format(\n+        LAUNCH_DATA_SQL,\n+        getComputerName(),\n+        serviceName,\n+        getCurrentGitBranch(),\n+        LocalDateTime.now().toInstant(ZoneOffset.UTC)\n+    );\n+    ResultSet resultSet = statement.executeQuery(query);\n+    resultSet.next();\n+    return resultSet.getInt(1);\n+  }\n+\n+  private void sendExecutionData(PreparedStatement preparedStatement, int launchId) throws SQLException {\n+    int count = 0;\n+    for (TestExecResult result : execResultMap.values()) {\n+      preparedStatement.setInt(1, launchId);\n+      preparedStatement.setString(2, result.getClassName());\n+      preparedStatement.setString(3, result.getMethodName());\n+      preparedStatement.setString(4, result.getStatus().name());\n+      preparedStatement.setLong(5, Duration.between(result.getStartTime(), result.getEndTime()).toMillis());\n+      if (result.getMessage() == null) {\n+        preparedStatement.setNull(6, Types.VARCHAR);\n+      } else {\n+        preparedStatement.setString(6, result.getMessage());\n+      }\n+      preparedStatement.addBatch();\n+      if (++count % INSERT_BATCH_SIZE == 0) {\n+        preparedStatement.executeBatch();\n+      }\n+    }\n+    preparedStatement.executeBatch();\n+  }\n+\n+  public Connection getNewConnection() {\n+    if (canUseDB) {\n+      try {\n+        return DriverManager.getConnection(DB_URL, \"at_stats\", \"at_stats_password\");\n+      } catch (SQLException | RuntimeException e) {\n+        LOGGER.warn(\"Failed to create DB connection for junit test executor listener\");\n+      }\n+    }\n+    return null;\n+  }\n+\n+  public String getCurrentGitBranch() {\n+    try {\n+      Process process = Runtime.getRuntime().exec(\"git rev-parse --abbrev-ref HEAD\");\n+      process.waitFor();\n+      BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+      return reader.readLine();\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.warn(\"Couldn't get current git branch from test listener\", e);\n+    }\n+    return \"unknown\";\n+  }\n+\n+  private StandType getStandType() {\n+    Path path = Paths.get(STAND_TYPE_FACT_FILE);\n+    StandType standType = null;\n+    if (Files.exists(path)) {\n+      try {\n+        String data = new String(Files.readAllBytes(path)).toUpperCase();\n+        Optional<StandType> type = Arrays.stream(StandType.values()).filter(it -> data.contains(it.name())).findFirst();\n+        if (type.isPresent()) {\n+          standType = type.get();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Failed to create DB connection for junit test executor listener\");\n+      }\n+    }\n+    return standType;\n+  }\n+\n+  private String getComputerName() {\n+    String hostName;\n+    try {\n+      hostName = InetAddress.getLocalHost().getHostName();\n+    } catch (UnknownHostException e) {\n+      hostName = \"unknown\";\n+    }\n+    return hostName;\n+  }\n+\n+  public Properties loadProperties() {\n+    Properties prop = new Properties();\n+    try (InputStream inputStream = this.getClass().getResourceAsStream(\"/\" + SERVICE_NAME_PROPERTY_FILE)) {\n+      prop.load(inputStream);\n+    } catch (IOException e) {\n+      e.printStackTrace(System.out);", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjEyMA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508272120", "bodyText": "\u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043b, \u043f\u043e\u043f\u0440\u0430\u0432\u043b\u044e", "author": "SCREEN88", "createdAt": "2020-10-20T07:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNzIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzODc2Nw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507838767", "bodyText": "\u043f\u0430\u0440\u043e\u043b\u044c \u0431\u044b \u0442\u043e\u0436\u0435 \u043a\u0430\u043a-\u0442\u043e \u043d\u0435 \u0445\u0430\u0440\u0434\u043a\u043e\u0434\u0438\u0442\u044c", "author": "dzharikhin", "createdAt": "2020-10-19T15:19:44Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String SERVICE_NAME_PROPERTY = \"serviceName\";\n+  private static final String DRIVER_NAME = \"org.postgresql.Driver\";\n+  private static final String STAND_TYPE_FACT_FILE = \"/etc/ansible/facts.d/test_stand_type.fact\";\n+  private static final String DB_URL = \"jdbc:postgresql://10.208.30.79:5432/at_stats\";\n+  private static final String LAUNCH_DATA_SQL = \"insert into unit_tests_launch_info (server_name, service_name, \" +\n+      \"branch_name, start_time) VALUES ('%s', '%s', '%s', '%s') returning unit_tests_launch_info_id\";\n+  private static final String RUN_DATA_SQL = \"INSERT INTO unit_tests_stats (unit_tests_launch_info_id, class_name, test_name, \" +\n+      \"status, duration, message) VALUES (?, ?, ?, ?::unit_test_status, ?, ?)\";\n+  private static final int INSERT_BATCH_SIZE = 1000;\n+  private final Map<String, TestExecResult> execResultMap;\n+  private boolean canUseDB;\n+\n+  public TestExecutorListener() {\n+    try {\n+      Class.forName(DRIVER_NAME);\n+      canUseDB = true;\n+    } catch (ClassNotFoundException e) {\n+      LOGGER.warn(\"Failed to load '{}' for junit test executor listener\", DRIVER_NAME, e);\n+      canUseDB = false;\n+    }\n+    execResultMap = new ConcurrentHashMap<>();\n+  }\n+\n+  @Override\n+  public void testPlanExecutionFinished(TestPlan testPlan) {\n+    StandType standType = getStandType();\n+    Connection connection = getNewConnection();\n+    String serviceName = (String) loadProperties().get(SERVICE_NAME_PROPERTY);\n+    if (connection == null || standType == null || serviceName == null || serviceName.length() == 0) {\n+      return;\n+    }\n+    try (PreparedStatement preparedStatement = connection.prepareStatement(RUN_DATA_SQL);\n+         Statement statement = connection.createStatement()) {\n+      connection.setAutoCommit(false);\n+      int launchId = sendLaunchDataAndGetId(serviceName, statement);\n+      sendExecutionData(preparedStatement, launchId);\n+      connection.commit();\n+      connection.setAutoCommit(true);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Fail to insert test execution data, making rollback\", e);\n+      try {\n+        connection.rollback();\n+      } catch (SQLException t) {\n+        LOGGER.error(\"Fail to rollback!\", t);\n+      }\n+    } finally {\n+      try {\n+        connection.close();\n+      } catch (SQLException e) {\n+        LOGGER.error(\"Fail to close JDBC connection for url '{}'\", DB_URL, e);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void executionSkipped(TestIdentifier testIdentifier, String reason) {\n+    TestExecResult testExecResult = getTestExecResult(testIdentifier);\n+    testExecResult.setEndTime(testExecResult.getStartTime());\n+    testExecResult.setStatus(ResultStatus.SKIPPED);\n+    execResultMap.put(testIdentifier.getUniqueId(), testExecResult);\n+  }\n+\n+  @Override\n+  public void executionStarted(TestIdentifier testIdentifier) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    execResultMap.put(testIdentifier.getUniqueId(), getTestExecResult(testIdentifier));\n+  }\n+\n+  @Override\n+  public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+    if (testIdentifier.getType().isContainer()) {\n+      return;\n+    }\n+    TestExecResult testExecResult = execResultMap.get(testIdentifier.getUniqueId());\n+    testExecResult.setEndTime(Instant.now());\n+    switch (testExecutionResult.getStatus()) {\n+      case ABORTED:\n+        return;\n+      case FAILED:\n+        testExecResult.setStatus(ResultStatus.FAILED);\n+        Optional<Throwable> optionalThrowable = testExecutionResult.getThrowable();\n+        optionalThrowable.ifPresent(throwable -> testExecResult.setMessage(throwable.getMessage()));\n+        break;\n+      case SUCCESSFUL:\n+        testExecResult.setStatus(ResultStatus.SUCCESSFUL);\n+        break;\n+    }\n+  }\n+\n+  private TestExecResult getTestExecResult(TestIdentifier testIdentifier) {\n+    Optional<TestSource> source = testIdentifier.getSource();\n+    String className = testIdentifier.getParentId().orElse(\"noname\");\n+    String methodName = testIdentifier.getDisplayName();\n+    if (source.isPresent() && source.get() instanceof MethodSource) {\n+      MethodSource methodSource = (MethodSource) source.get();\n+      className = methodSource.getClassName();\n+      methodName = methodSource.getMethodName();\n+    }\n+    return new TestExecResult(className, methodName);\n+  }\n+\n+  private int sendLaunchDataAndGetId(String serviceName, Statement statement) throws SQLException {\n+    String query = String.format(\n+        LAUNCH_DATA_SQL,\n+        getComputerName(),\n+        serviceName,\n+        getCurrentGitBranch(),\n+        LocalDateTime.now().toInstant(ZoneOffset.UTC)\n+    );\n+    ResultSet resultSet = statement.executeQuery(query);\n+    resultSet.next();\n+    return resultSet.getInt(1);\n+  }\n+\n+  private void sendExecutionData(PreparedStatement preparedStatement, int launchId) throws SQLException {\n+    int count = 0;\n+    for (TestExecResult result : execResultMap.values()) {\n+      preparedStatement.setInt(1, launchId);\n+      preparedStatement.setString(2, result.getClassName());\n+      preparedStatement.setString(3, result.getMethodName());\n+      preparedStatement.setString(4, result.getStatus().name());\n+      preparedStatement.setLong(5, Duration.between(result.getStartTime(), result.getEndTime()).toMillis());\n+      if (result.getMessage() == null) {\n+        preparedStatement.setNull(6, Types.VARCHAR);\n+      } else {\n+        preparedStatement.setString(6, result.getMessage());\n+      }\n+      preparedStatement.addBatch();\n+      if (++count % INSERT_BATCH_SIZE == 0) {\n+        preparedStatement.executeBatch();\n+      }\n+    }\n+    preparedStatement.executeBatch();\n+  }\n+\n+  public Connection getNewConnection() {\n+    if (canUseDB) {\n+      try {\n+        return DriverManager.getConnection(DB_URL, \"at_stats\", \"at_stats_password\");", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTA2Nw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508271067", "bodyText": "\u0438\u0434\u0435\u0438? \u041c\u043e\u0436\u043d\u043e \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c, \u043d\u043e \u044d\u0442\u043e \u0433\u0435\u043c\u043e\u0440\u043e\u0439 \u0436\u0443\u0442\u043a\u0438\u0439 ((", "author": "SCREEN88", "createdAt": "2020-10-20T07:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzODc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMzI3MA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508313270", "bodyText": "\u043d\u0435 \u0442\u0430\u043a\u043e\u0439 \u0436\u0443\u0442\u043a\u0438\u0439, \u043a\u0430\u043a \u043a\u043e\u0433\u0434\u0430 \u0443 \u0442\u0435\u0431\u044f \u0431\u0430\u0437\u0430 \u043f\u0435\u0440\u0435\u0435\u0434\u0435\u0442 \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u044e\u0437\u0435\u0440\u0430 \u0441\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0438 \u0442\u0435\u0431\u0435 \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u0440\u043e\u0447\u043d\u043e \u0432\u0441\u044e\u0434\u0443 \u043d\u043e\u0432\u044b\u0439 \u0440\u0435\u043b\u0438\u0437 \u043d\u0430\u0431\u0430 \u0432\u0442\u044b\u043a\u0430\u0442\u044c", "author": "dzharikhin", "createdAt": "2020-10-20T08:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzODc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1NDIxOA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r507854218", "bodyText": "\u0430 \u0442\u0443\u0442  bind \u0447\u0435\u043c \u0442\u043e \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442?", "author": "heruv1m", "createdAt": "2020-10-19T15:39:55Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String SERVICE_NAME_PROPERTY = \"serviceName\";\n+  private static final String DRIVER_NAME = \"org.postgresql.Driver\";\n+  private static final String STAND_TYPE_FACT_FILE = \"/etc/ansible/facts.d/test_stand_type.fact\";\n+  private static final String DB_URL = \"jdbc:postgresql://10.208.30.79:5432/at_stats\";\n+  private static final String LAUNCH_DATA_SQL = \"insert into unit_tests_launch_info (server_name, service_name, \" +", "originalCommit": "42b6daecf1855998e07bf366b23a1236f9e9b630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MDA0MA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r508270040", "bodyText": "\u0442\u0435\u043c \u0447\u0442\u043e \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0430 \u0441 \u0431\u0438\u043d\u0434\u043e\u043c \u0442\u0443\u0442 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0430 \u0432 3 \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u0434\u0430 \u043f\u0438\u0441\u0430\u0442\u044c (", "author": "SCREEN88", "createdAt": "2020-10-20T07:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1NDIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex fb1316c9..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -6,9 +6,6 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.PreparedStatement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyNzc0Mw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r509227743", "bodyText": "\u043a \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u044b \u0432\u044b\u0441\u0442\u0430\u0432\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0436\u0434\u0430\u0442\u044c \u043f\u043e\u043a\u0430 \u0432\u0441\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u044a\u0435\u0434\u0435\u0442. \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u0447\u0442\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0436\u0430\u0440\u0430 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u043e \u0437\u0430\u0442\u044e\u043d\u0438\u0442\u044c", "author": "dzharikhin", "createdAt": "2020-10-21T12:15:45Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -180,14 +177,31 @@ private void sendExecutionData(PreparedStatement preparedStatement, int launchId\n   public Connection getNewConnection() {\n     if (canUseDB) {\n       try {\n-        return DriverManager.getConnection(DB_URL, \"at_stats\", \"at_stats_password\");\n+        return DriverManager.getConnection(getDbUrl(), System.getenv(\"TEST_DB_LOGIN\"), System.getenv(\"TEST_DB_PASSWORD\"));\n       } catch (SQLException | RuntimeException e) {\n         LOGGER.warn(\"Failed to create DB connection for junit test executor listener\");\n       }\n     }\n     return null;\n   }\n \n+  private StandType getStandType() {\n+    try {\n+      return StandType.valueOf(System.getenv(\"STAND_TYPE\").toUpperCase());\n+    } catch (IllegalArgumentException e) {\n+      LOGGER.warn(\"Fail to get stand type\");\n+    }\n+    return null;\n+  }\n+\n+  private String getDbUrl() {\n+    return String.format(\"jdbc:postgresql://%s:%s/%s\",\n+        System.getenv(\"TEST_DB_HOST\"),", "originalCommit": "9f883d912db624a0caae59f50a86a2737dea2a1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex 1596e82b..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -177,7 +169,11 @@ public class TestExecutorListener implements TestExecutionListener {\n   public Connection getNewConnection() {\n     if (canUseDB) {\n       try {\n-        return DriverManager.getConnection(getDbUrl(), System.getenv(\"TEST_DB_LOGIN\"), System.getenv(\"TEST_DB_PASSWORD\"));\n+        return DriverManager.getConnection(\n+            getDbUrl(),\n+            getEnvOrDefault(\"TEST_DB_LOGIN\", \"at_stats\"),\n+            getEnvOrDefault(\"TEST_DB_PASSWORD\", \"at_stats_password\")\n+        );\n       } catch (SQLException | RuntimeException e) {\n         LOGGER.warn(\"Failed to create DB connection for junit test executor listener\");\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ1MDc3OQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/269#discussion_r509450779", "bodyText": "\u0432\u043e\u0442 \u044d\u0442\u0443 \u0434\u0430\u0432\u0430\u0439 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0442\u0430\u0449\u0438\u043c \u0442\u0438\u043f\u0430 tryCloseOrLogException - \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u0435\u043b\u043e\u0447\u043a\u0438", "author": "dzharikhin", "createdAt": "2020-10-21T16:59:10Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java", "diffHunk": "@@ -0,0 +1,247 @@\n+package ru.hh.nab.testbase.listeners;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import ru.hh.nab.starter.NabCommonConfig;\n+import ru.hh.nab.testbase.listeners.dto.ResultStatus;\n+import ru.hh.nab.testbase.listeners.dto.StandType;\n+import ru.hh.nab.testbase.listeners.dto.TestExecResult;\n+\n+public class TestExecutorListener implements TestExecutionListener {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TestExecutorListener.class);\n+  private static final String SERVICE_NAME_PROPERTY_FILE = \"service-test.properties\";\n+  private static final String DRIVER_NAME = \"org.postgresql.Driver\";\n+  private static final String LAUNCH_DATA_SQL = \"insert into unit_tests_launch_info (server_name, service_name, \" +\n+      \"branch_name, start_time, end_time) VALUES ('%s', '%s', '%s', '%s', '%s') returning unit_tests_launch_info_id\";\n+  private static final String RUN_DATA_SQL = \"INSERT INTO unit_tests_stats (unit_tests_launch_info_id, class_name, test_name, \" +\n+      \"status, duration, message) VALUES (?, ?, ?, ?::unit_test_status, ?, ?)\";\n+  private static final int INSERT_BATCH_SIZE = 1000;\n+  private final Map<String, TestExecResult> execResultMap;\n+  private final LocalDateTime startTime;\n+  private boolean canUseDB;\n+\n+  public TestExecutorListener() {\n+    try {\n+      Class.forName(DRIVER_NAME);\n+      canUseDB = true;\n+    } catch (ClassNotFoundException e) {\n+      LOGGER.warn(\"Failed to load '{}' for junit test executor listener\", DRIVER_NAME, e);\n+      canUseDB = false;\n+    }\n+    startTime = LocalDateTime.now();\n+    execResultMap = new ConcurrentHashMap<>();\n+  }\n+\n+  @Override\n+  public void testPlanExecutionFinished(TestPlan testPlan) {\n+    StandType standType = getStandType();\n+    Connection connection = getNewConnection();\n+    String serviceName = (String) loadProperties().get(NabCommonConfig.SERVICE_NAME_PROPERTY);\n+    if (connection == null || standType == null || serviceName == null || serviceName.length() == 0) {\n+      return;\n+    }\n+    try (PreparedStatement preparedStatement = connection.prepareStatement(RUN_DATA_SQL);\n+         Statement statement = connection.createStatement()) {\n+      connection.setAutoCommit(false);\n+      int launchId = sendLaunchDataAndGetId(serviceName, statement);\n+      sendExecutionData(preparedStatement, launchId);\n+      connection.commit();\n+      connection.setAutoCommit(true);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Fail to insert test execution data, making rollback\", e);\n+      try {\n+        connection.rollback();\n+      } catch (SQLException t) {\n+        LOGGER.error(\"Fail to rollback!\", t);\n+      }\n+    } finally {\n+      try {", "originalCommit": "139148b0bb66dc2761ee4ecee92b27eb01757501", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "chunk": "diff --git a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\nindex bc551c85..cd1f6135 100644\n--- a/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n+++ b/nab-testbase/src/main/java/ru/hh/nab/testbase/listeners/TestExecutorListener.java\n\n@@ -74,19 +74,11 @@ public class TestExecutorListener implements TestExecutionListener {\n       sendExecutionData(preparedStatement, launchId);\n       connection.commit();\n       connection.setAutoCommit(true);\n-    } catch (Exception e) {\n+    } catch (SQLException e) {\n       LOGGER.error(\"Fail to insert test execution data, making rollback\", e);\n-      try {\n-        connection.rollback();\n-      } catch (SQLException t) {\n-        LOGGER.error(\"Fail to rollback!\", t);\n-      }\n+      tryRollbackOrLogException(connection);\n     } finally {\n-      try {\n-        connection.close();\n-      } catch (SQLException e) {\n-        LOGGER.error(\"Fail to close JDBC connection for url '{}'\", getDbUrl(), e);\n-      }\n+      tryCloseOrLogException(connection);\n     }\n   }\n \n"}}, {"oid": "75223f09742deb282e3d20f0034cf0385b7ab5e8", "url": "https://github.com/hhru/nuts-and-bolts/commit/75223f09742deb282e3d20f0034cf0385b7ab5e8", "message": "HH-118126 add TestExecutorListener", "committedDate": "2020-10-22T14:51:52Z", "type": "forcePushed"}, {"oid": "6f346338a8fb0dc2d9cf7a9cd2135254018b7819", "url": "https://github.com/hhru/nuts-and-bolts/commit/6f346338a8fb0dc2d9cf7a9cd2135254018b7819", "message": "HH-118126 add TestExecutorListener", "committedDate": "2020-10-27T09:51:03Z", "type": "forcePushed"}, {"oid": "105446d162adfb2f4b8232b31ceda055fa319d58", "url": "https://github.com/hhru/nuts-and-bolts/commit/105446d162adfb2f4b8232b31ceda055fa319d58", "message": "HH-118126 add TestExecutorListener", "committedDate": "2020-11-03T13:44:53Z", "type": "commit"}, {"oid": "105446d162adfb2f4b8232b31ceda055fa319d58", "url": "https://github.com/hhru/nuts-and-bolts/commit/105446d162adfb2f4b8232b31ceda055fa319d58", "message": "HH-118126 add TestExecutorListener", "committedDate": "2020-11-03T13:44:53Z", "type": "forcePushed"}]}