{"pr_number": 1414, "pr_title": "issue #693 - memberOf handles maxValueSet and all-languages value set", "pr_createdAt": "2020-08-14T14:47:52Z", "pr_url": "https://github.com/IBM/FHIR/pull/1414", "timeline": [{"oid": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "url": "https://github.com/IBM/FHIR/commit/c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "message": "issue #693 - memberOf handles maxValueSet and all-languages value set\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-08-13T22:27:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4OTE5OQ==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470689199", "bodyText": "what is the split for?", "author": "lmsurpre", "createdAt": "2020-08-14T15:18:21Z", "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -119,16 +124,108 @@ public int getMaxArity() {\n                     }\n                 }\n                 return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n-            } else {\n+            }\n+            else if (isSyntaxBased(valueSet)) {\n+                \n+                // Validate against syntax-based value set\n+                if (validateAgainstSyntaxBasedValueSet(valueSet, evaluationContext, elementNode, strength)) {\n+                    return SINGLETON_TRUE;\n+                }\n+                return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n+            }\n+            else {\n                 generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.INCOMPLETE, \"Membership check was not performed: value set '\" + url + \"' is empty or could not be expanded\", elementNode.path());\n             }\n-        } else {\n+        }\n+        else {\n             generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.NOT_SUPPORTED, \"Membership check was not performed: value set '\" + url + \"' is not supported\", elementNode.path());\n         }\n \n         return SINGLETON_TRUE;\n     }\n \n+    /**\n+     * Determines if the value set is syntax-based.\n+     * @param valueSet the value set\n+     * @return true or false\n+     */\n+    private boolean isSyntaxBased(ValueSet valueSet) {\n+        String valueSetUrl = valueSet.getUrl() != null ? valueSet.getUrl().getValue().split(\"\\\\|\")[0] : null;", "originalCommit": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczMTUwNw==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470731507", "bodyText": "In case the profile specified a canonical with a version, I used the same split as done in CodeGenerator to just compare the URL part.", "author": "tbieste", "createdAt": "2020-08-14T16:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4OTE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "390232970f5758a99e4f2fe990dddff3af218c83", "chunk": "diff --git a/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java b/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\nindex 18bfb80f66..05f22b1dcc 100644\n--- a/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\n+++ b/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\n\n@@ -195,7 +195,7 @@ public class MemberOfFunction extends FHIRPathAbstractFunction {\n      * Issues will be added to evaluation context if validation is not successful.\n      * @param valueSet the value set\n      * @param code the code to validate\n-     * @param code the coding to validate\n+     * @param coding the coding to validate\n      * @param codeableConcept the codeable concept to validate\n      * @param evaluationContext the evaluation context\n      * @param elementNode the element node to validate\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5OTg0NQ==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470699845", "bodyText": "seems a bit odd not to handle the element.is(Uri.class) in the if/else block with the others, but I suppose its fine", "author": "lmsurpre", "createdAt": "2020-08-14T15:33:30Z", "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -119,16 +124,108 @@ public int getMaxArity() {\n                     }\n                 }\n                 return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n-            } else {\n+            }\n+            else if (isSyntaxBased(valueSet)) {\n+                \n+                // Validate against syntax-based value set\n+                if (validateAgainstSyntaxBasedValueSet(valueSet, evaluationContext, elementNode, strength)) {\n+                    return SINGLETON_TRUE;\n+                }\n+                return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n+            }\n+            else {\n                 generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.INCOMPLETE, \"Membership check was not performed: value set '\" + url + \"' is empty or could not be expanded\", elementNode.path());\n             }\n-        } else {\n+        }\n+        else {\n             generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.NOT_SUPPORTED, \"Membership check was not performed: value set '\" + url + \"' is not supported\", elementNode.path());\n         }\n \n         return SINGLETON_TRUE;\n     }\n \n+    /**\n+     * Determines if the value set is syntax-based.\n+     * @param valueSet the value set\n+     * @return true or false\n+     */\n+    private boolean isSyntaxBased(ValueSet valueSet) {\n+        String valueSetUrl = valueSet.getUrl() != null ? valueSet.getUrl().getValue().split(\"\\\\|\")[0] : null;\n+        return ALL_LANG_VALUE_SET_URL.equals(valueSetUrl);\n+    }\n+    \n+    /**\n+     * Validates the element against the syntax-based value set.\n+     * @param valueSet the value set\n+     * @param evaluationContext the evaluation context\n+     * @param elementNode the element node to validate\n+     * @param strength the binding strength\n+     * @return true if validation was successful, otherwise false\n+     */\n+    private boolean validateAgainstSyntaxBasedValueSet(ValueSet valueSet, EvaluationContext evaluationContext, FHIRPathElementNode elementNode, String strength) {\n+        Element element = elementNode.element();\n+        Code code = null;\n+        Coding coding = null;\n+        CodeableConcept codeableConcept = null;\n+\n+        // Determine the system/version/code or CodableConcept to validate\n+        if (element.is(Code.class)) {\n+            code = element.as(Code.class);\n+        }\n+        else if (element.is(Coding.class)) {\n+            coding = element.as(Coding.class);\n+        }\n+        else if (element.is(CodeableConcept.class)) {\n+            codeableConcept = element.as(CodeableConcept.class);\n+        }\n+        else if (element.is(Quantity.class)) {\n+            Quantity quantity = element.as(Quantity.class);\n+            coding = Coding.builder().system(quantity.getSystem()).code(quantity.getCode()).build();\n+        }\n+        else {\n+            code = element.is(FHIR_STRING) ? Code.of(element.as(FHIR_STRING).getValue()) : Code.of(element.as(Uri.class).getValue());", "originalCommit": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNzQ2NA==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470717464", "bodyText": "I kept the same if/else logic as used in the apply(...) method (around line 121) for expanded value sets to be consistent.  I can change both places if there's a way that would be better.", "author": "tbieste", "createdAt": "2020-08-14T16:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5OTg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "390232970f5758a99e4f2fe990dddff3af218c83", "chunk": "diff --git a/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java b/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\nindex 18bfb80f66..05f22b1dcc 100644\n--- a/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\n+++ b/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\n\n@@ -195,7 +195,7 @@ public class MemberOfFunction extends FHIRPathAbstractFunction {\n      * Issues will be added to evaluation context if validation is not successful.\n      * @param valueSet the value set\n      * @param code the code to validate\n-     * @param code the coding to validate\n+     * @param coding the coding to validate\n      * @param codeableConcept the codeable concept to validate\n      * @param evaluationContext the evaluation context\n      * @param elementNode the element node to validate\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwMjc0OQ==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470702749", "bodyText": "maybe just combine it with the method above and take an Element?\nthen you just need one if/else block, right?  maybe a \"horse apiece\" though.", "author": "lmsurpre", "createdAt": "2020-08-14T15:39:04Z", "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -119,16 +124,108 @@ public int getMaxArity() {\n                     }\n                 }\n                 return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n-            } else {\n+            }\n+            else if (isSyntaxBased(valueSet)) {\n+                \n+                // Validate against syntax-based value set\n+                if (validateAgainstSyntaxBasedValueSet(valueSet, evaluationContext, elementNode, strength)) {\n+                    return SINGLETON_TRUE;\n+                }\n+                return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n+            }\n+            else {\n                 generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.INCOMPLETE, \"Membership check was not performed: value set '\" + url + \"' is empty or could not be expanded\", elementNode.path());\n             }\n-        } else {\n+        }\n+        else {\n             generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.NOT_SUPPORTED, \"Membership check was not performed: value set '\" + url + \"' is not supported\", elementNode.path());\n         }\n \n         return SINGLETON_TRUE;\n     }\n \n+    /**\n+     * Determines if the value set is syntax-based.\n+     * @param valueSet the value set\n+     * @return true or false\n+     */\n+    private boolean isSyntaxBased(ValueSet valueSet) {\n+        String valueSetUrl = valueSet.getUrl() != null ? valueSet.getUrl().getValue().split(\"\\\\|\")[0] : null;\n+        return ALL_LANG_VALUE_SET_URL.equals(valueSetUrl);\n+    }\n+    \n+    /**\n+     * Validates the element against the syntax-based value set.\n+     * @param valueSet the value set\n+     * @param evaluationContext the evaluation context\n+     * @param elementNode the element node to validate\n+     * @param strength the binding strength\n+     * @return true if validation was successful, otherwise false\n+     */\n+    private boolean validateAgainstSyntaxBasedValueSet(ValueSet valueSet, EvaluationContext evaluationContext, FHIRPathElementNode elementNode, String strength) {\n+        Element element = elementNode.element();\n+        Code code = null;\n+        Coding coding = null;\n+        CodeableConcept codeableConcept = null;\n+\n+        // Determine the system/version/code or CodableConcept to validate\n+        if (element.is(Code.class)) {\n+            code = element.as(Code.class);\n+        }\n+        else if (element.is(Coding.class)) {\n+            coding = element.as(Coding.class);\n+        }\n+        else if (element.is(CodeableConcept.class)) {\n+            codeableConcept = element.as(CodeableConcept.class);\n+        }\n+        else if (element.is(Quantity.class)) {\n+            Quantity quantity = element.as(Quantity.class);\n+            coding = Coding.builder().system(quantity.getSystem()).code(quantity.getCode()).build();\n+        }\n+        else {\n+            code = element.is(FHIR_STRING) ? Code.of(element.as(FHIR_STRING).getValue()) : Code.of(element.as(Uri.class).getValue());\n+        }\n+        \n+        return validateCodeAgainstSyntaxBasedValuedSet(valueSet, code, coding, codeableConcept, evaluationContext, elementNode, strength);\n+    }\n+    \n+    /**\n+     * Validates the Code, Coding, CodableConcept against the syntax based value set.\n+     * Only one of Code, Coding, or CodeableConept should be passed in.\n+     * Issues will be added to evaluation context if validation is not successful.\n+     * @param valueSet the value set\n+     * @param code the code to validate\n+     * @param code the coding to validate\n+     * @param codeableConcept the codeable concept to validate\n+     * @param evaluationContext the evaluation context\n+     * @param elementNode the element node to validate\n+     * @param strength the binding strength\n+     * @return true if validation was successful, otherwise false\n+     */\n+    private boolean validateCodeAgainstSyntaxBasedValuedSet(ValueSet valueSet, Code code, Coding coding, CodeableConcept codeableConcept, EvaluationContext evaluationContext, FHIRPathElementNode elementNode, String strength) {", "originalCommit": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyMjg5Mw==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470722893", "bodyText": "Yeah, I went back and forth on that.  My goal was to minimize the number of lines of code to be added for any future syntax-based value sets (e.g. UCUM), so I thought this ended up looking cleaner.", "author": "tbieste", "createdAt": "2020-08-14T16:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwMjc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "390232970f5758a99e4f2fe990dddff3af218c83", "chunk": "diff --git a/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java b/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\nindex 18bfb80f66..05f22b1dcc 100644\n--- a/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\n+++ b/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\n\n@@ -195,7 +195,7 @@ public class MemberOfFunction extends FHIRPathAbstractFunction {\n      * Issues will be added to evaluation context if validation is not successful.\n      * @param valueSet the value set\n      * @param code the code to validate\n-     * @param code the coding to validate\n+     * @param coding the coding to validate\n      * @param codeableConcept the codeable concept to validate\n      * @param evaluationContext the evaluation context\n      * @param elementNode the element node to validate\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwNjYzNg==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470706636", "bodyText": "I wonder if one of these should include the word MaxValueSet or ConstraintGenerator to make it clear what the test is for", "author": "lmsurpre", "createdAt": "2020-08-14T15:46:25Z", "path": "fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.validation.test;\n+\n+import static com.ibm.fhir.path.util.FHIRPathUtil.compile;\n+import static org.testng.Assert.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.annotation.Constraint;\n+import com.ibm.fhir.model.resource.Device;\n+import com.ibm.fhir.model.resource.Device.Specialization;\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.model.type.Canonical;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.Meta;\n+import com.ibm.fhir.model.type.Narrative;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.Xhtml;\n+import com.ibm.fhir.model.type.code.NarrativeStatus;\n+import com.ibm.fhir.model.util.ValidationSupport;\n+import com.ibm.fhir.profile.ConstraintGenerator;\n+import com.ibm.fhir.registry.FHIRRegistry;\n+import com.ibm.fhir.validation.FHIRValidator;\n+import com.ibm.fhir.validation.util.FHIRValidationUtil;\n+\n+public class DeviceProfileTest {\n+    private static final String ENGLISH_US = \"en-US\";\n+\n+    @Test\n+    public void testDeviceProfile() throws Exception {", "originalCommit": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyNDA2Mg==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470724062", "bodyText": "Good call.  I'll rename these to be more descriptive.", "author": "tbieste", "createdAt": "2020-08-14T16:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwNjYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "390232970f5758a99e4f2fe990dddff3af218c83", "chunk": "diff --git a/fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java b/fhir-validation/src/test/java/com/ibm/fhir/validation/test/MaxValueSetTest.java\nsimilarity index 93%\nrename from fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java\nrename to fhir-validation/src/test/java/com/ibm/fhir/validation/test/MaxValueSetTest.java\nindex 702fa2d551..dde4e952ec 100644\n--- a/fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java\n+++ b/fhir-validation/src/test/java/com/ibm/fhir/validation/test/MaxValueSetTest.java\n\n@@ -36,11 +36,18 @@ import com.ibm.fhir.registry.FHIRRegistry;\n import com.ibm.fhir.validation.FHIRValidator;\n import com.ibm.fhir.validation.util.FHIRValidationUtil;\n \n-public class DeviceProfileTest {\n+/**\n+ * Tests constraint generation and validation of a binding that defines a maxValueSet.\n+ */\n+public class MaxValueSetTest {\n     private static final String ENGLISH_US = \"en-US\";\n \n+    /**\n+     * Tests the generation of a maxValueSet constraint.\n+     * @throws Exception an exception\n+     */\n     @Test\n-    public void testDeviceProfile() throws Exception {\n+    public void testConstraintGenerator() throws Exception {\n         \n         // Tests the generation of constraints generated from bindings that include a MaxValueSet extension,\n         // by using a Device profile and extensions created specifically for this test.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwNzgxOA==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470707818", "bodyText": "this comment was very helpful for me, thanks", "author": "lmsurpre", "createdAt": "2020-08-14T15:48:37Z", "path": "fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.validation.test;\n+\n+import static com.ibm.fhir.path.util.FHIRPathUtil.compile;\n+import static org.testng.Assert.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.annotation.Constraint;\n+import com.ibm.fhir.model.resource.Device;\n+import com.ibm.fhir.model.resource.Device.Specialization;\n+import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.model.type.Canonical;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Extension;\n+import com.ibm.fhir.model.type.Meta;\n+import com.ibm.fhir.model.type.Narrative;\n+import com.ibm.fhir.model.type.Uri;\n+import com.ibm.fhir.model.type.Xhtml;\n+import com.ibm.fhir.model.type.code.NarrativeStatus;\n+import com.ibm.fhir.model.util.ValidationSupport;\n+import com.ibm.fhir.profile.ConstraintGenerator;\n+import com.ibm.fhir.registry.FHIRRegistry;\n+import com.ibm.fhir.validation.FHIRValidator;\n+import com.ibm.fhir.validation.util.FHIRValidationUtil;\n+\n+public class DeviceProfileTest {\n+    private static final String ENGLISH_US = \"en-US\";\n+\n+    @Test\n+    public void testDeviceProfile() throws Exception {\n+        \n+        // Tests the generation of constraints generated from bindings that include a MaxValueSet extension,\n+        // by using a Device profile and extensions created specifically for this test.\n+        //\n+        // Each of the following combinations is tested:\n+        //   Choice: No/Yes; Optional: No/Yes; Repeatable: No/Yes\n+        //-----------------------------------------------\n+        // Choice: No; Optional: No; Repeatable: No\n+        //-----[Device.specialization.systemType]\n+        // Choice: No; Optional: No; Repeatable: Yes\n+        //-----[Device.statusReason]\n+        // Choice: No; Optional: Yes; Repeatable: No\n+        //-----[Device.type]\n+        // Choice: No; Optional: Yes; Repeatable: Yes\n+        //-----[Device.safety]\n+        // Choice: Yes; Optional: No; Repeatable: No\n+        //----[test-language-primary-extension]\n+        // Choice: Yes; Optional: No; Repeatable: Yes\n+        //----[test-language-others-req-extension]\n+        // Choice: Yes; Optional: Yes; Repeatable: No\n+        //----[test-language-secondary-extension]\n+        // Choice: Yes; Optional: Yes; Repeatable: Yes\n+        //----[test-language-others-opt-extension]\n+        //-----------------------------------------------", "originalCommit": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "390232970f5758a99e4f2fe990dddff3af218c83", "chunk": "diff --git a/fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java b/fhir-validation/src/test/java/com/ibm/fhir/validation/test/MaxValueSetTest.java\nsimilarity index 93%\nrename from fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java\nrename to fhir-validation/src/test/java/com/ibm/fhir/validation/test/MaxValueSetTest.java\nindex 702fa2d551..dde4e952ec 100644\n--- a/fhir-validation/src/test/java/com/ibm/fhir/validation/test/DeviceProfileTest.java\n+++ b/fhir-validation/src/test/java/com/ibm/fhir/validation/test/MaxValueSetTest.java\n\n@@ -36,11 +36,18 @@ import com.ibm.fhir.registry.FHIRRegistry;\n import com.ibm.fhir.validation.FHIRValidator;\n import com.ibm.fhir.validation.util.FHIRValidationUtil;\n \n-public class DeviceProfileTest {\n+/**\n+ * Tests constraint generation and validation of a binding that defines a maxValueSet.\n+ */\n+public class MaxValueSetTest {\n     private static final String ENGLISH_US = \"en-US\";\n \n+    /**\n+     * Tests the generation of a maxValueSet constraint.\n+     * @throws Exception an exception\n+     */\n     @Test\n-    public void testDeviceProfile() throws Exception {\n+    public void testConstraintGenerator() throws Exception {\n         \n         // Tests the generation of constraints generated from bindings that include a MaxValueSet extension,\n         // by using a Device profile and extensions created specifically for this test.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyOTYyOA==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470729628", "bodyText": "change param name to 'coding'", "author": "michaelwschroeder", "createdAt": "2020-08-14T16:30:33Z", "path": "fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java", "diffHunk": "@@ -119,16 +124,108 @@ public int getMaxArity() {\n                     }\n                 }\n                 return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n-            } else {\n+            }\n+            else if (isSyntaxBased(valueSet)) {\n+                \n+                // Validate against syntax-based value set\n+                if (validateAgainstSyntaxBasedValueSet(valueSet, evaluationContext, elementNode, strength)) {\n+                    return SINGLETON_TRUE;\n+                }\n+                return membershipCheckFailed(evaluationContext, elementNode, url, strength);\n+            }\n+            else {\n                 generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.INCOMPLETE, \"Membership check was not performed: value set '\" + url + \"' is empty or could not be expanded\", elementNode.path());\n             }\n-        } else {\n+        }\n+        else {\n             generateIssue(evaluationContext, IssueSeverity.WARNING, IssueType.NOT_SUPPORTED, \"Membership check was not performed: value set '\" + url + \"' is not supported\", elementNode.path());\n         }\n \n         return SINGLETON_TRUE;\n     }\n \n+    /**\n+     * Determines if the value set is syntax-based.\n+     * @param valueSet the value set\n+     * @return true or false\n+     */\n+    private boolean isSyntaxBased(ValueSet valueSet) {\n+        String valueSetUrl = valueSet.getUrl() != null ? valueSet.getUrl().getValue().split(\"\\\\|\")[0] : null;\n+        return ALL_LANG_VALUE_SET_URL.equals(valueSetUrl);\n+    }\n+    \n+    /**\n+     * Validates the element against the syntax-based value set.\n+     * @param valueSet the value set\n+     * @param evaluationContext the evaluation context\n+     * @param elementNode the element node to validate\n+     * @param strength the binding strength\n+     * @return true if validation was successful, otherwise false\n+     */\n+    private boolean validateAgainstSyntaxBasedValueSet(ValueSet valueSet, EvaluationContext evaluationContext, FHIRPathElementNode elementNode, String strength) {\n+        Element element = elementNode.element();\n+        Code code = null;\n+        Coding coding = null;\n+        CodeableConcept codeableConcept = null;\n+\n+        // Determine the system/version/code or CodableConcept to validate\n+        if (element.is(Code.class)) {\n+            code = element.as(Code.class);\n+        }\n+        else if (element.is(Coding.class)) {\n+            coding = element.as(Coding.class);\n+        }\n+        else if (element.is(CodeableConcept.class)) {\n+            codeableConcept = element.as(CodeableConcept.class);\n+        }\n+        else if (element.is(Quantity.class)) {\n+            Quantity quantity = element.as(Quantity.class);\n+            coding = Coding.builder().system(quantity.getSystem()).code(quantity.getCode()).build();\n+        }\n+        else {\n+            code = element.is(FHIR_STRING) ? Code.of(element.as(FHIR_STRING).getValue()) : Code.of(element.as(Uri.class).getValue());\n+        }\n+        \n+        return validateCodeAgainstSyntaxBasedValuedSet(valueSet, code, coding, codeableConcept, evaluationContext, elementNode, strength);\n+    }\n+    \n+    /**\n+     * Validates the Code, Coding, CodableConcept against the syntax based value set.\n+     * Only one of Code, Coding, or CodeableConept should be passed in.\n+     * Issues will be added to evaluation context if validation is not successful.\n+     * @param valueSet the value set\n+     * @param code the code to validate\n+     * @param code the coding to validate", "originalCommit": "c45c47c4c479588638cab84a5fb6d7fb8eee2c37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczODcxNA==", "url": "https://github.com/IBM/FHIR/pull/1414#discussion_r470738714", "bodyText": "Fixed.", "author": "tbieste", "createdAt": "2020-08-14T16:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyOTYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "390232970f5758a99e4f2fe990dddff3af218c83", "chunk": "diff --git a/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java b/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\nindex 18bfb80f66..05f22b1dcc 100644\n--- a/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\n+++ b/fhir-path/src/main/java/com/ibm/fhir/path/function/MemberOfFunction.java\n\n@@ -195,7 +195,7 @@ public class MemberOfFunction extends FHIRPathAbstractFunction {\n      * Issues will be added to evaluation context if validation is not successful.\n      * @param valueSet the value set\n      * @param code the code to validate\n-     * @param code the coding to validate\n+     * @param coding the coding to validate\n      * @param codeableConcept the codeable concept to validate\n      * @param evaluationContext the evaluation context\n      * @param elementNode the element node to validate\n"}}, {"oid": "390232970f5758a99e4f2fe990dddff3af218c83", "url": "https://github.com/IBM/FHIR/commit/390232970f5758a99e4f2fe990dddff3af218c83", "message": "issue #693 - Updates after code review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-08-14T16:48:02Z", "type": "commit"}, {"oid": "3766ac43a95bb11b24d506fecc6ee537a7d3cef7", "url": "https://github.com/IBM/FHIR/commit/3766ac43a95bb11b24d506fecc6ee537a7d3cef7", "message": "issue #693 - Update code formatting after review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-08-14T19:34:02Z", "type": "commit"}, {"oid": "476d5078596d378c143908e8ff2a383892d63813", "url": "https://github.com/IBM/FHIR/commit/476d5078596d378c143908e8ff2a383892d63813", "message": "issue #693 - Updates after code review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-08-14T20:32:33Z", "type": "commit"}]}