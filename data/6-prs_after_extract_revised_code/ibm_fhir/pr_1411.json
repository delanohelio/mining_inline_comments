{"pr_number": 1411, "pr_title": "issue #693 - Add language code validation and update resource examples", "pr_createdAt": "2020-08-12T15:34:34Z", "pr_url": "https://github.com/IBM/FHIR/pull/1411", "timeline": [{"oid": "346d567e9e82c16ad946716c3aca7f0c99a09e0b", "url": "https://github.com/IBM/FHIR/commit/346d567e9e82c16ad946716c3aca7f0c99a09e0b", "message": "issue #693 - Add language code validation and update resource examples\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-08-12T15:30:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4ODQ0Ng==", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r469388446", "bodyText": "should check that the maxValueSet does not have concepts, and if it does, do not generate the value set syntax check", "author": "michaelwschroeder", "createdAt": "2020-08-12T16:29:41Z", "path": "fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java", "diffHunk": "@@ -1132,6 +1134,31 @@ private void generateClass(JsonObject structureDefinition, List<String> paths, C\n                 }\n             }\n \n+            // Handle code/coding/codeableconcept fields with required (or maxValueSet) binding to syntax-based value set\n+            for (JsonObject elementDefinition : elementDefinitions) {\n+                String basePath = elementDefinition.getJsonObject(\"base\").getString(\"path\");\n+                if (elementDefinition.getString(\"path\").equals(basePath)) {\n+                    String elementName = getElementName(elementDefinition, path);\n+                    String fieldName = getFieldName(elementName);\n+                    String fieldType = getFieldType(structureDefinition, elementDefinition, false);\n+                    if (\"Code\".equals(fieldType) || \"Coding\".equals(fieldType) || \"CodeableConcept\".equals(fieldType)) {\n+                        JsonObject binding = getBinding(elementDefinition);\n+                        if (binding != null && binding.containsKey(\"valueSet\") && binding.containsKey(\"strength\")) {\n+                            String valueSet = binding.getString(\"valueSet\").split(\"\\\\|\")[0];\n+                            if (!\"required\".equals(binding.getString(\"strength\")) || hasConcepts(valueSet)) {\n+                                valueSet = getMaxValueSet(binding);\n+                                valueSet = (valueSet != null) ? valueSet.split(\"\\\\|\")[0] : valueSet;", "originalCommit": "346d567e9e82c16ad946716c3aca7f0c99a09e0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM5MzgwNQ==", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r469393805", "bodyText": "Check added.", "author": "tbieste", "createdAt": "2020-08-12T16:38:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4ODQ0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e12194a144520db96314113b3bbd39f39b14c1f1", "chunk": "diff --git a/fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java b/fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java\nindex 75e433d86f..4e4ea9899d 100644\n--- a/fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java\n+++ b/fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java\n\n@@ -1147,7 +1147,8 @@ public class CodeGenerator {\n                             String valueSet = binding.getString(\"valueSet\").split(\"\\\\|\")[0];\n                             if (!\"required\".equals(binding.getString(\"strength\")) || hasConcepts(valueSet)) {\n                                 valueSet = getMaxValueSet(binding);\n-                                valueSet = (valueSet != null) ? valueSet.split(\"\\\\|\")[0] : valueSet;\n+                                valueSet = (valueSet != null) ? valueSet.split(\"\\\\|\")[0] : null;\n+                                valueSet = (valueSet != null && !hasConcepts(valueSet)) ? valueSet : null;\n                             }\n                             // If there is a required (or maxValueSet) binding to a syntax-based value set, then do the appropriate checking for that syntax-based value set\n                             String validationMethodName = getSyntaxBasedValueSetValidationMethod(valueSet, fieldType, isRepeating(elementDefinition));\n"}}, {"oid": "e12194a144520db96314113b3bbd39f39b14c1f1", "url": "https://github.com/IBM/FHIR/commit/e12194a144520db96314113b3bbd39f39b14c1f1", "message": "issue #693 - Updates after code review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-08-12T16:36:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTQxMA==", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r470069410", "bodyText": "pretty minor, but you could consider making \"en-US\" a constant since its used 3 times here...or potentially even make the Code.of(\"en-US\") the constant and re-use it", "author": "lmsurpre", "createdAt": "2020-08-13T16:17:34Z", "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/CompleteMockDataCreator.java", "diffHunk": "@@ -186,8 +197,27 @@ public CompleteMockDataCreator() throws IOException {\n                     /////////////////\n                     // Special values\n                     /////////////////\n+                    // Must be a valid BCP-47 code (Code)\n+                    if ((builder instanceof Attachment.Builder && \"language\".equals(method.getName()))\n+                            || (builder instanceof CodeSystem.Concept.Designation.Builder && \"language\".equals(method.getName()))\n+                            || (builder instanceof Resource.Builder && \"language\".equals(method.getName()))\n+                            || (builder instanceof ValueSet.Compose.Include.Concept.Designation.Builder && \"language\".equals(method.getName()))) {\n+                        argument = Code.of(\"en-US\");", "originalCommit": "e12194a144520db96314113b3bbd39f39b14c1f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3MzcxMA==", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r470073710", "bodyText": "Updated it to a constant.", "author": "tbieste", "createdAt": "2020-08-13T16:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "4b27573e0c65e8eb2c8d09acc7be4f7330683693", "chunk": "diff --git a/fhir-examples-generator/src/main/java/com/ibm/fhir/examples/CompleteMockDataCreator.java b/fhir-examples-generator/src/main/java/com/ibm/fhir/examples/CompleteMockDataCreator.java\nindex 1174400beb..8d4582c365 100644\n--- a/fhir-examples-generator/src/main/java/com/ibm/fhir/examples/CompleteMockDataCreator.java\n+++ b/fhir-examples-generator/src/main/java/com/ibm/fhir/examples/CompleteMockDataCreator.java\n\n@@ -202,19 +203,19 @@ public class CompleteMockDataCreator extends DataCreatorBase {\n                             || (builder instanceof CodeSystem.Concept.Designation.Builder && \"language\".equals(method.getName()))\n                             || (builder instanceof Resource.Builder && \"language\".equals(method.getName()))\n                             || (builder instanceof ValueSet.Compose.Include.Concept.Designation.Builder && \"language\".equals(method.getName()))) {\n-                        argument = Code.of(\"en-US\");\n+                        argument = Code.of(ENGLISH_US);\n                     }\n                     // Must contain a valid BCP-47 system and code (CodeableConcept)\n                     else if ((builder instanceof ClaimResponse.ProcessNote.Builder && \"language\".equals(method.getName()))\n                             || (builder instanceof ExplanationOfBenefit.ProcessNote.Builder && \"language\".equals(method.getName()))\n                             || (builder instanceof Patient.Communication.Builder && \"language\".equals(method.getName()))\n                             || (builder instanceof RelatedPerson.Communication.Builder && \"language\".equals(method.getName()))) {\n-                        argument = CodeableConcept.builder().coding(Coding.builder().system(Uri.of(ValidationSupport.BCP_47_URN)).code(Code.of(\"en-US\")).build()).build();\n+                        argument = CodeableConcept.builder().coding(Coding.builder().system(Uri.of(ValidationSupport.BCP_47_URN)).code(Code.of(ENGLISH_US)).build()).build();\n                     }                    \n                     // Must contain a valid BCP-47 system and code (List<CodeableConcept>)\n                     else if ((builder instanceof HealthcareService.Builder && \"communication\".equals(method.getName()))\n                             || (builder instanceof Practitioner.Builder && \"communication\".equals(method.getName()))) {\n-                        argument = Collections.singletonList(CodeableConcept.builder().coding(Coding.builder().system(Uri.of(ValidationSupport.BCP_47_URN)).code(Code.of(\"en-US\")).build()).build());\n+                        argument = Collections.singletonList(CodeableConcept.builder().coding(Coding.builder().system(Uri.of(ValidationSupport.BCP_47_URN)).code(Code.of(ENGLISH_US)).build()).build());\n                     }                    \n                     // drt-1: There SHALL be a code if there is a value and it SHALL be an expression of time.  If system is present, it SHALL be UCUM.\n                     else if (builder instanceof Duration.Builder && method.getName().equals(\"code\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTY4OA==", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r470069688", "bodyText": "\ud83e\udd47", "author": "lmsurpre", "createdAt": "2020-08-13T16:18:04Z", "path": "fhir-examples-generator/src/main/java/com/ibm/fhir/examples/plugin/ExamplesPlugin.java", "diffHunk": "@@ -62,7 +62,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         String definitionsDir = baseDir + \"/definitions\";\n \n         // Only runs for the fhir-model project, short-circuits otherwise.\n-        if (mavenProject.getArtifactId().contains(\"fhir-model\")) {\n+        if (mavenProject.getArtifactId().contains(\"fhir-examples-generator\")) {", "originalCommit": "e12194a144520db96314113b3bbd39f39b14c1f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3NDYwNA==", "url": "https://github.com/IBM/FHIR/pull/1411#discussion_r470074604", "bodyText": "Update comment to match change.", "author": "tbieste", "createdAt": "2020-08-13T16:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "4b27573e0c65e8eb2c8d09acc7be4f7330683693", "chunk": "diff --git a/fhir-examples-generator/src/main/java/com/ibm/fhir/examples/plugin/ExamplesPlugin.java b/fhir-examples-generator/src/main/java/com/ibm/fhir/examples/plugin/ExamplesPlugin.java\nindex f29ad84bc5..cc2cc96fa0 100644\n--- a/fhir-examples-generator/src/main/java/com/ibm/fhir/examples/plugin/ExamplesPlugin.java\n+++ b/fhir-examples-generator/src/main/java/com/ibm/fhir/examples/plugin/ExamplesPlugin.java\n\n@@ -61,7 +61,7 @@ public class ExamplesPlugin extends AbstractMojo {\n         String targetDir = baseDir + \"/src/test/resources/JSON\";\n         String definitionsDir = baseDir + \"/definitions\";\n \n-        // Only runs for the fhir-model project, short-circuits otherwise.\n+        // Only runs for the fhir-examples-generator project since that is where the definitions directory exists, short-circuits otherwise.\n         if (mavenProject.getArtifactId().contains(\"fhir-examples-generator\")) {\n \n             // Check the base directory\n"}}, {"oid": "4b27573e0c65e8eb2c8d09acc7be4f7330683693", "url": "https://github.com/IBM/FHIR/commit/4b27573e0c65e8eb2c8d09acc7be4f7330683693", "message": "issue #693 - Updates after code review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-08-13T16:27:38Z", "type": "commit"}]}