{"pr_number": 731, "pr_title": "issues #747 and #748 - batch/transaction processing edits and error handling improvement", "pr_createdAt": "2020-02-26T16:46:50Z", "pr_url": "https://github.com/IBM/FHIR/pull/731", "timeline": [{"oid": "8172df4cecf1d3eedfb0b3525d701d1e8e409bcc", "url": "https://github.com/IBM/FHIR/commit/8172df4cecf1d3eedfb0b3525d701d1e8e409bcc", "message": "Reduce reliance on FHIRHttpException\n\nWith these changes, we should be in a better position to remove\nFHIRHttpException. Instead of setting the HTTP Status code whenever we\nthrow, we will set just the OperationOutcome.issue.type and map those to\nthe desired HTTP status codes in a single spot (currently\nIssueTypeToHttpStatusMapper).\n\nThese changes should help prepare us better for both #17 (fewer spots to\nadd logging) and #194 (replacing thrown exceptions with returned\nOperationOutcome)\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-26T17:22:17Z", "type": "forcePushed"}, {"oid": "f72f6504799036868a81813629ffa14f3202d25b", "url": "https://github.com/IBM/FHIR/commit/f72f6504799036868a81813629ffa14f3202d25b", "message": "Reduce reliance on FHIRHttpException\n\nWith these changes, we should be in a better position to remove\nFHIRHttpException. Instead of setting the HTTP Status code whenever we\nthrow, we will set just the OperationOutcome.issue.type and map those to\nthe desired HTTP status codes in a single spot (currently\nIssueTypeToHttpStatusMapper).\n\nThese changes should help prepare us better for both #17 (fewer spots to\nadd logging) and #194 (replacing thrown exceptions with returned\nOperationOutcome)\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-26T17:24:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NDUxNg==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384684516", "bodyText": "is this method used anywhere else? is it in FHIRUtil because you think it will be? it might be more containable to add it to this class.", "author": "prb112", "createdAt": "2020-02-26T18:35:11Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java", "diffHunk": "@@ -36,15 +43,20 @@\n             for (Issue issue : issues) {\n                 IssueType code = issue.getCode();\n                 if (code != null && code.getValue() != null) {\n-                    return issueTypeToResponseCode(IssueType.ValueSet.from(code.getValue()));\n+                    ValueSet issueType = IssueType.ValueSet.from(code.getValue());\n+                    // Special case for IssueType CONFLICT which can be either an HTTP 409 (Conflict) or HTTP 412 (Precondition failed)\n+                    if (issueType == IssueType.ValueSet.CONFLICT &&\n+                            FHIRUtil.getExtensionStringValue(code, EXTENSION_URL_HTTP_FAILED_PRECONDITION) != null) {", "originalCommit": "f72f6504799036868a81813629ffa14f3202d25b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MDYyOQ==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384740629", "bodyText": "FHIRUtil already had getExtensionStringValue(Resource, String) so I basically just added a sister one for Elements.  I think both could be modified to be more generic, but at least it won't throw a ClassCastException any more when you specify an extension url with a non-string value ;-)", "author": "lmsurpre", "createdAt": "2020-02-26T20:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NDUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "35472d931362ce89f61175d34cc3fa51788551a0", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java b/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java\nindex 5baeed6165..d1f681832a 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java\n\n@@ -43,7 +42,7 @@ public class IssueTypeToHttpStatusMapper {\n             for (Issue issue : issues) {\n                 IssueType code = issue.getCode();\n                 if (code != null && code.getValue() != null) {\n-                    ValueSet issueType = IssueType.ValueSet.from(code.getValue());\n+                    IssueType.ValueSet issueType = code.getValueAsEnumConstant();\n                     // Special case for IssueType CONFLICT which can be either an HTTP 409 (Conflict) or HTTP 412 (Precondition failed)\n                     if (issueType == IssueType.ValueSet.CONFLICT &&\n                             FHIRUtil.getExtensionStringValue(code, EXTENSION_URL_HTTP_FAILED_PRECONDITION) != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NTE0MQ==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384685141", "bodyText": "any reason to 'lock' it down?", "author": "prb112", "createdAt": "2020-02-26T18:36:18Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java", "diffHunk": "@@ -36,15 +43,20 @@\n             for (Issue issue : issues) {\n                 IssueType code = issue.getCode();\n                 if (code != null && code.getValue() != null) {\n-                    return issueTypeToResponseCode(IssueType.ValueSet.from(code.getValue()));\n+                    ValueSet issueType = IssueType.ValueSet.from(code.getValue());\n+                    // Special case for IssueType CONFLICT which can be either an HTTP 409 (Conflict) or HTTP 412 (Precondition failed)\n+                    if (issueType == IssueType.ValueSet.CONFLICT &&\n+                            FHIRUtil.getExtensionStringValue(code, EXTENSION_URL_HTTP_FAILED_PRECONDITION) != null) {\n+                        return Status.PRECONDITION_FAILED;\n+                    }\n+                    return issueTypeToResponseCode(issueType);\n                 }\n             }\n         }\n-        \n         return Status.INTERNAL_SERVER_ERROR;\n     }\n     \n-    public static Status issueTypeToResponseCode(IssueType.ValueSet value) {\n+    private static Status issueTypeToResponseCode(IssueType.ValueSet value) {", "originalCommit": "f72f6504799036868a81813629ffa14f3202d25b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MTA3MQ==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384741071", "bodyText": "I added special logic into the other method (which calls this one).  If you called this one directly (e.g. by accident) then you'd miss out on that new logic.", "author": "lmsurpre", "createdAt": "2020-02-26T20:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NTE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "35472d931362ce89f61175d34cc3fa51788551a0", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java b/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java\nindex 5baeed6165..d1f681832a 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java\n\n@@ -43,7 +42,7 @@ public class IssueTypeToHttpStatusMapper {\n             for (Issue issue : issues) {\n                 IssueType code = issue.getCode();\n                 if (code != null && code.getValue() != null) {\n-                    ValueSet issueType = IssueType.ValueSet.from(code.getValue());\n+                    IssueType.ValueSet issueType = code.getValueAsEnumConstant();\n                     // Special case for IssueType CONFLICT which can be either an HTTP 409 (Conflict) or HTTP 412 (Precondition failed)\n                     if (issueType == IssueType.ValueSet.CONFLICT &&\n                             FHIRUtil.getExtensionStringValue(code, EXTENSION_URL_HTTP_FAILED_PRECONDITION) != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NTY4MA==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384685680", "bodyText": "Confirming... this changed due to the IssueType mapping", "author": "prb112", "createdAt": "2020-02-26T18:37:29Z", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/ServerSpecTest.java", "diffHunk": "@@ -299,7 +299,7 @@ public void testUpdatePatientVersionAwareError3() throws Exception {\n                         .request()\n                         .header(\"If-Match\", ifMatchValue)\n                         .put(entity, Response.class);\n-        assertResponse(response, Response.Status.CONFLICT.getStatusCode());\n+        assertResponse(response, Response.Status.PRECONDITION_FAILED.getStatusCode());", "originalCommit": "f72f6504799036868a81813629ffa14f3202d25b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MjA5Nw==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384742097", "bodyText": "actually, I broke the test on accident, by following the spec instead of the current behavior.\nfrom https://www.hl7.org/fhir/http.html#concurrency\n\nIf the version id given in the If-Match header does not match, the server returns a 412 Precondition Failed status code instead of updating the resource.\n\nso i think it was a bug in our current impl and I'm HOPING fixing that doesn't break our touchstone results.", "author": "lmsurpre", "createdAt": "2020-02-26T20:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MjI3Ng==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384742276", "bodyText": "P.S. let me know if you think i should open a separate issue for it", "author": "lmsurpre", "createdAt": "2020-02-26T20:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MDY3Nw==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384750677", "bodyText": "small... small... suggestion, add the comment to the issue, these are harder to find in the PRs.\nif it's in the issue, at least we can search on it (and I'm suggesting adding to the issue related to this PR only)", "author": "prb112", "createdAt": "2020-02-26T20:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NTY4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NjYxNg==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384686616", "bodyText": "do you need the capabilityStatement instance? immediately responding with it seems preferred", "author": "prb112", "createdAt": "2020-02-26T18:39:12Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -249,23 +249,21 @@ public FHIRResource() throws Exception {\n     public Response metadata() throws ClassNotFoundException {\n         log.entering(this.getClass().getName(), \"metadata()\");\n         Date startTime = new Date();\n-        Response.Status status = Response.Status.INTERNAL_SERVER_ERROR;\n         String errMsg = \"Caught exception while processing 'metadata' request.\";\n \n         try {\n             checkInitComplete();\n \n-            status = Response.Status.OK;\n-            RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), status);\n+            CapabilityStatement capabilityStatement = getCapabilityStatement();\n+            RestAuditLogger.logMetadata(httpServletRequest, startTime, new Date(), Response.Status.OK);\n \n-            return Response.ok().entity(getCapabilityStatement()).build();\n-        } catch (FHIRHttpException e) {\n+            return Response.ok().entity(capabilityStatement).build();", "originalCommit": "f72f6504799036868a81813629ffa14f3202d25b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MzI3NQ==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384743275", "bodyText": "I forget why I split it out...maybe I thought I was going to use it but then never did.  I can revert that part of the change and call it inline if you prefer.", "author": "lmsurpre", "createdAt": "2020-02-26T20:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NjYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0Mzg4Ng==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384743886", "bodyText": "In general, I'd love to start caching this, maybe on a per-tenant basis....our calls to metadata take a long time and it shouldn't change unless someone updates the config...\nI just opened #734 for that.", "author": "lmsurpre", "createdAt": "2020-02-26T20:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NjYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MDA4Ng==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384750086", "bodyText": "no need to revert, I wanted to confirm the intent.  I didn't know if there was a side effect", "author": "prb112", "createdAt": "2020-02-26T20:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NjYxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NzkxMA==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384687910", "bodyText": "very helpful comment", "author": "prb112", "createdAt": "2020-02-26T18:41:37Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -673,9 +645,8 @@ public Response delete(@PathParam(\"type\") String type, @PathParam(\"id\") String i\n                 response = addHeaders(response, ior.getResource());\n             }\n             return response.build();\n-        } catch (FHIRHttpException e) {\n-            return exceptionResponse(e);\n         } catch (FHIRPersistenceResourceNotFoundException e) {\n+            // Overwrite the exception response status because we want NOT_FOUND to be success for delete", "originalCommit": "f72f6504799036868a81813629ffa14f3202d25b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NzM3OA==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r384797378", "bodyText": "Should this use the new getValueAsEnumConstant method?", "author": "JohnTimm", "createdAt": "2020-02-26T22:09:01Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java", "diffHunk": "@@ -36,15 +43,20 @@\n             for (Issue issue : issues) {\n                 IssueType code = issue.getCode();\n                 if (code != null && code.getValue() != null) {\n-                    return issueTypeToResponseCode(IssueType.ValueSet.from(code.getValue()));\n+                    ValueSet issueType = IssueType.ValueSet.from(code.getValue());", "originalCommit": "f72f6504799036868a81813629ffa14f3202d25b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2ODEyMw==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r385168123", "bodyText": "done", "author": "lmsurpre", "createdAt": "2020-02-27T14:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NzM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "35472d931362ce89f61175d34cc3fa51788551a0", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java b/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java\nindex 5baeed6165..d1f681832a 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java\n\n@@ -43,7 +42,7 @@ public class IssueTypeToHttpStatusMapper {\n             for (Issue issue : issues) {\n                 IssueType code = issue.getCode();\n                 if (code != null && code.getValue() != null) {\n-                    ValueSet issueType = IssueType.ValueSet.from(code.getValue());\n+                    IssueType.ValueSet issueType = code.getValueAsEnumConstant();\n                     // Special case for IssueType CONFLICT which can be either an HTTP 409 (Conflict) or HTTP 412 (Precondition failed)\n                     if (issueType == IssueType.ValueSet.CONFLICT &&\n                             FHIRUtil.getExtensionStringValue(code, EXTENSION_URL_HTTP_FAILED_PRECONDITION) != null) {\n"}}, {"oid": "35472d931362ce89f61175d34cc3fa51788551a0", "url": "https://github.com/IBM/FHIR/commit/35472d931362ce89f61175d34cc3fa51788551a0", "message": "Reduce reliance on FHIRHttpException\n\nWith these changes, we should be in a better position to remove\nFHIRHttpException. Instead of setting the HTTP Status code whenever we\nthrow, we will set just the OperationOutcome.issue.type and map those to\nthe desired HTTP status codes in a single spot (currently\nIssueTypeToHttpStatusMapper).\n\nThese changes should help prepare us better for both #17 (fewer spots to\nadd logging) and #194 (replacing thrown exceptions with returned\nOperationOutcome)\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-27T14:33:46Z", "type": "forcePushed"}, {"oid": "879ac6f270f1cf9c7bd8e3160b4d782328f8ff65", "url": "https://github.com/IBM/FHIR/commit/879ac6f270f1cf9c7bd8e3160b4d782328f8ff65", "message": "Reduce reliance on FHIRHttpException\n\nWith these changes, we should be in a better position to remove\nFHIRHttpException. Instead of setting the HTTP Status code whenever we\nthrow, we will set just the OperationOutcome.issue.type and map those to\nthe desired HTTP status codes in a single spot (currently\nIssueTypeToHttpStatusMapper).\n\nThese changes should help prepare us better for both #17 (fewer spots to\nadd logging) and #194 (replacing thrown exceptions with returned\nOperationOutcome)\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-27T14:33:19Z", "type": "forcePushed"}, {"oid": "6dba05b1b1e32304b7a645fe3526492495f30a2f", "url": "https://github.com/IBM/FHIR/commit/6dba05b1b1e32304b7a645fe3526492495f30a2f", "message": "Reduce reliance on FHIRHttpException\n\nWith these changes, we should be in a better position to remove\nFHIRHttpException. Instead of setting the HTTP Status code whenever we\nthrow, we will set just the OperationOutcome.issue.type and map those to\nthe desired HTTP status codes in a single spot (currently\nIssueTypeToHttpStatusMapper).\n\nThese changes should help prepare us better for both #17 (fewer spots to\nadd logging) and #194 (replacing thrown exceptions with returned\nOperationOutcome)\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-02T15:04:40Z", "type": "commit"}, {"oid": "dc1a6d23df1ea8840e589d76a975a57132a7752f", "url": "https://github.com/IBM/FHIR/commit/dc1a6d23df1ea8840e589d76a975a57132a7752f", "message": "issues #747 and #748 - batch/transaction processing edits\n\nUpdated bundle processing such that:\n1. 'batch' requests return with 200 OK when one or more of the entries\nfails (check each entry for its response status).\n2. 'transaction' requests return a single OperationOutcome in case of\nfailure.  I normalize whatever the normal status code would be into\neither 400 (client error) or 500 (server error).\n\nI also finished removing all usage of FHIRHttpException. To do it, I had\nto introduced a new extension,\n`http://ibm.com/fhir/extension/not-supported-detail` to disambiguate\nnot-supported interactions from not-supported resource types.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-03T16:42:09Z", "type": "commit"}, {"oid": "dc1a6d23df1ea8840e589d76a975a57132a7752f", "url": "https://github.com/IBM/FHIR/commit/dc1a6d23df1ea8840e589d76a975a57132a7752f", "message": "issues #747 and #748 - batch/transaction processing edits\n\nUpdated bundle processing such that:\n1. 'batch' requests return with 200 OK when one or more of the entries\nfails (check each entry for its response status).\n2. 'transaction' requests return a single OperationOutcome in case of\nfailure.  I normalize whatever the normal status code would be into\neither 400 (client error) or 500 (server error).\n\nI also finished removing all usage of FHIRHttpException. To do it, I had\nto introduced a new extension,\n`http://ibm.com/fhir/extension/not-supported-detail` to disambiguate\nnot-supported interactions from not-supported resource types.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-03T16:42:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjYyOQ==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r387256629", "bodyText": "Essentially 460 is duplicate - just a different origin.  Perhaps refactor into an intermediate method.", "author": "prb112", "createdAt": "2020-03-03T19:53:05Z", "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/FHIRUtil.java", "diffHunk": "@@ -433,7 +438,8 @@ public static String getExtensionStringValue(Resource resource, String extension\n             if (DomainResource.class.isAssignableFrom(resource.getClass())) {\n                 DomainResource dr = (DomainResource) resource;\n                 for (Extension ext : dr.getExtension()) {", "originalCommit": "dc1a6d23df1ea8840e589d76a975a57132a7752f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3Mjk5OQ==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r387272999", "bodyText": "done", "author": "lmsurpre", "createdAt": "2020-03-03T20:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8b3f905b96018477a59eb79d481e82960511f7b", "chunk": "diff --git a/fhir-model/src/main/java/com/ibm/fhir/model/util/FHIRUtil.java b/fhir-model/src/main/java/com/ibm/fhir/model/util/FHIRUtil.java\nindex a2f4861ea5..08e9254960 100644\n--- a/fhir-model/src/main/java/com/ibm/fhir/model/util/FHIRUtil.java\n+++ b/fhir-model/src/main/java/com/ibm/fhir/model/util/FHIRUtil.java\n\n@@ -434,18 +434,14 @@ public class FHIRUtil {\n      * @return the value of the first such extension with a valueString or null if the resource has no such extensions\n      */\n     public static String getExtensionStringValue(Resource resource, String extensionUrl) {\n+        String value = null;\n         if (nonNull(resource) && nonNull(extensionUrl)) {\n-            if (DomainResource.class.isAssignableFrom(resource.getClass())) {\n+            if (resource instanceof DomainResource) {\n                 DomainResource dr = (DomainResource) resource;\n-                for (Extension ext : dr.getExtension()) {\n-                    if (ext.getValue() != null && ext.getUrl().equals(extensionUrl) && \n-                            ext.getValue().is(com.ibm.fhir.model.type.String.class)) {\n-                        return ext.getValue().as(com.ibm.fhir.model.type.String.class).getValue();\n-                    }\n-                }\n+                value = getExtensionStringValue(extensionUrl, dr.getExtension());\n             }\n         }\n-        return null;\n+        return value;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NzIzNA==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r387257234", "bodyText": "Please update copyright", "author": "prb112", "createdAt": "2020-03-03T19:54:11Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/exception/FHIRRestBundledRequestException.java", "diffHunk": "@@ -6,14 +6,10 @@\n \n package com.ibm.fhir.server.exception;\n \n-import java.util.Collection;\n-\n-import javax.ws.rs.core.Response.Status;\n-\n+import com.ibm.fhir.exception.FHIROperationException;", "originalCommit": "dc1a6d23df1ea8840e589d76a975a57132a7752f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8b3f905b96018477a59eb79d481e82960511f7b", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/exception/FHIRRestBundledRequestException.java b/fhir-server/src/main/java/com/ibm/fhir/server/exception/FHIRRestBundledRequestException.java\nindex eee04d07e8..92153375a5 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/exception/FHIRRestBundledRequestException.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/exception/FHIRRestBundledRequestException.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NzQ3Nw==", "url": "https://github.com/IBM/FHIR/pull/731#discussion_r387257477", "bodyText": "please update copyright", "author": "prb112", "createdAt": "2020-03-03T19:54:42Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/IssueTypeToHttpStatusMapper.java", "diffHunk": "@@ -14,8 +14,20 @@\n import com.ibm.fhir.model.resource.OperationOutcome;\n import com.ibm.fhir.model.resource.OperationOutcome.Issue;\n import com.ibm.fhir.model.type.code.IssueType;\n+import com.ibm.fhir.model.util.FHIRUtil;", "originalCommit": "dc1a6d23df1ea8840e589d76a975a57132a7752f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "a8b3f905b96018477a59eb79d481e82960511f7b", "url": "https://github.com/IBM/FHIR/commit/a8b3f905b96018477a59eb79d481e82960511f7b", "message": "Updates per PR feedback\n\nUpdated copyrights and factored out common method as suggested.\n\nAlso removed an unused private test method and reduced scope of\nunnecessary `status` variables in the JAXRS-annotated methods...now we\nonly use that approach on the `doX` methods.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-03T20:23:57Z", "type": "commit"}]}