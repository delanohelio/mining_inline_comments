{"pr_number": 1740, "pr_title": "issue #1708 store compartment search parameters for faster compartment search queries", "pr_createdAt": "2020-11-20T20:56:09Z", "pr_url": "https://github.com/IBM/FHIR/pull/1740", "timeline": [{"oid": "d8629367780a831192e6c0e5801b41b18e03097b", "url": "https://github.com/IBM/FHIR/commit/d8629367780a831192e6c0e5801b41b18e03097b", "message": "issue #1708 add custom compartment reference params for faster compartment searches\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-11-18T22:56:49Z", "type": "commit"}, {"oid": "398bbdc03f8f72ddcf6cc021f1accc060b9d7551", "url": "https://github.com/IBM/FHIR/commit/398bbdc03f8f72ddcf6cc021f1accc060b9d7551", "message": "Merge remote-tracking branch 'origin/master' into robin-proto", "committedDate": "2020-11-18T23:12:22Z", "type": "commit"}, {"oid": "2d89c8a62ca4c68cb3f20a8d4a765e8444eaa3d1", "url": "https://github.com/IBM/FHIR/commit/2d89c8a62ca4c68cb3f20a8d4a765e8444eaa3d1", "message": "issue #1708 use ibm-internal stored parameters for compartment searches\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-11-19T22:01:09Z", "type": "commit"}, {"oid": "d8aca7da42e06761540cb4a412550f67233c3081", "url": "https://github.com/IBM/FHIR/commit/d8aca7da42e06761540cb4a412550f67233c3081", "message": "issue #1708 merge with master and handle NPE when search param is filtered out\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-11-20T20:54:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjk3Nw==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528002977", "bodyText": "clean up commented out lines (here and 48-54)", "author": "michaelwschroeder", "createdAt": "2020-11-20T22:24:24Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "diffHunk": "@@ -21,11 +22,14 @@\n     private String name;\n \n     // The reference value\n-    private String valueString;\n+    //private String valueString;", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzOTk3MQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528239971", "bodyText": "thanks...cruft left over from some refactor back-and-forth", "author": "punktilious", "createdAt": "2020-11-21T20:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MjQ1Ng==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528262456", "bodyText": "done", "author": "punktilious", "createdAt": "2020-11-22T00:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "77fd42777f134d15e78f19d60ffb2f235324bad5", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java\nindex a08d2abfef..0d07dc41d2 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java\n\n@@ -21,9 +21,6 @@ public class ReferenceParmVal implements ExtractedParameterValue {\n     // The name of the parameter (key into PARAMETER_NAMES)\n     private String name;\n \n-    // The reference value\n-    //private String valueString;\n-\n     // The SearchParameter base type. If \"Resource\", then this is a Resource-level attribute\n     private String base;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNTA4Mg==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528005082", "bodyText": "Is this meant to be commented out?", "author": "michaelwschroeder", "createdAt": "2020-11-20T22:30:14Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1227,6 +1233,21 @@ private TransactionSynchronizationRegistry getTrxSynchRegistry() throws FHIRPers\n         }\n     }\n \n+    private List<ExtractedParameterValue> extractCompartmentValues(Resource fhirResource, com.ibm.fhir.persistence.jdbc.dto.Resource resourceDTO) throws Exception {\n+\n+        List<ExtractedParameterValue> result = null;\n+\n+        Map<String, Set<java.lang.String>> compartmentRefParams = CompartmentUtil.getCompartmentParamsForResourceType(fhirResource.getClass().getSimpleName());\n+\n+        if (!compartmentRefParams.isEmpty()) {\n+            //result = SearchUtil.extractCompartmentParameterValues(fhirResource, compartmentRefParams);", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDcxMw==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040713", "bodyText": "good question...", "author": "prb112", "createdAt": "2020-11-21T00:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNTA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MjUxOQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528262519", "bodyText": "method wasn't supposed to be there at all. Removed.", "author": "punktilious", "createdAt": "2020-11-22T00:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNTA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "77fd42777f134d15e78f19d60ffb2f235324bad5", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java\nindex 1d29b52efd..7af6e0f9c3 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java\n\n@@ -1233,28 +1234,13 @@ public class FHIRPersistenceJDBCImpl implements FHIRPersistence, SchemaNameSuppl\n         }\n     }\n \n-    private List<ExtractedParameterValue> extractCompartmentValues(Resource fhirResource, com.ibm.fhir.persistence.jdbc.dto.Resource resourceDTO) throws Exception {\n-\n-        List<ExtractedParameterValue> result = null;\n-\n-        Map<String, Set<java.lang.String>> compartmentRefParams = CompartmentUtil.getCompartmentParamsForResourceType(fhirResource.getClass().getSimpleName());\n-\n-        if (!compartmentRefParams.isEmpty()) {\n-            //result = SearchUtil.extractCompartmentParameterValues(fhirResource, compartmentRefParams);\n-        } else {\n-            result = Collections.emptyList();\n-        }\n-\n-        return result;\n-    }\n-\n     /**\n      * Extracts search parameters for the passed FHIR Resource.\n      * @param fhirResource - Some FHIR Resource\n      * @param resourceDTO - A Resource DTO representation of the passed FHIR Resource.\n      * @throws Exception\n      */\n-    private List<ExtractedParameterValue> extractSearchParameters(Resource fhirResource, com.ibm.fhir.persistence.jdbc.dto.Resource resourceDTO)\n+    private List<ExtractedParameterValue> extractSearchParameters(Resource fhirResource, com.ibm.fhir.persistence.jdbc.dto.Resource resourceDTOx)\n                  throws Exception {\n         final String METHODNAME = \"extractSearchParameters\";\n         log.entering(CLASSNAME, METHODNAME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNjA4Nw==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528006087", "bodyText": "clean up commented code", "author": "michaelwschroeder", "createdAt": "2020-11-20T22:33:08Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "diffHunk": "@@ -597,24 +601,35 @@ public boolean visit(java.lang.String elementName, int elementIndex, Reference r\n         if (!REFERENCE.equals(searchParamType)) {\n             throw invalidComboException(searchParamType, reference);\n         }\n-        if (reference.getReference() != null) {\n-            ReferenceParmVal p = new ReferenceParmVal();\n-            p.setName(searchParamCode);\n-            p.setValueString(reference.getReference().getValue());\n-            result.add(p);\n-        }\n \n-        // Make sure we process the identifier if there is one.\n-        Identifier identifier = reference.getIdentifier();\n-        if (reference.getIdentifier() != null) {\n-            TokenParmVal p = new TokenParmVal();\n-            p.setName(searchParamCode);\n-            if (identifier.getSystem() != null) {\n-                p.setValueSystem(identifier.getSystem().getValue());\n+        // TODO pass in the bundle if we want to support \"a relative URL, which is relative to\n+        // the Service Base URL, or, if processing a resource from a bundle, which is relative\n+        // to the base URL implied by the Bundle.entry.fullUrl (see Resolving References in Bundles)\"\n+        try {\n+            final String baseUrl = ReferenceUtil.getBaseUrl(null);\n+            ReferenceValue refValue = ReferenceUtil.createReferenceValueFrom(reference, baseUrl);\n+            if (refValue.getType() != ReferenceType.INVALID && refValue.getType() != ReferenceType.DISPLAY_ONLY) {\n+                ReferenceParmVal p = new ReferenceParmVal();\n+                p.setRefValue(refValue);\n+                p.setName(searchParamCode);\n+                result.add(p);\n             }\n-            p.setValueCode(identifier.getValue().getValue());\n-            result.add(p);\n+        } catch (FHIRSearchException x) {\n+            // Log the error, but skip it because we're not supposed to throw exceptions here\n+            log.log(Level.WARNING, \"Error processing reference\", x);\n         }\n+\n+        // Make sure we process the identifier if there is one.\n+//        Identifier identifier = reference.getIdentifier();\n+//        if (reference.getIdentifier() != null) {\n+//            TokenParmVal p = new TokenParmVal();\n+//            p.setName(searchParamCode);\n+//            if (identifier.getSystem() != null) {\n+//                p.setValueSystem(identifier.getSystem().getValue());\n+//            }\n+//            p.setValueCode(identifier.getValue().getValue());\n+//            result.add(p);\n+//        }", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MTA5Mg==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528041092", "bodyText": "same point", "author": "prb112", "createdAt": "2020-11-21T00:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNjA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MjYxNQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528262615", "bodyText": "removed", "author": "punktilious", "createdAt": "2020-11-22T00:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNjA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "77fd42777f134d15e78f19d60ffb2f235324bad5", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java\nindex d9a816f66d..a593d1edfb 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java\n\n@@ -618,18 +618,6 @@ public class JDBCParameterBuildingVisitor extends DefaultVisitor {\n             // Log the error, but skip it because we're not supposed to throw exceptions here\n             log.log(Level.WARNING, \"Error processing reference\", x);\n         }\n-\n-        // Make sure we process the identifier if there is one.\n-//        Identifier identifier = reference.getIdentifier();\n-//        if (reference.getIdentifier() != null) {\n-//            TokenParmVal p = new TokenParmVal();\n-//            p.setName(searchParamCode);\n-//            if (identifier.getSystem() != null) {\n-//                p.setValueSystem(identifier.getSystem().getValue());\n-//            }\n-//            p.setValueCode(identifier.getValue().getValue());\n-//            result.add(p);\n-//        }\n         return false;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwOTM2NQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528009365", "bodyText": "I think this can all be replaced with FHIRConfigHelper.getBooleanProperty(FHIRConfiguration.PROPERTY_USE_STORED_COMPARTMENT_PARAM, false);", "author": "michaelwschroeder", "createdAt": "2020-11-20T22:43:07Z", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1266,6 +1272,35 @@ public static FHIRSearchContext parseQueryParameters(String compartmentName, Str\n         return parseQueryParameters(compartmentName, compartmentLogicalId, resourceType, queryParameters, true);\n     }\n \n+    /**\n+     * Check the configuration to see if the flag enabling the compartment search\n+     * optimization. Defaults to false so the behavior won't change unless it\n+     * is explicitly enabled in fhir-server-config. This is important, because\n+     * existing data must be reindexed (see $reindex custom operation) to\n+     * generate values for the ibm-internal compartment relationship params.\n+     * @return\n+     */\n+    public static boolean useStoredCompartmentParam() {\n+        boolean result = false;\n+        try {\n+            String tenantId = FHIRRequestContext.get().getTenantId();\n+            PropertyGroup fhirConfig = FHIRConfiguration.getInstance().loadConfigurationForTenant(tenantId);\n+            if (fhirConfig == null) {\n+                // fall back to default config (when unit tests don't provide config for a tenant)\n+                fhirConfig = FHIRConfiguration.getInstance().loadConfiguration();\n+            }\n+\n+            if (fhirConfig != null) {\n+                result = fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_USE_STORED_COMPARTMENT_PARAM, false);\n+            }", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDk1Nw==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528264957", "bodyText": "done", "author": "punktilious", "createdAt": "2020-11-22T01:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwOTM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "77fd42777f134d15e78f19d60ffb2f235324bad5", "chunk": "diff --git a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\nindex 4130b99119..83232a3893 100644\n--- a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n+++ b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n\n@@ -1281,24 +1281,7 @@ public class SearchUtil {\n      * @return\n      */\n     public static boolean useStoredCompartmentParam() {\n-        boolean result = false;\n-        try {\n-            String tenantId = FHIRRequestContext.get().getTenantId();\n-            PropertyGroup fhirConfig = FHIRConfiguration.getInstance().loadConfigurationForTenant(tenantId);\n-            if (fhirConfig == null) {\n-                // fall back to default config (when unit tests don't provide config for a tenant)\n-                fhirConfig = FHIRConfiguration.getInstance().loadConfiguration();\n-            }\n-\n-            if (fhirConfig != null) {\n-                result = fhirConfig.getBooleanProperty(FHIRConfiguration.PROPERTY_USE_STORED_COMPARTMENT_PARAM, false);\n-            }\n-        } catch (Exception e) {\n-            log.log(Level.WARNING, \"Issue loading the fhir configuration - assuming \" + FHIRConfiguration.PROPERTY_USE_STORED_COMPARTMENT_PARAM\n-                + \" is false\", e);\n-        }\n-\n-        return result;\n+        return FHIRConfigHelper.getBooleanProperty(FHIRConfiguration.PROPERTY_USE_STORED_COMPARTMENT_PARAM, false);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwOTcwOA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528009708", "bodyText": "should wrap resourceType in single quotes", "author": "michaelwschroeder", "createdAt": "2020-11-20T22:44:15Z", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -2155,4 +2201,67 @@ private static void manageException(String message, boolean lenient) throws FHIR\n             throw SearchExceptionUtil.buildNewInvalidSearchException(message);\n         }\n     }\n-}\n+\n+    /**\n+     * Extracts the parameter values defining compartment membership.\n+     * @param fhirResource\n+     * @param compartmentRefParams a map of parameter names to a set of compartment names (resource types)\n+     * @return a map of compartment name to a set of unique compartment reference values\n+     */\n+    public static Map<String, Set<CompartmentReference>> extractCompartmentParameterValues(Resource fhirResource, Map<String, Set<java.lang.String>> compartmentRefParams) throws FHIRSearchException {\n+        final Map<String, Set<CompartmentReference>> result = new HashMap<>();\n+        final String resourceType = fhirResource.getClass().getSimpleName();\n+\n+        // TODO, probably should use a Bundle.Entry value here if we are processing a bundle\n+        final String baseUrl = ReferenceUtil.getBaseUrl(null);\n+\n+        try {\n+            EvaluationContext resourceContext = new FHIRPathEvaluator.EvaluationContext(fhirResource);\n+\n+            // Extract any references we find matching parameters representing compartment membership.\n+            // For example CareTeam.participant can be used to refer to a Patient or RelatedPerson resource:\n+            // \"participant\": { \"reference\": \"Patient/abc123\" }\n+            // \"participant\": { \"reference\": \"RelatedPerson/abc456\" }\n+            for (Map.Entry<String, Set<String>> paramEntry : compartmentRefParams.entrySet()) {\n+                final String searchParm = paramEntry.getKey();\n+\n+                // Ignore {def} which is used in the compartment definition where\n+                // no other search parm is given (e.g. Encounter->Encounter).\n+                if (!COMPARTMENT_PARM_DEF.equals(searchParm)) {\n+                    SearchParameter sp = SearchUtil.getSearchParameter(resourceType, searchParm);\n+                    if (sp != null && sp.getExpression() != null) {\n+                        String expression = sp.getExpression().getValue();\n+\n+                        if (log.isLoggable(Level.FINE)) {\n+                            log.fine(\"searchParam = [\" + resourceType + \"] '\" + searchParm + \"'; expression = '\" + expression + \"'\");\n+                        }\n+                        Collection<FHIRPathNode> nodes = FHIRPathEvaluator.evaluator().evaluate(resourceContext, expression);\n+                        for (FHIRPathNode node : nodes) {\n+                            Reference reference = node.asElementNode().element().as(Reference.class);\n+                            ReferenceValue rv = ReferenceUtil.createReferenceValueFrom(reference, baseUrl);\n+                            if (rv.getType() != ReferenceType.DISPLAY_ONLY && rv.getType() != ReferenceType.INVALID) {\n+                                // Check that the target resource type of the reference matches one of the\n+                                // target resource types in the compartment definition.\n+                                final String compartmentName = rv.getTargetResourceType();\n+                                if (paramEntry.getValue().contains(compartmentName)) {\n+                                    // Add this reference to the set of references we're collecting for each compartment\n+                                    CompartmentReference cref = new CompartmentReference(searchParm, compartmentName, rv.getValue());\n+                                    Set<CompartmentReference> references = result.computeIfAbsent(compartmentName, k -> new HashSet<>());\n+                                    references.add(cref);\n+                                }\n+                            }\n+                        }\n+                    } else {\n+                       log.warning(\"Compartment parameter not found: [\" + resourceType + \"] '\" + searchParm + \"'. This will stop compartment searches from working correctly.\");\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            final String msg = \"Unexpected exception extracting compartment references \"\n+                    + \" for resource type \" + resourceType;", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2Mjc0Nw==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528262747", "bodyText": "fixed", "author": "punktilious", "createdAt": "2020-11-22T00:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwOTcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "77fd42777f134d15e78f19d60ffb2f235324bad5", "chunk": "diff --git a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\nindex 4130b99119..83232a3893 100644\n--- a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n+++ b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n\n@@ -2225,6 +2208,8 @@ public class SearchUtil {\n             for (Map.Entry<String, Set<String>> paramEntry : compartmentRefParams.entrySet()) {\n                 final String searchParm = paramEntry.getKey();\n \n+                log.finest(\"searchParam = [\" + resourceType + \"] '\" + searchParm + \"'\");\n+\n                 // Ignore {def} which is used in the compartment definition where\n                 // no other search parm is given (e.g. Encounter->Encounter).\n                 if (!COMPARTMENT_PARM_DEF.equals(searchParm)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDA4Mw==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040083", "bodyText": "Where did this logic go?", "author": "prb112", "createdAt": "2020-11-21T00:41:45Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -746,58 +737,9 @@ private boolean isBase(ExtractedParameterValue param) {\n         return \"Resource\".equals(param.getBase());\n     }\n \n-    /**", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MzY4OQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528263689", "bodyText": "It's now in ReferenceUtil, which has a much better algorithm for determining the base URL, along with unit tests", "author": "punktilious", "createdAt": "2020-11-22T00:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDA4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDIzNA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040234", "bodyText": "I think this should be thrown as an error only.", "author": "prb112", "createdAt": "2020-11-21T00:42:28Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -809,66 +751,31 @@ public void visit(ReferenceParmVal rpv) throws FHIRPersistenceException {\n             throw new FHIRPersistenceException(\"Resource type not found in cache: '\" + resourceType + \"'\");\n         }\n \n-        final String base = getServerUrl();\n-        ResourceTokenValueRec rec;\n-        if (base != null && valueString.startsWith(base)) {\n-            // - relative reference https://example.com/Patient/123\n-            // Because this reference is to a local FHIR resource (inside this server), we need use the correct\n-            // resource type name (assigned as the code system)\n-            //  - https://localhost:9443/fhir-server/api/v4/Patient/1234\n-            //  - https://example.com/Patient/1234\n-            //  - https://example.com/Patient/1234/_history/2\n-            valueString = valueString.substring(base.length());\n-\n-            // Patient/1234\n-            // Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n-            } else {\n-                // stored as a token with the default system\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-            }\n-        } else if (valueString.startsWith(HTTP) || valueString.startsWith(HTTPS) || valueString.startsWith(URN)) {\n-            //  - absolute URL ==> http://some.system/a/fhir/resource/path\n-            //  - absolute URI ==> urn:uuid:53fefa32-1111-2222-3333-55ee120877b7\n-            // stored as a token with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else if (valueString.startsWith(\"#\")) {\n-            //  - Internal ==> #fragmentid1\n-            // stored as a token value with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else {\n-            //  - Relative ==> Patient/1234\n-            //  - Relative ==> Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n+        // The ReferenceValue has already been processed to convert the reference to\n+        // the required standard form, ready for insertion as a token value.\n+        ReferenceValue refValue = rpv.getRefValue();\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n+        // Ignore references containing only a \"display\" element (apparently supported by the spec,\n+        // but contains nothing useful to store because there's no searchable value).\n+        String refResourceType = refValue.getTargetResourceType();\n+        String refLogicalId = refValue.getValue();\n+        Integer refVersion = refValue.getVersion();\n+        ResourceTokenValueRec rec;\n \n-            } else {\n-                // SearchReferenceTest system integration tests require support for arbitrary reference strings\n-                //  - Relative ==> 1234\n-                final String codeSystem = TokenParmVal.DEFAULT_TOKEN_SYSTEM;\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, codeSystem, valueString);\n-            }\n+        if (refValue.getType() == ReferenceType.DISPLAY_ONLY || refValue.getType() == ReferenceType.INVALID) {\n+            // protect against code regression. Invalid/improper references should be\n+            // filtered out already.\n+            logger.warning(\"Invalid reference parameter type: \" + resourceType + \".\" + rpv.getName() + \" type=\" + refValue.getType().name());\n+            throw new IllegalArgumentException(\"Invalid reference parameter value. See server log for details.\");", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjU0NA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528366544", "bodyText": "See previous comment.", "author": "punktilious", "createdAt": "2020-11-22T17:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "77fd42777f134d15e78f19d60ffb2f235324bad5", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java\nindex 7597a67ebf..2e8f050ec5 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java\n\n@@ -766,7 +766,7 @@ public class ParameterVisitorBatchDAO implements ExtractedParameterValueVisitor,\n         if (refValue.getType() == ReferenceType.DISPLAY_ONLY || refValue.getType() == ReferenceType.INVALID) {\n             // protect against code regression. Invalid/improper references should be\n             // filtered out already.\n-            logger.warning(\"Invalid reference parameter type: \" + resourceType + \".\" + rpv.getName() + \" type=\" + refValue.getType().name());\n+            logger.warning(\"Invalid reference parameter type: '\" + resourceType + \".\" + rpv.getName() + \"' type=\" + refValue.getType().name());\n             throw new IllegalArgumentException(\"Invalid reference parameter value. See server log for details.\");\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDMwOQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040309", "bodyText": "see subsequent comment...\notherwise delimit the log message with a single quote.", "author": "prb112", "createdAt": "2020-11-21T00:42:57Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java", "diffHunk": "@@ -809,66 +751,31 @@ public void visit(ReferenceParmVal rpv) throws FHIRPersistenceException {\n             throw new FHIRPersistenceException(\"Resource type not found in cache: '\" + resourceType + \"'\");\n         }\n \n-        final String base = getServerUrl();\n-        ResourceTokenValueRec rec;\n-        if (base != null && valueString.startsWith(base)) {\n-            // - relative reference https://example.com/Patient/123\n-            // Because this reference is to a local FHIR resource (inside this server), we need use the correct\n-            // resource type name (assigned as the code system)\n-            //  - https://localhost:9443/fhir-server/api/v4/Patient/1234\n-            //  - https://example.com/Patient/1234\n-            //  - https://example.com/Patient/1234/_history/2\n-            valueString = valueString.substring(base.length());\n-\n-            // Patient/1234\n-            // Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n-            } else {\n-                // stored as a token with the default system\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-            }\n-        } else if (valueString.startsWith(HTTP) || valueString.startsWith(HTTPS) || valueString.startsWith(URN)) {\n-            //  - absolute URL ==> http://some.system/a/fhir/resource/path\n-            //  - absolute URI ==> urn:uuid:53fefa32-1111-2222-3333-55ee120877b7\n-            // stored as a token with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else if (valueString.startsWith(\"#\")) {\n-            //  - Internal ==> #fragmentid1\n-            // stored as a token value with the default system\n-            rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, TokenParmVal.DEFAULT_TOKEN_SYSTEM, valueString);\n-        } else {\n-            //  - Relative ==> Patient/1234\n-            //  - Relative ==> Patient/1234/_history/2\n-            String[] tokens = valueString.split(\"/\");\n-            if (tokens.length > 1) {\n-                String refResourceType = tokens[0];\n-                String refLogicalId = tokens[1];\n-                Integer refVersion = null;\n-                if (tokens.length == 4 && HISTORY.equals(tokens[2])) {\n-                    // versioned reference\n-                    refVersion = Integer.parseInt(tokens[3]);\n-                }\n+        // The ReferenceValue has already been processed to convert the reference to\n+        // the required standard form, ready for insertion as a token value.\n+        ReferenceValue refValue = rpv.getRefValue();\n \n-                // Store a token value configured as a reference to another resource\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, refResourceType, refLogicalId, refVersion);\n+        // Ignore references containing only a \"display\" element (apparently supported by the spec,\n+        // but contains nothing useful to store because there's no searchable value).\n+        String refResourceType = refValue.getTargetResourceType();\n+        String refLogicalId = refValue.getValue();\n+        Integer refVersion = refValue.getVersion();\n+        ResourceTokenValueRec rec;\n \n-            } else {\n-                // SearchReferenceTest system integration tests require support for arbitrary reference strings\n-                //  - Relative ==> 1234\n-                final String codeSystem = TokenParmVal.DEFAULT_TOKEN_SYSTEM;\n-                rec = new ResourceTokenValueRec(parameterNameId, resourceType, resourceTypeId, logicalResourceId, codeSystem, valueString);\n-            }\n+        if (refValue.getType() == ReferenceType.DISPLAY_ONLY || refValue.getType() == ReferenceType.INVALID) {\n+            // protect against code regression. Invalid/improper references should be\n+            // filtered out already.\n+            logger.warning(\"Invalid reference parameter type: \" + resourceType + \".\" + rpv.getName() + \" type=\" + refValue.getType().name());", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjUxMQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528366511", "bodyText": "It's an internal programming error, so I don't think the details need to be propagated to the outside world, but we still need to log the information to help debug the problem.", "author": "punktilious", "createdAt": "2020-11-22T17:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODcyMA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528858720", "bodyText": "hum... then this should be logger.fine", "author": "prb112", "createdAt": "2020-11-23T17:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "77fd42777f134d15e78f19d60ffb2f235324bad5", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java\nindex 7597a67ebf..2e8f050ec5 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/impl/ParameterVisitorBatchDAO.java\n\n@@ -766,7 +766,7 @@ public class ParameterVisitorBatchDAO implements ExtractedParameterValueVisitor,\n         if (refValue.getType() == ReferenceType.DISPLAY_ONLY || refValue.getType() == ReferenceType.INVALID) {\n             // protect against code regression. Invalid/improper references should be\n             // filtered out already.\n-            logger.warning(\"Invalid reference parameter type: \" + resourceType + \".\" + rpv.getName() + \" type=\" + refValue.getType().name());\n+            logger.warning(\"Invalid reference parameter type: '\" + resourceType + \".\" + rpv.getName() + \"' type=\" + refValue.getType().name());\n             throw new IllegalArgumentException(\"Invalid reference parameter value. See server log for details.\");\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDM0Nw==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528040347", "bodyText": "dead code?", "author": "prb112", "createdAt": "2020-11-21T00:43:14Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java", "diffHunk": "@@ -41,19 +45,40 @@ public String getName() {\n         return name;\n     }\n \n-    public String getValueString() {\n-        return valueString;\n-    }\n+//    public String getValueString() {\n+//        return valueString;\n+//    }\n+\n+//    public void setValueString(String valueString) {\n+//        this.valueString = valueString;\n+//    }", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDMyNA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528264324", "bodyText": "fixed", "author": "punktilious", "createdAt": "2020-11-22T01:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MDM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "77fd42777f134d15e78f19d60ffb2f235324bad5", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java\nindex a08d2abfef..0d07dc41d2 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dto/ReferenceParmVal.java\n\n@@ -45,14 +42,6 @@ public class ReferenceParmVal implements ExtractedParameterValue {\n         return name;\n     }\n \n-//    public String getValueString() {\n-//        return valueString;\n-//    }\n-\n-//    public void setValueString(String valueString) {\n-//        this.valueString = valueString;\n-//    }\n-\n     /**\n      * Get the refValue\n      * @return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MTAzOQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528041039", "bodyText": "OK - so you moved the reference logic into. the ReferenceUtil", "author": "prb112", "createdAt": "2020-11-21T00:46:52Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java", "diffHunk": "@@ -597,24 +601,35 @@ public boolean visit(java.lang.String elementName, int elementIndex, Reference r\n         if (!REFERENCE.equals(searchParamType)) {\n             throw invalidComboException(searchParamType, reference);\n         }\n-        if (reference.getReference() != null) {\n-            ReferenceParmVal p = new ReferenceParmVal();\n-            p.setName(searchParamCode);\n-            p.setValueString(reference.getReference().getValue());\n-            result.add(p);\n-        }\n \n-        // Make sure we process the identifier if there is one.\n-        Identifier identifier = reference.getIdentifier();\n-        if (reference.getIdentifier() != null) {\n-            TokenParmVal p = new TokenParmVal();\n-            p.setName(searchParamCode);\n-            if (identifier.getSystem() != null) {\n-                p.setValueSystem(identifier.getSystem().getValue());\n+        // TODO pass in the bundle if we want to support \"a relative URL, which is relative to\n+        // the Service Base URL, or, if processing a resource from a bundle, which is relative\n+        // to the base URL implied by the Bundle.entry.fullUrl (see Resolving References in Bundles)\"\n+        try {\n+            final String baseUrl = ReferenceUtil.getBaseUrl(null);", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDQwOA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528264408", "bodyText": "Correct, and ReferenceUtil is a much better implementation (logic-wise).", "author": "punktilious", "createdAt": "2020-11-22T01:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MTAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "77fd42777f134d15e78f19d60ffb2f235324bad5", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java\nindex d9a816f66d..a593d1edfb 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java\n\n@@ -618,18 +618,6 @@ public class JDBCParameterBuildingVisitor extends DefaultVisitor {\n             // Log the error, but skip it because we're not supposed to throw exceptions here\n             log.log(Level.WARNING, \"Error processing reference\", x);\n         }\n-\n-        // Make sure we process the identifier if there is one.\n-//        Identifier identifier = reference.getIdentifier();\n-//        if (reference.getIdentifier() != null) {\n-//            TokenParmVal p = new TokenParmVal();\n-//            p.setName(searchParamCode);\n-//            if (identifier.getSystem() != null) {\n-//                p.setValueSystem(identifier.getSystem().getValue());\n-//            }\n-//            p.setValueCode(identifier.getValue().getValue());\n-//            result.add(p);\n-//        }\n         return false;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MjAzNw==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528042037", "bodyText": "I like having the single reference I can go back to and see - this was a good addition and comments.", "author": "prb112", "createdAt": "2020-11-21T00:52:13Z", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/ReferenceValue.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.search.util;\n+\n+\n+/**\n+ * A reference extracted from a FHIR resource, with processing applied to\n+ * identify the reference type and target resource type\n+ */\n+public class ReferenceValue {\n+\n+    public static enum ReferenceType {\n+        LITERAL_RELATIVE, // Patient/123abc\n+        LITERAL_ABSOLUTE, // http(s)://an.other.server/Patient/234def\n+        LOGICAL,          // e.g. SSN\n+        DISPLAY_ONLY,     // A Reference with only a display field\n+        INVALID           // Not a valid reference\n+    }", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MjYxMA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528042610", "bodyText": "Update copyright header", "author": "prb112", "createdAt": "2020-11-21T00:54:44Z", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/ParameterExtractionTest.java", "diffHunk": "@@ -73,7 +73,9 @@\n     private static final String SAMPLE_STRING = \"test\";\n     private static final String SAMPLE_URI = \"http://example.com\";\n     private static final String SAMPLE_UNIT = \"s\";\n-    private static final String SAMPLE_REF = \"abc\";\n+    private static final String SAMPLE_REF_RESOURCE_TYPE = \"Patient\";", "originalCommit": "d8aca7da42e06761540cb4a412550f67233c3081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyNjg5Mg==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528426892", "bodyText": "done", "author": "punktilious", "createdAt": "2020-11-23T00:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MjYxMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "77fd42777f134d15e78f19d60ffb2f235324bad5", "url": "https://github.com/IBM/FHIR/commit/77fd42777f134d15e78f19d60ffb2f235324bad5", "message": "issue #1708 addressed code review comments and fixed reindexing as it is required for storing compartment references\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-11-22T01:19:28Z", "type": "commit"}, {"oid": "d14f7758af996bbb04e978a92ef8235bf456d2d0", "url": "https://github.com/IBM/FHIR/commit/d14f7758af996bbb04e978a92ef8235bf456d2d0", "message": "issue #1708 updated docs per review comments\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-11-22T17:37:55Z", "type": "commit"}, {"oid": "cca3d4aa4982bdb2a156c41a1d22779f62eca4b3", "url": "https://github.com/IBM/FHIR/commit/cca3d4aa4982bdb2a156c41a1d22779f62eca4b3", "message": "issue #1708 updated copyright header\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-11-23T00:00:02Z", "type": "commit"}, {"oid": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d", "url": "https://github.com/IBM/FHIR/commit/74a614256d2cc4d1ee604fbd6ec967fe36b86a5d", "message": "issue #1708 removed excess debug logging\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-11-23T15:38:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MDI5MA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528860290", "bodyText": "perhaps declare as final and make the options constants within the class?", "author": "prb112", "createdAt": "2020-11-23T17:04:25Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java", "diffHunk": "@@ -93,47 +88,84 @@ public ReindexResourceDAO(Connection connection, IDatabaseTranslator translator,\n     protected IDatabaseTranslator getTranslator() {\n         return this.translator;\n     }\n-    \n+\n     /**\n      * Pick the next resource to process resource and lock it. Specializations for different\n      * databases may use different techniques to optimize locking/concurrency control\n      * @param reindexTstamp\n      * @return\n      * @throws Exception\n      */\n-    protected ResourceIndexRecord getNextResource(SecureRandom random, Instant reindexTstamp) throws Exception {\n+    protected ResourceIndexRecord getNextResource(SecureRandom random, Instant reindexTstamp, Integer resourceTypeId, String logicalId) throws Exception {\n         ResourceIndexRecord result = null;\n-        \n+\n         // no need to close\n         Connection connection = getConnection();\n         IDatabaseTranslator translator = getTranslator();\n-        \n+\n         // Derby can only do select for update with simple queries, so we need to select first,\n         // then try and lock, but we also have to try and cover the race condition which can\n         // occur here, using an optimistic locking pattern\n-        final String SELECT = \"\"\n-            + \"  SELECT lr.logical_resource_id, lr.resource_type_id, lr.logical_id, lr.reindex_txid \"\n-            + \"    FROM logical_resources lr \"\n-            + \"   WHERE lr.reindex_tstamp < ? \"\n-            + \"OFFSET ? ROWS FETCH FIRST 1 ROWS ONLY \"\n-            ;\n-        \n+        String select;", "originalCommit": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92bd1a75393fab6c1dbad6d357eaa936750d2c6d", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java\nindex 7816fc713a..6c3b31dd50 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java\n\n@@ -106,35 +129,16 @@ public class ReindexResourceDAO extends ResourceDAOImpl {\n         // Derby can only do select for update with simple queries, so we need to select first,\n         // then try and lock, but we also have to try and cover the race condition which can\n         // occur here, using an optimistic locking pattern\n-        String select;\n+        final String select;\n \n         if (resourceTypeId != null && logicalId != null) {\n             // Just pick the requested resource\n-            select = \"\"\n-                    + \"  SELECT lr.logical_resource_id, lr.resource_type_id, lr.logical_id, lr.reindex_txid \"\n-                    + \"    FROM logical_resources lr \"\n-                    + \"   WHERE lr.resource_type_id = ? \"\n-                    + \"     AND lr.logical_id = ? \"\n-                    + \"     AND lr.reindex_tstamp < ? \"\n-                    ;\n-\n+            select = PICK_SINGLE_RESOURCE;\n         } else if (resourceTypeId != null) {\n             // Limit to the given resource type\n-            select = \"\"\n-                    + \"  SELECT lr.logical_resource_id, lr.resource_type_id, lr.logical_id, lr.reindex_txid \"\n-                    + \"    FROM logical_resources lr \"\n-                    + \"   WHERE lr.resource_type_id = ? \"\n-                    + \"     AND lr.reindex_tstamp < ? \"\n-                    + \"OFFSET ? ROWS FETCH FIRST 1 ROWS ONLY \"\n-                    ;\n-\n+            select = PICK_SINGLE_RESOURCE_TYPE;\n         } else if (resourceTypeId == null && logicalId == null) {\n-            select = \"\"\n-                + \"  SELECT lr.logical_resource_id, lr.resource_type_id, lr.logical_id, lr.reindex_txid \"\n-                + \"    FROM logical_resources lr \"\n-                + \"   WHERE lr.reindex_tstamp < ? \"\n-                + \"OFFSET ? ROWS FETCH FIRST 1 ROWS ONLY \"\n-                ;\n+            select = PICK_ANY_RESOURCE;\n         } else {\n             // programming error\n             throw new IllegalArgumentException(\"logicalId specified without a resourceType\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MTI5Mg==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528861292", "bodyText": "so we can execute a single reindex?", "author": "prb112", "createdAt": "2020-11-23T17:05:53Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1733,21 +1781,21 @@ public boolean isReindexSupported() {\n     }\n \n     @Override\n-    public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder operationOutcomeResult, java.time.Instant tstamp)\n+    public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder operationOutcomeResult, java.time.Instant tstamp, String resourceLogicalId)", "originalCommit": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxODUyOQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528918529", "bodyText": "Yes. I added this to debug the issue Karen/Lee identified. It's extremely handy!", "author": "punktilious", "createdAt": "2020-11-23T18:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MTI5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MjAxNQ==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528862015", "bodyText": "This is where I like to static import the string method.\nimport static com.ibm.fhir.model.type.String.string;\nstring(diag)\nmakes it short and sweet", "author": "prb112", "createdAt": "2020-11-23T17:06:57Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -1825,6 +1880,37 @@ public int reindex(FHIRPersistenceContext context, OperationOutcome.Builder oper\n         return result;\n     }\n \n+    /**\n+     * Update the parameters for the resource described by the given DTO\n+     * @param <T>\n+     * @param rir\n+     * @param resourceTypeClass\n+     * @param existingResourceDTO\n+     * @param reindexDAO\n+     * @param operationOutcomeResult\n+     * @throws Exception\n+     */\n+    public <T extends Resource> void updateParameters(ResourceIndexRecord rir, Class<T> resourceTypeClass, com.ibm.fhir.persistence.jdbc.dto.Resource existingResourceDTO,\n+        ReindexResourceDAO reindexDAO, OperationOutcome.Builder operationOutcomeResult) throws Exception {\n+        if (existingResourceDTO != null && !existingResourceDTO.isDeleted()) {\n+            List<String> elements = Collections.emptyList();\n+            T existingResource = this.convertResourceDTO(existingResourceDTO, resourceTypeClass, null);\n+\n+            // Extract parameters from the resource payload we just read and store them, replacing\n+            // the existing set\n+            reindexDAO.updateParameters(rir.getResourceType(), this.extractSearchParameters(existingResource, existingResourceDTO), rir.getLogicalId(), rir.getLogicalResourceId());\n+\n+            // Use an OperationOutcome Issue to let the caller know that some work was performed\n+            final String diag = \"Processed \" + rir.getResourceType() + \"/\" + rir.getLogicalId();\n+            operationOutcomeResult.issue(Issue.builder().code(IssueType.INFORMATIONAL).severity(IssueSeverity.INFORMATION).diagnostics(com.ibm.fhir.model.type.String.of(diag)).build());\n+        } else {\n+            // Reasonable to assume that this resource was deleted because we can't read it\n+            final String diag = \"Failed to read resource: \" + rir.getResourceType() + \"/\" + rir.getLogicalId();\n+            operationOutcomeResult.issue(Issue.builder().code(IssueType.NOT_FOUND).severity(IssueSeverity.WARNING).diagnostics(com.ibm.fhir.model.type.String.of(diag)).build());", "originalCommit": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxOTY3OA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528919678", "bodyText": "Yeah, this should be updated. Fixed", "author": "punktilious", "createdAt": "2020-11-23T18:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MjAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "92bd1a75393fab6c1dbad6d357eaa936750d2c6d", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java\nindex 7af6e0f9c3..eb7f310879 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java\n\n@@ -1893,7 +1893,6 @@ public class FHIRPersistenceJDBCImpl implements FHIRPersistence, SchemaNameSuppl\n     public <T extends Resource> void updateParameters(ResourceIndexRecord rir, Class<T> resourceTypeClass, com.ibm.fhir.persistence.jdbc.dto.Resource existingResourceDTO,\n         ReindexResourceDAO reindexDAO, OperationOutcome.Builder operationOutcomeResult) throws Exception {\n         if (existingResourceDTO != null && !existingResourceDTO.isDeleted()) {\n-            List<String> elements = Collections.emptyList();\n             T existingResource = this.convertResourceDTO(existingResourceDTO, resourceTypeClass, null);\n \n             // Extract parameters from the resource payload we just read and store them, replacing\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MjU0MA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528862540", "bodyText": "seems like this should be final or treated as a constant.", "author": "prb112", "createdAt": "2020-11-23T17:07:47Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgresReindexResourceDAO.java", "diffHunk": "@@ -76,33 +76,87 @@ public ResourceIndexRecord getNextResource(SecureRandom random, Instant reindexT\n         // by existing locks. The ORDER BY is included to persuade[force] Postgres to always\n         // use the index instead of switching to a full tablescan when the distribution stats\n         // confuse the optimizer.\n-        final String UPDATE = \"\"\n-            + \"   UPDATE logical_resources \"\n-            + \"      SET reindex_tstamp = ?,\"\n-            + \"          reindex_txid = COALESCE(reindex_txid + 1, 1) \"\n-            + \"    WHERE logical_resource_id = ( \"\n-            + \"       SELECT lr.logical_resource_id \"\n-            + \"         FROM logical_resources lr \"\n-            + \"        WHERE lr.reindex_tstamp < ? \"\n-            + \"     ORDER BY lr.reindex_tstamp DESC \"\n-            + \"   FOR UPDATE SKIP LOCKED LIMIT 1) \"\n-            + \"RETURNING logical_resource_id, resource_type_id, logical_id, reindex_txid \"\n-            ;\n-        \n-        try (PreparedStatement stmt = connection.prepareStatement(UPDATE)) {\n-            stmt.setTimestamp(1, Timestamp.from(reindexTstamp));\n-            stmt.setTimestamp(2, Timestamp.from(reindexTstamp));\n+        String update;", "originalCommit": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92bd1a75393fab6c1dbad6d357eaa936750d2c6d", "chunk": "diff --git a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgresReindexResourceDAO.java b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgresReindexResourceDAO.java\nindex 19623dd61b..dfdd195c6c 100644\n--- a/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgresReindexResourceDAO.java\n+++ b/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/postgresql/PostgresReindexResourceDAO.java\n\n@@ -76,54 +118,16 @@ public class PostgresReindexResourceDAO extends ReindexResourceDAO {\n         // by existing locks. The ORDER BY is included to persuade[force] Postgres to always\n         // use the index instead of switching to a full tablescan when the distribution stats\n         // confuse the optimizer.\n-        String update;\n+        final String update;\n         if (resourceTypeId != null && logicalId != null) {\n             // Limit to one resource\n-            update = \"\"\n-                + \"   UPDATE logical_resources \"\n-                + \"      SET reindex_tstamp = ?,\"\n-                + \"          reindex_txid = COALESCE(reindex_txid + 1, 1) \"\n-                + \"    WHERE logical_resource_id = ( \"\n-                + \"       SELECT lr.logical_resource_id \"\n-                + \"         FROM logical_resources lr \"\n-                + \"        WHERE lr.resource_type_id = ? \"\n-                + \"          AND lr.logical_id = ? \"\n-                + \"          AND lr.reindex_tstamp < ? \"\n-                + \"     ORDER BY lr.reindex_tstamp DESC \"\n-                + \"   FOR UPDATE SKIP LOCKED LIMIT 1) \"\n-                + \"RETURNING logical_resource_id, resource_type_id, logical_id, reindex_txid \"\n-                ;\n+            update = PICK_SINGLE_RESOURCE;\n         } else if (resourceTypeId != null) {\n             // Limit to one type of resource\n-            update = \"\"\n-                    + \"   UPDATE logical_resources \"\n-                    + \"      SET reindex_tstamp = ?, \"\n-                    + \"          reindex_txid = COALESCE(reindex_txid + 1, 1) \"\n-                    + \"    WHERE logical_resource_id = ( \"\n-                    + \"       SELECT lr.logical_resource_id \"\n-                    + \"         FROM logical_resources lr \"\n-                    + \"        WHERE lr.resource_type_id = ? \"\n-                    + \"          AND lr.reindex_tstamp < ? \"\n-                    + \"     ORDER BY lr.reindex_tstamp DESC \"\n-                    + \"   FOR UPDATE SKIP LOCKED LIMIT 1) \"\n-                    + \"RETURNING logical_resource_id, resource_type_id, logical_id, reindex_txid \"\n-                    ;\n-\n+            update = PICK_SINGLE_RESOURCE_TYPE;\n         } else if (resourceTypeId == null && logicalId == null) {\n             // Pick the next resource needing to be reindexed regardless of type\n-            update = \"\"\n-                    + \"   UPDATE logical_resources \"\n-                    + \"      SET reindex_tstamp = ?,\"\n-                    + \"          reindex_txid = COALESCE(reindex_txid + 1, 1) \"\n-                    + \"    WHERE logical_resource_id = ( \"\n-                    + \"       SELECT lr.logical_resource_id \"\n-                    + \"         FROM logical_resources lr \"\n-                    + \"        WHERE lr.reindex_tstamp < ? \"\n-                    + \"     ORDER BY lr.reindex_tstamp DESC \"\n-                    + \"   FOR UPDATE SKIP LOCKED LIMIT 1) \"\n-                    + \"RETURNING logical_resource_id, resource_type_id, logical_id, reindex_txid \"\n-                    ;\n-\n+            update = PICK_ANY_RESOURCE;\n         } else {\n             // programming error\n             throw new IllegalArgumentException(\"logicalId specified without a resourceType\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2NDczOA==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528864738", "bodyText": "We should probably have a defense against say 10000000 resources get reindexed. What's a reasonable defense/upper limit?", "author": "prb112", "createdAt": "2020-11-23T17:11:08Z", "path": "operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java", "diffHunk": "@@ -92,12 +94,14 @@ protected Parameters doInvoke(FHIROperationContext operationContext, Class<? ext\n                             // assume full ISO format\n                             tstamp = Instant.parse(val);\n                         }\n-\n                     } else if (PARAM_RESOURCE_COUNT.equals(parameter.getName().getValue())) {", "originalCommit": "74a614256d2cc4d1ee604fbd6ec967fe36b86a5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxOTkyMw==", "url": "https://github.com/IBM/FHIR/pull/1740#discussion_r528919923", "bodyText": "done", "author": "punktilious", "createdAt": "2020-11-23T18:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2NDczOA=="}], "type": "inlineReview", "revised_code": {"commit": "07f794b3780809ac687d95892c925c4b679ada5d", "chunk": "diff --git a/operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java b/operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java\nindex 28b1c30c60..b1e68cd42b 100644\n--- a/operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java\n+++ b/operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java\n\n@@ -97,6 +100,10 @@ public class ReindexOperation extends AbstractOperation {\n                     } else if (PARAM_RESOURCE_COUNT.equals(parameter.getName().getValue())) {\n                         Integer val = parameter.getValue().as(com.ibm.fhir.model.type.Integer.class).getValue();\n                         if (val != null) {\n+                            if (val > MAX_RESOURCE_COUNT) {\n+                                logger.info(\"Clamping resourceCount \" + val + \" to max allowed: \" + MAX_RESOURCE_COUNT);\n+                                val = MAX_RESOURCE_COUNT;\n+                            }\n                             resourceCount = val;\n                         }\n                     } else if (PARAM_RESOURCE_LOGICAL_ID.equals(parameter.getName().getValue())) {\n"}}, {"oid": "07f794b3780809ac687d95892c925c4b679ada5d", "url": "https://github.com/IBM/FHIR/commit/07f794b3780809ac687d95892c925c4b679ada5d", "message": "issue #1742 clamp resource count to 1000 to avoid client read timeouts\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-11-23T18:35:29Z", "type": "commit"}, {"oid": "92bd1a75393fab6c1dbad6d357eaa936750d2c6d", "url": "https://github.com/IBM/FHIR/commit/92bd1a75393fab6c1dbad6d357eaa936750d2c6d", "message": "issue #1742 address review comments\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-11-23T19:06:01Z", "type": "commit"}]}