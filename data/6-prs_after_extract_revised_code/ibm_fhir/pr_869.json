{"pr_number": 869, "pr_title": "issue #664 #884 conditional delete multiple match support and config for disabling bulk export public access", "pr_createdAt": "2020-03-30T18:30:15Z", "pr_url": "https://github.com/IBM/FHIR/pull/869", "timeline": [{"oid": "c1bc05640eb576b6463ed47c1986b84420ab1b81", "url": "https://github.com/IBM/FHIR/commit/c1bc05640eb576b6463ed47c1986b84420ab1b81", "message": "Merge pull request #868 from IBM/issue-664\n\nIssue 664 - sync with master", "committedDate": "2020-03-30T18:15:14Z", "type": "commit"}, {"oid": "8ec11924798594357a2603d7c09b4135fcd200f9", "url": "https://github.com/IBM/FHIR/commit/8ec11924798594357a2603d7c09b4135fcd200f9", "message": "issue #664 conditional multiple delete support\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-30T18:28:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ0MjQzMA==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r400442430", "bodyText": "this is the only real change in this file, all the others are just formats like removing empty spaces at the line ends.", "author": "albertwang-ibm", "createdAt": "2020-03-30T19:31:52Z", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java", "diffHunk": "@@ -2209,8 +2209,7 @@ public void testBatchConditionalDeletes() throws Exception {\n         assertResponseBundle(responseBundle, BundleType.BATCH_RESPONSE, 4);\n         assertGoodGetResponse(responseBundle.getEntry().get(0), Status.OK.getStatusCode(), HTTPReturnPreference.MINIMAL);\n         assertGoodGetResponse(responseBundle.getEntry().get(1), Status.NO_CONTENT.getStatusCode(), HTTPReturnPreference.MINIMAL);\n-        assertBadResponse(responseBundle.getEntry().get(2), Status.PRECONDITION_FAILED.getStatusCode(),\n-                \"returned multiple matches\");\n+        assertGoodGetResponse(responseBundle.getEntry().get(2), Status.NO_CONTENT.getStatusCode(), HTTPReturnPreference.MINIMAL);", "originalCommit": "8ec11924798594357a2603d7c09b4135fcd200f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27e7f1ab2797531f384a51a5ebe23f5c256848de", "chunk": "diff --git a/fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java b/fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java\nindex 7c1292c290..373ba4a35f 100644\n--- a/fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java\n+++ b/fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java\n\n@@ -2209,7 +2209,22 @@ public class BundleTest extends FHIRServerTestBase {\n         assertResponseBundle(responseBundle, BundleType.BATCH_RESPONSE, 4);\n         assertGoodGetResponse(responseBundle.getEntry().get(0), Status.OK.getStatusCode(), HTTPReturnPreference.MINIMAL);\n         assertGoodGetResponse(responseBundle.getEntry().get(1), Status.NO_CONTENT.getStatusCode(), HTTPReturnPreference.MINIMAL);\n-        assertGoodGetResponse(responseBundle.getEntry().get(2), Status.NO_CONTENT.getStatusCode(), HTTPReturnPreference.MINIMAL);\n+\n+        // A search that results in multiple matches:\n+        // (1) if matches > FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 400 status code.\n+        // (2) if matches <= FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 204 status code.\n+        WebTarget target = getWebTarget();\n+        Response response2 =\n+                target.path(\"Patient\").queryParam(\"name\", \"Doe\").request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        assertResponse(response2, Response.Status.OK.getStatusCode());\n+        Bundle searchResultBundle = response2.readEntity(Bundle.class);\n+        if (searchResultBundle.getTotal().getValue() <= 10 ) {\n+            assertGoodGetResponse(responseBundle.getEntry().get(2), Status.NO_CONTENT.getStatusCode(), HTTPReturnPreference.MINIMAL);\n+        } else {\n+            assertBadResponse(responseBundle.getEntry().get(2), Status.BAD_REQUEST.getStatusCode(),\n+                    \"The search criteria specified for a conditional delete operation returned too many matches\");\n+        }\n+\n         assertBadResponse(responseBundle.getEntry().get(3), Status.BAD_REQUEST.getStatusCode(),\n                 \"Search parameter 'NOTASEARCH' for resource type 'Patient' was not found.\");\n \n"}}, {"oid": "27e7f1ab2797531f384a51a5ebe23f5c256848de", "url": "https://github.com/IBM/FHIR/commit/27e7f1ab2797531f384a51a5ebe23f5c256848de", "message": "issue #664 add config for conditional delete\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-04-01T13:55:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxODUwNQ==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r401818505", "bodyText": "should it be a 412 to be more consistent with the fhir spec?", "author": "lmsurpre", "createdAt": "2020-04-01T18:22:18Z", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java", "diffHunk": "@@ -2209,8 +2209,22 @@ public void testBatchConditionalDeletes() throws Exception {\n         assertResponseBundle(responseBundle, BundleType.BATCH_RESPONSE, 4);\n         assertGoodGetResponse(responseBundle.getEntry().get(0), Status.OK.getStatusCode(), HTTPReturnPreference.MINIMAL);\n         assertGoodGetResponse(responseBundle.getEntry().get(1), Status.NO_CONTENT.getStatusCode(), HTTPReturnPreference.MINIMAL);\n-        assertBadResponse(responseBundle.getEntry().get(2), Status.PRECONDITION_FAILED.getStatusCode(),\n-                \"returned multiple matches\");\n+\n+        // A search that results in multiple matches:\n+        // (1) if matches > FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 400 status code.", "originalCommit": "27e7f1ab2797531f384a51a5ebe23f5c256848de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjM1MQ==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r401822351", "bodyText": "Multiple matches: A server may choose to delete all the matching resources, or it may choose to return a 412 Precondition Failed error indicating the client's criteria were not selective enough. A server indicates whether it can delete multiple resources in its Capability Statement (.rest.resource.conditionalDelete)", "author": "lmsurpre", "createdAt": "2020-04-01T18:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxODUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzQ2OQ==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r401953469", "bodyText": "I choose not to use 412 just because I thought 412 means we don't support multiple matches at all. but we does support. anyway, I'm ok to change to use 412 instead.", "author": "albertwang-ibm", "createdAt": "2020-04-01T22:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxODUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NTYyMA==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r401975620", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-04-01T23:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxODUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4601fb2e8e99fdbf31a5af5cfef637749a579d90", "chunk": "diff --git a/fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java b/fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java\nindex 373ba4a35f..150b034325 100644\n--- a/fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java\n+++ b/fhir-server-test/src/test/java/com/ibm/fhir/server/test/BundleTest.java\n\n@@ -2211,7 +2211,7 @@ public class BundleTest extends FHIRServerTestBase {\n         assertGoodGetResponse(responseBundle.getEntry().get(1), Status.NO_CONTENT.getStatusCode(), HTTPReturnPreference.MINIMAL);\n \n         // A search that results in multiple matches:\n-        // (1) if matches > FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 400 status code.\n+        // (1) if matches > FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 412 status code.\n         // (2) if matches <= FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 204 status code.\n         WebTarget target = getWebTarget();\n         Response response2 =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjk1Mg==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r401822952", "bodyText": "should it be a 412 to be more consistent with the fhir spec?", "author": "lmsurpre", "createdAt": "2020-04-01T18:29:41Z", "path": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/DeleteTest.java", "diffHunk": "@@ -430,17 +435,31 @@ public void testConditionalDeleteResource() throws Exception {\n         } else {\n             assertResponse(response.getResponse(), Response.Status.METHOD_NOT_ALLOWED.getStatusCode());\n         }\n-        \n-        // A search that results in multiple matches should result in a 412 status code.\n+\n+        // A search that results in multiple matches:\n+        // (1) if matches > FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 400 status code.", "originalCommit": "27e7f1ab2797531f384a51a5ebe23f5c256848de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzU5Mg==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r401953592", "bodyText": "yes, I'm Ok to change to use 412.", "author": "albertwang-ibm", "createdAt": "2020-04-01T22:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NTY1Mw==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r401975653", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-04-01T23:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4601fb2e8e99fdbf31a5af5cfef637749a579d90", "chunk": "diff --git a/fhir-server-test/src/test/java/com/ibm/fhir/server/test/DeleteTest.java b/fhir-server-test/src/test/java/com/ibm/fhir/server/test/DeleteTest.java\nindex 06225a2096..e64fd5ab7f 100644\n--- a/fhir-server-test/src/test/java/com/ibm/fhir/server/test/DeleteTest.java\n+++ b/fhir-server-test/src/test/java/com/ibm/fhir/server/test/DeleteTest.java\n\n@@ -437,7 +437,7 @@ public class DeleteTest extends FHIRServerTestBase {\n         }\n \n         // A search that results in multiple matches:\n-        // (1) if matches > FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 400 status code.\n+        // (1) if matches > FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 412 status code.\n         // (2) if matches <= FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT, then result in a 204 status code.\n         WebTarget target = getWebTarget();\n         Response response2 =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMzk4NQ==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r401823985", "bodyText": "because you use FHIRConfigHelper to look it up, I think this means it is tenant-specific", "author": "lmsurpre", "createdAt": "2020-04-01T18:31:29Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/FHIRRestHelper.java", "diffHunk": "@@ -499,26 +503,28 @@ public FHIRRestOperationResponse doDelete(String type, String id, String searchQ\n             // resource to be deleted. Otherwise, we'll use the id value to identify the resource\n             // to be deleted.\n             Resource resourceToDelete = null;\n+            Bundle responseBundle = null;\n+\n             if (searchQueryString != null) {\n+                int searchPageSize = FHIRConfigHelper.getIntProperty(FHIRConfiguration.PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER, FHIRConstants.FHIR_CONDITIONAL_DELETE_MAX_NUMBER_DEFAULT);", "originalCommit": "27e7f1ab2797531f384a51a5ebe23f5c256848de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1OTM5NQ==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r401959395", "bodyText": "yes, I agree. just was a little bit confused about the document.", "author": "albertwang-ibm", "createdAt": "2020-04-01T23:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMzk4NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4601fb2e8e99fdbf31a5af5cfef637749a579d90", "url": "https://github.com/IBM/FHIR/commit/4601fb2e8e99fdbf31a5af5cfef637749a579d90", "message": "issue #664 updates per review comments\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-04-01T23:51:46Z", "type": "commit"}, {"oid": "7ed5b894b0315298eff762129b0e39551be438fd", "url": "https://github.com/IBM/FHIR/commit/7ed5b894b0315298eff762129b0e39551be438fd", "message": "issue #884 add config to disable public access for export\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-04-02T01:24:34Z", "type": "commit"}, {"oid": "45c9225519841c2905f62134698740401f1dd613", "url": "https://github.com/IBM/FHIR/commit/45c9225519841c2905f62134698740401f1dd613", "message": "issue #884 minor update\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-04-02T01:29:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMjgyOQ==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r402012829", "bodyText": "Is this the part that you mentioned only works on Amazon S3 and not COS?  Or that's something else?", "author": "lmsurpre", "createdAt": "2020-04-02T02:11:33Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkWriter.java", "diffHunk": "@@ -154,11 +158,18 @@ private void pushFhirJsonsToCos(InputStream in, int dataLength) throws Exception\n             if (cosBucketPathPrefix != null && cosBucketPathPrefix.trim().length() > 0) {\n                 itemName = cosBucketPathPrefix + \"/\" + ResourceTypes.get(chunkData.getIndexOfCurrentResourceType())\n                             + \"_\" + chunkData.getPartNum() + \".ndjson\";\n+                if (isExportPublic) {\n+                    // Set expiration time to 2 hours(7200 seconds).\n+                    metadata.setExpirationTime(Date.from(Instant.now().plusSeconds(7200)));", "originalCommit": "45c9225519841c2905f62134698740401f1dd613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NzQxNg==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r402297416", "bodyText": "yes, correct. IBM COS doesn't support object level expiration time, it only supports bucket level with policy setting which is well documented in IBM COS document, but IBM COS doesn't complaint if you set it even though it doesn't take effect at all.\nI have moved the codes into a separated if (isExportPublic) to avoid confusing - the old codes worked for S3 without any problem which I verified using my Amazon acount and also verified it didn't work in IBM COS;  I think this is because the meta object was really used only when cosClient.putObject is called later, I moved it just for the purpose of avoiding confusing of why do we change the meta after the request is created with the meta as a parameter.  and still, it works for S3 only.", "author": "albertwang-ibm", "createdAt": "2020-04-02T13:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMjgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzMDU3Nw==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r402330577", "bodyText": "Thanks for the explanation...mind adding a quick comment in the code to indicate that IBM COS doesn't honor this (but also doesn't fail on it)?", "author": "lmsurpre", "createdAt": "2020-04-02T13:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMjgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MTM2NA==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r402351364", "bodyText": "sure, good point!", "author": "albertwang-ibm", "createdAt": "2020-04-02T14:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMjgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1OTMzNg==", "url": "https://github.com/IBM/FHIR/pull/869#discussion_r402359336", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-04-02T14:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMjgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f88676f2b9a6cbf78656f6a038e0e005bf3523a3", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkWriter.java\nindex e47248840e..247aa5f76b 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkWriter.java\n\n@@ -160,6 +160,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                             + \"_\" + chunkData.getPartNum() + \".ndjson\";\n                 if (isExportPublic) {\n                     // Set expiration time to 2 hours(7200 seconds).\n+                    // Note: IBM COS doesn't honor this but also doesn't fail on this.\n                     metadata.setExpirationTime(Date.from(Instant.now().plusSeconds(7200)));\n                 }\n \n"}}, {"oid": "30cdf062affb37c0910ef231446d825a3bba8001", "url": "https://github.com/IBM/FHIR/commit/30cdf062affb37c0910ef231446d825a3bba8001", "message": "issue #884 minor updates to document\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-04-02T13:22:48Z", "type": "commit"}, {"oid": "f88676f2b9a6cbf78656f6a038e0e005bf3523a3", "url": "https://github.com/IBM/FHIR/commit/f88676f2b9a6cbf78656f6a038e0e005bf3523a3", "message": "issue #884 minor updates\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-04-02T14:30:51Z", "type": "commit"}]}