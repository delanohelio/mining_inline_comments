{"pr_number": 1220, "pr_title": "Issue 1129 implement drop tenant", "pr_createdAt": "2020-06-11T01:27:56Z", "pr_url": "https://github.com/IBM/FHIR/pull/1220", "timeline": [{"oid": "bfc503d917a8f478a3b123721965c67441e28afa", "url": "https://github.com/IBM/FHIR/commit/bfc503d917a8f478a3b123721965c67441e28afa", "message": "issue-1129 - implement drop tenant support for multi-tenant schemas\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-06-10T20:46:59Z", "type": "commit"}, {"oid": "7b3f10af9f61f7f7dd79dd8176c5010b2e79afed", "url": "https://github.com/IBM/FHIR/commit/7b3f10af9f61f7f7dd79dd8176c5010b2e79afed", "message": "Merge remote-tracking branch 'origin/HEAD' into issue-1129", "committedDate": "2020-06-10T21:58:17Z", "type": "commit"}, {"oid": "15625b8715507454043b8708e63ac7a549483880", "url": "https://github.com/IBM/FHIR/commit/15625b8715507454043b8708e63ac7a549483880", "message": "issue-1129 - fixed space issues for checkstyle\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-06-11T01:23:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNjY3Ng==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438726676", "bodyText": "interesting idea of tenant pooling. that means we can  pre-allocate some tenants and then associate them later with tenant names.", "author": "albertwang-ibm", "createdAt": "2020-06-11T11:48:38Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/TenantStatus.java", "diffHunk": "@@ -10,9 +10,9 @@\n  * Tenant Status Enumeration\n  */\n public enum TenantStatus {\n-    PROVISIONING,\n-    FREE,\n-    ALLOCATED,\n-    FROZEN,\n-    DROPPED\n+    PROVISIONING, // in the process of adding the partitions to the schema\n+    FREE,         // unused tenant, available for allocation (e.g. tenant pooling)", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MDc5Nw==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438760797", "bodyText": "Yes, that was discussed to improve cloud provisioning time for new customers. Still a placeholder, because this requires additional work for cloud integration support.", "author": "punktilious", "createdAt": "2020-06-11T12:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNjY3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMDU3MA==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438730570", "bodyText": "this does remind me a question, if a new table is added to the schema during the schema upgrade, will the according partitions be created automatically for all tenants in this schema?", "author": "albertwang-ibm", "createdAt": "2020-06-11T11:56:48Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java", "diffHunk": "@@ -365,43 +365,83 @@ public void detachPartition(String schemaName, String tableName, String partitio\n         final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n         final String detachedName = DataDefinitionUtil.getQualifiedName(schemaName, intoTableName);\n         final String ddl = \"ALTER TABLE \" + qname + \" DETACH PARTITION \" + partitionName + \" INTO \" + detachedName;\n-        runStatement(ddl);\n+        \n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (DataAccessException x) {\n+            // Suppress the error, in case this is an older version and we have a new table\n+            logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMzQ3MQ==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438733471", "bodyText": "and if loadPartitionInfoMap(partitionInfoMap, schemaName) get partition info from database partition system table, why can we still run into this dataaccesexeption? I mean if a partition already has already been created in a table, not sure why this can fail ...", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMDU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MzUxMQ==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438763511", "bodyText": "Good point about adding existing tenant partitions to new tables. I'll create an issue for that. It's fairly easy because all the partitions can be specified in the initial create table DDL.\nRegarding loadPartitionInfoMap, we can still run into an exception there if something goes wrong with the database connection, but at that point it's game over, can't continue.", "author": "punktilious", "createdAt": "2020-06-11T13:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMDU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyMzA0OA==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438823048", "bodyText": "creating an issue for partitions creation for existing tenants for new table is great, thanks!", "author": "albertwang-ibm", "createdAt": "2020-06-11T14:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMDU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\nindex cd542688af..b42f766e9d 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\n\n@@ -368,8 +368,7 @@ public class Db2Adapter extends CommonDatabaseAdapter {\n         \n         try {\n             runStatement(ddl);\n-        }\n-        catch (DataAccessException x) {\n+        } catch (DataAccessException x) {\n             // Suppress the error, in case this is an older version and we have a new table\n             logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDE2Ng==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438734166", "bodyText": "format, could you move \"else {\" to the above line", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:04:28Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java", "diffHunk": "@@ -365,43 +365,83 @@ public void detachPartition(String schemaName, String tableName, String partitio\n         final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n         final String detachedName = DataDefinitionUtil.getQualifiedName(schemaName, intoTableName);\n         final String ddl = \"ALTER TABLE \" + qname + \" DETACH PARTITION \" + partitionName + \" INTO \" + detachedName;\n-        runStatement(ddl);\n+        \n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (DataAccessException x) {\n+            // Suppress the error, in case this is an older version and we have a new table\n+            logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());\n+        }\n     }\n \n     @Override\n-    public void removeTenantPartitions(Collection<Table> tables, String schemaName, int tenantId,\n-            String tenantStagingTable) {\n+    public void removeTenantPartitions(Collection<Table> tables, String schemaName, int tenantId) {\n \n+        // Identify all the partitioned tables contained within schemaName\n         Map<String, PartitionInfo> partitionInfoMap = new HashMap<>();\n         loadPartitionInfoMap(partitionInfoMap, schemaName);\n \n         for (Table t: tables) {\n-            PartitionInfo pi = partitionInfoMap.get(t.getName());\n+            PartitionInfo pi = partitionInfoMap.get(t.getObjectName());\n             if (pi == null) {\n                 // We should only be dealing with partitioned tables at this stage, so this\n                 // is a fatal error\n-                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getName());\n+                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getObjectName());\n                 throw new DataAccessException(\"No partition information found for table: \" + qualifiedName);\n             }\n             else {\n                 final String partitionName = \"TENANT\" + tenantId;\n-                final String targetTableName = DataDefinitionUtil.getQualifiedName(schemaName, t.getName() + \"_\" + partitionName);\n-                removeTenantPartition(schemaName, t.getName(), partitionName, targetTableName, tenantStagingTable);\n+                final String targetTableName = getDetachedPartitionTableName(t, tenantId);\n+                detachPartition(schemaName, t.getObjectName(), partitionName, targetTableName);\n             }\n         }\n     }\n \n-    protected void removeTenantPartition(String schemaName, String tableName, String partitionName, String targetTableName,\n-            String tenantStagingTable) {\n-\n-        // Detach the given partition of the table into the targetTableName (within the same schema).\n-        detachPartition(schemaName, tableName, partitionName, targetTableName);\n+    @Override\n+    public void dropDetachedPartitions(Collection<Table> tables, String schemaName, int tenantId) {\n \n-        // We need to add this target table name to the tenantStagingTable so that we\n-        // can remember to delete it later...an operation which can only be done in\n-        // a new transaction\n-        Db2AddTableToStaging cmd = new Db2AddTableToStaging(schemaName, tenantStagingTable, targetTableName);\n-        runStatement(cmd);\n+        // Only process tables which are partitioned\n+        Map<String, PartitionInfo> partitionInfoMap = new HashMap<>();\n+        loadPartitionInfoMap(partitionInfoMap, schemaName);\n+        \n+        for (Table t : tables) {\n+            PartitionInfo pi = partitionInfoMap.get(t.getObjectName());\n+            if (pi == null) {\n+                // We should only be dealing with partitioned tables at this stage, so this\n+                // is a fatal error\n+                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getObjectName());\n+                throw new DataAccessException(\"No partition information found for table: \" + qualifiedName);\n+            } \n+            else {", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NDUyNA==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438764524", "bodyText": "Have we now officially changed that style? I've been using the other style for everything here.", "author": "punktilious", "createdAt": "2020-06-11T13:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNDk0Ng==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438824946", "bodyText": "yes, Paul reminded me a couple of times about this code style, and I followed your code style when I was changing persistence codes, and I had moved to the suggested code style per comments from Paul.", "author": "albertwang-ibm", "createdAt": "2020-06-11T14:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2NjA0Mg==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438866042", "bodyText": "done", "author": "punktilious", "createdAt": "2020-06-11T15:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\nindex cd542688af..b42f766e9d 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\n\n@@ -368,8 +368,7 @@ public class Db2Adapter extends CommonDatabaseAdapter {\n         \n         try {\n             runStatement(ddl);\n-        }\n-        catch (DataAccessException x) {\n+        } catch (DataAccessException x) {\n             // Suppress the error, in case this is an older version and we have a new table\n             logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDQ4Mg==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438734482", "bodyText": "format, could you more \"catch (Exception x) {\" to above line?", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:05:12Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java", "diffHunk": "@@ -365,43 +365,83 @@ public void detachPartition(String schemaName, String tableName, String partitio\n         final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n         final String detachedName = DataDefinitionUtil.getQualifiedName(schemaName, intoTableName);\n         final String ddl = \"ALTER TABLE \" + qname + \" DETACH PARTITION \" + partitionName + \" INTO \" + detachedName;\n-        runStatement(ddl);\n+        \n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (DataAccessException x) {\n+            // Suppress the error, in case this is an older version and we have a new table\n+            logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());\n+        }\n     }\n \n     @Override\n-    public void removeTenantPartitions(Collection<Table> tables, String schemaName, int tenantId,\n-            String tenantStagingTable) {\n+    public void removeTenantPartitions(Collection<Table> tables, String schemaName, int tenantId) {\n \n+        // Identify all the partitioned tables contained within schemaName\n         Map<String, PartitionInfo> partitionInfoMap = new HashMap<>();\n         loadPartitionInfoMap(partitionInfoMap, schemaName);\n \n         for (Table t: tables) {\n-            PartitionInfo pi = partitionInfoMap.get(t.getName());\n+            PartitionInfo pi = partitionInfoMap.get(t.getObjectName());\n             if (pi == null) {\n                 // We should only be dealing with partitioned tables at this stage, so this\n                 // is a fatal error\n-                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getName());\n+                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getObjectName());\n                 throw new DataAccessException(\"No partition information found for table: \" + qualifiedName);\n             }\n             else {\n                 final String partitionName = \"TENANT\" + tenantId;\n-                final String targetTableName = DataDefinitionUtil.getQualifiedName(schemaName, t.getName() + \"_\" + partitionName);\n-                removeTenantPartition(schemaName, t.getName(), partitionName, targetTableName, tenantStagingTable);\n+                final String targetTableName = getDetachedPartitionTableName(t, tenantId);\n+                detachPartition(schemaName, t.getObjectName(), partitionName, targetTableName);\n             }\n         }\n     }\n \n-    protected void removeTenantPartition(String schemaName, String tableName, String partitionName, String targetTableName,\n-            String tenantStagingTable) {\n-\n-        // Detach the given partition of the table into the targetTableName (within the same schema).\n-        detachPartition(schemaName, tableName, partitionName, targetTableName);\n+    @Override\n+    public void dropDetachedPartitions(Collection<Table> tables, String schemaName, int tenantId) {\n \n-        // We need to add this target table name to the tenantStagingTable so that we\n-        // can remember to delete it later...an operation which can only be done in\n-        // a new transaction\n-        Db2AddTableToStaging cmd = new Db2AddTableToStaging(schemaName, tenantStagingTable, targetTableName);\n-        runStatement(cmd);\n+        // Only process tables which are partitioned\n+        Map<String, PartitionInfo> partitionInfoMap = new HashMap<>();\n+        loadPartitionInfoMap(partitionInfoMap, schemaName);\n+        \n+        for (Table t : tables) {\n+            PartitionInfo pi = partitionInfoMap.get(t.getObjectName());\n+            if (pi == null) {\n+                // We should only be dealing with partitioned tables at this stage, so this\n+                // is a fatal error\n+                String qualifiedName = DataDefinitionUtil.getQualifiedName(schemaName, t.getObjectName());\n+                throw new DataAccessException(\"No partition information found for table: \" + qualifiedName);\n+            } \n+            else {\n+                // drop the table which now represents the detached partition\n+                final String detachedPartitionTableName = getDetachedPartitionTableName(t, tenantId);\n+                try {\n+                    logger.info(\"Dropping detached partition (table): '\" + detachedPartitionTableName + \"'\");\n+                    dropTable(schemaName, detachedPartitionTableName);\n+                } \n+                catch (Exception x) {\n+                    // we want this to be idempotent, so we suppress propagation of any error", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2NjE5OQ==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438866199", "bodyText": "done", "author": "punktilious", "createdAt": "2020-06-11T15:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\nindex cd542688af..b42f766e9d 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\n\n@@ -368,8 +368,7 @@ public class Db2Adapter extends CommonDatabaseAdapter {\n         \n         try {\n             runStatement(ddl);\n-        }\n-        catch (DataAccessException x) {\n+        } catch (DataAccessException x) {\n             // Suppress the error, in case this is an older version and we have a new table\n             logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczODQ1Ng==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438738456", "bodyText": "format, how about moving \"catch (DataAccessException x) {\" to above line?", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:13:39Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java", "diffHunk": "@@ -365,43 +365,83 @@ public void detachPartition(String schemaName, String tableName, String partitio\n         final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n         final String detachedName = DataDefinitionUtil.getQualifiedName(schemaName, intoTableName);\n         final String ddl = \"ALTER TABLE \" + qname + \" DETACH PARTITION \" + partitionName + \" INTO \" + detachedName;\n-        runStatement(ddl);\n+        \n+        try {\n+            runStatement(ddl);\n+        }\n+        catch (DataAccessException x) {", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2NjMzMg==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438866332", "bodyText": "done", "author": "punktilious", "createdAt": "2020-06-11T15:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczODQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\nindex cd542688af..b42f766e9d 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2Adapter.java\n\n@@ -368,8 +368,7 @@ public class Db2Adapter extends CommonDatabaseAdapter {\n         \n         try {\n             runStatement(ddl);\n-        }\n-        catch (DataAccessException x) {\n+        } catch (DataAccessException x) {\n             // Suppress the error, in case this is an older version and we have a new table\n             logger.warning(\"Detach partition skipped for '\" + qname + \"/\" + partitionName + \"'. Reason: \" + x.getMessage());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MDQzMw==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438740433", "bodyText": "curious, why using \"visited\" instead of \"visit\"?", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:17:36Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/DataModelVisitor.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.database.utils.model;\n+\n+\n+/**\n+ * Visitor interface used to traverse the PhysicalDataModel\n+ */\n+public interface DataModelVisitor {\n+\n+    /**\n+     * Process a foreign key constraint from the model\n+     * @param fk\n+     */\n+    public void visited(Table fromChildTable, ForeignKeyConstraint fk);", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MDE4NA==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438770184", "bodyText": "It's on the receiving side. It's just to differentiate from the visit(...) call on the model object itself (e.g. Table) which is the thing being visited. The DataModelVisitor goes to visit(...) each object in the PhysicalDataModel, and each object then tells the visitor, \"hey, you've visited(...) me\". That's the logic I use in my head.", "author": "punktilious", "createdAt": "2020-06-11T13:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MDQzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MzY5NA==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438743694", "bodyText": "move \"catch (SQLException x) {\" to above line?", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:24:12Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.tenant;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.DataAccessException;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n+\n+/**\n+ * Delete the tenant meta-data after it has been dropped. Deletes\n+ * data in TENANT_KEYS and TENANTS.\n+ */\n+public class DeleteTenantDAO implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final int tenantId;\n+    \n+    /**\n+     * Get partition information for all tables in the tableSchema, using\n+     * the catalogSchema as the schema containing the DATAPARTITIONS system table\n+     * \n+     * @param schemaName the name of the admin schema hosting the tenants and tenant_keys tables\n+     * @param tenantId the id of the tenant to delete\n+     */\n+    public DeleteTenantDAO(String schemaName, int tenantId) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        this.schemaName = schemaName;\n+        this.tenantId = tenantId;\n+    }\n+    \n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        deleteFromTenantKeys(translator, c);\n+        deleteFromTenants(translator, c);\n+    }\n+    \n+    protected void deleteFromTenantKeys(IDatabaseTranslator translator, Connection c) {\n+        final String tableName = DataDefinitionUtil.getQualifiedName(schemaName, \"TENANT_KEYS\");\n+        final String DML = \"\"\n+                + \"   DELETE FROM \" + tableName\n+                + \"    WHERE mt_id = ? \"\n+                ;\n+\n+        try (PreparedStatement ps = c.prepareStatement(DML)) {\n+            ps.setInt(1, tenantId);\n+            ps.executeUpdate();\n+        }\n+        catch (SQLException x) {", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java\nindex b11f54fef7..5209d172f0 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java\n\n@@ -21,7 +21,10 @@ import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n  * data in TENANT_KEYS and TENANTS.\n  */\n public class DeleteTenantDAO implements IDatabaseStatement {\n+    // the FHIR admin schema name where the TENANTS and TENANT_KEYS tables live\n     private final String schemaName;\n+    \n+    // The id of the tenant to delete\n     private final int tenantId;\n     \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0Mzk2Mg==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438743962", "bodyText": "move \"catch (SQLException x) {\" to above line?", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:24:37Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.tenant;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.DataAccessException;\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n+\n+/**\n+ * Delete the tenant meta-data after it has been dropped. Deletes\n+ * data in TENANT_KEYS and TENANTS.\n+ */\n+public class DeleteTenantDAO implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final int tenantId;\n+    \n+    /**\n+     * Get partition information for all tables in the tableSchema, using\n+     * the catalogSchema as the schema containing the DATAPARTITIONS system table\n+     * \n+     * @param schemaName the name of the admin schema hosting the tenants and tenant_keys tables\n+     * @param tenantId the id of the tenant to delete\n+     */\n+    public DeleteTenantDAO(String schemaName, int tenantId) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        this.schemaName = schemaName;\n+        this.tenantId = tenantId;\n+    }\n+    \n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        deleteFromTenantKeys(translator, c);\n+        deleteFromTenants(translator, c);\n+    }\n+    \n+    protected void deleteFromTenantKeys(IDatabaseTranslator translator, Connection c) {\n+        final String tableName = DataDefinitionUtil.getQualifiedName(schemaName, \"TENANT_KEYS\");\n+        final String DML = \"\"\n+                + \"   DELETE FROM \" + tableName\n+                + \"    WHERE mt_id = ? \"\n+                ;\n+\n+        try (PreparedStatement ps = c.prepareStatement(DML)) {\n+            ps.setInt(1, tenantId);\n+            ps.executeUpdate();\n+        }\n+        catch (SQLException x) {\n+            // Translate the exception into something a little more meaningful\n+            // for this database type and application\n+            throw translator.translate(x);\n+        }\n+        \n+    }\n+\n+    protected void deleteFromTenants(IDatabaseTranslator translator, Connection c) {\n+        final String tableName = DataDefinitionUtil.getQualifiedName(schemaName, \"TENANTS\");\n+        final String DML = \"\"\n+                + \"   DELETE FROM \" + tableName\n+                + \"    WHERE mt_id = ? \"\n+                + \"      AND tenant_status = ?\"\n+                ;\n+\n+        try (PreparedStatement ps = c.prepareStatement(DML)) {\n+            ps.setInt(1, tenantId);\n+            ps.setString(2, TenantStatus.DROPPED.name());\n+            int rows = ps.executeUpdate();\n+            \n+            if (rows < 1) {\n+                throw new DataAccessException(\"Invalid tenant_id or tenant not DROPPED\");\n+            }\n+        }", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2NjQ3OA==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438866478", "bodyText": "done", "author": "punktilious", "createdAt": "2020-06-11T15:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0Mzk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java\nindex b11f54fef7..5209d172f0 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/tenant/DeleteTenantDAO.java\n\n@@ -21,7 +21,10 @@ import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n  * data in TENANT_KEYS and TENANTS.\n  */\n public class DeleteTenantDAO implements IDatabaseStatement {\n+    // the FHIR admin schema name where the TENANTS and TENANT_KEYS tables live\n     private final String schemaName;\n+    \n+    // The id of the tenant to delete\n     private final int tenantId;\n     \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1Mzk1OA==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438753958", "bodyText": "could we add a locked status to tenant which can help us to create a feature in the future to prevent access to the tenant temporarily?   or maybe we can re-use \"FROZEN\" for the purpose if it's not dedicated to dropped only.", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:43:53Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/TenantStatus.java", "diffHunk": "@@ -10,9 +10,9 @@\n  * Tenant Status Enumeration\n  */\n public enum TenantStatus {\n-    PROVISIONING,\n-    FREE,\n-    ALLOCATED,\n-    FROZEN,\n-    DROPPED\n+    PROVISIONING, // in the process of adding the partitions to the schema\n+    FREE,         // unused tenant, available for allocation (e.g. tenant pooling)\n+    ALLOCATED,    // allocated and in use\n+    FROZEN,       // about to be dropped\n+    DROPPED       // all tenant resources have been release", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwMzc1MA==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438803750", "bodyText": "We can easily add a new status when we implement that new feature. Would need to be supported in the SET_TENANT stored procedure.", "author": "punktilious", "createdAt": "2020-06-11T13:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1Mzk1OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1OTEwNQ==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438759105", "bodyText": "format ...", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:53:05Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "diffHunk": "@@ -697,6 +709,30 @@ protected void allocateTenant() {\n         }\n     }\n \n+    /**\n+     * List the tenants currently configured\n+     */\n+    protected void listTenants() {\n+        if (!MULTITENANT_FEATURE_ENABLED.contains(dbType)) {\n+            return;\n+        }\n+        Db2Adapter adapter = new Db2Adapter(connectionPool);\n+        try (ITransaction tx = TransactionFactory.openTransaction(connectionPool)) {\n+            try {\n+                GetTenantList rtListGetter = new GetTenantList(adminSchemaName);\n+                List<TenantInfo> tenants = adapter.runStatement(rtListGetter);\n+                \n+                System.out.println(TenantInfo.getHeader());\n+                tenants.forEach(t -> System.out.println(t.toString()));\n+            } \n+            catch (DataAccessException x) {", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2NjU4Nw==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438866587", "bodyText": "done", "author": "punktilious", "createdAt": "2020-06-11T15:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1OTEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java\nindex b45c107bf9..2a8d5ee30c 100644\n--- a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java\n+++ b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java\n\n@@ -724,8 +724,7 @@ public class Main {\n                 \n                 System.out.println(TenantInfo.getHeader());\n                 tenants.forEach(t -> System.out.println(t.toString()));\n-            } \n-            catch (DataAccessException x) {\n+            } catch (DataAccessException x) {\n                 // Something went wrong, so mark the transaction as failed\n                 tx.setRollbackOnly();\n                 throw x;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MDk1Mg==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438760952", "bodyText": "it's a little bit strange that \"drop-tenant\" doesn't really drop the detached tables. maybe we should change it to \"detach-tenant\"?", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:56:19Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/util/CommonUtil.java", "diffHunk": "@@ -116,7 +116,18 @@ public static void printUsage() {\n \n         // Drops a Tenant\n         ps.println(\"--drop-tenant tenantName\");\n-        ps.println(\" * drops the tenant given the tenantName\");\n+        ps.println(\" * (phase 1) drops the tenant given the tenantName\");", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NDM2MQ==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438774361", "bodyText": "It does try to drop the tables. It could potentially succeed in the first call if Db2 were quick enough with its async processes.", "author": "punktilious", "createdAt": "2020-06-11T13:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MDk1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MTgxNw==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438761817", "bodyText": "format ... move to above line?", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:57:50Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+\n+/**\n+ * Fetch the {@link TenantInfo} for the tenantName. Returns a null\n+ * TenantInfo if the tenant does not exist\n+ */\n+public class GetTenantInfo implements IDatabaseSupplier<TenantInfo> {\n+    private final String adminSchema;\n+    private final String tenantName;\n+\n+    public GetTenantInfo(String adminSchema, String tenantName) {\n+        this.adminSchema = adminSchema;\n+        this.tenantName = tenantName;\n+    }\n+\n+    @Override\n+    public TenantInfo run(IDatabaseTranslator translator, Connection c) {\n+        TenantInfo result;\n+\n+        // We take a look at the catalog to find which schema has partitions\n+        // for each tenant. This would, of course, be easier if the schema\n+        // had been stored as an attribute of the tenant in the first place.\n+        final String SQL = \"\"\n+                + \"SELECT \"\n+                + \"       t.mt_id, t.tenant_name, \"\n+                + \"       t.tenant_status, \"\n+                + \"       dp.tabschema \"\n+                + \"  FROM \" + adminSchema + \".TENANTS AS t \"\n+                + \"LEFT OUTER JOIN syscat.datapartitions dp \"\n+                + \"             ON (dp.tabname = 'LOGICAL_RESOURCES' \"\n+                + \"            AND dp.datapartitionname = CONCAT('TENANT', t.mt_id))\"\n+                + \" WHERE t.tenant_name = ?\";\n+        \n+\n+        try (PreparedStatement s = c.prepareStatement(SQL)) {\n+            s.setString(1, tenantName);\n+            ResultSet rs = s.executeQuery();\n+            if (rs.next()) {\n+                result = new TenantInfo();\n+                result.setTenantId(rs.getInt(1));\n+                result.setTenantName(rs.getString(2));\n+                result.setTenantStatus(TenantStatus.valueOf(rs.getString(3)));\n+                result.setTenantSchema(rs.getString(4));\n+            }\n+            else {", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2Njc2Nw==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438866767", "bodyText": "done", "author": "punktilious", "createdAt": "2020-06-11T15:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java\nindex 783b51df13..e03952e54c 100644\n--- a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java\n+++ b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java\n\n@@ -20,9 +20,17 @@ import com.ibm.fhir.database.utils.api.TenantStatus;\n  * TenantInfo if the tenant does not exist\n  */\n public class GetTenantInfo implements IDatabaseSupplier<TenantInfo> {\n+    // The FHIR admin schema name\n     private final String adminSchema;\n+    \n+    // The name of the tenant for which we want the info\n     private final String tenantName;\n \n+    /**\n+     * Public constructor\n+     * @param adminSchema\n+     * @param tenantName\n+     */\n     public GetTenantInfo(String adminSchema, String tenantName) {\n         this.adminSchema = adminSchema;\n         this.tenantName = tenantName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MTg4Nw==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438761887", "bodyText": "format ...", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:57:57Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+\n+/**\n+ * Fetch the {@link TenantInfo} for the tenantName. Returns a null\n+ * TenantInfo if the tenant does not exist\n+ */\n+public class GetTenantInfo implements IDatabaseSupplier<TenantInfo> {\n+    private final String adminSchema;\n+    private final String tenantName;\n+\n+    public GetTenantInfo(String adminSchema, String tenantName) {\n+        this.adminSchema = adminSchema;\n+        this.tenantName = tenantName;\n+    }\n+\n+    @Override\n+    public TenantInfo run(IDatabaseTranslator translator, Connection c) {\n+        TenantInfo result;\n+\n+        // We take a look at the catalog to find which schema has partitions\n+        // for each tenant. This would, of course, be easier if the schema\n+        // had been stored as an attribute of the tenant in the first place.\n+        final String SQL = \"\"\n+                + \"SELECT \"\n+                + \"       t.mt_id, t.tenant_name, \"\n+                + \"       t.tenant_status, \"\n+                + \"       dp.tabschema \"\n+                + \"  FROM \" + adminSchema + \".TENANTS AS t \"\n+                + \"LEFT OUTER JOIN syscat.datapartitions dp \"\n+                + \"             ON (dp.tabname = 'LOGICAL_RESOURCES' \"\n+                + \"            AND dp.datapartitionname = CONCAT('TENANT', t.mt_id))\"\n+                + \" WHERE t.tenant_name = ?\";\n+        \n+\n+        try (PreparedStatement s = c.prepareStatement(SQL)) {\n+            s.setString(1, tenantName);\n+            ResultSet rs = s.executeQuery();\n+            if (rs.next()) {\n+                result = new TenantInfo();\n+                result.setTenantId(rs.getInt(1));\n+                result.setTenantName(rs.getString(2));\n+                result.setTenantStatus(TenantStatus.valueOf(rs.getString(3)));\n+                result.setTenantSchema(rs.getString(4));\n+            }\n+            else {\n+                result = null;\n+            }\n+        }\n+        catch (SQLException x) {", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2Njg0OQ==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438866849", "bodyText": "done", "author": "punktilious", "createdAt": "2020-06-11T15:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MTg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java\nindex 783b51df13..e03952e54c 100644\n--- a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java\n+++ b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantInfo.java\n\n@@ -20,9 +20,17 @@ import com.ibm.fhir.database.utils.api.TenantStatus;\n  * TenantInfo if the tenant does not exist\n  */\n public class GetTenantInfo implements IDatabaseSupplier<TenantInfo> {\n+    // The FHIR admin schema name\n     private final String adminSchema;\n+    \n+    // The name of the tenant for which we want the info\n     private final String tenantName;\n \n+    /**\n+     * Public constructor\n+     * @param adminSchema\n+     * @param tenantName\n+     */\n     public GetTenantInfo(String adminSchema, String tenantName) {\n         this.adminSchema = adminSchema;\n         this.tenantName = tenantName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MjA1MQ==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438762051", "bodyText": "format ...", "author": "albertwang-ibm", "createdAt": "2020-06-11T12:58:14Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantList.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.control;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseSupplier;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+import com.ibm.fhir.database.utils.api.TenantStatus;\n+\n+/**\n+ * Fetch the list of tenants currently configured\n+ */\n+public class GetTenantList implements IDatabaseSupplier<List<TenantInfo>> {\n+    private final String adminSchema;\n+\n+    public GetTenantList(String adminSchema) {\n+        this.adminSchema = adminSchema;\n+    }\n+\n+    @Override\n+    public List<TenantInfo> run(IDatabaseTranslator translator, Connection c) {\n+        List<TenantInfo> result = new ArrayList<>();\n+\n+        // We take a look at the catalog to find which schema has partitions\n+        // for each tenant. This would, of course, be easier if the schema\n+        // had been stored as an attribute of the tenant in the first place.\n+        final String SQL = \"\"\n+                + \"SELECT \"\n+                + \"       t.mt_id, t.tenant_name, \"\n+                + \"       t.tenant_status, \"\n+                + \"       dp.tabschema \"\n+                + \"  FROM \" + adminSchema + \".TENANTS AS t \"\n+                + \"LEFT OUTER JOIN syscat.datapartitions dp \"\n+                + \"             ON (dp.tabname = 'PARAMETER_NAMES' \"\n+                + \"            AND dp.datapartitionname = CONCAT('TENANT', t.mt_id))\"\n+                + \" ORDER BY t.mt_id\";\n+        \n+\n+        try (Statement s = c.createStatement()) {\n+            ResultSet rs = s.executeQuery(SQL);\n+            while (rs.next()) {\n+                TenantInfo dto = new TenantInfo();\n+                dto.setTenantId(rs.getInt(1));\n+                dto.setTenantName(rs.getString(2));\n+                dto.setTenantStatus(TenantStatus.valueOf(rs.getString(3)));\n+                dto.setTenantSchema(rs.getString(4));\n+                result.add(dto);\n+            }\n+        }\n+        catch (SQLException x) {", "originalCommit": "15625b8715507454043b8708e63ac7a549483880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2Njk3OA==", "url": "https://github.com/IBM/FHIR/pull/1220#discussion_r438866978", "bodyText": "done", "author": "punktilious", "createdAt": "2020-06-11T15:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MjA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "chunk": "diff --git a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantList.java b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantList.java\nindex a749fca04d..c91881e056 100644\n--- a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantList.java\n+++ b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/GetTenantList.java\n\n@@ -23,6 +23,10 @@ import com.ibm.fhir.database.utils.api.TenantStatus;\n public class GetTenantList implements IDatabaseSupplier<List<TenantInfo>> {\n     private final String adminSchema;\n \n+    /**\n+     * Public constructor\n+     * @param adminSchema\n+     */\n     public GetTenantList(String adminSchema) {\n         this.adminSchema = adminSchema;\n     }\n"}}, {"oid": "2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "url": "https://github.com/IBM/FHIR/commit/2855a5a995ec69d7b9f0f45a20e65f6b9fea024e", "message": "issue-1129 - code style review comments\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-06-11T14:32:42Z", "type": "commit"}]}