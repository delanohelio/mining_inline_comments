{"pr_number": 1526, "pr_title": "issue #1480 - introduce new fhir-server-config security group and use", "pr_createdAt": "2020-09-28T15:47:37Z", "pr_url": "https://github.com/IBM/FHIR/pull/1526", "timeline": [{"oid": "cabdc2ffc52df961ca93283570815f37222286f8", "url": "https://github.com/IBM/FHIR/commit/cabdc2ffc52df961ca93283570815f37222286f8", "message": "issue #1480 - introduce new fhir-server-config security group and use\n\n1. combine our existing \"oauth\" and \"authFilter\" fhir-server-config property groups into a single new group called \"security\".\n\n2. introduce new properties like:\n    * fhirServer/security/basic (enabled by default)\n    * fhirServer/security/cert (enabled by default)\n    * fhirServer/security/smart (disabled by default, with customizable endpoints and scopes)\n    * fhirServer/security/cors (default=true)\n\n3. use these values to populate `CapabilityStatement.rest.security`\n    * only serve up the Oauth extensions in the CapabilityStatement when fhirServer/security/service is set to `OAuth` or `SMART-on-FHIR`\n\n4. only serve up the `.well-known/smart-capabilities` endpoint when fhirServer/security/service is set to `SMART-on-FHIR`\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-09-28T15:51:03Z", "type": "commit"}, {"oid": "cabdc2ffc52df961ca93283570815f37222286f8", "url": "https://github.com/IBM/FHIR/commit/cabdc2ffc52df961ca93283570815f37222286f8", "message": "issue #1480 - introduce new fhir-server-config security group and use\n\n1. combine our existing \"oauth\" and \"authFilter\" fhir-server-config property groups into a single new group called \"security\".\n\n2. introduce new properties like:\n    * fhirServer/security/basic (enabled by default)\n    * fhirServer/security/cert (enabled by default)\n    * fhirServer/security/smart (disabled by default, with customizable endpoints and scopes)\n    * fhirServer/security/cors (default=true)\n\n3. use these values to populate `CapabilityStatement.rest.security`\n    * only serve up the Oauth extensions in the CapabilityStatement when fhirServer/security/service is set to `OAuth` or `SMART-on-FHIR`\n\n4. only serve up the `.well-known/smart-capabilities` endpoint when fhirServer/security/service is set to `SMART-on-FHIR`\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-09-28T15:51:03Z", "type": "forcePushed"}, {"oid": "1877485ecf0d6e843af4198ef45b3fc11b0482b5", "url": "https://github.com/IBM/FHIR/commit/1877485ecf0d6e843af4198ef45b3fc11b0482b5", "message": "work around flaky search test\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-09-28T16:33:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4ODcwMA==", "url": "https://github.com/IBM/FHIR/pull/1526#discussion_r496088700", "bodyText": "not related to the other changes, but thought I might as well include it anyway", "author": "lmsurpre", "createdAt": "2020-09-28T16:41:06Z", "path": "conformance/fhir-ig-davinci-pdex-plan-net/src/main/java/com/ibm/fhir/ig/davinci/pdex/plan/net/util/IndexGenerator.java", "diffHunk": "@@ -23,7 +23,6 @@\n public class IndexGenerator {\n     public static void main(String[] args) throws Exception {\n         buildAndWriteIndex(\"hl7/fhir/us/davinci-pdex-plan-net\");\n-        buildAndWriteIndex(\"hl7/fhir/uv/vhdir\");", "originalCommit": "1877485ecf0d6e843af4198ef45b3fc11b0482b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2ODg1OA==", "url": "https://github.com/IBM/FHIR/pull/1526#discussion_r496668858", "bodyText": "sounds good", "author": "prb112", "createdAt": "2020-09-29T12:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4ODcwMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "90e59c64d59798b6ace71d9816145431402b51b6", "url": "https://github.com/IBM/FHIR/commit/90e59c64d59798b6ace71d9816145431402b51b6", "message": "move smart config underneath the oauth config\n\nSMART is really a profile of oauth; this make that relationship more\nclear\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-09-28T19:02:11Z", "type": "commit"}, {"oid": "9adabdd2f0df8e373c28762dc509d126ba6363ef", "url": "https://github.com/IBM/FHIR/commit/9adabdd2f0df8e373c28762dc509d126ba6363ef", "message": "flip default value of basic and cert enabled properties to false\n\nfollow the precedent of the notification config:\n* if the \"enabled\" field is not included in the config file, then it is\nnot enabled\n* include the corresponding config groups in our default config; Basic\nand Certificates security groups are set to true to match the default\nserver behavior\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-09-28T21:05:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTQzOQ==", "url": "https://github.com/IBM/FHIR/pull/1526#discussion_r496675439", "bodyText": "confirmation, if OAuth doesn't exist, we don't add and advertise?", "author": "prb112", "createdAt": "2020-09-29T12:28:34Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/FHIRApplication.java", "diffHunk": "@@ -61,7 +63,9 @@ public FHIRApplication() {\n                 classes.add(Search.class);\n                 classes.add(Update.class);\n                 classes.add(VRead.class);\n-                classes.add(WellKnown.class);\n+                if (FHIRConfigHelper.getBooleanProperty(FHIRConfiguration.PROPERTY_SECURITY_OAUTH_SMART_ENABLED, false)) {\n+                    classes.add(WellKnown.class);", "originalCommit": "9adabdd2f0df8e373c28762dc509d126ba6363ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4NzMzMQ==", "url": "https://github.com/IBM/FHIR/pull/1526#discussion_r496687331", "bodyText": "the smart_enabled property lives UNDER oauth, so yes, if oauth field is missing, this smart field will be missing too (and thus false).  and yes, the idea is we shouldn't advertise SMART capabilities in this case.\nhowever, it is possible to have the fhir-server-config oauth field present and set to false, while the underlying smart_enabled field is set to true.\nIn this case, we will advertise the wellknown endpoint, but we won't advertise the oauth endpoints in the CapabilityStatement.  I considered changing this if to check that BOTH are enabled, but decided that this behavior would probably be acceptable (and maybe even useful in rare circumstances).", "author": "lmsurpre", "createdAt": "2020-09-29T12:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTQzOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3OTA0Nw==", "url": "https://github.com/IBM/FHIR/pull/1526#discussion_r496679047", "bodyText": "does this deserve a backlog issue?", "author": "prb112", "createdAt": "2020-09-29T12:34:23Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/WellKnown.java", "diffHunk": "@@ -99,41 +107,36 @@ private JsonObject buildSmartConfig() throws Exception {\n         JsonObjectBuilder responseBuilder = Json.createObjectBuilder();\n \n         if (regURL != null && !regURL.isEmpty()) {\n-            responseBuilder.add(\"registration_endpoint\", regURL);\n+            responseBuilder.add(\"registration_endpoint\", regURL); // recommended\n         }\n \n-        return responseBuilder\n-                .add(\"authorization_endpoint\", authURL) // required\n-                .add(\"token_endpoint\", tokenURL) // required\n-                .add(\"scopes_supported\", Json.createArrayBuilder() // recommended\n-                    .add(\"openid\")\n-                    .add(\"profile\")\n-                    .add(\"offline_access\")\n-                    // TODO\n-//                    .add(\"launch\")\n-//                    .add(\"launch/patient\")\n-//                    .add(\"user/*.*\")\n-//                    .add(\"patient/*.*\")\n-                    .build())\n-                .add(\"response_types\", Json.createArrayBuilder() // recommended\n-                    .add(\"code\")\n-                    .add(\"token\")\n-                    .add(\"id_token token\")\n-                    .build())\n-                .add(\"capabilities\", Json.createArrayBuilder() // required\n-                    .add(\"launch-standalone\")\n-                    .add(\"client-public\")\n-                    .add(\"client-confidential-symmetric\")\n-                    .add(\"permission-offline\")\n-                    // TODO\n-//                    .add(\"context-standalone-patient\")\n-//                    .add(\"context-standalone-encounter\")\n-//                    .add(\"permission-user\")\n-//                    .add(\"permission-patient\")\n-                    .build())\n+        responseBuilder.add(\"authorization_endpoint\", authURL); // required\n+        responseBuilder.add(\"token_endpoint\", tokenURL); // required\n+\n+        if (supportedScopes != null && !supportedScopes.isEmpty()) {\n+            responseBuilder.add(\"scopes_supported\", Json.createArrayBuilder(supportedScopes).build()); // recommended\n+        }\n+\n+        responseBuilder.add(\"response_types\", Json.createArrayBuilder() // recommended\n+                .add(\"code\")\n+                .add(\"token\")\n+                .add(\"id_token token\")\n+                .build());\n+        responseBuilder.add(\"capabilities\", Json.createArrayBuilder() // required\n+                .add(\"launch-standalone\")\n+                .add(\"client-public\")\n+                .add(\"client-confidential-symmetric\")\n+                .add(\"permission-offline\")\n+                // TODO: make this configurable\n+                .add(\"context-standalone-patient\")\n+                .add(\"permission-patient\")\n+//                .add(\"context-standalone-encounter\")\n+//                .add(\"permission-user\")", "originalCommit": "9adabdd2f0df8e373c28762dc509d126ba6363ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5MTUyNQ==", "url": "https://github.com/IBM/FHIR/pull/1526#discussion_r496691525", "bodyText": "I could maybe just \"fix\" it by adding another property to the config.  let me just do that now.", "author": "lmsurpre", "createdAt": "2020-09-29T12:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3OTA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5MzA1NA==", "url": "https://github.com/IBM/FHIR/pull/1526#discussion_r496693054", "bodyText": "no worries, just trying to take a critical eye to any change", "author": "prb112", "createdAt": "2020-09-29T12:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3OTA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0NDQ0Ng==", "url": "https://github.com/IBM/FHIR/pull/1526#discussion_r496844446", "bodyText": "done", "author": "lmsurpre", "createdAt": "2020-09-29T15:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3OTA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8464da0256da607deaa7a04d921432949f2f69e8", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/resources/WellKnown.java b/fhir-server/src/main/java/com/ibm/fhir/server/resources/WellKnown.java\nindex 9877d7646b..994f158157 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/resources/WellKnown.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/resources/WellKnown.java\n\n@@ -85,33 +90,60 @@ public class WellKnown extends FHIRResource {\n     private JsonObject buildSmartConfig() throws Exception {\n         String actualHost = new URI(getRequestUri()).getHost();\n \n-        String regURLTemplate = null;\n         String authURLTemplate = null;\n         String tokenURLTemplate = null;\n+        String regURLTemplate = null;\n+        String manageURLTemplate = null;\n+        String introspectURLTemplate = null;\n+        String revokeURLTemplate = null;\n         List<String> supportedScopes = null;\n+        List<String> capabilities = null;\n+\n         try {\n-            regURLTemplate = fhirConfig.getStringProperty(PROPERTY_SECURITY_OAUTH_REGURL, \"\");\n-            authURLTemplate = fhirConfig.getStringProperty(PROPERTY_SECURITY_OAUTH_AUTHURL, \"\");\n-            tokenURLTemplate = fhirConfig.getStringProperty(PROPERTY_SECURITY_OAUTH_TOKENURL, \"\");\n+            authURLTemplate = fhirConfig.getStringProperty(PROPERTY_SECURITY_OAUTH_AUTH_URL, \"\");\n+            tokenURLTemplate = fhirConfig.getStringProperty(PROPERTY_SECURITY_OAUTH_TOKEN_URL, \"\");\n+            regURLTemplate = fhirConfig.getStringProperty(PROPERTY_SECURITY_OAUTH_REG_URL, \"\");\n+            manageURLTemplate = fhirConfig.getStringProperty(PROPERTY_SECURITY_OAUTH_MANAGE_URL, \"\");\n+            introspectURLTemplate = fhirConfig.getStringProperty(PROPERTY_SECURITY_OAUTH_INTROSPECT_URL, \"\");\n+            revokeURLTemplate = fhirConfig.getStringProperty(PROPERTY_SECURITY_OAUTH_REVOKE_URL, \"\");\n             Object[] smartScopeObjs = fhirConfig.getArrayProperty(PROPERTY_SECURITY_OAUTH_SMART_SCOPES);\n+            Object[] capabilityObjs = fhirConfig.getArrayProperty(PROPERTY_SECURITY_OAUTH_SMART_CAPABILITIES);\n             if (smartScopeObjs != null) {\n                 supportedScopes = Arrays.asList(Arrays.copyOf(smartScopeObjs, smartScopeObjs.length, String[].class));\n             }\n+            if (capabilityObjs != null) {\n+                capabilities = Arrays.asList(Arrays.copyOf(capabilityObjs, capabilityObjs.length, String[].class));\n+            } else {\n+                // Set an empty list since capabilities is a required field\n+                capabilities = new ArrayList<String>();\n+            }\n         } catch (Exception e) {\n-            log.log(Level.SEVERE, \"An error occurred while adding OAuth URLs to the response\", e);\n+            log.log(Level.SEVERE, \"An error occurred while reading the OAuth/SMART properties\", e);\n         }\n-        String regURL = regURLTemplate.replaceAll(\"<host>\", actualHost);\n         String authURL = authURLTemplate.replaceAll(\"<host>\", actualHost);\n         String tokenURL = tokenURLTemplate.replaceAll(\"<host>\", actualHost);\n+        String regURL = regURLTemplate.replaceAll(\"<host>\", actualHost);\n+        String manageURL = manageURLTemplate.replaceAll(\"<host>\", actualHost);\n+        String introspectURL = introspectURLTemplate.replaceAll(\"<host>\", actualHost);\n+        String revokeURL = revokeURLTemplate.replaceAll(\"<host>\", actualHost);\n \n         JsonObjectBuilder responseBuilder = Json.createObjectBuilder();\n \n+        responseBuilder.add(\"authorization_endpoint\", authURL); // required\n+        responseBuilder.add(\"token_endpoint\", tokenURL); // required\n+\n         if (regURL != null && !regURL.isEmpty()) {\n             responseBuilder.add(\"registration_endpoint\", regURL); // recommended\n         }\n-\n-        responseBuilder.add(\"authorization_endpoint\", authURL); // required\n-        responseBuilder.add(\"token_endpoint\", tokenURL); // required\n+        if (manageURL != null && !manageURL.isEmpty()) {\n+            responseBuilder.add(\"management_endpoint\", manageURL); // recommended\n+        }\n+        if (introspectURL != null && !introspectURL.isEmpty()) {\n+            responseBuilder.add(\"introspection_endpoint\", introspectURL); // recommended\n+        }\n+        if (revokeURL != null && !revokeURL.isEmpty()) {\n+            responseBuilder.add(\"revocation_endpoint\", revokeURL); // recommended\n+        }\n \n         if (supportedScopes != null && !supportedScopes.isEmpty()) {\n             responseBuilder.add(\"scopes_supported\", Json.createArrayBuilder(supportedScopes).build()); // recommended\n"}}, {"oid": "8464da0256da607deaa7a04d921432949f2f69e8", "url": "https://github.com/IBM/FHIR/commit/8464da0256da607deaa7a04d921432949f2f69e8", "message": "introduce properties for adding the additional \"recommended\" fields\n\nalso reordered things to match order used in\nhttp://hl7.org/fhir/smart-app-launch/StructureDefinition-oauth-uris.html\nand http://hl7.org/fhir/smart-app-launch/conformance/index.html#declaring-support-for-oauth2-endpoints\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-09-29T15:53:53Z", "type": "commit"}, {"oid": "8464da0256da607deaa7a04d921432949f2f69e8", "url": "https://github.com/IBM/FHIR/commit/8464da0256da607deaa7a04d921432949f2f69e8", "message": "introduce properties for adding the additional \"recommended\" fields\n\nalso reordered things to match order used in\nhttp://hl7.org/fhir/smart-app-launch/StructureDefinition-oauth-uris.html\nand http://hl7.org/fhir/smart-app-launch/conformance/index.html#declaring-support-for-oauth2-endpoints\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-09-29T15:53:53Z", "type": "forcePushed"}]}