{"pr_number": 1813, "pr_title": "Audit Refactoring #1542", "pr_createdAt": "2020-12-10T16:11:59Z", "pr_url": "https://github.com/IBM/FHIR/pull/1813", "timeline": [{"oid": "3a30ad24712ba919f9841ba2737a2c60417391ca", "url": "https://github.com/IBM/FHIR/commit/3a30ad24712ba919f9841ba2737a2c60417391ca", "message": "Audit Refactoring #1542\n\n- Refactor to separate Configuration, Mapping and AuditService\n- Configuration to use EventStreams Binding by default\n- Add a MapperFactory to split between cadf and auditevent types\n\t- AuditEventMapper - Wraps the AuditLogEntry into AuditEvent format\n\t- CADFMapper - Wraps the AuditLogEntry into CADF format\n- Audit Service is now KafkaService, NoOpService separating the\nStreaming framework from the mapping actions.\n- Removed duplicate code for Event/EventStrams processing\n- Add Test Coverage for Uncovered Classes\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-12-10T16:09:39Z", "type": "commit"}, {"oid": "92bd3722981cce84797aa46cf48ab76509a1c3b2", "url": "https://github.com/IBM/FHIR/commit/92bd3722981cce84797aa46cf48ab76509a1c3b2", "message": "Clean up spare printStackTrace\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-12-10T17:06:16Z", "type": "commit"}, {"oid": "df1e537bc92e92a4bd87c23a228af72e880b873d", "url": "https://github.com/IBM/FHIR/commit/df1e537bc92e92a4bd87c23a228af72e880b873d", "message": "update the documentation for fhir-audit\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-12-11T01:05:36Z", "type": "commit"}, {"oid": "d3ef96086897302835a8e85f979226b2fd2d947b", "url": "https://github.com/IBM/FHIR/commit/d3ef96086897302835a8e85f979226b2fd2d947b", "message": "updates per team code review\n\n- Change NoOp to Nop Service\n- Remove references to WHC/Disabled\n- Changed and clarified package names\n- Changed references to specific default places to generic/unknown\nplaces (e.g. dallas to unknown)\n- added examples for audit from config and audit from environment\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-12-11T16:54:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTAyNA==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541139024", "bodyText": "super-duper minor, but I usually put a space after the , as i edit it (a change from what we did when we auto-added these when first going open)", "author": "lmsurpre", "createdAt": "2020-12-11T18:19:59Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/AuditLogServiceFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016,2020", "originalCommit": "d3ef96086897302835a8e85f979226b2fd2d947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5NTIyMg==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541195222", "bodyText": "\u2705", "author": "prb112", "createdAt": "2020-12-11T19:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "07ce041156654f184f48644026e17bf92e3a3b8e", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/AuditLogServiceFactory.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/AuditLogServiceFactory.java\nsimilarity index 96%\nrename from fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/AuditLogServiceFactory.java\nrename to fhir-audit/src/main/java/com/ibm/fhir/audit/AuditLogServiceFactory.java\nindex be76155689..39eeb7e019 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/AuditLogServiceFactory.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/AuditLogServiceFactory.java\n\n@@ -1,16 +1,16 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2020\n+ * (C) Copyright IBM Corp. 2016, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.audit.logging.api;\n+package com.ibm.fhir.audit;\n \n import java.util.logging.Logger;\n \n import org.owasp.encoder.Encode;\n \n-import com.ibm.fhir.audit.logging.api.configuration.ConfigurationTranslator;\n+import com.ibm.fhir.audit.configuration.ConfigurationTranslator;\n import com.ibm.fhir.config.FHIRConfigHelper;\n import com.ibm.fhir.config.FHIRConfiguration;\n import com.ibm.fhir.config.PropertyGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTU0Ng==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541139546", "bodyText": "make a list if you want formatting preserved", "author": "lmsurpre", "createdAt": "2020-12-11T18:20:53Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/configuration/ConfigurationTranslator.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.api.configuration;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_MAPPER;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.FIELD_LOAD;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.KAFKA_USERNAME;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_APIKEY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_MAPPER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.logging.api.configuration.type.IBMEventStreamsType;\n+import com.ibm.fhir.audit.logging.api.configuration.type.KafkaType;\n+import com.ibm.fhir.audit.logging.mapper.MapperType;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.exception.FHIRException;\n+\n+/**\n+ * Handles translation of configurations to useful configurations.\n+ */\n+public class ConfigurationTranslator {\n+    private static final String CLASSNAME = ConfigurationTranslator.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+\n+    private static final Map<String, String> PRIOR_VERSION_CLASSNAME = generateMap();\n+\n+    public ConfigurationTranslator() {\n+        // No Operation\n+    }\n+\n+    /*\n+     * generates the map from prior versions to the current naming scheme\n+     * and maintains backwards compatibility.\n+     */\n+    private static Map<String, String> generateMap() {\n+        Map<String, String> mapped = new HashMap<>(2);\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.DisabledAuditLogService\", \"com.ibm.fhir.audit.logging.api.impl.NopService\");\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.WhcAuditCadfLogService\", \"com.ibm.fhir.audit.logging.api.impl.KafkaService\");\n+        return mapped;\n+    }\n+\n+    /*\n+     * used to remap from prior versions\n+     */\n+    public String remap(String inputName) {\n+        if (Objects.isNull(inputName)) {\n+            logger.warning(\"remapping a bad Audit Log Service, please check configuration\");\n+        }\n+        if (PRIOR_VERSION_CLASSNAME.containsKey(inputName)) {\n+            return PRIOR_VERSION_CLASSNAME.get(inputName);\n+        }\n+        return inputName;\n+    }\n+\n+    /**\n+     * decides to load the Properties from the environment or the configuration.\n+     *\n+     * @param auditLogProperties\n+     * @return\n+     * @throws Exception\n+     */\n+    public Properties translate(PropertyGroup auditLogProperties) throws Exception {\n+        ConfigurationType type = determineConfigurationType(auditLogProperties);\n+        Properties props = new Properties();\n+        switch (type) {\n+        case CONFIG:\n+            config(props, auditLogProperties);\n+            break;\n+        case ENVIRONMENT:\n+            environment(props, auditLogProperties);\n+            break;\n+        default:\n+            logger.warning(\"unable to determine where to load from\");\n+            break;\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * loads the details from the config values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void config(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        props.putAll(KafkaType.getEnvironment(auditLogProperties));\n+    }\n+\n+    /**\n+     * loads the details from the environmental values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void environment(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        final String METHODNAME = \"environment\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        String bootstrapServers = null;\n+        String apiKey = null;\n+        // Check environment: EVENT_STREAMS_AUDIT_BINDING to obtain configuration parameters for\n+        // kafka (Kubernetes Container)\n+        if (System.getenv(IBMEventStreamsType.KUB_BINDING) != null) {\n+            logger.info(\"Using the environmental variable '\" + IBMEventStreamsType.KUB_BINDING + \"' to set the credentials.\");\n+            com.ibm.fhir.audit.logging.api.configuration.type.IBMEventStreamsType.EventStreamsCredentials credentials = IBMEventStreamsType.getEventStreamsCredentials();\n+            if (credentials != null) {\n+                bootstrapServers = IBMEventStreamsType.stringArrayToCSV(credentials.getKafkaBrokersSasl());\n+                apiKey = credentials.getApiKey();\n+            }\n+        }\n+\n+        // If fails to get config from environment, then try to get them from FHIR config\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            Objects.requireNonNull(auditLogProperties, \"Audit log properties cannot be null.\");\n+            logger.info(\"Using FHIR config to find credentials.\");\n+            bootstrapServers = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS);\n+            apiKey = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_APIKEY);\n+        }\n+\n+        // If still fails to get config for kafka producer, then throw <pre>exception</pre>\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            throw new FHIRException(\"Can not get kafka settings!\");\n+        }\n+\n+        // We load the configuration.\n+        checkAndLoadDefaults(props, auditLogProperties);\n+\n+        // We override if we need to\n+        Object o =\n+                props.put(\"sasl.jaas.config\", String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", KAFKA_USERNAME, apiKey));\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - sasl.jaas.config\");\n+        }\n+        o = props.put(\"bootstrap.servers\", bootstrapServers);\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - bootstrap.servers\");\n+        }\n+    }\n+\n+    /*\n+     * check and load the default serialiers (for example)\n+     */\n+    private void checkAndLoadDefaults(Properties props, PropertyGroup auditLogProperties) {\n+        if(!props.containsKey(\"key.serializer\")) {\n+            props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"value.serializer\")) {\n+            props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"sasl.mechanism\")) {\n+            props.put(\"sasl.mechanism\", \"PLAIN\");\n+        }\n+        if(!props.containsKey(\"security.protocol\")) {\n+            props.put(\"security.protocol\", \"SASL_SSL\");\n+        }\n+        if(!props.containsKey(\"ssl.protocol\")) {\n+            props.put(\"ssl.protocol\", \"TLSv1.2\");\n+        }\n+        if(!props.containsKey(\"ssl.enabled.protocols\")) {\n+            props.put(\"ssl.enabled.protocols\", \"TLSv1.2\");\n+        }\n+        if(!props.containsKey(\"ssl.endpoint.identification.algorithm\")) {\n+            props.put(\"ssl.endpoint.identification.algorithm\", \"HTTPS\");\n+        }\n+    }\n+\n+    /**\n+     * gets the location to load the properties from:\n+     * 1 - Environment Bindings with EventStreams Credentials format - \"env\"", "originalCommit": "d3ef96086897302835a8e85f979226b2fd2d947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5ODgzNQ==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541198835", "bodyText": "fixed", "author": "prb112", "createdAt": "2020-12-11T19:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "07ce041156654f184f48644026e17bf92e3a3b8e", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/configuration/ConfigurationTranslator.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/configuration/ConfigurationTranslator.java\nsimilarity index 85%\nrename from fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/configuration/ConfigurationTranslator.java\nrename to fhir-audit/src/main/java/com/ibm/fhir/audit/configuration/ConfigurationTranslator.java\nindex 66a29e0d48..45206c915b 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/configuration/ConfigurationTranslator.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/configuration/ConfigurationTranslator.java\n\n@@ -3,16 +3,16 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package com.ibm.fhir.audit.logging.api.configuration;\n+package com.ibm.fhir.audit.configuration;\n \n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_KAFKA_TOPIC;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_MAPPER;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.FIELD_LOAD;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.KAFKA_USERNAME;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_APIKEY;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_TOPIC;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_MAPPER;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_MAPPER;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.FIELD_LOAD;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.KAFKA_USERNAME;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_APIKEY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_MAPPER;\n \n import java.util.HashMap;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MDkxOQ==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541140919", "bodyText": "personally not a huge fan of all the formatter comments, but i understand why you add them.  nothing to change here, but maybe eventually we can settle on a common style (include them or not) :-)", "author": "lmsurpre", "createdAt": "2020-12-11T18:23:18Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/AuditEventMapper.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.model.type.Code.code;\n+import static com.ibm.fhir.model.type.String.string;\n+import static com.ibm.fhir.model.type.Uri.uri;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.logging.api.AuditLogEventType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.resource.AuditEvent;\n+import com.ibm.fhir.model.resource.AuditEvent.Agent;\n+import com.ibm.fhir.model.resource.AuditEvent.Agent.Network;\n+import com.ibm.fhir.model.resource.AuditEvent.Entity;\n+import com.ibm.fhir.model.resource.AuditEvent.Entity.Detail;\n+import com.ibm.fhir.model.resource.AuditEvent.Source;\n+import com.ibm.fhir.model.type.Base64Binary;\n+import com.ibm.fhir.model.type.CodeableConcept;\n+import com.ibm.fhir.model.type.Coding;\n+import com.ibm.fhir.model.type.Instant;\n+import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.code.AuditEventAction;\n+import com.ibm.fhir.model.type.code.AuditEventAgentNetworkType;\n+\n+/**\n+ * This class adds support for AuditEvent\n+ * https://www.hl7.org/fhir/r4/auditevent.html\n+ */\n+public class AuditEventMapper implements Mapper {\n+\n+    private static final Logger logger = java.util.logging.Logger.getLogger(AuditEventMapper.class.getName());\n+    private static final String CLASSNAME = AuditEventMapper.class.getName();\n+\n+    //@formatter:off", "originalCommit": "d3ef96086897302835a8e85f979226b2fd2d947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5OTg0OQ==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541199849", "bodyText": "Sure - I hate hitting ctrl + f or having something accidentally formatted.", "author": "prb112", "createdAt": "2020-12-11T19:32:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MDkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "07ce041156654f184f48644026e17bf92e3a3b8e", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/AuditEventMapper.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/mapper/impl/AuditEventMapper.java\nsimilarity index 98%\nrename from fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/AuditEventMapper.java\nrename to fhir-audit/src/main/java/com/ibm/fhir/audit/mapper/impl/AuditEventMapper.java\nindex 13849702cf..344f940319 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/AuditEventMapper.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/mapper/impl/AuditEventMapper.java\n\n@@ -3,7 +3,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package com.ibm.fhir.audit.logging.mapper.impl;\n+package com.ibm.fhir.audit.mapper.impl;\n \n import static com.ibm.fhir.model.type.Code.code;\n import static com.ibm.fhir.model.type.String.string;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MTcxOA==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541141718", "bodyText": "do we ever get an \"E\" as input to this?", "author": "lmsurpre", "createdAt": "2020-12-11T18:24:42Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.cadf.model.CadfAttachment;\n+import com.ibm.fhir.audit.cadf.model.CadfCredential;\n+import com.ibm.fhir.audit.cadf.model.CadfEndpoint;\n+import com.ibm.fhir.audit.cadf.model.CadfEvent;\n+import com.ibm.fhir.audit.cadf.model.CadfGeolocation;\n+import com.ibm.fhir.audit.cadf.model.CadfResource;\n+import com.ibm.fhir.audit.cadf.model.enums.Action;\n+import com.ibm.fhir.audit.cadf.model.enums.EventType;\n+import com.ibm.fhir.audit.cadf.model.enums.Outcome;\n+import com.ibm.fhir.audit.cadf.model.enums.ResourceType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+\n+/**\n+ * This class is a Cadf/EventStream/COS based implementation of the FHIR server\n+ * AuditLogService interface\n+ */\n+public class CADFMapper implements Mapper {\n+    private static final String CLASSNAME = CADFMapper.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+    // FHIR Operation To CADF\n+    private static final Map<String, Action> FHIR_TO_CADF = new HashMap<String, Action>() {\n+        private static final long serialVersionUID = 1L;\n+        {\n+            put(\"C\", Action.create);\n+            put(\"R\", Action.read);\n+            put(\"U\", Action.update);\n+            put(\"D\", Action.delete);", "originalCommit": "d3ef96086897302835a8e85f979226b2fd2d947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjM3MQ==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541142371", "bodyText": "moved the comment to where this is called", "author": "lmsurpre", "createdAt": "2020-12-11T18:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MTcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwMzgwMw==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541203803", "bodyText": "No - not in this case, there is no good mapping to C-R-U-D-E like in AuditEvent.", "author": "prb112", "createdAt": "2020-12-11T19:36:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MTcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "07ce041156654f184f48644026e17bf92e3a3b8e", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/mapper/impl/CADFMapper.java\nsimilarity index 82%\nrename from fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java\nrename to fhir-audit/src/main/java/com/ibm/fhir/audit/mapper/impl/CADFMapper.java\nindex 7c07b78bde..eb9e72a5eb 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/mapper/impl/CADFMapper.java\n\n@@ -3,14 +3,14 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package com.ibm.fhir.audit.logging.mapper.impl;\n+package com.ibm.fhir.audit.mapper.impl;\n \n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n \n import java.io.IOException;\n import java.util.HashMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjI2MA==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541142260", "bodyText": "do we ever get an \"E\" as input to this?  if so, i guess we'll end up setting \"Action.unknown\" ?", "author": "lmsurpre", "createdAt": "2020-12-11T18:25:34Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.logging.mapper.impl;\n+\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.cadf.model.CadfAttachment;\n+import com.ibm.fhir.audit.cadf.model.CadfCredential;\n+import com.ibm.fhir.audit.cadf.model.CadfEndpoint;\n+import com.ibm.fhir.audit.cadf.model.CadfEvent;\n+import com.ibm.fhir.audit.cadf.model.CadfGeolocation;\n+import com.ibm.fhir.audit.cadf.model.CadfResource;\n+import com.ibm.fhir.audit.cadf.model.enums.Action;\n+import com.ibm.fhir.audit.cadf.model.enums.EventType;\n+import com.ibm.fhir.audit.cadf.model.enums.Outcome;\n+import com.ibm.fhir.audit.cadf.model.enums.ResourceType;\n+import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.logging.beans.FHIRContext;\n+import com.ibm.fhir.audit.logging.mapper.Mapper;\n+import com.ibm.fhir.config.PropertyGroup;\n+\n+/**\n+ * This class is a Cadf/EventStream/COS based implementation of the FHIR server\n+ * AuditLogService interface\n+ */\n+public class CADFMapper implements Mapper {\n+    private static final String CLASSNAME = CADFMapper.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+    // FHIR Operation To CADF\n+    private static final Map<String, Action> FHIR_TO_CADF = new HashMap<String, Action>() {\n+        private static final long serialVersionUID = 1L;\n+        {\n+            put(\"C\", Action.create);\n+            put(\"R\", Action.read);\n+            put(\"U\", Action.update);\n+            put(\"D\", Action.delete);\n+        }\n+    };\n+\n+    private CadfEvent eventObject = null;\n+\n+    private String hostname = null;\n+    private String geoCity = null;\n+    private String geoState = null;\n+    private String geoCountry = null;\n+\n+    @Override\n+    public Mapper init(PropertyGroup auditLogProperties) throws Exception {\n+        // this may be unreliable on Windows and other systems.\n+        hostname = System.getenv(\"HOSTNAME\");\n+        geoCity = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_CITY, DEFAULT_AUDIT_GEO_CITY);\n+        geoState = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_STATE, DEFAULT_AUDIT_GEO_STATE);\n+        geoCountry = auditLogProperties.getStringProperty(PROPERTY_AUDIT_GEO_COUNTRY, DEFAULT_AUDIT_GEO_COUNTRY);\n+        return this;\n+    }\n+\n+    @Override\n+    public Mapper map(AuditLogEntry entry) throws Exception {\n+        eventObject = createCadfEvent(entry);\n+        return this;\n+    }\n+\n+    @Override\n+    public String serialize() throws Exception {\n+        return CadfEvent.Writer.generate(eventObject);\n+    }\n+\n+    public CadfEvent createCadfEvent(AuditLogEntry logEntry) throws IllegalStateException, IOException {\n+        final String METHODNAME = \"createCadfEvent\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        CadfResource observerRsrc = new CadfResource.Builder(\"fhir-server\", ResourceType.compute_node)\n+                .geolocation(new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                .name(\"IBM FHIR Server - Audit\")\n+                .host(hostname)\n+                .build();\n+\n+        CadfEvent event = null;\n+        Outcome cadfEventOutCome;\n+\n+        // For CADF we don't log specific event types.\n+        if ( logEntry.getContext() != null\n+                && logEntry.getContext().getAction() != null\n+                && logEntry.getContext().getApiParameters() != null) {\n+            // Define resources\n+            CadfResource initiator =\n+                    new CadfResource.Builder(logEntry.getTenantId() + \"@\" + logEntry.getComponentId(),\n+                            ResourceType.compute_machine)\n+                                    .geolocation(\n+                                            new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                                    .credential(\n+                                            new CadfCredential.Builder(\"user-\" + logEntry.getUserName()).build())\n+                                    .host(logEntry.getComponentIp()).build();\n+            CadfResource target =\n+                    new CadfResource.Builder(\n+                            logEntry.getContext().getData() == null || logEntry.getContext().getData().getId() == null\n+                                    ? UUID.randomUUID().toString()\n+                                    : logEntry.getContext().getData().getId(),\n+                            ResourceType.data_database)\n+                                    .geolocation(\n+                                            new CadfGeolocation.Builder(geoCity, geoState, geoCountry, null).build())\n+                                    .address(\n+                                            new CadfEndpoint(logEntry.getContext().getApiParameters().getRequest(), \"\",\n+                                                    \"\"))\n+                                    .build();\n+\n+            FHIRContext fhirContext = new FHIRContext(logEntry.getContext());\n+            fhirContext.setClient_cert_cn(logEntry.getClientCertCn());\n+            fhirContext.setClient_cert_issuer_ou(logEntry.getClientCertIssuerOu());\n+            fhirContext.setEventType(logEntry.getEventType());\n+            fhirContext.setLocation(logEntry.getLocation());\n+            fhirContext.setDescription(logEntry.getDescription());\n+\n+            if (logEntry.getContext().getEndTime() == null ||\n+                    logEntry.getContext().getStartTime().equalsIgnoreCase(logEntry.getContext().getEndTime())) {\n+                cadfEventOutCome = Outcome.pending;\n+            } else if (logEntry.getContext().getApiParameters().getStatus() < 400) {\n+                cadfEventOutCome = Outcome.success;\n+            } else {\n+                cadfEventOutCome = Outcome.failure;\n+            }\n+\n+            event = new CadfEvent.Builder(\n+                            logEntry.getContext().getRequestUniqueId() == null ? UUID.randomUUID().toString()\n+                                    : logEntry.getContext().getRequestUniqueId(),\n+                                    EventType.activity, logEntry.getTimestamp(),\n+                                    FHIR_TO_CADF.getOrDefault(logEntry.getContext().getAction(), Action.unknown),", "originalCommit": "d3ef96086897302835a8e85f979226b2fd2d947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwMjAzMQ==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541202031", "bodyText": "FHIR_TO_CADF.getOrDefault(logEntry.getContext().getAction(), Action.unknown),\nThis ends up as an unknown.\nIn the  output it looks like this...", "author": "prb112", "createdAt": "2020-12-11T19:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwMjQ3OA==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541202478", "bodyText": "CreateTime:1607706347894\n{\n    \"action\": \"unknown\",\n    \"eventTime\": \"2020-12-11 17:05:47.882\",\n    \"eventType\": \"activity\",\n    \"id\": \"336794e9-b5f9-4ac5-a00b-72aa7d9c5e0b\",\n    \"outcome\": \"success\",\n    \"typeURI\": \"http://schemas.dmtf.org/cloud/audit/1.0/event\",\n    \"tags\": [\n    ],\n    \"attachments\": [\n        {\n            \"contentType\": \"application/json\",\n            \"content\": \"rO0ABXQCFgp7CiAgICAicmVxdWVzdF91bmlxdWVfaWQiOiAiMzM2Nzk0ZTktYjVmOS00YWM1LWEwMGItNzJhYTdkOWM1ZTBiIiwKICAgICJhY3Rpb24iOiAiRSIsCiAgICAic3RhcnRfdGltZSI6ICIyMDIwLTEyLTExIDE3OjA1OjQ3LjUyNCIsCiAgICAiZW5kX3RpbWUiOiAiMjAyMC0xMi0xMSAxNzowNTo0Ny44ODIiLAogICAgImFwaV9wYXJhbWV0ZXJzIjogewogICAgICAgICJyZXF1ZXN0IjogImh0dHBzOi8vbG9jYWxob3N0Ojk0NDMvZmhpci1zZXJ2ZXIvYXBpL3Y0IiwKICAgICAgICAicmVxdWVzdF9zdGF0dXMiOiAyMDAKICAgIH0sCiAgICAiYmF0Y2giOiB7CiAgICAgICAgInJlc291cmNlc19yZWFkIjogMCwKICAgICAgICAicmVzb3VyY2VzX2NyZWF0ZWQiOiAwLAogICAgICAgICJyZXNvdXJjZXNfdXBkYXRlZCI6IDIKICAgIH0sCiAgICAiZXZlbnRfdHlwZSI6ICJmaGlyLWJ1bmRsZSIsCiAgICAiZGVzY3JpcHRpb24iOiAiRkhJUiBCdW5kbGUgcmVxdWVzdCIsCiAgICAibG9jYXRpb24iOiAiMDowOjA6MDowOjA6MDoxL2xvY2FsaG9zdCIKfQ==\"\n        }\n    ],", "author": "prb112", "createdAt": "2020-12-11T19:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "07ce041156654f184f48644026e17bf92e3a3b8e", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/mapper/impl/CADFMapper.java\nsimilarity index 82%\nrename from fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java\nrename to fhir-audit/src/main/java/com/ibm/fhir/audit/mapper/impl/CADFMapper.java\nindex 7c07b78bde..eb9e72a5eb 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/mapper/impl/CADFMapper.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/mapper/impl/CADFMapper.java\n\n@@ -3,14 +3,14 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package com.ibm.fhir.audit.logging.mapper.impl;\n+package com.ibm.fhir.audit.mapper.impl;\n \n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n-import static com.ibm.fhir.audit.logging.api.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_AUDIT_GEO_STATE;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_CITY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_COUNTRY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_GEO_STATE;\n \n import java.io.IOException;\n import java.util.HashMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541145580", "bodyText": "Why the .api in the package name?  Can we just use com.ibm.fhir.audit.logging.impl for the impl classes?", "author": "lmsurpre", "createdAt": "2020-12-11T18:31:08Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java", "diffHunk": "@@ -1,38 +1,42 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016,2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.audit.logging.impl;\n+package com.ibm.fhir.audit.logging.api.impl;", "originalCommit": "d3ef96086897302835a8e85f979226b2fd2d947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MDMyNw==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541150327", "bodyText": "legacy -- I can change it... matched the existing package structure", "author": "prb112", "createdAt": "2020-12-11T18:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NDc1MA==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541154750", "bodyText": "I pinged paul on the side and suggested that maybe we could even do away with the logging in the package name for all classes in this module.  My understanding is there is no other audit package other than logging and so this level seems totally pointless.", "author": "lmsurpre", "createdAt": "2020-12-11T18:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5MzU5MA==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541193590", "bodyText": "Changed per discussion", "author": "prb112", "createdAt": "2020-12-11T19:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwNDA2Nw==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541204067", "bodyText": "Discussed in chat", "author": "prb112", "createdAt": "2020-12-11T19:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "07ce041156654f184f48644026e17bf92e3a3b8e", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/impl/NopService.java\nsimilarity index 79%\nrename from fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java\nrename to fhir-audit/src/main/java/com/ibm/fhir/audit/impl/NopService.java\nindex bb2b52bf80..4a619d0fe6 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/logging/api/impl/NopService.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/impl/NopService.java\n\n@@ -1,13 +1,13 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2020\n+ * (C) Copyright IBM Corp. 2016, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.audit.logging.api.impl;\n+package com.ibm.fhir.audit.impl;\n \n-import com.ibm.fhir.audit.logging.api.AuditLogService;\n-import com.ibm.fhir.audit.logging.beans.AuditLogEntry;\n+import com.ibm.fhir.audit.AuditLogService;\n+import com.ibm.fhir.audit.beans.AuditLogEntry;\n import com.ibm.fhir.config.PropertyGroup;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NTI1OQ==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541155259", "bodyText": "the one update I think you missed :-)", "author": "lmsurpre", "createdAt": "2020-12-11T18:48:49Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/util/RestAuditLogger.java", "diffHunk": "@@ -498,6 +491,8 @@ private static AuditLogEntry populateAuditLogEntry(AuditLogEntry entry, HttpServ\n                             .append(\"/\")\n                             .append(request.getRemoteHost()).toString());\n         entry.setContext(new Context());\n+\n+        // TODO: Unify with the FHIRRequestContext", "originalCommit": "d3ef96086897302835a8e85f979226b2fd2d947b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIxOTc3Nw==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r541219777", "bodyText": "Thanks, it's a online change, so easy to get in.", "author": "prb112", "createdAt": "2020-12-11T19:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NTI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "07ce041156654f184f48644026e17bf92e3a3b8e", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/util/RestAuditLogger.java b/fhir-server/src/main/java/com/ibm/fhir/server/util/RestAuditLogger.java\nindex 7826bf5c36..2f8e7b638f 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/util/RestAuditLogger.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/util/RestAuditLogger.java\n\n@@ -492,12 +492,9 @@ public class RestAuditLogger {\n                             .append(request.getRemoteHost()).toString());\n         entry.setContext(new Context());\n \n-        // TODO: Unify with the FHIRRequestContext\n-        requestUrl = request.getRequestURL();\n-        if (request.getQueryString() != null) {\n-            requestUrl.append(\"?\");\n-            requestUrl.append(request.getQueryString());\n-        }\n+        // Uses the FHIRRestServletFilter to pass the OriginalRequestUri to the backend.\n+        requestUrl = new StringBuilder(FHIRRequestContext.get().getOriginalRequestUri());\n+\n         entry.getContext().setApiParameters(\n                  ApiParameters.builder()\n                 .request(requestUrl.toString())\n"}}, {"oid": "07ce041156654f184f48644026e17bf92e3a3b8e", "url": "https://github.com/IBM/FHIR/commit/07ce041156654f184f48644026e17bf92e3a3b8e", "message": "updates per team code review\n\n- changed package names to remove logging.api and .model (reconciling it\nto a flatter structure)\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-12-11T20:16:43Z", "type": "commit"}, {"oid": "a1f1dc7b22eb775f9715173eff840abbb3f5506b", "url": "https://github.com/IBM/FHIR/commit/a1f1dc7b22eb775f9715173eff840abbb3f5506b", "message": "update docs\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-12-11T20:19:03Z", "type": "commit"}, {"oid": "83cc9593e66e2859639c838d8778a8cb1c0a5f47", "url": "https://github.com/IBM/FHIR/commit/83cc9593e66e2859639c838d8778a8cb1c0a5f47", "message": "change formatting slightly on MapperFactory\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-12-11T20:23:25Z", "type": "commit"}, {"oid": "3f6e7ff1f24b21f72e633eca5c34f78801f9ed19", "url": "https://github.com/IBM/FHIR/commit/3f6e7ff1f24b21f72e633eca5c34f78801f9ed19", "message": "fix: it tests were not running for drug formulary and c4bb\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-12-11T22:10:00Z", "type": "commit"}, {"oid": "f0b6ac144ec4cc9f77f3e3c2b819f68197abd16b", "url": "https://github.com/IBM/FHIR/commit/f0b6ac144ec4cc9f77f3e3c2b819f68197abd16b", "message": "Merge pull request #1820 from IBM/fix-it-tests-ig-version-change\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-12-12T02:49:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxMDg2Nw==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r542410867", "bodyText": "Perhaps constants would be better for these string values.", "author": "punktilious", "createdAt": "2020-12-14T14:08:29Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/configuration/ConfigurationTranslator.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.audit.configuration;\n+\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.DEFAULT_MAPPER;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.FIELD_LOAD;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.KAFKA_USERNAME;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_APIKEY;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_KAFKA_TOPIC;\n+import static com.ibm.fhir.audit.AuditLogServiceConstants.PROPERTY_AUDIT_MAPPER;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import com.ibm.fhir.audit.configuration.type.IBMEventStreamsType;\n+import com.ibm.fhir.audit.configuration.type.KafkaType;\n+import com.ibm.fhir.audit.mapper.MapperType;\n+import com.ibm.fhir.config.PropertyGroup;\n+import com.ibm.fhir.exception.FHIRException;\n+\n+/**\n+ * Handles translation of configurations to useful configurations.\n+ */\n+public class ConfigurationTranslator {\n+    private static final String CLASSNAME = ConfigurationTranslator.class.getName();\n+    private static final Logger logger = java.util.logging.Logger.getLogger(CLASSNAME);\n+\n+\n+    private static final Map<String, String> PRIOR_VERSION_CLASSNAME = generateMap();\n+\n+    public ConfigurationTranslator() {\n+        // No Operation\n+    }\n+\n+    /*\n+     * generates the map from prior versions to the current naming scheme\n+     * and maintains backwards compatibility.\n+     */\n+    private static Map<String, String> generateMap() {\n+        Map<String, String> mapped = new HashMap<>(2);\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.DisabledAuditLogService\", \"com.ibm.fhir.audit.impl.NopService\");\n+        mapped.put(\"com.ibm.fhir.audit.logging.impl.WhcAuditCadfLogService\", \"com.ibm.fhir.audit.impl.KafkaService\");\n+        return mapped;\n+    }\n+\n+    /*\n+     * used to remap from prior versions\n+     */\n+    public String remap(String inputName) {\n+        if (Objects.isNull(inputName)) {\n+            logger.warning(\"remapping a bad Audit Log Service, please check configuration\");\n+        }\n+        if (PRIOR_VERSION_CLASSNAME.containsKey(inputName)) {\n+            return PRIOR_VERSION_CLASSNAME.get(inputName);\n+        }\n+        return inputName;\n+    }\n+\n+    /**\n+     * decides to load the Properties from the environment or the configuration.\n+     *\n+     * @param auditLogProperties\n+     * @return\n+     * @throws Exception\n+     */\n+    public Properties translate(PropertyGroup auditLogProperties) throws Exception {\n+        ConfigurationType type = determineConfigurationType(auditLogProperties);\n+        Properties props = new Properties();\n+        switch (type) {\n+        case CONFIG:\n+            config(props, auditLogProperties);\n+            break;\n+        case ENVIRONMENT:\n+            environment(props, auditLogProperties);\n+            break;\n+        default:\n+            logger.warning(\"unable to determine where to load from\");\n+            break;\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * loads the details from the config values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void config(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        props.putAll(KafkaType.getEnvironment(auditLogProperties));\n+    }\n+\n+    /**\n+     * loads the details from the environmental values.\n+     *\n+     * @param props\n+     * @param auditLogProperties\n+     * @throws Exception\n+     */\n+    public void environment(Properties props, PropertyGroup auditLogProperties) throws Exception {\n+        final String METHODNAME = \"environment\";\n+        logger.entering(CLASSNAME, METHODNAME);\n+\n+        String bootstrapServers = null;\n+        String apiKey = null;\n+        // Check environment: EVENT_STREAMS_AUDIT_BINDING to obtain configuration parameters for\n+        // kafka (Kubernetes Container)\n+        if (System.getenv(IBMEventStreamsType.KUB_BINDING) != null) {\n+            logger.info(\"Using the environmental variable '\" + IBMEventStreamsType.KUB_BINDING + \"' to set the credentials.\");\n+            com.ibm.fhir.audit.configuration.type.IBMEventStreamsType.EventStreamsCredentials credentials = IBMEventStreamsType.getEventStreamsCredentials();\n+            if (credentials != null) {\n+                bootstrapServers = IBMEventStreamsType.stringArrayToCSV(credentials.getKafkaBrokersSasl());\n+                apiKey = credentials.getApiKey();\n+            }\n+        }\n+\n+        // If fails to get config from environment, then try to get them from FHIR config\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            Objects.requireNonNull(auditLogProperties, \"Audit log properties cannot be null.\");\n+            logger.info(\"Using FHIR config to find credentials.\");\n+            bootstrapServers = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_BOOTSTRAPSERVERS);\n+            apiKey = auditLogProperties.getStringProperty(PROPERTY_AUDIT_KAFKA_APIKEY);\n+        }\n+\n+        // If still fails to get config for kafka producer, then throw <pre>exception</pre>\n+        if (bootstrapServers == null || bootstrapServers.length() < 10 || apiKey == null || apiKey.length() < 10) {\n+            throw new FHIRException(\"Can not get kafka settings!\");\n+        }\n+\n+        // We load the configuration.\n+        checkAndLoadDefaults(props, auditLogProperties);\n+\n+        // We override if we need to\n+        Object o =\n+                props.put(\"sasl.jaas.config\", String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", KAFKA_USERNAME, apiKey));\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - sasl.jaas.config\");\n+        }\n+        o = props.put(\"bootstrap.servers\", bootstrapServers);\n+        if (o != null) {\n+            logger.warning(\"Environmental properties are overriding fhir-server-config.json for - bootstrap.servers\");\n+        }\n+    }\n+\n+    /*\n+     * check and load the default serialiers (for example)\n+     */\n+    private void checkAndLoadDefaults(Properties props, PropertyGroup auditLogProperties) {\n+        if(!props.containsKey(\"key.serializer\")) {\n+            props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"value.serializer\")) {\n+            props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        }\n+        if(!props.containsKey(\"sasl.mechanism\")) {\n+            props.put(\"sasl.mechanism\", \"PLAIN\");\n+        }\n+        if(!props.containsKey(\"security.protocol\")) {\n+            props.put(\"security.protocol\", \"SASL_SSL\");\n+        }\n+        if(!props.containsKey(\"ssl.protocol\")) {\n+            props.put(\"ssl.protocol\", \"TLSv1.2\");\n+        }\n+        if(!props.containsKey(\"ssl.enabled.protocols\")) {\n+            props.put(\"ssl.enabled.protocols\", \"TLSv1.2\");\n+        }", "originalCommit": "f0b6ac144ec4cc9f77f3e3c2b819f68197abd16b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxMTc4Nw==", "url": "https://github.com/IBM/FHIR/pull/1813#discussion_r542411787", "bodyText": "String constants", "author": "punktilious", "createdAt": "2020-12-14T14:09:42Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/configuration/type/IBMEventStreamsType.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.audit.configuration.type;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import javax.json.Json;\n+import javax.json.JsonArray;\n+import javax.json.JsonObject;\n+import javax.json.JsonReader;\n+import javax.json.JsonReaderFactory;\n+import javax.json.JsonString;\n+import javax.json.stream.JsonGenerator;\n+import javax.json.stream.JsonGeneratorFactory;\n+\n+import com.ibm.fhir.exception.FHIRException;\n+\n+/**\n+ * Helper class to process IBM Event Streams bindings into useful Kafka\n+ * entries.\n+ */\n+public final class IBMEventStreamsType {\n+\n+    private static final Logger logger = java.util.logging.Logger.getLogger(IBMEventStreamsType.class.getName());\n+    public static final String KUB_BINDING = \"EVENT_STREAMS_AUDIT_BINDING\";\n+\n+    private IBMEventStreamsType() {\n+        // No Operation\n+    }\n+\n+    /**\n+     * Return a comma separate value String from an array of strings\n+     */\n+    public static String stringArrayToCSV(String[] sArray) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < sArray.length; i++) {\n+            sb.append(sArray[i]);\n+            if (i < sArray.length - 1)\n+                sb.append(\",\");\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * @return EventStreamsCredentials\n+     */\n+    public static EventStreamsCredentials getEventStreamsCredentials() {\n+        String kubEventStreamBinding = System.getenv(KUB_BINDING);\n+\n+        if (logger.isLoggable(Level.FINE)) {\n+            logger.fine(KUB_BINDING + \" is found and is valid = \" + (kubEventStreamBinding != null));\n+        }\n+        return parseEventStreamsCredentials(kubEventStreamBinding);\n+    }\n+\n+    /**\n+     * parses the EventStreamsCredentials into a useful object.\n+     * @param kubEventStreamBinding\n+     * @return\n+     */\n+    public static EventStreamsCredentials parseEventStreamsCredentials(String kubEventStreamBinding) {\n+        if (kubEventStreamBinding != null) {\n+            try {\n+                return EventStreamsCredentials.Parser.parse(kubEventStreamBinding);\n+            } catch (FHIRException e) {\n+                logger.severe(\"Parsing of environment variable '\" + KUB_BINDING + \"' has failed.\");\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /*\n+     * Helper Data Class for Event Stream related details\n+     */\n+    public static class EventStreamsCredentials {\n+\n+        private String apiKey, user, password;\n+        private String[] kafkaBrokersSasl;\n+\n+        public String getApiKey() {\n+            return apiKey;\n+        }\n+\n+        public void setApiKey(String apiKey) {\n+            this.apiKey = apiKey;\n+        }\n+\n+        public String getUser() {\n+            return user;\n+        }\n+\n+        public void setUser(String user) {\n+            this.user = user;\n+        }\n+\n+        public String getPassword() {\n+            return password;\n+        }\n+\n+        public void setPassword(String password) {\n+            this.password = password;\n+        }\n+\n+        public String[] getKafkaBrokersSasl() {\n+            return kafkaBrokersSasl;\n+        }\n+\n+        public void setKafkaBrokersSasl(String[] kafkaBrokersSasl) {\n+            this.kafkaBrokersSasl = kafkaBrokersSasl;\n+        }\n+\n+        /**\n+         * Generates JSON from this object.\n+         */\n+        public static class Writer {\n+\n+            private static final Map<java.lang.String, Object> properties =\n+                    Collections.singletonMap(JsonGenerator.PRETTY_PRINTING, true);\n+            private static final JsonGeneratorFactory PRETTY_PRINTING_GENERATOR_FACTORY =\n+                    Json.createGeneratorFactory(properties);\n+\n+            private Writer() {\n+                // No Operation\n+            }\n+\n+            /**\n+             * @param obj\n+             * @return\n+             * @throws IOException\n+             */\n+            public static String generate(EventStreamsCredentials obj)\n+                throws IOException {\n+                String o = \"{}\";\n+                try (StringWriter writer = new StringWriter();) {\n+                    try (JsonGenerator generator =\n+                            PRETTY_PRINTING_GENERATOR_FACTORY.createGenerator(writer);) {\n+                        generator.writeStartObject();\n+\n+                        if (obj.getApiKey() != null) {\n+                            generator.write(\"api_key\", obj.getApiKey());\n+                        }\n+\n+                        if (obj.getPassword() != null) {\n+                            generator.write(\"password\", obj.getPassword());\n+                        }\n+\n+                        if (obj.getUser() != null) {\n+                            generator.write(\"user\", obj.getUser());\n+                        }\n+\n+                        if (obj.getKafkaBrokersSasl() != null) {\n+                            generator.writeStartArray(\"kafka_brokers_sasl\");\n+\n+                            for (String kafkaBrokersSasl : obj.getKafkaBrokersSasl()) {\n+                                generator.write(kafkaBrokersSasl);\n+                            }\n+\n+                            generator.writeEnd();\n+                        }\n+\n+                        generator.writeEnd();\n+                    }\n+                    o = writer.toString();\n+                }\n+                return o;\n+            }\n+\n+        }\n+\n+        /**\n+         * Parser\n+         */\n+        public static class Parser {\n+\n+            private static final JsonReaderFactory JSON_READER_FACTORY = Json.createReaderFactory(null);\n+\n+            private Parser() {\n+                // No Impl\n+            }\n+\n+            public static EventStreamsCredentials parse(String in)\n+                throws FHIRException {\n+                StringReader stringReader = new StringReader(in);\n+                try (JsonReader jsonReader =\n+                        JSON_READER_FACTORY.createReader(stringReader)) {\n+                    JsonObject jsonObject = jsonReader.readObject();\n+                    EventStreamsCredentials.Builder builder =\n+                            EventStreamsCredentials.builder();\n+\n+                    if (jsonObject.get(\"api_key\") != null) {\n+                        String apiKey = jsonObject.getString(\"api_key\");\n+                        builder.apiKey(apiKey);\n+                    }", "originalCommit": "f0b6ac144ec4cc9f77f3e3c2b819f68197abd16b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}