{"pr_number": 1600, "pr_title": "issue #1351 - Check _include and _revinclude values are supported", "pr_createdAt": "2020-10-19T22:16:52Z", "pr_url": "https://github.com/IBM/FHIR/pull/1600", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r508140691", "bodyText": "We probably don't want to recompute this every time, is there a look aside map or structure we could use?\nOr should we cache this for the whole system on startup?", "author": "prb112", "createdAt": "2020-10-20T00:39:18Z", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1623,6 +1644,96 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);", "originalCommit": "63e78559f16727905e6a82acdd42cf80a5f808e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MjExMQ==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r508792111", "bodyText": "I based this on SearchUtil.getFilterRules, which calls FHIRConfigHelper.getPropertyGroup each time. Since the config file contents are cached, I thought it would be ok to follow that as an example.", "author": "tbieste", "createdAt": "2020-10-20T19:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMjI2MQ==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r508822261", "bodyText": "Or should we cache this for the whole system on startup?\n\nhaha, I actually had this same thought while editing SearchUtil.getFilterRules today.   I was deciding how much trouble it would be to try caching this and only refresh it when the config file changes.  I ended up deciding to leave that optimatization for a future change, although in this case its new code so may be worth figuring out the caching thing.  I wish we had an easy way to measure performance of the search component as I don't like to optimize prematurely.", "author": "lmsurpre", "createdAt": "2020-10-20T20:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4MTY0OQ==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511981649", "bodyText": "OK - let's take a backlog item on this.  Anyone up for creating an issue for it?\nMore as an investigation task?", "author": "prb112", "createdAt": "2020-10-26T14:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NDA4OA==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511994088", "bodyText": "I opened #1625 for the potential improvement.", "author": "lmsurpre", "createdAt": "2020-10-26T14:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5ODg4MA==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511998880", "bodyText": "Lee opened #1625", "author": "prb112", "createdAt": "2020-10-26T14:24:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb4e6820320a83911999acfc18897850bbdd7acd", "chunk": "diff --git a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\nindex 890e953e41..a0f370e140 100644\n--- a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n+++ b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n\n@@ -1661,7 +1768,7 @@ public class SearchUtil {\n             List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n             if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n \n-                // Try find search includes property for matching resource type\n+                // Try to find search includes property for matching resource type\n                 for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n                     if (resourceType.equals(rsrcsEntry.getName())) {\n                         PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n"}}, {"oid": "eb4e6820320a83911999acfc18897850bbdd7acd", "url": "https://github.com/IBM/FHIR/commit/eb4e6820320a83911999acfc18897850bbdd7acd", "message": "issue #1351 - Check search parameter combinations\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-20T16:57:03Z", "type": "forcePushed"}, {"oid": "0e4843cf6b21039562b3e605ba8588f62efa920b", "url": "https://github.com/IBM/FHIR/commit/0e4843cf6b21039562b3e605ba8588f62efa920b", "message": "issue #1351 - Check search parameter combinations\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-20T17:40:08Z", "type": "forcePushed"}, {"oid": "f874f1a9e0c166673b9cd9b65a1869ba155af713", "url": "https://github.com/IBM/FHIR/commit/f874f1a9e0c166673b9cd9b65a1869ba155af713", "message": "issue #1351 - Check search parameter combinations\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-20T17:59:54Z", "type": "forcePushed"}, {"oid": "6b73eb36016dcb19a8b3c2c113d5790fb7f4c029", "url": "https://github.com/IBM/FHIR/commit/6b73eb36016dcb19a8b3c2c113d5790fb7f4c029", "message": "issue #1351 - Check search parameter combinations\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-20T18:59:37Z", "type": "forcePushed"}, {"oid": "ef5bbbf16b26b831bf750f560a311ea9a5bd92d0", "url": "https://github.com/IBM/FHIR/commit/ef5bbbf16b26b831bf750f560a311ea9a5bd92d0", "message": "issue #1351 - Check search parameter combinations\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-20T19:26:44Z", "type": "forcePushed"}, {"oid": "77a0bfdde26fd87edc7a434c8d792f24862741e2", "url": "https://github.com/IBM/FHIR/commit/77a0bfdde26fd87edc7a434c8d792f24862741e2", "message": "issue #1351 - Check search parameter combinations\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-20T19:38:00Z", "type": "forcePushed"}, {"oid": "d88baae89897ed6d2009019236960b69d92f2702", "url": "https://github.com/IBM/FHIR/commit/d88baae89897ed6d2009019236960b69d92f2702", "message": "issue #1351 - Check search parameter combinations\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-20T20:27:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NzY2MQ==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511987661", "bodyText": "Please update the copywrite year.", "author": "prb112", "createdAt": "2020-10-26T14:09:07Z", "path": "fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java", "diffHunk": "@@ -18,16 +18,17 @@\n     private static final String ILLEGAL_EXCEPTION = \"SearchParameter filter property values must be an array of String.\";\n     private static final String ILLEGAL_ARGUMENT_EXCEPTION = \"No constant with value '%s' found.\";\n     private static final String PARSE_PARAMETER_EXCEPTION = \"An error occurred while parsing parameter '%s'.\";\n+    private static final String PARSE_PARAMETERS_EXCEPTION = \"An error occurred while parsing parameters.\";", "originalCommit": "d88baae89897ed6d2009019236960b69d92f2702", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MzI0Mg==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512093242", "bodyText": "Updated.", "author": "tbieste", "createdAt": "2020-10-26T16:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NzY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "493e9b810b7cf49e12ed87c63a4c3fe6d4191f17", "chunk": "diff --git a/fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java b/fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java\nindex fa9a814dd0..c49c6098ed 100644\n--- a/fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java\n+++ b/fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java\n\n@@ -18,17 +18,16 @@ public class SearchExceptionUtil {\n     private static final String ILLEGAL_EXCEPTION = \"SearchParameter filter property values must be an array of String.\";\n     private static final String ILLEGAL_ARGUMENT_EXCEPTION = \"No constant with value '%s' found.\";\n     private static final String PARSE_PARAMETER_EXCEPTION = \"An error occurred while parsing parameter '%s'.\";\n-    private static final String PARSE_PARAMETERS_EXCEPTION = \"An error occurred while parsing parameters.\";\n     private static final String CHAINED_PARAMETER_EXCEPTION = \"Unable to parse chained parameter: '%s'\";\n     private static final String BADFORMAT_EXCEPTION = \"Invalid Date Time Format found please use 'yyyy-mm-ddThh:mm:ss[Z|(+|-)hh:mm].'\";\n-\n+    \n     private SearchExceptionUtil() {\n         // No Op\n     }\n \n     /**\n      * creates an invalid search exception.\n-     *\n+     * \n      * @param msg\n      * @return\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4ODI5OA==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511988298", "bodyText": "Can we pack in some additional detail in the exception?  e.g. what's the invalid combo?", "author": "prb112", "createdAt": "2020-10-26T14:09:56Z", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -816,6 +820,16 @@ public static FHIRSearchContext parseQueryParameters(Class<?> resourceType,\n             }\n         } // end for\n \n+        try {\n+            // Check for valid search parameter combinations\n+            checkSearchParameterCombinations(resourceType, parameters);\n+\n+        } catch (FHIRSearchException se) {\n+            throw se;\n+        } catch (Exception e) {\n+            throw SearchExceptionUtil.buildNewParseParametersException(e);", "originalCommit": "d88baae89897ed6d2009019236960b69d92f2702", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NjcxOA==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511996718", "bodyText": "actually in this branch it's only going to be config related exceptions.", "author": "prb112", "createdAt": "2020-10-26T14:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4ODI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5Mjc2NQ==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512092765", "bodyText": "Correct.", "author": "tbieste", "createdAt": "2020-10-26T16:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4ODI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "493e9b810b7cf49e12ed87c63a4c3fe6d4191f17", "chunk": "diff --git a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\nindex 41e56e0bbb..df2991200b 100644\n--- a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n+++ b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n\n@@ -820,16 +825,6 @@ public class SearchUtil {\n             }\n         } // end for\n \n-        try {\n-            // Check for valid search parameter combinations\n-            checkSearchParameterCombinations(resourceType, parameters);\n-\n-        } catch (FHIRSearchException se) {\n-            throw se;\n-        } catch (Exception e) {\n-            throw SearchExceptionUtil.buildNewParseParametersException(e);\n-        }\n-\n         context.setSearchParameters(parameters);\n         return context;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5Mzc0Mw==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511993743", "bodyText": "Line 20,21 are almost identical, I'd consider pumping in more information in this OperationOutcome so that it's more specific to the failing reason.", "author": "prb112", "createdAt": "2020-10-26T14:17:19Z", "path": "fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java", "diffHunk": "@@ -49,9 +50,22 @@ public static FHIRSearchException buildNewParseParameterException(final String n\n         return new FHIRSearchException(msg, e).withIssue(ooi);\n     }\n \n+    /**\n+     * creates a new parse parameters exception\n+     *\n+     * @param name\n+     * @param e\n+     * @return\n+     */\n+    public static FHIRSearchException buildNewParseParametersException(Exception e) {\n+        String msg = String.format(PARSE_PARAMETERS_EXCEPTION);\n+        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, IssueType.INVALID);\n+        return new FHIRSearchException(msg, e).withIssue(ooi);", "originalCommit": "d88baae89897ed6d2009019236960b69d92f2702", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwMDYxNg==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512100616", "bodyText": "For this exception, it's only going to be due to config-related exceptions, which will be in the \"cause\" exception. That seemed consistent with the existing behavior of buildNewParseParameterException.", "author": "tbieste", "createdAt": "2020-10-26T16:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5Mzc0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwMjU3Ng==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512102576", "bodyText": "Sounds good", "author": "prb112", "createdAt": "2020-10-26T16:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5Mzc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "493e9b810b7cf49e12ed87c63a4c3fe6d4191f17", "chunk": "diff --git a/fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java b/fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java\nindex fa9a814dd0..c49c6098ed 100644\n--- a/fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java\n+++ b/fhir-search/src/main/java/com/ibm/fhir/search/exception/SearchExceptionUtil.java\n\n@@ -50,22 +49,9 @@ public class SearchExceptionUtil {\n         return new FHIRSearchException(msg, e).withIssue(ooi);\n     }\n \n-    /**\n-     * creates a new parse parameters exception\n-     *\n-     * @param name\n-     * @param e\n-     * @return\n-     */\n-    public static FHIRSearchException buildNewParseParametersException(Exception e) {\n-        String msg = String.format(PARSE_PARAMETERS_EXCEPTION);\n-        OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, IssueType.INVALID);\n-        return new FHIRSearchException(msg, e).withIssue(ooi);\n-    }\n-\n     /**\n      * creates a new chained parameter exception\n-     *\n+     * \n      * @param name\n      * @param e\n      * @return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5ODMyOQ==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r511998329", "bodyText": "I think we should be proactive here, and only accept the trimmed codes/combinations.", "author": "prb112", "createdAt": "2020-10-26T14:23:25Z", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -902,6 +916,109 @@ private static void checkSearchParameterRestrictions(String parameterCode, Searc\n         }\n     }\n \n+    /**\n+     * Checks that the combination of search parameters is valid.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @param parameters\n+     *            the query parameters to check\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static void checkSearchParameterCombinations(Class<?> resourceType, List<QueryParameter> parameters)\n+        throws Exception {\n+\n+        List<Set<String>> validCombinations = getSearchParameterCombinations(resourceType.getSimpleName());\n+        if (validCombinations != null) {\n+            Set<String> searchParameterCodes = parameters.stream().map(qp -> qp.getCode()).collect(Collectors.toSet());\n+\n+            // Check that search parameter codes are a valid combinations\n+            if (!validCombinations.contains(searchParameterCodes)) {\n+                String msg;\n+                if (searchParameterCodes.isEmpty()) {\n+                    msg = \"A valid search parameter combination is required\";\n+                } else {\n+                    msg = \"Search parameter combination is not valid\";\n+                }\n+                throw SearchExceptionUtil.buildNewInvalidSearchException(msg);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Retrieves the search parameter combinations.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search parameter combinations, or null if any search parameter combination is allowed\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<Set<String>> getSearchParameterCombinations(String resourceType) throws Exception {\n+\n+        List<Set<String>> spCombinations = null;\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+                List<String> combinations = null;\n+\n+                // Try to find search parameter combinations property for matching resource type\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    if (resourceType.equals(rsrcsEntry.getName())) {\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            combinations = resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_COMBINATIONS);\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                // Otherwise, try to find search parameter combinations property for \"Resource\" resource type\n+                if (combinations == null) {\n+                    for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+\n+                        // Check if matching resource type\n+                        if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n+                            PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                            if (resourceTypeGroup != null) {\n+                                combinations =\n+                                        resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_COMBINATIONS);\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                // Convert the delimited combinations to a list of sets\n+                if (combinations != null) {\n+                    spCombinations = new ArrayList<>();\n+                    for (String combination : combinations) {\n+                        Set<String> combinationSet = new HashSet<>();\n+                        if (!combination.isEmpty()) {\n+                            // If any search parameter combination is allowed, return null\n+                            if (SEARCH_PARAM_COMBINATION_ANY.equals(combination)) {\n+                                return null;\n+                            }\n+                            for (String spString : combination.split(SEARCH_PARAM_COMBINATION_DELIMITER)) {\n+                                if (spString.trim().isEmpty()) {\n+                                    throw SearchExceptionUtil.buildNewIllegalStateException();\n+                                }\n+                                combinationSet.add(spString);", "originalCommit": "d88baae89897ed6d2009019236960b69d92f2702", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5NTM3OA==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512095378", "bodyText": "Updated.", "author": "tbieste", "createdAt": "2020-10-26T16:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5ODMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "493e9b810b7cf49e12ed87c63a4c3fe6d4191f17", "chunk": "diff --git a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\nindex 41e56e0bbb..df2991200b 100644\n--- a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n+++ b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n\n@@ -916,109 +911,6 @@ public class SearchUtil {\n         }\n     }\n \n-    /**\n-     * Checks that the combination of search parameters is valid.\n-     *\n-     * @param resourceType\n-     *            the resource type\n-     * @param parameters\n-     *            the query parameters to check\n-     * @throws Exception\n-     *             an exception\n-     */\n-    private static void checkSearchParameterCombinations(Class<?> resourceType, List<QueryParameter> parameters)\n-        throws Exception {\n-\n-        List<Set<String>> validCombinations = getSearchParameterCombinations(resourceType.getSimpleName());\n-        if (validCombinations != null) {\n-            Set<String> searchParameterCodes = parameters.stream().map(qp -> qp.getCode()).collect(Collectors.toSet());\n-\n-            // Check that search parameter codes are a valid combinations\n-            if (!validCombinations.contains(searchParameterCodes)) {\n-                String msg;\n-                if (searchParameterCodes.isEmpty()) {\n-                    msg = \"A valid search parameter combination is required\";\n-                } else {\n-                    msg = \"Search parameter combination is not valid\";\n-                }\n-                throw SearchExceptionUtil.buildNewInvalidSearchException(msg);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Retrieves the search parameter combinations.\n-     *\n-     * @param resourceType\n-     *            the resource type\n-     * @return list of allowed search parameter combinations, or null if any search parameter combination is allowed\n-     * @throws Exception\n-     *             an exception\n-     */\n-    private static List<Set<String>> getSearchParameterCombinations(String resourceType) throws Exception {\n-\n-        List<Set<String>> spCombinations = null;\n-\n-        // Retrieve the \"resources\" config property group.\n-        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n-        if (rsrcsGroup != null) {\n-            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n-            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n-                List<String> combinations = null;\n-\n-                // Try to find search parameter combinations property for matching resource type\n-                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n-                    if (resourceType.equals(rsrcsEntry.getName())) {\n-                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n-                        if (resourceTypeGroup != null) {\n-                            combinations = resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_COMBINATIONS);\n-                            break;\n-                        }\n-                    }\n-                }\n-\n-                // Otherwise, try to find search parameter combinations property for \"Resource\" resource type\n-                if (combinations == null) {\n-                    for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n-\n-                        // Check if matching resource type\n-                        if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n-                            PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n-                            if (resourceTypeGroup != null) {\n-                                combinations =\n-                                        resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_PARAMETER_COMBINATIONS);\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n-\n-                // Convert the delimited combinations to a list of sets\n-                if (combinations != null) {\n-                    spCombinations = new ArrayList<>();\n-                    for (String combination : combinations) {\n-                        Set<String> combinationSet = new HashSet<>();\n-                        if (!combination.isEmpty()) {\n-                            // If any search parameter combination is allowed, return null\n-                            if (SEARCH_PARAM_COMBINATION_ANY.equals(combination)) {\n-                                return null;\n-                            }\n-                            for (String spString : combination.split(SEARCH_PARAM_COMBINATION_DELIMITER)) {\n-                                if (spString.trim().isEmpty()) {\n-                                    throw SearchExceptionUtil.buildNewIllegalStateException();\n-                                }\n-                                combinationSet.add(spString);\n-                            }\n-                        }\n-                        spCombinations.add(combinationSet);\n-                    }\n-                }\n-            }\n-        }\n-\n-        return spCombinations;\n-    }\n-\n     /**\n      * Common logic from handling a single queryParameterValueString based on its type\n      */\n"}}, {"oid": "493e9b810b7cf49e12ed87c63a4c3fe6d4191f17", "url": "https://github.com/IBM/FHIR/commit/493e9b810b7cf49e12ed87c63a4c3fe6d4191f17", "message": "issue #1351 - Check _include and _revinclude values are supported\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-26T14:26:37Z", "type": "commit"}, {"oid": "1feaa611ff458a258d6f8bd66fea3b90bc526c80", "url": "https://github.com/IBM/FHIR/commit/1feaa611ff458a258d6f8bd66fea3b90bc526c80", "message": "issue #1351 - Check search parameter combinations\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-26T14:26:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMTY5MQ==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512001691", "bodyText": "Please refactor this method and the prior into one processing logic method, and a new signature, resourceType, String propertyType, and leave the existing methods only pointing to the one logic method.", "author": "prb112", "createdAt": "2020-10-26T14:27:34Z", "path": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java", "diffHunk": "@@ -1612,6 +1750,95 @@ private static void parseInclusionParameter(Class<?> resourceType, FHIRSearchCon\n         }\n     }\n \n+    /**\n+     * Retrieves the search include restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _include values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n+\n+        // Retrieve the \"resources\" config property group.\n+        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+        if (rsrcsGroup != null) {\n+            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n+            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+\n+                // Try to find search includes property for matching resource type\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    if (resourceType.equals(rsrcsEntry.getName())) {\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES);\n+                        }\n+                    }\n+                }\n+\n+                // Otherwise, try to find search includes property for \"Resource\" resource type\n+                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+\n+                    // Check if matching resource type\n+                    if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n+                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                        if (resourceTypeGroup != null) {\n+                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Retrieves the search revinclude restrictions.\n+     *\n+     * @param resourceType\n+     *            the resource type\n+     * @return list of allowed search _revinclude values, or null if no restrictions\n+     * @throws Exception\n+     *             an exception\n+     */\n+    private static List<String> getSearchRevIncludeRestrictions(String resourceType) throws Exception {", "originalCommit": "d88baae89897ed6d2009019236960b69d92f2702", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwOTA5MA==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512109090", "bodyText": "Updated.", "author": "tbieste", "createdAt": "2020-10-26T16:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMTY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c7d91922ad38010b186f25222580fd3cbf39e11a", "chunk": "diff --git a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\nindex 41e56e0bbb..9c1da22bf7 100644\n--- a/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n+++ b/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java\n\n@@ -1751,88 +1764,53 @@ public class SearchUtil {\n     }\n \n     /**\n-     * Retrieves the search include restrictions.\n+     * Retrieves the search property restrictions.\n      *\n      * @param resourceType\n      *            the resource type\n-     * @return list of allowed search _include values, or null if no restrictions\n+     * @param propertyType the property type\n+     * @return list of allowed values for the search property, or null if no restrictions\n      * @throws Exception\n      *             an exception\n      */\n-    private static List<String> getSearchIncludeRestrictions(String resourceType) throws Exception {\n-\n-        // Retrieve the \"resources\" config property group.\n-        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n-        if (rsrcsGroup != null) {\n-            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n-            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n-\n-                // Try to find search includes property for matching resource type\n-                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n-                    if (resourceType.equals(rsrcsEntry.getName())) {\n-                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n-                        if (resourceTypeGroup != null) {\n-                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES);\n-                        }\n-                    }\n-                }\n-\n-                // Otherwise, try to find search includes property for \"Resource\" resource type\n-                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n-\n-                    // Check if matching resource type\n-                    if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n-                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n-                        if (resourceTypeGroup != null) {\n-                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES);\n-                        }\n-                    }\n-                }\n-            }\n+    private static List<String> getSearchPropertyRestrictions(String resourceType, String propertyType) throws Exception {\n+        String propertyField = null;\n+        if (SEARCH_PROPERTY_TYPE_INCLUDE.equals(propertyType)) {\n+            propertyField = FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_INCLUDES;\n+        }\n+        else if (SEARCH_PROPERTY_TYPE_REVINCLUDE.equals(propertyType)) {\n+            propertyField = FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_REV_INCLUDES;\n         }\n-\n-        return null;\n-    }\n-\n-    /**\n-     * Retrieves the search revinclude restrictions.\n-     *\n-     * @param resourceType\n-     *            the resource type\n-     * @return list of allowed search _revinclude values, or null if no restrictions\n-     * @throws Exception\n-     *             an exception\n-     */\n-    private static List<String> getSearchRevIncludeRestrictions(String resourceType) throws Exception {\n \n         // Retrieve the \"resources\" config property group.\n-        PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n-        if (rsrcsGroup != null) {\n-            List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n-            if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n+        if (propertyField != null) {\n+            PropertyGroup rsrcsGroup = FHIRConfigHelper.getPropertyGroup(FHIRConfiguration.PROPERTY_RESOURCES);\n+            if (rsrcsGroup != null) {\n+                List<PropertyEntry> rsrcsEntries = rsrcsGroup.getProperties();\n+                if (rsrcsEntries != null && !rsrcsEntries.isEmpty()) {\n \n-                // Try find search revincludes property for matching resource type\n-                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n-                    if (resourceType.equals(rsrcsEntry.getName())) {\n-                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n-                        if (resourceTypeGroup != null) {\n-                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_REV_INCLUDES);\n+                    // Try to find search property for matching resource type\n+                    for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                        if (resourceType.equals(rsrcsEntry.getName())) {\n+                            PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                            if (resourceTypeGroup != null) {\n+                                return resourceTypeGroup.getStringListProperty(propertyField);\n+                            }\n                         }\n                     }\n-                }\n \n-                // Otherwise, try find search revincludes property for \"Resource\" resource type\n-                for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n+                    // Otherwise, try to find search property for \"Resource\" resource type\n+                    for (PropertyEntry rsrcsEntry : rsrcsEntries) {\n \n-                    // Check if matching resource type\n-                    if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n-                        PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n-                        if (resourceTypeGroup != null) {\n-                            return resourceTypeGroup.getStringListProperty(FHIRConfiguration.PROPERTY_FIELD_RESOURCES_SEARCH_REV_INCLUDES);\n+                        // Check if matching resource type\n+                        if (SearchConstants.RESOURCE_RESOURCE.equals(rsrcsEntry.getName())) {\n+                            PropertyGroup resourceTypeGroup = (PropertyGroup) rsrcsEntry.getValue();\n+                            if (resourceTypeGroup != null) {\n+                                return resourceTypeGroup.getStringListProperty(propertyField);\n+                            }\n                         }\n                     }\n                 }\n-\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMjM5Mw==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512002393", "bodyText": "Change the copyright year to 2020 only", "author": "prb112", "createdAt": "2020-10-26T14:28:30Z", "path": "fhir-search/src/test/java/com/ibm/fhir/search/parameters/SearchParameterRestrictionTest.java", "diffHunk": "@@ -17,7 +17,14 @@\n \n import com.ibm.fhir.config.FHIRConfiguration;\n import com.ibm.fhir.config.FHIRRequestContext;\n+import com.ibm.fhir.model.resource.CarePlan;", "originalCommit": "d88baae89897ed6d2009019236960b69d92f2702", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MTMzMQ==", "url": "https://github.com/IBM/FHIR/pull/1600#discussion_r512091331", "bodyText": "Updated.", "author": "tbieste", "createdAt": "2020-10-26T16:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMjM5Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c7d91922ad38010b186f25222580fd3cbf39e11a", "url": "https://github.com/IBM/FHIR/commit/c7d91922ad38010b186f25222580fd3cbf39e11a", "message": "issue #1351 - Updates after code review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-26T16:49:56Z", "type": "commit"}, {"oid": "c7d91922ad38010b186f25222580fd3cbf39e11a", "url": "https://github.com/IBM/FHIR/commit/c7d91922ad38010b186f25222580fd3cbf39e11a", "message": "issue #1351 - Updates after code review\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-26T16:49:56Z", "type": "forcePushed"}, {"oid": "6d005cfdac608192393f8368861de2c7a47e977d", "url": "https://github.com/IBM/FHIR/commit/6d005cfdac608192393f8368861de2c7a47e977d", "message": "issue #1351 - Add searchInclude and searchRevInclude to capabilities\n\nSigned-off-by: Troy Biesterfeld <tbieste@us.ibm.com>", "committedDate": "2020-10-26T19:37:27Z", "type": "commit"}]}