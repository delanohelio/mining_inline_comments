{"pr_number": 803, "pr_title": "issue #786 #787 #807 BulkimportJob enhancements", "pr_createdAt": "2020-03-17T19:45:03Z", "pr_url": "https://github.com/IBM/FHIR/pull/803", "timeline": [{"oid": "ab99116fc6b6574a51c045b2e409c0afaa984422", "url": "https://github.com/IBM/FHIR/commit/ab99116fc6b6574a51c045b2e409c0afaa984422", "message": "Merge pull request #780 from IBM/issue-673\n\nIssue 673", "committedDate": "2020-03-13T02:49:41Z", "type": "commit"}, {"oid": "0351c61e9c3a621cef347ddca9b4b0c9c21ac0fb", "url": "https://github.com/IBM/FHIR/commit/0351c61e9c3a621cef347ddca9b4b0c9c21ac0fb", "message": "Merge pull request #790 from IBM/issue-787\n\nIssue 787", "committedDate": "2020-03-16T14:35:42Z", "type": "commit"}, {"oid": "f74464284a5c8815ed06c0f2b80cfda2f1a30a49", "url": "https://github.com/IBM/FHIR/commit/f74464284a5c8815ed06c0f2b80cfda2f1a30a49", "message": "Merge pull request #798 from IBM/issue-787\n\nIssue 787", "committedDate": "2020-03-17T13:43:13Z", "type": "commit"}, {"oid": "4c9de09e03d9e7fd267edb90bb2c6d78439a754b", "url": "https://github.com/IBM/FHIR/commit/4c9de09e03d9e7fd267edb90bb2c6d78439a754b", "message": "issue #786 job duration fix\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-17T19:43:29Z", "type": "commit"}, {"oid": "d675321e062efdf4296e0551a92e044501c9a7a4", "url": "https://github.com/IBM/FHIR/commit/d675321e062efdf4296e0551a92e044501c9a7a4", "message": "issue #787 Enhance COSBreaker to get fhir resources with distinct IDs\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-17T23:11:00Z", "type": "commit"}, {"oid": "eee48ae35b95aad84c67efd2dd909f63f68083f0", "url": "https://github.com/IBM/FHIR/commit/eee48ae35b95aad84c67efd2dd909f63f68083f0", "message": "issue #807 Add resource validation support to ImportJob\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-18T02:53:15Z", "type": "commit"}, {"oid": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "url": "https://github.com/IBM/FHIR/commit/99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "message": "issue #807 resource validation support\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-18T02:54:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MDMzMA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394290330", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.fine(\"Validation warnings for input resource: \" + info);\n          \n          \n            \n                                logger.fine(\"Validation warnings for input resource: [\" + info + \"]\");\n          \n      \n    \n    \n  \n\nI suggest adding a delimiter", "author": "prb112", "createdAt": "2020-03-18T11:53:00Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {\n+                    String info = issues.stream()\n+                                .flatMap(issue -> Stream.of(issue.getDetails()))\n+                                .flatMap(details -> Stream.of(details.getText()))\n+                                .flatMap(text -> Stream.of(text.getValue()))\n+                                .collect(Collectors.joining(\", \"));\n+                    logger.fine(\"Validation warnings for input resource: \" + info);", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6903f56d22915e8f0647b8c8ff1ad705ca1ca611", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\nindex e8ab8ba12b..c1f9cbc388 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n\n@@ -349,7 +349,7 @@ public class BulkDataUtils {\n                                 .flatMap(details -> Stream.of(details.getText()))\n                                 .flatMap(text -> Stream.of(text.getValue()))\n                                 .collect(Collectors.joining(\", \"));\n-                    logger.fine(\"Validation warnings for input resource: \" + info);\n+                    logger.fine(\"Validation warnings for input resource: [\" + info + \"]\");\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MDkyNw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394290927", "bodyText": "needless nesting of else and if,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            if (logger.isLoggable(Level.FINE)) {\n          \n          \n            \n                        } else if (logger.isLoggable(Level.FINE)) {", "author": "prb112", "createdAt": "2020-03-18T11:54:09Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6903f56d22915e8f0647b8c8ff1ad705ca1ca611", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\nindex e8ab8ba12b..c1f9cbc388 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n\n@@ -349,7 +349,7 @@ public class BulkDataUtils {\n                                 .flatMap(details -> Stream.of(details.getText()))\n                                 .flatMap(text -> Stream.of(text.getValue()))\n                                 .collect(Collectors.joining(\", \"));\n-                    logger.fine(\"Validation warnings for input resource: \" + info);\n+                    logger.fine(\"Validation warnings for input resource: [\" + info + \"]\");\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MTAxMQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394291011", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }", "author": "prb112", "createdAt": "2020-03-18T11:54:19Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java", "diffHunk": "@@ -314,4 +321,38 @@ public static int readFhirResourceFromHttps(String dataUrl, int numOfLinesToSkip\n \n         return parseFailures;\n     }\n+\n+    /**\n+     * Validate the input resource and throw if there are validation errors\n+     *\n+     * @param resource\n+     * @throws FHIRValidationException\n+     * @throws FHIROperationException\n+     */\n+    public static List<OperationOutcome.Issue> validateInput(Resource resource)\n+            throws FHIRValidationException, FHIROperationException {\n+        List<OperationOutcome.Issue> issues = FHIRValidator.validator().validate(resource);\n+        if (!issues.isEmpty()) {\n+            boolean includesFailure = false;\n+            for (OperationOutcome.Issue issue : issues) {\n+                if (FHIRUtil.isFailure(issue.getSeverity())) {\n+                    includesFailure = true;\n+                }\n+            }\n+\n+            if (includesFailure) {\n+                throw new FHIROperationException(\"Input resource failed validation.\").withIssue(issues);\n+            } else {\n+                if (logger.isLoggable(Level.FINE)) {\n+                    String info = issues.stream()\n+                                .flatMap(issue -> Stream.of(issue.getDetails()))\n+                                .flatMap(details -> Stream.of(details.getText()))\n+                                .flatMap(text -> Stream.of(text.getValue()))\n+                                .collect(Collectors.joining(\", \"));\n+                    logger.fine(\"Validation warnings for input resource: \" + info);\n+                }", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MTA4OA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394291088", "bodyText": "you may have to reformat", "author": "prb112", "createdAt": "2020-03-18T11:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MTAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6903f56d22915e8f0647b8c8ff1ad705ca1ca611", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\nindex e8ab8ba12b..c1f9cbc388 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n\n@@ -349,7 +349,7 @@ public class BulkDataUtils {\n                                 .flatMap(details -> Stream.of(details.getText()))\n                                 .flatMap(text -> Stream.of(text.getValue()))\n                                 .collect(Collectors.joining(\", \"));\n-                    logger.fine(\"Validation warnings for input resource: \" + info);\n+                    logger.fine(\"Validation warnings for input resource: [\" + info + \"]\");\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjE0Mg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394292142", "bodyText": "please update the documentation to explain the new value", "author": "prb112", "createdAt": "2020-03-18T11:56:29Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/Constants.java", "diffHunk": "@@ -45,6 +45,7 @@\n     public static final String IMPORT_PARTITTION_WORKITEM = \"import.partiton.workitem\";\n     public static final String IMPORT_PARTITTION_RESOURCE_TYPE = \"import.partiton.resourcetype\";\n     public static final String IMPORT_FHIR_STORAGE_TYPE = \"import.fhir.storagetype\";\n+    public static final String IMPORT_FHIR_IS_VALIDATION_ON = \"import.fhir.validation\";", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1MjY1Mg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394352652", "bodyText": "yes, I have not drafted the document for import yet, do have plan to add them. let me open an issue for this.", "author": "albertwang-ibm", "createdAt": "2020-03-18T13:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1MzQxMQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394353411", "bodyText": "#809", "author": "albertwang-ibm", "createdAt": "2020-03-18T13:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjE0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjcyOQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394292729", "bodyText": "what is unchecked below?", "author": "prb112", "createdAt": "2020-03-18T11:57:36Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,25 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1OTk3OQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394359979", "bodyText": "List fhirResourceList = (List) objResJasonList;", "author": "albertwang-ibm", "createdAt": "2020-03-18T13:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MDMzNg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394360336", "bodyText": "changed to suppress the line instead of the whole function", "author": "albertwang-ibm", "createdAt": "2020-03-18T13:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NjAwOA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394366008", "bodyText": "sounds good, made a slight comment on JSON", "author": "prb112", "createdAt": "2020-03-18T13:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MjcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "66282d70ee249ed14c7d64ae3d0aaaa7cf76cacf", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex e98b3c8060..b0d73917fb 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -125,7 +125,7 @@ public class ChunkWriter extends AbstractItemWriter {\n     public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         boolean isValidtionOn = false;\n         if (fhirValidation != null) {\n-            isValidtionOn = fhirValidation.equalsIgnoreCase(\"Y\");\n+            isValidationOn = fhirValidation.equalsIgnoreCase(\"Y\");\n         }\n         if (fhirTenant == null) {\n             fhirTenant = \"default\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MzI2Ng==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394293266", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        isValidtionOn = fhirValidation.equalsIgnoreCase(\"Y\");\n          \n          \n            \n                        isValidationOn = fhirValidation.equalsIgnoreCase(\"Y\");\n          \n      \n    \n    \n  \n\nspelling", "author": "prb112", "createdAt": "2020-03-18T11:58:38Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,25 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void writeItems(List<java.lang.Object> arg0) throws Exception {\n+        boolean isValidtionOn = false;\n+        if (fhirValidation != null) {\n+            isValidtionOn = fhirValidation.equalsIgnoreCase(\"Y\");", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66282d70ee249ed14c7d64ae3d0aaaa7cf76cacf", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex e98b3c8060..b0d73917fb 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -125,7 +125,7 @@ public class ChunkWriter extends AbstractItemWriter {\n     public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         boolean isValidtionOn = false;\n         if (fhirValidation != null) {\n-            isValidtionOn = fhirValidation.equalsIgnoreCase(\"Y\");\n+            isValidationOn = fhirValidation.equalsIgnoreCase(\"Y\");\n         }\n         if (fhirTenant == null) {\n             fhirTenant = \"default\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394294629", "bodyText": "if this is a constant, it'll always be true or false... put this on the same line as line 149, and combine the logic with an AND (which is what it's doing)", "author": "prb112", "createdAt": "2020-03-18T12:01:18Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidtionOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MjUxMg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394362512", "bodyText": "good catch", "author": "albertwang-ibm", "createdAt": "2020-03-18T13:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3MjE0OQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394372149", "bodyText": "I did this is to prevent the notused warning of eclipse of putting them together ...", "author": "albertwang-ibm", "createdAt": "2020-03-18T14:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3MzY0Mg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394373642", "bodyText": "I think it's best to include it on the same line.", "author": "prb112", "createdAt": "2020-03-18T14:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDQ0MQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450441", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2adfd5626995d80e358dea026221d0a769a3379", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex e98b3c8060..8811b999d4 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -151,21 +152,20 @@ public class ChunkWriter extends AbstractItemWriter {\n         // framework at this time point.\n         txn.enroll();\n         for (Object objResJasonList : arg0) {\n+            @SuppressWarnings(\"unchecked\")\n             List<Resource> fhirResourceList = (List<Resource>) objResJasonList;\n \n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n-                    if (isValidtionOn) {\n+                    if (isValidationOn) {\n                         BulkDataUtils.validateInput(fhirResource);\n                     }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n-                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n-                        if (operationOutcome != null) {\n-                            FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStream4Import());\n-                            chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n-                        }\n+                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES && operationOutcome != null) {\n+                        FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n+                        chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n                 } catch (FHIRValidationException|FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTAyNg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394295026", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n          \n          \n            \n                                    FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStreamForImportError());\n          \n      \n    \n    \n  \n\nplease dont use 4", "author": "prb112", "createdAt": "2020-03-18T12:02:04Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -151,11 +167,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n+                        OperationOutcome operationOutCome;\n+                        if (e instanceof FHIROperationException && !((FHIROperationException) e).getIssues().isEmpty()) {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(((FHIROperationException) e).getIssues());\n+                        } else {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n+                        }\n+\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b9243febd91c4d4881710545ab849c27529dcb1", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex e98b3c8060..271b94ee79 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -178,7 +178,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                             operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n                         }\n \n-                        FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n+                        FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStreamForImportError());\n \n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTE2NQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394295165", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n          \n          \n            \n                                    chunkData.getBufferStreamForImportError().write(Constants.NDJSON_LINESEPERATOR);", "author": "prb112", "createdAt": "2020-03-18T12:02:21Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -151,11 +167,19 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n                             chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n                         }\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n+                        OperationOutcome operationOutCome;\n+                        if (e instanceof FHIROperationException && !((FHIROperationException) e).getIssues().isEmpty()) {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(((FHIROperationException) e).getIssues());\n+                        } else {\n+                            operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n+                        }\n+\n                         FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n+\n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTI3OA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394295278", "bodyText": "You can also statically import the constants.", "author": "prb112", "createdAt": "2020-03-18T12:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NTE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4b9243febd91c4d4881710545ab849c27529dcb1", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex e98b3c8060..271b94ee79 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -178,7 +178,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                             operationOutCome = FHIRUtil.buildOperationOutcome(e, false);\n                         }\n \n-                        FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStream4ImportError());\n+                        FHIRGenerator.generator(Format.JSON).generate(FHIRUtil.buildOperationOutcome(e, false), chunkData.getBufferStreamForImportError());\n \n                         chunkData.getBufferStream4ImportError().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjI0Ng==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296246", "bodyText": "Not if you want Milliseconds, you can just pass the unit into java.time\nTimeUnit.NANOSECONDS.toMillis(VALUE);", "author": "prb112", "createdAt": "2020-03-18T12:04:29Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -44,7 +49,7 @@ public void afterJob() {\n             if (jobExecution.getEndTime() != null) {\n                 totalJobExecutionMilliSeconds += (jobExecution.getEndTime().getTime() - jobExecution.getStartTime().getTime());\n             } else {\n-                totalJobExecutionMilliSeconds += (currentExecutionEndTimeInMS - jobExecution.getStartTime().getTime());", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3ODY4Mg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394378682", "bodyText": "nice, I like this!!", "author": "albertwang-ibm", "createdAt": "2020-03-18T14:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjI0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDUzMg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450532", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e2adfd5626995d80e358dea026221d0a769a3379", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\nindex 26f838ba33..30d4919bbc 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\n\n@@ -49,7 +48,7 @@ public class ImportJobListener implements JobListener {\n             if (jobExecution.getEndTime() != null) {\n                 totalJobExecutionMilliSeconds += (jobExecution.getEndTime().getTime() - jobExecution.getStartTime().getTime());\n             } else {\n-                totalJobExecutionMilliSeconds += (currentExecutionEndTimeInNanoSecond - currentExecutionStartTimeInNanoSecond)/Constants.NANOMS;\n+                totalJobExecutionMilliSeconds += (currentExecutionEndTimeInMS - currentExecutionStartTimeInMS);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjUxNw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296517", "bodyText": "best to use TimeUnit, you get someone else to do these conversions.", "author": "prb112", "createdAt": "2020-03-18T12:04:59Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -29,9 +35,15 @@\n  */\n public class Main {\n     private static final Logger logger = Logger.getLogger(Main.class.getName());\n+    /**\n+     * The number of nanoseconds in a second.\n+     */\n+    private static final double NANOS = 1000 * Constants.NANOMS;", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3ODk1NA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394378954", "bodyText": "nice, I like this!", "author": "albertwang-ibm", "createdAt": "2020-03-18T14:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDY0MQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450641", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "e2adfd5626995d80e358dea026221d0a769a3379", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..0c1e06274a 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -35,11 +36,6 @@ import com.ibm.fhir.model.resource.Resource;\n  */\n public class Main {\n     private static final Logger logger = Logger.getLogger(Main.class.getName());\n-    /**\n-     * The number of nanoseconds in a second.\n-     */\n-    private static final double NANOS = 1000 * Constants.NANOMS;\n-\n     /**\n      * The number of files to break into.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjYzNw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296637", "bodyText": "please change 2 to To", "author": "prb112", "createdAt": "2020-03-18T12:05:13Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -68,25 +80,45 @@\n      */\n     private static String cosFile2Break;", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDgxNQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450815", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:49:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NjYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "e2adfd5626995d80e358dea026221d0a769a3379", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..0c1e06274a 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -78,7 +74,7 @@ public class Main {\n     /**\n      * The COS file to break.\n      */\n-    private static String cosFile2Break;\n+    private static String cosFileToBreak;\n \n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5Njc5Nw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394296797", "bodyText": "Change to To", "author": "prb112", "createdAt": "2020-03-18T12:05:31Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -135,7 +167,7 @@ public void parseArgs(String[] args) {\n                     cosCredentialIbm = args[i];\n                 }\n                 else {\n-                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm argument at posn: \" + i);\n+                    throw new IllegalArgumentException(\"Missing value for --cosCredentialIbm(Y/N) argument at posn: \" + i);\n                 }\n                 break;\n             case \"--cosFile2Break\":", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDg5NA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394450894", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5Njc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e2adfd5626995d80e358dea026221d0a769a3379", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..0c1e06274a 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -162,7 +158,7 @@ public class Main {\n                     throw new IllegalArgumentException(\"Missing value for --cosBucketName argument at posn: \" + i);\n                 }\n                 break;\n-            case \"--cosCredentialIbm\":\n+            case \"--coscredentialibm\":\n                 if (++i < args.length) {\n                     cosCredentialIbm = args[i];\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzAxNQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297015", "bodyText": "best to leave these parameters as lower case and not mixed case", "author": "prb112", "createdAt": "2020-03-18T12:05:54Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -154,6 +194,14 @@ public void parseArgs(String[] args) {\n                     throw new IllegalArgumentException(\"Missing value for --numberOfFiles argument at posn: \" + i);\n                 }\n                 break;\n+            case \"--numberOfTotalResources\":", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM4MzczNg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394383736", "bodyText": "make sense!", "author": "albertwang-ibm", "createdAt": "2020-03-18T14:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTAxMA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451010", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2adfd5626995d80e358dea026221d0a769a3379", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..0c1e06274a 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -186,7 +182,7 @@ public class Main {\n                     throw new IllegalArgumentException(\"Missing value for --segBySize(Y/N) argument at posn: \" + i);\n                 }\n                 break;\n-            case \"--numberOfFiles\":\n+            case \"--numberoffiles\":\n                 if (++i < args.length) {\n                     numberOfFiles = Integer.parseInt(args[i]);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzA5OQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297099", "bodyText": "change 4 to for", "author": "prb112", "createdAt": "2020-03-18T12:06:07Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTEwNw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451107", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0358e64c27f4abe93cc358814a724a0543d13987", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..4210e46377 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -227,7 +227,7 @@ public class Main {\n         int lineRed = 0;\n         int segNum = 0;\n         long segSize = 0;\n-        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+        HashSet<String> UniqueResourceIds= new HashSet<>();\n \n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzE5OQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297199", "bodyText": "use the diamond operator\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashSet<String> UniqueResourceIds= new HashSet<String>();\n          \n          \n            \n                    HashSet<String> UniqueResourceIds= new HashSet<>();", "author": "prb112", "createdAt": "2020-03-18T12:06:20Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzI4OA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297288", "bodyText": "mixed usage with line 232", "author": "prb112", "createdAt": "2020-03-18T12:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0358e64c27f4abe93cc358814a724a0543d13987", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..4210e46377 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -227,7 +227,7 @@ public class Main {\n         int lineRed = 0;\n         int segNum = 0;\n         long segSize = 0;\n-        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+        HashSet<String> UniqueResourceIds= new HashSet<>();\n \n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394297712", "bodyText": "If you are splitting resources into separate files, how do you ensure that the same resource or ID is in the same file?", "author": "prb112", "createdAt": "2020-03-18T12:07:20Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0NTU5MA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394345590", "bodyText": "the tool doesn't really keep all the duplicated resources, it only keep one of them for now.\ne.g, in Organization, they are more than 2K lines with the exactly the same contents, the tool will only keep one of them.", "author": "albertwang-ibm", "createdAt": "2020-03-18T13:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0OTUxNw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394349517", "bodyText": "right - it's not a duplicate resource though... it's a historic resource.\nIs the tool removing the historic resource? e.g.\nif there are two versions, it'll only insert version 2?", "author": "prb112", "createdAt": "2020-03-18T13:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNDI0Ng==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394414246", "bodyText": "In the organization data set, there is no version info in the resource, they are simply duplicated lines of the same contents ... the tool simply keep the first one it runs into and drops all the others.  I thought about making the tool better/smarter to be able to move all duplicated/historic resources into the same file, but because the data set could be huge which could cause huge memory consumption to track which Id is store in which file, so this is why I just made the tool simply for now drop the others resources with the same ids ...", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxODE4OQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394418189", "bodyText": "but It's not bad idea to enhance this tool in the future to make it a real fhir data pre-processing tool, e.g, not only put the resources with the same id into the same file, but also can validate the resource etc ...", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMjMwNg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394512306", "bodyText": "Is this tool only used in testing?  perhaps move it to src/test/\nnot the src/main", "author": "prb112", "createdAt": "2020-03-18T17:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxNjEyOQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394516129", "bodyText": "the tool itself is not for any test purpose, I used it mainly as an utility tool to break the huge one piece COS file into multiple to allow them to be able to processed by multiple partitions in parallel ...", "author": "albertwang-ibm", "createdAt": "2020-03-18T17:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NzcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "0358e64c27f4abe93cc358814a724a0543d13987", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..4210e46377 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -227,7 +227,7 @@ public class Main {\n         int lineRed = 0;\n         int segNum = 0;\n         long segSize = 0;\n-        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+        HashSet<String> UniqueResourceIds= new HashSet<>();\n \n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODAwOA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298008", "bodyText": "should still wrap this in a try-catch-close", "author": "prb112", "createdAt": "2020-03-18T12:07:50Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTcyNw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451727", "bodyText": "makes sense even though closing a ByteArrayOutputStream does nothing.", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTc5NA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451794", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "4898f7808d673b85073d8f2ed327280f6e37f6a9", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..0f07bdbc93 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -319,7 +319,7 @@ public class Main {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n-            long num4Seg;\n+            long numForSeg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODIwNg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, num4Seg, isSegBySize)) {\n          \n          \n            \n                            if (m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, numForSeg, isSegBySize)) {", "author": "prb112", "createdAt": "2020-03-18T12:08:10Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n-            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            if (isSegBySize) {\n+                long totalSize = item.getObjectMetadata().getContentLength();\n+                num4Seg = totalSize / numberOfFiles;\n+            } else {\n+                if (numberOfTotalResources > numberOfFiles) {\n+                    num4Seg = numberOfTotalResources/numberOfFiles;\n+                    isGetDistinceResources = true;\n+                } else {\n+                    try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                            BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                           totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n+                       } catch (Exception ioe) {\n+                           throw ioe;\n+                       }\n+                    num4Seg = totalNum/numberOfFiles;\n+                }\n+            }\n \n             item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n             try (S3ObjectInputStream s3InStream = item.getObjectContent();\n                     BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, numOfRes4Seg);\n+                if (m.writeFhirResourceFromBufferReader(resReader, cosClient, bufferStream, num4Seg, isSegBySize)) {", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4898f7808d673b85073d8f2ed327280f6e37f6a9", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..0f07bdbc93 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -319,7 +319,7 @@ public class Main {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n-            long num4Seg;\n+            long numForSeg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODUyMQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298521", "bodyText": "line spacing looks strange, please check spacing", "author": "prb112", "createdAt": "2020-03-18T12:08:44Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n-            try (S3ObjectInputStream s3InStream = item.getObjectContent();\n-                    BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n-                   totalNum = m.getFhirResourceNumberFromBufferReader(resReader);\n-               } catch (Exception ioe) {\n-                   throw ioe;\n-               }\n-\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n-            int numOfRes4Seg = totalNum/numberOfFiles;\n+\n+            if (isSegBySize) {\n+                long totalSize = item.getObjectMetadata().getContentLength();\n+                num4Seg = totalSize / numberOfFiles;\n+            } else {\n+                if (numberOfTotalResources > numberOfFiles) {\n+                    num4Seg = numberOfTotalResources/numberOfFiles;\n+                    isGetDistinceResources = true;\n+                } else {\n+                    try (S3ObjectInputStream s3InStream = item.getObjectContent();\n+                            BufferedReader resReader = new BufferedReader(new InputStreamReader(s3InStream))) {\n+                           totalNum = m.getFhirResourceNumberFromBufferReader(resReader);", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTk2NQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394451965", "bodyText": "good catch, done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4898f7808d673b85073d8f2ed327280f6e37f6a9", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..0f07bdbc93 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -319,7 +319,7 @@ public class Main {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n-            long num4Seg;\n+            long numForSeg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODY0OQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298649", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        long num4Seg;\n          \n          \n            \n                        long numForSeg;", "author": "prb112", "createdAt": "2020-03-18T12:09:01Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -240,21 +319,34 @@ public static void main(String[] args) {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n+            long num4Seg;", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4898f7808d673b85073d8f2ed327280f6e37f6a9", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..0f07bdbc93 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -319,7 +319,7 @@ public class Main {\n                 throw new Exception(\"Failed to get CosClient!\");\n             }\n \n-            long num4Seg;\n+            long numForSeg;\n             S3Object item = cosClient.getObject(new GetObjectRequest(cosBucketName, cosFile2Break));\n             ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODczMA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298730", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    isMore2Read = false;\n          \n          \n            \n                                    isMoreToRead = false;", "author": "prb112", "createdAt": "2020-03-18T12:09:12Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;\n+        boolean isAbortStream = false;\n+        int totalRead = 0;\n         while (isMore2Read) {\n-                String resLine = resReader.readLine();\n-                lineRed++;\n-                if (resLine == null) {\n-                    isMore2Read = false;\n-                } else {\n+            String resLine = resReader.readLine();\n+            lineRed++;\n+            totalRead++;\n+            if (resLine == null) {\n+                isMore2Read = false;\n+            } else {\n+                boolean isToAdd = true;\n+                if (!isSegBySize && numberOfTotalResources > 1000) {\n+                    try {\n+                        Resource res = FHIRParser.parser(Format.JSON).parse(new StringReader(resLine));\n+                        isToAdd = UniqueResourceIds.add(res.getId());\n+                    } catch (FHIRParserException ex) {\n+                        isToAdd = false;\n+                    }\n+                }\n+\n+                if (isToAdd) {\n                     bufferStream.write(resLine.getBytes());\n                     bufferStream.write(Constants.NDJSON_LINESEPERATOR);\n+                    segSize += (resLine.getBytes().length + Constants.NDJSON_LINESEPERATOR.length);\n+                } else {\n+                    lineRed--;\n                 }\n+            }\n \n-                if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n-                        || (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg)\n-                        || !isMore2Read) {\n-                    String segName = cosFile2Break + \"_seg\" + segNum;\n-                    if (uploadId == null) {\n-                        uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n-                    }\n+            if (bufferStream.size() > Constants.COS_PART_MINIMALSIZE\n+                    || (segNum < numberOfFiles - 1 && ((isSegBySize && segSize >= num4Seg) || (!isSegBySize && lineRed == num4Seg)))\n+                    || (segNum == numberOfFiles -1 && isGetDistinceResources && lineRed == num4Seg)\n+                    || !isMore2Read) {\n+                String segName = cosFile2Break + \"_seg\" + segNum;\n+                if (uploadId == null) {\n+                    uploadId = BulkDataUtils.startPartUpload(cosClient, cosBucketName, segName, true);\n+                }\n \n-                    if (bufferStream.size() > 0) {\n-                        dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n-                                new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n-                        bufferStream.reset();\n-                    }\n+                if (bufferStream.size() > 0) {\n+                    dataPackTags.add(BulkDataUtils.multiPartUpload(cosClient, cosBucketName, segName,uploadId,\n+                            new ByteArrayInputStream(bufferStream.toByteArray()), bufferStream.size(), partNum++));\n+                    bufferStream.reset();\n+                }\n \n-                    if (segNum < numberOfFiles - 1 && lineRed == numOfRes4Seg\n-                            || !isMore2Read) {\n-                        BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n-                        logger.info(\"Finished writting for \" + segName);\n-                        lineRed = 0;\n-                        segNum++;\n-                        uploadId = null;\n-                        partNum = 1;\n-                        dataPackTags.clear();\n+                if ((segNum < numberOfFiles - 1 && ((isSegBySize && segSize >= num4Seg) || (!isSegBySize && lineRed == num4Seg)))\n+                        || (segNum == numberOfFiles -1 && isGetDistinceResources && lineRed == num4Seg)\n+                        || !isMore2Read) {\n+                    BulkDataUtils.finishMultiPartUpload(cosClient, cosBucketName, segName, uploadId, dataPackTags);\n+                    logger.info(\"Finished writting for \" + segName);\n+                    lineRed = 0;\n+                    segNum++;\n+                    if (segNum == numberOfFiles && isMore2Read) {\n+                        isMore2Read = false;", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0358e64c27f4abe93cc358814a724a0543d13987", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..4210e46377 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -227,7 +227,7 @@ public class Main {\n         int lineRed = 0;\n         int segNum = 0;\n         long segSize = 0;\n-        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+        HashSet<String> UniqueResourceIds= new HashSet<>();\n \n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5ODg3Mw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394298873", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean isMore2Read = true;\n          \n          \n            \n                    boolean isMoreToRead = true;", "author": "prb112", "createdAt": "2020-03-18T12:09:28Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java", "diffHunk": "@@ -175,50 +223,81 @@ private int getFhirResourceNumberFromBufferReader(BufferedReader resReader) thro\n \n \n \n-    private void writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, int numOfRes4Seg) throws Exception {\n+    private boolean writeFhirResourceFromBufferReader(BufferedReader resReader,  AmazonS3 cosClient, ByteArrayOutputStream bufferStream, long num4Seg, boolean isSegBySize) throws Exception {\n         int lineRed = 0;\n         int segNum = 0;\n+        long segSize = 0;\n+        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+\n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n         int partNum = 1;\n         boolean isMore2Read = true;", "originalCommit": "99ddd3d352edf1116edc4ad47735e0aa9d8c13a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0358e64c27f4abe93cc358814a724a0543d13987", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\nindex 44cdebb5f7..4210e46377 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\n@@ -227,7 +227,7 @@ public class Main {\n         int lineRed = 0;\n         int segNum = 0;\n         long segSize = 0;\n-        HashSet<String> UniqueResourceIds= new HashSet<String>();\n+        HashSet<String> UniqueResourceIds= new HashSet<>();\n \n         List<PartETag> dataPackTags = new ArrayList<>();\n         String uploadId = null;\n"}}, {"oid": "6903f56d22915e8f0647b8c8ff1ad705ca1ca611", "url": "https://github.com/IBM/FHIR/commit/6903f56d22915e8f0647b8c8ff1ad705ca1ca611", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:20:32Z", "type": "commit"}, {"oid": "4edd7ffe0c1e9c9f51bdbed8c002ad3100f50369", "url": "https://github.com/IBM/FHIR/commit/4edd7ffe0c1e9c9f51bdbed8c002ad3100f50369", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:21:18Z", "type": "commit"}, {"oid": "2e6ef881c4e7bd8b7f9773c66e8ea65a7578fb42", "url": "https://github.com/IBM/FHIR/commit/2e6ef881c4e7bd8b7f9773c66e8ea65a7578fb42", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkcommon/BulkDataUtils.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:21:31Z", "type": "commit"}, {"oid": "66282d70ee249ed14c7d64ae3d0aaaa7cf76cacf", "url": "https://github.com/IBM/FHIR/commit/66282d70ee249ed14c7d64ae3d0aaaa7cf76cacf", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:23:08Z", "type": "commit"}, {"oid": "4b9243febd91c4d4881710545ab849c27529dcb1", "url": "https://github.com/IBM/FHIR/commit/4b9243febd91c4d4881710545ab849c27529dcb1", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:24:13Z", "type": "commit"}, {"oid": "a8c3610113b097a80487849bbfbe0129275994f6", "url": "https://github.com/IBM/FHIR/commit/a8c3610113b097a80487849bbfbe0129275994f6", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:24:37Z", "type": "commit"}, {"oid": "0358e64c27f4abe93cc358814a724a0543d13987", "url": "https://github.com/IBM/FHIR/commit/0358e64c27f4abe93cc358814a724a0543d13987", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:26:44Z", "type": "commit"}, {"oid": "60a542458c50f241095c1687e016bd0969d4957f", "url": "https://github.com/IBM/FHIR/commit/60a542458c50f241095c1687e016bd0969d4957f", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:30:47Z", "type": "commit"}, {"oid": "a7a7b9e9cb86e97c2e4682db3a797a586e17d64a", "url": "https://github.com/IBM/FHIR/commit/a7a7b9e9cb86e97c2e4682db3a797a586e17d64a", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:31:01Z", "type": "commit"}, {"oid": "4898f7808d673b85073d8f2ed327280f6e37f6a9", "url": "https://github.com/IBM/FHIR/commit/4898f7808d673b85073d8f2ed327280f6e37f6a9", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:31:16Z", "type": "commit"}, {"oid": "f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d", "url": "https://github.com/IBM/FHIR/commit/f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulktools/Main.java\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T13:31:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NTc1OQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394365759", "bodyText": "line 141, please change objResJasonList to objResJsonList", "author": "prb112", "createdAt": "2020-03-18T13:58:33Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -143,6 +156,9 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             for (Resource fhirResource : fhirResourceList) {", "originalCommit": "f7d33008ccbe9720cdb770d9d5e0a44d3d9a505d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NDg5Ng==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394454896", "bodyText": "ha, good catch, typical typo error! maybe I did thought about Jason at that time point. :)", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NTc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NDk3MA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394454970", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T15:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2NTc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2adfd5626995d80e358dea026221d0a769a3379", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex e6abede93a..8811b999d4 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -151,21 +152,20 @@ public class ChunkWriter extends AbstractItemWriter {\n         // framework at this time point.\n         txn.enroll();\n         for (Object objResJasonList : arg0) {\n+            @SuppressWarnings(\"unchecked\")\n             List<Resource> fhirResourceList = (List<Resource>) objResJasonList;\n \n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n-                    if (isValidtionOn) {\n+                    if (isValidationOn) {\n                         BulkDataUtils.validateInput(fhirResource);\n                     }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n-                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n-                        if (operationOutcome != null) {\n-                            FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStream4Import());\n-                            chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n-                        }\n+                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES && operationOutcome != null) {\n+                        FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n+                        chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n                 } catch (FHIRValidationException|FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n"}}, {"oid": "e2adfd5626995d80e358dea026221d0a769a3379", "url": "https://github.com/IBM/FHIR/commit/e2adfd5626995d80e358dea026221d0a769a3379", "message": "issue #786 #787 #807 changes per review comments\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-18T15:48:26Z", "type": "commit"}, {"oid": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "url": "https://github.com/IBM/FHIR/commit/5508aaf04552708d6dfa13237b83eadff19c9a2c", "message": "issue #786 fix a typo error\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-18T15:54:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394487825", "bodyText": "this is used", "author": "prb112", "createdAt": "2020-03-18T16:40:19Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -107,13 +108,26 @@\n     String importPartitionResourceType;\n \n \n+    /**\n+     * If validate FHIR resources.\n+     */\n+    @Inject\n+    @BatchProperty(name = Constants.IMPORT_FHIR_IS_VALIDATION_ON)\n+    String fhirValidation;\n+\n+\n     public ChunkWriter() {\n         super();\n     }\n \n+    // This is for the warning triggered by IMPORT_IS_COLLECT_OPERATIONOUTCOMES which controls if upload OperationOutcomes to COS/S3.\n+    @SuppressWarnings(\"unused\")", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5MDY2Ng==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394490666", "bodyText": "", "author": "albertwang-ibm", "createdAt": "2020-03-18T16:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5MTAzNw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394491037", "bodyText": "if remove the suppress, we will get this ^^^^^", "author": "albertwang-ibm", "createdAt": "2020-03-18T16:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzQ1NA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394513454", "bodyText": "I think that's the right behavior to display.\nby hiding it, we'll not get the warnings.", "author": "prb112", "createdAt": "2020-03-18T17:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NjY4MQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394546681", "bodyText": "OK, I can remove the suppress", "author": "albertwang-ibm", "createdAt": "2020-03-18T18:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "880f9c0f4994b33fffd946297c5f2bf753e2bf4d", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..e7fcada547 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -121,7 +121,6 @@ public class ChunkWriter extends AbstractItemWriter {\n     }\n \n     // This is for the warning triggered by IMPORT_IS_COLLECT_OPERATIONOUTCOMES which controls if upload OperationOutcomes to COS/S3.\n-    @SuppressWarnings(\"unused\")\n     @Override\n     public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         boolean isValidationOn = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5Nzk3MA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394497970", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } catch (FHIRValidationException|FHIROperationException e) {\n          \n          \n            \n                            } catch (FHIRValidationException | FHIROperationException e) {", "author": "prb112", "createdAt": "2020-03-18T16:55:00Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -137,26 +151,34 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n         // This doesn't really start the transaction, because the transaction has already been started by the JavaBatch\n         // framework at this time point.\n         txn.enroll();\n-        for (Object objResJasonList : arg0) {\n-            List<Resource> fhirResourceList = (List<Resource>) objResJasonList;\n+        for (Object objResJsonList : arg0) {\n+            @SuppressWarnings(\"unchecked\")\n+            List<Resource> fhirResourceList = (List<Resource>) objResJsonList;\n \n             for (Resource fhirResource : fhirResourceList) {\n                 try {\n                     processedNum++;\n+                    if (isValidationOn) {\n+                        BulkDataUtils.validateInput(fhirResource);\n+                    }\n                     OperationOutcome operationOutcome = fhirPersistence.update(persistenceContext, fhirResource.getId(), fhirResource).getOutcome();\n                     succeededNum++;\n-                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n-                        if (operationOutcome != null) {\n-                            FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStream4Import());\n-                            chunkData.getBufferStream4Import().write(Constants.NDJSON_LINESEPERATOR);\n-                        }\n+                    if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES && operationOutcome != null) {\n+                        FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n+                        chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n-                } catch (FHIRPersistenceException e) {\n+                } catch (FHIRValidationException|FHIROperationException e) {", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d70f880ad959a84096fdb3a287a2241e313ccd89", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..3a61652e1a 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -167,7 +167,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                         FHIRGenerator.generator(Format.JSON).generate(operationOutcome, chunkData.getBufferStreamForImport());\n                         chunkData.getBufferStreamForImport().write(Constants.NDJSON_LINESEPERATOR);\n                     }\n-                } catch (FHIRValidationException|FHIROperationException e) {\n+                } catch (FHIRValidationException | FHIROperationException e) {\n                     logger.warning(\"Failed to import '\" + fhirResource.getId() + \"' due to error: \" + e.getMessage());\n                     failedNum++;\n                     if (Constants.IMPORT_IS_COLLECT_OPERATIONOUTCOMES) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTE2Nw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499167", "bodyText": "pushImportOperationOutcomes2COS ?\nis this the right log 2 COS??", "author": "prb112", "createdAt": "2020-03-18T16:56:47Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDE2OA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500168", "bodyText": "it is", "author": "prb112", "createdAt": "2020-03-18T16:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..74961846da 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -250,7 +250,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                 logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n-            chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n+            chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);\n             chunkData.getBufferStreamForImportError().reset();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTM2MA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n          \n          \n            \n                        }\n          \n          \n            \n                        chunkData.setPartNumForOperationOutcomes(chunkData.getPartNumForOperationOutcomes() + 1);", "author": "prb112", "createdAt": "2020-03-18T16:57:06Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..74961846da 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -250,7 +250,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                 logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n-            chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n+            chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);\n             chunkData.getBufferStreamForImportError().reset();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTU0MQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499541", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n          \n          \n            \n                                chunkData.getBufferStreamForImport().size(), chunkData.getPartNumForOperationOutcomes()));", "author": "prb112", "createdAt": "2020-03-18T16:57:20Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..74961846da 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -250,7 +250,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                 logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n-            chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n+            chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);\n             chunkData.getBufferStreamForImportError().reset();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTcxMw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499713", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n          \n          \n            \n                        if (chunkData.getUploadIdForFailureOperationOutcomes()  == null) {", "author": "prb112", "createdAt": "2020-03-18T16:57:37Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..74961846da 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -250,7 +250,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                 logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n-            chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n+            chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);\n             chunkData.getBufferStreamForImportError().reset();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTgxNA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499814", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n          \n          \n            \n                            chunkData.setUploadIdForFailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "author": "prb112", "createdAt": "2020-03-18T16:57:47Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..74961846da 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -250,7 +250,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                 logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n-            chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n+            chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);\n             chunkData.getBufferStreamForImportError().reset();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTk4NA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394499984", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),\n          \n          \n            \n                                chunkData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),", "author": "prb112", "createdAt": "2020-03-18T16:57:59Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n-                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n-                    chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n+                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..74961846da 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -250,7 +250,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                 logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n-            chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n+            chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);\n             chunkData.getBufferStreamForImportError().reset();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDM4MQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500381", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n          \n          \n            \n                            logger.fine(\"pushImportOperationOutcomesToCOS: \" + chunkData.getBufferStreamForImport().size()", "author": "prb112", "createdAt": "2020-03-18T16:58:33Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..74961846da 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -250,7 +250,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                 logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n-            chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n+            chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);\n             chunkData.getBufferStreamForImportError().reset();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDU1OA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500558", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n          \n          \n            \n                                cosOperationOutcomesBucketName, chunkData.getUniqueIDForImportFailureOperationOutcomes(),", "author": "prb112", "createdAt": "2020-03-18T16:58:49Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..74961846da 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -250,7 +250,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                 logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n-            chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n+            chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);\n             chunkData.getBufferStreamForImportError().reset();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDcyMg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394500722", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n          \n          \n            \n                        chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);", "author": "prb112", "createdAt": "2020-03-18T16:59:03Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -195,41 +217,41 @@ private void pushImportOperationOutcomes2COS(ImportTransientUserData chunkData)\n         }\n \n         // Upload OperationOutcomes in buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4Import().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImport().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4OperationOutcomes()  == null) {\n                 chunkData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportOperationOutcomes(),\n-                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4Import().toByteArray()),\n-                    chunkData.getBufferStream4Import().size(), chunkData.getPartNum4OperationOutcomes()));\n+                    chunkData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImport().toByteArray()),\n+                    chunkData.getBufferStreamForImport().size(), chunkData.getPartNum4OperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4Import().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImport().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportOperationOutcomes());\n             }\n             chunkData.setPartNum4OperationOutcomes(chunkData.getPartNum4OperationOutcomes() + 1);\n-            chunkData.getBufferStream4Import().reset();\n+            chunkData.getBufferStreamForImport().reset();\n         }\n \n         // Upload OperationOutcomes in failure buffer if it reaches the minimal size for multiple-parts upload.\n-        if (chunkData.getBufferStream4ImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n+        if (chunkData.getBufferStreamForImportError().size() > Constants.COS_PART_MINIMALSIZE) {\n             if (chunkData.getUploadId4FailureOperationOutcomes()  == null) {\n                 chunkData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                         cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(), true));\n             }\n \n             chunkData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                     cosOperationOutcomesBucketName, chunkData.getUniqueID4ImportFailureOperationOutcomes(),\n-                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStream4ImportError().toByteArray()),\n-                    chunkData.getBufferStream4ImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n+                    chunkData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(chunkData.getBufferStreamForImportError().toByteArray()),\n+                    chunkData.getBufferStreamForImportError().size(), chunkData.getPartNum4FailureOperationOutcomes()));\n             if (logger.isLoggable(Level.FINE)) {\n-                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStream4ImportError().size()\n+                logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n             chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\nindex 59e40e4c66..74961846da 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\n\n@@ -250,7 +250,7 @@ public class ChunkWriter extends AbstractItemWriter {\n                 logger.fine(\"pushImportOperationOutcomes2COS: \" + chunkData.getBufferStreamForImportError().size()\n                     + \" bytes were successfully appended to COS object - \" + chunkData.getUniqueID4ImportFailureOperationOutcomes());\n             }\n-            chunkData.setPartNum4FailureOperationOutcomes(chunkData.getPartNum4FailureOperationOutcomes() + 1);\n+            chunkData.setPartNumForFailureOperationOutcomes(chunkData.getPartNumForFailureOperationOutcomes() + 1);\n             chunkData.getBufferStreamForImportError().reset();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTM1NA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501354", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private TimeUnit time = TimeUnit.NANOSECONDS;\n          \n          \n            \n                \n          \n      \n    \n    \n  \n\nNo need to cache this at all.   put it in line on 37", "author": "prb112", "createdAt": "2020-03-18T16:59:57Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -19,6 +20,9 @@\n \n public class ImportJobListener implements JobListener {\n     private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n+    private TimeUnit time = TimeUnit.NANOSECONDS;", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9782ce1e247454a61a01b255793e292ab163933b", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\nindex 30d4919bbc..e58b99b205 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\n\n@@ -20,7 +20,7 @@ import javax.inject.Inject;\n \n public class ImportJobListener implements JobListener {\n     private static final Logger logger = Logger.getLogger(ImportJobListener.class.getName());\n-    private TimeUnit time = TimeUnit.NANOSECONDS;\n+    \n     long currentExecutionStartTimeInMS;\n \n     @Inject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTY3OQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501679", "bodyText": "call TimeUnit directly", "author": "prb112", "createdAt": "2020-03-18T17:00:25Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -85,6 +89,7 @@ public void afterJob() {\n \n     @Override\n     public void beforeJob() {\n+        currentExecutionStartTimeInMS = time.toMillis(System.nanoTime());", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzgwMw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394513803", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-18T17:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f230877045db47879fadcf0198b8d5f76c67662d", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\nindex 30d4919bbc..2a5e10fc07 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\n\n@@ -89,7 +89,7 @@ public class ImportJobListener implements JobListener {\n \n     @Override\n     public void beforeJob() {\n-        currentExecutionStartTimeInMS = time.toMillis(System.nanoTime());\n+        currentExecutionStartTimeInMS = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTgzMA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),\n          \n          \n            \n                                        partitionSummaryData.getUploadIdForOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),", "author": "prb112", "createdAt": "2020-03-18T17:00:37Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4Import().toByteArray()),\n-                            partitionSummaryData.getBufferStream4Import().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n+                            partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a3ae605d75049a9fc51d95a41b9f3745189672f", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex 27e203be3f..aef9f79a59 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -107,7 +107,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n-                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n+                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),\n                             partitionSummaryData.getBufferStreamForImport().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTkxNw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394501917", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n          \n          \n            \n                                partitionSummaryData.getDataPacksForOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,", "author": "prb112", "createdAt": "2020-03-18T17:00:46Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a3ae605d75049a9fc51d95a41b9f3745189672f", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex 27e203be3f..aef9f79a59 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -107,7 +107,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n-                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n+                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),\n                             partitionSummaryData.getBufferStreamForImport().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjA3Ng==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502076", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n          \n          \n            \n                                if (partitionSummaryData.getUploadIdForOperationOutcomes()  == null) {", "author": "prb112", "createdAt": "2020-03-18T17:00:59Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a3ae605d75049a9fc51d95a41b9f3745189672f", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex 27e203be3f..aef9f79a59 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -107,7 +107,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n-                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n+                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),\n                             partitionSummaryData.getBufferStreamForImport().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjIzNw==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502237", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n          \n          \n            \n                                if (partitionSummaryData.getUploadIdForOperationOutcomes()  == null) {", "author": "prb112", "createdAt": "2020-03-18T17:01:15Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a3ae605d75049a9fc51d95a41b9f3745189672f", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex 27e203be3f..aef9f79a59 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -107,7 +107,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n-                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n+                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),\n                             partitionSummaryData.getBufferStreamForImport().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjQyNA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502424", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n          \n          \n            \n                                    partitionSummaryData.setUploadIdForOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "author": "prb112", "createdAt": "2020-03-18T17:01:33Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a3ae605d75049a9fc51d95a41b9f3745189672f", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex 27e203be3f..aef9f79a59 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -107,7 +107,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n-                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n+                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),\n                             partitionSummaryData.getBufferStreamForImport().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjU3OA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502578", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n          \n          \n            \n                                        cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportOperationOutcomes(),", "author": "prb112", "createdAt": "2020-03-18T17:01:48Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -100,22 +100,22 @@ public Serializable collectPartitionData() throws Exception{\n                     }\n                 }\n                 // Upload remaining OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4Import().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImport().size() > 0) {\n                     if (partitionSummaryData.getUploadId4OperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4OperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a3ae605d75049a9fc51d95a41b9f3745189672f", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex 27e203be3f..aef9f79a59 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -107,7 +107,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                     }\n \n                     partitionSummaryData.getDataPacks4OperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n-                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportOperationOutcomes(),\n+                            cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportOperationOutcomes(),\n                             partitionSummaryData.getUploadId4OperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImport().toByteArray()),\n                             partitionSummaryData.getBufferStreamForImport().size(), partitionSummaryData.getPartNum4OperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjc1MA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502750", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n          \n          \n            \n                                        partitionSummaryData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),", "author": "prb112", "createdAt": "2020-03-18T17:02:06Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,22 +124,22 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73164d8c7358eb623d41f0cff56fe5108bf0f42a", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex 27e203be3f..45e7680bba 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -142,7 +142,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                     partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n-                if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n+                if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n                     BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMjkwMg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394502902", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n          \n          \n            \n                                partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNumForFailureOperationOutcomes() + 1);", "author": "prb112", "createdAt": "2020-03-18T17:02:19Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,22 +124,22 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n                     partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73164d8c7358eb623d41f0cff56fe5108bf0f42a", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex 27e203be3f..45e7680bba 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -142,7 +142,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                     partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n-                if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n+                if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n                     BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMzA2NQ==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394503065", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n          \n          \n            \n                            if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {", "author": "prb112", "createdAt": "2020-03-18T17:02:33Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,22 +124,22 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n                     partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n-                    partitionSummaryData.getBufferStream4ImportError().reset();\n+                    partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n                 if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {", "originalCommit": "5508aaf04552708d6dfa13237b83eadff19c9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73164d8c7358eb623d41f0cff56fe5108bf0f42a", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex 27e203be3f..45e7680bba 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -142,7 +142,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                     partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n-                if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n+                if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n                     BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());\n                 }\n"}}, {"oid": "73164d8c7358eb623d41f0cff56fe5108bf0f42a", "url": "https://github.com/IBM/FHIR/commit/73164d8c7358eb623d41f0cff56fe5108bf0f42a", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:06:54Z", "type": "commit"}, {"oid": "57011bf394333ddda183c260d2b864235fb4ad14", "url": "https://github.com/IBM/FHIR/commit/57011bf394333ddda183c260d2b864235fb4ad14", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:07:11Z", "type": "commit"}, {"oid": "add1749e5f541e9e6715ab2137311c3c11e11528", "url": "https://github.com/IBM/FHIR/commit/add1749e5f541e9e6715ab2137311c3c11e11528", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:07:26Z", "type": "commit"}, {"oid": "2a3ae605d75049a9fc51d95a41b9f3745189672f", "url": "https://github.com/IBM/FHIR/commit/2a3ae605d75049a9fc51d95a41b9f3745189672f", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:07:44Z", "type": "commit"}, {"oid": "92d62266aace9e02fbed1f1e4f4de5707cb6aebd", "url": "https://github.com/IBM/FHIR/commit/92d62266aace9e02fbed1f1e4f4de5707cb6aebd", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:08:01Z", "type": "commit"}, {"oid": "2f68824cdee18216fe9881273b5c4abfde11ee64", "url": "https://github.com/IBM/FHIR/commit/2f68824cdee18216fe9881273b5c4abfde11ee64", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:08:52Z", "type": "commit"}, {"oid": "dfeedce97269aca23509faa69a391c98cd779381", "url": "https://github.com/IBM/FHIR/commit/dfeedce97269aca23509faa69a391c98cd779381", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:09:16Z", "type": "commit"}, {"oid": "a3261d0ac6a2bcd16b92c6395f4eb2b900ebd8ac", "url": "https://github.com/IBM/FHIR/commit/a3261d0ac6a2bcd16b92c6395f4eb2b900ebd8ac", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:09:39Z", "type": "commit"}, {"oid": "9782ce1e247454a61a01b255793e292ab163933b", "url": "https://github.com/IBM/FHIR/commit/9782ce1e247454a61a01b255793e292ab163933b", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:10:22Z", "type": "commit"}, {"oid": "a06bfb04c4712b5471672a89a38973a54ba6fb96", "url": "https://github.com/IBM/FHIR/commit/a06bfb04c4712b5471672a89a38973a54ba6fb96", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:10:52Z", "type": "commit"}, {"oid": "a2fdbf4973a256814d49a1edb7797396592b9ec0", "url": "https://github.com/IBM/FHIR/commit/a2fdbf4973a256814d49a1edb7797396592b9ec0", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:11:17Z", "type": "commit"}, {"oid": "31c2d3270775907334e733f6cc92eb27ce11f167", "url": "https://github.com/IBM/FHIR/commit/31c2d3270775907334e733f6cc92eb27ce11f167", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:11:43Z", "type": "commit"}, {"oid": "515bd82233dea4f1f4e02358239606a167aa92b6", "url": "https://github.com/IBM/FHIR/commit/515bd82233dea4f1f4e02358239606a167aa92b6", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:12:04Z", "type": "commit"}, {"oid": "8c79902a33e6f3b4915872ee5eb8778b9c2fa2bb", "url": "https://github.com/IBM/FHIR/commit/8c79902a33e6f3b4915872ee5eb8778b9c2fa2bb", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:12:17Z", "type": "commit"}, {"oid": "d795bda44790839e24ba72aa356814d14a4444c4", "url": "https://github.com/IBM/FHIR/commit/d795bda44790839e24ba72aa356814d14a4444c4", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:12:34Z", "type": "commit"}, {"oid": "6622617b0b8dd0a1e9a492f9795967bb028f099f", "url": "https://github.com/IBM/FHIR/commit/6622617b0b8dd0a1e9a492f9795967bb028f099f", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:12:48Z", "type": "commit"}, {"oid": "d70f880ad959a84096fdb3a287a2241e313ccd89", "url": "https://github.com/IBM/FHIR/commit/d70f880ad959a84096fdb3a287a2241e313ccd89", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:13:37Z", "type": "commit"}, {"oid": "f230877045db47879fadcf0198b8d5f76c67662d", "url": "https://github.com/IBM/FHIR/commit/f230877045db47879fadcf0198b8d5f76c67662d", "message": "issue #786 minor changes\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-18T17:18:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzg2NA==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394513864", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n          \n          \n            \n                                BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportFailureOperationOutcomes(),", "author": "prb112", "createdAt": "2020-03-18T17:19:22Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,25 +124,25 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n-                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n-                    partitionSummaryData.getBufferStream4ImportError().reset();\n+                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNumForFailureOperationOutcomes() + 1);\n+                    partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n-                if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n+                if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n                     BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),", "originalCommit": "d70f880ad959a84096fdb3a287a2241e313ccd89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c51e2651bdf08b815653dc2f19bd321cafe71130", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex d9db04469f..f72da5bbe5 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -143,7 +143,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                 }\n                 // Finish uploading failure OperationOutcomes.\n                 if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n-                    BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n+                    BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxNDAzMg==", "url": "https://github.com/IBM/FHIR/pull/803#discussion_r394514032", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());\n          \n          \n            \n                                        partitionSummaryData.getUploadIdForFailureOperationOutcomes(), partitionSummaryData.getDataPacksForFailureOperationOutcomes());", "author": "prb112", "createdAt": "2020-03-18T17:19:36Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java", "diffHunk": "@@ -124,25 +124,25 @@ public Serializable collectPartitionData() throws Exception{\n                 }\n \n                 // Upload remaining failure OperationOutcomes.\n-                if (partitionSummaryData.getBufferStream4ImportError().size() > 0) {\n+                if (partitionSummaryData.getBufferStreamForImportError().size() > 0) {\n                     if (partitionSummaryData.getUploadId4FailureOperationOutcomes()  == null) {\n                         partitionSummaryData.setUploadId4FailureOperationOutcomes(BulkDataUtils.startPartUpload(cosClient,\n                                 cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(), true));\n                     }\n \n                     partitionSummaryData.getDataPacks4FailureOperationOutcomes().add(BulkDataUtils.multiPartUpload(cosClient,\n                             cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n-                            partitionSummaryData.getUploadId4FailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStream4ImportError().toByteArray()),\n-                            partitionSummaryData.getBufferStream4ImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n+                            partitionSummaryData.getUploadIdForFailureOperationOutcomes(), new ByteArrayInputStream(partitionSummaryData.getBufferStreamForImportError().toByteArray()),\n+                            partitionSummaryData.getBufferStreamForImportError().size(), partitionSummaryData.getPartNum4FailureOperationOutcomes()));\n                     if (logger.isLoggable(Level.FINE)) {\n-                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStream4ImportError().size()\n+                        logger.fine(\"pushImportOperationOutcomes2COS: \" + partitionSummaryData.getBufferStreamForImportError().size()\n                             + \" bytes were successfully appended to COS object - \" + partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes());\n                     }\n-                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNum4FailureOperationOutcomes() + 1);\n-                    partitionSummaryData.getBufferStream4ImportError().reset();\n+                    partitionSummaryData.setPartNum4FailureOperationOutcomes(partitionSummaryData.getPartNumForFailureOperationOutcomes() + 1);\n+                    partitionSummaryData.getBufferStreamForImportError().reset();\n                 }\n                 // Finish uploading failure OperationOutcomes.\n-                if (partitionSummaryData.getUploadId4FailureOperationOutcomes() != null) {\n+                if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n                     BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());", "originalCommit": "d70f880ad959a84096fdb3a287a2241e313ccd89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c51e2651bdf08b815653dc2f19bd321cafe71130", "chunk": "diff --git a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\nindex d9db04469f..f72da5bbe5 100644\n--- a/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n+++ b/fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\n\n@@ -143,7 +143,7 @@ public class ImportPartitionCollector implements PartitionCollector {\n                 }\n                 // Finish uploading failure OperationOutcomes.\n                 if (partitionSummaryData.getUploadIdForFailureOperationOutcomes() != null) {\n-                    BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueID4ImportFailureOperationOutcomes(),\n+                    BulkDataUtils.finishMultiPartUpload(cosClient, cosOperationOutcomesBucketName, partitionSummaryData.getUniqueIDForImportFailureOperationOutcomes(),\n                             partitionSummaryData.getUploadId4FailureOperationOutcomes(), partitionSummaryData.getDataPacks4FailureOperationOutcomes());\n                 }\n             }\n"}}, {"oid": "c51e2651bdf08b815653dc2f19bd321cafe71130", "url": "https://github.com/IBM/FHIR/commit/c51e2651bdf08b815653dc2f19bd321cafe71130", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:23:27Z", "type": "commit"}, {"oid": "5ddbc23b4c416b3fe5041a434f332f4d6a44758a", "url": "https://github.com/IBM/FHIR/commit/5ddbc23b4c416b3fe5041a434f332f4d6a44758a", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportPartitionCollector.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-18T17:23:38Z", "type": "commit"}, {"oid": "f8048fdfcef1c77b5d01882517e10b8df0f222f2", "url": "https://github.com/IBM/FHIR/commit/f8048fdfcef1c77b5d01882517e10b8df0f222f2", "message": "issue #786 #787 #807 change '4' to 'For' for functions and variables\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-18T17:52:32Z", "type": "commit"}, {"oid": "880f9c0f4994b33fffd946297c5f2bf753e2bf4d", "url": "https://github.com/IBM/FHIR/commit/880f9c0f4994b33fffd946297c5f2bf753e2bf4d", "message": "issue #786 minor change\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-18T18:14:13Z", "type": "commit"}]}