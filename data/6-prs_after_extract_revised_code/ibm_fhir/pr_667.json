{"pr_number": 667, "pr_title": "issue #665 #638 #672 null checks for Cadf generator & Enhanced bulkimport", "pr_createdAt": "2020-02-03T14:15:32Z", "pr_url": "https://github.com/IBM/FHIR/pull/667", "timeline": [{"oid": "bb1296ed93d9422076ba55bbacf72a829f2bd939", "url": "https://github.com/IBM/FHIR/commit/bb1296ed93d9422076ba55bbacf72a829f2bd939", "message": "issue #665 add null checks to Cadf generator\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-03T14:14:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTEzNQ==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375419135", "bodyText": "maybe some javadoc to explain the behavior when null is passed?", "author": "lmsurpre", "createdAt": "2020-02-05T18:06:38Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfResource.java", "diffHunk": "@@ -377,6 +377,9 @@ public static String generate(CadfResource obj)\n         }\n \n         public static void generate(CadfResource obj, JsonGenerator generator) throws IOException {", "originalCommit": "bb1296ed93d9422076ba55bbacf72a829f2bd939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDg2Ng==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378014866", "bodyText": "added comment", "author": "albertwang-ibm", "createdAt": "2020-02-12T02:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfResource.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfResource.java\nindex 8c7a8e203e..5d19ddef8f 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfResource.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfResource.java\n\n@@ -377,6 +377,7 @@ public final class CadfResource {\n         }\n \n         public static void generate(CadfResource obj, JsonGenerator generator) throws IOException {\n+            // If the CADF resource, e.g, observer, is null, then simply skip it.\n             if (obj == null) {\n                 return;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTI1Nw==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375419257", "bodyText": "maybe some javadoc to explain the behavior when null is passed?", "author": "lmsurpre", "createdAt": "2020-02-05T18:06:52Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReporterStep.java", "diffHunk": "@@ -281,6 +281,9 @@ public static String generate(CadfReporterStep obj)\n \n         public static void generate(CadfReporterStep obj, JsonGenerator generator)", "originalCommit": "bb1296ed93d9422076ba55bbacf72a829f2bd939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDkyMQ==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378014921", "bodyText": "added comment", "author": "albertwang-ibm", "createdAt": "2020-02-12T02:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReporterStep.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReporterStep.java\nindex 0f75fdd2f2..91eac95345 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReporterStep.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReporterStep.java\n\n@@ -281,6 +281,7 @@ public final class CadfReporterStep {\n \n         public static void generate(CadfReporterStep obj, JsonGenerator generator)\n                 throws IOException {\n+            // If the CADF reporter step is null, then simply skip it.\n             if (obj == null) {\n                 return;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTMzOQ==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375419339", "bodyText": "maybe some javadoc to explain the behavior when null is passed?", "author": "lmsurpre", "createdAt": "2020-02-05T18:07:03Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReason.java", "diffHunk": "@@ -138,6 +138,9 @@ public static String generate(CadfReason obj)\n \n         public static void generate(CadfReason obj, JsonGenerator generator)", "originalCommit": "bb1296ed93d9422076ba55bbacf72a829f2bd939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDk2Mg==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378014962", "bodyText": "added comments", "author": "albertwang-ibm", "createdAt": "2020-02-12T02:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReason.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReason.java\nindex 8abc629b11..67b7493d36 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReason.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfReason.java\n\n@@ -138,6 +138,7 @@ public final class CadfReason {\n \n         public static void generate(CadfReason obj, JsonGenerator generator)\n                 throws IOException {\n+            // If the CADF reason is null, then simply skip it.\n             if (obj == null) {\n                 return;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjE0Mg==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375422142", "bodyText": "Can the CadfEvent (obj) really contain nulls in its repeating members?", "author": "lmsurpre", "createdAt": "2020-02-05T18:12:33Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfEvent.java", "diffHunk": "@@ -765,50 +765,64 @@ public static void generate(CadfEvent obj, JsonGenerator generator)\n             if (obj.getTags() != null) {\n                 generator.writeStartArray(\"tags\");\n                 for (String tag : obj.getTags()) {\n-                    generator.write(tag);\n+                    if (tag != null) {", "originalCommit": "bb1296ed93d9422076ba55bbacf72a829f2bd939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxMzk1Mw==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378013953", "bodyText": "obj.getTags is a list, so technically it can.", "author": "albertwang-ibm", "createdAt": "2020-02-12T02:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjE0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjc0MQ==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r375422741", "bodyText": "maybe some javadoc to explain the behavior when null is passed?", "author": "lmsurpre", "createdAt": "2020-02-05T18:13:45Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "diffHunk": "@@ -136,6 +136,9 @@ public static String generate(CadfAttachment obj)\n \n         public static void generate(CadfAttachment obj, JsonGenerator generator)", "originalCommit": "bb1296ed93d9422076ba55bbacf72a829f2bd939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDM4MQ==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378014381", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-02-12T02:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "chunk": "diff --git a/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java b/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java\nindex f54c0115a9..d7caec44ac 100644\n--- a/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java\n+++ b/fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java\n\n@@ -136,6 +136,7 @@ public class CadfAttachment {\n \n         public static void generate(CadfAttachment obj, JsonGenerator generator)\n                 throws IOException {\n+            // If the CADF attachment is null, then simply skip it.\n             if (obj == null) {\n                 return;\n             }\n"}}, {"oid": "3b4db3efbff0e18bc0b83e10a66e0f6eb56e91aa", "url": "https://github.com/IBM/FHIR/commit/3b4db3efbff0e18bc0b83e10a66e0f6eb56e91aa", "message": "issue #638 initial code drop with partition support\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-06T02:03:47Z", "type": "commit"}, {"oid": "aca952691135cafa1bad385ea10d6d6b23ea24ba", "url": "https://github.com/IBM/FHIR/commit/aca952691135cafa1bad385ea10d6d6b23ea24ba", "message": "Merge pull request #682 from IBM/issue-638\n\nsync with master", "committedDate": "2020-02-06T02:07:41Z", "type": "commit"}, {"oid": "52f0afca29589fec739bbf7d0e85b8c4482fa969", "url": "https://github.com/IBM/FHIR/commit/52f0afca29589fec739bbf7d0e85b8c4482fa969", "message": "issue #638 multiple types of data sources support for import\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-06T23:35:42Z", "type": "commit"}, {"oid": "45b7e7ebf6d82bd3f6a9835f05e0c6e60184f965", "url": "https://github.com/IBM/FHIR/commit/45b7e7ebf6d82bd3f6a9835f05e0c6e60184f965", "message": "issue #638 refactor bulkdatautil.java\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-07T15:33:07Z", "type": "commit"}, {"oid": "82f5332cac7df066049d72df34f306ef6e7a17f2", "url": "https://github.com/IBM/FHIR/commit/82f5332cac7df066049d72df34f306ef6e7a17f2", "message": "issue #672 #638 Import Operationoutcomes and performance metrics\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-11T17:58:15Z", "type": "commit"}, {"oid": "7d366010be8aa7c1e8a975b84ab0c7e065869118", "url": "https://github.com/IBM/FHIR/commit/7d366010be8aa7c1e8a975b84ab0c7e065869118", "message": "issue #638 refactor codes\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-11T19:41:16Z", "type": "commit"}, {"oid": "2d0f6ea8aa44f8696a19c2a8a0928f3c1ed9ca73", "url": "https://github.com/IBM/FHIR/commit/2d0f6ea8aa44f8696a19c2a8a0928f3c1ed9ca73", "message": "issue #638 update import batch size\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-11T19:46:02Z", "type": "commit"}, {"oid": "d799a447a0a0775bbcf120a34108adee1039b5f3", "url": "https://github.com/IBM/FHIR/commit/d799a447a0a0775bbcf120a34108adee1039b5f3", "message": "issue #638 enable publicaccess to operationoutcomes\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-11T20:55:54Z", "type": "commit"}, {"oid": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "url": "https://github.com/IBM/FHIR/commit/6330a03d02a295d0413a82de31d4cd6e22fd43c9", "message": "issue #665 added comments for the null checks\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-12T02:47:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5OTc4Mw==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378199783", "bodyText": "Maybe you can use ObjectUtils.isEmpty to validade this obj.\nDocument link", "author": "yurizp", "createdAt": "2020-02-12T11:41:54Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "diffHunk": "@@ -136,6 +136,10 @@ public static String generate(CadfAttachment obj)\n \n         public static void generate(CadfAttachment obj, JsonGenerator generator)\n                 throws IOException {\n+            // If the CADF attachment is null, then simply skip it.\n+            if (obj == null) {", "originalCommit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMDA2MA==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378200060", "bodyText": "It's really necessary this comment?", "author": "yurizp", "createdAt": "2020-02-12T11:42:35Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfAttachment.java", "diffHunk": "@@ -136,6 +136,10 @@ public static String generate(CadfAttachment obj)\n \n         public static void generate(CadfAttachment obj, JsonGenerator generator)\n                 throws IOException {\n+            // If the CADF attachment is null, then simply skip it.", "originalCommit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMTA2Mw==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378201063", "bodyText": "Maybe you can use ObjectUtils.isNotEmpty to validade this obj", "author": "yurizp", "createdAt": "2020-02-12T11:44:42Z", "path": "fhir-audit/src/main/java/com/ibm/fhir/audit/cadf/model/CadfEvent.java", "diffHunk": "@@ -765,50 +765,64 @@ public static void generate(CadfEvent obj, JsonGenerator generator)\n             if (obj.getTags() != null) {\n                 generator.writeStartArray(\"tags\");\n                 for (String tag : obj.getTags()) {\n-                    generator.write(tag);\n+                    if (tag != null) {", "originalCommit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNjcxNw==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378236717", "bodyText": "I like ObjectUtils, but the intention here is to validate not null only, the generated(input) values are either null or with no-empty value, there is no empty value case.  so, I don't want to introduce a new maven dependency for it.", "author": "albertwang-ibm", "createdAt": "2020-02-12T13:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMTA2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMjUxMw==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378202513", "bodyText": "It's possible move this code inside for to other method.", "author": "yurizp", "createdAt": "2020-02-12T11:47:47Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ChunkWriter.java", "diffHunk": "@@ -108,32 +121,98 @@ public void writeItems(List<java.lang.Object> arg0) throws Exception {\n             fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n             logger.info(\"writeItems: Set DatastoreId to default!\");\n         }\n-        cosClient = COSUtils.getCosClient(cosCredentialIbm, cosApiKeyProperty, cosSrvinstId, cosEndpintUrl,\n-                cosLocation);\n-        if (cosClient == null) {\n-            logger.warning(\"writeItems: Failed to get CosClient!\");\n-            return;\n-        } else {\n-            logger.finer(\"writeItems: Got CosClient successfully!\");\n-        }\n \n         FHIRConfiguration.setConfigHome(\"./\");\n         FHIRRequestContext.set(new FHIRRequestContext(fhirTenant, fhirDatastoreId));\n \n         FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n         FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null);\n+        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n \n-        int imported = 0;\n+        int processedNum = 0, succeededNum =0, failedNum = 0;\n+        ImportTransientUserData chunkData = (ImportTransientUserData) stepCtx.getTransientUserData();\n         for (Object objResJasonList : arg0) {\n-            List<String> resCosObjectNameList = (List<String>) objResJasonList;\n+            List<Resource> fhirResourceList = (List<Resource>) objResJasonList;\n+\n+            for (Resource fhirResource : fhirResourceList) {\n+                try {", "originalCommit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjI0Nw==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378232247", "bodyText": "I don't think add unnecessary method is a good idea even though the cost of function call could be minor, but this can be a huge loop. for function call, there will always be stack operations there.", "author": "albertwang-ibm", "createdAt": "2020-02-12T12:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMjUxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNDE0Mw==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378204143", "bodyText": "I believe i have by default 0 with value. So it's not necessary set 0 in this.\nDocument link", "author": "yurizp", "createdAt": "2020-02-12T11:51:21Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportCheckPointData.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bulkimport;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.ibm.cloud.objectstorage.services.s3.model.PartETag;\n+import com.ibm.fhir.model.util.FHIRUtil;\n+\n+// Class for tracking the partition import progress and for Batch job check points.\n+// Also used as data carrier for collecting and aggregation of import metrics.\n+public class ImportCheckPointData implements Serializable {\n+    private static final long serialVersionUID = 2189917861035732241L;\n+    // URL or COS/S3 object name.\n+    private String importPartitionWorkitem;\n+    private int numOfProcessedResources = 0;", "originalCommit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNDU0MQ==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378224541", "bodyText": "yes, I know this. but it doesn't harm to set it. because sometime, we get annoying warning in eclipse if you don't set any value to it before use it.", "author": "albertwang-ibm", "createdAt": "2020-02-12T12:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNDE0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNTEzMg==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378205132", "bodyText": "Maybe you can separe this method in smalls ones.\nIn this way you make the ciclomatic complexiti donw to.", "author": "yurizp", "createdAt": "2020-02-12T11:53:30Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkimport/ImportJobListener.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.bulkimport;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import javax.batch.api.listener.JobListener;\n+import javax.batch.runtime.context.JobContext;\n+import javax.inject.Inject;\n+\n+public class ImportJobListener implements JobListener {\n+    @Inject\n+    JobContext jobContext;\n+\n+    private long jobStartTimeInMS, jobEndTimeInMS;\n+\n+    public ImportJobListener() {\n+\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void afterJob() {", "originalCommit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyOTA0OA==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378229048", "bodyText": "I don't really think currently it's complicated enough to have to be separated into multiple, and there is no common codes used in it. but I do plan to separate the future bulkdata response generation and metric generation from this function into 2 different functions. and this will be done in issue #671", "author": "albertwang-ibm", "createdAt": "2020-02-12T12:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNTEzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNTgxOA==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378205818", "bodyText": "Do you dont have the value to verify in this?\nMaybe is return the wrong value but in this Test is pass becouse is not empty.", "author": "yurizp", "createdAt": "2020-02-12T11:55:08Z", "path": "fhir-model/src/test/java/com/ibm/fhir/model/util/test/RandomKeyGeneratorTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.model.util.test;\n+\n+import static org.testng.Assert.assertFalse;\n+\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.model.util.FHIRUtil;\n+\n+\n+public class RandomKeyGeneratorTest {\n+\n+    @Test\n+    public void testGetRandomKey() {\n+        String output = FHIRUtil.getRandomKey(\"AES\");\n+        assertFalse(output.isEmpty());", "originalCommit": "6330a03d02a295d0413a82de31d4cd6e22fd43c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNDkxNA==", "url": "https://github.com/IBM/FHIR/pull/667#discussion_r378224914", "bodyText": "The result is a random value.", "author": "albertwang-ibm", "createdAt": "2020-02-12T12:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNTgxOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "2e4ec0b04de3c13ccf96a44f92f14a8d49a14f92", "url": "https://github.com/IBM/FHIR/commit/2e4ec0b04de3c13ccf96a44f92f14a8d49a14f92", "message": "Merge branch 'master' into Albert-Master-New", "committedDate": "2020-02-12T13:41:55Z", "type": "commit"}, {"oid": "74d727fc9ff17af6a7eef8ae5eaa31b560ad7081", "url": "https://github.com/IBM/FHIR/commit/74d727fc9ff17af6a7eef8ae5eaa31b560ad7081", "message": "issue #638 import reorg\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-02-12T14:30:16Z", "type": "commit"}, {"oid": "4b76d81a15535b79ab4f261920e62711f7bbed4b", "url": "https://github.com/IBM/FHIR/commit/4b76d81a15535b79ab4f261920e62711f7bbed4b", "message": "Merge branch 'master' into Albert-Master-New", "committedDate": "2020-02-12T21:16:05Z", "type": "commit"}]}