{"pr_number": 685, "pr_title": "Refactored FHIRPathPatch into builder pattern", "pr_createdAt": "2020-02-06T23:05:28Z", "pr_url": "https://github.com/IBM/FHIR/pull/685", "timeline": [{"oid": "4be6b9c6839059f5ccff8fa6585d1203722f92a8", "url": "https://github.com/IBM/FHIR/commit/4be6b9c6839059f5ccff8fa6585d1203722f92a8", "message": "Refactored FHIRPathPatch into builder pattern\n\nalso added `toParameters()` to set up use from the client\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-06T23:07:01Z", "type": "forcePushed"}, {"oid": "2bc1730890a55b883d6c65b947eb1da6c621f11e", "url": "https://github.com/IBM/FHIR/commit/2bc1730890a55b883d6c65b947eb1da6c621f11e", "message": "Refactored FHIRPathPatch into builder pattern\n\nalso added `toParameters()` to set up use from the client\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-07T03:39:12Z", "type": "commit"}, {"oid": "2bc1730890a55b883d6c65b947eb1da6c621f11e", "url": "https://github.com/IBM/FHIR/commit/2bc1730890a55b883d6c65b947eb1da6c621f11e", "message": "Refactored FHIRPathPatch into builder pattern\n\nalso added `toParameters()` to set up use from the client\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-07T03:39:12Z", "type": "forcePushed"}, {"oid": "33ae76cdb1c9923f97d9984cc8375087c6fc4ed2", "url": "https://github.com/IBM/FHIR/commit/33ae76cdb1c9923f97d9984cc8375087c6fc4ed2", "message": "Remove hacky logic for retrieving the element name from a path\n\nIt turns out that our FHIRPathNode object already exposes the element\nname from a selected node.\nThis works for all cases other than inserting an element at position 0\nof an empty list, and its not clear from the spec whether that should be\nsupported or not. Now we throw UnsupportedOperationException in that\ncase.\n\nI also reduced the visibility of all the patch visitors, added null\nchecks, and improved documentation of both the visitors and a few select\nmethods in the FHIRPath model.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-07T17:55:35Z", "type": "forcePushed"}, {"oid": "16ddc236037f696aaabbcd7a105f88cdf98fef44", "url": "https://github.com/IBM/FHIR/commit/16ddc236037f696aaabbcd7a105f88cdf98fef44", "message": "Remove hacky logic for retrieving the element name from a path\n\nIt turns out that our FHIRPathNode object already exposes the element\nname from a selected node.\nThis works for all cases other than inserting an element at position 0\nof an empty list, and its not clear from the spec whether that should be\nsupported or not. Now we throw UnsupportedOperationException in that\ncase.\n\nI also reduced the visibility of all the patch visitors, added null\nchecks, and improved documentation of both the visitors and a few select\nmethods in the FHIRPath model.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-07T21:48:35Z", "type": "forcePushed"}, {"oid": "7ddc202cc8c6433a50daa7a09d96bae7c8ddc6b1", "url": "https://github.com/IBM/FHIR/commit/7ddc202cc8c6433a50daa7a09d96bae7c8ddc6b1", "message": "Remove hacky logic for retrieving the element name from a path\n\nIt turns out that our FHIRPathNode object already exposes the element\nname from a selected node.\nThis works for all cases other than inserting an element at position 0\nof an empty list, and its not clear from the spec whether that should be\nsupported or not. Now we throw UnsupportedOperationException in that\ncase.\n\nI also reduced the visibility of all the patch visitors, added null\nchecks, and improved documentation of both the visitors and a few select\nmethods in the FHIRPath model.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-07T21:51:53Z", "type": "commit"}, {"oid": "7ddc202cc8c6433a50daa7a09d96bae7c8ddc6b1", "url": "https://github.com/IBM/FHIR/commit/7ddc202cc8c6433a50daa7a09d96bae7c8ddc6b1", "message": "Remove hacky logic for retrieving the element name from a path\n\nIt turns out that our FHIRPathNode object already exposes the element\nname from a selected node.\nThis works for all cases other than inserting an element at position 0\nof an empty list, and its not clear from the spec whether that should be\nsupported or not. Now we throw UnsupportedOperationException in that\ncase.\n\nI also reduced the visibility of all the patch visitors, added null\nchecks, and improved documentation of both the visitors and a few select\nmethods in the FHIRPath model.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-07T21:51:53Z", "type": "forcePushed"}, {"oid": "56877783c0f449872ce150536286f3bed39d86ea", "url": "https://github.com/IBM/FHIR/commit/56877783c0f449872ce150536286f3bed39d86ea", "message": "Added FHIRPathPatchBuilderTest and fixed bug in AddingVisitor\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-07T23:23:48Z", "type": "commit"}, {"oid": "546abc236816a27d57b04fe1e45adad4b7cae91d", "url": "https://github.com/IBM/FHIR/commit/546abc236816a27d57b04fe1e45adad4b7cae91d", "message": "issue #679 - fixed major issue caused by use of parent identity\n\nThe previous approach failed in certain cases when the Visitable tree\ncontains the exact same object in multiple different places (e.g. adding\nto a name when that same name object is repeated twice in teh same\nlist).\n\nWith this change, the CopyingVisitor now keeps its own pathStack and we\nuse the normalized path of FHIRPath nodes and/or their parent to ensure\nwe're only modifying the proper paths in the tree.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-08T22:29:15Z", "type": "commit"}, {"oid": "546abc236816a27d57b04fe1e45adad4b7cae91d", "url": "https://github.com/IBM/FHIR/commit/546abc236816a27d57b04fe1e45adad4b7cae91d", "message": "issue #679 - fixed major issue caused by use of parent identity\n\nThe previous approach failed in certain cases when the Visitable tree\ncontains the exact same object in multiple different places (e.g. adding\nto a name when that same name object is repeated twice in teh same\nlist).\n\nWith this change, the CopyingVisitor now keeps its own pathStack and we\nuse the normalized path of FHIRPath nodes and/or their parent to ensure\nwe're only modifying the proper paths in the tree.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-08T22:29:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3OTQ2OQ==", "url": "https://github.com/IBM/FHIR/pull/685#discussion_r377079469", "bodyText": "Is there a constant for this defined somewhere?", "author": "bfelaco", "createdAt": "2020-02-10T14:01:56Z", "path": "fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java", "diffHunk": "@@ -17,33 +16,189 @@\n import com.ibm.fhir.model.resource.Parameters;\n import com.ibm.fhir.model.resource.Parameters.Parameter;\n import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.Element;\n \n public class FHIRPathPatch implements FHIRPatch {\n-    private List<FHIRPathPatchOperation> operations;\n+    private final List<FHIRPathPatchOperation> operations;\n \n+    private FHIRPathPatch(Builder builder) {\n+        this.operations = Collections.unmodifiableList(builder.operations);\n+    }\n+    \n+    @Override\n+    public <T extends Resource> T apply(T resource) throws FHIRPatchException {\n+        for (FHIRPathPatchOperation fhirPathPatchOperation : operations) {\n+            resource = fhirPathPatchOperation.apply(resource);\n+        }\n+        return resource;\n+    }\n+    \n     /**\n+     * Convert the FHIRPathPatch to a FHIR Parameters resource\n+     */\n+    public Parameters toParameters() {\n+        Parameters.Builder builder = Parameters.builder();\n+        for (FHIRPathPatchOperation operation : operations) {\n+            builder.parameter(operation.toParameter());\n+        }\n+        return builder.build();\n+    }\n+    \n+    public Builder toBuilder() {\n+        return new Builder().from(this);\n+    }\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+    \n+    public static class Builder { \n+        private List<FHIRPathPatchOperation> operations = new ArrayList<>(3);\n+        \n+        private Builder() {\n+            // hidden constructor\n+        }\n+    \n+        public Builder add(String path, String elementName, Element element) {\n+            operations.add(new FHIRPathPatchAdd(path, elementName, element));\n+            return this;\n+        }\n+        \n+        public Builder delete(String path) {\n+            operations.add(new FHIRPathPatchDelete(path));\n+            return this;\n+        }\n+        \n+        public Builder insert(String path, Element element, Integer index) {\n+            operations.add(new FHIRPathPatchInsert(path, element, index));\n+            return this;\n+        }\n+        \n+        public Builder move(String path, Integer source, Integer destination) {\n+            operations.add(new FHIRPathPatchMove(path, source, destination));\n+            return this;\n+        }\n+        \n+        public Builder replace(String path, Element element) {\n+            operations.add(new FHIRPathPatchReplace(path, element));\n+            return this;\n+        }\n+        \n+        /**\n+         * Build the {@link FHIRPathPatch}\n+         * \n+         * @return\n+         *     An immutable object of type {@link FHIRPathPatch}\n+         */\n+        public FHIRPathPatch build() {\n+            return new FHIRPathPatch(this);\n+        }\n+\n+        protected Builder from(FHIRPathPatch patch) {\n+            operations.addAll(patch.operations);\n+            return this;\n+        }\n+    }\n+    \n+    /**\n+     * Parse a FHIRPathPatch from a FHIR Parameters resource\n+     * \n      * @throws IllegalArgumentException if the Parameters object does not satisfy the requirements of a FHIRPath Patch\n      */\n-    public FHIRPathPatch(Parameters params) {\n+    public static FHIRPathPatch from(Parameters params) {\n         Objects.requireNonNull(params);\n-        operations = new ArrayList<FHIRPathPatchOperation>(2);\n+        Builder builder = FHIRPathPatch.builder();\n+        \n         for (Parameter param : params.getParameter()) {\n             if (!\"operation\".equals(param.getName().getValue())) {", "originalCommit": "546abc236816a27d57b04fe1e45adad4b7cae91d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5MjU2NA==", "url": "https://github.com/IBM/FHIR/pull/685#discussion_r377192564", "bodyText": "yeah, good catch\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!\"operation\".equals(param.getName().getValue())) {\n          \n          \n            \n                        if (!FHIRPathPatchOperation.OPERATION.equals(param.getName().getValue())) {", "author": "lmsurpre", "createdAt": "2020-02-10T17:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3OTQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e37f7a61a8ff3a518ed92826d4a1eeded1f51696", "chunk": "diff --git a/fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java b/fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java\nindex 1ec57bd273..d5000b7ee0 100644\n--- a/fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java\n+++ b/fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java\n\n@@ -111,7 +111,7 @@ public class FHIRPathPatch implements FHIRPatch {\n         Builder builder = FHIRPathPatch.builder();\n         \n         for (Parameter param : params.getParameter()) {\n-            if (!\"operation\".equals(param.getName().getValue())) {\n+            if (!FHIRPathPatchOperation.OPERATION.equals(param.getName().getValue())) {\n                 throw new IllegalArgumentException(\"Each FHIRPath patch operation must have a name of 'operation'\");\n             }\n             addOperation(builder, param);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4Njg0MA==", "url": "https://github.com/IBM/FHIR/pull/685#discussion_r377086840", "bodyText": "Is the intention of making this an instance method to support inter-mixing other patches with manually added operations like this?\n     FHIRPathPatch.builder()\n          .add(...)\n          .move(...)\n          .from(someExistingPatch)\n          .from(someOtherPatch)\n          .build();\nOr were you only thinking of the simple case of just wanting to mutate a single existing immutable FHIRPathPatch?\nIf you want to allow/support the former, then you should make this method public so anyone can do it. If not, then I'd suggest changing this to an additional private ctor which can only be used by the toBuilder() method of the outer class.", "author": "bfelaco", "createdAt": "2020-02-10T14:15:17Z", "path": "fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java", "diffHunk": "@@ -17,33 +16,189 @@\n import com.ibm.fhir.model.resource.Parameters;\n import com.ibm.fhir.model.resource.Parameters.Parameter;\n import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.type.Code;\n+import com.ibm.fhir.model.type.Element;\n \n public class FHIRPathPatch implements FHIRPatch {\n-    private List<FHIRPathPatchOperation> operations;\n+    private final List<FHIRPathPatchOperation> operations;\n \n+    private FHIRPathPatch(Builder builder) {\n+        this.operations = Collections.unmodifiableList(builder.operations);\n+    }\n+    \n+    @Override\n+    public <T extends Resource> T apply(T resource) throws FHIRPatchException {\n+        for (FHIRPathPatchOperation fhirPathPatchOperation : operations) {\n+            resource = fhirPathPatchOperation.apply(resource);\n+        }\n+        return resource;\n+    }\n+    \n     /**\n+     * Convert the FHIRPathPatch to a FHIR Parameters resource\n+     */\n+    public Parameters toParameters() {\n+        Parameters.Builder builder = Parameters.builder();\n+        for (FHIRPathPatchOperation operation : operations) {\n+            builder.parameter(operation.toParameter());\n+        }\n+        return builder.build();\n+    }\n+    \n+    public Builder toBuilder() {\n+        return new Builder().from(this);\n+    }\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+    \n+    public static class Builder { \n+        private List<FHIRPathPatchOperation> operations = new ArrayList<>(3);\n+        \n+        private Builder() {\n+            // hidden constructor\n+        }\n+    \n+        public Builder add(String path, String elementName, Element element) {\n+            operations.add(new FHIRPathPatchAdd(path, elementName, element));\n+            return this;\n+        }\n+        \n+        public Builder delete(String path) {\n+            operations.add(new FHIRPathPatchDelete(path));\n+            return this;\n+        }\n+        \n+        public Builder insert(String path, Element element, Integer index) {\n+            operations.add(new FHIRPathPatchInsert(path, element, index));\n+            return this;\n+        }\n+        \n+        public Builder move(String path, Integer source, Integer destination) {\n+            operations.add(new FHIRPathPatchMove(path, source, destination));\n+            return this;\n+        }\n+        \n+        public Builder replace(String path, Element element) {\n+            operations.add(new FHIRPathPatchReplace(path, element));\n+            return this;\n+        }\n+        \n+        /**\n+         * Build the {@link FHIRPathPatch}\n+         * \n+         * @return\n+         *     An immutable object of type {@link FHIRPathPatch}\n+         */\n+        public FHIRPathPatch build() {\n+            return new FHIRPathPatch(this);\n+        }\n+\n+        protected Builder from(FHIRPathPatch patch) {", "originalCommit": "546abc236816a27d57b04fe1e45adad4b7cae91d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4ODUxNA==", "url": "https://github.com/IBM/FHIR/pull/685#discussion_r377188514", "bodyText": "Is the intention of making this an instance method to support inter-mixing other patches with manually added operations like this?\n\nNo, although I did consider something like that for supporting combining of disparate patches into a single patch.  I don't think it would be hard to add, but since presently it just naively applies them one-at-a-time, it doesn't make a difference whether you combine them into a single patch or just execute them one-after-another.\n\nOr were you only thinking of the simple case of just wanting to mutate a single existing immutable FHIRPathPatch?\n\nthis\nI just followed the precedent set in our generated model.  For example, see\nhttps://github.com/IBM/FHIR/blob/master/fhir-model/src/main/java/com/ibm/fhir/model/resource/Account.java#L1381\nI think an overloaded [protected] constructor is another option, but I think it just comes down to preference.  @JohnTimm any thoughts on this?", "author": "lmsurpre", "createdAt": "2020-02-10T16:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4Njg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NDgzMg==", "url": "https://github.com/IBM/FHIR/pull/685#discussion_r377194832", "bodyText": "Looking at it some more, I guess it wouldn't hurt to just flip this to public...then it could serve both use cases.  I can't think of a downside...", "author": "lmsurpre", "createdAt": "2020-02-10T17:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4Njg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMDY1OA==", "url": "https://github.com/IBM/FHIR/pull/685#discussion_r377220658", "bodyText": "done", "author": "lmsurpre", "createdAt": "2020-02-10T17:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4Njg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "e37f7a61a8ff3a518ed92826d4a1eeded1f51696", "chunk": "diff --git a/fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java b/fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java\nindex 1ec57bd273..d5000b7ee0 100644\n--- a/fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java\n+++ b/fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java\n\n@@ -111,7 +111,7 @@ public class FHIRPathPatch implements FHIRPatch {\n         Builder builder = FHIRPathPatch.builder();\n         \n         for (Parameter param : params.getParameter()) {\n-            if (!\"operation\".equals(param.getName().getValue())) {\n+            if (!FHIRPathPatchOperation.OPERATION.equals(param.getName().getValue())) {\n                 throw new IllegalArgumentException(\"Each FHIRPath patch operation must have a name of 'operation'\");\n             }\n             addOperation(builder, param);\n"}}, {"oid": "e37f7a61a8ff3a518ed92826d4a1eeded1f51696", "url": "https://github.com/IBM/FHIR/commit/e37f7a61a8ff3a518ed92826d4a1eeded1f51696", "message": "Update fhir-path/src/main/java/com/ibm/fhir/path/patch/FHIRPathPatch.java\r\n\r\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-10T17:02:53Z", "type": "commit"}, {"oid": "7fc6945124fe3cd6cb93b2ed0f442dac86c2ecfe", "url": "https://github.com/IBM/FHIR/commit/7fc6945124fe3cd6cb93b2ed0f442dac86c2ecfe", "message": "Convert from to public and add javadoc to FHIRPathPatch builder setters\n\nBy converting `FHIRPathPatch.Builder.from(FHIRPathPatch)` to public, its\nnow possible to combine multiple FHIRPathPatch objects into a single\nFHIRPathPatch.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-10T17:52:48Z", "type": "commit"}]}