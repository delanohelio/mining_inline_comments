{"pr_number": 1364, "pr_title": "issue 1362 Use timestamp prefix for identity strings to reduce random reads during ingestion", "pr_createdAt": "2020-07-27T17:33:39Z", "pr_url": "https://github.com/IBM/FHIR/pull/1364", "timeline": [{"oid": "db0a1fe8f78a2e0504bae907bb1a8e1b89bf1785", "url": "https://github.com/IBM/FHIR/commit/db0a1fe8f78a2e0504bae907bb1a8e1b89bf1785", "message": "issue #1362 Use timestamp prefix for identity strings to reduce random reads during ingestion\n\nSigned-off-by: Robin Arnold <robin.arnold23@ibm.com>", "committedDate": "2020-07-27T17:08:51Z", "type": "commit"}, {"oid": "92afad88849674dfd27ffc1acd83c8369a5ba9e6", "url": "https://github.com/IBM/FHIR/commit/92afad88849674dfd27ffc1acd83c8369a5ba9e6", "message": "Merge remote-tracking branch 'origin/master' into issue-1327c", "committedDate": "2020-07-27T17:21:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTE4OA==", "url": "https://github.com/IBM/FHIR/pull/1364#discussion_r461059188", "bodyText": "Does this impact any regular expressions? or potentially any fhir path?\nDoes it impact FHIR Uuid type?\nprivate static final Pattern PATTERN = Pattern.compile(\"urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\");.", "author": "prb112", "createdAt": "2020-07-27T17:40:52Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/TimestampPrefixedUUID.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.persistence.jdbc.util;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Provides identity strings using random UUID for uniqueness but\n+ * prefixed with an encoded time string to improve database locality\n+ * when used in b-tree indexes.\n+ */\n+public class TimestampPrefixedUUID implements LogicalIdentityProvider {\n+\n+    @Override\n+    public String createNewIdentityValue() {\n+        // It's OK to use milli-time here. It doesn't matter too much if the time changes\n+        // because we're not using the timestamp to determine uniqueness in any way. The\n+        // timestamp prefix is purely to help push index writes to the right hand side\n+        // of the btree, minimizing the number of physical reads likely required \n+        // during ingestion when an index is too large to be fully cached.\n+        long millis = System.currentTimeMillis();\n+        \n+        // String encoding. Needs to collate correctly, so don't use any\n+        // byte-based encoding which would be sensitive to endian issues. For simplicity,\n+        // hex is sufficient, although a custom encoding using the full character set\n+        // supported by FHIR identifiers would be a little more compact (== smaller indexes).\n+        // Do not use Base64.\n+        String prefix = Long.toHexString(millis);\n+        \n+        UUID uuid = UUID.randomUUID();\n+        \n+        StringBuilder result = new StringBuilder();\n+        result.append(prefix);\n+        result.append(\"-\"); // redundant, but more visually appealing.", "originalCommit": "92afad88849674dfd27ffc1acd83c8369a5ba9e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTc0MA==", "url": "https://github.com/IBM/FHIR/pull/1364#discussion_r461065740", "bodyText": "Resource.id is a system string with a hinted type of https://www.hl7.org/fhir/datatypes.html#id (and not UUID), so as long as we only use it for that, then I think we're OK on this one.", "author": "lmsurpre", "createdAt": "2020-07-27T17:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NjI0OQ==", "url": "https://github.com/IBM/FHIR/pull/1364#discussion_r461066249", "bodyText": "It shouldn't, because identifiers are constrained by a different pattern according to the spec.", "author": "punktilious", "createdAt": "2020-07-27T17:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3MTcyNw==", "url": "https://github.com/IBM/FHIR/pull/1364#discussion_r461071727", "bodyText": "Works for me", "author": "prb112", "createdAt": "2020-07-27T18:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTE4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTkwNA==", "url": "https://github.com/IBM/FHIR/pull/1364#discussion_r461059904", "bodyText": "For ResourceDAOImpl, Also what about line 518? stmt.setString(6, UUID.randomUUID().toString());", "author": "prb112", "createdAt": "2020-07-27T17:42:12Z", "path": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/impl/FHIRPersistenceJDBCImpl.java", "diffHunk": "@@ -278,7 +283,7 @@ protected Action buildActionChain() {\n             // system-generated value. For the update-or-create scenario, see update().\n             // Default version is 1 for a brand new FHIR Resource.\n             int newVersionNumber = 1;\n-            logicalId = UUID.randomUUID().toString();\n+            logicalId = logicalIdentityProvider.createNewIdentityValue();\n             if (log.isLoggable(Level.FINE)) {\n                 log.fine(\"Creating new FHIR Resource of type '\" + resource.getClass().getSimpleName() + \"'\");", "originalCommit": "92afad88849674dfd27ffc1acd83c8369a5ba9e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MjI4Mg==", "url": "https://github.com/IBM/FHIR/pull/1364#discussion_r461062282", "bodyText": "Also DerbyResourceDao on 117?  PostgreSqlResourceDAO 112\nFHIRRestHelper 329? id = UUID.randomUUID().toString(); (lots of instances there)", "author": "prb112", "createdAt": "2020-07-27T17:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTU1Nw==", "url": "https://github.com/IBM/FHIR/pull/1364#discussion_r461065557", "bodyText": "Yikes...no idea why we'd be manipulating data values in the DAO...good catch...will check", "author": "punktilious", "createdAt": "2020-07-27T17:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NDQyNg==", "url": "https://github.com/IBM/FHIR/pull/1364#discussion_r461074426", "bodyText": "That's the sourceKey which was previously used to ensure idempotence in replication scenarios. It is no longer used and can be removed. Will create a new issue. It is benign here.", "author": "punktilious", "createdAt": "2020-07-27T18:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTkwNA=="}], "type": "inlineReview", "revised_code": null}]}