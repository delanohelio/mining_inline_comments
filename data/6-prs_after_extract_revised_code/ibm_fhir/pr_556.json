{"pr_number": 556, "pr_title": "issue #160 conditional read support", "pr_createdAt": "2020-01-06T15:04:59Z", "pr_url": "https://github.com/IBM/FHIR/pull/556", "timeline": [{"oid": "4eb14a8b4924758d6d91ce91a81dcd3c6f13fd34", "url": "https://github.com/IBM/FHIR/commit/4eb14a8b4924758d6d91ce91a81dcd3c6f13fd34", "message": "Merge pull request #554 from IBM/master\n\nsync with master", "committedDate": "2020-01-02T14:02:10Z", "type": "commit"}, {"oid": "aacc9326287118f365afad1aeeec09d35d9bbcf3", "url": "https://github.com/IBM/FHIR/commit/aacc9326287118f365afad1aeeec09d35d9bbcf3", "message": "Merge pull request #555 from IBM/master\n\nsync with master", "committedDate": "2020-01-06T14:49:34Z", "type": "commit"}, {"oid": "44eab97a87168d4282dc9befd735f6b7e90d4e21", "url": "https://github.com/IBM/FHIR/commit/44eab97a87168d4282dc9befd735f6b7e90d4e21", "message": "issue #160 Conditional read support\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-01-06T15:00:00Z", "type": "commit"}, {"oid": "d4d02a30d5e2a3030a4ed2c0b74aacf32a892cbe", "url": "https://github.com/IBM/FHIR/commit/d4d02a30d5e2a3030a4ed2c0b74aacf32a892cbe", "message": "issue #160  minor update\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-01-06T15:17:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2MTA3Mg==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363361072", "bodyText": "We can probably use DateTimeHandler from Search's pattern and use a parseBest\nSnippet\nprivate static final DateTimeFormatter DATE_TIME_PARSER_FORMATTER =\n            new DateTimeFormatterBuilder()\n                    .appendPattern(\"yyyy\")\n                    .optionalStart()\n                        .appendLiteral('-')\n                        .appendPattern(\"MM\")\n                        .optionalStart()\n                            .appendLiteral('-')\n                            .appendPattern(\"dd\")\n                            .optionalStart()\n                                .appendLiteral(\"T\")\n                                .optionalStart()\n                                .appendPattern(\"HH\")\n                                .optionalStart()\n                                    .appendLiteral(':')\n                                    .appendPattern(\"mm\")\n                                    .optionalStart()\n                                        .appendLiteral(':')\n                                        .appendPattern(\"ss\")\n                                        .optionalStart()\n                                            .appendFraction(ChronoField.MICRO_OF_SECOND, 0, 6, true)\n                                        .optionalEnd()\n                                    .optionalEnd()\n                                .optionalEnd()\n                                .optionalStart()\n                                    .appendPattern(\"XXX\")\n                                .optionalEnd()\n                            .optionalEnd()\n                            .optionalEnd()\n                        .optionalEnd()\n                    .optionalEnd()\n                    .toFormatter();\n    // @formatter:on\n\nthen one call to\nreturn DATE_TIME_PARSER_FORMATTER.withResolverStyle(ResolverStyle.SMART).parseBest(value,\n                    ZonedDateTime::from, LocalDateTime::from, LocalDate::from, YearMonth::from, Year::from);", "author": "prb112", "createdAt": "2020-01-06T16:09:12Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -600,6 +618,30 @@ public Response conditionalDelete(@PathParam(\"type\") String type) throws Excepti\n             log.exiting(this.getClass().getName(), \"delete(String,String)\");\n         }\n     }\n+    \n+    \n+    private long parseIfModifiedSince() {", "originalCommit": "d4d02a30d5e2a3030a4ed2c0b74aacf32a892cbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM4NDE4Ng==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363384186", "bodyText": "en... seems the new pattern is much more complicated then using SimpleDateFormat, but let me try to change to use it ... :)", "author": "albertwang-ibm", "createdAt": "2020-01-06T16:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2MTA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQxOTI0MA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363419240", "bodyText": "just noticed that it's mainly used for formater with optional elements, but in my case, we need 2 different formaters with the required different elements. so I would prefer to keep current implementation.", "author": "albertwang-ibm", "createdAt": "2020-01-06T18:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2MTA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNDA3Mg==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363424072", "bodyText": "I don't think you need two formatters.  I think breaking this discussion out and talking with John may be best", "author": "prb112", "createdAt": "2020-01-06T18:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2MTA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cb89226e632a08bf6f13965956d72ff07ba43b51", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\nindex 062071820d..f8dcb6d173 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n\n@@ -629,15 +632,13 @@ public class FHIRResource implements FHIRResourceHelpers {\n             modifiedSince = httpServletRequest.getDateHeader(HEADERNAME_IF_MODIFIED_SINCE);\n         } catch (IllegalArgumentException e) {\n             try {\n-                // And then handle ANSIC format, e.g, \"Sun Nov  6 08:49:37 1994\"\n-                modifiedSince = ascTime.parse(httpHeaders.getHeaderString(HEADERNAME_IF_MODIFIED_SINCE)).getTime();\n-            } catch (ParseException e1) {\n-                try {\n-                    // Last, handle touchStone specific format, e.g, \"Sat, 28-Sep-19 16:11:14\"\n-                    modifiedSince = touchStoneTime.parse(httpHeaders.getHeaderString(HEADERNAME_IF_MODIFIED_SINCE)).getTime();\n-                } catch (ParseException e2) {\n+                // Then handle ANSIC format, e.g, \"Sun Nov  6 08:49:37 1994\"\n+                // and touchStone specific format, e.g, \"Sat, 28-Sep-19 16:11:14\"\n+                // assuming the time zone is GMT.\n+                modifiedSince = PARSER_FORMATTER.parse(httpHeaders.getHeaderString(HEADERNAME_IF_MODIFIED_SINCE), LocalDateTime::from)\n+                        .atZone(ZoneId.of(\"GMT\")).toInstant().toEpochMilli();\n+            } catch (DateTimeParseException e1) {\n                     modifiedSince = -1;\n-                }\n             }\n         }\n         return modifiedSince;\n"}}, {"oid": "94b8182a34d6ae96a5dd5013882d0cc20f693d0b", "url": "https://github.com/IBM/FHIR/commit/94b8182a34d6ae96a5dd5013882d0cc20f693d0b", "message": "issue #160 update last-modified test codes\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-01-06T16:39:46Z", "type": "commit"}, {"oid": "cb89226e632a08bf6f13965956d72ff07ba43b51", "url": "https://github.com/IBM/FHIR/commit/cb89226e632a08bf6f13965956d72ff07ba43b51", "message": "issue #160 change to use DateTimeFormatter for asc and touchstone\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-01-06T23:34:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNTg5Mg==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363535892", "bodyText": "Maybe add a comment indicating what it supports? and format?", "author": "prb112", "createdAt": "2020-01-06T23:47:41Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -162,6 +172,17 @@\n     private static final String LOCAL_REF_PREFIX = \"urn:\";\n     private static final String HEADERNAME_IF_NONE_EXIST = \"If-None-Exist\";\n     private static final String HEADERNAME_PREFER = \"Prefer\";\n+    private static final String HEADERNAME_IF_MODIFIED_SINCE = \"If-Modified-Since\";\n+    private static final String HEADERNAME_IF_NONE_MATCH = \"If-None-Match\";\n+\n+    public static final DateTimeFormatter PARSER_FORMATTER = new DateTimeFormatterBuilder()", "originalCommit": "cb89226e632a08bf6f13965956d72ff07ba43b51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2OTI3MA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363769270", "bodyText": "good point, will add comment", "author": "albertwang-ibm", "createdAt": "2020-01-07T14:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNTg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3NTU0MA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363775540", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-01-07T14:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNTg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f2d8b4a68790fcb75a870a5c8dbe87c30f639713", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\nindex f8dcb6d173..4c7398ccef 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n\n@@ -178,9 +175,11 @@ public class FHIRResource implements FHIRResourceHelpers {\n     public static final DateTimeFormatter PARSER_FORMATTER = new DateTimeFormatterBuilder()\n             .appendPattern(\"EEE\")\n             .optionalStart()\n+            // ANSIC date time format for If-Modified-Since\n             .appendPattern(\" MMM dd HH:mm:ss yyyy\")\n             .optionalEnd()\n             .optionalStart()\n+            // Touchstone date time format for If-Modified-Since\n             .appendPattern(\", dd-MMM-yy HH:mm:ss\")\n             .optionalEnd().toFormatter();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjAwOQ==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363536009", "bodyText": "so it can be a long? or timestamp?", "author": "prb112", "createdAt": "2020-01-06T23:48:16Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -600,6 +621,28 @@ public Response conditionalDelete(@PathParam(\"type\") String type) throws Excepti\n             log.exiting(this.getClass().getName(), \"delete(String,String)\");\n         }\n     }\n+    \n+    \n+    private long parseIfModifiedSince() {\n+        long modifiedSince = -1;\n+        try {\n+            // Handle RFC_1123 and RFC_850 formats first. \n+            // e.g \"Sun, 06 Nov 1994 08:49:37 GMT\", \"Sunday, 06-Nov-94 08:49:37 GMT\", \"Sunday, 06-Nov-1994 08:49:37 GMT\"\n+            // If 2 digits year is used, then means 1940 to 2039.\n+            modifiedSince = httpServletRequest.getDateHeader(HEADERNAME_IF_MODIFIED_SINCE);", "originalCommit": "cb89226e632a08bf6f13965956d72ff07ba43b51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2ODkxNA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363768914", "bodyText": "long, the getDateHeader function returns EpochMilli. will add comment to clarify this.", "author": "albertwang-ibm", "createdAt": "2020-01-07T14:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3NDY2MA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363774660", "bodyText": "I'm not sure that this pattern is exactly what we want. You have two optional segments and, technically, they could both be present and it would still work.", "author": "JohnTimm", "createdAt": "2020-01-07T14:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3NTQ2Mw==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363775463", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-01-07T14:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4NTQzMA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363785430", "bodyText": "we want to support 2 different patterns with only one formatter, this is the only way so far which works in my tests. I don't need they work together, just need it works if any of them presents.  :( .   PARSER_FORMATTER.parse(httpHeaders.getHeaderString(HEADERNAME_IF_MODIFIED_SINCE), LocalDateTime::from).     and I require to parse as LocalDateTime, let me add test codes to find out what happens if both present, I would guess it will throw exception.", "author": "albertwang-ibm", "createdAt": "2020-01-07T14:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyODE3Nw==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363828177", "bodyText": "added more test codes to cover negative cases.", "author": "albertwang-ibm", "createdAt": "2020-01-07T16:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f2d8b4a68790fcb75a870a5c8dbe87c30f639713", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\nindex f8dcb6d173..4c7398ccef 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n\n@@ -624,6 +623,7 @@ public class FHIRResource implements FHIRResourceHelpers {\n     \n     \n     private long parseIfModifiedSince() {\n+        // Modified since date time in EpochMilli\n         long modifiedSince = -1;\n         try {\n             // Handle RFC_1123 and RFC_850 formats first. \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjM5Ng==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363536396", "bodyText": "I think this part should be done one time, not twice as on 664/666", "author": "prb112", "createdAt": "2020-01-06T23:49:54Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -610,9 +653,50 @@ public Response read(@PathParam(\"type\") String type, @PathParam(\"id\") String id)\n         try {\n             checkInitComplete();\n             MultivaluedMap<String, String> queryParameters = uriInfo.getQueryParameters();\n+            long modifiedSince = parseIfModifiedSince();\n+            \n+            String ifNoneMatch = httpHeaders.getHeaderString(HEADERNAME_IF_NONE_MATCH);\n+            \n             Resource resource = doRead(type, id, true, false, null, null, queryParameters);\n-            ResponseBuilder response = Response.ok().entity(resource);\n-            response = addHeaders(response, resource);\n+            int version2Match = -1;\n+            // Support ETag value with or without \" (and W/)\n+            // e.g:  1, \"1\", W/1, W/\"1\" (the first format is used by TouchStone)\n+            if (ifNoneMatch != null && !ifNoneMatch.replaceAll(\"\\\"\", \"\").replaceAll(\"W/\", \"\").trim().isEmpty()) {", "originalCommit": "cb89226e632a08bf6f13965956d72ff07ba43b51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3Mjg5Nw==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363772897", "bodyText": "I thought about this also, and because this requires another if block, so, I didn't. make sense to parse only once, will change.", "author": "albertwang-ibm", "createdAt": "2020-01-07T14:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3NTMwMQ==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363775301", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-01-07T14:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f2d8b4a68790fcb75a870a5c8dbe87c30f639713", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\nindex f8dcb6d173..4c7398ccef 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n\n@@ -661,14 +661,17 @@ public class FHIRResource implements FHIRResourceHelpers {\n             int version2Match = -1;\n             // Support ETag value with or without \" (and W/)\n             // e.g:  1, \"1\", W/1, W/\"1\" (the first format is used by TouchStone)\n-            if (ifNoneMatch != null && !ifNoneMatch.replaceAll(\"\\\"\", \"\").replaceAll(\"W/\", \"\").trim().isEmpty()) {\n-                try {\n-                    version2Match = Integer.parseInt(ifNoneMatch.replaceAll(\"\\\"\", \"\").replaceAll(\"W/\", \"\").trim());\n-                }\n-                catch (NumberFormatException e)\n-                {\n-                    // ignore invalid version\n-                    version2Match = -1;\n+            if (ifNoneMatch != null) {\n+                ifNoneMatch = ifNoneMatch.replaceAll(\"\\\"\", \"\").replaceAll(\"W/\", \"\").trim();\n+                if (!ifNoneMatch.isEmpty()) { \n+                    try {\n+                        version2Match = Integer.parseInt(ifNoneMatch);\n+                    }\n+                    catch (NumberFormatException e)\n+                    {\n+                        // ignore invalid version\n+                        version2Match = -1;\n+                    }\n                 }\n             }\n             Instant modifiedTime2Compare = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjY2MA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363536660", "bodyText": "slight spelling ... Modified", "author": "prb112", "createdAt": "2020-01-06T23:50:47Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -610,9 +653,50 @@ public Response read(@PathParam(\"type\") String type, @PathParam(\"id\") String id)\n         try {\n             checkInitComplete();\n             MultivaluedMap<String, String> queryParameters = uriInfo.getQueryParameters();\n+            long modifiedSince = parseIfModifiedSince();\n+            \n+            String ifNoneMatch = httpHeaders.getHeaderString(HEADERNAME_IF_NONE_MATCH);\n+            \n             Resource resource = doRead(type, id, true, false, null, null, queryParameters);\n-            ResponseBuilder response = Response.ok().entity(resource);\n-            response = addHeaders(response, resource);\n+            int version2Match = -1;\n+            // Support ETag value with or without \" (and W/)\n+            // e.g:  1, \"1\", W/1, W/\"1\" (the first format is used by TouchStone)\n+            if (ifNoneMatch != null && !ifNoneMatch.replaceAll(\"\\\"\", \"\").replaceAll(\"W/\", \"\").trim().isEmpty()) {\n+                try {\n+                    version2Match = Integer.parseInt(ifNoneMatch.replaceAll(\"\\\"\", \"\").replaceAll(\"W/\", \"\").trim());\n+                }\n+                catch (NumberFormatException e)\n+                {\n+                    // ignore invalid version\n+                    version2Match = -1;\n+                }\n+            }\n+            Instant modifiedTime2Compare = null;\n+            if (modifiedSince > 0 ) {\n+                modifiedTime2Compare = Instant.ofEpochMilli(modifiedSince);\n+            }\n+            \n+            boolean isModifed = true;\n+            // check if-not-match first\n+            if (version2Match != -1) {\n+                if (version2Match == Integer.parseInt(resource.getMeta().getVersionId().getValue())) {\n+                    isModifed = false;", "originalCommit": "cb89226e632a08bf6f13965956d72ff07ba43b51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3MTg5MA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363771890", "bodyText": "ha, good catch!", "author": "albertwang-ibm", "createdAt": "2020-01-07T14:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3NTM2Mw==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r363775363", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-01-07T14:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNjY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "f2d8b4a68790fcb75a870a5c8dbe87c30f639713", "chunk": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\nindex f8dcb6d173..4c7398ccef 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java\n\n@@ -661,14 +661,17 @@ public class FHIRResource implements FHIRResourceHelpers {\n             int version2Match = -1;\n             // Support ETag value with or without \" (and W/)\n             // e.g:  1, \"1\", W/1, W/\"1\" (the first format is used by TouchStone)\n-            if (ifNoneMatch != null && !ifNoneMatch.replaceAll(\"\\\"\", \"\").replaceAll(\"W/\", \"\").trim().isEmpty()) {\n-                try {\n-                    version2Match = Integer.parseInt(ifNoneMatch.replaceAll(\"\\\"\", \"\").replaceAll(\"W/\", \"\").trim());\n-                }\n-                catch (NumberFormatException e)\n-                {\n-                    // ignore invalid version\n-                    version2Match = -1;\n+            if (ifNoneMatch != null) {\n+                ifNoneMatch = ifNoneMatch.replaceAll(\"\\\"\", \"\").replaceAll(\"W/\", \"\").trim();\n+                if (!ifNoneMatch.isEmpty()) { \n+                    try {\n+                        version2Match = Integer.parseInt(ifNoneMatch);\n+                    }\n+                    catch (NumberFormatException e)\n+                    {\n+                        // ignore invalid version\n+                        version2Match = -1;\n+                    }\n                 }\n             }\n             Instant modifiedTime2Compare = null;\n"}}, {"oid": "f2d8b4a68790fcb75a870a5c8dbe87c30f639713", "url": "https://github.com/IBM/FHIR/commit/f2d8b4a68790fcb75a870a5c8dbe87c30f639713", "message": "issue #160 minor updates per review comments\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-01-07T14:34:05Z", "type": "commit"}, {"oid": "431fb0ce454e1c57d545c290e9e795727a08c9a2", "url": "https://github.com/IBM/FHIR/commit/431fb0ce454e1c57d545c290e9e795727a08c9a2", "message": "issue #160 add more negative test cases\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-01-07T16:02:39Z", "type": "commit"}, {"oid": "31fc7b724ad00ea476ace993d5a10654f8678a4f", "url": "https://github.com/IBM/FHIR/commit/31fc7b724ad00ea476ace993d5a10654f8678a4f", "message": "issue #160 minor update\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-01-07T16:11:11Z", "type": "commit"}, {"oid": "d923190840429f311a7ce855f435a9c826febb25", "url": "https://github.com/IBM/FHIR/commit/d923190840429f311a7ce855f435a9c826febb25", "message": "issue #160 minor comment update\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-01-07T16:14:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0NjQyOA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r364346428", "bodyText": "this was not right.  should have been 2016,2020", "author": "lmsurpre", "createdAt": "2020-01-08T17:16:21Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/resources/FHIRResource.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2020", "originalCommit": "d923190840429f311a7ce855f435a9c826febb25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0NjYwOA==", "url": "https://github.com/IBM/FHIR/pull/556#discussion_r364346608", "bodyText": "not right.  should be 2016,2020", "author": "lmsurpre", "createdAt": "2020-01-08T17:16:42Z", "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRResponseImpl.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2020", "originalCommit": "d923190840429f311a7ce855f435a9c826febb25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}