{"pr_number": 1430, "pr_title": "Issue #694 - Perform syntax validation against ucum-units value set", "pr_createdAt": "2020-08-19T20:44:32Z", "pr_url": "https://github.com/IBM/FHIR/pull/1430", "timeline": [{"oid": "7725fe034c64adb4b24ad68ae8347b183214727c", "url": "https://github.com/IBM/FHIR/commit/7725fe034c64adb4b24ad68ae8347b183214727c", "message": "Issue #694 - Perform syntax validation against ucum-units value set\n\nSigned-off-by: Mike Schroeder <mschroed@us.ibm.com>", "committedDate": "2020-08-19T20:36:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjExOQ==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473316119", "bodyText": "style consistency - we merge the catch line with the prior line", "author": "prb112", "createdAt": "2020-08-19T21:01:16Z", "path": "fhir-model/src/test/java/com/ibm/fhir/model/util/test/ValidationSupportTest.java", "diffHunk": "@@ -154,4 +154,160 @@ public void testCheckLanguageCodeableConceptsNotValid() {\n         catch (IllegalStateException e) {}\n     }\n     \n+    @Test\n+    public void testCheckUcumCodeValid() {\n+        ValidationSupport.checkUcumCode(null, \"elementName\");\n+        ValidationSupport.checkUcumCode(Code.of(\"10.uN.s/(cm.m2)\"), \"elementName\");\n+        ValidationSupport.checkUcumCode(Code.of(\"%{Activity}\"), \"elementName\");\n+        ValidationSupport.checkUcumCode(Code.of(\"[mi_us]\"), \"elementName\");\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodeNotValid() {\n+        try {\n+            ValidationSupport.checkUcumCode(Code.of(null), \"elementName\");\n+            fail();\n+        }\n+        catch (IllegalStateException e) {}\n+        try {\n+            ValidationSupport.checkUcumCode(Code.of(\"{invalid{annotation}}\"), \"elementName\");\n+            fail();\n+        }\n+        catch (IllegalStateException e) {}\n+        try {\n+            ValidationSupport.checkUcumCode(Code.of(\"invalid space\"), \"elementName\");\n+            fail();\n+        }", "originalCommit": "7725fe034c64adb4b24ad68ae8347b183214727c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjM4MA==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473316380", "bodyText": "as a second comment, to this approach, if they are individual tests, then they can succeed and fail independently.", "author": "prb112", "createdAt": "2020-08-19T21:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1Nzg0Ng==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473957846", "bodyText": "There is a code template and formatting rules for Eclipse here (near the bottom of the page):\nhttps://github.com/IBM/FHIR/wiki/Style-Guide", "author": "JohnTimm", "createdAt": "2020-08-20T13:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1MjE2NQ==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474152165", "bodyText": "Will fix style and break into individual testcases.", "author": "michaelwschroeder", "createdAt": "2020-08-20T17:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4", "chunk": "diff --git a/fhir-model/src/test/java/com/ibm/fhir/model/util/test/ValidationSupportTest.java b/fhir-model/src/test/java/com/ibm/fhir/model/util/test/ValidationSupportTest.java\nindex 7981e12863..361b8c566f 100644\n--- a/fhir-model/src/test/java/com/ibm/fhir/model/util/test/ValidationSupportTest.java\n+++ b/fhir-model/src/test/java/com/ibm/fhir/model/util/test/ValidationSupportTest.java\n\n@@ -155,103 +156,172 @@ public class ValidationSupportTest {\n     }\n     \n     @Test\n-    public void testCheckUcumCodeValid() {\n+    public void testCheckUcumCodeValid1() {\n         ValidationSupport.checkUcumCode(null, \"elementName\");\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodeValid2() {\n         ValidationSupport.checkUcumCode(Code.of(\"10.uN.s/(cm.m2)\"), \"elementName\");\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodeValid3() {\n         ValidationSupport.checkUcumCode(Code.of(\"%{Activity}\"), \"elementName\");\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodeValid4() {\n         ValidationSupport.checkUcumCode(Code.of(\"[mi_us]\"), \"elementName\");\n     }\n \n     @Test\n-    public void testCheckUcumCodeNotValid() {\n+    public void testCheckUcumCodeNotValid1() {\n         try {\n             ValidationSupport.checkUcumCode(Code.of(null), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodeNotValid2() {\n         try {\n             ValidationSupport.checkUcumCode(Code.of(\"{invalid{annotation}}\"), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodeNotValid3() {\n         try {\n             ValidationSupport.checkUcumCode(Code.of(\"invalid space\"), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodeNotValid4() {\n         try {\n             ValidationSupport.checkUcumCode(Code.of(\"]invalidBracket[\"), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n     }\n-    \n+\n     @Test\n     public void testCheckUcumCodesValid() {\n         ValidationSupport.checkUcumCodes(Collections.singletonList(Code.of(\"mg/dL\")), \"elementName\");\n     }\n-    \n+\n     @Test\n     public void testCheckUcumCodesNotValid() {\n         try {\n             ValidationSupport.checkUcumCodes(Arrays.asList(Code.of(\"mg/dL\"), Code.of(\"[[]]\")), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n     }\n \n     @Test\n-    public void testCheckUcumCodingValid() {\n+    public void testCheckUcumCodingValid1() {\n+        ValidationSupport.checkUcumCoding(null, \"elementName\");\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingValid2() {\n         ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(ValidationSupport.UCUM_CODE_SYSTEM_URL)).code(Code.of(\"10*6/L\")).build(), \"elementName\");\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingValid3() {\n         ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(ValidationSupport.UCUM_CODE_SYSTEM_URL)).code(Code.of(\"cm[H2O]\")).build(), \"elementName\");\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingValid4() {\n         ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(ValidationSupport.UCUM_CODE_SYSTEM_URL)).code(Code.of(\"g.m/({hb}.m2)\")).build(), \"elementName\");\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingValid5() {\n         ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(ValidationSupport.UCUM_CODE_SYSTEM_URL)).code(Code.of(\"mg/mmol\")).build(), \"elementName\");\n     }\n \n     @Test\n-    public void testCheckUcumCodingNotValid() {\n+    public void testCheckUcumCodingNotValid1() {\n         try {\n             ValidationSupport.checkUcumCoding(Coding.builder().build(), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingNotValid2() {\n         try {\n             ValidationSupport.checkUcumCoding(Coding.builder().code(Code.of(\"mg/mmol\")).build(), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingNotValid3() {\n         try {\n             ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(ValidationSupport.UCUM_CODE_SYSTEM_URL)).build(), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingNotValid4() {\n         try {\n             ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(null)).code(Code.of(\"mg/mmol\")).build(), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingNotValid5() {\n         try {\n             ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(ValidationSupport.UCUM_CODE_SYSTEM_URL)).code(Code.of(null)).build(), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingNotValid6() {\n         try {\n             ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(\"invalidSystem\")).code(Code.of(\"mg/mmol\")).build(), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n-        try { \n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingNotValid7() {\n+        try {\n             ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(ValidationSupport.UCUM_CODE_SYSTEM_URL)).code(Code.of(\"invalid space\")).build(), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n+    }\n+\n+    @Test\n+    public void testCheckUcumCodingNotValid8() {\n         try {\n             ValidationSupport.checkUcumCoding(Coding.builder().system(Uri.of(ValidationSupport.UCUM_CODE_SYSTEM_URL)).code(Code.of(\"{embedded{}brace}\")).build(), \"elementName\");\n             fail();\n+        } catch (IllegalStateException e) {\n         }\n-        catch (IllegalStateException e) {}\n     }\n-    \n+\n     @Test\n     public void testCheckUcumCodingsValid() {\n         ValidationSupport.checkUcumCodings(Collections.singletonList(Coding.builder().system(Uri.of(ValidationSupport.UCUM_CODE_SYSTEM_URL)).code(Code.of(\"mg/dL\")).build()), \"elementName\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjk4Ng==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473316986", "bodyText": "I'm surprised it didn't hit Location as well.", "author": "prb112", "createdAt": "2020-08-19T21:02:59Z", "path": "fhir-tools/src/main/java/com/ibm/fhir/tools/CodeGenerator.java", "diffHunk": "@@ -1260,6 +1261,8 @@ private String getSyntaxBasedValueSetValidationMethod(String valueSet, String fi\n         String suffix = fieldType + (isRepeating ? \"s\" : \"\");\n         if (ALL_LANG_VALUE_SET_URL.equals(valueSet)) {\n             return \"checkLanguage\" + suffix;\n+        } else if (UCUM_UNITS_VALUE_SET_URL.equals(valueSet)) {\n+            return \"checkUcum\" + suffix;", "originalCommit": "7725fe034c64adb4b24ad68ae8347b183214727c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1Mjk4Nw==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474152987", "bodyText": "Not sure what you're referring to here - don't see any UCUM value sets used in the Location resource.", "author": "michaelwschroeder", "createdAt": "2020-08-20T17:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODI5OA==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474808298", "bodyText": "I'm just surprised there were not any. It feels like a resource that can benefit from ucum consistency.", "author": "prb112", "createdAt": "2020-08-21T16:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNjk4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxODA0OQ==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473318049", "bodyText": "It'd be great to turn this on / and off like we've done with some other validation features.\nThat way we have an opportunity to still extract or tell someone how to extract bad data.", "author": "prb112", "createdAt": "2020-08-19T21:04:33Z", "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -298,6 +300,105 @@ public static void checkLanguageCodeableConcept(CodeableConcept language, String\n         }\n     }\n         \n+    /**\n+     * Checks that each UCUM code in the list has a valid UCUM syntax.\n+     * @param ucumCodes the UCUM code list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code list is not valid\n+     */\n+    public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n+        if (ucumCodes != null) {\n+            for (Code ucumCode : ucumCodes) {\n+                checkUcumCode(ucumCode, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM code has a valid UCUM syntax.\n+     * @param ucumCode the UCUM code\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code is not valid\n+     */\n+    public static void checkUcumCode(Code ucumCode, String elementName) {\n+        if (ucumCode != null) {\n+            String ucumCodeValue = ucumCode.getValue();\n+            if (!UCUMUtil.isValidUcum(ucumCodeValue)) {\n+               throw new IllegalStateException(String.format(\"'%s' is not a valid UCUM code\", ucumCodeValue));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM coding in the list has a valid UCUM syntax.\n+     * @param ucumCodings the UCUM coding list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding list is not valid\n+     */\n+    public static void checkUcumCodings(List<Coding> ucumCodings, String elementName) {\n+        if (ucumCodings != null) {\n+            for (Coding ucumCoding : ucumCodings) {\n+                checkUcumCoding(ucumCoding, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM coding has a valid UCUM syntax.\n+     * @param ucumCoding the UCUM coding\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding is not valid\n+     */\n+    public static void checkUcumCoding(Coding ucumCoding, String elementName) {\n+        if (ucumCoding != null) {\n+            if (hasSystemAndCodeValues(ucumCoding)) {\n+                if (!UCUM_CODE_SYSTEM_URL.equals(ucumCoding.getSystem().getValue())) {\n+                    throw new IllegalStateException(String.format(\"UCUM system is not '%s'\", UCUM_CODE_SYSTEM_URL));\n+                }\n+                checkUcumCode(ucumCoding.getCode(), elementName);\n+                return;\n+            }\n+            throw new IllegalStateException(String.format(\"'%s' does not contain a UCUM system of '%s' and a valid UCUM code\", elementName, UCUM_CODE_SYSTEM_URL));\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM codeable concept in the list has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcepts the UCUM codeable concept list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM codeable concept list is not valid\n+     */\n+    public static void checkUcumCodeableConcepts(List<CodeableConcept> ucumCodeableConcepts, String elementName) {\n+        if (ucumCodeableConcepts != null) {\n+            for (CodeableConcept ucumCodeableConcept : ucumCodeableConcepts) {\n+                checkUcumCodeableConcept(ucumCodeableConcept, elementName);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that the UCUM codeable concept has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcept the UCUM codeable concept\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM codeable concept is not valid\n+     */\n+    public static void checkUcumCodeableConcept(CodeableConcept ucumCodeableConcept, String elementName) {", "originalCommit": "7725fe034c64adb4b24ad68ae8347b183214727c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1NDI5Mw==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474154293", "bodyText": "We discussed doing this more widely - something we'd address in issue #1421 - and making sure it applies to the UCUM and language syntax validation as well.", "author": "michaelwschroeder", "createdAt": "2020-08-20T17:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxODA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4", "chunk": "diff --git a/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java b/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java\nindex 7d3192d366..632dfb15b3 100644\n--- a/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java\n+++ b/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java\n\n@@ -304,7 +306,7 @@ public final class ValidationSupport {\n      * Checks that each UCUM code in the list has a valid UCUM syntax.\n      * @param ucumCodes the UCUM code list\n      * @param elementName the element name\n-     * @throws IllegalStateException if the passed UCUM code list is not valid\n+     * @throws IllegalStateException if any code in the list is not valid\n      */\n     public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n         if (ucumCodes != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0Mzk1NA==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473443954", "bodyText": "This could be refactored a little into one if statement and the else could be the checkUcumCode (it feels super nested)  also ucumCoding.getSystem is this ever null on 355? maybe just combine this with 354 and 355", "author": "prb112", "createdAt": "2020-08-19T23:46:23Z", "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -298,6 +300,105 @@ public static void checkLanguageCodeableConcept(CodeableConcept language, String\n         }\n     }\n         \n+    /**\n+     * Checks that each UCUM code in the list has a valid UCUM syntax.\n+     * @param ucumCodes the UCUM code list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code list is not valid\n+     */\n+    public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n+        if (ucumCodes != null) {\n+            for (Code ucumCode : ucumCodes) {\n+                checkUcumCode(ucumCode, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM code has a valid UCUM syntax.\n+     * @param ucumCode the UCUM code\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code is not valid\n+     */\n+    public static void checkUcumCode(Code ucumCode, String elementName) {\n+        if (ucumCode != null) {\n+            String ucumCodeValue = ucumCode.getValue();\n+            if (!UCUMUtil.isValidUcum(ucumCodeValue)) {\n+               throw new IllegalStateException(String.format(\"'%s' is not a valid UCUM code\", ucumCodeValue));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM coding in the list has a valid UCUM syntax.\n+     * @param ucumCodings the UCUM coding list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding list is not valid\n+     */\n+    public static void checkUcumCodings(List<Coding> ucumCodings, String elementName) {\n+        if (ucumCodings != null) {\n+            for (Coding ucumCoding : ucumCodings) {\n+                checkUcumCoding(ucumCoding, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM coding has a valid UCUM syntax.\n+     * @param ucumCoding the UCUM coding\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding is not valid\n+     */\n+    public static void checkUcumCoding(Coding ucumCoding, String elementName) {\n+        if (ucumCoding != null) {\n+            if (hasSystemAndCodeValues(ucumCoding)) {\n+                if (!UCUM_CODE_SYSTEM_URL.equals(ucumCoding.getSystem().getValue())) {", "originalCommit": "7725fe034c64adb4b24ad68ae8347b183214727c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1ODQ4OQ==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474158489", "bodyText": "I need the if check on line 353 by itself b/c I don't want to return an exception if the coding is null. The if check on line 354 is just to verify that I have values for both system and code. If I don't, I can skip validating those fields separately since I know the coding is not valid without both system and code values. I can move the checkUcumCode to an else leg for the if check on line 355 (ucumCoding.getSystem will never be null here due to the checking in line above in the hasSystemAndCodeValues method)", "author": "michaelwschroeder", "createdAt": "2020-08-20T17:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0Mzk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4", "chunk": "diff --git a/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java b/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java\nindex 7d3192d366..632dfb15b3 100644\n--- a/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java\n+++ b/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java\n\n@@ -304,7 +306,7 @@ public final class ValidationSupport {\n      * Checks that each UCUM code in the list has a valid UCUM syntax.\n      * @param ucumCodes the UCUM code list\n      * @param elementName the element name\n-     * @throws IllegalStateException if the passed UCUM code list is not valid\n+     * @throws IllegalStateException if any code in the list is not valid\n      */\n     public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n         if (ucumCodes != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ1NDA4NQ==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r473454085", "bodyText": "when the for loop succeeds and the coding is checked it can throw an illegalState?  I don't think it should return  elementName as part of the String.format, it's difficult to  back track in the error to the actual failing element", "author": "prb112", "createdAt": "2020-08-20T00:01:05Z", "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -298,6 +300,105 @@ public static void checkLanguageCodeableConcept(CodeableConcept language, String\n         }\n     }\n         \n+    /**\n+     * Checks that each UCUM code in the list has a valid UCUM syntax.\n+     * @param ucumCodes the UCUM code list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code list is not valid\n+     */\n+    public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n+        if (ucumCodes != null) {\n+            for (Code ucumCode : ucumCodes) {\n+                checkUcumCode(ucumCode, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM code has a valid UCUM syntax.\n+     * @param ucumCode the UCUM code\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM code is not valid\n+     */\n+    public static void checkUcumCode(Code ucumCode, String elementName) {\n+        if (ucumCode != null) {\n+            String ucumCodeValue = ucumCode.getValue();\n+            if (!UCUMUtil.isValidUcum(ucumCodeValue)) {\n+               throw new IllegalStateException(String.format(\"'%s' is not a valid UCUM code\", ucumCodeValue));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM coding in the list has a valid UCUM syntax.\n+     * @param ucumCodings the UCUM coding list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding list is not valid\n+     */\n+    public static void checkUcumCodings(List<Coding> ucumCodings, String elementName) {\n+        if (ucumCodings != null) {\n+            for (Coding ucumCoding : ucumCodings) {\n+                checkUcumCoding(ucumCoding, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM coding has a valid UCUM syntax.\n+     * @param ucumCoding the UCUM coding\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM coding is not valid\n+     */\n+    public static void checkUcumCoding(Coding ucumCoding, String elementName) {\n+        if (ucumCoding != null) {\n+            if (hasSystemAndCodeValues(ucumCoding)) {\n+                if (!UCUM_CODE_SYSTEM_URL.equals(ucumCoding.getSystem().getValue())) {\n+                    throw new IllegalStateException(String.format(\"UCUM system is not '%s'\", UCUM_CODE_SYSTEM_URL));\n+                }\n+                checkUcumCode(ucumCoding.getCode(), elementName);\n+                return;\n+            }\n+            throw new IllegalStateException(String.format(\"'%s' does not contain a UCUM system of '%s' and a valid UCUM code\", elementName, UCUM_CODE_SYSTEM_URL));\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM codeable concept in the list has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcepts the UCUM codeable concept list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM codeable concept list is not valid\n+     */\n+    public static void checkUcumCodeableConcepts(List<CodeableConcept> ucumCodeableConcepts, String elementName) {\n+        if (ucumCodeableConcepts != null) {\n+            for (CodeableConcept ucumCodeableConcept : ucumCodeableConcepts) {\n+                checkUcumCodeableConcept(ucumCodeableConcept, elementName);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that the UCUM codeable concept has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcept the UCUM codeable concept\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the passed UCUM codeable concept is not valid\n+     */\n+    public static void checkUcumCodeableConcept(CodeableConcept ucumCodeableConcept, String elementName) {\n+        if (ucumCodeableConcept != null) {\n+            if (ucumCodeableConcept.getCoding() != null) {\n+                for (Coding coding : ucumCodeableConcept.getCoding()) {\n+                    if (coding != null) {\n+                        try {\n+                            checkUcumCoding(coding, elementName);\n+                            return;\n+                        }\n+                        catch (IllegalStateException e) {}\n+                    }\n+                }\n+            }\n+            throw new IllegalStateException(String.format(\"'%s' does not contain a Coding with a UCUM system of '%s' and a valid UCUM code\", elementName, UCUM_CODE_SYSTEM_URL));", "originalCommit": "7725fe034c64adb4b24ad68ae8347b183214727c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MjI0Ng==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474162246", "bodyText": "In this case we're just looking for one valid Coding. The checkUcumCoding method will return an IllegalStateException if a coding is not valid, so we want to just catch the exception and continue processing codings until we find a valid one, at which point we return from the method. If no valid codings are found we drop out of the loop and throw the IllegalStateException. For the error msg, do you suggest I just omit the CodeableConcept element name, or should I be providing something else there?", "author": "michaelwschroeder", "createdAt": "2020-08-20T17:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ1NDA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4", "chunk": "diff --git a/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java b/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java\nindex 7d3192d366..632dfb15b3 100644\n--- a/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java\n+++ b/fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java\n\n@@ -304,7 +306,7 @@ public final class ValidationSupport {\n      * Checks that each UCUM code in the list has a valid UCUM syntax.\n      * @param ucumCodes the UCUM code list\n      * @param elementName the element name\n-     * @throws IllegalStateException if the passed UCUM code list is not valid\n+     * @throws IllegalStateException if any code in the list is not valid\n      */\n     public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n         if (ucumCodes != null) {\n"}}, {"oid": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4", "url": "https://github.com/IBM/FHIR/commit/bca4959ec4e9ac7f8f369b389e2eeb12a6608da4", "message": "Issue #694 - Update validation per new rules in issue #1421\n\nSigned-off-by: Mike Schroeder <mschroed@us.ibm.com>", "committedDate": "2020-08-21T18:45:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkwMDYzMQ==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474900631", "bodyText": "Will checkLanguageCodeableConcept(...) method be updated with similar logic to this method?", "author": "tbieste", "createdAt": "2020-08-21T19:38:43Z", "path": "fhir-model/src/main/java/com/ibm/fhir/model/util/ValidationSupport.java", "diffHunk": "@@ -298,6 +302,109 @@ public static void checkLanguageCodeableConcept(CodeableConcept language, String\n         }\n     }\n         \n+    /**\n+     * Checks that each UCUM code in the list has a valid UCUM syntax.\n+     * @param ucumCodes the UCUM code list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if any code in the list is not valid\n+     */\n+    public static void checkUcumCodes(List<Code> ucumCodes, String elementName) {\n+        if (ucumCodes != null) {\n+            for (Code ucumCode : ucumCodes) {\n+                checkUcumCode(ucumCode, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM code has a valid UCUM syntax.\n+     * @param ucumCode the UCUM code\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the code is not valid\n+     */\n+    public static void checkUcumCode(Code ucumCode, String elementName) {\n+        if (ucumCode != null) {\n+            String ucumCodeValue = ucumCode.getValue();\n+            if (!UCUMUtil.isValidUcum(ucumCodeValue)) {\n+               throw new IllegalStateException(String.format(\"'%s' is not a valid UCUM code\", ucumCodeValue));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM coding in the list has a valid UCUM syntax.\n+     * @param ucumCodings the UCUM coding list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if any coding in the list is not valid\n+     */\n+    public static void checkUcumCodings(List<Coding> ucumCodings, String elementName) {\n+        if (ucumCodings != null) {\n+            for (Coding ucumCoding : ucumCodings) {\n+                checkUcumCoding(ucumCoding, elementName);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Checks that the UCUM coding has a valid UCUM syntax.\n+     * @param ucumCoding the UCUM coding\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the coding is not valid\n+     */\n+    public static void checkUcumCoding(Coding ucumCoding, String elementName) {\n+        if (ucumCoding != null) {\n+            if (hasSystemAndCodeValues(ucumCoding)) {\n+                if (!UCUM_CODE_SYSTEM_URL.equals(ucumCoding.getSystem().getValue())) {\n+                    throw new IllegalStateException(String.format(\"UCUM system is not '%s'\", UCUM_CODE_SYSTEM_URL));\n+                } else {\n+                    checkUcumCode(ucumCoding.getCode(), elementName);\n+                }\n+                return;\n+            }\n+            throw new IllegalStateException(String.format(\"Coding does not contain a UCUM system of '%s' and a valid UCUM code\", UCUM_CODE_SYSTEM_URL));\n+        }\n+    }\n+\n+    /**\n+     * Checks that each UCUM codeable concept in the list has at least one coding with a valid UCUM syntax.\n+     * @param ucumCodeableConcepts the UCUM codeable concept list\n+     * @param elementName the element name\n+     * @throws IllegalStateException if andy codeable concept in the list is not valid\n+     */\n+    public static void checkUcumCodeableConcepts(List<CodeableConcept> ucumCodeableConcepts, String elementName) {\n+        if (ucumCodeableConcepts != null) {\n+            for (CodeableConcept ucumCodeableConcept : ucumCodeableConcepts) {\n+                checkUcumCodeableConcept(ucumCodeableConcept, elementName);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks that the UCUM codeable concept has at least one coding with a valid UCUM syntax,\n+     * or at least one coding with no system or code element specified, but containing a\n+     * data-absent-reason extension.\n+     * @param ucumCodeableConcept the UCUM codeable concept\n+     * @param elementName the element name\n+     * @throws IllegalStateException if the codeable concept is not valid\n+     */\n+    public static void checkUcumCodeableConcept(CodeableConcept ucumCodeableConcept, String elementName) {\n+        if (ucumCodeableConcept != null) {\n+            if (ucumCodeableConcept.getCoding() != null) {\n+                for (Coding coding : ucumCodeableConcept.getCoding()) {\n+                    if (hasSystemOrCodeElements(coding)) {\n+                        try {\n+                            checkUcumCoding(coding, elementName);\n+                            return;\n+                        } catch (IllegalStateException e) {}\n+                    } else if (hasDataAbsentReasonExtension(coding)) {", "originalCommit": "bca4959ec4e9ac7f8f369b389e2eeb12a6608da4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkwNTM2NA==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474905364", "bodyText": "Yes, that will be done under issue #1421 when the new validation rules will be enforced for all required bindings.", "author": "michaelwschroeder", "createdAt": "2020-08-21T19:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkwMDYzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkwNzQwNA==", "url": "https://github.com/IBM/FHIR/pull/1430#discussion_r474907404", "bodyText": "Got it. Thanks!", "author": "tbieste", "createdAt": "2020-08-21T19:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkwMDYzMQ=="}], "type": "inlineReview", "revised_code": null}]}