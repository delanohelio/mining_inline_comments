{"pr_number": 788, "pr_title": "Issue #833 - prototype migration and add automated migration test", "pr_createdAt": "2020-03-16T12:35:28Z", "pr_url": "https://github.com/IBM/FHIR/pull/788", "timeline": [{"oid": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "url": "https://github.com/IBM/FHIR/commit/f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "message": "Add support for arbitrary database migration logic\n\nThis proof-of-concept extends our fhir-database-utils project with the\nability to define pre and post-migration steps for cases where an\nidempotent \"apply\" just isn't enough.\n\nIt also illustrates the usage in two places:\n1. drop the DATE_VALUE column and reorg all X_DATE_VALUES tables\n2. drop the ENFORCED FK constraints in all X_COMPOSITES tables\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-16T13:09:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393665602", "bodyText": "I think you need to run this... https://dba.stackexchange.com/a/30233/202822\nI think this should be a second set of parameters.", "author": "prb112", "createdAt": "2020-03-17T13:09:12Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Reorg the schema.table\n+ */\n+public class ReorgTable implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public ReorgTable(String schemaName, String tableName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(tableName);\n+        this.schemaName = schemaName;\n+        this.tableName = tableName;\n+    }\n+\n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        final String ddl = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" + qname + \"')\";", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTMxOQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r394451319", "bodyText": "that answer is from 2012, i wonder if its still the \"best practice\".  it even mentions that the first runstats is more for older version...", "author": "lmsurpre", "createdAt": "2020-03-18T15:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MTc2MA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r394451760", "bodyText": "RUNSTATS\nREORG\nRUNSTATS\nREBIND packages\nFLUSH PACKAGE CACHE DYNAMIC\n\ni wonder how long all that takes?\nat least with db2 on cloud, it should be running runstats automatically, although maybe its still \"best practice\" to run it before and after the reorg...will add it for now", "author": "lmsurpre", "createdAt": "2020-03-18T15:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1Njc1NA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r394456754", "bodyText": "on the dataset we had it took 10s of minutes in total", "author": "prb112", "createdAt": "2020-03-18T15:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxODg1NQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398818855", "bodyText": "I added the requested logic in Db2Adapter.runStatement...but I only did the RUNSTATS sandwhich and not the rebind/flush for now.\nThen, later I decided that maybe the whole REORG statement is db2-specific, so I renamed the class to Db2ReorgTable (so I guess I could have had the logic here all-along...).", "author": "lmsurpre", "createdAt": "2020-03-26T18:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NTYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2ReorgTable.java\nsimilarity index 80%\nrename from fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java\nrename to fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2ReorgTable.java\nindex 46b9466cb3..1884541b1a 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2ReorgTable.java\n\n@@ -1,10 +1,10 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.database.utils.common;\n+package com.ibm.fhir.database.utils.db2;\n \n import java.sql.Connection;\n import java.sql.SQLException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NzQ5Ng==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393667496", "bodyText": "might as well push this into the interface as a default implementation.", "author": "prb112", "createdAt": "2020-03-17T13:12:11Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/NopObject.java", "diffHunk": "@@ -33,6 +33,11 @@ public void apply(IDatabaseAdapter target) {\n         // We're NOP so we do nothing on purpose\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5NjU2OQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398896569", "bodyText": "didn't end up doing this one but can if you think its important.\ninstead, i opted to add \"ThrowUnsupportedOperationException\" in cases where we're trying to update objects that we shouldn't (i.e. tablespace and sequence).", "author": "lmsurpre", "createdAt": "2020-03-26T21:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NzQ5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODg1NQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393668855", "bodyText": "don't do anything here. we shouldn't make a new tablespace, or alter here.", "author": "prb112", "createdAt": "2020-03-17T13:14:31Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java", "diffHunk": "@@ -44,6 +44,17 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5Njk3OA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398896978", "bodyText": "now it throws if you try doing an update:\n        if (priorVersion != null && priorVersion > 0) {\n            throw new UnsupportedOperationException(\"Modifying tablespaces is not supported\");\n        }\n        apply(target);", "author": "lmsurpre", "createdAt": "2020-03-26T21:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java\nindex f96960915c..1c1334f587 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java\n\n@@ -46,13 +46,10 @@ public class Tablespace extends DatabaseObject {\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        if (this.extentSizeKB > 0) {\n-            target.createTablespace(getName(), this.extentSizeKB);\n-        }\n-        else {\n-            // Use database default\n-            target.createTablespace(getName());\n+        if (priorVersion != null && priorVersion > 0) {\n+            throw new UnsupportedOperationException(\"Modifying tablespaces is not supported\");\n         }\n+        apply(target);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3OTUwOA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393679508", "bodyText": "I've been reading through the steps included.  I think we should add Migration to the VERSION_HISTORY tracking table and DatabaseObjectType.\nWithout these steps, it'd be impossible to resume the specific migration in a deterministic way.  For instance, alter table would not work again, and fail.", "author": "prb112", "createdAt": "2020-03-17T13:30:25Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java", "diffHunk": "@@ -31,28 +31,34 @@\n  * BaseObject\n  */\n public abstract class BaseObject implements IDatabaseObject {\n-    \n+\n     private static final Logger logger = Logger.getLogger(BaseObject.class.getName());\n-    \n+\n     // Used to randomize a sleep after a deadlock failure\n     private static final SecureRandom random = new SecureRandom();\n-    \n+\n     private final String schemaName;\n     private final String objectName;\n     private final DatabaseObjectType objectType;\n-    \n+\n     // tag map\n     private final Map<String,String> tags = new HashMap<>();\n-    \n+\n     // the database objects we depend on\n     private final Set<IDatabaseObject> dependencies = new HashSet<>();\n \n     // The privileges granted to different types of user\n     private final Map<String, Set<Privilege>> userPrivilegeMap = new HashMap<>();\n-    \n+\n     // The version number of the application schema this object applies to\n     private final int version;\n-    \n+\n+    // Steps to perform before updating from a previous version of this object\n+    protected final List<Migration> preSteps;\n+\n+    // Steps to perform after updating from a previous version of this object\n+    protected final List<Migration> postSteps;", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5OTE1NQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398899155", "bodyText": "The updates should happen together in a transaction and should either fail or succeed together.\nThe migration steps themselves should have the logic of what versions they apply to and what versions they don't.\nWith that said, I'm not fundamentally opposed to adding Migrations to the VERSION_HISTORY if you think its important.", "author": "lmsurpre", "createdAt": "2020-03-26T21:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3OTUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzODk3OQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399338979", "bodyText": "I think this is something we probably want to monitor if we transform data from one column to another.  I also think our re-indexing should resolve my concern (more of an intuition)\nI think for what we have right now.  This is sufficient.", "author": "prb112", "createdAt": "2020-03-27T15:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3OTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java\nindex 76eed028bc..11d99d35ec 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/BaseObject.java\n\n@@ -51,13 +51,10 @@ public abstract class BaseObject implements IDatabaseObject {\n     private final Map<String, Set<Privilege>> userPrivilegeMap = new HashMap<>();\n \n     // The version number of the application schema this object applies to\n-    private final int version;\n+    protected final int version;\n \n-    // Steps to perform before updating from a previous version of this object\n-    protected final List<Migration> preSteps;\n-\n-    // Steps to perform after updating from a previous version of this object\n-    protected final List<Migration> postSteps;\n+    // Steps to perform to upgrade from any previous version of the schema to the new version\n+    protected final List<Migration> migrations;\n \n     /**\n      * Public constructor\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTE3Mg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681172", "bodyText": "I like this approach 1..* instead of one at a time.", "author": "prb112", "createdAt": "2020-03-17T13:33:01Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Drop columns from the schema.table\n+ */\n+public class DropForeignKeyConstraint implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+    private final List<String> constraintNames;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public DropForeignKeyConstraint(String schemaName, String tableName, String... constraintName) {", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java\nindex dfaf4e5991..64c527f189 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2019, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTI0Mw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681243", "bodyText": "2020\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019\n          \n          \n            \n             * (C) Copyright IBM Corp. 2019, 2020", "author": "prb112", "createdAt": "2020-03-17T13:33:07Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5OTM4Ng==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398899386", "bodyText": "done", "author": "lmsurpre", "createdAt": "2020-03-26T21:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java\nindex dfaf4e5991..64c527f189 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropForeignKeyConstraint.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2019, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTUzOQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681539", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:33:32Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/AllVersionHistoryService.java", "diffHunk": "@@ -22,4 +22,10 @@ public boolean applies(String objectSchema, String objectType, String objectName\n         return true;\n     }\n \n+    @Override", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTY4Ng==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681686", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:33:42Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IVersionHistoryService.java", "diffHunk": "@@ -7,7 +7,7 @@\n package com.ibm.fhir.database.utils.api;", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IVersionHistoryService.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IVersionHistoryService.java\nindex b55044be5d..7c0a4fd51e 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IVersionHistoryService.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/api/IVersionHistoryService.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2019, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MTgzMA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393681830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright IBM Corp. 2019\n          \n          \n            \n             * (C) Copyright IBM Corp. 2019, 2020", "author": "prb112", "createdAt": "2020-03-17T13:33:57Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java\nindex f25e9fa8ef..8b9bc7c7cb 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2019, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mjc2OA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393682768", "bodyText": "I'm leaning towards NOT dropping columns...\n1 - we always leave a rollback point with the original data, and we can MOVE the data at any point, or re-index.\n2 - it should be relatively transparent.\nThoughts?", "author": "prb112", "createdAt": "2020-03-17T13:35:17Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Drop columns from the schema.table\n+ */\n+public class DropColumn implements IDatabaseStatement {", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzU5Mg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r394513592", "bodyText": "I'm torn on it.  I'd prefer not to create it going forward since its never used.  But I don't like the idea of some deployments having it and others not.  Hence the idea to drop it.  I think we could add a step to copy the data from that column into the LOW and HIGH columns if it makes us feel better.\nHowever, I'd prefer to just tell the 2 people that installed version 4.0.0 that they need to be aware of it and just be done.", "author": "lmsurpre", "createdAt": "2020-03-18T17:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mjc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwMTY5OQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398901699", "bodyText": "We discussed as a team and decided to NOT drop the old column.\nWe do drop the indices that were using the column though.\nAlso, we will not be adding the column going forward, so users on version 4.0.1 that upgrade to 4.1.0 or higher will have this extra column sitting around.\nAlso, we do NOT copy this older column's data into the DATE_START or DATE_END columns, so any old resources that had date values indexed should get updated to use the new approach.", "author": "lmsurpre", "createdAt": "2020-03-26T21:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mjc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java\nindex f25e9fa8ef..8b9bc7c7cb 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/DropColumn.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2019, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MzQ3Ng==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393683476", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:36:21Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "diffHunk": "@@ -16,7 +16,7 @@\n import com.ibm.fhir.task.api.ITaskGroup;\n \n /**\n- * Defines the Database Object's expected methods. \n+ * Defines the Database Object's expected methods.", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mzk2Mg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393683962", "bodyText": "I'd say add a NO OP default here.  It'll be fairly repeatable for StoredProcedures or other NO OP content such as Tablespaces.", "author": "prb112", "createdAt": "2020-03-17T13:37:04Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/IDatabaseObject.java", "diffHunk": "@@ -25,21 +25,29 @@\n      * @return\n      */\n     public int getVersion();\n-    \n+\n     /**\n      * Apply the DDL for this object to the target database\n+     * @param priorVersion\n      * @param target the database target\n      */\n     public void apply(IDatabaseAdapter target);\n-    \n+\n+    /**\n+     * Apply migration logic to bring the target database to the current level of this object\n+     * @param priorVersion\n+     * @param target the database target\n+     */\n+    public void apply(Integer priorVersion, IDatabaseAdapter target);", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDU5Ng==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398924596", "bodyText": "didn't end up doing this one but can if you think its important.\ninstead, i opted to add \"ThrowUnsupportedOperationException\" in cases where we're trying to update objects that we shouldn't (i.e. tablespace and sequence).", "author": "lmsurpre", "createdAt": "2020-03-26T22:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4Mzk2Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTI0NQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393685245", "bodyText": "I think documenting the method.\nStarting from the prior version, the Migration implements as a set of steps that are sequentially executed.\nAlso the set of IDatabaseStatements, maybe they should indicate if each step is idempotent.\nAlso a minor comment, to be consistent in this code base, shouldn't it be IMigration.", "author": "prb112", "createdAt": "2020-03-17T13:38:59Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Migration.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package com.ibm.fhir.database.utils.model;\n+\n+import java.util.List;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+\n+/**\n+ * A database migration step\n+ */\n+public interface Migration {\n+    public List<IDatabaseStatement> migrateFrom(Integer priorVersion);", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMjQ2Mw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398932463", "bodyText": "added this javadoc:\n    /**\n     * Migrate from some previous version to the current version of this database object\n     *\n     * @param priorVersion\n     *            the version being migrated from\n     * @return a list of statements to be executed sequentially to bring a database object from the prior version to the\n     *         current version\n     * @implSpec this method should only be executed when the current version > priorVersion and so the steps need not be\n     *         idempotent\n     */\n\n\nAlso a minor comment, to be consistent in this code base, shouldn't it be IMigration.\n\nI'm pretending I didn't see this part ;-). @JohnTimm", "author": "lmsurpre", "createdAt": "2020-03-26T22:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTI0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6def9cd7523b16280531242ca959bb9bf8e4268e", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Migration.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Migration.java\nindex db42539d82..4952d12d32 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Migration.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Migration.java\n\n@@ -13,5 +13,16 @@ import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n  * A database migration step\n  */\n public interface Migration {\n+\n+    /**\n+     * Migrate from some previous version to the current version of this database object\n+     *\n+     * @param priorVersion\n+     *            the version being migrated from\n+     * @return a list of statements to be executed sequentially to bring a database object from the prior version to the\n+     *         current version\n+     * @implSpec this method should only be executed when the current version > priorVersion and so the steps need not be\n+     *         idempotent\n+     */\n     public List<IDatabaseStatement> migrateFrom(Integer priorVersion);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTU1NQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393685555", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:39:30Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ObjectGroup.java", "diffHunk": "@@ -22,10 +22,10 @@\n \n     // the list of objects in our group\n     private final List<IDatabaseObject> group = new ArrayList<>();\n-    \n+", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTczOA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393685738", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:39:49Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/PhysicalDataModel.java", "diffHunk": "@@ -32,27 +32,27 @@\n  */\n public class PhysicalDataModel implements IDataModel {\n     private static final Logger logger = Logger.getLogger(PhysicalDataModel.class.getName());\n-    \n+", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTg0MQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393685841", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:39:59Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -12,14 +12,13 @@\n import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n \n /**\n- * The definition of a stored procedure, whose content is provided by a Supplier<String>\n- * function\n+ * The definition of a stored procedure, whose content is provided by a Supplier<String> function", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0ab3c857a40430fc0c72b1edf932578dfec61e3", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\nindex 13f30f9c0a..d5c6ed86bd 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\n\n@@ -8,6 +8,7 @@ package com.ibm.fhir.database.utils.model;\n \n import java.util.Set;\n import java.util.function.Supplier;\n+import java.util.logging.Logger;\n \n import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjIyOA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393686228", "bodyText": "Yes, pre-migration logic makes sense here.\nAs does post-migration logic.", "author": "prb112", "createdAt": "2020-03-17T13:40:34Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the\n+        // horrible deadlocks we keep getting\n+        synchronized(target) {\n+            // TODO migration logic here?", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NjQ1MA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398946450", "bodyText": "pre and post-migration logic has been replaced by a single list of \"migrations\" for now.\nif we end up needing pre and post-migration logic for procedures, we'll need to revisit that later.\nfor now, i'm just logging a warning if we get to ProcedureDef.apply(priorVersion, target) with migration steps, because instead it just calls apply (which invokes create or replace)", "author": "lmsurpre", "createdAt": "2020-03-26T23:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "c0ab3c857a40430fc0c72b1edf932578dfec61e3", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\nindex 13f30f9c0a..d5c6ed86bd 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\n\n@@ -36,18 +38,20 @@ public class ProcedureDef extends BaseObject {\n         // Serialize the execution of the procedure, to try and avoid the\n         // horrible deadlocks we keep getting\n         synchronized(target) {\n-            target.createProcedure(getSchemaName(), getObjectName(), supplier);\n+            target.createOrReplaceProcedure(getSchemaName(), getObjectName(), supplier);\n         }\n     }\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        // Serialize the execution of the procedure, to try and avoid the\n-        // horrible deadlocks we keep getting\n-        synchronized(target) {\n-            // TODO migration logic here?\n-            target.createProcedure(getSchemaName(), getObjectName(), supplier);\n+        if (priorVersion != null && priorVersion > 0 && this.getVersion() > priorVersion) {\n+            if (!migrations.isEmpty()) {\n+                logger.warning(\"Found \" + migrations.size() + \" migration steps, but performing 'create or replace' instead\");\n+            }\n         }\n+\n+        // Procedures are applied with \"Create or replace\", so just do a regular apply\n+        apply(target);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjgyNA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393686824", "bodyText": "how does synchronized help with deadlocks here? it's synchronized in java code? I realize you are not the original person to author it... but if you know...", "author": "prb112", "createdAt": "2020-03-17T13:41:24Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0NzA3OQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398947079", "bodyText": "i guess the idea is just to allow a single thread to call createOrReplaceProcedure at a time (for a given target at least)...i wonder if we should do something similar for adding foreign key constraints...", "author": "lmsurpre", "createdAt": "2020-03-26T23:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MDQwMw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399340403", "bodyText": "that's a good point... now we thought it out, let's monitor it and make it consistent if we need to", "author": "prb112", "createdAt": "2020-03-27T15:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NjgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "c0ab3c857a40430fc0c72b1edf932578dfec61e3", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\nindex 13f30f9c0a..d5c6ed86bd 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\n\n@@ -36,18 +38,20 @@ public class ProcedureDef extends BaseObject {\n         // Serialize the execution of the procedure, to try and avoid the\n         // horrible deadlocks we keep getting\n         synchronized(target) {\n-            target.createProcedure(getSchemaName(), getObjectName(), supplier);\n+            target.createOrReplaceProcedure(getSchemaName(), getObjectName(), supplier);\n         }\n     }\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        // Serialize the execution of the procedure, to try and avoid the\n-        // horrible deadlocks we keep getting\n-        synchronized(target) {\n-            // TODO migration logic here?\n-            target.createProcedure(getSchemaName(), getObjectName(), supplier);\n+        if (priorVersion != null && priorVersion > 0 && this.getVersion() > priorVersion) {\n+            if (!migrations.isEmpty()) {\n+                logger.warning(\"Found \" + migrations.size() + \" migration steps, but performing 'create or replace' instead\");\n+            }\n         }\n+\n+        // Procedures are applied with \"Create or replace\", so just do a regular apply\n+        apply(target);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzM1NA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393687354", "bodyText": "I actually agree with Reorg.\nI don't think it should be Reorg Table\nYou can reorg indices as well and other database objects.", "author": "prb112", "createdAt": "2020-03-17T13:42:14Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Reorg.java", "diffHunk": "@@ -1,14 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2019\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.database.utils.model;\n-\n-/**\n- * Representing the SQL function\n- */\n-public class Reorg {", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0Nzc5MQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398947791", "bodyText": "well the javadoc and the arguments all say table... how about Db2Reorg?\ndoes Reorg apply to other dbs besides Db2?", "author": "lmsurpre", "createdAt": "2020-03-26T23:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MTYwMw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399341603", "bodyText": "That's a good question.  MSSQL uses REORGANIZE https://docs.microsoft.com/en-us/sql/relational-databases/indexes/reorganize-and-rebuild-indexes?view=sql-server-ver15", "author": "prb112", "createdAt": "2020-03-27T15:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MTcxMg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399341712", "bodyText": "I'm OK resolving.", "author": "prb112", "createdAt": "2020-03-27T15:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzM1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4ODE0Mw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393688143", "bodyText": "we should leave a note here to make it intentional that grants should be carefully evaluated to see if there is an update required in the Migration step, such as a change to the operational user.", "author": "prb112", "createdAt": "2020-03-17T13:43:22Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java", "diffHunk": "@@ -44,17 +40,23 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        // Serialize the execution of the procedure, to try and avoid the\n+        // horrible deadlocks we keep getting\n+        synchronized(target) {\n+            // TODO migration logic here?\n+            target.createProcedure(getSchemaName(), getObjectName(), supplier);\n+        }\n+    }\n+\n     @Override\n     public void drop(IDatabaseAdapter target) {\n         target.dropProcedure(getSchemaName(), getObjectName());\n     }\n-    \n-       @Override\n-       protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n-            target.grantProcedurePrivileges(getSchemaName(), getObjectName(), group, toUser);\n-        }\n \n+    @Override\n+    protected void grantGroupPrivileges(IDatabaseAdapter target, Set<Privilege> group, String toUser) {\n+        target.grantProcedurePrivileges(getSchemaName(), getObjectName(), group, toUser);", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTEzOQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398949139", "bodyText": "not sure why this code is showing as changed...all I did is fix the indentation.\ndo you think having that comment here makes sense, or is there a spot that makes more sense?\nmaybe at the class level on ProcedureDef?", "author": "lmsurpre", "createdAt": "2020-03-26T23:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4ODE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c0ab3c857a40430fc0c72b1edf932578dfec61e3", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\nindex 13f30f9c0a..d5c6ed86bd 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/ProcedureDef.java\n\n@@ -36,18 +38,20 @@ public class ProcedureDef extends BaseObject {\n         // Serialize the execution of the procedure, to try and avoid the\n         // horrible deadlocks we keep getting\n         synchronized(target) {\n-            target.createProcedure(getSchemaName(), getObjectName(), supplier);\n+            target.createOrReplaceProcedure(getSchemaName(), getObjectName(), supplier);\n         }\n     }\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        // Serialize the execution of the procedure, to try and avoid the\n-        // horrible deadlocks we keep getting\n-        synchronized(target) {\n-            // TODO migration logic here?\n-            target.createProcedure(getSchemaName(), getObjectName(), supplier);\n+        if (priorVersion != null && priorVersion > 0 && this.getVersion() > priorVersion) {\n+            if (!migrations.isEmpty()) {\n+                logger.warning(\"Found \" + migrations.size() + \" migration steps, but performing 'create or replace' instead\");\n+            }\n         }\n+\n+        // Procedures are applied with \"Create or replace\", so just do a regular apply\n+        apply(target);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4ODc2NA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393688764", "bodyText": "I think we should pass in DatabaseObject and choose the object name to reorg or inherit off of the Reorg object (see Reorg below)", "author": "prb112", "createdAt": "2020-03-17T13:44:17Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.database.utils.common;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import com.ibm.fhir.database.utils.api.IDatabaseStatement;\n+import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n+\n+/**\n+ * Reorg the schema.table\n+ */\n+public class ReorgTable implements IDatabaseStatement {\n+    private final String schemaName;\n+    private final String tableName;\n+\n+    /**\n+     * Public constructor\n+     * @param schemaName\n+     * @param tableName\n+     */\n+    public ReorgTable(String schemaName, String tableName) {\n+        DataDefinitionUtil.assertValidName(schemaName);\n+        DataDefinitionUtil.assertValidName(tableName);\n+        this.schemaName = schemaName;\n+        this.tableName = tableName;\n+    }\n+\n+    @Override\n+    public void run(IDatabaseTranslator translator, Connection c) {\n+        final String qname = DataDefinitionUtil.getQualifiedName(schemaName, tableName);\n+        final String ddl = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" + qname + \"')\";", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2ReorgTable.java\nsimilarity index 80%\nrename from fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java\nrename to fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2ReorgTable.java\nindex 46b9466cb3..1884541b1a 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/common/ReorgTable.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/db2/Db2ReorgTable.java\n\n@@ -1,10 +1,10 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.ibm.fhir.database.utils.common;\n+package com.ibm.fhir.database.utils.db2;\n \n import java.sql.Connection;\n import java.sql.SQLException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTMyMg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393689322", "bodyText": "We should only create this one time. I actually don't even think this is in our schema today.", "author": "prb112", "createdAt": "2020-03-17T13:45:08Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java", "diffHunk": "@@ -39,6 +39,11 @@ public void apply(IDatabaseAdapter target) {\n         target.createArrType(getSchemaName(), getObjectName(), rowTypeName, arraySize);\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MDAzOQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398950039", "bodyText": "yeah, i think this was something we used in our old (DSTU2) schema.  it got dropped when we moved to a dynamic statement because I guess those don't support array types or something (Robin knows the details).\nfor now, I've just added the same logic that I added for other things that shouldn't get updated:\n        if (priorVersion != null && priorVersion > 0 && this.version > priorVersion) {\n            throw new UnsupportedOperationException(\"Upgrading row array types is not supported\");\n        }", "author": "lmsurpre", "createdAt": "2020-03-26T23:24:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "8c9b90c2a2b44bd7048963b9a4005c7523ab6b87", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java\nindex d711803625..5b28a8cbfc 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java\n\n@@ -41,7 +41,10 @@ public class RowArrayType extends BaseObject {\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        target.createArrType(getSchemaName(), getObjectName(), rowTypeName, arraySize);\n+        if (priorVersion != null && priorVersion > 0 && this.version > priorVersion) {\n+            throw new UnsupportedOperationException(\"Upgrading row array types is not supported\");\n+        }\n+        apply(target);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTU1MQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393689551", "bodyText": "similar comment to RowType.  we don't actually use it right now.", "author": "prb112", "createdAt": "2020-03-17T13:45:28Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java", "diffHunk": "@@ -29,22 +29,27 @@ public void apply(IDatabaseAdapter target) {\n         target.createRowType(getSchemaName(), getObjectName(), columns);\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        target.createRowType(getSchemaName(), getObjectName(), columns);", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MTU5Mw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398951593", "bodyText": "same resolution as RowArrayType", "author": "lmsurpre", "createdAt": "2020-03-26T23:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "06717900804163e5a059a8bf5e63e931e4160b7d", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java\nindex a1266748ca..8b7c6fa8f9 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java\n\n@@ -31,7 +31,10 @@ public class RowType extends BaseObject {\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        target.createRowType(getSchemaName(), getObjectName(), columns);\n+        if (priorVersion != null && priorVersion > 0 && this.version > priorVersion) {\n+            throw new UnsupportedOperationException(\"Upgrading row types is not supported\");\n+        }\n+        apply(target);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTkxNw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393689917", "bodyText": "I firmly believe we should have a NoOp here.  we should not create a sequence again.  only one time.", "author": "prb112", "createdAt": "2020-03-17T13:46:01Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java", "diffHunk": "@@ -32,11 +32,16 @@ public void apply(IDatabaseAdapter target) {\n         target.createSequence(getSchemaName(), getObjectName(), this.cache);\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        target.createSequence(getSchemaName(), getObjectName(), this.cache);", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java\nindex ba0899d596..4b6d308cbc 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java\n\n@@ -34,7 +34,10 @@ public class Sequence extends BaseObject {\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        target.createSequence(getSchemaName(), getObjectName(), this.cache);\n+        if (priorVersion != null && priorVersion > 0 && this.version > priorVersion) {\n+            throw new UnsupportedOperationException(\"Upgrading sequences is not supported\");\n+        }\n+        apply(target);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MDA2Nw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393690067", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:46:13Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowType.java", "diffHunk": "@@ -18,7 +18,7 @@\n  */\n public class RowType extends BaseObject {\n     private final List<ColumnBase> columns = new ArrayList<>();\n-    \n+", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MDIzOA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393690238", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:46:28Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java", "diffHunk": "@@ -39,6 +39,11 @@ public void apply(IDatabaseAdapter target) {\n         target.createArrType(getSchemaName(), getObjectName(), rowTypeName, arraySize);", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c9b90c2a2b44bd7048963b9a4005c7523ab6b87", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java\nindex d711803625..5b28a8cbfc 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/RowArrayType.java\n\n@@ -41,7 +41,10 @@ public class RowArrayType extends BaseObject {\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        target.createArrType(getSchemaName(), getObjectName(), rowTypeName, arraySize);\n+        if (priorVersion != null && priorVersion > 0 && this.version > priorVersion) {\n+            throw new UnsupportedOperationException(\"Upgrading row array types is not supported\");\n+        }\n+        apply(target);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MDQ3Mw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393690473", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:46:44Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java", "diffHunk": "@@ -32,11 +32,16 @@ public void apply(IDatabaseAdapter target) {\n         target.createSequence(getSchemaName(), getObjectName(), this.cache);\n     }\n \n+    @Override", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java\nindex ba0899d596..4b6d308cbc 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Sequence.java\n\n@@ -34,7 +34,10 @@ public class Sequence extends BaseObject {\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        target.createSequence(getSchemaName(), getObjectName(), this.cache);\n+        if (priorVersion != null && priorVersion > 0 && this.version > priorVersion) {\n+            throw new UnsupportedOperationException(\"Upgrading sequences is not supported\");\n+        }\n+        apply(target);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MTExMw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393691113", "bodyText": "we should not have logic here to apply a new version.  Only the first time. it's like a sequence, very integral to the overall operation.", "author": "prb112", "createdAt": "2020-03-17T13:47:41Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/SessionVariableDef.java", "diffHunk": "@@ -12,35 +12,31 @@\n \n /**\n  * Adds a session variable to the database\n-\n- *\n  */\n public class SessionVariableDef extends BaseObject {\n-    \n+\n     public SessionVariableDef(String schemaName, String variableName, int version) {\n         super(schemaName, variableName, DatabaseObjectType.VARIABLE, version);\n     }\n-    \n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#apply(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n     @Override\n     public void apply(IDatabaseAdapter target) {\n         target.createIntVariable(getSchemaName(), getObjectName());\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        target.createIntVariable(getSchemaName(), getObjectName());", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MTE3MQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393691171", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:47:48Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/SessionVariableDef.java", "diffHunk": "@@ -12,35 +12,31 @@\n \n /**\n  * Adds a session variable to the database\n-\n- *\n  */\n public class SessionVariableDef extends BaseObject {\n-    \n+\n     public SessionVariableDef(String schemaName, String variableName, int version) {\n         super(schemaName, variableName, DatabaseObjectType.VARIABLE, version);\n     }\n-    \n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#apply(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n     @Override\n     public void apply(IDatabaseAdapter target) {\n         target.createIntVariable(getSchemaName(), getObjectName());\n     }\n \n-    /* (non-Javadoc)\n-     * @see com.ibm.fhir.database.utils.model.IDatabaseObject#drop(com.ibm.fhir.database.utils.api.IDatabaseAdapter)\n-     */\n+    @Override", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MTMwMA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393691300", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:48:00Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Tablespace.java", "diffHunk": "@@ -18,8 +18,8 @@\n /**\n  * Used to create and drop tablespaces within a database\n  */\n-public class Tablespace extends DatabaseObject {    \n-    \n+public class Tablespace extends DatabaseObject {", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MTU3Mw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393691573", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:48:28Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/version/VersionHistoryService.java", "diffHunk": "@@ -24,10 +24,10 @@\n \n     // The name of the admin schema we are working with\n     private final String adminSchemaName;\n-    \n+", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MjcwOQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393692709", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:50:08Z", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/control/VersionHistoryServiceTest.java", "diffHunk": "@@ -23,24 +23,17 @@\n     // history information collected during schema application\n     private final ConcurrentHashMap<String, Integer> newHistory = new ConcurrentHashMap<>();\n \n-    /* (non-Javadoc)", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MzYyNg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393693626", "bodyText": "Is this really testing VersionHistory service? shouldn't it return -1 or something to confirm?", "author": "prb112", "createdAt": "2020-03-17T13:51:30Z", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/control/VersionHistoryServiceTest.java", "diffHunk": "@@ -64,4 +57,12 @@ public void addTestHistory(String objectSchema, String objectType, String object\n     public static String makeKey(String objectSchema, String objectType, String objectName) {\n         return objectSchema + \":\" + objectType + \":\" + objectName;\n     }\n+\n+    /**\n+     * Always returns null\n+     */\n+    @Override\n+    public Integer getVersion(String objectSchema, String objectType, String objectName) {\n+        return null;", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNjI5MQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398926291", "bodyText": "We use the real VersionHistoryService for anywhere that needs a true version (like in the new DerbyMigrationTest).\nPerhaps we could return a -1 (or a 0) here to avoid having the null checks on the apply methods, but I went with null since we were already using Integer arguments (and not ints).", "author": "lmsurpre", "createdAt": "2020-03-26T22:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MzYyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5NjY3Nw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393696677", "bodyText": "if you apply this (say 2 steps)\nstep 1 alter table add column succeeds\nstep 2 move content (say these are in pre-steps)\nwhat happens to the above.\nis it idempotent? is it in a deterministic state?  right now I don't think we could successfully migrate beyond one step one version in a deterministic way.\nI think we have to track the migration steps in VERSION_HISTORY and filter the successful steps.", "author": "prb112", "createdAt": "2020-03-17T13:55:51Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Table.java", "diffHunk": "@@ -137,6 +137,17 @@ public void apply(IDatabaseAdapter target) {\n         }\n     }\n \n+    @Override\n+    public void apply(Integer priorVersion, IDatabaseAdapter target) {\n+        for (Migration step : preSteps) {\n+            step.migrateFrom(priorVersion).stream().forEachOrdered(target::runStatement);\n+        }\n+        apply(target);\n+        for (Migration step : postSteps) {\n+            step.migrateFrom(priorVersion).stream().forEachOrdered(target::runStatement);", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5Njg1Ng==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393696856", "bodyText": "maybe even log out that the step is being skipped.", "author": "prb112", "createdAt": "2020-03-17T13:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5NjY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Table.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Table.java\nindex e278d1c44a..86fa565787 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Table.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/Table.java\n\n@@ -139,12 +139,12 @@ public class Table extends BaseObject {\n \n     @Override\n     public void apply(Integer priorVersion, IDatabaseAdapter target) {\n-        for (Migration step : preSteps) {\n-            step.migrateFrom(priorVersion).stream().forEachOrdered(target::runStatement);\n-        }\n-        apply(target);\n-        for (Migration step : postSteps) {\n-            step.migrateFrom(priorVersion).stream().forEachOrdered(target::runStatement);\n+        if (priorVersion != null && priorVersion != 0 && this.getVersion() > priorVersion) {\n+            for (Migration step : migrations) {\n+                step.migrateFrom(priorVersion).stream().forEachOrdered(target::runStatement);\n+            }\n+        } else {\n+            apply(target);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5NzQxMA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393697410", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-17T13:56:55Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java", "diffHunk": "@@ -6,6 +6,9 @@\n \n package com.ibm.fhir.database.utils.model;\n \n+import java.util.Arrays;", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java\nindex dc3d1a9b85..892d536aa0 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java\n\n@@ -1,11 +1,12 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2019, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n package com.ibm.fhir.database.utils.model;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5Nzk5Mg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393697992", "bodyText": "The Title of the Java class makes me realize that we don't VERSION Indices.  I think we should (we have altered the signatures of a few of them without renaming them - drop-add)", "author": "prb112", "createdAt": "2020-03-17T13:57:47Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java", "diffHunk": "@@ -6,6 +6,9 @@\n \n package com.ibm.fhir.database.utils.model;\n \n+import java.util.Arrays;\n+import java.util.List;\n+", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMzIwMA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398933200", "bodyText": "should we open it as a future task or you'd like to see that change as part of this PR?", "author": "lmsurpre", "createdAt": "2020-03-26T22:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5Nzk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MjE1NA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399342154", "bodyText": "Let's open a future task.", "author": "prb112", "createdAt": "2020-03-27T15:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5Nzk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java\nindex dc3d1a9b85..892d536aa0 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/model/VersionedSchemaObject.java\n\n@@ -1,11 +1,12 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2019, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n package com.ibm.fhir.database.utils.model;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5ODk5Nw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393698997", "bodyText": "I think the addPostStep should be backed by an ArrayList (I know we talked about a queue as well.  As long as all the statements are deterministic).", "author": "prb112", "createdAt": "2020-03-17T13:59:13Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "diffHunk": "@@ -397,6 +400,14 @@ public void addDateValues(List<IDatabaseObject> group, String prefix) {\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n+                .addPostStep(priorVersion -> {", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNTU0Mg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398935542", "bodyText": "addPostStep has been replaced by addMigration, but the comment still applies.\nthe actual ArrayList is instantiated in the VersionedSchemaObject constructor:\n    public VersionedSchemaObject(String schemaName, String objectName) {\n        DataDefinitionUtil.assertValidNames(schemaName, objectName);\n        this.schemaName = schemaName;\n        this.objectName = objectName;\n        this.migrations = new ArrayList<>();\n    }", "author": "lmsurpre", "createdAt": "2020-03-26T22:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5ODk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java\nindex b17b771b34..a65ac29b4e 100644\n--- a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java\n+++ b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java\n\n@@ -400,11 +400,12 @@ ALTER TABLE device_date_values ADD CONSTRAINT fk_device_date_values_r  FOREIGN K\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n-                .addPostStep(priorVersion -> {\n+                .addMigration(priorVersion -> {\n                     List<IDatabaseStatement> statements = new ArrayList<>();\n                     if (priorVersion == 1) {\n+                        statements.add(new DropIndex(schemaName, IDX + tableName + \"_PVR\"));\n+                        statements.add(new DropIndex(schemaName, IDX + tableName + \"_RPV\"));\n                         statements.add(new DropColumn(schemaName, tableName, \"DATE_VALUE\"));\n-                        statements.add(new ReorgTable(schemaName, tableName));\n                     }\n                     return statements;\n                 })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTM1OA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393699358", "bodyText": "I don't think we should drop this column.  I think we leave it for a minimum number of versions.", "author": "prb112", "createdAt": "2020-03-17T13:59:46Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java", "diffHunk": "@@ -397,6 +400,14 @@ public void addDateValues(List<IDatabaseObject> group, String prefix) {\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n+                .addPostStep(priorVersion -> {\n+                    List<IDatabaseStatement> statements = new ArrayList<>();\n+                    if (priorVersion == 1) {\n+                        statements.add(new DropColumn(schemaName, tableName, \"DATE_VALUE\"));", "originalCommit": "f6477fb3a5371be4631b11a5eae13e9bc36b33a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTg2MA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r393699860", "bodyText": "If we decide to keep it we should use a constant for DATE_VALUE_DROPPED_COLUMN something to clearly indicate don't use it.", "author": "prb112", "createdAt": "2020-03-17T14:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNjcxNw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398936717", "bodyText": "We decided not to add migration logic which drops the column, but did we remove it from v2 of the table.  I added the following comment to try making it clear:\n                        // Note: version 1 of this table had a DATE_VALUE column.\n                        // We chose not to DROP it here, but it is not used going forward.", "author": "lmsurpre", "createdAt": "2020-03-26T22:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NjIwMA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399346200", "bodyText": "Now that I added the DROP back in, I used this suggestion to use a constant named DATE_VALUE_DROPPED_COLUMN", "author": "lmsurpre", "createdAt": "2020-03-27T15:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5OTM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "chunk": "diff --git a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java\nindex b17b771b34..a65ac29b4e 100644\n--- a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java\n+++ b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/FhirResourceTableGroup.java\n\n@@ -400,11 +400,12 @@ ALTER TABLE device_date_values ADD CONSTRAINT fk_device_date_values_r  FOREIGN K\n                 .setTablespace(fhirTablespace)\n                 .addPrivileges(resourceTablePrivileges)\n                 .enableAccessControl(this.sessionVariable)\n-                .addPostStep(priorVersion -> {\n+                .addMigration(priorVersion -> {\n                     List<IDatabaseStatement> statements = new ArrayList<>();\n                     if (priorVersion == 1) {\n+                        statements.add(new DropIndex(schemaName, IDX + tableName + \"_PVR\"));\n+                        statements.add(new DropIndex(schemaName, IDX + tableName + \"_RPV\"));\n                         statements.add(new DropColumn(schemaName, tableName, \"DATE_VALUE\"));\n-                        statements.add(new ReorgTable(schemaName, tableName));\n                     }\n                     return statements;\n                 })\n"}}, {"oid": "56f95af848d679bfbab31afa4128e6fca2ffffcf", "url": "https://github.com/IBM/FHIR/commit/56f95af848d679bfbab31afa4128e6fca2ffffcf", "message": "issue #833 - prototype migration and add automated migration test\n\n1. added support for derby in `com.ibm.fhir.schema.app.Main`\n    * dropped Db2 from the ResourceTypes-related class names since they\n      are not really specific to Db2\n\n2. added support for generating only a subset of the resource types from\nFhirSchemaGenerator\n\n3. refactored DerbyMaster to re-use a single connection (instead of\ncreating a new one for each apply) and added a constructor for passing a\nVersionHistoryService instead of just always using the fake one\n(AllVersionHistoryService)\n\n4. added DerbyMigrationTest for testing migrations\n    * uses dblook to infer the ddl from the db, then sorts the rows and\n      compares them\n    * copied the 4.0.1 FhirSchemaGenerator, FhirResourceTableGroup into\n      the test folder (and prefixed with \"Old\" to disambiguate).  In the\n      future we can use the cli jars to create the historic version of\n      the schema instead\n\n5. added placeholder script for downloading and deploying previous\nversions of the fhir-persistence-schema cli jar to test migrations\n    * once thats working, we should remove the \"Old*\" classes I added to\n      fhir-persistence-schema/src/test/com/ibm/fhir/schema/derby and use\n      the all-in-one cli jars to create them instead\n\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T18:54:57Z", "type": "forcePushed"}, {"oid": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2", "url": "https://github.com/IBM/FHIR/commit/6cca2e090b34d3286af03ad9e6ce49c34e628fe2", "message": "issue #833 - prototype migration and add automated migration test\n\n1. added support for derby in `com.ibm.fhir.schema.app.Main`\n    * dropped Db2 from the ResourceTypes-related class names since they\n      are not really specific to Db2\n\n2. added support for generating only a subset of the resource types from\nFhirSchemaGenerator\n\n3. refactored DerbyMaster to re-use a single connection (instead of\ncreating a new one for each apply) and added a constructor for passing a\nVersionHistoryService instead of just always using the fake one\n(AllVersionHistoryService)\n\n4. added DerbyMigrationTest for testing migrations\n    * uses dblook to infer the ddl from the db, then sorts the rows and\n      compares them\n    * copied the 4.0.1 FhirSchemaGenerator, FhirResourceTableGroup into\n      the test folder (and prefixed with \"Old\" to disambiguate).  In the\n      future we can use the cli jars to create the historic version of\n      the schema instead\n\n5. added placeholder script for downloading and deploying previous\nversions of the fhir-persistence-schema cli jar to test migrations\n    * once thats working, we should remove the \"Old*\" classes I added to\n      fhir-persistence-schema/src/test/com/ibm/fhir/schema/derby and use\n      the all-in-one cli jars to create them instead\n\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T19:00:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDczOQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398824739", "bodyText": "I didn't change this to 1000, should we change to 1000 here?", "author": "prb112", "createdAt": "2020-03-26T19:08:47Z", "path": "fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java", "diffHunk": "@@ -174,12 +181,12 @@ public boolean doesTableExist(String schemaName, String tableName) {\n \n     @Override\n     public void createSequence(String schemaName, String sequenceName, int cache) {\n-        /*CREATE SEQUENCE fhir_sequence\n-             AS BIGINT\n-     START WITH 1\n-          CACHE 1000\n-       NO CYCLE;\n-    */\n+        /* CREATE SEQUENCE fhir_sequence\n+         *     AS BIGINT\n+         *     START WITH 1\n+         *     CACHE 1000\n+         *     NO CYCLE;\n+        */\n         // Derby doesn't support CACHE\n         final String sname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n         final String ddl = \"CREATE SEQUENCE \" + sname + \" AS BIGINT START WITH 1 NO CYCLE\";", "originalCommit": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDgzNw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398824837", "bodyText": "to align with db2", "author": "prb112", "createdAt": "2020-03-26T19:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNzQyMQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398907421", "bodyText": "no opinion on this one...i forget why you said it was better to start at 1000 even for db2", "author": "lmsurpre", "createdAt": "2020-03-26T21:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "020bea2e5500c101eb4a83c380270ab0235f8f22", "chunk": "diff --git a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java\nindex 58f6f6f518..18240e7655 100644\n--- a/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java\n+++ b/fhir-database-utils/src/main/java/com/ibm/fhir/database/utils/derby/DerbyAdapter.java\n\n@@ -181,12 +174,12 @@ public class DerbyAdapter extends CommonDatabaseAdapter {\n \n     @Override\n     public void createSequence(String schemaName, String sequenceName, int cache) {\n-        /* CREATE SEQUENCE fhir_sequence\n-         *     AS BIGINT\n-         *     START WITH 1\n-         *     CACHE 1000\n-         *     NO CYCLE;\n-        */\n+        /*CREATE SEQUENCE fhir_sequence\n+             AS BIGINT\n+     START WITH 1\n+          CACHE 1000\n+       NO CYCLE;\n+    */\n         // Derby doesn't support CACHE\n         final String sname = DataDefinitionUtil.getQualifiedName(schemaName, sequenceName);\n         final String ddl = \"CREATE SEQUENCE \" + sname + \" AS BIGINT START WITH 1 NO CYCLE\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMjI1Mw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398832253", "bodyText": "2020", "author": "prb112", "createdAt": "2020-03-26T19:21:22Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "diffHunk": "@@ -36,13 +36,17 @@\n import com.ibm.fhir.database.utils.api.TenantStatus;\n import com.ibm.fhir.database.utils.common.DataDefinitionUtil;\n import com.ibm.fhir.database.utils.common.JdbcConnectionProvider;\n+import com.ibm.fhir.database.utils.common.JdbcPropertyAdapter;", "originalCommit": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6b3f6e1d4d59d5850cbfd27cf50d536defe90ff", "chunk": "diff --git a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java\nindex 6a6c18632c..dd6fa29276 100644\n--- a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java\n+++ b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java\n\n@@ -29,6 +29,7 @@ import java.util.logging.Logger;\n import java.util.stream.Collectors;\n \n import com.ibm.fhir.database.utils.api.DataAccessException;\n+import com.ibm.fhir.database.utils.api.IConnectionProvider;\n import com.ibm.fhir.database.utils.api.IDatabaseAdapter;\n import com.ibm.fhir.database.utils.api.IDatabaseTranslator;\n import com.ibm.fhir.database.utils.api.ITransaction;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMzQ1Mg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398833452", "bodyText": "add a comment on this class purpose", "author": "prb112", "createdAt": "2020-03-26T19:23:27Z", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirResourceTableGroup.java", "diffHunk": "@@ -0,0 +1,706 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.derby;\n+\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEMS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_ALLERGIES_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_DRUG_ALLERGIES_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_MEDICATIONS_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_PROBLEMS_LIST;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CURRENT_RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATA;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_END;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_START;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FK;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.IDX;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.IS_DELETED;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.ITEM_LOGICAL_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LAST_UPDATED;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LATITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LIST_LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LIST_LOGICAL_RESOURCE_ITEMS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LONGITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_SEARCH_STRING_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MT_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.NUMBER_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.NUMBER_VALUE_HIGH;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.NUMBER_VALUE_LOW;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAMES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PATIENT_CURRENT_REFS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PATIENT_LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PK;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.QUANTITY_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.QUANTITY_VALUE_HIGH;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.QUANTITY_VALUE_LOW;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE_LCASE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.VERSION_ID;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.ibm.fhir.database.utils.model.Generated;\n+import com.ibm.fhir.database.utils.model.GroupPrivilege;\n+import com.ibm.fhir.database.utils.model.IDatabaseObject;\n+import com.ibm.fhir.database.utils.model.ObjectGroup;\n+import com.ibm.fhir.database.utils.model.PhysicalDataModel;\n+import com.ibm.fhir.database.utils.model.SessionVariableDef;\n+import com.ibm.fhir.database.utils.model.Table;\n+import com.ibm.fhir.database.utils.model.Tablespace;\n+import com.ibm.fhir.schema.control.FhirSchemaTags;\n+\n+/**\n+ * Utility to create all the tables associated with a particular resource type", "originalCommit": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwMTgxNg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398901816", "bodyText": "done", "author": "lmsurpre", "createdAt": "2020-03-26T21:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMzQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b6b3f6e1d4d59d5850cbfd27cf50d536defe90ff", "chunk": "diff --git a/fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirResourceTableGroup.java b/fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirResourceTableGroup.java\nindex 3ea3bee732..7a99580445 100644\n--- a/fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirResourceTableGroup.java\n+++ b/fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirResourceTableGroup.java\n\n@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2019\n+ * (C) Copyright IBM Corp. 2019, 2020\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMzc0Ng==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398833746", "bodyText": "add a comment on this class purpose", "author": "prb112", "createdAt": "2020-03-26T19:23:55Z", "path": "fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,790 @@\n+/*\n+ * (C) Copyright IBM Corp. 2019, 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.schema.derby;\n+\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEMS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.CODE_SYSTEM_NAME;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_END;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_START;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.DATE_VALUES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FHIR_REF_SEQUENCE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FHIR_SEQUENCE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.FK;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.IDX;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LATITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_ID_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LOGICAL_RESOURCE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.LONGITUDE_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_SEARCH_STRING_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MAX_TOKEN_VALUE_BYTES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.MT_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAMES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.PARAMETER_NAME_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.RESOURCE_TYPE_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUES;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.STR_VALUE_LCASE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANTS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_HASH;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_KEYS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_KEY_ID;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_NAME;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_SALT;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_SEQUENCE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TENANT_STATUS;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUE;\n+import static com.ibm.fhir.schema.control.FhirSchemaConstants.TOKEN_VALUES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.database.utils.model.GroupPrivilege;\n+import com.ibm.fhir.database.utils.model.IDatabaseObject;\n+import com.ibm.fhir.database.utils.model.NopObject;\n+import com.ibm.fhir.database.utils.model.ObjectGroup;\n+import com.ibm.fhir.database.utils.model.PhysicalDataModel;\n+import com.ibm.fhir.database.utils.model.Privilege;\n+import com.ibm.fhir.database.utils.model.ProcedureDef;\n+import com.ibm.fhir.database.utils.model.RowArrayType;\n+import com.ibm.fhir.database.utils.model.RowTypeBuilder;\n+import com.ibm.fhir.database.utils.model.Sequence;\n+import com.ibm.fhir.database.utils.model.SessionVariableDef;\n+import com.ibm.fhir.database.utils.model.Table;\n+import com.ibm.fhir.database.utils.model.Tablespace;\n+import com.ibm.fhir.model.type.code.FHIRResourceType;\n+import com.ibm.fhir.schema.control.FhirSchemaConstants;\n+import com.ibm.fhir.schema.control.Replacer;\n+import com.ibm.fhir.schema.control.SchemaGeneratorUtil;\n+\n+/**\n+ * Encapsulates the generation of the FHIR schema artifacts from IBM FHIR Server version 4.0.1", "originalCommit": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwMTg4Mg==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398901882", "bodyText": "done", "author": "lmsurpre", "createdAt": "2020-03-26T21:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMzc0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b6b3f6e1d4d59d5850cbfd27cf50d536defe90ff", "chunk": "diff --git a/fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirSchemaGenerator.java b/fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirSchemaGenerator.java\nindex 371bdd3aa1..5228099a3c 100644\n--- a/fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirSchemaGenerator.java\n+++ b/fhir-persistence-schema/src/test/java/com/ibm/fhir/schema/derby/OldFhirSchemaGenerator.java\n\n@@ -73,6 +73,11 @@ import com.ibm.fhir.schema.control.SchemaGeneratorUtil;\n \n /**\n  * Encapsulates the generation of the FHIR schema artifacts from IBM FHIR Server version 4.0.1\n+ *\n+ * @implNote This is a copy of the FhirSchemaGenerator class from the IBM FHIR Server 4.0.1 release.\n+ *           Its copied to here in order to provide the DerbyMigrationTest with a way of creating the old schema.\n+ *           Moving forward, we expect to download and use the executable jar (fhir-persistence-schema-*-cli.jar)\n+ *           to create older versions of the schema, but version 4.0.1 doesn't support Derby so we can't.\n  */\n public class OldFhirSchemaGenerator {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398834233", "bodyText": "does the set variable work for derby?", "author": "prb112", "createdAt": "2020-03-26T19:24:39Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java", "diffHunk": "@@ -50,7 +50,7 @@ public void run(IDatabaseTranslator translator, Connection c) {\n         try (Statement s = c.createStatement(); PreparedStatement batch = c.prepareStatement(stmtResourceTypeInsert)) {\n             s.execute(stmtVariable);", "originalCommit": "6cca2e090b34d3286af03ad9e6ce49c34e628fe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyMDkzMA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398920930", "bodyText": "Ah, I expect not.  Main doesn't even try it because it skips allocateTenant when dbType == DERBY.", "author": "lmsurpre", "createdAt": "2020-03-26T22:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyMTQ0Mw==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r398921443", "bodyText": "How should we handle for now?  Maybe we just add an @implNote to say it only works for multi-tenant schemas?\nOr should we overload the constructor and let the class's user tell us if its for a multi-tenant schema or not?", "author": "lmsurpre", "createdAt": "2020-03-26T22:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MzE2NQ==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399343165", "bodyText": "@impl note works for me", "author": "prb112", "createdAt": "2020-03-27T15:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNTk1NA==", "url": "https://github.com/IBM/FHIR/pull/788#discussion_r399425954", "bodyText": "I added the @implNote to the class's javadoc...maybe i should have done it on the method too, but lets call it good for now", "author": "lmsurpre", "createdAt": "2020-03-27T17:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "020bea2e5500c101eb4a83c380270ab0235f8f22", "chunk": "diff --git a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/Db2PopulateResourceTypes.java\nsimilarity index 89%\nrename from fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java\nrename to fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/Db2PopulateResourceTypes.java\nindex 83ebbc1b33..159a374419 100644\n--- a/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/PopulateResourceTypes.java\n+++ b/fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/control/Db2PopulateResourceTypes.java\n\n@@ -50,7 +50,7 @@ public class PopulateResourceTypes implements IDatabaseStatement {\n         try (Statement s = c.createStatement(); PreparedStatement batch = c.prepareStatement(stmtResourceTypeInsert)) {\n             s.execute(stmtVariable);\n             try (InputStream fis =\n-                    PopulateResourceTypes.class.getClassLoader().getResourceAsStream(\"resource_types.properties\")) {\n+                    Db2PopulateResourceTypes.class.getClassLoader().getResourceAsStream(\"resource_types.properties\")) {\n                 Properties props = new Properties();\n                 props.load(fis);\n \n"}}, {"oid": "b6b3f6e1d4d59d5850cbfd27cf50d536defe90ff", "url": "https://github.com/IBM/FHIR/commit/b6b3f6e1d4d59d5850cbfd27cf50d536defe90ff", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T21:59:40Z", "type": "forcePushed"}, {"oid": "1da779489c078b21d281562cf507706e8d08cf53", "url": "https://github.com/IBM/FHIR/commit/1da779489c078b21d281562cf507706e8d08cf53", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. added a sample derby.properties file for use with the\nfhir-persistence-schema Main method\n\n5. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T22:03:15Z", "type": "forcePushed"}, {"oid": "020bea2e5500c101eb4a83c380270ab0235f8f22", "url": "https://github.com/IBM/FHIR/commit/020bea2e5500c101eb4a83c380270ab0235f8f22", "message": "Add support for arbitrary database migration logic\n\nThis proof-of-concept extends our fhir-database-utils project with the\nability to define pre and post-migration steps for cases where an\nidempotent \"apply\" just isn't enough.\n\nIt also illustrates the usage in two places:\n1. drop the DATE_VALUE column and reorg all X_DATE_VALUES tables\n2. drop the ENFORCED FK constraints in all X_COMPOSITES tables\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T22:20:39Z", "type": "commit"}, {"oid": "d8518ff1851ace075632c499e4a63a2f75d94806", "url": "https://github.com/IBM/FHIR/commit/d8518ff1851ace075632c499e4a63a2f75d94806", "message": "Moved table reorg into db2Adapter and sandwhiched it with runstats\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T22:20:40Z", "type": "commit"}, {"oid": "851622b1891f83dbe77036afa10877b721fdd2dc", "url": "https://github.com/IBM/FHIR/commit/851622b1891f83dbe77036afa10877b721fdd2dc", "message": "issue #833 - prototype migration and add automated migration test\n\n1. added support for derby in `com.ibm.fhir.schema.app.Main`\n    * dropped Db2 from the ResourceTypes-related class names since they\n      are not really specific to Db2\n\n2. added support for generating only a subset of the resource types from\nFhirSchemaGenerator\n\n3. refactored DerbyMaster to re-use a single connection (instead of\ncreating a new one for each apply) and added a constructor for passing a\nVersionHistoryService instead of just always using the fake one\n(AllVersionHistoryService)\n\n4. added DerbyMigrationTest for testing migrations\n    * uses dblook to infer the ddl from the db, then sorts the rows and\n      compares them\n    * copied the 4.0.1 FhirSchemaGenerator, FhirResourceTableGroup into\n      the test folder (and prefixed with \"Old\" to disambiguate).  In the\n      future we can use the cli jars to create the historic version of\n      the schema instead\n\n5. added placeholder script for downloading and deploying previous\nversions of the fhir-persistence-schema cli jar to test migrations\n    * once thats working, we should remove the \"Old*\" classes I added to\n      fhir-persistence-schema/src/test/com/ibm/fhir/schema/derby and use\n      the all-in-one cli jars to create them instead\n\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T22:20:40Z", "type": "commit"}, {"oid": "01afcda8528a7c3b2f0a1151c59730ff677bb939", "url": "https://github.com/IBM/FHIR/commit/01afcda8528a7c3b2f0a1151c59730ff677bb939", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. added a sample derby.properties file for use with the\nfhir-persistence-schema Main method\n\n5. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T22:20:41Z", "type": "forcePushed"}, {"oid": "6def9cd7523b16280531242ca959bb9bf8e4268e", "url": "https://github.com/IBM/FHIR/commit/6def9cd7523b16280531242ca959bb9bf8e4268e", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. added a sample derby.properties file for use with the\nfhir-persistence-schema Main method\n\n5. added javadoc to Migration.migrateFrom\n\n6. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T22:34:20Z", "type": "forcePushed"}, {"oid": "4a02493911ef05651cc69d16f7cdf01a2ca385c4", "url": "https://github.com/IBM/FHIR/commit/4a02493911ef05651cc69d16f7cdf01a2ca385c4", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. added a sample derby.properties file for use with the\nfhir-persistence-schema Main method\n\n5. added javadoc to Migration.migrateFrom\n\n6. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T22:52:11Z", "type": "forcePushed"}, {"oid": "c0ab3c857a40430fc0c72b1edf932578dfec61e3", "url": "https://github.com/IBM/FHIR/commit/c0ab3c857a40430fc0c72b1edf932578dfec61e3", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. added a sample derby.properties file for use with the\nfhir-persistence-schema Main method\n\n5. added javadoc to Migration.migrateFrom\n\n6. renamed `IDatabaseAdapter.createProcedure` to\n`createOrReplaceProcedure` to make it more clear that we don't need\nnormally need migration steps for procedures\n\n7. added warning to `ProcedureDef.apply(priorVersion, target)` when one\nor more migrations exist...we havn't worked out what the exact behavior\nshould be for Procedures yet\n\n8. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T23:09:03Z", "type": "forcePushed"}, {"oid": "8c9b90c2a2b44bd7048963b9a4005c7523ab6b87", "url": "https://github.com/IBM/FHIR/commit/8c9b90c2a2b44bd7048963b9a4005c7523ab6b87", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. added a sample derby.properties file for use with the\nfhir-persistence-schema Main method\n\n5. added javadoc to Migration.migrateFrom\n\n6. renamed `IDatabaseAdapter.createProcedure` to\n`createOrReplaceProcedure` to make it more clear that we don't need\nnormally need migration steps for procedures\n\n7. added warning to `ProcedureDef.apply(priorVersion, target)` when one\nor more migrations exist...we havn't worked out what the exact behavior\nshould be for Procedures yet\n\n8. renamed Db2ReorgTable back to Db2Reorg\n\n9. throw UnsupportedOperationException if apply(priorVersion, target) is\ncalled for RowArrayTypes that need a migration\n\n10. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T23:27:14Z", "type": "forcePushed"}, {"oid": "06717900804163e5a059a8bf5e63e931e4160b7d", "url": "https://github.com/IBM/FHIR/commit/06717900804163e5a059a8bf5e63e931e4160b7d", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. added a sample derby.properties file for use with the\nfhir-persistence-schema Main method\n\n5. added javadoc to Migration.migrateFrom\n\n6. renamed `IDatabaseAdapter.createProcedure` to\n`createOrReplaceProcedure` to make it more clear that we don't need\nnormally need migration steps for procedures\n\n7. added warning to `ProcedureDef.apply(priorVersion, target)` when one\nor more migrations exist...we havn't worked out what the exact behavior\nshould be for Procedures yet\n\n8. renamed Db2ReorgTable back to Db2Reorg\n\n9. throw UnsupportedOperationException if apply(priorVersion, target) is\ncalled for RowTypes or RowArrayTypes that need a migration (not\ncurrently used in our schema)\n\n10. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T23:29:33Z", "type": "forcePushed"}, {"oid": "2c3df79ba33766691bbabdd4731821b90f7f5bf5", "url": "https://github.com/IBM/FHIR/commit/2c3df79ba33766691bbabdd4731821b90f7f5bf5", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. added a sample derby.properties file for use with the\nfhir-persistence-schema Main method\n\n5. added javadoc to Migration.migrateFrom\n\n6. renamed `IDatabaseAdapter.createProcedure` to\n`createOrReplaceProcedure` to make it more clear that we don't need\nnormally need migration steps for procedures\n\n7. added warning to `ProcedureDef.apply(priorVersion, target)` when one\nor more migrations exist...we havn't worked out what the exact behavior\nshould be for Procedures yet\n\n8. renamed Db2ReorgTable back to Db2Reorg\n\n9. throw UnsupportedOperationException if apply(priorVersion, target) is\ncalled for RowTypes or RowArrayTypes that need a migration (not\ncurrently used in our schema)\n\n10. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T23:30:23Z", "type": "commit"}, {"oid": "2c3df79ba33766691bbabdd4731821b90f7f5bf5", "url": "https://github.com/IBM/FHIR/commit/2c3df79ba33766691bbabdd4731821b90f7f5bf5", "message": "issue #833 - updates per team review\n\n1. added implNote to Old* classes in fhir-persistence-schema test dir\n\n2. moved from `--derby` argument to a `--db-type` argument with values\nfrom the new DbType enum (currently just \"derby\" or \"db2\")\n\n3. cleaned up logic in `Table.apply(priorVersion, target)`\n\n4. added a sample derby.properties file for use with the\nfhir-persistence-schema Main method\n\n5. added javadoc to Migration.migrateFrom\n\n6. renamed `IDatabaseAdapter.createProcedure` to\n`createOrReplaceProcedure` to make it more clear that we don't need\nnormally need migration steps for procedures\n\n7. added warning to `ProcedureDef.apply(priorVersion, target)` when one\nor more migrations exist...we havn't worked out what the exact behavior\nshould be for Procedures yet\n\n8. renamed Db2ReorgTable back to Db2Reorg\n\n9. throw UnsupportedOperationException if apply(priorVersion, target) is\ncalled for RowTypes or RowArrayTypes that need a migration (not\ncurrently used in our schema)\n\n10. one last copyright update\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-26T23:30:23Z", "type": "forcePushed"}, {"oid": "efaf62ea99fbf5b022d4b94450c252775271f6ad", "url": "https://github.com/IBM/FHIR/commit/efaf62ea99fbf5b022d4b94450c252775271f6ad", "message": "issue #833 - add the DROP Column back in\n\nremoving the DROP of the DATE_VALUES column made the migrated 4.0.1\nschema different from the 4.1.0 schema, which causes the migration test\nto fail, so this commit adds the DROP back in\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-27T15:25:03Z", "type": "commit"}, {"oid": "efaf62ea99fbf5b022d4b94450c252775271f6ad", "url": "https://github.com/IBM/FHIR/commit/efaf62ea99fbf5b022d4b94450c252775271f6ad", "message": "issue #833 - add the DROP Column back in\n\nremoving the DROP of the DATE_VALUES column made the migrated 4.0.1\nschema different from the 4.1.0 schema, which causes the migration test\nto fail, so this commit adds the DROP back in\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-27T15:25:03Z", "type": "forcePushed"}, {"oid": "10b7b1992a8ad17b6bde98c2fa9e9b7827334664", "url": "https://github.com/IBM/FHIR/commit/10b7b1992a8ad17b6bde98c2fa9e9b7827334664", "message": "issue #833 - add migration logic for #706 and more\n\nPreviously, I forgot we made this schema change early in the 4.1.0 cycle\nand so the migration test was starting with a schema that didn't exactly\nmatch 4.0.1.\n\nTo make migration match the schema exactly (same columns in the same\norder), I had to move these two \"new\" number columns from the middle of\nthe table definition to the end.\n\nAdditionally, I found that FhirSchemaGenerator was still including the\nretired `DATE_VALUES` column in the global/resource-level DATES table.\nWhile that table isn't used, I updated it to match the resource-specific\nones.\n\nAlso added an `@implNote` to PopulateResourceTypes per review comment.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-27T17:19:30Z", "type": "forcePushed"}, {"oid": "b40e4be39457c7e1d674f75dd6537e1cebe59807", "url": "https://github.com/IBM/FHIR/commit/b40e4be39457c7e1d674f75dd6537e1cebe59807", "message": "issue #833 - add migration logic for #706 and more\n\nPreviously, I forgot we made this schema change early in the 4.1.0 cycle\nand so the migration test was starting with a schema that didn't exactly\nmatch 4.0.1.\n\nTo make migration match the schema exactly (same columns in the same\norder), I had to move these two \"new\" number columns from the middle of\nthe table definition to the end.\n\nAdditionally, I found that FhirSchemaGenerator was still including the\nretired `DATE_VALUES` column in the global/resource-level DATES table.\nWhile that table isn't used, I updated it to match the resource-specific\nones.\n\nAlso added an `@implNote` to PopulateResourceTypes per review comment.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-27T17:24:41Z", "type": "commit"}, {"oid": "b40e4be39457c7e1d674f75dd6537e1cebe59807", "url": "https://github.com/IBM/FHIR/commit/b40e4be39457c7e1d674f75dd6537e1cebe59807", "message": "issue #833 - add migration logic for #706 and more\n\nPreviously, I forgot we made this schema change early in the 4.1.0 cycle\nand so the migration test was starting with a schema that didn't exactly\nmatch 4.0.1.\n\nTo make migration match the schema exactly (same columns in the same\norder), I had to move these two \"new\" number columns from the middle of\nthe table definition to the end.\n\nAdditionally, I found that FhirSchemaGenerator was still including the\nretired `DATE_VALUES` column in the global/resource-level DATES table.\nWhile that table isn't used, I updated it to match the resource-specific\nones.\n\nAlso added an `@implNote` to PopulateResourceTypes per review comment.\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-03-27T17:24:41Z", "type": "forcePushed"}]}