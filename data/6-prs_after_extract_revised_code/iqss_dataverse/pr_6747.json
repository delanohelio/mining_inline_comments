{"pr_number": 6747, "pr_title": "6697 delete user api", "pr_createdAt": "2020-03-18T14:33:34Z", "pr_url": "https://github.com/IQSS/dataverse/pull/6747", "timeline": [{"oid": "567d4d4c74d5a832075801509125da9da8d7485f", "url": "https://github.com/IQSS/dataverse/commit/567d4d4c74d5a832075801509125da9da8d7485f", "message": "#6697 delete user api update", "committedDate": "2020-03-10T19:05:39Z", "type": "commit"}, {"oid": "c0f7a276fd2ad9e5797420c6306aeddc4e5933c9", "url": "https://github.com/IQSS/dataverse/commit/c0f7a276fd2ad9e5797420c6306aeddc4e5933c9", "message": "Merge branch 'develop' into 6697-delete-user-api", "committedDate": "2020-03-10T19:06:01Z", "type": "commit"}, {"oid": "83a47c9e1b4387248abad6ddb633a3e0e6bae2c1", "url": "https://github.com/IQSS/dataverse/commit/83a47c9e1b4387248abad6ddb633a3e0e6bae2c1", "message": "#6697 add test for roles, refactor", "committedDate": "2020-03-13T15:38:01Z", "type": "commit"}, {"oid": "fdc1b9711949052920cfd2fa68724a20be1f649c", "url": "https://github.com/IQSS/dataverse/commit/fdc1b9711949052920cfd2fa68724a20be1f649c", "message": "Merge branch 'develop' into 6697-delete-user-api", "committedDate": "2020-03-13T15:38:21Z", "type": "commit"}, {"oid": "92a76e8eccb0e4548cbb4a0579de47c900f79516", "url": "https://github.com/IQSS/dataverse/commit/92a76e8eccb0e4548cbb4a0579de47c900f79516", "message": "#6697 fix delete user endpoint", "committedDate": "2020-03-13T19:34:41Z", "type": "commit"}, {"oid": "4d64f85b26d131a68d8ff46b04eeba7619a311b9", "url": "https://github.com/IQSS/dataverse/commit/4d64f85b26d131a68d8ff46b04eeba7619a311b9", "message": "#6697 more delete user tests bundle update", "committedDate": "2020-03-16T15:25:47Z", "type": "commit"}, {"oid": "ac67f2c1b0dcae4d241cc1fd13aea62f8cec33ae", "url": "https://github.com/IQSS/dataverse/commit/ac67f2c1b0dcae4d241cc1fd13aea62f8cec33ae", "message": "#6697 add integration tests", "committedDate": "2020-03-17T15:32:35Z", "type": "commit"}, {"oid": "9ecc40c719aafa2877b5a352c68d8d0bebd17bf5", "url": "https://github.com/IQSS/dataverse/commit/9ecc40c719aafa2877b5a352c68d8d0bebd17bf5", "message": "#6697 fix failing test", "committedDate": "2020-03-17T20:26:43Z", "type": "commit"}, {"oid": "89f5d8e71bb651355dee18d69c4836265610312e", "url": "https://github.com/IQSS/dataverse/commit/89f5d8e71bb651355dee18d69c4836265610312e", "message": "#6697 add test for user has role assigned", "committedDate": "2020-03-17T21:15:23Z", "type": "commit"}, {"oid": "a909444f7a22ea19a5752e93d465df71abcb422f", "url": "https://github.com/IQSS/dataverse/commit/a909444f7a22ea19a5752e93d465df71abcb422f", "message": "#6697 refactor error messages", "committedDate": "2020-03-18T14:04:41Z", "type": "commit"}, {"oid": "44df633f85be8411d48757551004aed4667105f8", "url": "https://github.com/IQSS/dataverse/commit/44df633f85be8411d48757551004aed4667105f8", "message": "#6697 add comments", "committedDate": "2020-03-18T14:12:15Z", "type": "commit"}, {"oid": "73cce6805e66f54108d442af5d97d0798901e04f", "url": "https://github.com/IQSS/dataverse/commit/73cce6805e66f54108d442af5d97d0798901e04f", "message": "#6697 add doc for delete user", "committedDate": "2020-03-18T15:09:12Z", "type": "commit"}, {"oid": "a385cc2ae46951be1123a788ae7d22c2f19d94e0", "url": "https://github.com/IQSS/dataverse/commit/a385cc2ae46951be1123a788ae7d22c2f19d94e0", "message": "Merge branch 'develop' into 6697-delete-user-api", "committedDate": "2020-03-19T15:08:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzOTE5Mw==", "url": "https://github.com/IQSS/dataverse/pull/6747#discussion_r395839193", "bodyText": "Currently, once an access request is acted on, we delete, so I think it would be fair to just also delete these requests when you delete the user (instead of failing). My one question is that there has been talk of storing these for historical purposes. If/when we do, we may want to then either a) not allow delete of user or b) anonymize the requests. Or c) still delete them, of course, I just think we'll need to think of that case.\nBut that said, it makes sense to change that delete to be cascading now.", "author": "scolapasta", "createdAt": "2020-03-20T19:08:23Z", "path": "src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java", "diffHunk": "@@ -511,6 +533,69 @@ public AuthenticatedUser lookupUser( String apiToken ) {\n         return tkn.getAuthenticatedUser();\n     }\n     \n+    /*\n+    getDeleteUserErrorMessages( AuthenticatedUser au )\n+    method which checks for reasons that a user may not be deleted\n+    -has created dvObjects\n+    -has roles\n+    -has guestbook records\n+    -etc.\n+    An empty string is returned if the user is 'deletable'\n+    */\n+    \n+    public String getDeleteUserErrorMessages(AuthenticatedUser au) {\n+        String retVal = \"\";\n+        if (!dvObjSvc.findByAuthenticatedUserId(au).isEmpty()) {\n+            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.dvobjects\");\n+        }\n+\n+        if (!roleAssigneeSvc.getAssignmentsFor(au.getIdentifier()).isEmpty()) {\n+            if (!retVal.isEmpty()) {\n+                retVal += \"; \";\n+            }\n+            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.roleAssignments\");\n+        }\n+\n+        if (!gbRespSvc.findByAuthenticatedUserId(au).isEmpty()) {\n+            if (!retVal.isEmpty()) {\n+                retVal += \"; \";\n+            }\n+            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.gbResps\");\n+        }\n+\n+        if (!datasetVersionService.getDatasetVersionUsersByAuthenticatedUser(au).isEmpty()) {\n+            if (!retVal.isEmpty()) {\n+                retVal += \"; \";\n+            }\n+            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.versionUser\");\n+        }\n+\n+        if (!explicitGroupService.findGroups(au).isEmpty()) {\n+            if (!retVal.isEmpty()) {\n+                retVal += \"; \";\n+            }\n+            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.groupMember\");\n+        }\n+\n+        if (userHasPendingAccessRequests(au)) {", "originalCommit": "a385cc2ae46951be1123a788ae7d22c2f19d94e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3Mzg0Mw==", "url": "https://github.com/IQSS/dataverse/pull/6747#discussion_r396573843", "bodyText": "Deleting requests, explicit group memberships and world map tokens in a newly created method that is run if there are no other records that would prevent a deletion (created dataset, downloaded a file etc.)", "author": "sekmiller", "createdAt": "2020-03-23T16:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzOTE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b85ce4a209d7f4e43652c0ff94104fa613a53194", "chunk": "diff --git a/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java b/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java\nindex f62178560..a1519b08b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java\n\n@@ -539,60 +542,65 @@ public class AuthenticationServiceBean {\n     -has created dvObjects\n     -has roles\n     -has guestbook records\n-    -etc.\n+\n     An empty string is returned if the user is 'deletable'\n     */\n     \n     public String getDeleteUserErrorMessages(AuthenticatedUser au) {\n         String retVal = \"\";\n+        List<String> reasons= new ArrayList();\n         if (!dvObjSvc.findByAuthenticatedUserId(au).isEmpty()) {\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.dvobjects\");\n+            reasons.add(BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.dvobjects\"));\n         }\n \n         if (!roleAssigneeSvc.getAssignmentsFor(au.getIdentifier()).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.roleAssignments\");\n+            reasons.add(BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.roleAssignments\"));\n         }\n \n         if (!gbRespSvc.findByAuthenticatedUserId(au).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.gbResps\");\n+            reasons.add( BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.gbResps\"));\n         }\n \n         if (!datasetVersionService.getDatasetVersionUsersByAuthenticatedUser(au).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.versionUser\");\n+            reasons.add(BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.versionUser\"));\n         }\n-\n-        if (!explicitGroupService.findGroups(au).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.groupMember\");\n+        \n+        if (!reasons.isEmpty()) {\n+            retVal = BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.prefix\", Arrays.asList(au.getIdentifier()));\n+            retVal += \" \" + reasons.stream().collect(Collectors.joining(\"; \")) + \".\";\n         }\n+        \n \n-        if (userHasPendingAccessRequests(au)) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.pendingRequests\");\n-        }\n-        if (!retVal.isEmpty()) {\n-            retVal = BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.prefix\", Arrays.asList(au.getIdentifier())) + \" \" + retVal + \".\";\n-        }\n \n         return retVal;\n     }\n     \n-    private boolean userHasPendingAccessRequests(AuthenticatedUser  au){\n+    public void removeAuthentictedUserItems(AuthenticatedUser au){\n+        /* if the user has pending access requests, is the member of a group or has a world map token \n+        we will delete them here \n+        */\n+\n+        deletePendingAccessRequests(au);\n+        \n+        deleteWorldMapToken(au);\n+        \n+        if (!explicitGroupService.findGroups(au).isEmpty()) {\n+            for(ExplicitGroup explicitGroup: explicitGroupService.findGroups(au)){\n+                explicitGroup.removeByRoleAssgineeIdentifier(au.getIdentifier());\n+            }            \n+        }\n+        \n+    }\n+    \n+    private void deletePendingAccessRequests(AuthenticatedUser  au){\n+        \n+       em.createNativeQuery(\"delete from fileaccessrequests where authenticated_user_id  = \"+au.getId());\n+        \n+    }\n+    \n+    private void deleteWorldMapToken(AuthenticatedUser  au){\n         \n-        return !em.createNativeQuery(\"select datafile_id from fileaccessrequests where authenticated_user_id  = \"+au.getId()).getResultList().isEmpty();\n+       em.createNativeQuery(\"delete from worldmapauth_token where dataverseuser_id  = \"+au.getId());\n         \n     }\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzOTQ1Mg==", "url": "https://github.com/IQSS/dataverse/pull/6747#discussion_r395839452", "bodyText": "For delete of user, I think it's be fine to also just remove them from groups at the time.", "author": "scolapasta", "createdAt": "2020-03-20T19:08:55Z", "path": "src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java", "diffHunk": "@@ -511,6 +533,69 @@ public AuthenticatedUser lookupUser( String apiToken ) {\n         return tkn.getAuthenticatedUser();\n     }\n     \n+    /*\n+    getDeleteUserErrorMessages( AuthenticatedUser au )\n+    method which checks for reasons that a user may not be deleted\n+    -has created dvObjects\n+    -has roles\n+    -has guestbook records\n+    -etc.\n+    An empty string is returned if the user is 'deletable'\n+    */\n+    \n+    public String getDeleteUserErrorMessages(AuthenticatedUser au) {\n+        String retVal = \"\";\n+        if (!dvObjSvc.findByAuthenticatedUserId(au).isEmpty()) {\n+            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.dvobjects\");\n+        }\n+\n+        if (!roleAssigneeSvc.getAssignmentsFor(au.getIdentifier()).isEmpty()) {\n+            if (!retVal.isEmpty()) {\n+                retVal += \"; \";\n+            }\n+            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.roleAssignments\");\n+        }\n+\n+        if (!gbRespSvc.findByAuthenticatedUserId(au).isEmpty()) {\n+            if (!retVal.isEmpty()) {\n+                retVal += \"; \";\n+            }\n+            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.gbResps\");\n+        }\n+\n+        if (!datasetVersionService.getDatasetVersionUsersByAuthenticatedUser(au).isEmpty()) {\n+            if (!retVal.isEmpty()) {\n+                retVal += \"; \";\n+            }\n+            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.versionUser\");\n+        }\n+\n+        if (!explicitGroupService.findGroups(au).isEmpty()) {", "originalCommit": "a385cc2ae46951be1123a788ae7d22c2f19d94e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3NDEwMg==", "url": "https://github.com/IQSS/dataverse/pull/6747#discussion_r396574102", "bodyText": "done", "author": "sekmiller", "createdAt": "2020-03-23T16:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzOTQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b85ce4a209d7f4e43652c0ff94104fa613a53194", "chunk": "diff --git a/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java b/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java\nindex f62178560..a1519b08b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java\n\n@@ -539,60 +542,65 @@ public class AuthenticationServiceBean {\n     -has created dvObjects\n     -has roles\n     -has guestbook records\n-    -etc.\n+\n     An empty string is returned if the user is 'deletable'\n     */\n     \n     public String getDeleteUserErrorMessages(AuthenticatedUser au) {\n         String retVal = \"\";\n+        List<String> reasons= new ArrayList();\n         if (!dvObjSvc.findByAuthenticatedUserId(au).isEmpty()) {\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.dvobjects\");\n+            reasons.add(BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.dvobjects\"));\n         }\n \n         if (!roleAssigneeSvc.getAssignmentsFor(au.getIdentifier()).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.roleAssignments\");\n+            reasons.add(BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.roleAssignments\"));\n         }\n \n         if (!gbRespSvc.findByAuthenticatedUserId(au).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.gbResps\");\n+            reasons.add( BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.gbResps\"));\n         }\n \n         if (!datasetVersionService.getDatasetVersionUsersByAuthenticatedUser(au).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.versionUser\");\n+            reasons.add(BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.versionUser\"));\n         }\n-\n-        if (!explicitGroupService.findGroups(au).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.groupMember\");\n+        \n+        if (!reasons.isEmpty()) {\n+            retVal = BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.prefix\", Arrays.asList(au.getIdentifier()));\n+            retVal += \" \" + reasons.stream().collect(Collectors.joining(\"; \")) + \".\";\n         }\n+        \n \n-        if (userHasPendingAccessRequests(au)) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.pendingRequests\");\n-        }\n-        if (!retVal.isEmpty()) {\n-            retVal = BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.prefix\", Arrays.asList(au.getIdentifier())) + \" \" + retVal + \".\";\n-        }\n \n         return retVal;\n     }\n     \n-    private boolean userHasPendingAccessRequests(AuthenticatedUser  au){\n+    public void removeAuthentictedUserItems(AuthenticatedUser au){\n+        /* if the user has pending access requests, is the member of a group or has a world map token \n+        we will delete them here \n+        */\n+\n+        deletePendingAccessRequests(au);\n+        \n+        deleteWorldMapToken(au);\n+        \n+        if (!explicitGroupService.findGroups(au).isEmpty()) {\n+            for(ExplicitGroup explicitGroup: explicitGroupService.findGroups(au)){\n+                explicitGroup.removeByRoleAssgineeIdentifier(au.getIdentifier());\n+            }            \n+        }\n+        \n+    }\n+    \n+    private void deletePendingAccessRequests(AuthenticatedUser  au){\n+        \n+       em.createNativeQuery(\"delete from fileaccessrequests where authenticated_user_id  = \"+au.getId());\n+        \n+    }\n+    \n+    private void deleteWorldMapToken(AuthenticatedUser  au){\n         \n-        return !em.createNativeQuery(\"select datafile_id from fileaccessrequests where authenticated_user_id  = \"+au.getId()).getResultList().isEmpty();\n+       em.createNativeQuery(\"delete from worldmapauth_token where dataverseuser_id  = \"+au.getId());\n         \n     }\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzOTkxNQ==", "url": "https://github.com/IQSS/dataverse/pull/6747#discussion_r395839915", "bodyText": "it's probably simpler code to add them to a list, then do a join to concatenate them at the end.", "author": "scolapasta", "createdAt": "2020-03-20T19:09:54Z", "path": "src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java", "diffHunk": "@@ -511,6 +533,69 @@ public AuthenticatedUser lookupUser( String apiToken ) {\n         return tkn.getAuthenticatedUser();\n     }\n     \n+    /*\n+    getDeleteUserErrorMessages( AuthenticatedUser au )\n+    method which checks for reasons that a user may not be deleted\n+    -has created dvObjects\n+    -has roles\n+    -has guestbook records\n+    -etc.\n+    An empty string is returned if the user is 'deletable'\n+    */\n+    \n+    public String getDeleteUserErrorMessages(AuthenticatedUser au) {\n+        String retVal = \"\";", "originalCommit": "a385cc2ae46951be1123a788ae7d22c2f19d94e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3NDI2Mg==", "url": "https://github.com/IQSS/dataverse/pull/6747#discussion_r396574262", "bodyText": "done", "author": "sekmiller", "createdAt": "2020-03-23T16:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzOTkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b85ce4a209d7f4e43652c0ff94104fa613a53194", "chunk": "diff --git a/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java b/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java\nindex f62178560..a1519b08b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/authorization/AuthenticationServiceBean.java\n\n@@ -539,60 +542,65 @@ public class AuthenticationServiceBean {\n     -has created dvObjects\n     -has roles\n     -has guestbook records\n-    -etc.\n+\n     An empty string is returned if the user is 'deletable'\n     */\n     \n     public String getDeleteUserErrorMessages(AuthenticatedUser au) {\n         String retVal = \"\";\n+        List<String> reasons= new ArrayList();\n         if (!dvObjSvc.findByAuthenticatedUserId(au).isEmpty()) {\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.dvobjects\");\n+            reasons.add(BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.dvobjects\"));\n         }\n \n         if (!roleAssigneeSvc.getAssignmentsFor(au.getIdentifier()).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.roleAssignments\");\n+            reasons.add(BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.roleAssignments\"));\n         }\n \n         if (!gbRespSvc.findByAuthenticatedUserId(au).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.gbResps\");\n+            reasons.add( BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.gbResps\"));\n         }\n \n         if (!datasetVersionService.getDatasetVersionUsersByAuthenticatedUser(au).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.versionUser\");\n+            reasons.add(BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.versionUser\"));\n         }\n-\n-        if (!explicitGroupService.findGroups(au).isEmpty()) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.groupMember\");\n+        \n+        if (!reasons.isEmpty()) {\n+            retVal = BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.prefix\", Arrays.asList(au.getIdentifier()));\n+            retVal += \" \" + reasons.stream().collect(Collectors.joining(\"; \")) + \".\";\n         }\n+        \n \n-        if (userHasPendingAccessRequests(au)) {\n-            if (!retVal.isEmpty()) {\n-                retVal += \"; \";\n-            }\n-            retVal += BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.pendingRequests\");\n-        }\n-        if (!retVal.isEmpty()) {\n-            retVal = BundleUtil.getStringFromBundle(\"admin.api.deleteUser.failure.prefix\", Arrays.asList(au.getIdentifier())) + \" \" + retVal + \".\";\n-        }\n \n         return retVal;\n     }\n     \n-    private boolean userHasPendingAccessRequests(AuthenticatedUser  au){\n+    public void removeAuthentictedUserItems(AuthenticatedUser au){\n+        /* if the user has pending access requests, is the member of a group or has a world map token \n+        we will delete them here \n+        */\n+\n+        deletePendingAccessRequests(au);\n+        \n+        deleteWorldMapToken(au);\n+        \n+        if (!explicitGroupService.findGroups(au).isEmpty()) {\n+            for(ExplicitGroup explicitGroup: explicitGroupService.findGroups(au)){\n+                explicitGroup.removeByRoleAssgineeIdentifier(au.getIdentifier());\n+            }            \n+        }\n+        \n+    }\n+    \n+    private void deletePendingAccessRequests(AuthenticatedUser  au){\n+        \n+       em.createNativeQuery(\"delete from fileaccessrequests where authenticated_user_id  = \"+au.getId());\n+        \n+    }\n+    \n+    private void deleteWorldMapToken(AuthenticatedUser  au){\n         \n-        return !em.createNativeQuery(\"select datafile_id from fileaccessrequests where authenticated_user_id  = \"+au.getId()).getResultList().isEmpty();\n+       em.createNativeQuery(\"delete from worldmapauth_token where dataverseuser_id  = \"+au.getId());\n         \n     }\n     \n"}}, {"oid": "41008900e32164a9367c5f11c9fe6df5c49a2e02", "url": "https://github.com/IQSS/dataverse/commit/41008900e32164a9367c5f11c9fe6df5c49a2e02", "message": "Merge branch 'develop' into 6697-delete-user-api", "committedDate": "2020-03-20T19:26:36Z", "type": "commit"}, {"oid": "b85ce4a209d7f4e43652c0ff94104fa613a53194", "url": "https://github.com/IQSS/dataverse/commit/b85ce4a209d7f4e43652c0ff94104fa613a53194", "message": "#6697 delete items that can be deleted", "committedDate": "2020-03-23T14:39:40Z", "type": "commit"}, {"oid": "ea4d8862d120228b724a0113b62beb7aa374c2f6", "url": "https://github.com/IQSS/dataverse/commit/ea4d8862d120228b724a0113b62beb7aa374c2f6", "message": "#6697 update doc wording", "committedDate": "2020-03-23T14:50:24Z", "type": "commit"}, {"oid": "7043a0a08cbaf1ffceb1889fe201ec5a4d0f91dc", "url": "https://github.com/IQSS/dataverse/commit/7043a0a08cbaf1ffceb1889fe201ec5a4d0f91dc", "message": "Update native-api.rst", "committedDate": "2020-03-23T15:53:54Z", "type": "commit"}, {"oid": "dffc893111c9c434d2612d85b3ce9424639b259a", "url": "https://github.com/IQSS/dataverse/commit/dffc893111c9c434d2612d85b3ce9424639b259a", "message": "Merge branch 'develop' into 6697-delete-user-api", "committedDate": "2020-03-24T20:07:31Z", "type": "commit"}, {"oid": "b000c78df6082aa9e99891df3320553fc5b288d5", "url": "https://github.com/IQSS/dataverse/commit/b000c78df6082aa9e99891df3320553fc5b288d5", "message": "#6697 make world map token cascade delete", "committedDate": "2020-03-25T14:45:32Z", "type": "commit"}, {"oid": "c7695fb9f7a342c5308d8ac156a31cb2bd8e5216", "url": "https://github.com/IQSS/dataverse/commit/c7695fb9f7a342c5308d8ac156a31cb2bd8e5216", "message": "#6697 add notifications to cascade delete", "committedDate": "2020-03-25T15:24:19Z", "type": "commit"}, {"oid": "8a1cc8a78ebf9844a442a88e2b35c74bb1f3023c", "url": "https://github.com/IQSS/dataverse/commit/8a1cc8a78ebf9844a442a88e2b35c74bb1f3023c", "message": "#6697 fix comment", "committedDate": "2020-03-25T20:39:07Z", "type": "commit"}, {"oid": "e1b1d0c615e3ba893678fa7a9a5ee4eb6db58125", "url": "https://github.com/IQSS/dataverse/commit/e1b1d0c615e3ba893678fa7a9a5ee4eb6db58125", "message": "Merge branch 'develop' into 6697-delete-user-api", "committedDate": "2020-03-31T19:14:24Z", "type": "commit"}]}