{"pr_number": 7147, "pr_title": "Reserve PID at publication if needed", "pr_createdAt": "2020-07-29T22:15:42Z", "pr_url": "https://github.com/IQSS/dataverse/pull/7147", "timeline": [{"oid": "af4901f737ddc0ac55f858dc557e4e950a443610", "url": "https://github.com/IQSS/dataverse/commit/af4901f737ddc0ac55f858dc557e4e950a443610", "message": "reserve if needed", "committedDate": "2020-07-29T22:13:03Z", "type": "commit"}, {"oid": "032cb1f91a0fe1f19f27db47bc81661a1d4153dd", "url": "https://github.com/IQSS/dataverse/commit/032cb1f91a0fe1f19f27db47bc81661a1d4153dd", "message": "merge mixup", "committedDate": "2020-07-29T22:23:03Z", "type": "commit"}, {"oid": "dbf9458581736058d4e41a33e2de40800bdb02b8", "url": "https://github.com/IQSS/dataverse/commit/dbf9458581736058d4e41a33e2de40800bdb02b8", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/7146-reserve_at_publish_when_needed", "committedDate": "2020-07-29T22:23:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzYxMA==", "url": "https://github.com/IQSS/dataverse/pull/7147#discussion_r462637610", "bodyText": "If we are going back to trying to register an unreserved DOI during publishing, it should probably happen in the other, asynchronous part of the workflow - in FinalizeDatasetPublicationCommand. Otherwise we can again end up in a situation where Datacite decides to hang for a while, and this is happening while the dataset is still unlocked, etc.\nAnd in the finalize command we already have this code:\nif ( theDataset.getGlobalIdCreateTime() == null ) {\n   try {\n      registerExternalIdentifier(theDataset, ctxt);\n   }\n   ...\n\nbut of course that registerExternalIdentifier method will need to be modified, because in its current form it would get a new pid assigned to the dataset, if the old one already exists on the Datacite end...", "author": "landreev", "createdAt": "2020-07-29T22:59:12Z", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/PublishDatasetCommand.java", "diffHunk": "@@ -75,7 +74,17 @@ public PublishDatasetResult execute(CommandContext ctxt) throws CommandException\n         boolean reservingPidsSupported = !idServiceBean.registerWhenPublished();\n         if (reservingPidsSupported) {\n             if (theDataset.getGlobalIdCreateTime() == null) {\n-                throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"publishDatasetCommand.pidNotReserved\"), this);\n+            \t//Backward compatibility and recovery from PID provider outage - if we should have reserved at creation time but didn't, try here as well to keep moving. If we still can't reserve (service down, connflict, etc.) then bail\n+            \ttry {\n+                    String returnString = idServiceBean.createIdentifier(this.getDataset());", "originalCommit": "dbf9458581736058d4e41a33e2de40800bdb02b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MTI3OQ==", "url": "https://github.com/IQSS/dataverse/pull/7147#discussion_r462641279", "bodyText": "Does DataCite hang/delay an http call (versus fail)? If so I can move this/integrate with registerExternalIdentifier to avoid waiting for the call to succeed/fail. It seems like going async and not being able to respond to the user when the first step fails (before file validation, file DOI registrations) except with the async notification isn't great either, but if there are cases where reserving the dataset DOI might induce people to click again, I guess it makes sense.", "author": "qqmyers", "createdAt": "2020-07-29T23:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NzI1OA==", "url": "https://github.com/IQSS/dataverse/pull/7147#discussion_r462647258", "bodyText": "Well, it is a network call - so it can hang... I believe we have seen registration calls actually taking a long time and/or timing out, during the worst of their service troubles.\nBut yes, one nice thing about the current implementation is that we can exit right away with a clear message, before the dataset gets locked and the command goes async.\n(we could alternatively try and leave it in the first part of the command - but make the call with a forced short timeout?)", "author": "landreev", "createdAt": "2020-07-29T23:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzODM1Ng==", "url": "https://github.com/IQSS/dataverse/pull/7147#discussion_r463038356", "bodyText": "OK - updated registerExternalIdentifier and moved things to Finalize. As far as I can tell, the httpClient should be limiting the wait for a response to one minute (system default) but that could be lowered in the DataCIteRESTfullClient (easiest to set once for all calls since there's one shared client) and I think the whole call to registerExternalIdentifier could move to Publish then with a cut/paste.", "author": "qqmyers", "createdAt": "2020-07-30T14:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "89f5c4d81df218192d9ccd22f9088814e3c5fe89", "chunk": "diff --git a/src/main/java/edu/harvard/iq/dataverse/engine/command/impl/PublishDatasetCommand.java b/src/main/java/edu/harvard/iq/dataverse/engine/command/impl/PublishDatasetCommand.java\nindex cd4050b7f..370db2ad6 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/engine/command/impl/PublishDatasetCommand.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/engine/command/impl/PublishDatasetCommand.java\n\n@@ -68,26 +68,6 @@ public class PublishDatasetCommand extends AbstractPublishDatasetCommand<Publish\n \n         Dataset theDataset = getDataset();\n \n-        // If PID can be reserved, only allow publishing if it is.\n-        String protocol = getDataset().getProtocol();\n-        GlobalIdServiceBean idServiceBean = GlobalIdServiceBean.getBean(protocol, ctxt);\n-        boolean reservingPidsSupported = !idServiceBean.registerWhenPublished();\n-        if (reservingPidsSupported) {\n-            if (theDataset.getGlobalIdCreateTime() == null) {\n-            \t//Backward compatibility and recovery from PID provider outage - if we should have reserved at creation time but didn't, try here as well to keep moving. If we still can't reserve (service down, connflict, etc.) then bail\n-            \ttry {\n-                    String returnString = idServiceBean.createIdentifier(this.getDataset());\n-                    logger.fine(returnString);\n-                    // No errors caught, so mark PID as reserved.\n-                    getDataset().setGlobalIdCreateTime(new Date());\n-                    // Don't setIdentifierRegistered(true) yet (that means identifier has been made public - occurs in FinalizeDatasetPublicationCommand)\n-                } catch (Throwable ex) {\n-                    logger.warning(\"Reserving PID for: \"  + getDataset().getId() + \" during publication failed.\");\n-                    throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"publishDatasetCommand.pidNotReserved\"), this);\n-                }\n-            }\n-        }\n-\n         // Set the version numbers:\n \n         if (theDataset.getPublicationDate() == null) {\n"}}, {"oid": "89f5c4d81df218192d9ccd22f9088814e3c5fe89", "url": "https://github.com/IQSS/dataverse/commit/89f5c4d81df218192d9ccd22f9088814e3c5fe89", "message": "alternative moving to FinalizePub", "committedDate": "2020-07-30T14:25:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzOTEyMg==", "url": "https://github.com/IQSS/dataverse/pull/7147#discussion_r463039122", "bodyText": "I think this was just to avoid the retry attempts - same set of calls otherwise.", "author": "qqmyers", "createdAt": "2020-07-30T14:30:23Z", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/AbstractDatasetCommand.java", "diffHunk": "@@ -155,32 +155,30 @@ protected void tidyUpFields(DatasetVersion dsv) {\n      * @param ctxt\n      * @throws CommandException\n      */\n-    protected void registerExternalIdentifier(Dataset theDataset, CommandContext ctxt) throws CommandException {\n+    protected void registerExternalIdentifier(Dataset theDataset, CommandContext ctxt, boolean retry) throws CommandException {\n         if (!theDataset.isIdentifierRegistered()) {\n             GlobalIdServiceBean globalIdServiceBean = GlobalIdServiceBean.getBean(theDataset.getProtocol(), ctxt);\n             if ( globalIdServiceBean != null ) {\n                 if (globalIdServiceBean instanceof FakePidProviderServiceBean) {\n-                    try {\n-                        globalIdServiceBean.createIdentifier(theDataset);\n-                    } catch (Throwable ex) {\n-                        logger.warning(\"Problem running createIdentifier for FakePidProvider: \" + ex);\n-                    }\n-                    theDataset.setGlobalIdCreateTime(getTimestamp());\n-                    theDataset.setIdentifierRegistered(true);\n-                    return;", "originalCommit": "89f5c4d81df218192d9ccd22f9088814e3c5fe89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzOTcwMQ==", "url": "https://github.com/IQSS/dataverse/pull/7147#discussion_r463039701", "bodyText": "With while, there's an extra call to alreadyExists in the first iteration, so switched to do while loop.", "author": "qqmyers", "createdAt": "2020-07-30T14:31:09Z", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/AbstractDatasetCommand.java", "diffHunk": "@@ -155,32 +155,30 @@ protected void tidyUpFields(DatasetVersion dsv) {\n      * @param ctxt\n      * @throws CommandException\n      */\n-    protected void registerExternalIdentifier(Dataset theDataset, CommandContext ctxt) throws CommandException {\n+    protected void registerExternalIdentifier(Dataset theDataset, CommandContext ctxt, boolean retry) throws CommandException {\n         if (!theDataset.isIdentifierRegistered()) {\n             GlobalIdServiceBean globalIdServiceBean = GlobalIdServiceBean.getBean(theDataset.getProtocol(), ctxt);\n             if ( globalIdServiceBean != null ) {\n                 if (globalIdServiceBean instanceof FakePidProviderServiceBean) {\n-                    try {\n-                        globalIdServiceBean.createIdentifier(theDataset);\n-                    } catch (Throwable ex) {\n-                        logger.warning(\"Problem running createIdentifier for FakePidProvider: \" + ex);\n-                    }\n-                    theDataset.setGlobalIdCreateTime(getTimestamp());\n-                    theDataset.setIdentifierRegistered(true);\n-                    return;\n+                    retry=false; //No reason to allow a retry with the FakeProvider, so set false for efficiency\n                 }\n                 try {\n                     if (globalIdServiceBean.alreadyExists(theDataset)) {\n                         int attempts = 0;\n-\n-                        while (globalIdServiceBean.alreadyExists(theDataset) && attempts < FOOLPROOF_RETRIAL_ATTEMPTS_LIMIT) {", "originalCommit": "89f5c4d81df218192d9ccd22f9088814e3c5fe89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MDQ4NA==", "url": "https://github.com/IQSS/dataverse/pull/7147#discussion_r463040484", "bodyText": "Similar - extra call to alreadyExists since attempts will be over the limit if the while call above doesn't find alreadyExists()==false by the end.", "author": "qqmyers", "createdAt": "2020-07-30T14:32:12Z", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/AbstractDatasetCommand.java", "diffHunk": "@@ -155,32 +155,30 @@ protected void tidyUpFields(DatasetVersion dsv) {\n      * @param ctxt\n      * @throws CommandException\n      */\n-    protected void registerExternalIdentifier(Dataset theDataset, CommandContext ctxt) throws CommandException {\n+    protected void registerExternalIdentifier(Dataset theDataset, CommandContext ctxt, boolean retry) throws CommandException {\n         if (!theDataset.isIdentifierRegistered()) {\n             GlobalIdServiceBean globalIdServiceBean = GlobalIdServiceBean.getBean(theDataset.getProtocol(), ctxt);\n             if ( globalIdServiceBean != null ) {\n                 if (globalIdServiceBean instanceof FakePidProviderServiceBean) {\n-                    try {\n-                        globalIdServiceBean.createIdentifier(theDataset);\n-                    } catch (Throwable ex) {\n-                        logger.warning(\"Problem running createIdentifier for FakePidProvider: \" + ex);\n-                    }\n-                    theDataset.setGlobalIdCreateTime(getTimestamp());\n-                    theDataset.setIdentifierRegistered(true);\n-                    return;\n+                    retry=false; //No reason to allow a retry with the FakeProvider, so set false for efficiency\n                 }\n                 try {\n                     if (globalIdServiceBean.alreadyExists(theDataset)) {\n                         int attempts = 0;\n-\n-                        while (globalIdServiceBean.alreadyExists(theDataset) && attempts < FOOLPROOF_RETRIAL_ATTEMPTS_LIMIT) {\n-                            theDataset.setIdentifier(ctxt.datasets().generateDatasetIdentifier(theDataset, globalIdServiceBean));\n-                            logger.log(Level.INFO, \"Attempting to register external identifier for dataset {0} (trying: {1}).\",\n-                                new Object[]{theDataset.getId(), theDataset.getIdentifier()});\n-                            attempts++;\n+                        if(retry) {\n+                            do  {\n+                                theDataset.setIdentifier(ctxt.datasets().generateDatasetIdentifier(theDataset, globalIdServiceBean));\n+                                logger.log(Level.INFO, \"Attempting to register external identifier for dataset {0} (trying: {1}).\",\n+                                    new Object[]{theDataset.getId(), theDataset.getIdentifier()});\n+                                attempts++;\n+                            } while (globalIdServiceBean.alreadyExists(theDataset) && attempts <= FOOLPROOF_RETRIAL_ATTEMPTS_LIMIT);\n                         }\n-\n-                        if (globalIdServiceBean.alreadyExists(theDataset)) {", "originalCommit": "89f5c4d81df218192d9ccd22f9088814e3c5fe89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA5MzM1OA==", "url": "https://github.com/IQSS/dataverse/pull/7147#discussion_r463093358", "bodyText": "Independent of the larger discussion about the PR, if we keep the new boolean flag, it could always be set to false here - PID providers that do not register draft DOIs would then try once to create a DOI at publication time and fail if the DOI is already in use, versus retrying and causing all of the files to be 'lost' (at the path for the old/conflicted DOI instead of one found in a retry). Retries would then only occur in the create command (for providers that can reserve).", "author": "qqmyers", "createdAt": "2020-07-30T15:45:43Z", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java", "diffHunk": "@@ -83,9 +83,20 @@ public Dataset execute(CommandContext ctxt) throws CommandException {\n             validateDataFiles(theDataset, ctxt);\n             // (this will throw a CommandException if it fails)\n         }\n-        \n+\n+\t\t/*\n+\t\t * Try to register the dataset identifier (making it public). The\n+\t\t * registerExternalIdentifier command will also create the identifier if needed:\n+\t\t * - In the case where the PID provider doesn't support reservations, in which\n+\t\t *   case it will retry if collisions are found \n+\t\t * - In the case where the PID Provider\n+\t\t *   does support reservations, but the Dataset's PID hasn't been reserved (was\n+\t\t *   created prior to v5.0 and admin hasn't run reserve API, or PID Provider was\n+\t\t *   offline at creation time), in which case no retries will be attempted.\n+\t\t */\n+        GlobalIdServiceBean idServiceBean = GlobalIdServiceBean.getBean(getDataset().getProtocol(), ctxt);\n         if ( theDataset.getGlobalIdCreateTime() == null ) {\n-            registerExternalIdentifier(theDataset, ctxt);\n+            registerExternalIdentifier(theDataset, ctxt, idServiceBean.registerWhenPublished());", "originalCommit": "89f5c4d81df218192d9ccd22f9088814e3c5fe89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2ODg1Ng==", "url": "https://github.com/IQSS/dataverse/pull/7147#discussion_r463768856", "bodyText": "This does make sense - maybe we should just hard-code it to false, when the method is called from the publication command. It's not exactly clear what the point would be, in keeping the current behavior for handles.\n?", "author": "landreev", "createdAt": "2020-07-31T18:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA5MzM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "1cebc6f17eb001cf18e11182dbe39f5206b8cb54", "chunk": "diff --git a/src/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java b/src/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java\nindex 56251473c..5eb739a34 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java\n\n@@ -87,16 +87,11 @@ public class FinalizeDatasetPublicationCommand extends AbstractPublishDatasetCom\n \t\t/*\n \t\t * Try to register the dataset identifier (making it public). The\n \t\t * registerExternalIdentifier command will also create the identifier if needed:\n-\t\t * - In the case where the PID provider doesn't support reservations, in which\n-\t\t *   case it will retry if collisions are found \n-\t\t * - In the case where the PID Provider\n-\t\t *   does support reservations, but the Dataset's PID hasn't been reserved (was\n-\t\t *   created prior to v5.0 and admin hasn't run reserve API, or PID Provider was\n-\t\t *   offline at creation time), in which case no retries will be attempted.\n+\t\t * If a conflict is found, the call will fail rather than retry to avoid changing the PID\n+\t\t * - due to file paths including the dataset PID, this would 'lose' files.\n \t\t */\n-        GlobalIdServiceBean idServiceBean = GlobalIdServiceBean.getBean(getDataset().getProtocol(), ctxt);\n         if ( theDataset.getGlobalIdCreateTime() == null ) {\n-            registerExternalIdentifier(theDataset, ctxt, idServiceBean.registerWhenPublished());\n+            registerExternalIdentifier(theDataset, ctxt, false);\n         }\n                 \n         // is this the first publication of the dataset?\n"}}, {"oid": "1cebc6f17eb001cf18e11182dbe39f5206b8cb54", "url": "https://github.com/IQSS/dataverse/commit/1cebc6f17eb001cf18e11182dbe39f5206b8cb54", "message": "don't retry since it could lose files\n\nfiles don't disappear, but they are stored with a path reflecting the\ninitial PID so changing the PID means that can't be retrieved using any\nnewly created PID - the reason reserve at create time has been\nimplemented for DataCIte and is preferred overall", "committedDate": "2020-07-31T18:50:40Z", "type": "commit"}, {"oid": "09a84014ef2e386cce38a0789331b12ee782cd48", "url": "https://github.com/IQSS/dataverse/commit/09a84014ef2e386cce38a0789331b12ee782cd48", "message": "Merge remote-tracking branch 'IQSS/develop' into\nIQSS/7146-reserve_at_publish_when_needed\n\nConflicts:\n\tsrc/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java", "committedDate": "2020-08-03T20:31:20Z", "type": "commit"}]}