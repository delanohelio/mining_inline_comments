{"pr_number": 6957, "pr_title": "use POST for file download to avoid url length limits", "pr_createdAt": "2020-06-03T15:50:07Z", "pr_url": "https://github.com/IQSS/dataverse/pull/6957", "timeline": [{"oid": "73e42e24d6ed21c64a881391b03dbdc1e45361f0", "url": "https://github.com/IQSS/dataverse/commit/73e42e24d6ed21c64a881391b03dbdc1e45361f0", "message": "use POST for file download to avoid url length limits", "committedDate": "2020-06-03T15:43:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5Mzk1Ng==", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r434793956", "bodyText": "I was playing with this using curl and got a NullPointerException when fileIds was null (and a 500 error). Some error checking would be nice.", "author": "pdurbin", "createdAt": "2020-06-03T19:12:03Z", "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -525,15 +527,38 @@ public DownloadInstance tabularDatafileMetadataPreprocessed(@PathParam(\"fileId\")\n     }\n     \n     /* \n-     * API method for downloading zipped bundles of multiple files:\n+     * API method for downloading zipped bundles of multiple files. Uses POST to avoid long lists of file IDs that can make the URL longer than what's supported by browsers/servers\n     */\n     \n-    // TODO: Rather than only supporting looking up files by their database IDs, consider supporting persistent identifiers.\n+    // TODO: Rather than only supporting looking up files by their database IDs,\n+    // consider supporting persistent identifiers.\n+    @Path(\"datafiles\")\n+    @POST\n+    @Consumes(\"text/plain\")\n+    @Produces({ \"application/zip\" })\n+    public Response postDownloadDatafiles(String fileIds, @QueryParam(\"gbrecs\") boolean gbrecs, @QueryParam(\"key\") String apiTokenParam, @Context UriInfo uriInfo, @Context HttpHeaders headers, @Context HttpServletResponse response) throws WebApplicationException {\n+        \n+        fileIds = fileIds.substring(8); // String \"fileIds=\" from the front", "originalCommit": "73e42e24d6ed21c64a881391b03dbdc1e45361f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzNDIyNg==", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r435534226", "bodyText": "There is error checking. I just defeated it by taking a substring of null before the error check is done in downloadDataFiles() :-) Will fix.", "author": "qqmyers", "createdAt": "2020-06-04T20:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5Mzk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9fd7f23d392f43277420e140c7c63528c3e1f157", "chunk": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Access.java b/src/main/java/edu/harvard/iq/dataverse/api/Access.java\nindex ccdac8df7..ea2d512f9 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Access.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Access.java\n\n@@ -538,11 +538,7 @@ public class Access extends AbstractApiBean {\n     @Produces({ \"application/zip\" })\n     public Response postDownloadDatafiles(String fileIds, @QueryParam(\"gbrecs\") boolean gbrecs, @QueryParam(\"key\") String apiTokenParam, @Context UriInfo uriInfo, @Context HttpHeaders headers, @Context HttpServletResponse response) throws WebApplicationException {\n         \n-        fileIds = fileIds.substring(8); // String \"fileIds=\" from the front\n-        /* Note - fileIds also has a ',' after the last file id number and before a\n-         * final '\\n' - the latter appears to stop the last item from being parsed in\n-         * the fileIds.split(\",\"); line below.\n-         */\n+\n         return downloadDatafiles(fileIds, gbrecs, apiTokenParam, uriInfo, headers, response);\n     }\n     /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NDk1OQ==", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r434794959", "bodyText": "I think this API should be documented along side the other ones in the Data Access API page of the API Guide. I can imagine the same error that was reported in #6943 could easily happen to API users.", "author": "pdurbin", "createdAt": "2020-06-03T19:13:53Z", "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -525,15 +527,38 @@ public DownloadInstance tabularDatafileMetadataPreprocessed(@PathParam(\"fileId\")\n     }\n     \n     /* \n-     * API method for downloading zipped bundles of multiple files:\n+     * API method for downloading zipped bundles of multiple files. Uses POST to avoid long lists of file IDs that can make the URL longer than what's supported by browsers/servers\n     */\n     \n-    // TODO: Rather than only supporting looking up files by their database IDs, consider supporting persistent identifiers.\n+    // TODO: Rather than only supporting looking up files by their database IDs,\n+    // consider supporting persistent identifiers.\n+    @Path(\"datafiles\")\n+    @POST", "originalCommit": "73e42e24d6ed21c64a881391b03dbdc1e45361f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0MTA3MQ==", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r435541071", "bodyText": "Added - feel free to change.", "author": "qqmyers", "createdAt": "2020-06-04T20:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NDk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fd7f23d392f43277420e140c7c63528c3e1f157", "chunk": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Access.java b/src/main/java/edu/harvard/iq/dataverse/api/Access.java\nindex ccdac8df7..ea2d512f9 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Access.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Access.java\n\n@@ -538,11 +538,7 @@ public class Access extends AbstractApiBean {\n     @Produces({ \"application/zip\" })\n     public Response postDownloadDatafiles(String fileIds, @QueryParam(\"gbrecs\") boolean gbrecs, @QueryParam(\"key\") String apiTokenParam, @Context UriInfo uriInfo, @Context HttpHeaders headers, @Context HttpServletResponse response) throws WebApplicationException {\n         \n-        fileIds = fileIds.substring(8); // String \"fileIds=\" from the front\n-        /* Note - fileIds also has a ',' after the last file id number and before a\n-         * final '\\n' - the latter appears to stop the last item from being parsed in\n-         * the fileIds.split(\",\"); line below.\n-         */\n+\n         return downloadDatafiles(fileIds, gbrecs, apiTokenParam, uriInfo, headers, response);\n     }\n     /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODQ0Mw==", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r434818443", "bodyText": "This is just a comment but I assume that PrimeFaces is being used here because there's no JSF standard way (FacesContext way) to execute a script.", "author": "pdurbin", "createdAt": "2020-06-03T19:56:31Z", "path": "src/main/java/edu/harvard/iq/dataverse/FileDownloadServiceBean.java", "diffHunk": "@@ -212,11 +213,7 @@ private void redirectToBatchDownloadAPI(String multiFileString, Boolean guestboo\n             fileDownloadUrl += \"?format=original\";\n         }\n         \n-        try {\n-            FacesContext.getCurrentInstance().getExternalContext().redirect(fileDownloadUrl);\n-        } catch (IOException ex) {\n-            logger.info(\"Failed to issue a redirect to file download url.\");\n-        }\n+        PrimeFaces.current().executeScript(\"downloadFiles('\"+fileDownloadUrl + \"','\"+ multiFileString+\"');\");", "originalCommit": "73e42e24d6ed21c64a881391b03dbdc1e45361f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzNTk2OQ==", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r435535969", "bodyText": "I'm not certain but this is done elsewhere and I assume PF needed this method for some reason. I didn't find anything else with a quick web check.", "author": "qqmyers", "createdAt": "2020-06-04T20:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODQ0Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9fd7f23d392f43277420e140c7c63528c3e1f157", "url": "https://github.com/IQSS/dataverse/commit/9fd7f23d392f43277420e140c7c63528c3e1f157", "message": "addressing comments - fix error handling, add api doc", "committedDate": "2020-06-04T20:50:28Z", "type": "commit"}]}