{"pr_number": 7846, "pr_title": "Set credentials charset of authentication converter", "pr_createdAt": "2020-01-18T19:26:06Z", "pr_url": "https://github.com/spring-projects/spring-security/pull/7846", "timeline": [{"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "url": "https://github.com/spring-projects/spring-security/commit/7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "message": "Set credentials charset of authentication converter", "committedDate": "2020-01-18T19:23:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MDg5Mw==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369540893", "bodyText": "You can use StandardCharsets.UTF_8 here instead of the String \"UTF-8\"", "author": "eleftherias", "createdAt": "2020-01-22T12:51:31Z", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));", "originalCommit": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MjA5NA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369752094", "bodyText": "Thanks for your feedback. I adjusted the code.", "author": "peterkeller", "createdAt": "2020-01-22T19:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MDg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f53f4e0668b9034bf38741bda7b7c9bfa899709e", "chunk": "diff --git a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\nindex 63fe9c7129..c03b132807 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n\n@@ -322,7 +325,7 @@ public class BasicAuthenticationFilterTests {\n \t}\n \n \t@Test\n-\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\tpublic void doFilterWhenTokenAndFilterCharsetMatchDefaultThenAuthenticated() throws Exception {\n \t\tSecurityContextHolder.clearContext();\n \n \t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MTE5OA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369541198", "bodyText": "You can use StandardCharsets.ISO_8859_1 here instead of the String \"ISO-8859-1\"", "author": "eleftherias", "createdAt": "2020-01-22T12:52:03Z", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));\n+\t\trequest.setServletPath(\"/some_file.html\");\n+\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t\t// Test\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();\n+\t\tFilterChain chain = mock(FilterChain.class);\n+\n+\t\tfilter.doFilter(request, response, chain);\n+\n+\t\tassertThat(response.getStatus()).isEqualTo(200);\n+\t\tverify(chain).doFilter(any(ServletRequest.class), any(ServletResponse.class));\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(\"rod\");\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getCredentials()).isEqualTo(\"\u00e4\u00f6\u00fc\");\n+\t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Iso_8859_1() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\t\tfilter.setCredentialsCharset(\"ISO-8859-1\");\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"ISO-8859-1\"))));", "originalCommit": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MjE3OA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369752178", "bodyText": "I adjusted the code.", "author": "peterkeller", "createdAt": "2020-01-22T19:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MTE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "f53f4e0668b9034bf38741bda7b7c9bfa899709e", "chunk": "diff --git a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\nindex 63fe9c7129..c03b132807 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n\n@@ -322,7 +325,7 @@ public class BasicAuthenticationFilterTests {\n \t}\n \n \t@Test\n-\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\tpublic void doFilterWhenTokenAndFilterCharsetMatchDefaultThenAuthenticated() throws Exception {\n \t\tSecurityContextHolder.clearContext();\n \n \t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NTUwOA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369545508", "bodyText": "Although this test name follows the same pattern as other tests in this class, we would like any new tests to follow the convention methodWhenConditionThenResult.\nA possible name could be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n          \n          \n            \n            \tpublic void doFilterWhenTokenAndFilterCharsetMatchThenAuthenticated() throws Exception {", "author": "eleftherias", "createdAt": "2020-01-22T13:02:03Z", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {", "originalCommit": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MjM0OA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369752348", "bodyText": "I adjusted the code.", "author": "peterkeller", "createdAt": "2020-01-22T19:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "f53f4e0668b9034bf38741bda7b7c9bfa899709e", "chunk": "diff --git a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\nindex 63fe9c7129..c03b132807 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n\n@@ -322,7 +325,7 @@ public class BasicAuthenticationFilterTests {\n \t}\n \n \t@Test\n-\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\tpublic void doFilterWhenTokenAndFilterCharsetMatchDefaultThenAuthenticated() throws Exception {\n \t\tSecurityContextHolder.clearContext();\n \n \t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n"}}, {"oid": "f53f4e0668b9034bf38741bda7b7c9bfa899709e", "url": "https://github.com/spring-projects/spring-security/commit/f53f4e0668b9034bf38741bda7b7c9bfa899709e", "message": "Polish unit tests", "committedDate": "2020-01-22T18:46:38Z", "type": "commit"}]}