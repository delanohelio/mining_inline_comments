{"pr_number": 215, "pr_title": "Add unit tests for ShellRunner", "pr_createdAt": "2020-04-28T17:00:06Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215", "timeline": [{"oid": "3012f8d486748d79abb0e3c9b7144bec38b2631f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3012f8d486748d79abb0e3c9b7144bec38b2631f", "message": "Add unit tests for ShellRunner", "committedDate": "2020-04-28T16:45:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NzQ2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r416777469", "bodyText": "Please name these as GIVEN, WHEN, THEN -- BDD style.", "author": "MikeDombo", "createdAt": "2020-04-28T17:03:01Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.IntConsumer;\n+\n+import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+class ShellRunnerTest extends EGServiceTestUtil {\n+\n+    @Mock\n+    private Topic uniqueId;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private EvergreenService evergreenService;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Topics config = initializeMockedConfig();\n+        when(config.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);\n+        when(kernel.getWorkPath()).thenReturn(Paths.get(System.getProperty(\"user.dir\")));\n+        evergreenService = new EvergreenService(config);\n+    }\n+\n+    @Test\n+    void testForeground() throws Exception {", "originalCommit": "3012f8d486748d79abb0e3c9b7144bec38b2631f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c5a25fab5e8c4bdab52acb407f246ec7d63ac26", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java b/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\nindex b12341127..5f1a524f4 100644\n--- a/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\n\n@@ -39,7 +39,7 @@ class ShellRunnerTest extends EGServiceTestUtil {\n     }\n \n     @Test\n-    void testForeground() throws Exception {\n+    void GIVEN_shell_command_WHEN_run_in_foreground_THEN_succeeds() throws Exception {\n         try (Context context = new Context()) {\n             context.put(Kernel.class, kernel);\n             final ShellRunner shellRunner = context.get(ShellRunner.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3ODAyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r416778020", "bodyText": "let's keep this quick. This test works the same if you don't sleep for any time.", "author": "MikeDombo", "createdAt": "2020-04-28T17:03:52Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.IntConsumer;\n+\n+import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+class ShellRunnerTest extends EGServiceTestUtil {\n+\n+    @Mock\n+    private Topic uniqueId;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private EvergreenService evergreenService;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Topics config = initializeMockedConfig();\n+        when(config.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);\n+        when(kernel.getWorkPath()).thenReturn(Paths.get(System.getProperty(\"user.dir\")));\n+        evergreenService = new EvergreenService(config);\n+    }\n+\n+    @Test\n+    void testForeground() throws Exception {\n+        try (Context context = new Context()) {\n+            context.put(Kernel.class, kernel);\n+            final ShellRunner shellRunner = context.get(ShellRunner.class);\n+            try (Exec exec = shellRunner.setup(\"note\", \"echo hi\", evergreenService)) {\n+                boolean ok = shellRunner.successful(exec, \"note\", null, evergreenService);\n+                assertTrue(ok);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    void testBackground() throws Exception {\n+        final AtomicInteger exitCode = new AtomicInteger();\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        IntConsumer background = (value) -> {\n+            exitCode.set(value);\n+            latch.countDown();\n+        };\n+\n+        try (Context context = new Context()) {\n+            context.put(Kernel.class, kernel);\n+            final ShellRunner shellRunner = context.get(ShellRunner.class);\n+            try (Exec exec = shellRunner.setup(\"note\", \"sleep 5\", evergreenService)) {", "originalCommit": "3012f8d486748d79abb0e3c9b7144bec38b2631f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c5a25fab5e8c4bdab52acb407f246ec7d63ac26", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java b/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\nindex b12341127..5f1a524f4 100644\n--- a/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\n\n@@ -39,7 +39,7 @@ class ShellRunnerTest extends EGServiceTestUtil {\n     }\n \n     @Test\n-    void testForeground() throws Exception {\n+    void GIVEN_shell_command_WHEN_run_in_foreground_THEN_succeeds() throws Exception {\n         try (Context context = new Context()) {\n             context.put(Kernel.class, kernel);\n             final ShellRunner shellRunner = context.get(ShellRunner.class);\n"}}, {"oid": "1c5a25fab5e8c4bdab52acb407f246ec7d63ac26", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1c5a25fab5e8c4bdab52acb407f246ec7d63ac26", "message": "Address feedback", "committedDate": "2020-04-28T17:25:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxMjk1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r416812951", "bodyText": "nice, we need negative cases too.", "author": "MikeDombo", "createdAt": "2020-04-28T17:57:51Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.IntConsumer;\n+\n+import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+class ShellRunnerTest extends EGServiceTestUtil {\n+\n+    @Mock\n+    private Topic uniqueId;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private EvergreenService evergreenService;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Topics config = initializeMockedConfig();\n+        when(config.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);\n+        when(kernel.getWorkPath()).thenReturn(Paths.get(System.getProperty(\"user.dir\")));\n+        evergreenService = new EvergreenService(config);\n+    }\n+\n+    @Test\n+    void GIVEN_shell_command_WHEN_run_in_foreground_THEN_succeeds() throws Exception {\n+        try (Context context = new Context()) {\n+            context.put(Kernel.class, kernel);\n+            final ShellRunner shellRunner = context.get(ShellRunner.class);\n+            try (Exec exec = shellRunner.setup(\"note\", \"echo hi\", evergreenService)) {\n+                boolean ok = shellRunner.successful(exec, \"note\", null, evergreenService);\n+                assertTrue(ok);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_shell_command_WHEN_run_in_background_THEN_succeeds() throws Exception {", "originalCommit": "1c5a25fab5e8c4bdab52acb407f246ec7d63ac26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65f3ba587ffbe142225ef9d008763489d7fa4463", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java b/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\nindex 5f1a524f4..61743f5dd 100644\n--- a/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\n\n@@ -17,6 +17,7 @@ import java.util.function.IntConsumer;\n \n import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.when;\n \n"}}, {"oid": "65f3ba587ffbe142225ef9d008763489d7fa4463", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/65f3ba587ffbe142225ef9d008763489d7fa4463", "message": "Add negative cases", "committedDate": "2020-04-28T18:55:35Z", "type": "commit"}, {"oid": "1b9530538e756cde8afa7e65a9119548fa767308", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1b9530538e756cde8afa7e65a9119548fa767308", "message": "Merge branch 'master' into process_test", "committedDate": "2020-04-28T21:23:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2ODM4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r416968386", "bodyText": "let's also assert that the process has exited after the successful is done.", "author": "MikeDombo", "createdAt": "2020-04-28T22:44:58Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.IntConsumer;\n+\n+import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+class ShellRunnerTest extends EGServiceTestUtil {\n+\n+    @Mock\n+    private Topic uniqueId;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private EvergreenService evergreenService;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Topics config = initializeMockedConfig();\n+        when(config.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);\n+        when(kernel.getWorkPath()).thenReturn(Paths.get(System.getProperty(\"user.dir\")));\n+        evergreenService = new EvergreenService(config);\n+    }\n+\n+    @Test\n+    void GIVEN_shell_command_WHEN_run_in_foreground_THEN_succeeds() throws Exception {\n+        try (Context context = new Context()) {\n+            context.put(Kernel.class, kernel);\n+            final ShellRunner shellRunner = context.get(ShellRunner.class);\n+            try (Exec exec = shellRunner.setup(\"note\", \"echo hi\", evergreenService)) {", "originalCommit": "1b9530538e756cde8afa7e65a9119548fa767308", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4eae9f3e94de75360657c6ec7738b9f1bbeb25d1", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java b/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\nindex 61743f5dd..843a4ab9a 100644\n--- a/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java\n\n@@ -47,6 +47,7 @@ class ShellRunnerTest extends EGServiceTestUtil {\n             try (Exec exec = shellRunner.setup(\"note\", \"echo hi\", evergreenService)) {\n                 boolean ok = shellRunner.successful(exec, \"note\", null, evergreenService);\n                 assertTrue(ok);\n+                assertFalse(exec.isRunning());\n             }\n         }\n     }\n"}}, {"oid": "4eae9f3e94de75360657c6ec7738b9f1bbeb25d1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4eae9f3e94de75360657c6ec7738b9f1bbeb25d1", "message": "assert process has exited", "committedDate": "2020-04-28T23:12:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MDA0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r416980042", "bodyText": "Looks like the shell runner is still only 80% covered, can you check on that and try to raise it?", "author": "MikeDombo", "createdAt": "2020-04-28T23:16:33Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.kernel;", "originalCommit": "4eae9f3e94de75360657c6ec7738b9f1bbeb25d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MTYxOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r416981618", "bodyText": "Where do you see the coverage report?\nHow do I get it in a local build?", "author": "fufranci", "createdAt": "2020-04-28T23:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MDA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MjYwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r416982605", "bodyText": "Just use IntelliJ to run the single test class with coverage. If you long press (or maybe right click) on the green play arrow on the test class then you can dropdown and do coverage instead. Here you can see the coverage report in the comment above.", "author": "MikeDombo", "createdAt": "2020-04-28T23:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MDA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4ODgzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r416988835", "bodyText": "I see. Thanks! There is a catch block that doesn't have coverage. I would need to mock the Exec object to throw an IOException. But the Exec obj is being created within ShellRunner#setup, making it not able to mock.", "author": "fufranci", "createdAt": "2020-04-28T23:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MDA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTc4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r416989780", "bodyText": "It will throw IOE when it can't run in the directory, so if you change your mock of getWorkPath to return a bad path, then that should throw the IOE", "author": "MikeDombo", "createdAt": "2020-04-28T23:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MDA0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzI4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r417007286", "bodyText": "[Optional] Passing a @TempDir Path tempDir would be safer. Right now, we are not interacting with the working folder but we could prevent people from doing so in the future...", "author": "leaf94", "createdAt": "2020-04-29T00:38:45Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.IntConsumer;\n+\n+import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+class ShellRunnerTest extends EGServiceTestUtil {\n+\n+    @Mock\n+    private Topic uniqueId;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private EvergreenService evergreenService;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Topics config = initializeMockedConfig();\n+        when(config.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);\n+        when(kernel.getWorkPath()).thenReturn(Paths.get(System.getProperty(\"user.dir\")));", "originalCommit": "4eae9f3e94de75360657c6ec7738b9f1bbeb25d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzkwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r417007909", "bodyText": "Very clean, neat, and also safe way to initialize ShellRunner!", "author": "leaf94", "createdAt": "2020-04-29T00:40:56Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.IntConsumer;\n+\n+import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+class ShellRunnerTest extends EGServiceTestUtil {\n+\n+    @Mock\n+    private Topic uniqueId;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private EvergreenService evergreenService;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Topics config = initializeMockedConfig();\n+        when(config.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);\n+        when(kernel.getWorkPath()).thenReturn(Paths.get(System.getProperty(\"user.dir\")));\n+        evergreenService = new EvergreenService(config);\n+    }\n+\n+    @Test\n+    void GIVEN_shell_command_WHEN_run_in_foreground_THEN_succeeds() throws Exception {\n+        try (Context context = new Context()) {\n+            context.put(Kernel.class, kernel);\n+            final ShellRunner shellRunner = context.get(ShellRunner.class);", "originalCommit": "4eae9f3e94de75360657c6ec7738b9f1bbeb25d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwODI3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r417008271", "bodyText": "I'd rename the successful to run... I always feel confused about this successful method...", "author": "leaf94", "createdAt": "2020-04-29T00:42:03Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.IntConsumer;\n+\n+import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+class ShellRunnerTest extends EGServiceTestUtil {\n+\n+    @Mock\n+    private Topic uniqueId;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private EvergreenService evergreenService;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Topics config = initializeMockedConfig();\n+        when(config.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);\n+        when(kernel.getWorkPath()).thenReturn(Paths.get(System.getProperty(\"user.dir\")));\n+        evergreenService = new EvergreenService(config);\n+    }\n+\n+    @Test\n+    void GIVEN_shell_command_WHEN_run_in_foreground_THEN_succeeds() throws Exception {\n+        try (Context context = new Context()) {\n+            context.put(Kernel.class, kernel);\n+            final ShellRunner shellRunner = context.get(ShellRunner.class);\n+            try (Exec exec = shellRunner.setup(\"note\", \"echo hi\", evergreenService)) {\n+                boolean ok = shellRunner.successful(exec, \"note\", null, evergreenService);", "originalCommit": "4eae9f3e94de75360657c6ec7738b9f1bbeb25d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDc0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r417010745", "bodyText": "Also, do you think it is more clear if we make this into two methods? Something like runAtForeground vs runAtBackground. We could avoid passing null as argument for branching. I understand the change might be big (may required to change GenericExternalService), but I feel it is very helpful.", "author": "leaf94", "createdAt": "2020-04-29T00:51:49Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.IntConsumer;\n+\n+import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+class ShellRunnerTest extends EGServiceTestUtil {\n+\n+    @Mock\n+    private Topic uniqueId;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private EvergreenService evergreenService;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Topics config = initializeMockedConfig();\n+        when(config.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);\n+        when(kernel.getWorkPath()).thenReturn(Paths.get(System.getProperty(\"user.dir\")));\n+        evergreenService = new EvergreenService(config);\n+    }\n+\n+    @Test\n+    void GIVEN_shell_command_WHEN_run_in_foreground_THEN_succeeds() throws Exception {\n+        try (Context context = new Context()) {\n+            context.put(Kernel.class, kernel);\n+            final ShellRunner shellRunner = context.get(ShellRunner.class);\n+            try (Exec exec = shellRunner.setup(\"note\", \"echo hi\", evergreenService)) {\n+                boolean ok = shellRunner.successful(exec, \"note\", null, evergreenService);", "originalCommit": "4eae9f3e94de75360657c6ec7738b9f1bbeb25d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzOTUxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/215#discussion_r417039519", "bodyText": "Thanks for the feedback. Do you mind if we keep the scope of this PR to be the same? I can start working on renaming/refactoring as a followup task.\nI am happy to touch GenericExternalService too to get myself more familiar with that area because I can see it probably will require some work for Android.", "author": "fufranci", "createdAt": "2020-04-29T02:53:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDc0NQ=="}], "type": "inlineReview", "revised_code": null}]}