{"pr_number": 65, "pr_title": "Use logger API in kernel", "pr_createdAt": "2020-02-20T03:12:12Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc2OTA5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381769095", "bodyText": "Shouldn't the logger here (and elsewhere) not be injected, but get a unique logger for each class?", "author": "MikeDombo", "createdAt": "2020-02-20T05:28:10Z", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/servicediscovery/ServiceDiscoveryAgent.java", "diffHunk": "@@ -36,7 +36,7 @@\n     private Configuration config;\n \n     @Inject\n-    private Log log;\n+    private Logger logger;", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/builtin/services/servicediscovery/ServiceDiscoveryAgent.java b/src/main/java/com/aws/iot/evergreen/builtin/services/servicediscovery/ServiceDiscoveryAgent.java\nindex 28f44d00c..d85e738fd 100644\n--- a/src/main/java/com/aws/iot/evergreen/builtin/services/servicediscovery/ServiceDiscoveryAgent.java\n+++ b/src/main/java/com/aws/iot/evergreen/builtin/services/servicediscovery/ServiceDiscoveryAgent.java\n\n@@ -35,9 +34,6 @@ public class ServiceDiscoveryAgent implements InjectionActions {\n     @Inject\n     private Configuration config;\n \n-    @Inject\n-    private Logger logger;\n-\n     @Inject\n     private Kernel kernel;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc2OTU5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381769590", "bodyText": "Even at trace, I don't think we want this log at all.", "author": "MikeDombo", "createdAt": "2020-02-20T05:29:05Z", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -104,8 +107,11 @@ public synchronized void published(WhatHappened what, Topic n) {\n                 out.append(',');\n                 Coerce.toParseableString(n.getOnce(), out);\n                 out.append('\\n');\n+                n.context.getLogger().atTrace().setEventType(\"config-single-write\").addKeyValue(\"config\",", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java b/src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java\nindex cf9644873..990d4e2f8 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java\n\n@@ -107,10 +111,8 @@ public class ConfigurationWriter implements Closeable, Subscriber {\n                 out.append(',');\n                 Coerce.toParseableString(n.getOnce(), out);\n                 out.append('\\n');\n-                n.context.getLogger().atTrace().setEventType(\"config-single-write\").addKeyValue(\"config\",\n-                        n.getFullName()).log();\n             } catch (IOException ex) {\n-                n.context.getLogger().atError().setEventType(\"config-single-write-error\").addKeyValue(\"config\",\n+                logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\",\n                         n.getFullName()).setCause(ex).log();\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc2OTkzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381769939", "bodyText": "I don't think this log would be helpful. Maybe have a log just for the fire, but not for each Subscriber", "author": "MikeDombo", "createdAt": "2020-02-20T05:29:52Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -124,11 +124,16 @@ public void fire(WhatHappened what) {\n                 try {\n                     if (s instanceof Subscriber) {\n                         ((Subscriber) s).published(what, this);\n+                        context.getLogger().atDebug().setEventType(\"service-config-update\").addKeyValue(\"config\",", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topic.java b/src/main/java/com/aws/iot/evergreen/config/Topic.java\nindex 938b735d5..7426eb871 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topic.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topic.java\n\n@@ -119,20 +123,19 @@ public class Topic extends Node {\n \n     @Override\n     public void fire(WhatHappened what) {\n+        logger.atDebug().setEventType(\"config-node-update\").addKeyValue(\"configNote\",\n+                getFullName()).addKeyValue(\"reason\", what.name()).log();\n         if (watchers != null) {\n             for (Watcher s : watchers) {\n                 try {\n                     if (s instanceof Subscriber) {\n                         ((Subscriber) s).published(what, this);\n-                        context.getLogger().atDebug().setEventType(\"service-config-update\").addKeyValue(\"config\",\n-                                getFullName()).addKeyValue(\"subscriber\", s.toString()).addKeyValue(\"reason\",\n-                                what.name()).log();\n                     }\n                 } catch (Throwable ex) {\n                     /* TODO if a subscriber fails, we should do more than just log a\n                        message.  Possibly unsubscribe it if the fault is persistent */\n-                    context.getLogger().atError().setCause(ex).setEventType(\"service-config-update-error\").addKeyValue(\n-                            \"config\", getFullName()).addKeyValue(\"update\", s.toString()).addKeyValue(\"reason\",\n+                    logger.atError().setCause(ex).setEventType(\"config-node-update-error\").addKeyValue(\n+                            \"configNote\", getFullName()).addKeyValue(\"subscriber\", s.toString()).addKeyValue(\"reason\",\n                             what.name()).log();\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MDEzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381770132", "bodyText": "Same here, I don't think we need a log for each subscriber.", "author": "MikeDombo", "createdAt": "2020-02-20T05:30:21Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -202,11 +202,14 @@ protected void childChanged(WhatHappened what, Node child) {\n                 try {\n                     if (s instanceof ChildChanged) {\n                         ((ChildChanged) s).childChanged(what, child);\n+                        context.getLogger().atDebug().setEventType(\"notify\").addKeyValue(\"src\", getFullName())", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topics.java b/src/main/java/com/aws/iot/evergreen/config/Topics.java\nindex c8d00ee22..9825077c8 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topics.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topics.java\n\n@@ -197,19 +201,20 @@ public class Topics extends Node implements Iterable<Node> {\n     }\n \n     protected void childChanged(WhatHappened what, Node child) {\n+        logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\",\n+                getFullName()).addKeyValue(\"reason\", what.name()).log();\n         if (watchers != null) {\n             for (Watcher s : watchers) {\n                 try {\n                     if (s instanceof ChildChanged) {\n                         ((ChildChanged) s).childChanged(what, child);\n-                        context.getLogger().atDebug().setEventType(\"notify\").addKeyValue(\"src\", getFullName())\n-                                .addKeyValue(\"dst\", s.toString()).log();\n                     }\n                 } catch (Throwable ex) {\n                     /* TODO if a subscriber fails, we should do more than just log a\n                        message.  Possibly unsubscribe it if the fault is persistent */\n-                    context.getLogger().atError().setCause(ex).setEventType(\"notify-error\")\n-                            .addKeyValue(\"src\", getFullName()).addKeyValue(\"dst\", s.toString()).log();\n+                    logger.atError().setCause(ex).setEventType(\"config-node-child-update-error\")\n+                            .addKeyValue(\"configNode\", getFullName()).addKeyValue(\"subscriber\", s.toString())\n+                            .addKeyValue(\"reason\", what.name()).log();\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MDcwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381770705", "bodyText": "Didn't get rid of the old logger?", "author": "MikeDombo", "createdAt": "2020-02-20T05:31:31Z", "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -76,16 +81,22 @@ public void run() {\n     {\n         parts.put(Context.class, new Value(Context.class, this));\n         parts.put(Log.class, new Value(Log.class, log));", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/dependency/Context.java b/src/main/java/com/aws/iot/evergreen/dependency/Context.java\nindex 2bf871c68..a2c84737b 100644\n--- a/src/main/java/com/aws/iot/evergreen/dependency/Context.java\n+++ b/src/main/java/com/aws/iot/evergreen/dependency/Context.java\n\n@@ -80,23 +76,12 @@ public class Context implements Closeable {\n \n     {\n         parts.put(Context.class, new Value(Context.class, this));\n-        parts.put(Log.class, new Value(Log.class, log));\n-        parts.put(Logger.class, new Value(Logger.class, logger));\n     }\n \n     {\n         publishThread.start();\n     }\n \n-    @Deprecated\n-    public Log getLog() {\n-        return log;\n-    }\n-\n-    public Logger getLogger() {\n-        return logger;\n-    }\n-\n     public <T> T get(Class<T> cl) {\n         return getv0(cl, cl).get();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MTMzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381771337", "bodyText": "If we want to log here at all, it should be before the run and the event type should be runOnPublishQueue", "author": "MikeDombo", "createdAt": "2020-02-20T05:32:54Z", "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -289,9 +303,11 @@ public Throwable runOnPublishQueueAndWait(Crashable r) {\n         runOnPublishQueue(() -> {\n             try {\n                 r.run();\n+                getLogger().atTrace().setEventType(\"function-run\").addKeyValue(\"fn\", r.toString()).log();", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzNDMwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r382334306", "bodyText": "Removed. Relying on caller to log properly.", "author": "hui-yang", "createdAt": "2020-02-21T00:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MTMzNw=="}], "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/dependency/Context.java b/src/main/java/com/aws/iot/evergreen/dependency/Context.java\nindex 2bf871c68..a2c84737b 100644\n--- a/src/main/java/com/aws/iot/evergreen/dependency/Context.java\n+++ b/src/main/java/com/aws/iot/evergreen/dependency/Context.java\n\n@@ -303,11 +288,9 @@ public class Context implements Closeable {\n         runOnPublishQueue(() -> {\n             try {\n                 r.run();\n-                getLogger().atTrace().setEventType(\"function-run\").addKeyValue(\"fn\", r.toString()).log();\n             } catch (Throwable t) {\n                 ret.set(t);\n-                getLogger().atError().setEventType(\"function-run-error\").setCause(t)\n-                        .addKeyValue(\"fn\", r.toString()).log();\n+                logger.atError().setEventType(\"run-publish-queue-and-wait-error\").setCause(t).log();\n             }\n             ready.countDown();\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MTk3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381771976", "bodyText": "Should only log this if something is actually being injected (which isn't known until line 456.", "author": "MikeDombo", "createdAt": "2020-02-20T05:34:18Z", "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -431,6 +446,8 @@ private void doInjection(Object lvalue) {\n                 return;\n             }\n             Class cl = lvalue.getClass();\n+            getLogger().atDebug().addKeyValue(\"class\", cl.getName()).setEventType(\"service-injection-start\").log();", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/dependency/Context.java b/src/main/java/com/aws/iot/evergreen/dependency/Context.java\nindex 2bf871c68..a2c84737b 100644\n--- a/src/main/java/com/aws/iot/evergreen/dependency/Context.java\n+++ b/src/main/java/com/aws/iot/evergreen/dependency/Context.java\n\n@@ -446,7 +429,8 @@ public class Context implements Closeable {\n                 return;\n             }\n             Class cl = lvalue.getClass();\n-            getLogger().atDebug().addKeyValue(\"class\", cl.getName()).setEventType(\"service-injection-start\").log();\n+            String className = cl.getName();\n+            logger.atTrace().addKeyValue(\"class\", className).setEventType(\"class-injection-start\").log();\n \n             EvergreenService asService = lvalue instanceof EvergreenService ? (EvergreenService) lvalue : null;\n             InjectionActions injectionActions = lvalue instanceof InjectionActions ? (InjectionActions) lvalue : null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3Mjc2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381772762", "bodyText": "instead of client name, do just log out the context since that has extra information other than just the service name.", "author": "MikeDombo", "createdAt": "2020-02-20T05:35:47Z", "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java", "diffHunk": "@@ -93,20 +93,26 @@ void handleAuth(ChannelHandlerContext ctx, FrameReader.MessageFrame message) thr\n             try {\n                 ConnectionContext context = doAuth(message.message, ctx.channel().remoteAddress());\n                 ctx.channel().attr(IPCChannelHandler.CONNECTION_CONTEXT_KEY).set(context);\n-                log.note(\"Successfully authenticated client\", context);\n+                logger.atInfo().setEventType(\"ipc-client-authenticated\").addKeyValue(\"clientName\",", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java b/src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java\nindex 51f9d8523..24fbbc40e 100644\n--- a/src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java\n+++ b/src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java\n\n@@ -93,9 +93,8 @@ public class AuthHandler implements InjectionActions {\n             try {\n                 ConnectionContext context = doAuth(message.message, ctx.channel().remoteAddress());\n                 ctx.channel().attr(IPCChannelHandler.CONNECTION_CONTEXT_KEY).set(context);\n-                logger.atInfo().setEventType(\"ipc-client-authenticated\").addKeyValue(\"clientName\",\n-                        context.getServiceName()).addKeyValue(\"clientAddress\", context.getRemoteAddress())\n-                        .addKeyValue(\"clientId\", context.getClientId()).log();\n+                logger.atInfo().setEventType(\"ipc-client-authenticated\").addKeyValue(\"clientContext\",\n+                        context).log();\n \n                 router.clientConnected(context, ctx.channel());\n                 sendResponse(new FrameReader.Message(IPCUtil.encode(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MzY3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381773670", "bodyText": "The callback.toString() won't be at all helpful since it is just a function, so I'm not sure it should be logged at all.", "author": "MikeDombo", "createdAt": "2020-02-20T05:37:40Z", "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -44,7 +44,8 @@\n      * @throws IPCException if the callback is already registered for a destination\n      */\n     public void registerServiceCallback(int destination, IPCCallback callback) throws IPCException {\n-        log.log(Log.Level.Note, \"registering callback for destination \", destination);\n+        logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination)\n+                .addKeyValue(\"handler\", callback.toString()).log();", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java b/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java\nindex 8157bdd80..6835570a8 100644\n--- a/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java\n+++ b/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java\n\n@@ -44,8 +41,6 @@ public class IPCRouter {\n      * @throws IPCException if the callback is already registered for a destination\n      */\n     public void registerServiceCallback(int destination, IPCCallback callback) throws IPCException {\n-        logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination)\n-                .addKeyValue(\"handler\", callback.toString()).log();\n         IPCCallback existingFunction = destinationCallbackMap.putIfAbsent(destination, callback);\n         if (existingFunction != null) {\n             throw new IPCException(\"callback for destination already registered\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3NTQyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381775424", "bodyText": "Don't use the class name, you should instead us ret.getName().", "author": "MikeDombo", "createdAt": "2020-02-20T05:41:12Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -81,69 +80,89 @@ static void setState(Object o, State state) {\n     @SuppressWarnings({\"checkstyle:emptycatchblock\"})\n     public static EvergreenService locate(Context context, String name) throws Throwable {\n         return context.getv(EvergreenService.class, name).computeIfEmpty(v -> {\n-            Configuration c = context.get(Configuration.class);\n-            Topics t = c.lookupTopics(Configuration.splitPath(name));\n-            assert (t != null);\n-            if (t.isEmpty()) {\n+            Configuration configuration = context.get(Configuration.class);\n+            Topics topics = configuration.lookupTopics(Configuration.splitPath(name));\n+            assert (topics != null);\n+            if (topics.isEmpty()) {\n                 // No definition of this service was found in the config file.\n                 // weave config fragments in from elsewhere...\n-                Kernel k = context.get(Kernel.class);\n-                for (String s : k.getServiceServerURLlist()) {\n-                    if (t.isEmpty()) {\n+                Kernel kernel = context.get(Kernel.class);\n+                for (String serverUrl : kernel.getServiceServerURLlist()) {\n+                    if (topics.isEmpty()) {\n                         try {\n                             // TODO: should probably think hard about what file extension to use\n                             // TODO: allow the file to be a zip package?\n-                            URL u = new URL(s + name + \".evg\");\n-                            k.read(u, false);\n-                            context.getLog().log(t.isEmpty() ? Log.Level.Error : Log.Level.Note, name,\n-                                    \"Found external \" + \"definition\", s);\n+                            URL configUrl = new URL(serverUrl + name + \".evg\");\n+                            kernel.read(configUrl, false);\n+                            if (!topics.isEmpty()) {\n+                                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                                        \"configURL\", configUrl).log(\"Found external service definition.\");\n+                            }\n                         } catch (IOException ignored) {\n                         }\n                     } else {\n                         break;\n                     }\n                 }\n-                if (t.isEmpty()) {\n-                    t.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                if (topics.isEmpty()) {\n+                    topics.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                    context.getLogger().atError().setEventType(\"service-config-not-found\").addKeyValue(\n+                            \"serviceName\", name).log();\n                 }\n+            } else {\n+                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                        \"serviceName\", name).log(\"Found service definition in configuration file.\");\n             }\n             EvergreenService ret;\n             Class clazz = null;\n-            Node n = t.getChild(\"class\");\n+            Node n = topics.getChild(\"class\");\n             if (n != null) {\n                 String cn = Coerce.toString(n);\n                 try {\n                     clazz = Class.forName(cn);\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't find class definition\", ex);\n-                    return errNode(context, name, \"creating code-backed service from \" + cn, ex);\n+                    context.getLogger().atError().setEventType(\"service-load-error\").setCause(ex)\n+                            .addKeyValue(\"serviceName\", name).log(\"Can't load service class.\");\n+                    return errNode(context, name, \"Can't load service class from \" + cn, ex);\n                 }\n             }\n             if (clazz == null) {\n                 Map<String, Class> si = context.getIfExists(Map.class, \"service-implementors\");\n                 if (si != null) {\n+                    context.getLogger().atDebug().addKeyValue(\"serviceName\", name)\n+                            .log(\"Attempt to load service from plugins.\");\n                     clazz = si.get(name);\n                 }\n             }\n             if (clazz != null) {\n                 try {\n                     Constructor ctor = clazz.getConstructor(Topics.class);\n-                    ret = (EvergreenService) ctor.newInstance(t);\n+                    ret = (EvergreenService) ctor.newInstance(topics);\n                     if (clazz.getAnnotation(Singleton.class) != null) {\n                         context.put(ret.getClass(), v);\n                     }\n+                    context.getLogger().atInfo().setEventType(\"evergreen-service-loaded\").addKeyValue(\"serviceName\",\n+                            clazz.getName()).log();", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex f5b59adfb..066c02f53 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -95,7 +102,7 @@ public class EvergreenService implements InjectionActions, Subscriber, Closeable\n                             URL configUrl = new URL(serverUrl + name + \".evg\");\n                             kernel.read(configUrl, false);\n                             if (!topics.isEmpty()) {\n-                                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                                staticLogger.atInfo().setEventType(\"service-config-found\").addKeyValue(\n                                         \"configURL\", configUrl).log(\"Found external service definition.\");\n                             }\n                         } catch (IOException ignored) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3NTg2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381775865", "bodyText": "Not serviceName, it should be \"className\" in this context because the service could have a different name than the class.", "author": "MikeDombo", "createdAt": "2020-02-20T05:42:09Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -81,69 +80,89 @@ static void setState(Object o, State state) {\n     @SuppressWarnings({\"checkstyle:emptycatchblock\"})\n     public static EvergreenService locate(Context context, String name) throws Throwable {\n         return context.getv(EvergreenService.class, name).computeIfEmpty(v -> {\n-            Configuration c = context.get(Configuration.class);\n-            Topics t = c.lookupTopics(Configuration.splitPath(name));\n-            assert (t != null);\n-            if (t.isEmpty()) {\n+            Configuration configuration = context.get(Configuration.class);\n+            Topics topics = configuration.lookupTopics(Configuration.splitPath(name));\n+            assert (topics != null);\n+            if (topics.isEmpty()) {\n                 // No definition of this service was found in the config file.\n                 // weave config fragments in from elsewhere...\n-                Kernel k = context.get(Kernel.class);\n-                for (String s : k.getServiceServerURLlist()) {\n-                    if (t.isEmpty()) {\n+                Kernel kernel = context.get(Kernel.class);\n+                for (String serverUrl : kernel.getServiceServerURLlist()) {\n+                    if (topics.isEmpty()) {\n                         try {\n                             // TODO: should probably think hard about what file extension to use\n                             // TODO: allow the file to be a zip package?\n-                            URL u = new URL(s + name + \".evg\");\n-                            k.read(u, false);\n-                            context.getLog().log(t.isEmpty() ? Log.Level.Error : Log.Level.Note, name,\n-                                    \"Found external \" + \"definition\", s);\n+                            URL configUrl = new URL(serverUrl + name + \".evg\");\n+                            kernel.read(configUrl, false);\n+                            if (!topics.isEmpty()) {\n+                                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                                        \"configURL\", configUrl).log(\"Found external service definition.\");\n+                            }\n                         } catch (IOException ignored) {\n                         }\n                     } else {\n                         break;\n                     }\n                 }\n-                if (t.isEmpty()) {\n-                    t.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                if (topics.isEmpty()) {\n+                    topics.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                    context.getLogger().atError().setEventType(\"service-config-not-found\").addKeyValue(\n+                            \"serviceName\", name).log();\n                 }\n+            } else {\n+                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                        \"serviceName\", name).log(\"Found service definition in configuration file.\");\n             }\n             EvergreenService ret;\n             Class clazz = null;\n-            Node n = t.getChild(\"class\");\n+            Node n = topics.getChild(\"class\");\n             if (n != null) {\n                 String cn = Coerce.toString(n);\n                 try {\n                     clazz = Class.forName(cn);\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't find class definition\", ex);\n-                    return errNode(context, name, \"creating code-backed service from \" + cn, ex);\n+                    context.getLogger().atError().setEventType(\"service-load-error\").setCause(ex)\n+                            .addKeyValue(\"serviceName\", name).log(\"Can't load service class.\");\n+                    return errNode(context, name, \"Can't load service class from \" + cn, ex);\n                 }\n             }\n             if (clazz == null) {\n                 Map<String, Class> si = context.getIfExists(Map.class, \"service-implementors\");\n                 if (si != null) {\n+                    context.getLogger().atDebug().addKeyValue(\"serviceName\", name)\n+                            .log(\"Attempt to load service from plugins.\");\n                     clazz = si.get(name);\n                 }\n             }\n             if (clazz != null) {\n                 try {\n                     Constructor ctor = clazz.getConstructor(Topics.class);\n-                    ret = (EvergreenService) ctor.newInstance(t);\n+                    ret = (EvergreenService) ctor.newInstance(topics);\n                     if (clazz.getAnnotation(Singleton.class) != null) {\n                         context.put(ret.getClass(), v);\n                     }\n+                    context.getLogger().atInfo().setEventType(\"evergreen-service-loaded\").addKeyValue(\"serviceName\",\n+                            clazz.getName()).log();\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't create instance of \" + clazz, ex);\n-                    ret = errNode(context, name, \"creating code-backed service from \" + clazz.getSimpleName(), ex);\n+                    context.getLogger().atError().setCause(ex).setEventType(\"evergreen-service-load-error\")\n+                            .addKeyValue(\"serviceName\", clazz.getName()).log(\"Can't create instance\");", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex f5b59adfb..066c02f53 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -95,7 +102,7 @@ public class EvergreenService implements InjectionActions, Subscriber, Closeable\n                             URL configUrl = new URL(serverUrl + name + \".evg\");\n                             kernel.read(configUrl, false);\n                             if (!topics.isEmpty()) {\n-                                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                                staticLogger.atInfo().setEventType(\"service-config-found\").addKeyValue(\n                                         \"configURL\", configUrl).log(\"Found external service definition.\");\n                             }\n                         } catch (IOException ignored) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3NjY4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381776686", "bodyText": "Not clear that at this point the topic actually is the \"serviceName\", it seems that it might be something else, since it errored out.", "author": "MikeDombo", "createdAt": "2020-02-20T05:43:43Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -81,69 +80,89 @@ static void setState(Object o, State state) {\n     @SuppressWarnings({\"checkstyle:emptycatchblock\"})\n     public static EvergreenService locate(Context context, String name) throws Throwable {\n         return context.getv(EvergreenService.class, name).computeIfEmpty(v -> {\n-            Configuration c = context.get(Configuration.class);\n-            Topics t = c.lookupTopics(Configuration.splitPath(name));\n-            assert (t != null);\n-            if (t.isEmpty()) {\n+            Configuration configuration = context.get(Configuration.class);\n+            Topics topics = configuration.lookupTopics(Configuration.splitPath(name));\n+            assert (topics != null);\n+            if (topics.isEmpty()) {\n                 // No definition of this service was found in the config file.\n                 // weave config fragments in from elsewhere...\n-                Kernel k = context.get(Kernel.class);\n-                for (String s : k.getServiceServerURLlist()) {\n-                    if (t.isEmpty()) {\n+                Kernel kernel = context.get(Kernel.class);\n+                for (String serverUrl : kernel.getServiceServerURLlist()) {\n+                    if (topics.isEmpty()) {\n                         try {\n                             // TODO: should probably think hard about what file extension to use\n                             // TODO: allow the file to be a zip package?\n-                            URL u = new URL(s + name + \".evg\");\n-                            k.read(u, false);\n-                            context.getLog().log(t.isEmpty() ? Log.Level.Error : Log.Level.Note, name,\n-                                    \"Found external \" + \"definition\", s);\n+                            URL configUrl = new URL(serverUrl + name + \".evg\");\n+                            kernel.read(configUrl, false);\n+                            if (!topics.isEmpty()) {\n+                                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                                        \"configURL\", configUrl).log(\"Found external service definition.\");\n+                            }\n                         } catch (IOException ignored) {\n                         }\n                     } else {\n                         break;\n                     }\n                 }\n-                if (t.isEmpty()) {\n-                    t.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                if (topics.isEmpty()) {\n+                    topics.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                    context.getLogger().atError().setEventType(\"service-config-not-found\").addKeyValue(\n+                            \"serviceName\", name).log();\n                 }\n+            } else {\n+                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                        \"serviceName\", name).log(\"Found service definition in configuration file.\");\n             }\n             EvergreenService ret;\n             Class clazz = null;\n-            Node n = t.getChild(\"class\");\n+            Node n = topics.getChild(\"class\");\n             if (n != null) {\n                 String cn = Coerce.toString(n);\n                 try {\n                     clazz = Class.forName(cn);\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't find class definition\", ex);\n-                    return errNode(context, name, \"creating code-backed service from \" + cn, ex);\n+                    context.getLogger().atError().setEventType(\"service-load-error\").setCause(ex)\n+                            .addKeyValue(\"serviceName\", name).log(\"Can't load service class.\");\n+                    return errNode(context, name, \"Can't load service class from \" + cn, ex);\n                 }\n             }\n             if (clazz == null) {\n                 Map<String, Class> si = context.getIfExists(Map.class, \"service-implementors\");\n                 if (si != null) {\n+                    context.getLogger().atDebug().addKeyValue(\"serviceName\", name)\n+                            .log(\"Attempt to load service from plugins.\");\n                     clazz = si.get(name);\n                 }\n             }\n             if (clazz != null) {\n                 try {\n                     Constructor ctor = clazz.getConstructor(Topics.class);\n-                    ret = (EvergreenService) ctor.newInstance(t);\n+                    ret = (EvergreenService) ctor.newInstance(topics);\n                     if (clazz.getAnnotation(Singleton.class) != null) {\n                         context.put(ret.getClass(), v);\n                     }\n+                    context.getLogger().atInfo().setEventType(\"evergreen-service-loaded\").addKeyValue(\"serviceName\",\n+                            clazz.getName()).log();\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't create instance of \" + clazz, ex);\n-                    ret = errNode(context, name, \"creating code-backed service from \" + clazz.getSimpleName(), ex);\n+                    context.getLogger().atError().setCause(ex).setEventType(\"evergreen-service-load-error\")\n+                            .addKeyValue(\"serviceName\", clazz.getName()).log(\"Can't create instance\");\n+                    ret = errNode(context, name, \"Can't create code-backed service from \"\n+                            + clazz.getSimpleName(), ex);\n                 }\n-            } else if (t.isEmpty()) {\n+            } else if (topics.isEmpty()) {\n+                context.getLogger().atError().setEventType(\"service-load-error\").addKeyValue(\n+                        \"serviceName\", name).log(\"No matching definition in system model\");\n                 ret = errNode(context, name, \"No matching definition in system model\", null);\n             } else {\n                 try {\n-                    ret = new GenericExternalService(t);\n+                    ret = new GenericExternalService(topics);\n+                    context.getLogger().atInfo().setEventType(\"generic-service-loaded\").addKeyValue(\"serviceName\",\n+                            ret.getName()).log();\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't create generic instance from \" + Coerce.toString(t), ex);\n-                    ret = errNode(context, name, \"Creating generic service\", ex);\n+                    context.getLogger().atError().setCause(ex).setEventType(\"generic-service-load-error\")\n+                            .addKeyValue(\"serviceName\", Coerce.toString(topics))", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MTM3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r382341374", "bodyText": "Yeah, there's no good way to describe it. I cannot assume it's a config topic either. I'll leave it as is for now because the attempt here is to load a service", "author": "hui-yang", "createdAt": "2020-02-21T00:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3NjY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex f5b59adfb..066c02f53 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -95,7 +102,7 @@ public class EvergreenService implements InjectionActions, Subscriber, Closeable\n                             URL configUrl = new URL(serverUrl + name + \".evg\");\n                             kernel.read(configUrl, false);\n                             if (!topics.isEmpty()) {\n-                                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                                staticLogger.atInfo().setEventType(\"service-config-found\").addKeyValue(\n                                         \"configURL\", configUrl).log(\"Found external service definition.\");\n                             }\n                         } catch (IOException ignored) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3Njk5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381776991", "bodyText": "Why is this log removed? It seems helpful.", "author": "MikeDombo", "createdAt": "2020-02-20T05:44:26Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -152,11 +171,11 @@ public static EvergreenService locate(Context context, String name) throws Throw\n \n     public static EvergreenService errNode(Context context, String name, String message, Throwable ex) {\n         try {\n-            context.getLog().error(\"Error locating service\", name, message, ex);", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MjExOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r382342119", "bodyText": "It's moved inside each caller of errNode, where more details can be logged.", "author": "hui-yang", "createdAt": "2020-02-21T00:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3Njk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex f5b59adfb..066c02f53 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -174,7 +181,7 @@ public class EvergreenService implements InjectionActions, Subscriber, Closeable\n             return new GenericExternalService(Topics.errorNode(context, name,\n                     \"Error locating service \" + name + \": \" + message + (ex == null ? \"\" : \"\\n\\t\" + ex)));\n         } catch (Throwable ex1) {\n-            context.getLogger().atError().setCause(ex1).setEventType(\"service-error-report-error\")\n+            staticLogger.atError().setCause(ex1).setEventType(\"service-error-report-error\")\n                     .addKeyValue(\"serviceName\", name).addKeyValue(\"errorReport\", message).log();\n             return null;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3NzI0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381777240", "bodyText": "This isn't desired state in this instance, it actually is the \"newState\".", "author": "MikeDombo", "createdAt": "2020-02-20T05:44:55Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -181,7 +200,8 @@ public void setState(State newState) {\n         final State currentState = (State) this.state.getOnce();\n \n         if (newState != currentState) {\n-            context.getLog().note(getName(), currentState, \"=>\", newState);\n+            context.getLogger().atInfo().setEventType(\"service-set-state\").addKeyValue(\"serviceName\", getName())\n+                    .addKeyValue(\"currentState\", currentState).addKeyValue(\"desiredState\", newState).log();", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex f5b59adfb..066c02f53 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -200,8 +207,8 @@ public class EvergreenService implements InjectionActions, Subscriber, Closeable\n         final State currentState = (State) this.state.getOnce();\n \n         if (newState != currentState) {\n-            context.getLogger().atInfo().setEventType(\"service-set-state\").addKeyValue(\"serviceName\", getName())\n-                    .addKeyValue(\"currentState\", currentState).addKeyValue(\"desiredState\", newState).log();\n+            getLogger().atInfo().setEventType(\"service-set-state\").addKeyValue(\"currentState\", currentState)\n+                    .addKeyValue(\"newState\", newState).log();\n             // Make sure the order of setValue() invocation is same as order of global state notification\n             synchronized (this.state) {\n                 this.state.setValue(Long.MAX_VALUE, newState);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3ODU0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381778547", "bodyText": "Why check context, why not specifically check for our logger?", "author": "MikeDombo", "createdAt": "2020-02-20T05:47:32Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -361,24 +402,20 @@ private synchronized void setBackingTask(Runnable r, String db) {\n         }\n     }\n \n-    public void errored(String message, Throwable e) {\n+    public void serviceErrored(Throwable e) {\n         e = getUltimateCause(e);\n         error = e;\n-        errored(message, (Object) e);\n-    }\n-\n-    public void errored(String message, Object e) {\n         if (context == null) {", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MjcxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r382342712", "bodyText": "Removed this for now. I couldn't reproduce the case where context is null.", "author": "hui-yang", "createdAt": "2020-02-21T00:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3ODU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex f5b59adfb..066c02f53 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -405,9 +410,6 @@ public class EvergreenService implements InjectionActions, Subscriber, Closeable\n     public void serviceErrored(Throwable e) {\n         e = getUltimateCause(e);\n         error = e;\n-        if (context == null) {\n-             e.printStackTrace(System.err);\n-        }\n         serviceErrored();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3OTEwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381779106", "bodyText": "not \"config\", here this should be \"declaredDependencies\" or something like that.", "author": "MikeDombo", "createdAt": "2020-02-20T05:48:40Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -539,21 +578,27 @@ public String getName() {\n \n     @Override\n     public void postInject() {\n-        Node d = config.getChild(\"requires\");\n-        if (d instanceof Topic) {\n-            String ds = ((Topic) d).getOnce().toString();\n+        Node dependencies = config.getChild(\"requires\");\n+        if (dependencies instanceof Topic) {\n+            String ds = ((Topic) dependencies).getOnce().toString();\n             Matcher m = DEP_PARSE.matcher(ds);\n             while (m.find()) {\n                 addDependency(m.group(1), m.group(3));\n             }\n             if (!m.hitEnd()) {\n-                errored(\"bad dependency syntax\", ds);\n+                context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", ds).log(\"Bad dependency syntax\");", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex f5b59adfb..066c02f53 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -586,19 +588,15 @@ public class EvergreenService implements InjectionActions, Subscriber, Closeable\n                 addDependency(m.group(1), m.group(3));\n             }\n             if (!m.hitEnd()) {\n-                context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n-                        getName()).addKeyValue(\"config\", ds).log(\"Bad dependency syntax\");\n+                getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"dependencyConfig\", ds)\n+                        .log(\"Bad dependency syntax\");\n                 serviceErrored();\n             }\n         } else if (dependencies == null) {\n             return;\n         } else {\n-            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\",\n-                    getName(), dependencies.toString());\n-            System.err.println(errMsg);\n-            context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n-                    getName()).addKeyValue(\"config\", dependencies.toString())\n-                    .log(\"Unrecognized dependency configuration\");\n+            getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"dependencyConfig\",\n+                    dependencies.toString()).log(\"Unrecognized dependency configuration\");\n             // TODO: invalidate the config file\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3OTMzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381779331", "bodyText": "now that we have the logger, I don't see why we'd need this system out.", "author": "MikeDombo", "createdAt": "2020-02-20T05:49:10Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -539,21 +578,27 @@ public String getName() {\n \n     @Override\n     public void postInject() {\n-        Node d = config.getChild(\"requires\");\n-        if (d instanceof Topic) {\n-            String ds = ((Topic) d).getOnce().toString();\n+        Node dependencies = config.getChild(\"requires\");\n+        if (dependencies instanceof Topic) {\n+            String ds = ((Topic) dependencies).getOnce().toString();\n             Matcher m = DEP_PARSE.matcher(ds);\n             while (m.find()) {\n                 addDependency(m.group(1), m.group(3));\n             }\n             if (!m.hitEnd()) {\n-                errored(\"bad dependency syntax\", ds);\n+                context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", ds).log(\"Bad dependency syntax\");\n+                serviceErrored();\n             }\n-        } else if (d == null) {\n+        } else if (dependencies == null) {\n             return;\n         } else {\n-            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\", getName(), d.toString());\n+            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\",\n+                    getName(), dependencies.toString());\n             System.err.println(errMsg);", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex f5b59adfb..066c02f53 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -586,19 +588,15 @@ public class EvergreenService implements InjectionActions, Subscriber, Closeable\n                 addDependency(m.group(1), m.group(3));\n             }\n             if (!m.hitEnd()) {\n-                context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n-                        getName()).addKeyValue(\"config\", ds).log(\"Bad dependency syntax\");\n+                getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"dependencyConfig\", ds)\n+                        .log(\"Bad dependency syntax\");\n                 serviceErrored();\n             }\n         } else if (dependencies == null) {\n             return;\n         } else {\n-            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\",\n-                    getName(), dependencies.toString());\n-            System.err.println(errMsg);\n-            context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n-                    getName()).addKeyValue(\"config\", dependencies.toString())\n-                    .log(\"Unrecognized dependency configuration\");\n+            getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"dependencyConfig\",\n+                    dependencies.toString()).log(\"Unrecognized dependency configuration\");\n             // TODO: invalidate the config file\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3OTQ5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381779490", "bodyText": "Same here, the \"config\" should have a better name.", "author": "MikeDombo", "createdAt": "2020-02-20T05:49:34Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -539,21 +578,27 @@ public String getName() {\n \n     @Override\n     public void postInject() {\n-        Node d = config.getChild(\"requires\");\n-        if (d instanceof Topic) {\n-            String ds = ((Topic) d).getOnce().toString();\n+        Node dependencies = config.getChild(\"requires\");\n+        if (dependencies instanceof Topic) {\n+            String ds = ((Topic) dependencies).getOnce().toString();\n             Matcher m = DEP_PARSE.matcher(ds);\n             while (m.find()) {\n                 addDependency(m.group(1), m.group(3));\n             }\n             if (!m.hitEnd()) {\n-                errored(\"bad dependency syntax\", ds);\n+                context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", ds).log(\"Bad dependency syntax\");\n+                serviceErrored();\n             }\n-        } else if (d == null) {\n+        } else if (dependencies == null) {\n             return;\n         } else {\n-            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\", getName(), d.toString());\n+            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\",\n+                    getName(), dependencies.toString());\n             System.err.println(errMsg);\n+            context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n+                    getName()).addKeyValue(\"config\", dependencies.toString())", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex f5b59adfb..066c02f53 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -586,19 +588,15 @@ public class EvergreenService implements InjectionActions, Subscriber, Closeable\n                 addDependency(m.group(1), m.group(3));\n             }\n             if (!m.hitEnd()) {\n-                context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n-                        getName()).addKeyValue(\"config\", ds).log(\"Bad dependency syntax\");\n+                getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"dependencyConfig\", ds)\n+                        .log(\"Bad dependency syntax\");\n                 serviceErrored();\n             }\n         } else if (dependencies == null) {\n             return;\n         } else {\n-            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\",\n-                    getName(), dependencies.toString());\n-            System.err.println(errMsg);\n-            context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n-                    getName()).addKeyValue(\"config\", dependencies.toString())\n-                    .log(\"Unrecognized dependency configuration\");\n+            getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"dependencyConfig\",\n+                    dependencies.toString()).log(\"Unrecognized dependency configuration\");\n             // TODO: invalidate the config file\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MDM1MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381780350", "bodyText": "Instead of \"config\" maybe \"changedNode\" or something like that. Also this should be dropped to INFO I think.", "author": "MikeDombo", "createdAt": "2020-02-20T05:51:07Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -38,7 +38,8 @@ public GenericExternalService(Topics c) {\n         super(c);\n         c.subscribe((what, child) -> {\n             if (c.parentNeedsToKnow() && !child.childOf(\"shutdown\")) {\n-                context.getLog().warn(getName(), \"responding to change to\", child);\n+                context.getLogger().atWarn().setEventType(\"service-config-change\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", child.getFullName()).log();", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\nindex 16d7772d8..1a6533908 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n\n@@ -36,10 +38,12 @@ public class GenericExternalService extends EvergreenService {\n      */\n     public GenericExternalService(Topics c) {\n         super(c);\n+        logger = LogManager.getLogger(GenericExternalService.class);\n+        logger.addDefaultKeyValue(\"serviceName\", getName());\n         c.subscribe((what, child) -> {\n             if (c.parentNeedsToKnow() && !child.childOf(\"shutdown\")) {\n-                context.getLogger().atWarn().setEventType(\"service-config-change\").addKeyValue(\"serviceName\",\n-                        getName()).addKeyValue(\"config\", child.getFullName()).log();\n+                logger.atInfo().setEventType(\"service-config-change\")\n+                        .addKeyValue(\"configNode\", child.getFullName()).log();\n                 setState(child.childOf(\"install\") ? State.Installing : State.AwaitingStartup);\n             }\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MTUzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381781534", "bodyText": "It is quite possible that the script could be very large, so I'd be careful about including it in our logs. The old logger, for example, had a max length I believe.", "author": "MikeDombo", "createdAt": "2020-02-20T05:53:29Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -80,11 +81,13 @@ public void shutdown() {\n         Exec e = currentScript;\n         if (e != null && e.isRunning()) {\n             try {\n-                context.getLog().significant(getName(), \"shutting down\", e);\n+                context.getLogger().atInfo().setEventType(\"generic-service-shutdown\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"script\", e.toString()).log();", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\nindex 16d7772d8..1a6533908 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n\n@@ -81,13 +90,12 @@ public class GenericExternalService extends EvergreenService {\n         Exec e = currentScript;\n         if (e != null && e.isRunning()) {\n             try {\n-                context.getLogger().atInfo().setEventType(\"generic-service-shutdown\").addKeyValue(\"serviceName\",\n-                        getName()).addKeyValue(\"script\", e.toString()).log();\n+                getLogger().atInfo().setEventType(\"generic-service-shutdown\").addKeyValue(\"script\", e.toString()).log();\n                 e.close();\n                 e.waitClosed(1000);\n             } catch (IOException ioe) {\n-                context.getLogger().atError().setEventType(\"generic-service-shutdown-error\").addKeyValue(\"serviceName\",\n-                        getName()).addKeyValue(\"script\", e.toString()).setCause(ioe).log();\n+                getLogger().atError().setEventType(\"generic-service-shutdown-error\")\n+                        .addKeyValue(\"script\", e.toString()).setCause(ioe).log();\n             }\n         }\n         inShutdown = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MjA2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381782068", "bodyText": "If you actually want the exit code, then just use exit. exit2String will give you some different stuff which isn't the actual exit code.", "author": "MikeDombo", "createdAt": "2020-02-20T05:54:27Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -97,14 +100,17 @@ public void run() {\n             if (!inShutdown) {\n                 if (exit == 0) {\n                     setState(State.Finished);\n-                    context.getLog().significant(getName(), \"Finished\");\n+                    context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",\n+                            getName()).log(\"Service finished running.\");\n                 } else {\n                     setState(State.Errored);\n-                    context.getLog().error(getName(), \"Failed\", exit2String(exit));\n+                    context.getLogger().atError().setEventType(\"generic-service-errored\").addKeyValue(\"serviceName\",\n+                            getName()).addKeyValue(\"exitCode\", exit2String(exit)).log();", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\nindex 16d7772d8..1a6533908 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n\n@@ -100,17 +108,17 @@ public class GenericExternalService extends EvergreenService {\n             if (!inShutdown) {\n                 if (exit == 0) {\n                     setState(State.Finished);\n-                    context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",\n-                            getName()).log(\"Service finished running.\");\n+                    getLogger().atInfo().setEventType(\"generic-service-finished\")\n+                            .log(\"Service finished running.\");\n                 } else {\n                     setState(State.Errored);\n-                    context.getLogger().atError().setEventType(\"generic-service-errored\").addKeyValue(\"serviceName\",\n-                            getName()).addKeyValue(\"exitCode\", exit2String(exit)).log();\n+                    getLogger().atError().setEventType(\"generic-service-errored\")\n+                            .addKeyValue(\"exitCode\", exit).log();\n                 }\n             }\n         }) == RunStatus.NothingDone) {\n-            context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",\n-                    getName()).log(\"Service does not have run block.\");\n+            getLogger().atInfo().setEventType(\"generic-service-finished\")\n+                    .log(\"Service does not have run block.\");\n             setState(State.Finished);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MjQwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381782401", "bodyText": "Maybe this should be a DEBUG, since it is totally fine for a service to not have a run block.", "author": "MikeDombo", "createdAt": "2020-02-20T05:55:04Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -97,14 +100,17 @@ public void run() {\n             if (!inShutdown) {\n                 if (exit == 0) {\n                     setState(State.Finished);\n-                    context.getLog().significant(getName(), \"Finished\");\n+                    context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",\n+                            getName()).log(\"Service finished running.\");\n                 } else {\n                     setState(State.Errored);\n-                    context.getLog().error(getName(), \"Failed\", exit2String(exit));\n+                    context.getLogger().atError().setEventType(\"generic-service-errored\").addKeyValue(\"serviceName\",\n+                            getName()).addKeyValue(\"exitCode\", exit2String(exit)).log();\n                 }\n             }\n         }) == RunStatus.NothingDone) {\n-            context.getLog().significant(getName(), \"run: NothingDone\");\n+            context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzE2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r382347165", "bodyText": "Currently all lifecycle events are logged in INFO. This should be consistent IMO.", "author": "hui-yang", "createdAt": "2020-02-21T01:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MjQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\nindex 16d7772d8..1a6533908 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n\n@@ -100,17 +108,17 @@ public class GenericExternalService extends EvergreenService {\n             if (!inShutdown) {\n                 if (exit == 0) {\n                     setState(State.Finished);\n-                    context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",\n-                            getName()).log(\"Service finished running.\");\n+                    getLogger().atInfo().setEventType(\"generic-service-finished\")\n+                            .log(\"Service finished running.\");\n                 } else {\n                     setState(State.Errored);\n-                    context.getLogger().atError().setEventType(\"generic-service-errored\").addKeyValue(\"serviceName\",\n-                            getName()).addKeyValue(\"exitCode\", exit2String(exit)).log();\n+                    getLogger().atError().setEventType(\"generic-service-errored\")\n+                            .addKeyValue(\"exitCode\", exit).log();\n                 }\n             }\n         }) == RunStatus.NothingDone) {\n-            context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",\n-                    getName()).log(\"Service does not have run block.\");\n+            getLogger().atInfo().setEventType(\"generic-service-finished\")\n+                    .log(\"Service does not have run block.\");\n             setState(State.Finished);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4Mjk0Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381782946", "bodyText": "Don't call it a \"run script\" since this method is used to call all the various scripts.", "author": "MikeDombo", "createdAt": "2020-02-20T05:56:07Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -159,11 +166,14 @@ protected RunStatus run(Topics t, IntConsumer background) {\n             if (script instanceof Topic) {\n                 return run((Topic) script, background, t);\n             } else {\n-                errored(\"Missing script: for \", t.getFullName());\n+                context.getLogger().atError().setEventType(\"generic-service-invalid-config\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", t.getFullName()).log(\"Missing run script\");", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\nindex 16d7772d8..1a6533908 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n\n@@ -166,14 +173,13 @@ public class GenericExternalService extends EvergreenService {\n             if (script instanceof Topic) {\n                 return run((Topic) script, background, t);\n             } else {\n-                context.getLogger().atError().setEventType(\"generic-service-invalid-config\").addKeyValue(\"serviceName\",\n-                        getName()).addKeyValue(\"config\", t.getFullName()).log(\"Missing run script\");\n+                getLogger().atError().setEventType(\"generic-service-invalid-config\").addKeyValue(\"configNode\",\n+                        t.getFullName()).log(\"Missing script\");\n                 serviceErrored();\n                 return RunStatus.Errored;\n             }\n         } else {\n-            context.getLogger().atDebug().setEventType(\"generic-service-skipped\").addKeyValue(\"serviceName\",\n-                    getName()).addKeyValue(\"script\", t.getFullName()).log();\n+            getLogger().atDebug().setEventType(\"generic-service-skipped\").addKeyValue(\"script\", t.getFullName()).log();\n             return RunStatus.OK;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MzI2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381783267", "bodyText": "If we're erroring out the service, then this needs to be at ERROR level.", "author": "MikeDombo", "createdAt": "2020-02-20T05:56:45Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -189,7 +199,10 @@ boolean shouldSkip(Topics n) {\n                     case \"true\":\n                         return !neg;\n                     default:\n-                        errored(\"Unknown operator\", m.group(1));\n+                        context.getLogger().atDebug().setEventType(\"generic-service-invalid-config\").addKeyValue(", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\nindex 16d7772d8..1a6533908 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n\n@@ -199,9 +205,8 @@ public class GenericExternalService extends EvergreenService {\n                     case \"true\":\n                         return !neg;\n                     default:\n-                        context.getLogger().atDebug().setEventType(\"generic-service-invalid-config\").addKeyValue(\n-                                \"serviceName\", getName()).addKeyValue(\"operator\", m.group(1))\n-                                .log(\"Unknown operator in skipif\");\n+                        getLogger().atError().setEventType(\"generic-service-invalid-config\").addKeyValue(\"operator\",\n+                                m.group(1)).log(\"Unknown operator in skipif\");\n                         serviceErrored();\n                         return false;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4NDY0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381784640", "bodyText": "Might as well put in the onBehalfOf also and the same for the rest of the logs in this method.", "author": "MikeDombo", "createdAt": "2020-02-20T05:59:31Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/ShellRunner.java", "diffHunk": "@@ -26,15 +26,15 @@\n \n     class Default implements ShellRunner {\n         @Inject\n-        Log log;\n+        Logger logger;\n         @Inject\n         Kernel config;\n \n         @Override\n         public synchronized Exec setup(String note, String command, EvergreenService onBehalfOf) {\n             if (!isEmpty(command) && onBehalfOf != null) {\n-                if (!isEmpty(note) && log != null /* !!?!! */) {\n-                    log.significant(\"run\", note);\n+                if (!isEmpty(note) && logger != null /* !!?!! */) {\n+                    logger.atInfo().setEventType(\"shell-runner-start\").addKeyValue(\"name\", note).log();", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/ShellRunner.java b/src/main/java/com/aws/iot/evergreen/kernel/ShellRunner.java\nindex 25b655a7c..df114a04b 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/ShellRunner.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/ShellRunner.java\n\n@@ -25,8 +26,8 @@ public interface ShellRunner {\n     boolean successful(Exec e, String command, IntConsumer background);\n \n     class Default implements ShellRunner {\n-        @Inject\n-        Logger logger;\n+        private static final Logger logger = LogManager.getLogger(ShellRunner.class);\n+\n         @Inject\n         Kernel config;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4NTkyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381785920", "bodyText": "Why do we need this log? I'm not sure it is helping anything.", "author": "MikeDombo", "createdAt": "2020-02-20T06:02:11Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -102,18 +107,21 @@ public void run() {\n             }\n             if (maxt > now) {\n                 try {\n-                    log.note(getName(), \"Holding for\", maxt - now, \"millis\");\n+                    logger.atDebug().setEventType(\"service-update-pending\").addKeyValue(\"waitInMS\",\n+                            maxt - now).addKeyValue(\"serviceName\", getName()).log();\n                     Thread.sleep(maxt - now);\n                 } catch (InterruptedException ignored) {\n                 }\n             } else {\n-                log.note(getName(), \"Queueing update actions\");\n+                logger.atDebug().setEventType(\"service-update-scheduled\").addKeyValue(\"serviceName\", getName()).log();\n                 context.runOnPublishQueueAndWait(() -> {\n-                    log.note(getName(), \"Starting safe-time update\");\n+                    logger.atInfo().setEventType(\"service-update-start\").addKeyValue(\"serviceName\", getName()).log();\n                     runUpdateActions();\n-                    log.note(getName(), \"Finished read-phase of safe-time update\");\n+                    logger.atInfo().setEventType(\"service-update-finish\").addKeyValue(\"serviceName\", getName()).log();\n                 });\n-                log.note(getName(), \"Back on run Q safe-time update\");\n+\n+                logger.atInfo().setEventType(\"check-available-service-update\")", "originalCommit": "3fb866e3fd8661580ffa4bf2ec05553401135789", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java b/src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java\nindex e7d70dc45..943a3a16a 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java\n\n@@ -108,20 +112,17 @@ public class UpdateSystemSafelyService extends EvergreenService {\n             if (maxt > now) {\n                 try {\n                     logger.atDebug().setEventType(\"service-update-pending\").addKeyValue(\"waitInMS\",\n-                            maxt - now).addKeyValue(\"serviceName\", getName()).log();\n+                            maxt - now).log();\n                     Thread.sleep(maxt - now);\n                 } catch (InterruptedException ignored) {\n                 }\n             } else {\n-                logger.atDebug().setEventType(\"service-update-scheduled\").addKeyValue(\"serviceName\", getName()).log();\n+                logger.atDebug().setEventType(\"service-update-scheduled\").log();\n                 context.runOnPublishQueueAndWait(() -> {\n-                    logger.atInfo().setEventType(\"service-update-start\").addKeyValue(\"serviceName\", getName()).log();\n+                    logger.atInfo().setEventType(\"service-update-start\").log();\n                     runUpdateActions();\n-                    logger.atInfo().setEventType(\"service-update-finish\").addKeyValue(\"serviceName\", getName()).log();\n+                    logger.atInfo().setEventType(\"service-update-finish\").log();\n                 });\n-\n-                logger.atInfo().setEventType(\"check-available-service-update\")\n-                        .addKeyValue(\"serviceName\", getName()).log();\n             }\n         }\n         super.run();\n"}}, {"oid": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "message": "Use logger API in kernel", "committedDate": "2020-02-24T22:23:49Z", "type": "forcePushed"}, {"oid": "5e09ce8673393fd79b069247fe01be860fac32eb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5e09ce8673393fd79b069247fe01be860fac32eb", "message": "Use logger API in kernel", "committedDate": "2020-02-24T23:06:24Z", "type": "forcePushed"}, {"oid": "b9b117c84578336fdc84230b07015327d5bfce3c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b9b117c84578336fdc84230b07015327d5bfce3c", "message": "Use logger API in kernel", "committedDate": "2020-02-24T23:38:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MjQ3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r383572470", "bodyText": "Is our logger even closable? Does this make sense?\nThe only logger which is closed is the one directly used by the Context.", "author": "MikeDombo", "createdAt": "2020-02-24T23:19:21Z", "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -206,14 +202,17 @@ public void shutdown() {\n         forEach(v -> {\n             Object vv = v.value;\n             try {\n-                if (vv instanceof Closeable && vv != log) {\n+                if (vv instanceof Closeable && vv != logger) {\n                     ((Closeable) vv).close();\n+                    logger.atDebug().setEventType(\"context-shutdown\").addKeyValue(\"class\",\n+                            Coerce.toString(vv)).log();\n                 }\n             } catch (Throwable t) {\n-                log.error(\"Failed to shutdown\", Coerce.toString(vv), t);\n+                logger.atError().setEventType(\"context-shutdown-error\").setCause(t).addKeyValue(\"class\",\n+                        Coerce.toString(vv)).log();\n             }\n         });\n-        Utils.close(log);\n+        Utils.close(logger);", "originalCommit": "5e09ce8673393fd79b069247fe01be860fac32eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90c0e4017da86ee4548ecc10b854da6db98ded03", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/dependency/Context.java b/src/main/java/com/aws/iot/evergreen/dependency/Context.java\nindex 9d9e7a4d5..b571a5b42 100644\n--- a/src/main/java/com/aws/iot/evergreen/dependency/Context.java\n+++ b/src/main/java/com/aws/iot/evergreen/dependency/Context.java\n\n@@ -202,7 +202,7 @@ public class Context implements Closeable {\n         forEach(v -> {\n             Object vv = v.value;\n             try {\n-                if (vv instanceof Closeable && vv != logger) {\n+                if (vv instanceof Closeable) {\n                     ((Closeable) vv).close();\n                     logger.atDebug().setEventType(\"context-shutdown\").addKeyValue(\"class\",\n                             Coerce.toString(vv)).log();\n"}}, {"oid": "90c0e4017da86ee4548ecc10b854da6db98ded03", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/90c0e4017da86ee4548ecc10b854da6db98ded03", "message": "Use logger API in kernel", "committedDate": "2020-02-25T00:40:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwODU0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r383608545", "bodyText": "This will be too generic, let's have 1 logger per service, so get a logger for the service name: getName().", "author": "MikeDombo", "createdAt": "2020-02-25T01:17:48Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -72,6 +72,8 @@\n     private static final Set<State> validReportState = new HashSet<>(Arrays.asList(\n             State.Running, State.Errored, State.Finished));\n \n+    private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);", "originalCommit": "90c0e4017da86ee4548ecc10b854da6db98ded03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwOTYwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r383609600", "bodyText": "This logger is only used by static methods in EvergreenService, where getName is not available. For each service implementing EvergreenService, like IPCService, it's suggested to have its own logger instance and override the getLogger() method. I'm also going to update the service template as next steps.", "author": "hui-yang", "createdAt": "2020-02-25T01:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwODU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMDMxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r383610316", "bodyText": "I really don't think that is correct, especially all the state machine stuff should be using a logger which does have getName", "author": "MikeDombo", "createdAt": "2020-02-25T01:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwODU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMTI2Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r383611263", "bodyText": "Oh, I see what you mean, sorry I didn't really look at it all. But I would still disagree, I think that you should get rid of the static logger and just have it be an instance variable for the actual service.", "author": "MikeDombo", "createdAt": "2020-02-25T01:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwODU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "35a5f97434d6195d3ed45e36e79515a60033284e", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 524f1ca2b..598d47db2 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -65,19 +67,30 @@ public class EvergreenService implements InjectionActions, Closeable {\n     private final BlockingQueue<Object> stateEventQueue = new ArrayBlockingQueue<>(1);\n \n     // DesiredStateList is used to set desired path of state transition.\n-    // Eg. Start a service will need DesiredStateList to be <Running>\n-    // ReInstall a service will set DesiredStateList to <Finished->New->Running>\n+    // Eg. Start a service will need DesiredStateList to be <RUNNING>\n+    // ReInstall a service will set DesiredStateList to <FINISHED->NEW->RUNNING>\n     private final List<State> desiredStateList = new CopyOnWriteArrayList<>();\n \n-    private static final Set<State> validReportState = new HashSet<>(Arrays.asList(\n-            State.Running, State.Errored, State.Finished));\n+    private static final Set<State> ALLOWED_STATES_FOR_REPORTING = new HashSet<>(Arrays.asList(\n+            State.RUNNING, State.ERRORED, State.FINISHED));\n \n+    // Static logger instance for static methods\n     private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n+    // Service logger instance\n+    protected Logger logger;\n \n     @SuppressWarnings(\"LeakingThisInConstructor\")\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.state = initStateTopic(topics);\n+        this.logger = LogManager.getLogger(getClass());\n+\n+        String name = topics.getFullName();\n+        if (name != null && !name.equals(\"\")) {\n+            logger.addDefaultKeyValue(\"serviceName\", name);\n+        } else {\n+            logger.addDefaultKeyValue(\"serviceName\", getClass().getSimpleName());\n+        }\n     }\n \n     public State getState() {\n"}}, {"oid": "35a5f97434d6195d3ed45e36e79515a60033284e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35a5f97434d6195d3ed45e36e79515a60033284e", "message": "Use logger API in kernel", "committedDate": "2020-02-25T20:56:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4OTE0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r384189141", "bodyText": "IMO this should be final", "author": "MikeDombo", "createdAt": "2020-02-25T23:26:33Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -73,10 +74,23 @@\n     private static final Set<State> ALLOWED_STATES_FOR_REPORTING = new HashSet<>(Arrays.asList(\n             State.RUNNING, State.ERRORED, State.FINISHED));\n \n+    // Static logger instance for static methods\n+    private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n+    // Service logger instance\n+    protected Logger logger;", "originalCommit": "35a5f97434d6195d3ed45e36e79515a60033284e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13468126c93723b1aae24cfa47e81d74283733ef", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 598d47db2..16383741a 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -77,20 +77,14 @@ public class EvergreenService implements InjectionActions, Closeable {\n     // Static logger instance for static methods\n     private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n     // Service logger instance\n-    protected Logger logger;\n+    protected final Logger logger;\n \n     @SuppressWarnings(\"LeakingThisInConstructor\")\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.state = initStateTopic(topics);\n-        this.logger = LogManager.getLogger(getClass());\n-\n-        String name = topics.getFullName();\n-        if (name != null && !name.equals(\"\")) {\n-            logger.addDefaultKeyValue(\"serviceName\", name);\n-        } else {\n-            logger.addDefaultKeyValue(\"serviceName\", getClass().getSimpleName());\n-        }\n+        this.logger = LogManager.getLogger(getName());\n+        logger.addDefaultKeyValue(\"serviceName\", getName());\n     }\n \n     public State getState() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MDI4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r384190282", "bodyText": "This isn not the name. use getName()", "author": "MikeDombo", "createdAt": "2020-02-25T23:30:02Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -73,10 +74,23 @@\n     private static final Set<State> ALLOWED_STATES_FOR_REPORTING = new HashSet<>(Arrays.asList(\n             State.RUNNING, State.ERRORED, State.FINISHED));\n \n+    // Static logger instance for static methods\n+    private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n+    // Service logger instance\n+    protected Logger logger;\n+\n     @SuppressWarnings(\"LeakingThisInConstructor\")\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.state = initStateTopic(topics);\n+        this.logger = LogManager.getLogger(getClass());\n+\n+        String name = topics.getFullName();", "originalCommit": "35a5f97434d6195d3ed45e36e79515a60033284e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13468126c93723b1aae24cfa47e81d74283733ef", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 598d47db2..16383741a 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -77,20 +77,14 @@ public class EvergreenService implements InjectionActions, Closeable {\n     // Static logger instance for static methods\n     private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n     // Service logger instance\n-    protected Logger logger;\n+    protected final Logger logger;\n \n     @SuppressWarnings(\"LeakingThisInConstructor\")\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.state = initStateTopic(topics);\n-        this.logger = LogManager.getLogger(getClass());\n-\n-        String name = topics.getFullName();\n-        if (name != null && !name.equals(\"\")) {\n-            logger.addDefaultKeyValue(\"serviceName\", name);\n-        } else {\n-            logger.addDefaultKeyValue(\"serviceName\", getClass().getSimpleName());\n-        }\n+        this.logger = LogManager.getLogger(getName());\n+        logger.addDefaultKeyValue(\"serviceName\", getName());\n     }\n \n     public State getState() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MDYxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r384190610", "bodyText": "This won't help since the class will always be GenericExternalService. You still have an overload that just takes a string, right? Use that and pass it getName().", "author": "MikeDombo", "createdAt": "2020-02-25T23:30:51Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -73,10 +74,23 @@\n     private static final Set<State> ALLOWED_STATES_FOR_REPORTING = new HashSet<>(Arrays.asList(\n             State.RUNNING, State.ERRORED, State.FINISHED));\n \n+    // Static logger instance for static methods\n+    private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n+    // Service logger instance\n+    protected Logger logger;\n+\n     @SuppressWarnings(\"LeakingThisInConstructor\")\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.state = initStateTopic(topics);\n+        this.logger = LogManager.getLogger(getClass());", "originalCommit": "35a5f97434d6195d3ed45e36e79515a60033284e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13468126c93723b1aae24cfa47e81d74283733ef", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 598d47db2..16383741a 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -77,20 +77,14 @@ public class EvergreenService implements InjectionActions, Closeable {\n     // Static logger instance for static methods\n     private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n     // Service logger instance\n-    protected Logger logger;\n+    protected final Logger logger;\n \n     @SuppressWarnings(\"LeakingThisInConstructor\")\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.state = initStateTopic(topics);\n-        this.logger = LogManager.getLogger(getClass());\n-\n-        String name = topics.getFullName();\n-        if (name != null && !name.equals(\"\")) {\n-            logger.addDefaultKeyValue(\"serviceName\", name);\n-        } else {\n-            logger.addDefaultKeyValue(\"serviceName\", getClass().getSimpleName());\n-        }\n+        this.logger = LogManager.getLogger(getName());\n+        logger.addDefaultKeyValue(\"serviceName\", getName());\n     }\n \n     public State getState() {\n"}}, {"oid": "13468126c93723b1aae24cfa47e81d74283733ef", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/13468126c93723b1aae24cfa47e81d74283733ef", "message": "Use logger API in kernel", "committedDate": "2020-02-26T00:04:52Z", "type": "commit"}, {"oid": "13468126c93723b1aae24cfa47e81d74283733ef", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/13468126c93723b1aae24cfa47e81d74283733ef", "message": "Use logger API in kernel", "committedDate": "2020-02-26T00:04:52Z", "type": "forcePushed"}]}