{"pr_number": 349, "pr_title": "TES should reject unsupported verb and uri and add tests", "pr_createdAt": "2020-08-04T15:11:49Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349", "timeline": [{"oid": "97abf0b76631ef1192a9adbcd76a571b21bc2d33", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/97abf0b76631ef1192a9adbcd76a571b21bc2d33", "message": "TES restarts server on port change", "committedDate": "2020-08-04T09:40:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MTg2Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465171863", "bodyText": "don't pass the exception as a string, just pass it as e", "author": "MikeDombo", "createdAt": "2020-08-04T16:19:57Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -133,6 +135,20 @@ private void validateConfig() {\n                 .build());\n     }\n \n+    private void restartServer() {\n+        if (server != null) {\n+            server.stop();\n+        }\n+        try {\n+            server = new HttpServerImpl(port, this.credentialRequestHandler);\n+            server.start();\n+            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n+            setEnvVariablesForDependencies(server.getServerPort());\n+        } catch (IOException | IllegalArgumentException e) {\n+            serviceErrored(e.toString());", "originalCommit": "97abf0b76631ef1192a9adbcd76a571b21bc2d33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56903dd02a1521493c97e55ad841e2351653b84c", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java b/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java\nindex b21057f96..f118cce6c 100644\n--- a/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java\n+++ b/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java\n\n@@ -135,20 +131,6 @@ public class TokenExchangeService extends EvergreenService implements AwsCredent\n                 .build());\n     }\n \n-    private void restartServer() {\n-        if (server != null) {\n-            server.stop();\n-        }\n-        try {\n-            server = new HttpServerImpl(port, this.credentialRequestHandler);\n-            server.start();\n-            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n-            setEnvVariablesForDependencies(server.getServerPort());\n-        } catch (IOException | IllegalArgumentException e) {\n-            serviceErrored(e.toString());\n-        }\n-    }\n-\n     @Override\n     public AwsCredentials resolveCredentials() {\n         return credentialRequestHandler.getAwsCredentials();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MjI0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465172240", "bodyText": "maybe don't create a new method. Evergreen can restart your service for you if you call requestRestart", "author": "MikeDombo", "createdAt": "2020-08-04T16:20:33Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -133,6 +135,20 @@ private void validateConfig() {\n                 .build());\n     }\n \n+    private void restartServer() {", "originalCommit": "97abf0b76631ef1192a9adbcd76a571b21bc2d33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56903dd02a1521493c97e55ad841e2351653b84c", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java b/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java\nindex b21057f96..f118cce6c 100644\n--- a/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java\n+++ b/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java\n\n@@ -135,20 +131,6 @@ public class TokenExchangeService extends EvergreenService implements AwsCredent\n                 .build());\n     }\n \n-    private void restartServer() {\n-        if (server != null) {\n-            server.stop();\n-        }\n-        try {\n-            server = new HttpServerImpl(port, this.credentialRequestHandler);\n-            server.start();\n-            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n-            setEnvVariablesForDependencies(server.getServerPort());\n-        } catch (IOException | IllegalArgumentException e) {\n-            serviceErrored(e.toString());\n-        }\n-    }\n-\n     @Override\n     public AwsCredentials resolveCredentials() {\n         return credentialRequestHandler.getAwsCredentials();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Mzg3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465283877", "bodyText": "Would this work without restarting all components?", "author": "prateek-y", "createdAt": "2020-08-04T19:34:22Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -133,6 +135,20 @@ private void validateConfig() {\n                 .build());\n     }\n \n+    private void restartServer() {\n+        if (server != null) {\n+            server.stop();\n+        }\n+        try {\n+            server = new HttpServerImpl(port, this.credentialRequestHandler);\n+            server.start();\n+            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n+            setEnvVariablesForDependencies(server.getServerPort());", "originalCommit": "97abf0b76631ef1192a9adbcd76a571b21bc2d33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NTk1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465285953", "bodyText": "No, env vars are only set once, so running components won't get it", "author": "MikeDombo", "createdAt": "2020-08-04T19:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Mzg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NzQwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465287400", "bodyText": "So, we cannot change the port without restarting the kernel. I think we would need to disallow changing that. :(", "author": "prateek-y", "createdAt": "2020-08-04T19:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Mzg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MTM4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465351382", "bodyText": "I see. I will remove the port related changes.", "author": "youtuyy", "createdAt": "2020-08-04T21:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Mzg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "56903dd02a1521493c97e55ad841e2351653b84c", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java b/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java\nindex b21057f96..f118cce6c 100644\n--- a/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java\n+++ b/src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java\n\n@@ -135,20 +131,6 @@ public class TokenExchangeService extends EvergreenService implements AwsCredent\n                 .build());\n     }\n \n-    private void restartServer() {\n-        if (server != null) {\n-            server.stop();\n-        }\n-        try {\n-            server = new HttpServerImpl(port, this.credentialRequestHandler);\n-            server.start();\n-            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n-            setEnvVariablesForDependencies(server.getServerPort());\n-        } catch (IOException | IllegalArgumentException e) {\n-            serviceErrored(e.toString());\n-        }\n-    }\n-\n     @Override\n     public AwsCredentials resolveCredentials() {\n         return credentialRequestHandler.getAwsCredentials();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NTI0Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465285246", "bodyText": "nit: move this out to a method. its being repeated now.", "author": "prateek-y", "createdAt": "2020-08-04T19:37:05Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "diffHunk": "@@ -147,6 +159,29 @@ void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returne\n             networkUtils.recoverNetwork();\n         }\n \n+        // Should fetch new credentials after updating roleAlias\n+        kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS)\n+                .lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC).withValue(newRoleAliasName);\n+        deviceProvisioningHelper.setupIoTRoleForTes(roleName, newRoleAliasName, thingInfo.getCertificateArn());\n+        con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        token = kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY)\n+                .iterator().next().getName();\n+        assertNotNull(token);\n+        con.setRequestProperty(\"Authorization\", token);\n+        assertEquals(HTTP_200, con.getResponseCode());\n+        StringBuilder newResponse = new StringBuilder();\n+        try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {", "originalCommit": "97abf0b76631ef1192a9adbcd76a571b21bc2d33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56903dd02a1521493c97e55ad841e2351653b84c", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java\nindex 2d4a3070c..f60570742 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java\n\n@@ -105,88 +107,72 @@ class TESTest extends BaseITCase {\n         try {\n             kernel.shutdown();\n         } finally {\n-            deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION,\n-                    Collections.singleton(InvalidRequestException.class)), thingInfo);\n-            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION), IamSdkClientFactory.getIamClient(),\n-                    roleName, roleAliasName, thingInfo.getCertificateArn());\n-            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION), IamSdkClientFactory.getIamClient(),\n-                    roleName, newRoleAliasName, thingInfo.getCertificateArn());\n+            deviceProvisioningHelper.cleanThing(\n+                    IotSdkClientFactory.getIotClient(AWS_REGION, Collections.singleton(InvalidRequestException.class)),\n+                    thingInfo);\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, roleAliasName, thingInfo.getCertificateArn());\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, newRoleAliasName, thingInfo.getCertificateArn());\n         }\n     }\n \n     @Test\n     void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n-        String urlString = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n+        String urlString =\n+                kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n         assertNotNull(urlString);\n         URL url = new URL(urlString);\n         // Get the first token from the token map\n-        String token = kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY).iterator().next().getName();\n+        String token =\n+                kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY)\n+                        .iterator().next().getName();\n         assertNotNull(token);\n+        String response = getResponseString(url, token);\n+        assertThat(response, matchesPattern(AWS_CREDENTIALS_PATTERN));\n+\n+        // Should reject unsupported method\n         HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        assertEquals(HttpURLConnection.HTTP_BAD_METHOD, con.getResponseCode());\n+        con.disconnect();\n+\n+        // Should reject unsupported uri\n+        URL badUrl = new URL(urlString + \"badUri\");\n+        con = (HttpURLConnection) badUrl.openConnection();\n         con.setRequestMethod(\"GET\");\n-        con.setRequestProperty (\"Authorization\", token);\n-        assertEquals(HTTP_200, con.getResponseCode());\n-        StringBuilder response = new StringBuilder();\n-        try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {\n-            String responseLine = in.readLine();\n-            while (responseLine != null) {\n-                response.append(responseLine);\n-                responseLine = in.readLine();\n-            }\n-        }\n+        assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, con.getResponseCode());\n         con.disconnect();\n-        assertThat(response.toString(), matchesPattern(\n-                \"\\\\{\\\"AccessKeyId\\\":\\\".+\\\",\\\"SecretAccessKey\\\":\\\".+\\\",\\\"Expiration\\\":\\\".+\\\",\\\"Token\\\":\\\".+\\\"\\\\}\"));\n \n         // Should serve cached credentials when network disabled\n         try {\n             networkUtils.disconnectNetwork();\n-            con = (HttpURLConnection) url.openConnection();\n-            con.setRequestMethod(\"GET\");\n-            con.setRequestProperty (\"Authorization\", token);\n-            assertEquals(HTTP_200, con.getResponseCode());\n-            StringBuilder newResponse = new StringBuilder();\n-            try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {\n-                String newResponseLine = in.readLine();\n-                while (newResponseLine != null) {\n-                    newResponse.append(newResponseLine);\n-                    newResponseLine = in.readLine();\n-                }\n-            }\n-            con.disconnect();\n-            assertEquals(response.toString(), newResponse.toString());\n+            String newResponse = getResponseString(url, token);\n+            assertEquals(response, newResponse);\n         } finally {\n             networkUtils.recoverNetwork();\n         }\n \n         // Should fetch new credentials after updating roleAlias\n+        deviceProvisioningHelper.setupIoTRoleForTes(roleName, newRoleAliasName, thingInfo.getCertificateArn());\n         kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS)\n                 .lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC).withValue(newRoleAliasName);\n-        deviceProvisioningHelper.setupIoTRoleForTes(roleName, newRoleAliasName, thingInfo.getCertificateArn());\n-        con = (HttpURLConnection) url.openConnection();\n-        con.setRequestMethod(\"GET\");\n         token = kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY)\n                 .iterator().next().getName();\n         assertNotNull(token);\n-        con.setRequestProperty(\"Authorization\", token);\n-        assertEquals(HTTP_200, con.getResponseCode());\n-        StringBuilder newResponse = new StringBuilder();\n-        try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {\n-            String newResponseLine = in.readLine();\n-            while (newResponseLine != null) {\n-                newResponse.append(newResponseLine);\n-                newResponseLine = in.readLine();\n-            }\n+        while (!(new String(kernel.getContext().get(CredentialRequestHandler.class).getCredentialsBypassCache(),\n+                StandardCharsets.UTF_8).toLowerCase().contains(\"accesskeyid\"))) {\n+            Thread.sleep(5_000);\n         }\n-        con.disconnect();\n-        assertThat(newResponse.toString(), matchesPattern(\n-                \"\\\\{\\\"AccessKeyId\\\":\\\".+\\\",\\\"SecretAccessKey\\\":\\\".+\\\",\\\"Expiration\\\":\\\".+\\\",\\\"Token\\\":\\\".+\\\"\\\\}\"));\n-        assertNotEquals(response.toString(), newResponse.toString());\n+        String newResponse = getResponseString(url, token);\n+        assertThat(newResponse, matchesPattern(AWS_CREDENTIALS_PATTERN));\n+        assertNotEquals(response, newResponse);\n     }\n \n     @Test\n     void GIVEN_iot_role_alias_WHEN_tes_is_queried_without_auth_header_THEN_403_returned() throws Exception {\n-        String urlString = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n+        String urlString =\n+                kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n         assertNotNull(urlString);\n         URL url = new URL(urlString);\n \n"}}, {"oid": "eeace4a7ca7013f0b9d55c57f9a64d3386f09e1b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eeace4a7ca7013f0b9d55c57f9a64d3386f09e1b", "message": "Merge branch 'master' into tes-config-change", "committedDate": "2020-08-05T19:34:48Z", "type": "commit"}, {"oid": "56903dd02a1521493c97e55ad841e2351653b84c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/56903dd02a1521493c97e55ad841e2351653b84c", "message": "Handle unsupported method and uri and add tests", "committedDate": "2020-08-06T00:11:07Z", "type": "commit"}, {"oid": "f2f9451dd6e0d3d2212e30d077cf0bfd821a62d7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f2f9451dd6e0d3d2212e30d077cf0bfd821a62d7", "message": "Fix test", "committedDate": "2020-08-06T01:14:33Z", "type": "commit"}, {"oid": "caad7419eb06080c2021e8e4881186c9514e0812", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/caad7419eb06080c2021e8e4881186c9514e0812", "message": "Merge branch 'master' into tes-config-change", "committedDate": "2020-08-06T03:22:59Z", "type": "commit"}, {"oid": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c259ac7b2e8842aea00f8dc6f465ab6f275ecab0", "message": "Merge branch 'master' into tes-config-change", "committedDate": "2020-08-06T18:21:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMDkzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466630933", "bodyText": "nit: make \"GET\" a constant", "author": "prateek-y", "createdAt": "2020-08-06T19:15:35Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -111,6 +113,17 @@ public void setIotCredentialsPath(String iotRoleAlias) {\n     @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n     public void handle(final HttpExchange exchange) throws IOException {\n         try {\n+            if (!exchange.getRequestMethod().equals(\"GET\")) {", "originalCommit": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be4cbeaf494d6fff7f3fd817f29b6dc1600d08cb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\nindex e9c4eba18..7a60d6765 100644\n--- a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n+++ b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n\n@@ -113,13 +114,13 @@ public class CredentialRequestHandler implements HttpHandler {\n     @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n     public void handle(final HttpExchange exchange) throws IOException {\n         try {\n-            if (!exchange.getRequestMethod().equals(\"GET\")) {\n-                LOGGER.atInfo().log(\"Unsupported http method for {}. GET is supported.\", exchange.getRequestMethod());\n+            if (!exchange.getRequestMethod().equals(SUPPORTED_REQUEST_VERB)) {\n+                LOGGER.atWarn().log(\"Unsupported http method for {}. GET is supported.\", exchange.getRequestMethod());\n                 generateError(exchange, HttpURLConnection.HTTP_BAD_METHOD);\n                 return;\n             }\n             if (!exchange.getRequestURI().getPath().equals(URL)) {\n-                LOGGER.atInfo().log(\"Unexpected URI: {}.\",\n+                LOGGER.atWarn().log(\"Unexpected URI: {}.\",\n                         exchange.getRequestURI().getPath());\n                 generateError(exchange, HttpURLConnection.HTTP_BAD_REQUEST);\n                 return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMTI5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466631292", "bodyText": "I think this is warn, since customers should not do this at all. This might be indicative of a rogue process.", "author": "prateek-y", "createdAt": "2020-08-06T19:16:13Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -111,6 +113,17 @@ public void setIotCredentialsPath(String iotRoleAlias) {\n     @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n     public void handle(final HttpExchange exchange) throws IOException {\n         try {\n+            if (!exchange.getRequestMethod().equals(\"GET\")) {\n+                LOGGER.atInfo().log(\"Unsupported http method for {}. GET is supported.\", exchange.getRequestMethod());", "originalCommit": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTUzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466731533", "bodyText": "makes sense", "author": "youtuyy", "createdAt": "2020-08-06T23:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMTI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "be4cbeaf494d6fff7f3fd817f29b6dc1600d08cb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\nindex e9c4eba18..7a60d6765 100644\n--- a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n+++ b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n\n@@ -113,13 +114,13 @@ public class CredentialRequestHandler implements HttpHandler {\n     @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n     public void handle(final HttpExchange exchange) throws IOException {\n         try {\n-            if (!exchange.getRequestMethod().equals(\"GET\")) {\n-                LOGGER.atInfo().log(\"Unsupported http method for {}. GET is supported.\", exchange.getRequestMethod());\n+            if (!exchange.getRequestMethod().equals(SUPPORTED_REQUEST_VERB)) {\n+                LOGGER.atWarn().log(\"Unsupported http method for {}. GET is supported.\", exchange.getRequestMethod());\n                 generateError(exchange, HttpURLConnection.HTTP_BAD_METHOD);\n                 return;\n             }\n             if (!exchange.getRequestURI().getPath().equals(URL)) {\n-                LOGGER.atInfo().log(\"Unexpected URI: {}.\",\n+                LOGGER.atWarn().log(\"Unexpected URI: {}.\",\n                         exchange.getRequestURI().getPath());\n                 generateError(exchange, HttpURLConnection.HTTP_BAD_REQUEST);\n                 return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMjA3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466632073", "bodyText": "lets add all verbs for sake of completeness", "author": "prateek-y", "createdAt": "2020-08-06T19:17:52Z", "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -113,6 +118,43 @@ public void GIVEN_credential_handler_WHEN_called_handle_THEN_returns_creds() thr\n         mockStream.close();\n     }\n \n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_credential_handler_WHEN_unsupported_request_method_THEN_return_405() throws Exception {\n+        CredentialRequestHandler handler = new CredentialRequestHandler(\n+                mockCloudHelper,\n+                mockConnectionManager,\n+                mockAuthNHandler,\n+                mockAuthZHandler);\n+        handler.setIotCredentialsPath(ROLE_ALIAS);\n+        HttpExchange mockExchange = mock(HttpExchange.class);\n+        when(mockExchange.getRequestMethod()).thenReturn(\"POST\");", "originalCommit": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be4cbeaf494d6fff7f3fd817f29b6dc1600d08cb", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java b/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\nindex 64ab65851..d16e022fb 100644\n--- a/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\n\n@@ -118,9 +140,10 @@ public class CredentialRequestHandlerTest {\n         mockStream.close();\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"PUT\", \"POST\", \"DELETE\", \"PATCH\"})\n     @SuppressWarnings(\"PMD.CloseResource\")\n-    public void GIVEN_credential_handler_WHEN_unsupported_request_method_THEN_return_405() throws Exception {\n+    public void GIVEN_credential_handler_WHEN_unsupported_request_method_THEN_return_405(String verb) throws Exception {\n         CredentialRequestHandler handler = new CredentialRequestHandler(\n                 mockCloudHelper,\n                 mockConnectionManager,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNDMzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466634336", "bodyText": "let's also handle the case, when customer sends a URI with prefixed, suffixed with another string. Something like \"/something\" +TES_URI, TES_URI + \"/something\".", "author": "prateek-y", "createdAt": "2020-08-06T19:22:27Z", "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -113,6 +118,43 @@ public void GIVEN_credential_handler_WHEN_called_handle_THEN_returns_creds() thr\n         mockStream.close();\n     }\n \n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_credential_handler_WHEN_unsupported_request_method_THEN_return_405() throws Exception {\n+        CredentialRequestHandler handler = new CredentialRequestHandler(\n+                mockCloudHelper,\n+                mockConnectionManager,\n+                mockAuthNHandler,\n+                mockAuthZHandler);\n+        handler.setIotCredentialsPath(ROLE_ALIAS);\n+        HttpExchange mockExchange = mock(HttpExchange.class);\n+        when(mockExchange.getRequestMethod()).thenReturn(\"POST\");\n+        handler.handle(mockExchange);\n+\n+        int expectedStatus = 405;\n+        int expectedResponseLength = -1;\n+        verify(mockExchange, times(1)).sendResponseHeaders(expectedStatus, expectedResponseLength);\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_credential_handler_WHEN_unsupported_uri_THEN_return_400() throws Exception {\n+        CredentialRequestHandler handler = new CredentialRequestHandler(\n+                mockCloudHelper,\n+                mockConnectionManager,\n+                mockAuthNHandler,\n+                mockAuthZHandler);\n+        handler.setIotCredentialsPath(ROLE_ALIAS);\n+        HttpExchange mockExchange = mock(HttpExchange.class);\n+        when(mockExchange.getRequestMethod()).thenReturn(REQUEST_METHOD);\n+        when(mockExchange.getRequestURI()).thenReturn(URI.create(\"badURI\"));", "originalCommit": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be4cbeaf494d6fff7f3fd817f29b6dc1600d08cb", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java b/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\nindex 64ab65851..d16e022fb 100644\n--- a/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\n\n@@ -118,9 +140,10 @@ public class CredentialRequestHandlerTest {\n         mockStream.close();\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"PUT\", \"POST\", \"DELETE\", \"PATCH\"})\n     @SuppressWarnings(\"PMD.CloseResource\")\n-    public void GIVEN_credential_handler_WHEN_unsupported_request_method_THEN_return_405() throws Exception {\n+    public void GIVEN_credential_handler_WHEN_unsupported_request_method_THEN_return_405(String verb) throws Exception {\n         CredentialRequestHandler handler = new CredentialRequestHandler(\n                 mockCloudHelper,\n                 mockConnectionManager,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNDYwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466634609", "bodyText": "wondering if we can extract all this to a private method.", "author": "prateek-y", "createdAt": "2020-08-06T19:23:03Z", "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -449,6 +509,8 @@ public void GIVEN_connection_error_WHEN_called_handle_THEN_expire_immediately(Ex\n         when(mockExchange.getResponseBody()).thenReturn(mockStream);\n         Headers mockHeader = mock(Headers.class);\n         when(mockExchange.getRequestHeaders()).thenReturn(mockHeader);\n+        when(mockExchange.getRequestURI()).thenReturn(TES_URI);", "originalCommit": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be4cbeaf494d6fff7f3fd817f29b6dc1600d08cb", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java b/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\nindex 64ab65851..d16e022fb 100644\n--- a/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\n\n@@ -497,21 +434,7 @@ public class CredentialRequestHandlerTest {\n         when(mockCloudHelper.sendHttpRequest(any(), any(), any(), any())).thenThrow(AWSIotException.class);\n         when(mockAuthNHandler.doAuthentication(anyString())).thenReturn(\"ServiceA\");\n         when(mockAuthZHandler.isAuthorized(any(), any())).thenReturn(true);\n-\n-        CredentialRequestHandler handler = new CredentialRequestHandler(\n-                mockCloudHelper,\n-                mockConnectionManager,\n-                mockAuthNHandler,\n-                mockAuthZHandler);\n-        handler.setIotCredentialsPath(ROLE_ALIAS);\n-        HttpExchange mockExchange = mock(HttpExchange.class);\n-        OutputStream mockStream = mock(OutputStream.class);\n-        when(mockExchange.getResponseBody()).thenReturn(mockStream);\n-        Headers mockHeader = mock(Headers.class);\n-        when(mockExchange.getRequestHeaders()).thenReturn(mockHeader);\n-        when(mockExchange.getRequestURI()).thenReturn(TES_URI);\n-        when(mockExchange.getRequestMethod()).thenReturn(REQUEST_METHOD);\n-        when(mockHeader.getFirst(anyString())).thenReturn(\"auth token\");\n+        CredentialRequestHandler handler = setupHandler();\n         handler.handle(mockExchange);\n         byte[] expectedResponse = \"Failed to get connection\".getBytes();\n         int expectedStatus = 500;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNTQ4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466635481", "bodyText": "Lets send a random body with post as well.", "author": "prateek-y", "createdAt": "2020-08-06T19:24:46Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "diffHunk": "@@ -95,63 +107,72 @@ static void tearDown() {\n         try {\n             kernel.shutdown();\n         } finally {\n-            deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION,\n-                    Collections.singleton(InvalidRequestException.class)), thingInfo);\n-            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION), IamSdkClientFactory.getIamClient(),\n-                    roleName, roleAliasName, thingInfo.getCertificateArn());\n+            deviceProvisioningHelper.cleanThing(\n+                    IotSdkClientFactory.getIotClient(AWS_REGION, Collections.singleton(InvalidRequestException.class)),\n+                    thingInfo);\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, roleAliasName, thingInfo.getCertificateArn());\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, newRoleAliasName, thingInfo.getCertificateArn());\n         }\n     }\n \n     @Test\n     void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n-        String urlString = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n+        String urlString =\n+                kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n         assertNotNull(urlString);\n         URL url = new URL(urlString);\n         // Get the first token from the token map\n-        String token = kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY).iterator().next().getName();\n+        String token =\n+                kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY)\n+                        .iterator().next().getName();\n         assertNotNull(token);\n+        String response = getResponseString(url, token);\n+        assertThat(response, matchesPattern(AWS_CREDENTIALS_PATTERN));\n+\n+        // Should reject unsupported method\n         HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");", "originalCommit": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be4cbeaf494d6fff7f3fd817f29b6dc1600d08cb", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java\nindex f60570742..b2a4d105f 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java\n\n@@ -118,7 +119,11 @@ class TESTest extends BaseITCase {\n     }\n \n     @Test\n-    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned(ExtensionContext context)\n+            throws Exception {\n+        //\n+        ignoreExceptionUltimateCauseOfType(context, AuthorizationException.class);\n+        ignoreExceptionUltimateCauseOfType(context, BindException.class);\n         String urlString =\n                 kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n         assertNotNull(urlString);\n"}}, {"oid": "f57d642051963ac023cda7729a27e7fe624edd5e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f57d642051963ac023cda7729a27e7fe624edd5e", "message": "Merge branch 'master' into tes-config-change", "committedDate": "2020-08-06T23:44:03Z", "type": "commit"}, {"oid": "be4cbeaf494d6fff7f3fd817f29b6dc1600d08cb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/be4cbeaf494d6fff7f3fd817f29b6dc1600d08cb", "message": "address comments", "committedDate": "2020-08-06T23:44:44Z", "type": "commit"}, {"oid": "bd8295ac20691505761d8dffb48f9718d56f0dea", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bd8295ac20691505761d8dffb48f9718d56f0dea", "message": "Merge remote-tracking branch 'origin/tes-config-change' into tes-config-change", "committedDate": "2020-08-06T23:45:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MjEyOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466752129", "bodyText": "remove?", "author": "prateek-y", "createdAt": "2020-08-07T00:16:25Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "diffHunk": "@@ -95,63 +108,85 @@ static void tearDown() {\n         try {\n             kernel.shutdown();\n         } finally {\n-            deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION,\n-                    Collections.singleton(InvalidRequestException.class)), thingInfo);\n-            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION), IamSdkClientFactory.getIamClient(),\n-                    roleName, roleAliasName, thingInfo.getCertificateArn());\n+            deviceProvisioningHelper.cleanThing(\n+                    IotSdkClientFactory.getIotClient(AWS_REGION, Collections.singleton(InvalidRequestException.class)),\n+                    thingInfo);\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, roleAliasName, thingInfo.getCertificateArn());\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, newRoleAliasName, thingInfo.getCertificateArn());\n         }\n     }\n \n     @Test\n-    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n-        String urlString = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned(ExtensionContext context)\n+            throws Exception {\n+        //", "originalCommit": "bd8295ac20691505761d8dffb48f9718d56f0dea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzU2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466753566", "bodyText": "ah, sure", "author": "youtuyy", "createdAt": "2020-08-07T00:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MjEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "909c59ede02ac6b51f7cb0c9c814da7b18592f7e", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java\nindex b2a4d105f..dc40e917b 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java\n\n@@ -121,7 +121,6 @@ class TESTest extends BaseITCase {\n     @Test\n     void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned(ExtensionContext context)\n             throws Exception {\n-        //\n         ignoreExceptionUltimateCauseOfType(context, AuthorizationException.class);\n         ignoreExceptionUltimateCauseOfType(context, BindException.class);\n         String urlString =\n"}}, {"oid": "909c59ede02ac6b51f7cb0c9c814da7b18592f7e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/909c59ede02ac6b51f7cb0c9c814da7b18592f7e", "message": "fix", "committedDate": "2020-08-07T00:20:47Z", "type": "commit"}, {"oid": "0fa639fb5c02d8d7357ed3ffd08c084bb1e45167", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0fa639fb5c02d8d7357ed3ffd08c084bb1e45167", "message": "Merge branch 'master' into tes-config-change", "committedDate": "2020-08-07T17:34:01Z", "type": "commit"}, {"oid": "a378232c4338467fc1ae37ac498342c6ecf7121c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a378232c4338467fc1ae37ac498342c6ecf7121c", "message": "Merge branch 'master' into tes-config-change", "committedDate": "2020-08-10T08:22:33Z", "type": "commit"}]}