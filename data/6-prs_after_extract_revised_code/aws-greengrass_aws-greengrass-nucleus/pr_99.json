{"pr_number": 99, "pr_title": "Add JMH incredibly basic benchmark", "pr_createdAt": "2020-03-05T23:35:33Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99", "timeline": [{"oid": "bc71d10def7923b34dfeb9093e1f46581dde6feb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bc71d10def7923b34dfeb9093e1f46581dde6feb", "message": "Add JMH incredibly basic benchmark.\n\nCurrently JMH results are not ingested to anything,\nthis will change in future PRs.", "committedDate": "2020-03-06T19:13:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NDYyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r389164622", "bodyText": "I don't think \"-log\" works any more", "author": "hui-yang", "createdAt": "2020-03-06T21:59:12Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh;\n+\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import org.openjdk.jmh.annotations.Benchmark;\n+\n+public class BasicExampleBenchmark {\n+\n+    @Benchmark\n+    public void testMethod() throws Exception {\n+        String tdir = System.getProperty(\"user.home\")+\"/kernelTest\";\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tdir,\n+                \"-log\", \"stdout\",", "originalCommit": "bc71d10def7923b34dfeb9093e1f46581dde6feb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MDQ0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r389170445", "bodyText": "Probably not, I'll remove it. I was just copying from existing tests.", "author": "MikeDombo", "createdAt": "2020-03-06T22:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NDYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "cb060e581e711de86d8927565da46574dbce33ed", "chunk": "diff --git a/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java b/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java\nindex 0f3ceb2ae..f80e363ef 100644\n--- a/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java\n+++ b/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java\n\n@@ -16,13 +16,12 @@ public class BasicExampleBenchmark {\n         String tdir = System.getProperty(\"user.home\")+\"/kernelTest\";\n         Kernel kernel = new Kernel();\n         kernel.parseArgs(\"-r\", tdir,\n-                \"-log\", \"stdout\",\n                 \"-i\", BasicExampleBenchmark.class.getResource(\"config.yaml\").toString()\n         );\n         kernel.launch();\n         Thread.sleep(20000);\n         ForcedGcMemoryProfiler.recordUsedMemory();\n-        kernel.shutdown(60);\n+        kernel.shutdown();\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NTkwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r389165909", "bodyText": "Not sure about this magic number.\nAre we directly using this library file? Maybe document any modifications?", "author": "hui-yang", "createdAt": "2020-03-06T22:02:56Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/profilers/ForcedGcMemoryProfiler.java", "diffHunk": "@@ -0,0 +1,378 @@\n+/*\n+ * #%L\n+ * Benchmarks: JMH suite.\n+ * %%\n+ * Copyright (C) 2013 - 2019 headissue GmbH, Munich\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ *\n+ * Modifications copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.profilers;\n+\n+import com.aws.iot.evergreen.util.Pair;\n+import org.openjdk.jmh.infra.BenchmarkParams;\n+import org.openjdk.jmh.infra.IterationParams;\n+import org.openjdk.jmh.profile.InternalProfiler;\n+import org.openjdk.jmh.results.AggregationPolicy;\n+import org.openjdk.jmh.results.IterationResult;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.runner.IterationType;\n+import org.openjdk.jmh.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.LineNumberReader;\n+import java.io.PrintStream;\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Record the used heap memory of a benchmark iteration by forcing a full garbage collection.\n+ *\n+ * @author Jens Wilke\n+ */\n+public class ForcedGcMemoryProfiler implements InternalProfiler {\n+    // Extracts memory pool name and amount of committed memory from jcmd output\n+    // Example output:\n+    /*\n+    42:\n+\n+ Native Memory Tracking:\n+\n+ Total: reserved=1840MB, committed=91MB\n+ -                 Java Heap (reserved=498MB, committed=12MB)\n+                             (mmap: reserved=498MB, committed=12MB)\n+\n+ -                     Class (reserved=1050MB, committed=28MB)\n+                             (classes #4094)\n+                             (malloc=4MB #3323)\n+                             (mmap: reserved=1046MB, committed=24MB)\n+     */\n+    private static final Pattern JCMD_NATIVE_COMMITTED_MEMORY_PATTERN =\n+            Pattern.compile(\"^[\\\\-\\\\s]*(\\\\w+[\\\\w\\\\s]+)[: ].*committed=([\\\\d]+)\\\\w+\\\\)?$\", Pattern.MULTILINE);\n+\n+    private static boolean runOnlyAfterLastIteration = true;\n+    @SuppressWarnings(\"unused\")\n+    private static Object keepReference;\n+    private static long gcTimeMillis = -1;\n+    private static long usedHeapViaHistogram = -1;\n+    private static List<Pair<String, Long>> nativeMemoryUsage;\n+    private static volatile boolean enabled = false;\n+    private static UsageTuple usageAfterIteration;\n+    private static UsageTuple usageAfterSettled;\n+\n+    /**\n+     * The benchmark needs to hand over the reference so the memory is kept after\n+     * the shutdown of the benchmark and can be measured.\n+     */\n+    public static void keepReference(Object _rootReferenceToKeep) {\n+        if (enabled) {\n+            keepReference = _rootReferenceToKeep;\n+        }\n+    }\n+\n+    public static UsageTuple getUsage() {\n+        MemoryMXBean bean = ManagementFactory.getMemoryMXBean();\n+        MemoryUsage heapUsage = bean.getHeapMemoryUsage();\n+        MemoryUsage nonHeapUsage = bean.getNonHeapMemoryUsage();\n+        return new UsageTuple(heapUsage, nonHeapUsage);\n+    }\n+\n+    /**\n+     * Called from the benchmark when the objects are still referenced to record the\n+     * used memory. Enforces a full garbage collection and records memory usage.\n+     * Waits and triggers GC again, as long as the memory is still reducing. Some workloads\n+     * needs some time until they drain queues and finish all the work.\n+     */\n+    public static void recordUsedMemory() {\n+        long t0 = System.currentTimeMillis();\n+        long usedMemorySettled;\n+        if (runSystemGC()) {\n+            usageAfterIteration = getUsage();\n+            long m2 = usageAfterIteration.getTotalUsed();\n+            do {\n+                try {\n+                    Thread.sleep(567);", "originalCommit": "bc71d10def7923b34dfeb9093e1f46581dde6feb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MjIyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r389172227", "bodyText": "Yes as you say, this is all code that I took from cache2k and I don't know what their reasoning was for choosing it. I may just remove this because I'm not seeing a substantial difference between the memory measurement and the \"settled\" memory numbers.", "author": "MikeDombo", "createdAt": "2020-03-06T22:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NTkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "chunk": "diff --git a/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/profilers/ForcedGcMemoryProfiler.java b/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/profilers/ForcedGcMemoryProfiler.java\nindex bdef8a7b6..f40e547d4 100755\n--- a/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/profilers/ForcedGcMemoryProfiler.java\n+++ b/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/profilers/ForcedGcMemoryProfiler.java\n\n@@ -80,6 +80,7 @@ public class ForcedGcMemoryProfiler implements InternalProfiler {\n      */\n     private static final Pattern JCMD_NATIVE_COMMITTED_MEMORY_PATTERN =\n             Pattern.compile(\"^[\\\\-\\\\s]*(\\\\w+[\\\\w\\\\s]+)[: ].*committed=([\\\\d]+)\\\\w+\\\\)?$\", Pattern.MULTILINE);\n+    private static final String METRIC_PREFIX = \"EG\";\n \n     private static boolean runOnlyAfterLastIteration = true;\n     @SuppressWarnings(\"unused\")\n"}}, {"oid": "a58c10f6fbaa7f697d9a6398989aa61737791166", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a58c10f6fbaa7f697d9a6398989aa61737791166", "message": "Add JMH incredibly basic benchmark.\n\nCurrently JMH results are not ingested to anything,\nthis will change in future PRs.", "committedDate": "2020-03-09T23:33:46Z", "type": "commit"}, {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "message": "Addressing comments, removed settled measurement", "committedDate": "2020-03-09T23:37:51Z", "type": "commit"}, {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "message": "Addressing comments, removed settled measurement", "committedDate": "2020-03-09T23:37:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTQwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390021409", "bodyText": "Why increase the time to 60 seconds?", "author": "fengwang666", "createdAt": "2020-03-09T23:46:48Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAwareServicesTest.java", "diffHunk": "@@ -59,7 +59,7 @@ void GIVEN_ipc_aware_service_WHEN_report_state_as_running_THEN_kernel_updates_st\n         kernel.context.addGlobalStateChangeListener(listener);\n \n         // waiting for main to transition to running\n-        boolean isRunning = serviceRunning.await(30, TimeUnit.SECONDS);\n+        boolean isRunning = serviceRunning.await(60, TimeUnit.SECONDS);", "originalCommit": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzOTQ1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390039453", "bodyText": "Since this test uses mvn exec it needs to compile and then run the code. I found that this test has been occasionally failing in GitHub CI, so increasing this timeout just gives it more time to build on a slow machine. But I can definitely put it back to 30 if you want.", "author": "MikeDombo", "createdAt": "2020-03-10T00:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "7f90229c9bafa9333239384cd22ed7dc3af0132b", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAwareServicesTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAwareServicesTest.java\nindex 364003633..00d72960f 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAwareServicesTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAwareServicesTest.java\n\n@@ -51,8 +51,8 @@ class IPCAwareServicesTest {\n     void GIVEN_ipc_aware_service_WHEN_report_state_as_running_THEN_kernel_updates_state_as_running()\n             throws Exception {\n         CountDownLatch serviceRunning = new CountDownLatch(1);\n-        EvergreenService.GlobalStateChangeListener listener = (service, state) -> {\n-            if (SAMPLE_IPC_AWARE_SERVICE_NAME.equals(service.getName()) && State.RUNNING.equals(service.getState())) {\n+        EvergreenService.GlobalStateChangeListener listener = (service, oldState, newState) -> {\n+            if (SAMPLE_IPC_AWARE_SERVICE_NAME.equals(service.getName()) && State.RUNNING.equals(newState)) {\n                 serviceRunning.countDown();\n             }\n         };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyOTk1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390029954", "bodyText": "So this is measuring one data point?", "author": "fengwang666", "createdAt": "2020-03-10T00:17:46Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh;\n+\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import org.openjdk.jmh.annotations.Benchmark;\n+\n+public class BasicExampleBenchmark {\n+\n+    @Benchmark\n+    public void testMethod() throws Exception {\n+        String tdir = System.getProperty(\"user.home\")+\"/kernelTest\";\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tdir,\n+                \"-log\", \"stdout\",\n+                \"-i\", BasicExampleBenchmark.class.getResource(\"config.yaml\").toString()\n+        );\n+        kernel.launch();\n+        Thread.sleep(20000);\n+        ForcedGcMemoryProfiler.recordUsedMemory();", "originalCommit": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzOTc3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390039773", "bodyText": "That's correct. If we want more data points once we have more complicated tests, then we would call this multiple times and all the data points would be averaged under the current implementation. Though we may want to change the handling to either treat them as separate data points or to aggregate them in a different way.", "author": "MikeDombo", "createdAt": "2020-03-10T00:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyOTk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "cb060e581e711de86d8927565da46574dbce33ed", "chunk": "diff --git a/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java b/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java\nindex 0f3ceb2ae..f80e363ef 100644\n--- a/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java\n+++ b/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java\n\n@@ -16,13 +16,12 @@ public class BasicExampleBenchmark {\n         String tdir = System.getProperty(\"user.home\")+\"/kernelTest\";\n         Kernel kernel = new Kernel();\n         kernel.parseArgs(\"-r\", tdir,\n-                \"-log\", \"stdout\",\n                 \"-i\", BasicExampleBenchmark.class.getResource(\"config.yaml\").toString()\n         );\n         kernel.launch();\n         Thread.sleep(20000);\n         ForcedGcMemoryProfiler.recordUsedMemory();\n-        kernel.shutdown(60);\n+        kernel.shutdown();\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMDA4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390030082", "bodyText": "Why 60 seconds instead of default value?", "author": "fengwang666", "createdAt": "2020-03-10T00:18:14Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh;\n+\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import org.openjdk.jmh.annotations.Benchmark;\n+\n+public class BasicExampleBenchmark {\n+\n+    @Benchmark\n+    public void testMethod() throws Exception {\n+        String tdir = System.getProperty(\"user.home\")+\"/kernelTest\";\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tdir,\n+                \"-log\", \"stdout\",\n+                \"-i\", BasicExampleBenchmark.class.getResource(\"config.yaml\").toString()\n+        );\n+        kernel.launch();\n+        Thread.sleep(20000);\n+        ForcedGcMemoryProfiler.recordUsedMemory();\n+        kernel.shutdown(60);", "originalCommit": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzOTk0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390039944", "bodyText": "I will change this. I was seeing that the kernel wasn't properly shutting down, so I tried giving it more time. Ultimately it was resolved with my change to Copier which makes them daemon threads.", "author": "MikeDombo", "createdAt": "2020-03-10T00:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMDA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cb060e581e711de86d8927565da46574dbce33ed", "chunk": "diff --git a/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java b/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java\nindex 0f3ceb2ae..f80e363ef 100644\n--- a/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java\n+++ b/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java\n\n@@ -16,13 +16,12 @@ public class BasicExampleBenchmark {\n         String tdir = System.getProperty(\"user.home\")+\"/kernelTest\";\n         Kernel kernel = new Kernel();\n         kernel.parseArgs(\"-r\", tdir,\n-                \"-log\", \"stdout\",\n                 \"-i\", BasicExampleBenchmark.class.getResource(\"config.yaml\").toString()\n         );\n         kernel.launch();\n         Thread.sleep(20000);\n         ForcedGcMemoryProfiler.recordUsedMemory();\n-        kernel.shutdown(60);\n+        kernel.shutdown();\n     }\n \n }\n"}}, {"oid": "cb060e581e711de86d8927565da46574dbce33ed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cb060e581e711de86d8927565da46574dbce33ed", "message": "Addressing PR comments. Adds readme. Allows multiple calls to record", "committedDate": "2020-03-10T01:13:12Z", "type": "commit"}, {"oid": "7f90229c9bafa9333239384cd22ed7dc3af0132b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7f90229c9bafa9333239384cd22ed7dc3af0132b", "message": "Merge branch 'master' into jmh", "committedDate": "2020-03-10T16:00:20Z", "type": "commit"}]}