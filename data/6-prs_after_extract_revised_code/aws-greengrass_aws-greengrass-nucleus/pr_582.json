{"pr_number": 582, "pr_title": "Restrict loading of external plugins to cloud based recipes", "pr_createdAt": "2020-10-29T16:53:57Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582", "timeline": [{"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d45da814994cecfd4b189ca4941354c7c04ac8e7", "message": "Restrict loading of external plugins to cloud based recipes\n\nWith this change, only recipes which are from cloud are trusted and\nloaded as plugins. This aims to create development friction for customers as\nthey cannot create a local plugin recipe and load it. We want to do this\nfor 2 reasons. 1. Our plugin interface is not final and is subject to changes\nwith later greengrass releases. 2. A malicious user cannot modify existing plugin\non the disk or load a new one.", "committedDate": "2020-10-29T16:48:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMjU3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514422574", "bodyText": "not sure where, but we must deserialize somewhere else, can you dedupe?", "author": "MikeDombo", "createdAt": "2020-10-29T17:04:16Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)", "originalCommit": "d45da814994cecfd4b189ca4941354c7c04ac8e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMTg5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514631894", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-10-29T23:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "e39e2759f5cc3eb7870231fdf4a33823f6e46870", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex a1658d879..6064f20da 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -142,18 +140,8 @@ public class ComponentManager implements InjectionActions {\n \n     private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n             throws PackageLoadingException {\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n-        try {\n-            componentRecipe =\n-                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n-                            .readValue(recipeContent,\n-                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n-        } catch (JsonProcessingException e) {\n-            // GG_NEEDS_REVIEW: TODO move this to common model\n-            throw new PackageLoadingException(\n-                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n-                            recipeContent), e);\n-        }\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe =\n+                RecipeLoader.parseRecipe(recipeContent);\n         if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n             logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n                     .log(\"Skip storing digest as component is not plugin\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzY1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514423659", "bodyText": "Why check for null, just remove it. A node with a null value is still a node which can be removed.", "author": "MikeDombo", "createdAt": "2020-10-29T17:05:57Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                            .readValue(recipeContent,\n+                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            // GG_NEEDS_REVIEW: TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeContent), e);\n+        }\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                            componentIdentifier.toString()).withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, recipeContent).log(\"Save calculated digest: \" + digest);\n+        } catch (NoSuchAlgorithmException e) {\n+            // This should never happen as SHA-256 is mandatory for every default JVM provider\n+            throw new PackageLoadingException(\"No security provider found for message digest\", e);\n+        }\n+    }\n+\n+    private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier) {\n+        // clean up digest from store\n+        Topic digestTopic = kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                componentIdentifier.toString());\n+        if (digestTopic.getOnce() != null) {\n+            digestTopic.remove();", "originalCommit": "d45da814994cecfd4b189ca4941354c7c04ac8e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNzMzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514637337", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-10-30T00:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e39e2759f5cc3eb7870231fdf4a33823f6e46870", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex a1658d879..6064f20da 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -142,18 +140,8 @@ public class ComponentManager implements InjectionActions {\n \n     private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n             throws PackageLoadingException {\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n-        try {\n-            componentRecipe =\n-                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n-                            .readValue(recipeContent,\n-                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n-        } catch (JsonProcessingException e) {\n-            // GG_NEEDS_REVIEW: TODO move this to common model\n-            throw new PackageLoadingException(\n-                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n-                            recipeContent), e);\n-        }\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe =\n+                RecipeLoader.parseRecipe(recipeContent);\n         if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n             logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n                     .log(\"Skip storing digest as component is not plugin\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzg5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514423897", "bodyText": "use find instead of lookup, then check for null on the returned topic", "author": "MikeDombo", "createdAt": "2020-10-29T17:06:20Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                            .readValue(recipeContent,\n+                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            // GG_NEEDS_REVIEW: TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeContent), e);\n+        }\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                            componentIdentifier.toString()).withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, recipeContent).log(\"Save calculated digest: \" + digest);\n+        } catch (NoSuchAlgorithmException e) {\n+            // This should never happen as SHA-256 is mandatory for every default JVM provider\n+            throw new PackageLoadingException(\"No security provider found for message digest\", e);\n+        }\n+    }\n+\n+    private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier) {\n+        // clean up digest from store\n+        Topic digestTopic = kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,", "originalCommit": "d45da814994cecfd4b189ca4941354c7c04ac8e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMTk0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514631941", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-10-29T23:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e39e2759f5cc3eb7870231fdf4a33823f6e46870", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex a1658d879..6064f20da 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -142,18 +140,8 @@ public class ComponentManager implements InjectionActions {\n \n     private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n             throws PackageLoadingException {\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n-        try {\n-            componentRecipe =\n-                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n-                            .readValue(recipeContent,\n-                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n-        } catch (JsonProcessingException e) {\n-            // GG_NEEDS_REVIEW: TODO move this to common model\n-            throw new PackageLoadingException(\n-                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n-                            recipeContent), e);\n-        }\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe =\n+                RecipeLoader.parseRecipe(recipeContent);\n         if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n             logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n                     .log(\"Skip storing digest as component is not plugin\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MjcxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514442719", "bodyText": "why isn't string comparison enough given that both strings are already b64 encoded?", "author": "MikeDombo", "createdAt": "2020-10-29T17:34:00Z", "path": "src/main/java/com/aws/greengrass/util/Digest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+\n+/**\n+ * Set of methods for digest operations but with Strings.\n+ */\n+public final class Digest {\n+    // Every implementation of the Java platform is required to support SHA-256.\n+    public static final String DIGEST_ALGO = \"SHA-256\";\n+    \n+    private Digest() {\n+    }\n+\n+    /**\n+     * Calculate digest for a UTF_8 encoded string input.\n+     * @param utfInput String to calculate digest for\n+     * @return the base64 encoded digest value for the string\n+     * @throws NoSuchAlgorithmException when no implementation for message digest is available\n+     * @throws IllegalArgumentException if input is invalid\n+     */\n+    public static String calculate(String utfInput) throws NoSuchAlgorithmException {\n+        if (Utils.isEmpty(utfInput)) {\n+            throw new IllegalArgumentException(\"Invalid input to calculate digest\");\n+        }\n+        MessageDigest messageDigest = MessageDigest.getInstance(DIGEST_ALGO);\n+        return Base64.getEncoder().encodeToString(messageDigest.digest(utfInput.getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    /**\n+     * Compare two utf8 encoded digest strings.\n+     * @param digest1 first digest to compare\n+     * @param digest2 second digest to compare\n+     * @return whether two digests are equal\n+     * @throws NoSuchAlgorithmException when no implementation for message digest is available\n+     */\n+    public static boolean isEqual(String digest1, String digest2) throws NoSuchAlgorithmException {", "originalCommit": "d45da814994cecfd4b189ca4941354c7c04ac8e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjcxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514632710", "bodyText": "yeah. that works. I was trying to use the equals method provided by digest, lets keep this way unless you feel strongly about it.", "author": "prateek-y", "createdAt": "2020-10-29T23:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MjcxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0NDc5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514444798", "bodyText": "don't call new. Just use context.get(ComponentStore.class)", "author": "MikeDombo", "createdAt": "2020-10-29T17:37:05Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -128,6 +133,8 @@ public Kernel() {\n         context.put(NucleusPaths.class, nucleusPaths);\n         kernelCommandLine = new KernelCommandLine(this);\n         kernelLifecycle = new KernelLifecycle(this, kernelCommandLine, nucleusPaths);\n+        componentStore = new ComponentStore(nucleusPaths);", "originalCommit": "d45da814994cecfd4b189ca4941354c7c04ac8e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjc0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514632744", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-10-29T23:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0NDc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "e39e2759f5cc3eb7870231fdf4a33823f6e46870", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java b/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java\nindex 5ffa31d58..95791ba24 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java\n\n@@ -133,8 +130,6 @@ public class Kernel {\n         context.put(NucleusPaths.class, nucleusPaths);\n         kernelCommandLine = new KernelCommandLine(this);\n         kernelLifecycle = new KernelLifecycle(this, kernelCommandLine, nucleusPaths);\n-        componentStore = new ComponentStore(nucleusPaths);\n-        context.put(ComponentStore.class, componentStore);\n         context.put(KernelCommandLine.class, kernelCommandLine);\n         context.put(KernelLifecycle.class, kernelLifecycle);\n         context.put(DeploymentConfigMerger.class, new DeploymentConfigMerger(this));\n"}}, {"oid": "e39e2759f5cc3eb7870231fdf4a33823f6e46870", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e39e2759f5cc3eb7870231fdf4a33823f6e46870", "message": "PR feedback", "committedDate": "2020-10-30T00:06:16Z", "type": "commit"}, {"oid": "6209f1c326baf1c22213b362a32f062da459fc47", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6209f1c326baf1c22213b362a32f062da459fc47", "message": "Merge branch 'master' into secure_plugin", "committedDate": "2020-10-30T01:01:30Z", "type": "commit"}, {"oid": "0314984898f18d970fbfb9199e705b40636063c9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0314984898f18d970fbfb9199e705b40636063c9", "message": "Fix config topic to read", "committedDate": "2020-10-30T05:56:10Z", "type": "commit"}, {"oid": "f5d65dcf877691f1aafc84a3786f59b04b9ca146", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f5d65dcf877691f1aafc84a3786f59b04b9ca146", "message": "Merge branch 'master' into secure_plugin", "committedDate": "2020-10-30T06:25:52Z", "type": "commit"}, {"oid": "145f83f6f80d41699951039af8db1b62e5b8c8b1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/145f83f6f80d41699951039af8db1b62e5b8c8b1", "message": "Fix log", "committedDate": "2020-10-30T06:51:59Z", "type": "commit"}, {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0", "message": "Merge branch 'master' into secure_plugin", "committedDate": "2020-10-30T18:18:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Nzc5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515347792", "bodyText": "instead of using main, let's use the nucleus name\n@shaguptashaikh any preference?", "author": "MikeDombo", "createdAt": "2020-10-30T20:00:36Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/PluginComponentTest.java", "diffHunk": "@@ -251,6 +273,29 @@ private void setupPackageStore() throws IOException, PackagingException, URISynt\n         FileUtils.copyFile(jarFilePath.toFile(), artifactPath1_0_0.toFile());\n     }\n \n+    private void setDigestInConfig() throws IOException, URISyntaxException {\n+        Path localStoreContentPath = Paths.get(getClass().getResource(\"local_store_content\").toURI());\n+        Path recipePath = localStoreContentPath.resolve(\"recipes\");\n+        try (Stream<Path> paths = Files.walk(recipePath)) {\n+                paths.filter(Files::isRegularFile).forEach(path -> {\n+                    try {\n+                        String digest = Digest.calculate(FileUtils.readFileToString(path.toFile()));\n+                        String filename = FilenameUtils.removeExtension(path.getFileName().toString());\n+                        String componentId =\n+                                String.format(\"%s-v%s\", filename.split(\"-\")[0], filename.split(\"-\")[1]);\n+                        kernel.getConfig()\n+                                .lookupTopics(GreengrassService.SERVICES_NAMESPACE_TOPIC,\n+                                        KernelCommandLine.MAIN_SERVICE_NAME,", "originalCommit": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTE0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515409140", "bodyText": "lets revisit this later, need to catch the beta train", "author": "prateek-y", "createdAt": "2020-10-30T22:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Nzc5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTQzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515349434", "bodyText": "remove this, we have a bit too much logging in locate", "author": "MikeDombo", "createdAt": "2020-10-30T20:03:55Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");", "originalCommit": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM2Mjc1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515362754", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-10-30T20:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "f19f8c0681f049078af92df6bd7419665078abaa", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java b/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java\nindex 24ce079e8..582c4d482 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java\n\n@@ -461,22 +461,17 @@ public class Kernel {\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n \n-        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n-                .log(\"Trying to load a custom plugin\");\n-\n-\n-        Topic storedDigest = config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,\n-                GreengrassService.RUNTIME_STORE_NAMESPACE_TOPIC)\n-                .find(SERVICE_DIGEST_TOPIC_KEY, componentId.toString());\n+        Topic storedDigest = config.find(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,\n+                GreengrassService.RUNTIME_STORE_NAMESPACE_TOPIC, SERVICE_DIGEST_TOPIC_KEY, componentId.toString());\n         if (storedDigest == null || storedDigest.getOnce() == null) {\n             logger.atError(\"plugin-load-error\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n                     .log(\"Local external plugin is not supported by this greengrass version\");\n-            throw new ServiceLoadException(\"Custom plugins is not supported\");\n+            throw new ServiceLoadException(\"Custom plugins is not supported by this greengrass version\");\n         }\n         ComponentStore componentStore = context.get(ComponentStore.class);\n         if (!componentStore.validateComponentRecipeDigest(componentId, Coerce.toString(storedDigest))) {\n             logger.atError(\"plugin-load-error\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n-                    .log(\"Local plugin is not supported by this greengrass version\");\n+                    .log(\"Local plugin does not match the version in cloud!!\");\n             throw new ServiceLoadException(\"Plugin has been modified after it was downloaded\");\n         }\n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515349995", "bodyText": "use findTopics otherwise this will create the topic", "author": "MikeDombo", "createdAt": "2020-10-30T20:05:16Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");\n+\n+\n+        Topic storedDigest = config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,", "originalCommit": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM2NDQ5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515364492", "bodyText": "I was intentionally trying to create at this point if it does not exist. What do you think the right behavior should be, Since this is part of kernel I was thinking to create runtime topic for main if it doesnt exist.", "author": "prateek-y", "createdAt": "2020-10-30T20:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3MDQzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515370431", "bodyText": "Why do you want to create it? Your purpose is it check if it is set or not.", "author": "MikeDombo", "createdAt": "2020-10-30T20:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3MTA0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515371040", "bodyText": "You should use lookup when you are actually setting the digest, I agree with that", "author": "MikeDombo", "createdAt": "2020-10-30T20:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTA0Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515409046", "bodyText": "updated", "author": "prateek-y", "createdAt": "2020-10-30T22:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f19f8c0681f049078af92df6bd7419665078abaa", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java b/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java\nindex 24ce079e8..582c4d482 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java\n\n@@ -461,22 +461,17 @@ public class Kernel {\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n \n-        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n-                .log(\"Trying to load a custom plugin\");\n-\n-\n-        Topic storedDigest = config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,\n-                GreengrassService.RUNTIME_STORE_NAMESPACE_TOPIC)\n-                .find(SERVICE_DIGEST_TOPIC_KEY, componentId.toString());\n+        Topic storedDigest = config.find(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,\n+                GreengrassService.RUNTIME_STORE_NAMESPACE_TOPIC, SERVICE_DIGEST_TOPIC_KEY, componentId.toString());\n         if (storedDigest == null || storedDigest.getOnce() == null) {\n             logger.atError(\"plugin-load-error\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n                     .log(\"Local external plugin is not supported by this greengrass version\");\n-            throw new ServiceLoadException(\"Custom plugins is not supported\");\n+            throw new ServiceLoadException(\"Custom plugins is not supported by this greengrass version\");\n         }\n         ComponentStore componentStore = context.get(ComponentStore.class);\n         if (!componentStore.validateComponentRecipeDigest(componentId, Coerce.toString(storedDigest))) {\n             logger.atError(\"plugin-load-error\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n-                    .log(\"Local plugin is not supported by this greengrass version\");\n+                    .log(\"Local plugin does not match the version in cloud!!\");\n             throw new ServiceLoadException(\"Plugin has been modified after it was downloaded\");\n         }\n         \n"}}, {"oid": "a53d6feabb05a6692b87533d5bb570c82ac19d0a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a53d6feabb05a6692b87533d5bb570c82ac19d0a", "message": "Merge branch 'master' into secure_plugin", "committedDate": "2020-10-30T20:36:35Z", "type": "commit"}, {"oid": "f19f8c0681f049078af92df6bd7419665078abaa", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f19f8c0681f049078af92df6bd7419665078abaa", "message": "Modify log statements", "committedDate": "2020-10-30T22:25:14Z", "type": "commit"}, {"oid": "75340f341645edae640a6f98f1e6b0ac7119e7dd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/75340f341645edae640a6f98f1e6b0ac7119e7dd", "message": "Merge branch 'master' into secure_plugin", "committedDate": "2020-10-30T22:51:44Z", "type": "commit"}, {"oid": "4fc78a9b21c44d1094a704b50b3b410bf0216658", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4fc78a9b21c44d1094a704b50b3b410bf0216658", "message": "Merge branch 'master' into secure_plugin", "committedDate": "2020-10-30T23:48:01Z", "type": "commit"}]}