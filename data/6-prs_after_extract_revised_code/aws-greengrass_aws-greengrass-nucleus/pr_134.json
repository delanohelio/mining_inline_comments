{"pr_number": 134, "pr_title": "Fix addDependency() behavior", "pr_createdAt": "2020-03-24T22:19:55Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5OTkxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r397499910", "bodyText": "I think it would be safe to change this method signature to provide the whole dependency info.", "author": "MikeDombo", "createdAt": "2020-03-24T22:27:56Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -916,7 +930,8 @@ protected void addDependencies(HashSet<EvergreenService> deps) {\n     }\n \n     public Map<EvergreenService, State> getDependencies() {\n-        return dependencies;\n+        return dependencies.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().startWhen));", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjU3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r397502570", "bodyText": "getdependencies() is called in DA a lot. Modifying it here can affect many ongoing PR now", "author": "ShirleyZheng92", "createdAt": "2020-03-24T22:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNTY0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398035645", "bodyText": "Hah we are thinking about the same thing. I'm confused when reading through unit tests and wondering why getDependencies.get(service) returns a State?\nI agree we could change it right after other PRs merged in. Just leave a TODO.", "author": "leaf94", "createdAt": "2020-03-25T17:24:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1ODM1Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398058356", "bodyText": "Because getDependencies() returns a Map<EvergreenService, State> . I can add a TODO here", "author": "ShirleyZheng92", "createdAt": "2020-03-25T17:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5OTkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -929,6 +947,7 @@ public class EvergreenService implements InjectionActions {\n         });\n     }\n \n+    //TODO: return the entire dependency info\n     public Map<EvergreenService, State> getDependencies() {\n         return dependencies.entrySet().stream()\n                 .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().startWhen));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNTY5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398015694", "bodyText": "Sorry for not asking this yesterday... What problem are we trying to solve here?\nCould we simplify this by ensuring Kernel always starting all @ImplementService first, and shutdown @ImplementService at the end, so that each evergreen service doesn't have to deal with the complexity?", "author": "leaf94", "createdAt": "2020-03-25T16:58:00Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NzYwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398057607", "bodyText": "I feel it's hard to do so. All services are intialized when called EvergreenService.locate() . Before that point Kernel have no idea if this is an @ImplementService or a genericExternalService.", "author": "ShirleyZheng92", "createdAt": "2020-03-25T17:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNTY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MjM2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398162368", "bodyText": "Discussed offline. If we decide to move 'autoStart' services out of the 'main' dependency tree , then isDefault probably isn't necessary for now. currently all @ImplementService are autoStart.", "author": "ShirleyZheng92", "createdAt": "2020-03-25T20:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNTY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -699,20 +716,20 @@ public class EvergreenService implements InjectionActions {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n-            if (oldValue == null) {\n+        dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n+            if (dependencyInfo == null) {\n                 Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n                 dependentEvergreenService.getStateTopic().subscribe(subscriber);\n                 context.get(Kernel.class).clearODcache();\n                 this.requestRestart();\n                 return new DependencyInfo(when, isDefault, subscriber);\n             }\n-            ov.startWhen = when;\n+            dependencyInfo.startWhen = when;\n             // if a dependency is added as both a default and a non-default, treat it as default dependency\n-            if (!ov.isDefaultDependency) {\n-                ov.isDefaultDependency = isDefault;\n+            if (!dependencyInfo.isDefaultDependency) {\n+                dependencyInfo.isDefaultDependency = isDefault;\n             }\n-            return ov;\n+            return dependencyInfo;\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNjE0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398016144", "bodyText": "[Minor] I think ov here breaks 0. 0", "author": "leaf94", "createdAt": "2020-03-25T16:58:32Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n+            if (oldValue == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();\n+                return new DependencyInfo(when, isDefault, subscriber);\n+            }\n+            ov.startWhen = when;", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1OTEwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398059108", "bodyText": "hmm. I was relying on intellij refactor too much.", "author": "ShirleyZheng92", "createdAt": "2020-03-25T17:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNjE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -699,20 +716,20 @@ public class EvergreenService implements InjectionActions {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n-            if (oldValue == null) {\n+        dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n+            if (dependencyInfo == null) {\n                 Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n                 dependentEvergreenService.getStateTopic().subscribe(subscriber);\n                 context.get(Kernel.class).clearODcache();\n                 this.requestRestart();\n                 return new DependencyInfo(when, isDefault, subscriber);\n             }\n-            ov.startWhen = when;\n+            dependencyInfo.startWhen = when;\n             // if a dependency is added as both a default and a non-default, treat it as default dependency\n-            if (!ov.isDefaultDependency) {\n-                ov.isDefaultDependency = isDefault;\n+            if (!dependencyInfo.isDefaultDependency) {\n+                dependencyInfo.isDefaultDependency = isDefault;\n             }\n-            return ov;\n+            return dependencyInfo;\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNzcwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398017705", "bodyText": "oldValue is better than ov! I'd even go with\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n          \n          \n            \n                    dependencies.compute(newDependentService, (dependentService, dependencyInfo) -> {", "author": "leaf94", "createdAt": "2020-03-25T17:00:44Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -699,20 +716,20 @@ public class EvergreenService implements InjectionActions {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n-            if (oldValue == null) {\n+        dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n+            if (dependencyInfo == null) {\n                 Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n                 dependentEvergreenService.getStateTopic().subscribe(subscriber);\n                 context.get(Kernel.class).clearODcache();\n                 this.requestRestart();\n                 return new DependencyInfo(when, isDefault, subscriber);\n             }\n-            ov.startWhen = when;\n+            dependencyInfo.startWhen = when;\n             // if a dependency is added as both a default and a non-default, treat it as default dependency\n-            if (!ov.isDefaultDependency) {\n-                ov.isDefaultDependency = isDefault;\n+            if (!dependencyInfo.isDefaultDependency) {\n+                dependencyInfo.isDefaultDependency = isDefault;\n             }\n-            return ov;\n+            return dependencyInfo;\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMTI1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398021257", "bodyText": "Am I right that this will make service restart multiple times when kernel initially add dependencies to the service? Although that might be fine if our requestRestart is smart enough", "author": "leaf94", "createdAt": "2020-03-25T17:05:32Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n+            if (oldValue == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NTE1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398055159", "bodyText": "Yes. requestRestart() have the deduplicate logic though.", "author": "ShirleyZheng92", "createdAt": "2020-03-25T17:53:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMTI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -699,20 +716,20 @@ public class EvergreenService implements InjectionActions {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n-            if (oldValue == null) {\n+        dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n+            if (dependencyInfo == null) {\n                 Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n                 dependentEvergreenService.getStateTopic().subscribe(subscriber);\n                 context.get(Kernel.class).clearODcache();\n                 this.requestRestart();\n                 return new DependencyInfo(when, isDefault, subscriber);\n             }\n-            ov.startWhen = when;\n+            dependencyInfo.startWhen = when;\n             // if a dependency is added as both a default and a non-default, treat it as default dependency\n-            if (!ov.isDefaultDependency) {\n-                ov.isDefaultDependency = isDefault;\n+            if (!dependencyInfo.isDefaultDependency) {\n+                dependencyInfo.isDefaultDependency = isDefault;\n             }\n-            return ov;\n+            return dependencyInfo;\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTMwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398029305", "bodyText": "How about moving this to a putIfAbsent so that it is easier to read?", "author": "leaf94", "createdAt": "2020-03-25T17:16:05Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n+            if (oldValue == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();\n+                return new DependencyInfo(when, isDefault, subscriber);\n+            }", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NDYzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398054633", "bodyText": "computeIfAbsent is more atomic, although this function is already synchronized on the object", "author": "ShirleyZheng92", "createdAt": "2020-03-25T17:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MTkyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398081927", "bodyText": "I mean it is more straightforward because this if branch is effectively doing computeIfAbsent", "author": "leaf94", "createdAt": "2020-03-25T18:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDA4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398164087", "bodyText": "I'd still prefer computeIfAbsent, in this case adding state topic subscriber is executed only once per service.", "author": "ShirleyZheng92", "createdAt": "2020-03-25T20:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNTU3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398215573", "bodyText": "Ignore the putIfAbsent. I mean I prefer computeIfAbsent but we are using compute here...", "author": "leaf94", "createdAt": "2020-03-25T22:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -699,20 +716,20 @@ public class EvergreenService implements InjectionActions {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n-            if (oldValue == null) {\n+        dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n+            if (dependencyInfo == null) {\n                 Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n                 dependentEvergreenService.getStateTopic().subscribe(subscriber);\n                 context.get(Kernel.class).clearODcache();\n                 this.requestRestart();\n                 return new DependencyInfo(when, isDefault, subscriber);\n             }\n-            ov.startWhen = when;\n+            dependencyInfo.startWhen = when;\n             // if a dependency is added as both a default and a non-default, treat it as default dependency\n-            if (!ov.isDefaultDependency) {\n-                ov.isDefaultDependency = isDefault;\n+            if (!dependencyInfo.isDefaultDependency) {\n+                dependencyInfo.isDefaultDependency = isDefault;\n             }\n-            return ov;\n+            return dependencyInfo;\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTg3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398029873", "bodyText": "I personally like this level of encapsulation  a lot!", "author": "leaf94", "createdAt": "2020-03-25T17:16:49Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n+            if (oldValue == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();\n+                return new DependencyInfo(when, isDefault, subscriber);\n+            }\n+            ov.startWhen = when;\n+            // if a dependency is added as both a default and a non-default, treat it as default dependency\n+            if (!ov.isDefaultDependency) {\n+                ov.isDefaultDependency = isDefault;\n+            }\n+            return ov;\n+        });\n+    }\n \n-        dependentEvergreenService.getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n+    private Subscriber createDependencySubscriber(EvergreenService dependentEvergreenService) {", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -699,20 +716,20 @@ public class EvergreenService implements InjectionActions {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n-            if (oldValue == null) {\n+        dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n+            if (dependencyInfo == null) {\n                 Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n                 dependentEvergreenService.getStateTopic().subscribe(subscriber);\n                 context.get(Kernel.class).clearODcache();\n                 this.requestRestart();\n                 return new DependencyInfo(when, isDefault, subscriber);\n             }\n-            ov.startWhen = when;\n+            dependencyInfo.startWhen = when;\n             // if a dependency is added as both a default and a non-default, treat it as default dependency\n-            if (!ov.isDefaultDependency) {\n-                ov.isDefaultDependency = isDefault;\n+            if (!dependencyInfo.isDefaultDependency) {\n+                dependencyInfo.isDefaultDependency = isDefault;\n             }\n-            return ov;\n+            return dependencyInfo;\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMTU2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398031565", "bodyText": "[minor] Maybe rename the when to startWhen so that it is consistent with DependencyInfo", "author": "leaf94", "createdAt": "2020-03-25T17:19:07Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2ODM5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398168399", "bodyText": "Missed this :)", "author": "leaf94", "createdAt": "2020-03-25T21:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMTU2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -699,20 +716,20 @@ public class EvergreenService implements InjectionActions {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n-            if (oldValue == null) {\n+        dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n+            if (dependencyInfo == null) {\n                 Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n                 dependentEvergreenService.getStateTopic().subscribe(subscriber);\n                 context.get(Kernel.class).clearODcache();\n                 this.requestRestart();\n                 return new DependencyInfo(when, isDefault, subscriber);\n             }\n-            ov.startWhen = when;\n+            dependencyInfo.startWhen = when;\n             // if a dependency is added as both a default and a non-default, treat it as default dependency\n-            if (!ov.isDefaultDependency) {\n-                ov.isDefaultDependency = isDefault;\n+            if (!dependencyInfo.isDefaultDependency) {\n+                dependencyInfo.isDefaultDependency = isDefault;\n             }\n-            return ov;\n+            return dependencyInfo;\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMTkxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398031910", "bodyText": "primitive boolean if it can't be null", "author": "leaf94", "createdAt": "2020-03-25T17:19:38Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -940,4 +955,12 @@ public boolean isClosed() {\n         return isClosed.get();\n     }\n \n+    @AllArgsConstructor\n+    protected static class DependencyInfo {\n+        // starting at which state when the dependency is considered Ready. Default to be RUNNING.\n+        State startWhen;\n+        // true if the dependency isn't explicitly declared in config\n+        Boolean isDefaultDependency;", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -960,7 +979,7 @@ public class EvergreenService implements InjectionActions {\n         // starting at which state when the dependency is considered Ready. Default to be RUNNING.\n         State startWhen;\n         // true if the dependency isn't explicitly declared in config\n-        Boolean isDefaultDependency;\n+        boolean isDefaultDependency;\n         Subscriber stateTopicSubscriber;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNTc2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398035760", "bodyText": "Very very clean.", "author": "leaf94", "createdAt": "2020-03-25T17:25:07Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import java.util.Map;\n+\n+import com.aws.iot.evergreen.config.Subscriber;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+public class SetupDependencyTest extends EGServiceTestUtil {\n+\n+    private EvergreenService evergreenService;\n+\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        evergreenService = new EvergreenService(initializeMockedConfig());\n+        evergreenService.context = context;\n+        Kernel mockKernel = Mockito.mock(Kernel.class);\n+        Mockito.when(context.get(Kernel.class)).thenReturn(mockKernel);\n+    }\n+\n+    @Test\n+    void GIVEN_no_dependencies_added_WHEN_dependency_is_added_THEN_dependency_add_successful() throws Exception {\n+        // GIVEN\n+        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n+        Topic depStateTopic = Mockito.mock(Topic.class);\n+        Mockito.when(depStateTopic.subscribe(Mockito.any(Subscriber.class))).thenReturn(depStateTopic);\n+        Mockito.when(dep1.getStateTopic()).thenReturn(depStateTopic);\n+\n+        // WHEN\n+        evergreenService.addDependency(dep1, State.INSTALLED, false);\n+\n+        // THEN\n+        Map<EvergreenService, State> dependencies = evergreenService.getDependencies();\n+        // verify dependency added\n+        Assertions.assertEquals(1, dependencies.size());\n+        Assertions.assertEquals(State.INSTALLED, dependencies.get(dep1));\n+    }", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b087e099de2f316956d903f7a0d65f95343da41", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java b/src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java\nindex 83f26d2b..1fe5c781 100644\n--- a/src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java\n\n@@ -33,7 +33,7 @@ public class SetupDependencyTest extends EGServiceTestUtil {\n         Mockito.when(dep1.getStateTopic()).thenReturn(depStateTopic);\n \n         // WHEN\n-        evergreenService.addDependency(dep1, State.INSTALLED, false);\n+        evergreenService.addOrUpdateDependency(dep1, State.INSTALLED, false);\n \n         // THEN\n         Map<EvergreenService, State> dependencies = evergreenService.getDependencies();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzODk1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398038951", "bodyText": "Should we use node in the subscriber ?", "author": "leaf94", "createdAt": "2020-03-25T17:29:43Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -250,11 +255,11 @@ private Topic initStateTopic(final Topics topics) {\n     }\n \n     private synchronized void initDependenciesTopic() {\n-        dependenciesTopic.subscribe((what, node) -> {\n+        externalDependenciesTopic.subscribe((what, node) -> {\n             if (!WhatHappened.changed.equals(what)) {\n                 return;\n             }\n-            Iterable<String> depList = (Iterable<String>) dependenciesTopic.getOnce();\n+            Iterable<String> depList = (Iterable<String>) externalDependenciesTopic.getOnce();", "originalCommit": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 68073e39..4042f036 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -260,8 +259,7 @@ public class EvergreenService implements InjectionActions {\n                 return;\n             }\n             Iterable<String> depList = (Iterable<String>) externalDependenciesTopic.getOnce();\n-            logger.atInfo().log(\"Setting up dependencies again\",\n-                                String.join(\",\", depList));\n+            logger.atInfo().log(\"Setting up dependencies again\", String.join(\",\", depList));\n             try {\n                 setupDependencies(depList);\n             } catch (Exception e) {\n"}}, {"oid": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "message": "Fix addDependency() behavior\n\n1. When a dependency is added, don't add the state listener multiple times.\n1. When a dependency is removed, remove dependency state listener.\n1. Don't update the dependency topic in addDependency() invocation.\n dependencyTopic only track customer provided config store.", "committedDate": "2020-03-25T18:15:16Z", "type": "commit"}, {"oid": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "message": "Fix addDependency() behavior\n\n1. When a dependency is added, don't add the state listener multiple times.\n1. When a dependency is removed, remove dependency state listener.\n1. Don't update the dependency topic in addDependency() invocation.\n dependencyTopic only track customer provided config store.", "committedDate": "2020-03-25T18:15:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2ODMwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398168301", "bodyText": "[minor] change to node here as well", "author": "leaf94", "createdAt": "2020-03-25T21:04:31Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -263,7 +268,7 @@ private synchronized void initDependenciesTopic() {\n         });\n \n         try {\n-            setupDependencies((Iterable<String>) dependenciesTopic.getOnce());\n+            setupDependencies((Iterable<String>) externalDependenciesTopic.getOnce());", "originalCommit": "16164f45ae6cfe6d0d2d6b36de91bee5d2987f68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyMTkyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398221923", "bodyText": "This is outside the subscriber. Doesn't have access to Node", "author": "ShirleyZheng92", "createdAt": "2020-03-25T23:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2ODMwMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "169cd689a0697f66828b90f166762b00e113328a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/169cd689a0697f66828b90f166762b00e113328a", "message": "Address comments", "committedDate": "2020-03-25T23:06:42Z", "type": "commit"}, {"oid": "169cd689a0697f66828b90f166762b00e113328a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/169cd689a0697f66828b90f166762b00e113328a", "message": "Address comments", "committedDate": "2020-03-25T23:06:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0NzEzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398247139", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n          \n          \n            \n                        if (dependencyInfo == null) {\n          \n          \n            \n                            Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n          \n          \n            \n                            dependentEvergreenService.getStateTopic().subscribe(subscriber);\n          \n          \n            \n                            context.get(Kernel.class).clearODcache();\n          \n          \n            \n                            this.requestRestart();\n          \n          \n            \n                            return new DependencyInfo(startWhen, isDefault, subscriber);\n          \n          \n            \n                        }\n          \n          \n            \n                        dependencyInfo.startWhen = startWhen;\n          \n          \n            \n                        // if a dependency is added as both a default and a non-default, treat it as default dependency\n          \n          \n            \n                        if (!dependencyInfo.isDefaultDependency) {\n          \n          \n            \n                            dependencyInfo.isDefaultDependency = isDefault;\n          \n          \n            \n                        }\n          \n          \n            \n                        return dependencyInfo;\n          \n          \n            \n                    });\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                     // update if exists\n          \n          \n            \n                    dependencies.computeIfPresent(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n          \n          \n            \n                        dependencyInfo.startWhen = when;\n          \n          \n            \n                        // if a dependency is added as both a default and a non-default, treat it as default dependency\n          \n          \n            \n                        if (!dependencyInfo.isDefaultDependency) {\n          \n          \n            \n                            dependencyInfo.isDefaultDependency = isDefault;\n          \n          \n            \n                        }\n          \n          \n            \n                        return dependencyInfo;\n          \n          \n            \n                    });\n          \n          \n            \n                    \n          \n          \n            \n                    // if doesn't exist, add it and restart service.\n          \n          \n            \n                     dependencies.computeIfAbsent(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n          \n          \n            \n                            Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n          \n          \n            \n                            dependentEvergreenService.getStateTopic().subscribe(subscriber);\n          \n          \n            \n                            context.get(Kernel.class).clearODcache();\n          \n          \n            \n                            this.requestRestart();\n          \n          \n            \n                            return new DependencyInfo(when, isDefault, subscriber);\n          \n          \n            \n                        }", "author": "leaf94", "createdAt": "2020-03-26T00:17:20Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -699,27 +704,38 @@ public Context getContext() {\n      * Add a dependency.\n      *\n      * @param dependentEvergreenService the service to add as a dependency.\n-     * @param when                      the state that the dependent service must be in before starting the current\n+     * @param startWhen                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(\n+            EvergreenService dependentEvergreenService, State startWhen, boolean isDefault)\n             throws InputValidationException {\n-        if (dependentEvergreenService == null || when == null) {\n+        if (dependentEvergreenService == null || startWhen == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n+            if (dependencyInfo == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();\n+                return new DependencyInfo(startWhen, isDefault, subscriber);\n+            }\n+            dependencyInfo.startWhen = startWhen;\n+            // if a dependency is added as both a default and a non-default, treat it as default dependency\n+            if (!dependencyInfo.isDefaultDependency) {\n+                dependencyInfo.isDefaultDependency = isDefault;\n+            }\n+            return dependencyInfo;\n+        });\n+    }", "originalCommit": "169cd689a0697f66828b90f166762b00e113328a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6cda72803476df1a31161e42ce983a32a236fbae", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 619bad6a..242b95e5 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -722,15 +722,15 @@ public class EvergreenService implements InjectionActions {\n                 Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n                 dependentEvergreenService.getStateTopic().subscribe(subscriber);\n                 context.get(Kernel.class).clearODcache();\n-                this.requestRestart();\n                 return new DependencyInfo(startWhen, isDefault, subscriber);\n+            } else {\n+                dependencyInfo.startWhen = startWhen;\n+                // if a dependency is added as both a default and a non-default, treat it as default dependency\n+                if (!dependencyInfo.isDefaultDependency) {\n+                    dependencyInfo.isDefaultDependency = isDefault;\n+                }\n+                return dependencyInfo;\n             }\n-            dependencyInfo.startWhen = startWhen;\n-            // if a dependency is added as both a default and a non-default, treat it as default dependency\n-            if (!dependencyInfo.isDefaultDependency) {\n-                dependencyInfo.isDefaultDependency = isDefault;\n-            }\n-            return dependencyInfo;\n         });\n     }\n \n"}}, {"oid": "6cda72803476df1a31161e42ce983a32a236fbae", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6cda72803476df1a31161e42ce983a32a236fbae", "message": "Address comments", "committedDate": "2020-03-26T01:15:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2NTE5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398265190", "bodyText": "With what we are doing now, addOrUpdateDependency would be more appropriate!", "author": "leaf94", "createdAt": "2020-03-26T01:24:02Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -699,27 +704,38 @@ public Context getContext() {\n      * Add a dependency.\n      *\n      * @param dependentEvergreenService the service to add as a dependency.\n-     * @param when                      the state that the dependent service must be in before starting the current\n+     * @param startWhen                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(", "originalCommit": "6cda72803476df1a31161e42ce983a32a236fbae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b087e099de2f316956d903f7a0d65f95343da41", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 242b95e5..a78aa78c 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -710,7 +730,7 @@ public class EvergreenService implements InjectionActions {\n      *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(\n+    public synchronized void addOrUpdateDependency(\n             EvergreenService dependentEvergreenService, State startWhen, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || startWhen == null) {\n"}}, {"oid": "4f81389bee9f57d28cb6c40631ff991676cd37c7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4f81389bee9f57d28cb6c40631ff991676cd37c7", "message": "Merge branch 'master' into fixDependencyTopic", "committedDate": "2020-03-26T16:55:06Z", "type": "commit"}, {"oid": "1b087e099de2f316956d903f7a0d65f95343da41", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1b087e099de2f316956d903f7a0d65f95343da41", "message": "Address comments", "committedDate": "2020-03-26T17:39:55Z", "type": "commit"}]}