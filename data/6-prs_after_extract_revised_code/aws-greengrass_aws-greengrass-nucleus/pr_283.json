{"pr_number": 283, "pr_title": "Group deployments", "pr_createdAt": "2020-06-17T03:10:49Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NDM0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r441264340", "bodyText": "do we actually need the kernel, or just the config? Looks like maybe just the config.", "author": "MikeDombo", "createdAt": "2020-06-17T03:48:28Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -45,7 +50,17 @@ public DeploymentResult call()\n \n             // TODO: DA compute list of all root level packages by looking across root level packages\n             // of all groups, when multi group support is added.\n+\n             List<String> rootPackages = new ArrayList<>(deploymentDocument.getRootPackages());\n+            Topics groupsToRootPackages = kernel.getConfig().lookupTopics(", "originalCommit": "7a23fe2a07562f36fa3d8d064bb94dc7fb98164a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyNzMxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r444527314", "bodyText": "Using config now", "author": "abanthiy", "createdAt": "2020-06-23T21:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NDM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "706cf535b173652917a0b3d4971ea21470d8f172", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\nindex 24646def6e..29531ec054 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n\n@@ -52,9 +49,7 @@ public class DeploymentTask implements Callable<DeploymentResult> {\n             // of all groups, when multi group support is added.\n \n             List<String> rootPackages = new ArrayList<>(deploymentDocument.getRootPackages());\n-            Topics groupsToRootPackages = kernel.getConfig().lookupTopics(\n-                    SERVICES_NAMESPACE_TOPIC,\n-                    DeploymentService.DEPLOYMENT_SERVICE_TOPICS,\n+            Topics groupsToRootPackages = deploymentServiceConfig.lookupTopics(\n                     DeploymentService.GROUP_TO_ROOT_PACKAGES_TOPICS);\n             groupsToRootPackages.deepForEachTopic(t -> {\n                 if (!t.getName().equals(deploymentDocument.getGroupName())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODIyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r441268227", "bodyText": "use StandardCharsets", "author": "MikeDombo", "createdAt": "2020-06-17T04:05:28Z", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -17,6 +20,7 @@\n import com.aws.iot.evergreen.packagemanager.PackageManager;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import org.apache.commons.codec.Charsets;", "originalCommit": "7a23fe2a07562f36fa3d8d064bb94dc7fb98164a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyNzIxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r444527216", "bodyText": "Done", "author": "abanthiy", "createdAt": "2020-06-23T21:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "b3d9784b814585cd31811fa935d69d30b20a9ca5", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java b/src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java\nindex f44b1b8d84..50af174f24 100644\n--- a/src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java\n\n@@ -20,7 +20,6 @@ import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n import com.aws.iot.evergreen.packagemanager.PackageManager;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n-import org.apache.commons.codec.Charsets;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Nested;\n"}}, {"oid": "706cf535b173652917a0b3d4971ea21470d8f172", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/706cf535b173652917a0b3d4971ea21470d8f172", "message": "Adding multiple group support", "committedDate": "2020-06-17T04:56:40Z", "type": "forcePushed"}, {"oid": "b3d9784b814585cd31811fa935d69d30b20a9ca5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b3d9784b814585cd31811fa935d69d30b20a9ca5", "message": "Adding multiple group support", "committedDate": "2020-06-17T05:16:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MDA2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r442440065", "bodyText": "All comments need to be updated.", "author": "hui-yang", "createdAt": "2020-06-18T19:02:34Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleGroupsDeploymentE2ETest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.amazonaws.services.greengrassfleetconfiguration.model.FailureHandlingPolicy;\n+import com.amazonaws.services.greengrassfleetconfiguration.model.PackageMetaData;\n+import com.amazonaws.services.greengrassfleetconfiguration.model.PublishConfigurationResult;\n+import com.amazonaws.services.greengrassfleetconfiguration.model.SetConfigurationRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeploymentService;\n+import com.aws.iot.evergreen.integrationtests.e2e.BaseE2ETestCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.IotJobsUtils;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import software.amazon.awssdk.services.iot.model.CreateThingGroupResponse;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.github.grantwest.eventually.EventuallyLambdaMatcher.eventuallyEval;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@ExtendWith(EGExtension.class)\n+@Tag(\"E2E\")\n+class MultipleGroupsDeploymentE2ETest extends BaseE2ETestCase {\n+\n+    private final CreateThingGroupResponse secondThingGroupResponse;\n+\n+    public MultipleGroupsDeploymentE2ETest() {\n+        super();\n+        secondThingGroupResponse = IotJobsUtils.createThingGroupAndAddThing(iotClient, thingInfo);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+        // Cleanup all IoT thing resources we created\n+        cleanup();\n+        IotJobsUtils.cleanThingGroup(iotClient, secondThingGroupResponse.thingGroupName());\n+    }\n+\n+    @BeforeEach\n+    void launchKernel() throws Exception {\n+        initKernel();\n+        kernel.launch();\n+\n+        // TODO: Without this sleep, DeploymentService sometimes is not able to pick up new IoT job created here,\n+        // causing these tests to fail. There may be a race condition between DeploymentService startup logic and\n+        // creating new IoT job here.\n+        Thread.sleep(10_000);\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful() throws Exception {\n+\n+        // First Deployment to have some services running in Kernel which can be removed later", "originalCommit": "b3d9784b814585cd31811fa935d69d30b20a9ca5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1ebdecc7b2d2217f58ab303f1f13d6a18d7e996", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleGroupsDeploymentE2ETest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleGroupsDeploymentE2ETest.java\nindex 77d0945756..bfbfe6a48e 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleGroupsDeploymentE2ETest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleGroupsDeploymentE2ETest.java\n\n@@ -5,13 +5,14 @@\n \n package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n \n-import com.amazonaws.services.greengrassfleetconfiguration.model.FailureHandlingPolicy;\n-import com.amazonaws.services.greengrassfleetconfiguration.model.PackageMetaData;\n-import com.amazonaws.services.greengrassfleetconfiguration.model.PublishConfigurationResult;\n-import com.amazonaws.services.greengrassfleetconfiguration.model.SetConfigurationRequest;\n+import com.amazonaws.services.evergreen.model.FailureHandlingPolicy;\n+import com.amazonaws.services.evergreen.model.PackageMetaData;\n+import com.amazonaws.services.evergreen.model.PublishConfigurationResult;\n+import com.amazonaws.services.evergreen.model.SetConfigurationRequest;\n import com.aws.iot.evergreen.config.Topics;\n import com.aws.iot.evergreen.dependency.State;\n import com.aws.iot.evergreen.deployment.DeploymentService;\n+import com.aws.iot.evergreen.deployment.exceptions.NonRetryableDeploymentTaskFailureException;\n import com.aws.iot.evergreen.integrationtests.e2e.BaseE2ETestCase;\n import com.aws.iot.evergreen.integrationtests.e2e.util.IotJobsUtils;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjE5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r442442194", "bodyText": "Rename packages to components.\nIs this only persisting component name? What about version requirements (instead of the device resolved version)?\nIn fleet config, customers can specify version ranges for non-root components as well. Do we want to persist those components with version requirements as well?\nI remember we also want to keep a reference count for non-root components, so we know when to clean up unused dependencies", "author": "hui-yang", "createdAt": "2020-06-18T19:06:44Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -43,10 +46,14 @@\n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import static com.aws.iot.evergreen.deployment.converter.DeploymentDocumentConverter.DEFAULT_GROUP_NAME;\n+import static com.aws.iot.evergreen.packagemanager.KernelConfigResolver.VERSION_CONFIG_KEY;\n+\n @ImplementsService(name = \"DeploymentService\", autostart = true)\n public class DeploymentService extends EvergreenService {\n \n     public static final String DEPLOYMENT_SERVICE_TOPICS = \"DeploymentService\";\n+    public static final String GROUP_TO_ROOT_PACKAGES_TOPICS = \"GroupToRootPackages\";", "originalCommit": "b3d9784b814585cd31811fa935d69d30b20a9ca5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MjIyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r442452223", "bodyText": "1 - Agree\n2, 3, 4 - What are the use cases for which you suggest these? Lets discuss.", "author": "abanthiy", "createdAt": "2020-06-18T19:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MjkyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r442542920", "bodyText": "Synced offline. Equivalents of 2 and 3 are being implemented. 4 is irrelevant since we do full resolution on all components.", "author": "hui-yang", "createdAt": "2020-06-18T22:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "b14635e6b0fd7f7003ae309bbb747ec520bae7f9", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\nindex af2ec72fc5..4b6c8ed7cb 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n\n@@ -53,7 +55,7 @@ import static com.aws.iot.evergreen.packagemanager.KernelConfigResolver.VERSION_\n public class DeploymentService extends EvergreenService {\n \n     public static final String DEPLOYMENT_SERVICE_TOPICS = \"DeploymentService\";\n-    public static final String GROUP_TO_ROOT_PACKAGES_TOPICS = \"GroupToRootPackages\";\n+    public static final String GROUP_TO_ROOT_COMPONENTS_TOPICS = \"GroupToRootComponents\";\n \n     protected static final String DEPLOYMENTS_QUEUE = \"deploymentsQueue\";\n     protected static final ObjectMapper OBJECT_MAPPER =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0NDA0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r442444040", "bodyText": "I believe either this method or public DeploymentDocument(FleetConfiguration config) should be sufficient. Consolidate to one?", "author": "hui-yang", "createdAt": "2020-06-18T19:10:34Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -58,7 +64,46 @@ public static DeploymentDocument convertFromLocalOverrideRequestAndRoot(LocalOve\n \n         return DeploymentDocument.builder().timestamp(localOverrideRequest.getRequestTimestamp())\n                 .deploymentId(localOverrideRequest.getRequestId()).rootPackages(rootPackages)\n-                .deploymentPackageConfigurationList(packageConfigurations).build();\n+                .deploymentPackageConfigurationList(packageConfigurations)\n+                .groupName(StringUtils.isEmpty(localOverrideRequest.getGroupName()) ? DEFAULT_GROUP_NAME\n+                        : localOverrideRequest.getGroupName()).build();\n+    }\n+\n+    /**\n+     * Convert {@link FleetConfiguration} to a {@link DeploymentDocument}.\n+     * @param config config received from Iot cloud\n+     * @return equivalent {@link DeploymentDocument}\n+     */\n+    public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguration config) {", "originalCommit": "b3d9784b814585cd31811fa935d69d30b20a9ca5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MjQ4OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r442452489", "bodyText": "I plan to remove the other one", "author": "abanthiy", "createdAt": "2020-06-18T19:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0NDA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyNzM4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r444527383", "bodyText": "Removed", "author": "abanthiy", "createdAt": "2020-06-23T21:46:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0NDA0MA=="}], "type": "inlineReview", "revised_code": {"commit": "e1ebdecc7b2d2217f58ab303f1f13d6a18d7e996", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/converter/DeploymentDocumentConverter.java b/src/main/java/com/aws/iot/evergreen/deployment/converter/DeploymentDocumentConverter.java\nindex c4990c6971..889ce6135e 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/converter/DeploymentDocumentConverter.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/converter/DeploymentDocumentConverter.java\n\n@@ -101,7 +101,8 @@ public final class DeploymentDocumentConverter {\n                 deploymentDocument.getRootPackages().add(pkgName);\n             }\n             deploymentDocument.getDeploymentPackageConfigurationList()\n-                    .add(new DeploymentPackageConfiguration(pkgName, pkgInfo.getVersion(), pkgInfo.getConfiguration()));\n+                    .add(new DeploymentPackageConfiguration(pkgName, pkgInfo.isRootComponent(), pkgInfo.getVersion(),\n+                            pkgInfo.getConfiguration()));\n         }\n         return deploymentDocument;\n     }\n"}}, {"oid": "e1ebdecc7b2d2217f58ab303f1f13d6a18d7e996", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e1ebdecc7b2d2217f58ab303f1f13d6a18d7e996", "message": "Adding multiple group support", "committedDate": "2020-06-19T21:47:43Z", "type": "forcePushed"}, {"oid": "b14635e6b0fd7f7003ae309bbb747ec520bae7f9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b14635e6b0fd7f7003ae309bbb747ec520bae7f9", "message": "Adding multiple group support", "committedDate": "2020-06-19T21:54:25Z", "type": "forcePushed"}, {"oid": "802640c3a19c3c8ef2e5942e39a69b44cb303ae5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/802640c3a19c3c8ef2e5942e39a69b44cb303ae5", "message": "Adding multiple group support", "committedDate": "2020-06-20T02:03:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NTQ5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r443785494", "bodyText": "Should we compare timestamp here?", "author": "hui-yang", "createdAt": "2020-06-22T19:44:15Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -260,6 +268,24 @@ private void createNewDeployment(Deployment deployment) {\n             logger.atInfo().kv(\"document\", deployment.getDeploymentDocument())\n                     .log(\"Received deployment document in queue\");\n             deploymentDocument = parseAndValidateJobDocument(deployment);\n+            Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n+            logger.atInfo().log(\"Group to root components: \" + groupToRootPackages.toPOJO().toString());\n+            //clean up any package info for the group in deployment document\n+            Topics deploymentGroupTopics = groupToRootPackages.findTopics(deploymentDocument.getGroupName());\n+            if (deploymentGroupTopics != null) {\n+                logger.atInfo().log(\"Removing the node from group to root packages mapping\");\n+                groupToRootPackages.remove(deploymentGroupTopics);\n+            }", "originalCommit": "802640c3a19c3c8ef2e5942e39a69b44cb303ae5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27830bd9003b332d320e654a28d7c9bcdc34ce88", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\nindex 39110c1eda..62bdb0100d 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n\n@@ -269,20 +271,15 @@ public class DeploymentService extends EvergreenService {\n                     .log(\"Received deployment document in queue\");\n             deploymentDocument = parseAndValidateJobDocument(deployment);\n             Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n-            logger.atInfo().log(\"Group to root components: \" + groupToRootPackages.toPOJO().toString());\n             //clean up any package info for the group in deployment document\n-            Topics deploymentGroupTopics = groupToRootPackages.findTopics(deploymentDocument.getGroupName());\n-            if (deploymentGroupTopics != null) {\n-                logger.atInfo().log(\"Removing the node from group to root packages mapping\");\n-                groupToRootPackages.remove(deploymentGroupTopics);\n-            }\n+            Topics deploymentGroupTopics = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n+            deploymentGroupTopics.deepForEachTopic(t -> t.remove());\n \n-            Topics thisGroupsRootPackages = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n             deploymentDocument.getDeploymentPackageConfigurationList().stream().forEach(pkgConfig -> {\n                 if (pkgConfig.isRootComponent()) {\n-                    Topic topic = thisGroupsRootPackages.createLeafChild(pkgConfig.getPackageName());\n+                    Topic topic = deploymentGroupTopics.createLeafChild(pkgConfig.getPackageName());\n                     Map<String, Object> pkgDetails = new HashMap<>();\n-                    pkgDetails.put(\"version\", pkgConfig.getResolvedVersion());\n+                    pkgDetails.put(GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, pkgConfig.getResolvedVersion());\n                     topic.withValue(pkgDetails);\n                 }\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NjcwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r443786707", "bodyText": "For non-root components, if customers specify version requirements in deployments, should we also persist that information somewhere?", "author": "hui-yang", "createdAt": "2020-06-22T19:46:52Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -260,6 +268,24 @@ private void createNewDeployment(Deployment deployment) {\n             logger.atInfo().kv(\"document\", deployment.getDeploymentDocument())\n                     .log(\"Received deployment document in queue\");\n             deploymentDocument = parseAndValidateJobDocument(deployment);\n+            Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n+            logger.atInfo().log(\"Group to root components: \" + groupToRootPackages.toPOJO().toString());\n+            //clean up any package info for the group in deployment document\n+            Topics deploymentGroupTopics = groupToRootPackages.findTopics(deploymentDocument.getGroupName());\n+            if (deploymentGroupTopics != null) {\n+                logger.atInfo().log(\"Removing the node from group to root packages mapping\");\n+                groupToRootPackages.remove(deploymentGroupTopics);\n+            }\n+\n+            Topics thisGroupsRootPackages = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n+            deploymentDocument.getDeploymentPackageConfigurationList().stream().forEach(pkgConfig -> {\n+                if (pkgConfig.isRootComponent()) {\n+                    Topic topic = thisGroupsRootPackages.createLeafChild(pkgConfig.getPackageName());\n+                    Map<String, Object> pkgDetails = new HashMap<>();\n+                    pkgDetails.put(\"version\", pkgConfig.getResolvedVersion());\n+                    topic.withValue(pkgDetails);\n+                }", "originalCommit": "802640c3a19c3c8ef2e5942e39a69b44cb303ae5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5OTE1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r443899154", "bodyText": "I changed my mind after kernel update review. Maybe we can make it clear to customers that if a pinned version is given to non-root components, then the version's used for this deployment, but this can be overwritten in future deployments?\nEDIT: Let's discuss on this.", "author": "hui-yang", "createdAt": "2020-06-23T00:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NjcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "27830bd9003b332d320e654a28d7c9bcdc34ce88", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\nindex 39110c1eda..62bdb0100d 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n\n@@ -269,20 +271,15 @@ public class DeploymentService extends EvergreenService {\n                     .log(\"Received deployment document in queue\");\n             deploymentDocument = parseAndValidateJobDocument(deployment);\n             Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n-            logger.atInfo().log(\"Group to root components: \" + groupToRootPackages.toPOJO().toString());\n             //clean up any package info for the group in deployment document\n-            Topics deploymentGroupTopics = groupToRootPackages.findTopics(deploymentDocument.getGroupName());\n-            if (deploymentGroupTopics != null) {\n-                logger.atInfo().log(\"Removing the node from group to root packages mapping\");\n-                groupToRootPackages.remove(deploymentGroupTopics);\n-            }\n+            Topics deploymentGroupTopics = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n+            deploymentGroupTopics.deepForEachTopic(t -> t.remove());\n \n-            Topics thisGroupsRootPackages = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n             deploymentDocument.getDeploymentPackageConfigurationList().stream().forEach(pkgConfig -> {\n                 if (pkgConfig.isRootComponent()) {\n-                    Topic topic = thisGroupsRootPackages.createLeafChild(pkgConfig.getPackageName());\n+                    Topic topic = deploymentGroupTopics.createLeafChild(pkgConfig.getPackageName());\n                     Map<String, Object> pkgDetails = new HashMap<>();\n-                    pkgDetails.put(\"version\", pkgConfig.getResolvedVersion());\n+                    pkgDetails.put(GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, pkgConfig.getResolvedVersion());\n                     topic.withValue(pkgDetails);\n                 }\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4OTg3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r443789879", "bodyText": "Can we change the interface a bit so that we don't have to resolve rootPackages twice?", "author": "hui-yang", "createdAt": "2020-06-22T19:53:55Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -45,16 +49,26 @@ public DeploymentResult call()\n \n             // TODO: DA compute list of all root level packages by looking across root level packages\n             // of all groups, when multi group support is added.\n-            List<String> rootPackages = new ArrayList<>(deploymentDocument.getRootPackages());\n+\n+            Set<String> rootPackages = new HashSet<>();\n+\n+            Topics groupsToRootPackages =\n+                    deploymentServiceConfig.lookupTopics(DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS);\n+            groupsToRootPackages.iterator().forEachRemaining(node -> {\n+                Topics groupTopics = (Topics) node;\n+                groupTopics.deepForEachTopic(pkgTopic -> {\n+                    rootPackages.add(pkgTopic.getName());\n+                });\n+            });\n \n             List<PackageIdentifier> desiredPackages =\n-                    dependencyResolver.resolveDependencies(deploymentDocument, rootPackages);\n+                    dependencyResolver.resolveDependencies(deploymentDocument, groupsToRootPackages);", "originalCommit": "802640c3a19c3c8ef2e5942e39a69b44cb303ae5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyOTU5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r444529599", "bodyText": "Not sure what you mean by resolving twice. Please take a look again as I have refactored it", "author": "abanthiy", "createdAt": "2020-06-23T21:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4OTg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5MzI0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445093243", "bodyText": "Ln 62-69, groupsToRootPackages is iterated once to get rootPackages, which is used by kernelConfigResolver.\nInside dependencyResolver, groupsToRootPackages is iterated again to get rootPackages and version.\nI meant we can maybe save one iteration if we change the args and/or return of dependencyResolver and/or kernelConfigResolver.", "author": "hui-yang", "createdAt": "2020-06-24T18:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4OTg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3OTk5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446379993", "bodyText": "I did not want to create another map representing the same thing as groupsToRootPackages and pass that to dependencyResolver. Passing config is extensible. If I pass a map to dependency resolver, that needs to be iterated too, so not sure if we will save anything there.\nI thought of passing the config to the kernel config resolver, which I think will be cleaner,  but that means refactoring the resolver which has cascading effect on tests and all so I avoided that. We can do that in separate PR but that wont save iteration.", "author": "abanthiy", "createdAt": "2020-06-26T19:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4OTg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "457e4f6530fef4ed49eb52e1c745a6bca64a3b4a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\nindex e863e9cdb0..99d6c3b351 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n\n@@ -23,59 +24,73 @@ import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n \n /**\n  * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n  */\n @AllArgsConstructor\n public class DeploymentTask implements Callable<DeploymentResult> {\n+    private static final String DEPLOYMENT_ID_LOGGING_KEY = \"deploymentId\";\n     private final DependencyResolver dependencyResolver;\n     private final PackageManager packageManager;\n     private final KernelConfigResolver kernelConfigResolver;\n     private final DeploymentConfigMerger deploymentConfigMerger;\n     private final Logger logger;\n+    @Getter\n     private final DeploymentDocument deploymentDocument;\n     private final Topics deploymentServiceConfig;\n \n     private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n \n     @Override\n-    @SuppressWarnings({\"PMD.PreserveStackTrace\"})\n+    @SuppressWarnings({\"PMD.PreserveStackTrace\", \"PMD.PrematureDeclaration\"})\n     public DeploymentResult call()\n             throws NonRetryableDeploymentTaskFailureException, RetryableDeploymentTaskFailureException {\n+        Future<Void> preparePackagesFuture = null;\n+        Future<DeploymentResult> deploymentMergeFuture = null;\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n-                    .addKeyValue(\"deploymentId\", deploymentDocument.getDeploymentId()).log(\"Start deployment task\");\n+                    .addKeyValue(DEPLOYMENT_ID_LOGGING_KEY, deploymentDocument.getDeploymentId())\n+                    .log(\"Starting deployment task\");\n \n-            // TODO: DA compute list of all root level packages by looking across root level packages\n-            // of all groups, when multi group support is added.\n-\n-            Set<String> rootPackages = new HashSet<>();\n+            logger.atInfo().log(\"The deployment config is \" + deploymentServiceConfig.toPOJO().toString());\n+            Set<String> rootPackages = new HashSet<>(deploymentDocument.getRootPackages());\n \n             Topics groupsToRootPackages =\n                     deploymentServiceConfig.lookupTopics(DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS);\n             groupsToRootPackages.iterator().forEachRemaining(node -> {\n                 Topics groupTopics = (Topics) node;\n-                groupTopics.deepForEachTopic(pkgTopic -> {\n-                    rootPackages.add(pkgTopic.getName());\n-                });\n+                if(!groupTopics.getName().equals(deploymentDocument.getGroupName())) {\n+                    groupTopics.deepForEachTopic(pkgTopic -> {\n+                        rootPackages.add(pkgTopic.getName());\n+                    });\n+                }\n             });\n \n             List<PackageIdentifier> desiredPackages =\n                     dependencyResolver.resolveDependencies(deploymentDocument, groupsToRootPackages);\n             // Block this without timeout because a device can be offline and it can take quite a long time\n             // to download a package.\n-            packageManager.preparePackages(desiredPackages).get();\n+            preparePackagesFuture = packageManager.preparePackages(desiredPackages);\n+            preparePackagesFuture.get();\n \n             Map<Object, Object> newConfig =\n                     kernelConfigResolver.resolve(desiredPackages, deploymentDocument, new ArrayList<>(rootPackages));\n+            if (Thread.currentThread().isInterrupted()) {\n+                logger.atInfo().addKeyValue(DEPLOYMENT_ID_LOGGING_KEY, deploymentDocument.getDeploymentId())\n+                        .log(\"Received interrupt before attempting deployment merge, skipping merge\");\n+                return null;\n+            }\n+            deploymentMergeFuture = deploymentConfigMerger.mergeInNewConfig(deploymentDocument, newConfig);\n \n             // Block this without timeout because it can take a long time for the device to update the config\n             // (if it's not in a safe window).\n-            DeploymentResult result = deploymentConfigMerger.mergeInNewConfig(deploymentDocument, newConfig).get();\n+            DeploymentResult result = deploymentMergeFuture.get();\n \n-            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n-                    .addKeyValue(\"deploymentId\", deploymentDocument.getDeploymentId()).log(\"Finish deployment task\");\n+            logger.atInfo(DEPLOYMENT_TASK_EVENT_TYPE).setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n+                    .addKeyValue(DEPLOYMENT_ID_LOGGING_KEY, deploymentDocument.getDeploymentId())\n+                    .log(\"Finished deployment task\");\n             return result;\n         } catch (PackageVersionConflictException | UnexpectedPackagingException e) {\n             throw new NonRetryableDeploymentTaskFailureException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5MTI0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r443791241", "bodyText": "What is this used for?", "author": "hui-yang", "createdAt": "2020-06-22T19:56:37Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java", "diffHunk": "@@ -29,6 +30,9 @@\n     @JsonProperty(\"Name\")\n     private String packageName;\n \n+    @JsonIgnore\n+    private boolean rootComponent;\n+", "originalCommit": "802640c3a19c3c8ef2e5942e39a69b44cb303ae5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzMDA4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r444530080", "bodyText": "To detect, if this is a root package or not. I felt its just better to have the indication in the PackageConfiguration itself because that's how it comes from the cloud.", "author": "abanthiy", "createdAt": "2020-06-23T21:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5MTI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3Mjk2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445072969", "bodyText": "Sounds like we can redesign the deployment doc used as device-internal contract. It can be worked on separately.", "author": "hui-yang", "createdAt": "2020-06-24T17:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5MTI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "457e4f6530fef4ed49eb52e1c745a6bca64a3b4a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java b/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java\nindex 68c9175a20..9137d68464 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java\n\n@@ -30,7 +29,7 @@ public class DeploymentPackageConfiguration {\n     @JsonProperty(\"Name\")\n     private String packageName;\n \n-    @JsonIgnore\n+    @JsonProperty(\"RootComponent\")\n     private boolean rootComponent;\n \n     // TODO: change to versionRequirements which can be a pinned version or a version range\n"}}, {"oid": "27830bd9003b332d320e654a28d7c9bcdc34ce88", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/27830bd9003b332d320e654a28d7c9bcdc34ce88", "message": "Adding multiple group support", "committedDate": "2020-06-23T06:34:37Z", "type": "forcePushed"}, {"oid": "0f6db1dbc2027c70ea3091f0c83d21d321ba8062", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0f6db1dbc2027c70ea3091f0c83d21d321ba8062", "message": "Adding multiple group support", "committedDate": "2020-06-23T07:00:05Z", "type": "forcePushed"}, {"oid": "457e4f6530fef4ed49eb52e1c745a6bca64a3b4a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/457e4f6530fef4ed49eb52e1c745a6bca64a3b4a", "message": "Adding multiple group support", "committedDate": "2020-06-24T08:16:14Z", "type": "forcePushed"}, {"oid": "32a2157ce9878686f79e0c4a8c44a85e026e96a2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32a2157ce9878686f79e0c4a8c44a85e026e96a2", "message": "Adding multiple group support", "committedDate": "2020-06-24T08:20:17Z", "type": "forcePushed"}, {"oid": "f7b5d9011e9b402b70fe95c2d1e3f34b7c920aef", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f7b5d9011e9b402b70fe95c2d1e3f34b7c920aef", "message": "Adding multiple group support", "committedDate": "2020-06-24T08:39:28Z", "type": "forcePushed"}, {"oid": "e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "message": "Adding multiple group support", "committedDate": "2020-06-24T17:28:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NTMzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445075331", "bodyText": "Is this context used?", "author": "hui-yang", "createdAt": "2020-06-24T18:02:54Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -108,11 +114,14 @@ static void setupLogger() {\n     }\n \n     @BeforeAll\n-    static void setupKernel() throws IOException {\n+    static void setupKernel(ExtensionContext context) throws IOException {", "originalCommit": "e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2ODMwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446368305", "bodyText": "Removed", "author": "abanthiy", "createdAt": "2020-06-26T19:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NTMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java\nindex b9c8ed4bc8..ab59acbc81 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java\n\n@@ -114,7 +114,7 @@ class DeploymentTaskIntegrationTest {\n     }\n \n     @BeforeAll\n-    static void setupKernel(ExtensionContext context) throws IOException {\n+    static void setupKernel() throws IOException {\n         System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n         kernel = new Kernel();\n         kernel.parseArgs(\"-i\", DeploymentTaskIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MzY2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445083661", "bodyText": "Duplicate to Ln 254-260. Can we reuse the lambda?", "author": "hui-yang", "createdAt": "2020-06-24T18:17:53Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -257,6 +261,23 @@ public void remove(Node n) {\n         });\n     }\n \n+    /**\n+     * Remove a node from this node's children and wait for removal to finish.\n+     *\n+     * @param n node to remove\n+     */\n+    public void removeAndWait(Node n) {\n+        context.runOnPublishQueueAndWait(() -> {\n+            if (!children.remove(n.getName(), n)) {\n+                logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n+                        .kv(\"childNode\", n.getName()).log();\n+                return;\n+            }\n+            n.fire(WhatHappened.removed);\n+            this.childChanged(WhatHappened.childRemoved, n);\n+        });", "originalCommit": "e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3MDExMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446370113", "bodyText": "Moved lambda into a method and reused", "author": "abanthiy", "createdAt": "2020-06-26T19:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MzY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topics.java b/src/main/java/com/aws/iot/evergreen/config/Topics.java\nindex cc43dbded7..d326331468 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topics.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topics.java\n\n@@ -250,15 +250,7 @@ public class Topics extends Node implements Iterable<Node> {\n      * @param n node to remove\n      */\n     public void remove(Node n) {\n-        context.runOnPublishQueue(() -> {\n-            if (!children.remove(n.getName(), n)) {\n-                logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                        .kv(\"childNode\", n.getName()).log();\n-                return;\n-            }\n-            n.fire(WhatHappened.removed);\n-            this.childChanged(WhatHappened.childRemoved, n);\n-        });\n+        context.runOnPublishQueue(() -> removeNode(n));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4NjUxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445086512", "bodyText": "It seems to me what's needed here is to replace the entire container node of a group. Is this a workaround because that feature is not available in KernelConfig?", "author": "hui-yang", "createdAt": "2020-06-24T18:23:03Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -201,6 +211,25 @@ private void finishCurrentDeployment() throws InterruptedException {\n                 Map<String, String> statusDetails = new HashMap<>();\n                 statusDetails.put(\"detailed-deployment-status\", deploymentStatus.name());\n                 if (deploymentStatus.equals(DeploymentResult.DeploymentStatus.SUCCESSFUL)) {\n+                    //Add the root packages of successful deployment to the configuration\n+                    DeploymentDocument deploymentDocument = currentDeploymentTaskMetadata.getDeploymentDocument();\n+                    Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n+                    //clean up any package info for the group in deployment document\n+                    Topics deploymentGroupTopics = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n+                    deploymentGroupTopics.deepForEachTopic(t -> t.remove());", "originalCommit": "e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NDY0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446374642", "bodyText": "Yes, that's what is needed, replace is not available. Alternative is to find->remove->create again. I thnk that would be more efficient than this one. Changing it to removing the whole container node and create again.", "author": "abanthiy", "createdAt": "2020-06-26T19:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4NjUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\nindex 34623d04f7..2b88bbb799 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n\n@@ -214,10 +214,13 @@ public class DeploymentService extends EvergreenService {\n                     //Add the root packages of successful deployment to the configuration\n                     DeploymentDocument deploymentDocument = currentDeploymentTaskMetadata.getDeploymentDocument();\n                     Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n-                    //clean up any package info for the group in deployment document\n+                    //clean up any previous package info for the group in deployment document\n+                    Topics previousDeploymentGroupTopics =\n+                            groupToRootPackages.findTopics(deploymentDocument.getGroupName());\n+                    if (previousDeploymentGroupTopics != null) {\n+                        groupToRootPackages.removeAndWait(previousDeploymentGroupTopics);\n+                    }\n                     Topics deploymentGroupTopics = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n-                    deploymentGroupTopics.deepForEachTopic(t -> t.remove());\n-\n                     deploymentDocument.getDeploymentPackageConfigurationList().stream().forEach(pkgConfig -> {\n                         if (pkgConfig.isRootComponent()) {\n                             Topic topic = deploymentGroupTopics.createLeafChild(pkgConfig.getPackageName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4NzIwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445087206", "bodyText": "Is this trying to be extensible when we need more information than version?", "author": "hui-yang", "createdAt": "2020-06-24T18:24:15Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -201,6 +211,25 @@ private void finishCurrentDeployment() throws InterruptedException {\n                 Map<String, String> statusDetails = new HashMap<>();\n                 statusDetails.put(\"detailed-deployment-status\", deploymentStatus.name());\n                 if (deploymentStatus.equals(DeploymentResult.DeploymentStatus.SUCCESSFUL)) {\n+                    //Add the root packages of successful deployment to the configuration\n+                    DeploymentDocument deploymentDocument = currentDeploymentTaskMetadata.getDeploymentDocument();\n+                    Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n+                    //clean up any package info for the group in deployment document\n+                    Topics deploymentGroupTopics = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n+                    deploymentGroupTopics.deepForEachTopic(t -> t.remove());\n+\n+                    deploymentDocument.getDeploymentPackageConfigurationList().stream().forEach(pkgConfig -> {\n+                        if (pkgConfig.isRootComponent()) {\n+                            Topic topic = deploymentGroupTopics.createLeafChild(pkgConfig.getPackageName());\n+                            Map<String, Object> pkgDetails = new HashMap<>();", "originalCommit": "e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NDczOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446374739", "bodyText": "Yes", "author": "abanthiy", "createdAt": "2020-06-26T19:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4NzIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\nindex 34623d04f7..2b88bbb799 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n\n@@ -214,10 +214,13 @@ public class DeploymentService extends EvergreenService {\n                     //Add the root packages of successful deployment to the configuration\n                     DeploymentDocument deploymentDocument = currentDeploymentTaskMetadata.getDeploymentDocument();\n                     Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n-                    //clean up any package info for the group in deployment document\n+                    //clean up any previous package info for the group in deployment document\n+                    Topics previousDeploymentGroupTopics =\n+                            groupToRootPackages.findTopics(deploymentDocument.getGroupName());\n+                    if (previousDeploymentGroupTopics != null) {\n+                        groupToRootPackages.removeAndWait(previousDeploymentGroupTopics);\n+                    }\n                     Topics deploymentGroupTopics = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n-                    deploymentGroupTopics.deepForEachTopic(t -> t.remove());\n-\n                     deploymentDocument.getDeploymentPackageConfigurationList().stream().forEach(pkgConfig -> {\n                         if (pkgConfig.isRootComponent()) {\n                             Topic topic = deploymentGroupTopics.createLeafChild(pkgConfig.getPackageName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4OTU2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445089564", "bodyText": "Do we really need to persist the information for failed deployments? What is the use case? If group1 failed in a bad state, do we want to support customers to deploy group2 on top of the bad configs?", "author": "hui-yang", "createdAt": "2020-06-24T18:28:34Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -209,6 +238,9 @@ private void finishCurrentDeployment() throws InterruptedException {\n                     if (result.getFailureCause() != null) {\n                         statusDetails.put(\"deployment-failure-cause\", result.getFailureCause().toString());\n                     }\n+                    //TODO: Update the groupToRootPackages mapping in config for the case where there is no rollback\n+                    // and now the packages deployed for the current group are not the same as before starting\n+                    // deployment", "originalCommit": "e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NjE4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446376187", "bodyText": "I think the groupToRoot mapping should really be indication of what is currently running on the device. We can't keep the old root packages in mapping because that would lead to undesired behavior upon next deployment (as dependency resolution will change based on these mappings). Kernel and this mapping should not be out of sync.\nWe cannot stop customer from deploying to group2 on top of failed group 1.", "author": "abanthiy", "createdAt": "2020-06-26T19:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4OTU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "534f5c63fd8d66064f30b89859733929016e9b16", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\nindex 34623d04f7..c0177fdab1 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n\n@@ -238,9 +210,6 @@ public class DeploymentService extends EvergreenService {\n                     if (result.getFailureCause() != null) {\n                         statusDetails.put(\"deployment-failure-cause\", result.getFailureCause().toString());\n                     }\n-                    //TODO: Update the groupToRootPackages mapping in config for the case where there is no rollback\n-                    // and now the packages deployed for the current group are not the same as before starting\n-                    // deployment\n                     deploymentStatusKeeper\n                             .persistAndPublishDeploymentStatus(currentDeploymentTaskMetadata.getDeploymentId(),\n                                     currentDeploymentTaskMetadata.getDeploymentType(), JobStatus.FAILED, statusDetails);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5MzgxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445093813", "bodyText": "I get your point but I don't see where this is used in code.", "author": "hui-yang", "createdAt": "2020-06-24T18:36:35Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java", "diffHunk": "@@ -29,6 +29,9 @@\n     @JsonProperty(\"Name\")\n     private String packageName;\n \n+    @JsonProperty(\"RootComponent\")\n+    private boolean rootComponent;", "originalCommit": "e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MjYzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446382631", "bodyText": "Currently I am using it in the DeploymentService when updating the groupsToRootPackage mapping. This flag saves contains() check in the list for every package configuration. We need to refactor other code/test to move to using this but that will be too much for one PR.", "author": "abanthiy", "createdAt": "2020-06-26T19:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5MzgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "534f5c63fd8d66064f30b89859733929016e9b16", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java b/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java\nindex 9137d68464..db4bbf8589 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java\n\n@@ -29,9 +29,6 @@ public class DeploymentPackageConfiguration {\n     @JsonProperty(\"Name\")\n     private String packageName;\n \n-    @JsonProperty(\"RootComponent\")\n-    private boolean rootComponent;\n-\n     // TODO: change to versionRequirements which can be a pinned version or a version range\n     @JsonProperty(\"ResolvedVersion\")\n     private String resolvedVersion;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5NTQ5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445095491", "bodyText": "Why don't we combine the two logs?", "author": "hui-yang", "createdAt": "2020-06-24T18:39:48Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -66,24 +68,42 @@\n         // the version constraints will also change accordingly. 3. The information also shows the complete dependency\n         // tree.\n         Map<String, Map<String, String>> packageNameToVersionConstraints = new HashMap<>();\n+        Set<String> rootPackagesToResolve = new LinkedHashSet<>();\n \n-        // List of root packages to be resolved\n-        Set<String> rootPackagesToResolve = new LinkedHashSet<>(newRootPackages);\n-\n-        // Get a list of package configurations with pinned versions\n+        // Get a list of all package configurations with version constraints in the deployment document\n         for (DeploymentPackageConfiguration dpc : document.getDeploymentPackageConfigurationList()) {\n             logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, dpc.getPackageName())\n                     .addKeyValue(VERSION_KEY, dpc.getResolvedVersion()).log(\"Found package configuration\");\n             packageNameToVersionConstraints.putIfAbsent(dpc.getPackageName(), new HashMap<>());\n+\n+            // Only the group to package mapping before this deployment is guaranteed to be available, since config\n+            // updates happen in a separate thread.\n+            if (document.getRootPackages().contains(dpc.getPackageName())) {\n+                rootPackagesToResolve.add(dpc.getPackageName());\n+            }\n             packageNameToVersionConstraints.get(dpc.getPackageName())\n-                    .put(ROOT_REQUIREMENT_KEY, dpc.getResolvedVersion());\n+                    .put(document.getGroupName(), dpc.getResolvedVersion());\n         }\n \n-        // Merge the active root packages on the device\n-        mergeActiveRootPackages(rootPackagesToResolve, packageNameToVersionConstraints);\n-        logger.atInfo().setEventType(\"resolve-dependencies-start\").addKeyValue(\"rootPackages\", rootPackagesToResolve)\n-                .addKeyValue(\"versionConstraints\", packageNameToVersionConstraints).log();\n+        //Get package version constraints for root packages corresponding to other groups\n+        groupToRootPackagesDetails.iterator().forEachRemaining(node -> {\n+            Topics groupTopics = (Topics) node;\n+            String groupName = groupTopics.getName();\n+            if (!groupName.equals(document.getGroupName())) {\n+                groupTopics.deepForEachTopic(pkgTopic -> {\n+                    rootPackagesToResolve.add(pkgTopic.getName());\n+                    packageNameToVersionConstraints.putIfAbsent(pkgTopic.getName(), new HashMap<>());\n+                    Map<String, Object> pkgDetails = (Map) pkgTopic.getOnce();\n+                    packageNameToVersionConstraints.get(pkgTopic.getName())\n+                            .putIfAbsent(groupName, pkgDetails.get(GROUP_TO_ROOT_COMPONENTS_VERSION_KEY).toString());\n+                });\n+            }\n+        });\n \n+        logger.atInfo().setEventType(\"resolve-dependencies-start\")\n+                .addKeyValue(\"versionConstraints\", packageNameToVersionConstraints).log();\n+        logger.atInfo().kv(\"RootPackagesToResolve\", rootPackagesToResolve)\n+                .kv(\"DeploymentGroup\", document.getGroupName()).log(\"The root packages for deployment\");", "originalCommit": "e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java\nindex 019b25fd23..e98a594fff 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java\n\n@@ -101,9 +101,11 @@ public class DependencyResolver {\n         });\n \n         logger.atInfo().setEventType(\"resolve-dependencies-start\")\n-                .addKeyValue(\"versionConstraints\", packageNameToVersionConstraints).log();\n-        logger.atInfo().kv(\"RootPackagesToResolve\", rootPackagesToResolve)\n-                .kv(\"DeploymentGroup\", document.getGroupName()).log(\"The root packages for deployment\");\n+                .addKeyValue(\"versionConstraints\", packageNameToVersionConstraints)\n+                .kv(\"RootPackagesToResolve\", rootPackagesToResolve)\n+                .kv(\"DeploymentGroup\", document.getGroupName())\n+                .log(\"The root packages for deployment\");\n+\n         // Map of package name and resolved version\n         Map<String, Semver> resolvedPackageNameToVersion = new HashMap<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5NzA4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r445097083", "bodyText": "mergeActiveRootPackages should be replaced with this code", "author": "hui-yang", "createdAt": "2020-06-24T18:42:40Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -66,24 +68,42 @@\n         // the version constraints will also change accordingly. 3. The information also shows the complete dependency\n         // tree.\n         Map<String, Map<String, String>> packageNameToVersionConstraints = new HashMap<>();\n+        Set<String> rootPackagesToResolve = new LinkedHashSet<>();\n \n-        // List of root packages to be resolved\n-        Set<String> rootPackagesToResolve = new LinkedHashSet<>(newRootPackages);\n-\n-        // Get a list of package configurations with pinned versions\n+        // Get a list of all package configurations with version constraints in the deployment document\n         for (DeploymentPackageConfiguration dpc : document.getDeploymentPackageConfigurationList()) {\n             logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, dpc.getPackageName())\n                     .addKeyValue(VERSION_KEY, dpc.getResolvedVersion()).log(\"Found package configuration\");\n             packageNameToVersionConstraints.putIfAbsent(dpc.getPackageName(), new HashMap<>());\n+\n+            // Only the group to package mapping before this deployment is guaranteed to be available, since config\n+            // updates happen in a separate thread.\n+            if (document.getRootPackages().contains(dpc.getPackageName())) {\n+                rootPackagesToResolve.add(dpc.getPackageName());\n+            }\n             packageNameToVersionConstraints.get(dpc.getPackageName())\n-                    .put(ROOT_REQUIREMENT_KEY, dpc.getResolvedVersion());\n+                    .put(document.getGroupName(), dpc.getResolvedVersion());\n         }\n \n-        // Merge the active root packages on the device\n-        mergeActiveRootPackages(rootPackagesToResolve, packageNameToVersionConstraints);\n-        logger.atInfo().setEventType(\"resolve-dependencies-start\").addKeyValue(\"rootPackages\", rootPackagesToResolve)\n-                .addKeyValue(\"versionConstraints\", packageNameToVersionConstraints).log();\n+        //Get package version constraints for root packages corresponding to other groups\n+        groupToRootPackagesDetails.iterator().forEachRemaining(node -> {\n+            Topics groupTopics = (Topics) node;\n+            String groupName = groupTopics.getName();\n+            if (!groupName.equals(document.getGroupName())) {\n+                groupTopics.deepForEachTopic(pkgTopic -> {\n+                    rootPackagesToResolve.add(pkgTopic.getName());\n+                    packageNameToVersionConstraints.putIfAbsent(pkgTopic.getName(), new HashMap<>());\n+                    Map<String, Object> pkgDetails = (Map) pkgTopic.getOnce();\n+                    packageNameToVersionConstraints.get(pkgTopic.getName())\n+                            .putIfAbsent(groupName, pkgDetails.get(GROUP_TO_ROOT_COMPONENTS_VERSION_KEY).toString());\n+                });\n+            }\n+        });", "originalCommit": "e7eb5c4d237fbf1e98e9c004f5736bccbe555a37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4NTk3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446385971", "bodyText": "That's not accurate, as I understand, mergeActiveRootPackages mean merging the constraints of currently running packages in kernel. But what we actually need to do is recalculate the constraints from all groups. If your suggestion is to put this in a method that's ok but I would probably call it getRootPackageConstraintsFromOtherGroups", "author": "abanthiy", "createdAt": "2020-06-26T20:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5NzA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0MTg4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447141880", "bodyText": "I'm fine with the renaming.", "author": "hui-yang", "createdAt": "2020-06-29T17:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5NzA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java\nindex 019b25fd23..e98a594fff 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java\n\n@@ -101,9 +101,11 @@ public class DependencyResolver {\n         });\n \n         logger.atInfo().setEventType(\"resolve-dependencies-start\")\n-                .addKeyValue(\"versionConstraints\", packageNameToVersionConstraints).log();\n-        logger.atInfo().kv(\"RootPackagesToResolve\", rootPackagesToResolve)\n-                .kv(\"DeploymentGroup\", document.getGroupName()).log(\"The root packages for deployment\");\n+                .addKeyValue(\"versionConstraints\", packageNameToVersionConstraints)\n+                .kv(\"RootPackagesToResolve\", rootPackagesToResolve)\n+                .kv(\"DeploymentGroup\", document.getGroupName())\n+                .log(\"The root packages for deployment\");\n+\n         // Map of package name and resolved version\n         Map<String, Semver> resolvedPackageNameToVersion = new HashMap<>();\n \n"}}, {"oid": "7be87d5ff9b6621ae8493834f0f0039622d120d5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7be87d5ff9b6621ae8493834f0f0039622d120d5", "message": "Adding multiple group support", "committedDate": "2020-06-25T17:52:17Z", "type": "forcePushed"}, {"oid": "ac8357a5d89925b5318466af3b2730b3836e1a7f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ac8357a5d89925b5318466af3b2730b3836e1a7f", "message": "Adding multiple group support", "committedDate": "2020-06-26T03:04:38Z", "type": "forcePushed"}, {"oid": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "message": "Adding multiple group support", "committedDate": "2020-06-26T20:36:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDEyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446404123", "bodyText": "use try-with-resources to always close the context otherwise it leaves a thread around", "author": "MikeDombo", "createdAt": "2020-06-26T20:51:18Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -91,15 +98,23 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n         List<String> rootPackageList = new ArrayList<>();\n         rootPackageList.add(\"KernelIntegTest\");\n         List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n-        configList.add(new DeploymentPackageConfiguration(\"KernelIntegTest\", \"1.0.0\",\n+        configList.add(new DeploymentPackageConfiguration(\"KernelIntegTest\", true, \"1.0.0\",\n                                                           Collections.emptyMap()));\n         DeploymentDocument testDeploymentDocument\n                 = DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n                                     .deploymentPackageConfigurationList(configList)\n                                     .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n                                     .groupName(\"test\").build();\n+        context = new Context();", "originalCommit": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3ODU2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447178564", "bodyText": "I am closing the context, but I can move to use try-with-resources", "author": "abanthiy", "createdAt": "2020-06-29T18:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "b932b7f1a1d04b4b6f8b57302279c6551a1fa957", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java\nindex 8ced14222e..6b8fc3a7a1 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java\n\n@@ -105,29 +104,27 @@ class PackageManagerE2ETest extends BaseE2ETestCase {\n                                     .deploymentPackageConfigurationList(configList)\n                                     .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n                                     .groupName(\"test\").build();\n-        context = new Context();\n-        Topics groupToRootPackagesTopics = Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS\n-                , null);\n-        rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg).withValue(\n-                ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n-        context.runOnPublishQueueAndWait(\n-                () -> System.out.println(\"Waiting for queue to finish updating the config\"));\n-        context.close();\n-        List<PackageIdentifier> resolutionResult\n-                = dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n-        Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n-        testFuture.get(10, TimeUnit.SECONDS);\n-\n-        assertThat(packageStorePath.toFile(), anExistingDirectory());\n-        assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n-        assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n-\n-        assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"KernelIntegTest-1.0.0.yaml\").toFile(), anExistingFile());\n-        assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"KernelIntegTestDependency-1.0.0.yaml\").toFile(),\n-                   anExistingFile());\n-        assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"Log-2.0.0.yaml\").toFile(), anExistingFile());\n-\n-        assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\")\n-                                   .resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n+        try(Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"KernelIntegTest-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"KernelIntegTestDependency-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"Log-2.0.0.yaml\").toFile(), anExistingFile());\n+\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n+        }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNjQzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446406435", "bodyText": "Instead of remove and then add, why not add a replace function to the config store?", "author": "MikeDombo", "createdAt": "2020-06-26T20:56:59Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -201,6 +211,28 @@ private void finishCurrentDeployment() throws InterruptedException {\n                 Map<String, String> statusDetails = new HashMap<>();\n                 statusDetails.put(\"detailed-deployment-status\", deploymentStatus.name());\n                 if (deploymentStatus.equals(DeploymentResult.DeploymentStatus.SUCCESSFUL)) {\n+                    //Add the root packages of successful deployment to the configuration\n+                    DeploymentDocument deploymentDocument = currentDeploymentTaskMetadata.getDeploymentDocument();\n+                    Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n+                    //clean up any previous package info for the group in deployment document\n+                    Topics previousDeploymentGroupTopics =\n+                            groupToRootPackages.findTopics(deploymentDocument.getGroupName());\n+                    if (previousDeploymentGroupTopics != null) {\n+                        groupToRootPackages.removeAndWait(previousDeploymentGroupTopics);\n+                    }\n+                    Topics deploymentGroupTopics = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());", "originalCommit": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNzI0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447217248", "bodyText": "We can replace the node in the concurrent hashmap but it also requires being able to modify the parent of a node (the new node with which we replace). I am thinking if that makes the config vulnerable to more errors.", "author": "abanthiy", "createdAt": "2020-06-29T19:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNjQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e18d994e43244c21fbd9130969d93bc8f375015", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\nindex 2b88bbb799..bb0617e9a7 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java\n\n@@ -213,26 +212,21 @@ public class DeploymentService extends EvergreenService {\n                 if (deploymentStatus.equals(DeploymentResult.DeploymentStatus.SUCCESSFUL)) {\n                     //Add the root packages of successful deployment to the configuration\n                     DeploymentDocument deploymentDocument = currentDeploymentTaskMetadata.getDeploymentDocument();\n-                    Topics groupToRootPackages = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS);\n-                    //clean up any previous package info for the group in deployment document\n-                    Topics previousDeploymentGroupTopics =\n-                            groupToRootPackages.findTopics(deploymentDocument.getGroupName());\n-                    if (previousDeploymentGroupTopics != null) {\n-                        groupToRootPackages.removeAndWait(previousDeploymentGroupTopics);\n-                    }\n-                    Topics deploymentGroupTopics = groupToRootPackages.lookupTopics(deploymentDocument.getGroupName());\n+                    Topics deploymentGroupTopics = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS,\n+                            deploymentDocument.getGroupName());\n+                    Map<Object, Object> deploymentGroupToRootPackages = new HashMap<>();\n+                    // TODO: Removal of group from the mappings. Currently there is no action taken when a device is\n+                    //  removed from a thing group. Empty configuration is treated as a valid config for a group but\n+                    //  not treated as removal.\n                     deploymentDocument.getDeploymentPackageConfigurationList().stream().forEach(pkgConfig -> {\n                         if (pkgConfig.isRootComponent()) {\n-                            Topic topic = deploymentGroupTopics.createLeafChild(pkgConfig.getPackageName());\n-                            Map<String, Object> pkgDetails = new HashMap<>();\n+                            Map<Object, Object> pkgDetails = new HashMap<>();\n                             pkgDetails.put(GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, pkgConfig.getResolvedVersion());\n-                            topic.withValue(pkgDetails);\n+                            deploymentGroupToRootPackages.put(pkgConfig.getPackageName(), pkgDetails);\n                         }\n                     });\n-                    //If there is an empty config for this group\n-                    if (!deploymentGroupTopics.iterator().hasNext()) {\n-                        deploymentGroupTopics.remove();\n-                    }\n+                    deploymentGroupTopics.replaceAndWait(deploymentGroupToRootPackages);\n+\n                     deploymentStatusKeeper\n                             .persistAndPublishDeploymentStatus(currentDeploymentTaskMetadata.getDeploymentId(),\n                                     currentDeploymentTaskMetadata.getDeploymentType(), JobStatus.SUCCEEDED,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwOTI0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r446409243", "bodyText": "do not use concatenation. Always use string interpolation like .log(\"A {}\", val)", "author": "MikeDombo", "createdAt": "2020-06-26T21:04:11Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -50,25 +54,36 @@ public DeploymentResult call()\n                     .addKeyValue(DEPLOYMENT_ID_LOGGING_KEY, deploymentDocument.getDeploymentId())\n                     .log(\"Starting deployment task\");\n \n-            // TODO: DA compute list of all root level packages by looking across root level packages\n-            // of all groups, when multi group support is added.\n-            List<String> rootPackages = new ArrayList<>(deploymentDocument.getRootPackages());\n+            logger.atInfo().log(\"The deployment config is \" + deploymentServiceConfig.toPOJO().toString());", "originalCommit": "30cff60601d42c3bfe0f747f56e2fa02ad2b52cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NTU1Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447165552", "bodyText": "I as using this log for debugging, I will remove it.", "author": "abanthiy", "createdAt": "2020-06-29T18:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwOTI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b932b7f1a1d04b4b6f8b57302279c6551a1fa957", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\nindex 9411afbaa9..44b424424c 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n\n@@ -52,9 +52,9 @@ public class DeploymentTask implements Callable<DeploymentResult> {\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(DEPLOYMENT_ID_LOGGING_KEY, deploymentDocument.getDeploymentId())\n+                    .kv(\"Deployment service config\", deploymentServiceConfig.toPOJO().toString())\n                     .log(\"Starting deployment task\");\n \n-            logger.atInfo().log(\"The deployment config is \" + deploymentServiceConfig.toPOJO().toString());\n             Set<String> rootPackages = new HashSet<>(deploymentDocument.getRootPackages());\n \n             Topics groupsToRootPackages =\n"}}, {"oid": "6ca2b834e9d44d5a2034e3eb16addf8ade9fabd1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6ca2b834e9d44d5a2034e3eb16addf8ade9fabd1", "message": "Adding multiple group support", "committedDate": "2020-06-27T00:38:54Z", "type": "forcePushed"}, {"oid": "b932b7f1a1d04b4b6f8b57302279c6551a1fa957", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b932b7f1a1d04b4b6f8b57302279c6551a1fa957", "message": "Adding multiple group support", "committedDate": "2020-06-29T19:54:08Z", "type": "forcePushed"}, {"oid": "6e18d994e43244c21fbd9130969d93bc8f375015", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6e18d994e43244c21fbd9130969d93bc8f375015", "message": "Adding multiple group support", "committedDate": "2020-06-29T22:03:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4Mjc2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447282762", "bodyText": "The constructor was private for a reason. Do we need this to be public?", "author": "MikeDombo", "createdAt": "2020-06-29T22:09:27Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -25,6 +25,10 @@\n         super(c, n, p);\n     }\n \n+    public static Topics of(Context c, String n, Topics p) {", "originalCommit": "6e18d994e43244c21fbd9130969d93bc8f375015", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyODE2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447328164", "bodyText": "I am using it for testing in different packages. It greatly reduces the testing code.", "author": "abanthiy", "createdAt": "2020-06-30T00:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4Mjc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzODk4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447338981", "bodyText": "Working on getting rid of it", "author": "abanthiy", "createdAt": "2020-06-30T00:37:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4Mjc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0OTU4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447349584", "bodyText": "Will keep that for next iteration. It introduces too much flux. My approach will be to replace the Topics in the DeploymentTask and other classes with a Map derived from the DeploymentService config. Although I feel its using unnecessary memory so I am little hesitant on doing that. Let me know your opinion on if that is trade off we want to make for keeping the constructor private", "author": "abanthiy", "createdAt": "2020-06-30T01:14:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4Mjc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "534f5c63fd8d66064f30b89859733929016e9b16", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topics.java b/src/main/java/com/aws/iot/evergreen/config/Topics.java\nindex 72f8aa0d65..12e7f09f87 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topics.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topics.java\n\n@@ -25,10 +25,6 @@ public class Topics extends Node implements Iterable<Node> {\n         super(c, n, p);\n     }\n \n-    public static Topics of(Context c, String n, Topics p) {\n-        return new Topics(c, n, p);\n-    }\n-\n     /**\n      * Create an errorNode with a given message.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNjAwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447316000", "bodyText": "nit: unnecessary concat", "author": "hui-yang", "createdAt": "2020-06-29T23:28:31Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -184,6 +201,8 @@ void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated\n             }\n         };\n         Slf4jLogAdapter.addGlobalListener(listener);\n+        groupToRootComponentsTopics.lookup(\"CustomerApp\").withValue(\n+                ImmutableMap.of(GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1\" + \".0.0\"));", "originalCommit": "d88f3d85fc55a52c7fd1804fdd46dd8b711fc0bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37534353cd4b35f57bdf0220879381c408eb79a2", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java\nindex ab59acbc81..e790510fcc 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java\n\n@@ -202,7 +202,7 @@ class DeploymentTaskIntegrationTest {\n         };\n         Slf4jLogAdapter.addGlobalListener(listener);\n         groupToRootComponentsTopics.lookup(\"CustomerApp\").withValue(\n-                ImmutableMap.of(GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1\" + \".0.0\"));\n+                ImmutableMap.of(GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\"));\n \n         Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n                 DeploymentTaskIntegrationTest.class.getResource(\"SampleJobDocument_updated.json\").toURI(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTc5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/283#discussion_r447321792", "bodyText": "nit: typo", "author": "hui-yang", "createdAt": "2020-06-29T23:46:05Z", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -107,24 +130,53 @@ void afterEach() {\n         @BeforeEach\n         public void setup() throws Exception {\n             deploymentService.setPollingFrequency(Duration.ofSeconds(1).toMillis());\n-            deploymentsQueue.put(new Deployment(\"{\\\"configurationArn\\\":\\\"testArn\\\"}\",\n+            String deploymentDocument\n+                    = new BufferedReader(new InputStreamReader(\n+                            getClass().getResourceAsStream(\"TestDeploymentDocument.json\"), StandardCharsets.UTF_8))\n+                    .lines()\n+                    .collect(Collectors.joining(\"\\n\"));\n+            deploymentsQueue.put(new Deployment(deploymentDocument,\n                     Deployment.DeploymentType.IOT_JOBS, TEST_JOB_ID_1));\n         }\n \n         @Test\n         public void GIVEN_deployment_job_WHEN_deployment_process_succeeds_THEN_report_succeeded_job_status()\n                 throws Exception {\n+            mockGroupToRootPackageMappingStubs();\n             CompletableFuture<DeploymentResult> mockFuture = new CompletableFuture<>();\n             mockFuture.complete(new DeploymentResult(DeploymentStatus.SUCCESSFUL, null));\n             when(mockExecutorService.submit(any(DeploymentTask.class))).thenReturn(mockFuture);\n-            startDeploymentServiceInAnotherThread();\n+            CountDownLatch jobSuceededLatch = new CountDownLatch(1);\n+            doAnswer(new Answer() {\n+                @Override\n+                public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n+                    jobSuceededLatch.countDown();", "originalCommit": "d88f3d85fc55a52c7fd1804fdd46dd8b711fc0bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37534353cd4b35f57bdf0220879381c408eb79a2", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java b/src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java\nindex 1e31e823bb..a7f75bdca7 100644\n--- a/src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java\n\n@@ -146,11 +146,11 @@ public class DeploymentServiceTest extends EGServiceTestUtil {\n             CompletableFuture<DeploymentResult> mockFuture = new CompletableFuture<>();\n             mockFuture.complete(new DeploymentResult(DeploymentStatus.SUCCESSFUL, null));\n             when(mockExecutorService.submit(any(DeploymentTask.class))).thenReturn(mockFuture);\n-            CountDownLatch jobSuceededLatch = new CountDownLatch(1);\n+            CountDownLatch jobSucceededLatch = new CountDownLatch(1);\n             doAnswer(new Answer() {\n                 @Override\n                 public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n-                    jobSuceededLatch.countDown();\n+                    jobSucceededLatch.countDown();\n                     return null;\n                 }\n             }).when(deploymentStatusKeeper).persistAndPublishDeploymentStatus(eq(TEST_JOB_ID_1),\n"}}, {"oid": "37534353cd4b35f57bdf0220879381c408eb79a2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/37534353cd4b35f57bdf0220879381c408eb79a2", "message": "Adding multiple group support", "committedDate": "2020-06-30T01:01:55Z", "type": "forcePushed"}, {"oid": "e87a6e90d7f9549d3e529fb3e9d9cf61bf1cd61d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e87a6e90d7f9549d3e529fb3e9d9cf61bf1cd61d", "message": "Adding multiple group support", "committedDate": "2020-06-30T16:55:31Z", "type": "forcePushed"}, {"oid": "534f5c63fd8d66064f30b89859733929016e9b16", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/534f5c63fd8d66064f30b89859733929016e9b16", "message": "Refactoring how current deployment task metadata is handled", "committedDate": "2020-07-01T17:19:55Z", "type": "commit"}, {"oid": "1c7b9f59063cec666a7d6eb96fe39ef5711a17e9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1c7b9f59063cec666a7d6eb96fe39ef5711a17e9", "message": "Adding multiple group support", "committedDate": "2020-07-01T17:19:55Z", "type": "forcePushed"}, {"oid": "ea8e56c52269ef5513e632e7f77a994dd2560d17", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ea8e56c52269ef5513e632e7f77a994dd2560d17", "message": "Adding multiple group support", "committedDate": "2020-07-01T22:45:07Z", "type": "forcePushed"}, {"oid": "9dc1182ff16bddfa628fd12909969259ce3de161", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9dc1182ff16bddfa628fd12909969259ce3de161", "message": "Adding multiple group support", "committedDate": "2020-07-01T22:48:40Z", "type": "forcePushed"}, {"oid": "409c11e0e8d740ba97501172480ccdc0bcc1c6ef", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/409c11e0e8d740ba97501172480ccdc0bcc1c6ef", "message": "Adding multiple group support", "committedDate": "2020-07-01T22:51:14Z", "type": "commit"}, {"oid": "409c11e0e8d740ba97501172480ccdc0bcc1c6ef", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/409c11e0e8d740ba97501172480ccdc0bcc1c6ef", "message": "Adding multiple group support", "committedDate": "2020-07-01T22:51:14Z", "type": "forcePushed"}]}