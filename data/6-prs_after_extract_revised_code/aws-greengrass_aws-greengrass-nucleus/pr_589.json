{"pr_number": 589, "pr_title": "Migrating integration tests over new IPC", "pr_createdAt": "2020-10-30T07:22:47Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDU3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r515174576", "bodyText": "I don't think this will fail the test.", "author": "nikkhilmuthye", "createdAt": "2020-10-30T15:18:47Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -485,68 +489,80 @@ void GIVEN_some_running_services_WHEN_cancel_event_received_and_kernel_is_waitin\n         IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n                 Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n \n-        KernelIPCClientConfig nonDisruptable =\n-                getIPCConfigForService(getTestComponentNameInCloud(\"NonDisruptableService\"), kernel);\n-        IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-        Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-\n-        lifecycle.subscribeToComponentUpdate((event) -> {\n-            if (event instanceof PreComponentUpdateEvent) {\n-                try {\n-                    lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    ipcClient.disconnect();\n-                } catch (LifecycleIPCException e) {\n+        try (EventStreamRPCConnection connection = IPCTestUtils\n+                .getEventStreamRpcConnection(kernel, \"NonDisruptableService\" + testComponentSuffix)) {\n+            GreengrassCoreIPCClient ipcClient = new GreengrassCoreIPCClient(connection);\n+\n+            ipcClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(),\n+                    Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+                @Override\n+                public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                    if (streamEvent.getPreUpdateEvent() != null) {\n+                        DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                        deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                        deferComponentUpdateRequest.setMessage(\"NonDisruptableService\");\n+                        try {\n+                            ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+                        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                            fail(\"Caught exception while send component defer request\");", "originalCommit": "b4583a49436a58abe20ae5d1ccf2336001ccd638", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7473c153561f358416afaa6eeffc60da9eafe9eb", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\nindex c1878720c..8b0fe0b98 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\n\n@@ -504,7 +503,8 @@ class DeploymentE2ETest extends BaseE2ETestCase {\n                         try {\n                             ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n                         } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-                            fail(\"Caught exception while send component defer request\");\n+                            logger.atError().setCause(e)\n+                                    .log(\"Caught exception while send component defer request\");\n                         }\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3OTQ3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r515179474", "bodyText": "same here", "author": "nikkhilmuthye", "createdAt": "2020-10-30T15:25:21Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -616,85 +632,90 @@ void GIVEN_deployment_in_progress_with_more_jobs_queued_in_cloud_WHEN_cancel_eve\n         IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n                 Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n \n-        KernelIPCClientConfig nonDisruptable =\n-                getIPCConfigForService(getTestComponentNameInCloud(\"NonDisruptableService\"), kernel);\n-        IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-        Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-\n-        lifecycle.subscribeToComponentUpdate((event) -> {\n-            if (event instanceof PreComponentUpdateEvent) {\n-                try {\n-                    lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    ipcClient.disconnect();\n-                } catch (LifecycleIPCException e) {\n+        try (EventStreamRPCConnection connection = IPCTestUtils\n+                .getEventStreamRpcConnection(kernel, \"NonDisruptableService\" + testComponentSuffix)) {\n+            GreengrassCoreIPCClient ipcClient = new GreengrassCoreIPCClient(connection);\n+\n+            ipcClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(), Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+                        @Override\n+                        public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                            if (streamEvent.getPreUpdateEvent() != null) {\n+                                DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                                deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                                deferComponentUpdateRequest.setMessage(\"NonDisruptableService\");\n+                                try {\n+                                    ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+                                } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                                    fail(\"Caught exception while send component defer request\");", "originalCommit": "b4583a49436a58abe20ae5d1ccf2336001ccd638", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7473c153561f358416afaa6eeffc60da9eafe9eb", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\nindex c1878720c..8b0fe0b98 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\n\n@@ -646,7 +646,8 @@ class DeploymentE2ETest extends BaseE2ETestCase {\n                                 try {\n                                     ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n                                 } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-                                    fail(\"Caught exception while send component defer request\");\n+                                    logger.atError().setCause(e)\n+                                            .log(\"Caught exception while send component defer request\");\n                                 }\n                             }\n                         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4OTA2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r515189068", "bodyText": "Why does one test need to run first?", "author": "nikkhilmuthye", "createdAt": "2020-10-30T15:36:14Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -66,12 +60,12 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n @ExtendWith({GGExtension.class, UniqueRootPathExtension.class})\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "originalCommit": "b4583a49436a58abe20ae5d1ccf2336001ccd638", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxNTc2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r516415767", "bodyText": "Since kernel starts before all, other test were changing the state of the component. But this test by itself works fine", "author": "abanthiy", "createdAt": "2020-11-03T03:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4OTA2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNzYxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r515427617", "bodyText": "use logger?", "author": "hui-yang", "createdAt": "2020-10-30T23:55:50Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCTestUtils.java", "diffHunk": "@@ -132,6 +154,7 @@ public static EventStreamRPCConnection connectToGGCOverEventStreamIPC(SocketOpti\n         try (EventLoopGroup elGroup = new EventLoopGroup(1); ClientBootstrap clientBootstrap = new ClientBootstrap(elGroup, null)) {\n \n             String ipcServerSocketPath = kernel.getContext().get(IPCEventStreamService.class).getIpcServerSocketAbsolutePath();\n+            System.out.println(\"IPc server socket path is \" + ipcServerSocketPath);", "originalCommit": "33110a2f3305bc3e9d3b47c40c578baee711cd14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7473c153561f358416afaa6eeffc60da9eafe9eb", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCTestUtils.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCTestUtils.java\nindex 8a2b37ef6..9d86c2a3c 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCTestUtils.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCTestUtils.java\n\n@@ -154,7 +154,6 @@ public final class IPCTestUtils {\n         try (EventLoopGroup elGroup = new EventLoopGroup(1); ClientBootstrap clientBootstrap = new ClientBootstrap(elGroup, null)) {\n \n             String ipcServerSocketPath = kernel.getContext().get(IPCEventStreamService.class).getIpcServerSocketAbsolutePath();\n-            System.out.println(\"IPc server socket path is \" + ipcServerSocketPath);\n             final EventStreamRPCConnectionConfig config = new EventStreamRPCConnectionConfig(clientBootstrap, elGroup,\n                     socketOptions, null, ipcServerSocketPath, DEFAULT_PORT_NUMBER,\n                     GreengrassConnectMessageSupplier.connectMessageSupplier(authToken));\n"}}, {"oid": "3caf54fe64d20614013d4acb12cf50e18cc7211b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3caf54fe64d20614013d4acb12cf50e18cc7211b", "message": "Fixing a test", "committedDate": "2020-11-03T02:58:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMjY0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r516412643", "bodyText": "this needs to be in a try/finally or use the auto closeable:\ntry (AutoClosable l = TestUtils.createCloseableLogListener(logListener)) {\n\nOtherwise, on failure the log listener doesn't get removed", "author": "rbattle", "createdAt": "2020-11-03T03:39:55Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -616,85 +632,90 @@ void GIVEN_deployment_in_progress_with_more_jobs_queued_in_cloud_WHEN_cancel_eve\n         IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n                 Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n \n-        KernelIPCClientConfig nonDisruptable =\n-                getIPCConfigForService(getTestComponentNameInCloud(\"NonDisruptableService\"), kernel);\n-        IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-        Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-\n-        lifecycle.subscribeToComponentUpdate((event) -> {\n-            if (event instanceof PreComponentUpdateEvent) {\n-                try {\n-                    lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    ipcClient.disconnect();\n-                } catch (LifecycleIPCException e) {\n+        try (EventStreamRPCConnection connection = IPCTestUtils\n+                .getEventStreamRpcConnection(kernel, \"NonDisruptableService\" + testComponentSuffix)) {\n+            GreengrassCoreIPCClient ipcClient = new GreengrassCoreIPCClient(connection);\n+\n+            ipcClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(), Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+                        @Override\n+                        public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                            if (streamEvent.getPreUpdateEvent() != null) {\n+                                DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                                deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                                deferComponentUpdateRequest.setMessage(\"NonDisruptableService\");\n+                                try {\n+                                    ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+                                } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                                    fail(\"Caught exception while send component defer request\");\n+                                }\n+                            }\n+                        }\n+\n+                        @Override\n+                        public boolean onStreamError(Throwable error) {\n+                            logger.atError().setCause(error).log(\"Caught stream error while subscribing for component update\");\n+                            return false;\n+                        }\n+\n+                        @Override\n+                        public void onStreamClosed() {\n+\n+                        }\n+                    }));\n+\n+            CountDownLatch updateRegistered = new CountDownLatch(1);\n+            CountDownLatch deploymentCancelled = new CountDownLatch(1);\n+            Consumer<GreengrassLogMessage> logListener = m -> {\n+                if (\"register-service-update-action\".equals(m.getEventType())) {\n+                    updateRegistered.countDown();\n                 }\n-            }\n-        });\n-\n-        CountDownLatch updateRegistered = new CountDownLatch(1);\n-        CountDownLatch deploymentCancelled = new CountDownLatch(1);\n-        Consumer<GreengrassLogMessage> logListener = m -> {\n-            if (\"register-service-update-action\".equals(m.getEventType())) {\n-                updateRegistered.countDown();\n-            }\n-            if (m.getMessage() != null && m.getMessage().contains(\"Deployment was cancelled\")) {\n-                deploymentCancelled.countDown();\n-            }\n-        };\n-        Slf4jLogAdapter.addGlobalListener(logListener);\n-\n-        // Second deployment to update the service which is currently running an important task so deployment should\n-        // keep waiting for a safe time to update\n-        SetConfigurationRequest setRequest2 =\n-                new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE)\n-                        .withDeploymentPolicies(new DeploymentPolicies()\n-                                .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n-                                .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n-                                        new ComponentUpdatePolicy()\n-                                                .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n-                                                .withTimeout(120))).addPackagesEntry(\"NonDisruptableService\",\n-                        new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-        PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n-        IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult2.getJobId(), thingInfo.getThingName(),\n-                Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n-\n-        // Create one more deployment so that it's queued in cloud\n-        SetConfigurationRequest setRequest3 =\n-                new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE)\n-                        .withDeploymentPolicies(new DeploymentPolicies()\n-                                .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n-                                .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n-                                        new ComponentUpdatePolicy()\n-                                                .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n-                                                .withTimeout(120))).addPackagesEntry(\"NonDisruptableService\",\n-                        new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-        PublishConfigurationResult publishResult3 = setAndPublishFleetConfiguration(setRequest3);\n+                if (m.getMessage() != null && m.getMessage().contains(\"Deployment was cancelled\")) {\n+                    deploymentCancelled.countDown();\n+                }\n+            };\n+            Slf4jLogAdapter.addGlobalListener(logListener);", "originalCommit": "3caf54fe64d20614013d4acb12cf50e18cc7211b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7473c153561f358416afaa6eeffc60da9eafe9eb", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\nindex c1878720c..8b0fe0b98 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\n\n@@ -646,7 +646,8 @@ class DeploymentE2ETest extends BaseE2ETestCase {\n                                 try {\n                                     ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n                                 } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-                                    fail(\"Caught exception while send component defer request\");\n+                                    logger.atError().setCause(e)\n+                                            .log(\"Caught exception while send component defer request\");\n                                 }\n                             }\n                         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMzI5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r516413297", "bodyText": "nit: put the topic in the log", "author": "rbattle", "createdAt": "2020-11-03T03:42:57Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCTestUtils.java", "diffHunk": "@@ -172,4 +195,39 @@ public static String getAuthTokeForService(Kernel kernel, String serviceName) {\n                 PRIVATE_STORE_NAMESPACE_TOPIC);\n         return  Coerce.toString(servicePrivateConfig.find(SERVICE_UNIQUE_ID_KEY));\n     }\n+\n+    public static void publishToTopicOverIpcAsBinaryMessage(GreengrassCoreIPCClient ipcClient, String topic,\n+                                                      String message) throws InterruptedException, ExecutionException, TimeoutException {\n+        PublishToTopicRequest publishToTopicRequest = new PublishToTopicRequest();\n+        publishToTopicRequest.setTopic(topic);\n+        PublishMessage publishMessage = new PublishMessage();\n+        BinaryMessage binaryMessage = new BinaryMessage();\n+        binaryMessage.setMessage(message.getBytes(StandardCharsets.UTF_8));\n+        publishMessage.setBinaryMessage(binaryMessage);\n+        publishToTopicRequest.setPublishMessage(publishMessage);\n+        ipcClient.publishToTopic(publishToTopicRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+    }\n+\n+    public static void subscribeToTopicOveripcForBinaryMessages(GreengrassCoreIPCClient ipcClient, String topic,\n+                                                    Consumer<byte[]> consumer) throws InterruptedException, ExecutionException, TimeoutException {\n+        SubscribeToTopicRequest request = new SubscribeToTopicRequest();\n+        request.setTopic(topic);\n+        ipcClient.subscribeToTopic(request, Optional.of(new StreamResponseHandler<SubscriptionResponseMessage>() {\n+            @Override\n+            public void onStreamEvent(SubscriptionResponseMessage streamEvent) {\n+                consumer.accept(streamEvent.getBinaryMessage().getMessage());\n+            }\n+\n+            @Override\n+            public boolean onStreamError(Throwable error) {\n+                logger.atError().setCause(error).log(\"Caught error while subscribing to a topic\");", "originalCommit": "3caf54fe64d20614013d4acb12cf50e18cc7211b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxNDA3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r516414077", "bodyText": "this needs to be in a try/finally or use the auto closeable:\ntry (AutoClosable l = TestUtils.createCloseableLogListener(logListener)) {\n\nOtherwise, on failure the log listener doesn't get removed", "author": "rbattle", "createdAt": "2020-11-03T03:46:12Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -485,68 +489,80 @@ void GIVEN_some_running_services_WHEN_cancel_event_received_and_kernel_is_waitin\n         IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n                 Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n \n-        KernelIPCClientConfig nonDisruptable =\n-                getIPCConfigForService(getTestComponentNameInCloud(\"NonDisruptableService\"), kernel);\n-        IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-        Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-\n-        lifecycle.subscribeToComponentUpdate((event) -> {\n-            if (event instanceof PreComponentUpdateEvent) {\n-                try {\n-                    lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    ipcClient.disconnect();\n-                } catch (LifecycleIPCException e) {\n+        try (EventStreamRPCConnection connection = IPCTestUtils\n+                .getEventStreamRpcConnection(kernel, \"NonDisruptableService\" + testComponentSuffix)) {\n+            GreengrassCoreIPCClient ipcClient = new GreengrassCoreIPCClient(connection);\n+\n+            ipcClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(),\n+                    Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+                @Override\n+                public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                    if (streamEvent.getPreUpdateEvent() != null) {\n+                        DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                        deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                        deferComponentUpdateRequest.setMessage(\"NonDisruptableService\");\n+                        try {\n+                            ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+                        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                            fail(\"Caught exception while send component defer request\");\n+                        }\n+                    }\n                 }\n-            }\n-        });\n \n-        // Second deployment to update the service which is currently running an important task so deployment should\n-        // wait for a safe time to update\n-        SetConfigurationRequest setRequest2 =\n-                new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE)\n-                        .withDeploymentPolicies(new DeploymentPolicies()\n-                                .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n-                                .withComponentUpdatePolicy(new ComponentUpdatePolicy()\n-                                        .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                        .addPackagesEntry(\"NonDisruptableService\",\n-                                new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-        PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n+                @Override\n+                public boolean onStreamError(Throwable error) {\n+                    logger.atError().setCause(error).log(\"Caught stream error while subscribing for component update\");\n+                    return false;\n+                }\n \n-        CountDownLatch updateRegistered = new CountDownLatch(1);\n-        CountDownLatch deploymentCancelled = new CountDownLatch(1);\n-        Consumer<GreengrassLogMessage> logListener = m -> {\n-            if (\"register-service-update-action\".equals(m.getEventType())) {\n-                updateRegistered.countDown();\n-            }\n-            if (m.getMessage() != null && m.getMessage().contains(\"Deployment was cancelled\")) {\n-                deploymentCancelled.countDown();\n-            }\n-        };\n-        Slf4jLogAdapter.addGlobalListener(logListener);\n+                @Override\n+                public void onStreamClosed() {\n \n-        IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult2.getJobId(), thingInfo.getThingName(),\n-                Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n+                }\n+            }));\n+\n+            // Second deployment to update the service which is currently running an important task so deployment should\n+            // wait for a safe time to update\n+            SetConfigurationRequest setRequest2 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n+                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n+                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n+            PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n \n-        // Wait for the second deployment to start waiting for safe time to update and\n-        // then cancel it's corresponding job from cloud\n-        assertTrue(updateRegistered.await(60, TimeUnit.SECONDS));\n-        assertTrue(kernel.getContext().get(UpdateSystemSafelyService.class)\n-                .hasPendingUpdateAction(publishResult2.getConfigurationArn()));\n+            CountDownLatch updateRegistered = new CountDownLatch(1);\n+            CountDownLatch deploymentCancelled = new CountDownLatch(1);\n+            Consumer<GreengrassLogMessage> logListener = m -> {\n+                if (\"register-service-update-action\".equals(m.getEventType())) {\n+                    updateRegistered.countDown();\n+                }\n+                if (m.getMessage() != null && m.getMessage().contains(\"Deployment was cancelled\")) {\n+                    deploymentCancelled.countDown();\n+                }\n+            };\n+            Slf4jLogAdapter.addGlobalListener(logListener);", "originalCommit": "3caf54fe64d20614013d4acb12cf50e18cc7211b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7473c153561f358416afaa6eeffc60da9eafe9eb", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\nindex c1878720c..8b0fe0b98 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java\n\n@@ -504,7 +503,8 @@ class DeploymentE2ETest extends BaseE2ETestCase {\n                         try {\n                             ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n                         } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-                            fail(\"Caught exception while send component defer request\");\n+                            logger.atError().setCause(e)\n+                                    .log(\"Caught exception while send component defer request\");\n                         }\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxNDI1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r516414258", "bodyText": "nit: fix string concatenation", "author": "rbattle", "createdAt": "2020-11-03T03:47:08Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -127,27 +133,46 @@ void GIVEN_device_deployment_not_started_WHEN_new_deployment_THEN_first_deployme\n             });\n             assertTrue(nonDisruptableServiceServiceLatch.await(30, TimeUnit.SECONDS));\n \n-            KernelIPCClientConfig nonDisruptable = getIPCConfigForService(\"NonDisruptableService\", kernel);\n-            IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-            Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-            lifecycle.subscribeToComponentUpdate((event) -> {\n-                if (event instanceof PreComponentUpdateEvent) {\n-                    try {\n-                        lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    } catch (LifecycleIPCException e) {\n+            try (EventStreamRPCConnection connection = IPCTestUtils.getEventStreamRpcConnection(kernel,\n+                    \"NonDisruptableService\")) {\n+                GreengrassCoreIPCClient ipcEventStreamClient = new GreengrassCoreIPCClient(connection);\n+                ipcEventStreamClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(),\n+                        Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+\n+                    @Override\n+                    public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                        if (streamEvent.getPreUpdateEvent() != null) {\n+                            try {\n+                                DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                                deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                                deferComponentUpdateRequest.setMessage(\"Test\");\n+                                ipcEventStreamClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty())\n+                                        .getResponse().get(DEFAULT_IPC_API_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n+                            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                            }\n+                        }\n                     }\n-                }\n-            });\n-            assertTrue(cdlDeployNonDisruptable.await(30, TimeUnit.SECONDS));\n-            submitSampleJobDocument(\n-                    DeploymentServiceIntegrationTest.class.getResource(\"FleetConfigWithRedSignalService.json\").toURI(),\n-                    \"deployRedSignal\", DeploymentType.SHADOW);\n-            submitSampleJobDocument(\n-                    DeploymentServiceIntegrationTest.class.getResource(\"FleetConfigWithNonDisruptableService.json\").toURI(),\n-                    \"redeployNonDisruptable\", DeploymentType.SHADOW);\n-            assertTrue(cdlRedeployNonDisruptable.await(15, TimeUnit.SECONDS));\n-            ipcClient.disconnect();\n-            assertTrue(cdlDeployRedSignal.await(1, TimeUnit.SECONDS));\n+\n+                    @Override\n+                    public boolean onStreamError(Throwable error) {\n+                        logger.atError().setCause(error).log(\"Caught error stream when subscribing for component \" + \"updates\");", "originalCommit": "3caf54fe64d20614013d4acb12cf50e18cc7211b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "34508292cc2de8de9a9f1d182295c14416d6df33", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/34508292cc2de8de9a9f1d182295c14416d6df33", "message": "Migrating integration tests over new IPC", "committedDate": "2020-11-03T06:18:26Z", "type": "commit"}, {"oid": "72a1e2611cfc97427bb728c7c60d13388380dccb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/72a1e2611cfc97427bb728c7c60d13388380dccb", "message": "Fixing a test", "committedDate": "2020-11-03T06:18:26Z", "type": "commit"}, {"oid": "7473c153561f358416afaa6eeffc60da9eafe9eb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7473c153561f358416afaa6eeffc60da9eafe9eb", "message": "Addressing review comments", "committedDate": "2020-11-03T06:18:26Z", "type": "commit"}, {"oid": "795ab9f53a820bafb86cb9c72141389f5c1ff3d5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/795ab9f53a820bafb86cb9c72141389f5c1ff3d5", "message": "Removing blocking defer requests from inside subscribe callbacks", "committedDate": "2020-11-03T06:18:27Z", "type": "forcePushed"}, {"oid": "3a376e99173f09ea3fb3363b7c49a4e4f85c58a1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3a376e99173f09ea3fb3363b7c49a4e4f85c58a1", "message": "Removing blocking defer requests from inside subscribe callbacks", "committedDate": "2020-11-03T06:40:19Z", "type": "commit"}, {"oid": "3a376e99173f09ea3fb3363b7c49a4e4f85c58a1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3a376e99173f09ea3fb3363b7c49a4e4f85c58a1", "message": "Removing blocking defer requests from inside subscribe callbacks", "committedDate": "2020-11-03T06:40:19Z", "type": "forcePushed"}, {"oid": "822f8ca26f2f46da05f6a776e805b51c3dba7ea0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/822f8ca26f2f46da05f6a776e805b51c3dba7ea0", "message": "Merge branch 'master' into integTestOnNewIpc", "committedDate": "2020-11-03T18:02:37Z", "type": "commit"}]}