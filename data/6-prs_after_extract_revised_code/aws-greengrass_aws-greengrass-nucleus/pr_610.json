{"pr_number": 610, "pr_title": "Setup script changes", "pr_createdAt": "2020-11-03T15:37:21Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgyODg4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516828884", "bodyText": "tes shouldn't need this one anymore I think, as long as everything is going through moonraker", "author": "MikeDombo", "createdAt": "2020-11-03T17:14:44Z", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -69,29 +83,61 @@\n  */\n @Getter\n public class DeviceProvisioningHelper {\n-\n-    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n+    private static final String GG_THING_POLICY_NAME = \"GreengrassV2ThingPolicy\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_SUFFIX = \"Access\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT = \"{\\n\"\n+            + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+            + \"    \\\"Statement\\\": [\\n\"\n+            + \"        {\\n\"\n+            + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+            + \"            \\\"Action\\\": [\\n\"\n+            + \"                \\\"greengrass:*\\\",\\n\"", "originalCommit": "60c0efe2d7adee9f5a2a2851f24252de2a5b4089", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9089ccdd19b83fa8b61c24f422bdf5d3173ee4e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\nindex 30565b4786..c8991853fc 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n\n@@ -83,76 +82,57 @@ import java.util.UUID;\n  */\n @Getter\n public class DeviceProvisioningHelper {\n+    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap\n+            .of(EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\", EnvironmentStage.GAMMA,\n+                    \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\", EnvironmentStage.BETA,\n+                    \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\");\n     private static final String GG_THING_POLICY_NAME = \"GreengrassV2ThingPolicy\";\n     private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_SUFFIX = \"Access\";\n-    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT = \"{\\n\"\n-            + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n-            + \"    \\\"Statement\\\": [\\n\"\n-            + \"        {\\n\"\n-            + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\"\n-            + \"            \\\"Action\\\": [\\n\"\n-            + \"                \\\"greengrass:*\\\",\\n\"\n-            + \"                \\\"iot:DescribeCertificate\\\",\\n\"\n-            + \"                \\\"logs:CreateLogGroup\\\",\\n\"\n-            + \"                \\\"logs:CreateLogStream\\\",\\n\"\n-            + \"                \\\"logs:PutLogEvents\\\",\\n\"\n-            + \"                \\\"logs:DescribeLogStreams\\\",\\n\"\n-            + \"                \\\"iot:Connect\\\",\\n\"\n-            + \"                \\\"iot:Publish\\\",\\n\"\n-            + \"                \\\"iot:Subscribe\\\",\\n\"\n-            + \"                \\\"iot:Receive\\\",\\n\"\n-            + \"                \\\"iot:GetThingShadow\\\",\\n\"\n-            + \"                \\\"iot:UpdateThingShadow\\\"\\n\"\n-            + \"            ],\\n\"\n-            + \"            \\\"Resource\\\": \\\"*\\\"\\n\"\n-            + \"        }\\n\"\n-            + \"    ]\\n\"\n-            + \"}\";\n-\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT =\n+            \"{\\n\" + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"    \\\"Statement\\\": [\\n\" + \"        {\\n\"\n+                    + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"            \\\"Action\\\": [\\n\"\n+                    + \"                \\\"iot:DescribeCertificate\\\",\\n\" + \"                \\\"logs:CreateLogGroup\\\",\\n\"\n+                    + \"                \\\"logs:CreateLogStream\\\",\\n\" + \"                \\\"logs:PutLogEvents\\\",\\n\"\n+                    + \"                \\\"logs:DescribeLogStreams\\\",\\n\" + \"                \\\"iot:Connect\\\",\\n\"\n+                    + \"                \\\"iot:Publish\\\",\\n\" + \"                \\\"iot:Subscribe\\\",\\n\"\n+                    + \"                \\\"iot:Receive\\\",\\n\" + \"            ],\\n\" + \"            \\\"Resource\\\": \\\"*\\\"\\n\"\n+                    + \"        }\\n\" + \"    ]\\n\" + \"}\";\n     private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n     private static final String IOT_ROLE_POLICY_NAME_PREFIX = \"GreengrassTESCertificatePolicy\";\n-\n+    // TODO : Need proper versions before launch and need to add CLI component\n+    private static final String HTTP_DEBUG_VIEW_COMPONENT_NAME = \"aws.greengrass.HttpDebugView\";\n+    private static final String HTTP_DEBUG_VIEW__COMPONENT_VERSION = \"0.0.0\";\n+    private static final String GGC_USER = \"ggc_user\";\n+    private static final String GGC_GROUP = \"ggc_group\";\n     private static final String E2E_TESTS_POLICY_NAME_PREFIX = \"E2ETestsIotPolicy\";\n     private static final String E2E_TESTS_THING_NAME_PREFIX = \"E2ETestsIotThing\";\n-\n-    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n-    private final Map<EnvironmentStage, String> tesServiceEndpoints = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"credentials.iot.amazonaws.com\",\n-            EnvironmentStage.GAMMA, \"credentials.iot.test.amazonaws.com\",\n-            EnvironmentStage.BETA, \"credentials.iot.test.amazonaws.com\"\n-    );\n-    private static final Map<IotSdkClientFactory.EnvironmentStage, String> STAGE_TO_ENDPOINT_FORMAT =\n-            ImmutableMap.of(\n-                    IotSdkClientFactory.EnvironmentStage.PROD, \"evergreen.%s.amazonaws.com\",\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String> STAGE_TO_ENDPOINT_FORMAT = ImmutableMap\n+            .of(IotSdkClientFactory.EnvironmentStage.PROD, \"evergreen.%s.amazonaws.com\",\n                     IotSdkClientFactory.EnvironmentStage.GAMMA, \"evergreen-gamma.%s.amazonaws.com\",\n-                    IotSdkClientFactory.EnvironmentStage.BETA, \"evergreen-beta.%s.amazonaws.com\"\n-            );\n-\n-    private EnvironmentStage envStage = EnvironmentStage.PROD;\n+                    IotSdkClientFactory.EnvironmentStage.BETA, \"evergreen-beta.%s.amazonaws.com\");\n+    private final Map<EnvironmentStage, String> tesServiceEndpoints = ImmutableMap\n+            .of(EnvironmentStage.PROD, \"credentials.iot.amazonaws.com\", EnvironmentStage.GAMMA,\n+                    \"credentials.iot.test.amazonaws.com\", EnvironmentStage.BETA, \"credentials.iot.test.amazonaws.com\");\n     private final PrintStream outStream;\n-\n     private final IotClient iotClient;\n     private final IamClient iamClient;\n     private final AWSEvergreen greengrassClient;\n+    private EnvironmentStage envStage = EnvironmentStage.PROD;\n \n     /**\n      * Constructor for a desired region and stage.\n      *\n-     * @param awsRegion aws region\n-     * @param outStream stream used to provide customer feedback\n+     * @param awsRegion        aws region\n+     * @param outStream        stream used to provide customer feedback\n      * @param environmentStage {@link EnvironmentStage}\n-     * @throws URISyntaxException when Iot endpoint is malformed\n+     * @throws URISyntaxException               when Iot endpoint is malformed\n      * @throws InvalidEnvironmentStageException when the environmentStage passes is invalid\n      */\n     public DeviceProvisioningHelper(String awsRegion, String environmentStage, PrintStream outStream)\n             throws URISyntaxException, InvalidEnvironmentStageException {\n         this.outStream = outStream;\n-        this.envStage = StringUtils.isEmpty(environmentStage)\n-                ? EnvironmentStage.PROD : EnvironmentStage.fromString(environmentStage);\n+        this.envStage = StringUtils.isEmpty(environmentStage) ? EnvironmentStage.PROD\n+                : EnvironmentStage.fromString(environmentStage);\n         this.iotClient = IotSdkClientFactory.getIotClient(awsRegion, envStage);\n         this.iamClient = IamSdkClientFactory.getIamClient();\n         this.greengrassClient = AWSEvergreenClientBuilder.standard().withEndpointConfiguration(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgyODk3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516828973", "bodyText": "not needed", "author": "MikeDombo", "createdAt": "2020-11-03T17:14:52Z", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -69,29 +83,61 @@\n  */\n @Getter\n public class DeviceProvisioningHelper {\n-\n-    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n+    private static final String GG_THING_POLICY_NAME = \"GreengrassV2ThingPolicy\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_SUFFIX = \"Access\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT = \"{\\n\"\n+            + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+            + \"    \\\"Statement\\\": [\\n\"\n+            + \"        {\\n\"\n+            + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+            + \"            \\\"Action\\\": [\\n\"\n+            + \"                \\\"greengrass:*\\\",\\n\"\n+            + \"                \\\"iot:DescribeCertificate\\\",\\n\"\n+            + \"                \\\"logs:CreateLogGroup\\\",\\n\"\n+            + \"                \\\"logs:CreateLogStream\\\",\\n\"\n+            + \"                \\\"logs:PutLogEvents\\\",\\n\"\n+            + \"                \\\"logs:DescribeLogStreams\\\",\\n\"\n+            + \"                \\\"iot:Connect\\\",\\n\"\n+            + \"                \\\"iot:Publish\\\",\\n\"\n+            + \"                \\\"iot:Subscribe\\\",\\n\"\n+            + \"                \\\"iot:Receive\\\",\\n\"\n+            + \"                \\\"iot:GetThingShadow\\\",\\n\"\n+            + \"                \\\"iot:UpdateThingShadow\\\"\\n\"", "originalCommit": "60c0efe2d7adee9f5a2a2851f24252de2a5b4089", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9089ccdd19b83fa8b61c24f422bdf5d3173ee4e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\nindex 30565b4786..c8991853fc 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n\n@@ -83,76 +82,57 @@ import java.util.UUID;\n  */\n @Getter\n public class DeviceProvisioningHelper {\n+    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap\n+            .of(EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\", EnvironmentStage.GAMMA,\n+                    \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\", EnvironmentStage.BETA,\n+                    \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\");\n     private static final String GG_THING_POLICY_NAME = \"GreengrassV2ThingPolicy\";\n     private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_SUFFIX = \"Access\";\n-    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT = \"{\\n\"\n-            + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n-            + \"    \\\"Statement\\\": [\\n\"\n-            + \"        {\\n\"\n-            + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\"\n-            + \"            \\\"Action\\\": [\\n\"\n-            + \"                \\\"greengrass:*\\\",\\n\"\n-            + \"                \\\"iot:DescribeCertificate\\\",\\n\"\n-            + \"                \\\"logs:CreateLogGroup\\\",\\n\"\n-            + \"                \\\"logs:CreateLogStream\\\",\\n\"\n-            + \"                \\\"logs:PutLogEvents\\\",\\n\"\n-            + \"                \\\"logs:DescribeLogStreams\\\",\\n\"\n-            + \"                \\\"iot:Connect\\\",\\n\"\n-            + \"                \\\"iot:Publish\\\",\\n\"\n-            + \"                \\\"iot:Subscribe\\\",\\n\"\n-            + \"                \\\"iot:Receive\\\",\\n\"\n-            + \"                \\\"iot:GetThingShadow\\\",\\n\"\n-            + \"                \\\"iot:UpdateThingShadow\\\"\\n\"\n-            + \"            ],\\n\"\n-            + \"            \\\"Resource\\\": \\\"*\\\"\\n\"\n-            + \"        }\\n\"\n-            + \"    ]\\n\"\n-            + \"}\";\n-\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT =\n+            \"{\\n\" + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"    \\\"Statement\\\": [\\n\" + \"        {\\n\"\n+                    + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"            \\\"Action\\\": [\\n\"\n+                    + \"                \\\"iot:DescribeCertificate\\\",\\n\" + \"                \\\"logs:CreateLogGroup\\\",\\n\"\n+                    + \"                \\\"logs:CreateLogStream\\\",\\n\" + \"                \\\"logs:PutLogEvents\\\",\\n\"\n+                    + \"                \\\"logs:DescribeLogStreams\\\",\\n\" + \"                \\\"iot:Connect\\\",\\n\"\n+                    + \"                \\\"iot:Publish\\\",\\n\" + \"                \\\"iot:Subscribe\\\",\\n\"\n+                    + \"                \\\"iot:Receive\\\",\\n\" + \"            ],\\n\" + \"            \\\"Resource\\\": \\\"*\\\"\\n\"\n+                    + \"        }\\n\" + \"    ]\\n\" + \"}\";\n     private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n     private static final String IOT_ROLE_POLICY_NAME_PREFIX = \"GreengrassTESCertificatePolicy\";\n-\n+    // TODO : Need proper versions before launch and need to add CLI component\n+    private static final String HTTP_DEBUG_VIEW_COMPONENT_NAME = \"aws.greengrass.HttpDebugView\";\n+    private static final String HTTP_DEBUG_VIEW__COMPONENT_VERSION = \"0.0.0\";\n+    private static final String GGC_USER = \"ggc_user\";\n+    private static final String GGC_GROUP = \"ggc_group\";\n     private static final String E2E_TESTS_POLICY_NAME_PREFIX = \"E2ETestsIotPolicy\";\n     private static final String E2E_TESTS_THING_NAME_PREFIX = \"E2ETestsIotThing\";\n-\n-    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n-    private final Map<EnvironmentStage, String> tesServiceEndpoints = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"credentials.iot.amazonaws.com\",\n-            EnvironmentStage.GAMMA, \"credentials.iot.test.amazonaws.com\",\n-            EnvironmentStage.BETA, \"credentials.iot.test.amazonaws.com\"\n-    );\n-    private static final Map<IotSdkClientFactory.EnvironmentStage, String> STAGE_TO_ENDPOINT_FORMAT =\n-            ImmutableMap.of(\n-                    IotSdkClientFactory.EnvironmentStage.PROD, \"evergreen.%s.amazonaws.com\",\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String> STAGE_TO_ENDPOINT_FORMAT = ImmutableMap\n+            .of(IotSdkClientFactory.EnvironmentStage.PROD, \"evergreen.%s.amazonaws.com\",\n                     IotSdkClientFactory.EnvironmentStage.GAMMA, \"evergreen-gamma.%s.amazonaws.com\",\n-                    IotSdkClientFactory.EnvironmentStage.BETA, \"evergreen-beta.%s.amazonaws.com\"\n-            );\n-\n-    private EnvironmentStage envStage = EnvironmentStage.PROD;\n+                    IotSdkClientFactory.EnvironmentStage.BETA, \"evergreen-beta.%s.amazonaws.com\");\n+    private final Map<EnvironmentStage, String> tesServiceEndpoints = ImmutableMap\n+            .of(EnvironmentStage.PROD, \"credentials.iot.amazonaws.com\", EnvironmentStage.GAMMA,\n+                    \"credentials.iot.test.amazonaws.com\", EnvironmentStage.BETA, \"credentials.iot.test.amazonaws.com\");\n     private final PrintStream outStream;\n-\n     private final IotClient iotClient;\n     private final IamClient iamClient;\n     private final AWSEvergreen greengrassClient;\n+    private EnvironmentStage envStage = EnvironmentStage.PROD;\n \n     /**\n      * Constructor for a desired region and stage.\n      *\n-     * @param awsRegion aws region\n-     * @param outStream stream used to provide customer feedback\n+     * @param awsRegion        aws region\n+     * @param outStream        stream used to provide customer feedback\n      * @param environmentStage {@link EnvironmentStage}\n-     * @throws URISyntaxException when Iot endpoint is malformed\n+     * @throws URISyntaxException               when Iot endpoint is malformed\n      * @throws InvalidEnvironmentStageException when the environmentStage passes is invalid\n      */\n     public DeviceProvisioningHelper(String awsRegion, String environmentStage, PrintStream outStream)\n             throws URISyntaxException, InvalidEnvironmentStageException {\n         this.outStream = outStream;\n-        this.envStage = StringUtils.isEmpty(environmentStage)\n-                ? EnvironmentStage.PROD : EnvironmentStage.fromString(environmentStage);\n+        this.envStage = StringUtils.isEmpty(environmentStage) ? EnvironmentStage.PROD\n+                : EnvironmentStage.fromString(environmentStage);\n         this.iotClient = IotSdkClientFactory.getIotClient(awsRegion, envStage);\n         this.iamClient = IamSdkClientFactory.getIamClient();\n         this.greengrassClient = AWSEvergreenClientBuilder.standard().withEndpointConfiguration(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMTUwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516831509", "bodyText": "we do need this argument for testing AFAIK. We don't need to print it out in the help, but I think we still need it.", "author": "MikeDombo", "createdAt": "2020-11-03T17:19:01Z", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -78,53 +69,29 @@\n     private static final String DEFAULT_GROUP_ARG = \"--component-default-group\";\n     private static final String DEFAULT_GROUP_ARG_SHORT = \"-g\";\n \n-\n     private static final String THING_NAME_ARG = \"--thing-name\";\n     private static final String THING_NAME_ARG_SHORT = \"-tn\";\n     private static final String THING_NAME_DEFAULT = \"MyIotThing\";\n \n     private static final String THING_GROUP_NAME_ARG = \"--thing-group-name\";\n     private static final String THING_GROUP_NAME_ARG_SHORT = \"-tgn\";\n-    private static final String THING_GROUP_NAME_DEFAULT = \"MyIotThingGroup\";\n-\n-    private static final String POLICY_NAME_ARG = \"--policy-name\";\n-    private static final String POLICY_NAME_ARG_SHORT = \"-pn\";\n-    private static final String POLICY_NAME_DEFAULT = \"MyIotThingPolicy\";\n \n     private static final String TES_ROLE_NAME_ARG = \"--tes-role-name\";\n     private static final String TES_ROLE_NAME_ARG_SHORT = \"-trn\";\n-    private static final String TES_ROLE_NAME_DEFAULT = \"MyIotRoleForTes\";\n-\n-    // no defaults. must user input\n-    private static final String TES_ROLE_POLICY_NAME_ARG = \"--tes-role-policy-name\";\n-    private static final String TES_ROLE_POLICY_NAME_ARG_SHORT = \"-trpn\";\n-    private static final String TES_ROLE_POLICY_DOC_ARG = \"--tes-role-policy-doc\";\n-    private static final String TES_ROLE_POLICY_DOC_ARG_SHORT = \"-trpd\";\n+    private static final String TES_ROLE_NAME_DEFAULT = \"GreengrassV2TokenExchangeRole\";\n \n     private static final String TES_ROLE_ALIAS_NAME_ARG = \"--tes-role-alias-name\";\n     private static final String TES_ROLE_ALIAS_NAME_ARG_SHORT = \"-tra\";\n-    private static final String TES_ROLE_ALIAS_NAME_DEFAULT = \"MyIotRoleAliasForTes\";\n+    private static final String TES_ROLE_ALIAS_NAME_DEFAULT = \"GreengrassV2TokenExchangeRoleAlias\";\n \n     private static final String PROVISION_THING_ARG = \"--provision\";\n     private static final String PROVISION_THING_ARG_SHORT = \"-p\";\n     private static final boolean NEED_PROVISIONING_DEFAULT = false;\n \n-    private static final String SETUP_TES_ARG = \"--setup-tes\";\n-    private static final String SETUP_TES_ARG_SHORT = \"-t\";\n-    private static final boolean SETUP_TES_DEFAULT = false;\n-\n     private static final String AWS_REGION_ARG = \"--aws-region\";\n     private static final String AWS_REGION_ARG_SHORT = \"-ar\";\n     private static final String AWS_REGION_DEFAULT = \"us-east-1\";\n \n-    private static final String ENV_STAGE_ARG = \"--env-stage\";", "originalCommit": "60c0efe2d7adee9f5a2a2851f24252de2a5b4089", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzMjc1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r519032753", "bodyText": "I've left it there and removed from help/ readme but this being opensource customers can find it easily", "author": "shaguptashaikh", "createdAt": "2020-11-06T22:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMTUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c9089ccdd19b83fa8b61c24f422bdf5d3173ee4e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\nindex 62d5c98b64..38a9a2ec48 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n\n@@ -92,6 +91,10 @@ public class GreengrassSetup {\n     private static final String AWS_REGION_ARG_SHORT = \"-ar\";\n     private static final String AWS_REGION_DEFAULT = \"us-east-1\";\n \n+    private static final String ENV_STAGE_ARG = \"--env-stage\";\n+    private static final String ENV_STAGE_ARG_SHORT = \"-es\";\n+    private static final String ENV_STAGE_DEFAULT = \"prod\";\n+\n     private static final String SETUP_SYSTEM_SERVICE_ARG = \"--setup-system-service\";\n     private static final String SETUP_SYSTEM_SERVICE_ARG_SHORT = \"-ss\";\n     private static final boolean SETUP_SYSTEM_SERVICE_ARG_DEFAULT = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjI3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516832277", "bodyText": "Need S3:GetObject and S3:GetBucketLocation", "author": "MikeDombo", "createdAt": "2020-11-03T17:20:05Z", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -69,29 +83,61 @@\n  */\n @Getter\n public class DeviceProvisioningHelper {\n-\n-    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n+    private static final String GG_THING_POLICY_NAME = \"GreengrassV2ThingPolicy\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_SUFFIX = \"Access\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT = \"{\\n\"\n+            + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+            + \"    \\\"Statement\\\": [\\n\"\n+            + \"        {\\n\"\n+            + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+            + \"            \\\"Action\\\": [\\n\"\n+            + \"                \\\"greengrass:*\\\",\\n\"\n+            + \"                \\\"iot:DescribeCertificate\\\",\\n\"", "originalCommit": "60c0efe2d7adee9f5a2a2851f24252de2a5b4089", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMjMyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516902321", "bodyText": "Yes, but I'm reluctant to add that because we would need to do it for resources:* and I don't think customers will like that. We can either add that and ask customers to scope it down only to their artifact objects on their own, or we can leave it out of here and ask customers to add specific resource access to the policy on their own.", "author": "shaguptashaikh", "createdAt": "2020-11-03T19:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMzE3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516903174", "bodyText": "If we're leaving it out, then we know for a fact that the deployments won't work, so we should definitely print a very very clear comment that tells them what they need to do.", "author": "MikeDombo", "createdAt": "2020-11-03T19:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMzQ3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516903470", "bodyText": "Also, S3:GetBucketLocation should be safe, I'd throw that one in.", "author": "MikeDombo", "createdAt": "2020-11-03T19:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c9089ccdd19b83fa8b61c24f422bdf5d3173ee4e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\nindex 30565b4786..c8991853fc 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n\n@@ -83,76 +82,57 @@ import java.util.UUID;\n  */\n @Getter\n public class DeviceProvisioningHelper {\n+    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap\n+            .of(EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\", EnvironmentStage.GAMMA,\n+                    \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\", EnvironmentStage.BETA,\n+                    \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\");\n     private static final String GG_THING_POLICY_NAME = \"GreengrassV2ThingPolicy\";\n     private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_SUFFIX = \"Access\";\n-    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT = \"{\\n\"\n-            + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n-            + \"    \\\"Statement\\\": [\\n\"\n-            + \"        {\\n\"\n-            + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\"\n-            + \"            \\\"Action\\\": [\\n\"\n-            + \"                \\\"greengrass:*\\\",\\n\"\n-            + \"                \\\"iot:DescribeCertificate\\\",\\n\"\n-            + \"                \\\"logs:CreateLogGroup\\\",\\n\"\n-            + \"                \\\"logs:CreateLogStream\\\",\\n\"\n-            + \"                \\\"logs:PutLogEvents\\\",\\n\"\n-            + \"                \\\"logs:DescribeLogStreams\\\",\\n\"\n-            + \"                \\\"iot:Connect\\\",\\n\"\n-            + \"                \\\"iot:Publish\\\",\\n\"\n-            + \"                \\\"iot:Subscribe\\\",\\n\"\n-            + \"                \\\"iot:Receive\\\",\\n\"\n-            + \"                \\\"iot:GetThingShadow\\\",\\n\"\n-            + \"                \\\"iot:UpdateThingShadow\\\"\\n\"\n-            + \"            ],\\n\"\n-            + \"            \\\"Resource\\\": \\\"*\\\"\\n\"\n-            + \"        }\\n\"\n-            + \"    ]\\n\"\n-            + \"}\";\n-\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT =\n+            \"{\\n\" + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"    \\\"Statement\\\": [\\n\" + \"        {\\n\"\n+                    + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"            \\\"Action\\\": [\\n\"\n+                    + \"                \\\"iot:DescribeCertificate\\\",\\n\" + \"                \\\"logs:CreateLogGroup\\\",\\n\"\n+                    + \"                \\\"logs:CreateLogStream\\\",\\n\" + \"                \\\"logs:PutLogEvents\\\",\\n\"\n+                    + \"                \\\"logs:DescribeLogStreams\\\",\\n\" + \"                \\\"iot:Connect\\\",\\n\"\n+                    + \"                \\\"iot:Publish\\\",\\n\" + \"                \\\"iot:Subscribe\\\",\\n\"\n+                    + \"                \\\"iot:Receive\\\",\\n\" + \"            ],\\n\" + \"            \\\"Resource\\\": \\\"*\\\"\\n\"\n+                    + \"        }\\n\" + \"    ]\\n\" + \"}\";\n     private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n     private static final String IOT_ROLE_POLICY_NAME_PREFIX = \"GreengrassTESCertificatePolicy\";\n-\n+    // TODO : Need proper versions before launch and need to add CLI component\n+    private static final String HTTP_DEBUG_VIEW_COMPONENT_NAME = \"aws.greengrass.HttpDebugView\";\n+    private static final String HTTP_DEBUG_VIEW__COMPONENT_VERSION = \"0.0.0\";\n+    private static final String GGC_USER = \"ggc_user\";\n+    private static final String GGC_GROUP = \"ggc_group\";\n     private static final String E2E_TESTS_POLICY_NAME_PREFIX = \"E2ETestsIotPolicy\";\n     private static final String E2E_TESTS_THING_NAME_PREFIX = \"E2ETestsIotThing\";\n-\n-    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n-    private final Map<EnvironmentStage, String> tesServiceEndpoints = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"credentials.iot.amazonaws.com\",\n-            EnvironmentStage.GAMMA, \"credentials.iot.test.amazonaws.com\",\n-            EnvironmentStage.BETA, \"credentials.iot.test.amazonaws.com\"\n-    );\n-    private static final Map<IotSdkClientFactory.EnvironmentStage, String> STAGE_TO_ENDPOINT_FORMAT =\n-            ImmutableMap.of(\n-                    IotSdkClientFactory.EnvironmentStage.PROD, \"evergreen.%s.amazonaws.com\",\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String> STAGE_TO_ENDPOINT_FORMAT = ImmutableMap\n+            .of(IotSdkClientFactory.EnvironmentStage.PROD, \"evergreen.%s.amazonaws.com\",\n                     IotSdkClientFactory.EnvironmentStage.GAMMA, \"evergreen-gamma.%s.amazonaws.com\",\n-                    IotSdkClientFactory.EnvironmentStage.BETA, \"evergreen-beta.%s.amazonaws.com\"\n-            );\n-\n-    private EnvironmentStage envStage = EnvironmentStage.PROD;\n+                    IotSdkClientFactory.EnvironmentStage.BETA, \"evergreen-beta.%s.amazonaws.com\");\n+    private final Map<EnvironmentStage, String> tesServiceEndpoints = ImmutableMap\n+            .of(EnvironmentStage.PROD, \"credentials.iot.amazonaws.com\", EnvironmentStage.GAMMA,\n+                    \"credentials.iot.test.amazonaws.com\", EnvironmentStage.BETA, \"credentials.iot.test.amazonaws.com\");\n     private final PrintStream outStream;\n-\n     private final IotClient iotClient;\n     private final IamClient iamClient;\n     private final AWSEvergreen greengrassClient;\n+    private EnvironmentStage envStage = EnvironmentStage.PROD;\n \n     /**\n      * Constructor for a desired region and stage.\n      *\n-     * @param awsRegion aws region\n-     * @param outStream stream used to provide customer feedback\n+     * @param awsRegion        aws region\n+     * @param outStream        stream used to provide customer feedback\n      * @param environmentStage {@link EnvironmentStage}\n-     * @throws URISyntaxException when Iot endpoint is malformed\n+     * @throws URISyntaxException               when Iot endpoint is malformed\n      * @throws InvalidEnvironmentStageException when the environmentStage passes is invalid\n      */\n     public DeviceProvisioningHelper(String awsRegion, String environmentStage, PrintStream outStream)\n             throws URISyntaxException, InvalidEnvironmentStageException {\n         this.outStream = outStream;\n-        this.envStage = StringUtils.isEmpty(environmentStage)\n-                ? EnvironmentStage.PROD : EnvironmentStage.fromString(environmentStage);\n+        this.envStage = StringUtils.isEmpty(environmentStage) ? EnvironmentStage.PROD\n+                : EnvironmentStage.fromString(environmentStage);\n         this.iotClient = IotSdkClientFactory.getIotClient(awsRegion, envStage);\n         this.iamClient = IamSdkClientFactory.getIamClient();\n         this.greengrassClient = AWSEvergreenClientBuilder.standard().withEndpointConfiguration(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjY0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516832641", "bodyText": "capital N", "author": "MikeDombo", "createdAt": "2020-11-03T17:20:36Z", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -402,19 +312,14 @@ void provision(Kernel kernel) throws IOException, DeviceConfigurationException {\n                         thingGroupName);\n             outStream.printf(\"Successfully added Thing into Thing Group: [%s]%n\", thingGroupName);\n         }\n-\n-        // TODO: [P41215965]: setupTes should not be an arg anymore since role alias is required, need to remove\n-        //  this arg and always pass either user specified or a default role alias\n-        if (setupTes) {\n-            outStream.println(\"Setting up resources for TokenExchangeService...\");\n-            deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n-            if (tesRolePolicyName != null && tesRolePolicyDoc != null) {\n-                deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName, tesRolePolicyName, tesRolePolicyDoc);\n-            }\n-        }\n-        outStream.println(\"Configuring kernel with provisioned resource details...\");\n+        outStream.println(\"Setting up resources for TokenExchangeService...\");\n+        deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n+        deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName);\n+        outStream.println(\"Configuring nucleus with provisioned resource details...\");\n         deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, awsRegion, tesRoleAliasName);\n         outStream.println(\"Successfully configured kernel with provisioned resource details!\");\n+        deviceProvisioningHelper.createInitialDeploymentIfNeeded(thingInfo, thingGroupName);\n+        outStream.println(\"Configured nucleus to download HttpDebugView and GreengrassCli components\");", "originalCommit": "60c0efe2d7adee9f5a2a2851f24252de2a5b4089", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjk2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516832961", "bodyText": "Use consts for the real name of http and cli", "author": "MikeDombo", "createdAt": "2020-11-03T17:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c9089ccdd19b83fa8b61c24f422bdf5d3173ee4e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\nindex 62d5c98b64..38a9a2ec48 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n\n@@ -308,18 +327,25 @@ public class GreengrassSetup {\n                 thingName);\n         if (!Utils.isEmpty(thingGroupName)) {\n             outStream.printf(\"Adding IoT Thing [%s] into Thing Group: [%s]...%n\", thingName, thingGroupName);\n-                deviceProvisioningHelper.addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName,\n-                        thingGroupName);\n+            deviceProvisioningHelper\n+                    .addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName, thingGroupName);\n             outStream.printf(\"Successfully added Thing into Thing Group: [%s]%n\", thingGroupName);\n         }\n         outStream.println(\"Setting up resources for TokenExchangeService...\");\n         deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n         deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName);\n-        outStream.println(\"Configuring nucleus with provisioned resource details...\");\n+        outStream.println(\"Configuring Nucleus with provisioned resource details...\");\n         deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, awsRegion, tesRoleAliasName);\n         outStream.println(\"Successfully configured kernel with provisioned resource details!\");\n-        deviceProvisioningHelper.createInitialDeploymentIfNeeded(thingInfo, thingGroupName);\n-        outStream.println(\"Configured nucleus to download HttpDebugView and GreengrassCli components\");\n+        try {\n+            deviceProvisioningHelper.setDefaultUserAndGroup(defaultUser, defaultGroup);\n+        } catch (IOException | InterruptedException e) {\n+            throw new RuntimeException(\"Error setting up component default user / group\", e);\n+        }\n+        if (deployDevTools) {\n+            deviceProvisioningHelper.createInitialDeploymentIfNeeded(thingInfo, thingGroupName);\n+            outStream.println(\"Configured Nucleus to download HttpDebugView and GreengrassCli components\");\n+        }\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjc0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516832747", "bodyText": "capital N", "author": "MikeDombo", "createdAt": "2020-11-03T17:20:42Z", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -402,19 +312,14 @@ void provision(Kernel kernel) throws IOException, DeviceConfigurationException {\n                         thingGroupName);\n             outStream.printf(\"Successfully added Thing into Thing Group: [%s]%n\", thingGroupName);\n         }\n-\n-        // TODO: [P41215965]: setupTes should not be an arg anymore since role alias is required, need to remove\n-        //  this arg and always pass either user specified or a default role alias\n-        if (setupTes) {\n-            outStream.println(\"Setting up resources for TokenExchangeService...\");\n-            deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n-            if (tesRolePolicyName != null && tesRolePolicyDoc != null) {\n-                deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName, tesRolePolicyName, tesRolePolicyDoc);\n-            }\n-        }\n-        outStream.println(\"Configuring kernel with provisioned resource details...\");\n+        outStream.println(\"Setting up resources for TokenExchangeService...\");\n+        deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n+        deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName);\n+        outStream.println(\"Configuring nucleus with provisioned resource details...\");", "originalCommit": "60c0efe2d7adee9f5a2a2851f24252de2a5b4089", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9089ccdd19b83fa8b61c24f422bdf5d3173ee4e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\nindex 62d5c98b64..38a9a2ec48 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n\n@@ -308,18 +327,25 @@ public class GreengrassSetup {\n                 thingName);\n         if (!Utils.isEmpty(thingGroupName)) {\n             outStream.printf(\"Adding IoT Thing [%s] into Thing Group: [%s]...%n\", thingName, thingGroupName);\n-                deviceProvisioningHelper.addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName,\n-                        thingGroupName);\n+            deviceProvisioningHelper\n+                    .addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName, thingGroupName);\n             outStream.printf(\"Successfully added Thing into Thing Group: [%s]%n\", thingGroupName);\n         }\n         outStream.println(\"Setting up resources for TokenExchangeService...\");\n         deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n         deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName);\n-        outStream.println(\"Configuring nucleus with provisioned resource details...\");\n+        outStream.println(\"Configuring Nucleus with provisioned resource details...\");\n         deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, awsRegion, tesRoleAliasName);\n         outStream.println(\"Successfully configured kernel with provisioned resource details!\");\n-        deviceProvisioningHelper.createInitialDeploymentIfNeeded(thingInfo, thingGroupName);\n-        outStream.println(\"Configured nucleus to download HttpDebugView and GreengrassCli components\");\n+        try {\n+            deviceProvisioningHelper.setDefaultUserAndGroup(defaultUser, defaultGroup);\n+        } catch (IOException | InterruptedException e) {\n+            throw new RuntimeException(\"Error setting up component default user / group\", e);\n+        }\n+        if (deployDevTools) {\n+            deviceProvisioningHelper.createInitialDeploymentIfNeeded(thingInfo, thingGroupName);\n+            outStream.println(\"Configured Nucleus to download HttpDebugView and GreengrassCli components\");\n+        }\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjg0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r516832842", "bodyText": "use const for the real name of TES", "author": "MikeDombo", "createdAt": "2020-11-03T17:20:50Z", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -402,19 +312,14 @@ void provision(Kernel kernel) throws IOException, DeviceConfigurationException {\n                         thingGroupName);\n             outStream.printf(\"Successfully added Thing into Thing Group: [%s]%n\", thingGroupName);\n         }\n-\n-        // TODO: [P41215965]: setupTes should not be an arg anymore since role alias is required, need to remove\n-        //  this arg and always pass either user specified or a default role alias\n-        if (setupTes) {\n-            outStream.println(\"Setting up resources for TokenExchangeService...\");\n-            deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n-            if (tesRolePolicyName != null && tesRolePolicyDoc != null) {\n-                deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName, tesRolePolicyName, tesRolePolicyDoc);\n-            }\n-        }\n-        outStream.println(\"Configuring kernel with provisioned resource details...\");\n+        outStream.println(\"Setting up resources for TokenExchangeService...\");", "originalCommit": "60c0efe2d7adee9f5a2a2851f24252de2a5b4089", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9089ccdd19b83fa8b61c24f422bdf5d3173ee4e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\nindex 62d5c98b64..38a9a2ec48 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n\n@@ -308,18 +327,25 @@ public class GreengrassSetup {\n                 thingName);\n         if (!Utils.isEmpty(thingGroupName)) {\n             outStream.printf(\"Adding IoT Thing [%s] into Thing Group: [%s]...%n\", thingName, thingGroupName);\n-                deviceProvisioningHelper.addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName,\n-                        thingGroupName);\n+            deviceProvisioningHelper\n+                    .addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName, thingGroupName);\n             outStream.printf(\"Successfully added Thing into Thing Group: [%s]%n\", thingGroupName);\n         }\n         outStream.println(\"Setting up resources for TokenExchangeService...\");\n         deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n         deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName);\n-        outStream.println(\"Configuring nucleus with provisioned resource details...\");\n+        outStream.println(\"Configuring Nucleus with provisioned resource details...\");\n         deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, awsRegion, tesRoleAliasName);\n         outStream.println(\"Successfully configured kernel with provisioned resource details!\");\n-        deviceProvisioningHelper.createInitialDeploymentIfNeeded(thingInfo, thingGroupName);\n-        outStream.println(\"Configured nucleus to download HttpDebugView and GreengrassCli components\");\n+        try {\n+            deviceProvisioningHelper.setDefaultUserAndGroup(defaultUser, defaultGroup);\n+        } catch (IOException | InterruptedException e) {\n+            throw new RuntimeException(\"Error setting up component default user / group\", e);\n+        }\n+        if (deployDevTools) {\n+            deviceProvisioningHelper.createInitialDeploymentIfNeeded(thingInfo, thingGroupName);\n+            outStream.println(\"Configured Nucleus to download HttpDebugView and GreengrassCli components\");\n+        }\n \n     }\n \n"}}, {"oid": "c9089ccdd19b83fa8b61c24f422bdf5d3173ee4e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c9089ccdd19b83fa8b61c24f422bdf5d3173ee4e", "message": "Setup script changes", "committedDate": "2020-11-05T17:55:43Z", "type": "forcePushed"}, {"oid": "8fc984e3b7a830adfdfa868a534a20fb72399680", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8fc984e3b7a830adfdfa868a534a20fb72399680", "message": "Setup script changes", "committedDate": "2020-11-05T17:59:30Z", "type": "forcePushed"}, {"oid": "d232d81581aead69005b0fd60bb8d98e9789cf3d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d232d81581aead69005b0fd60bb8d98e9789cf3d", "message": "Setup script changes", "committedDate": "2020-11-05T19:24:31Z", "type": "forcePushed"}, {"oid": "af52f3472963199cc43f155bbb2342c2bf59ee7f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/af52f3472963199cc43f155bbb2342c2bf59ee7f", "message": "Setup script changes", "committedDate": "2020-11-05T19:29:47Z", "type": "forcePushed"}, {"oid": "2a294b0a414a0fd00cbd423d9c7d3e95a3132c87", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2a294b0a414a0fd00cbd423d9c7d3e95a3132c87", "message": "Setup script changes", "committedDate": "2020-11-05T19:33:22Z", "type": "forcePushed"}, {"oid": "bd5024ee05c1c2cb8e0572d10cfa7055fbd8e217", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bd5024ee05c1c2cb8e0572d10cfa7055fbd8e217", "message": "Setup script changes", "committedDate": "2020-11-05T20:32:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5ODc4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518398782", "bodyText": "we don't need this anymore? How does it get the right IoT client for the proper stage?", "author": "MikeDombo", "createdAt": "2020-11-05T22:06:58Z", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -368,21 +315,9 @@ void parseArgs() {\n             }\n         }\n \n-        // validate args\n-        if (this.tesRolePolicyName == null ^ this.tesRolePolicyDoc == null) {\n-            throw new RuntimeException(String.format(\"%s and %s must be provided together\", TES_ROLE_POLICY_NAME_ARG,\n-                    TES_ROLE_POLICY_DOC_ARG));\n-        }\n-\n         if (Region.of(awsRegion) == null) {\n             throw new RuntimeException(String.format(\"%s is invalid AWS region\", awsRegion));\n         }\n-\n-        try {\n-            IotSdkClientFactory.EnvironmentStage.fromString(environmentStage);", "originalCommit": "bd5024ee05c1c2cb8e0572d10cfa7055fbd8e217", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4667fe2c1376d5be17d77e73c24dad0af5428959", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\nindex 2c2352caca..7e39d93d91 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n\n@@ -318,6 +324,12 @@ public class GreengrassSetup {\n         if (Region.of(awsRegion) == null) {\n             throw new RuntimeException(String.format(\"%s is invalid AWS region\", awsRegion));\n         }\n+\n+        try {\n+            IotSdkClientFactory.EnvironmentStage.fromString(environmentStage);\n+        } catch (InvalidEnvironmentStageException e) {\n+            throw new RuntimeException(e);\n+        }\n     }\n \n     @SuppressWarnings(\"PMD.NullAssignment\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5OTQ5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518399495", "bodyText": "I think the S needs to be lowercase\nAlso, needs s3:HeadObject and s3:GetObject if you don't add it, we should at least print that we need those permissions.", "author": "MikeDombo", "createdAt": "2020-11-05T22:08:35Z", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -69,59 +82,93 @@\n  */\n @Getter\n public class DeviceProvisioningHelper {\n-\n-    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n-\n+    public static final Map<EnvironmentStage, String> GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap\n+            .of(EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\", EnvironmentStage.GAMMA,\n+                    \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\", EnvironmentStage.BETA,\n+                    \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\");\n+    private static final String GG_THING_POLICY_NAME = \"GreengrassV2ThingPolicy\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_SUFFIX = \"Access\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT =\n+            \"{\\n\" + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+                    + \"    \\\"Statement\\\": [\\n\"\n+                    + \"        {\\n\"\n+                    + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+                    + \"            \\\"Action\\\": [\\n\"\n+                    + \"                \\\"iot:DescribeCertificate\\\",\\n\"\n+                    + \"                \\\"logs:CreateLogGroup\\\",\\n\"\n+                    + \"                \\\"logs:CreateLogStream\\\",\\n\"\n+                    + \"                \\\"logs:PutLogEvents\\\",\\n\"\n+                    + \"                \\\"logs:DescribeLogStreams\\\",\\n\"\n+                    + \"                \\\"iot:Connect\\\",\\n\"\n+                    + \"                \\\"iot:Publish\\\",\\n\"\n+                    + \"                \\\"iot:Subscribe\\\",\\n\"\n+                    + \"                \\\"iot:Receive\\\",\\n\"\n+                    + \"                \\\"S3:GetBucketLocation\\\",\\n\"", "originalCommit": "bd5024ee05c1c2cb8e0572d10cfa7055fbd8e217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNDY4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518404688", "bodyText": "Talking to Finn about where the documentation should be, will update this accordingly", "author": "shaguptashaikh", "createdAt": "2020-11-05T22:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5OTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzMjExNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r519032115", "bodyText": "Talked to Finn, although it'll be nice to add S3 access here and make it easy for customers, but security is more important, so we decided to not include S2 get and head in the policy, in future we could add an option for list of buckets and also add that option to console if there is going to be an advance setup console option. Right now we have limited time so we'll keep it like this. We also decided to document it in various places, Finn will add it to AWS docs and I've included it in the help text and logs", "author": "shaguptashaikh", "createdAt": "2020-11-06T22:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5OTQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4667fe2c1376d5be17d77e73c24dad0af5428959", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\nindex 1d1c2685e1..e445e76216 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n\n@@ -103,7 +102,7 @@ public class DeviceProvisioningHelper {\n                     + \"                \\\"iot:Publish\\\",\\n\"\n                     + \"                \\\"iot:Subscribe\\\",\\n\"\n                     + \"                \\\"iot:Receive\\\",\\n\"\n-                    + \"                \\\"S3:GetBucketLocation\\\",\\n\"\n+                    + \"                \\\"s3:GetBucketLocation\\\"\\n\"\n                     + \"            ],\\n\"\n                     + \"            \\\"Resource\\\": \\\"*\\\"\\n\"\n                     + \"        }\\n\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5OTk1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518399959", "bodyText": "combine strings", "author": "MikeDombo", "createdAt": "2020-11-05T22:09:35Z", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -363,8 +432,83 @@ public void addThingToGroup(IotClient iotClient, String thingName, String thingG\n         } catch (ResourceAlreadyExistsException e) {\n             outStream.printf(\"IoT Thing Group \\\"%s\\\" already existed, reusing it%n\", thingGroupName);\n         }\n-        iotClient.addThingToThingGroup(AddThingToThingGroupRequest.builder()\n-                .thingName(thingName).thingGroupName(thingGroupName).build());\n+        iotClient.addThingToThingGroup(\n+                AddThingToThingGroupRequest.builder().thingName(thingName).thingGroupName(thingGroupName).build());\n+    }\n+\n+    private boolean thingGroupExists(String thingGroupName) {\n+        try {\n+            return thingGroupName.equals(iotClient\n+                    .describeThingGroup(DescribeThingGroupRequest.builder().thingGroupName(thingGroupName).build())\n+                    .thingGroupName());\n+        } catch (ResourceNotFoundException e) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Creates an initial deployment to deploy dev tools like the Greengrass CLI and the Http Debug View component.\n+     *\n+     * @param thingInfo thing info for the device\n+     * @param thingGroupName thing group name\n+     */\n+    public void createInitialDeploymentIfNeeded(ThingInfo thingInfo, String thingGroupName) {\n+        if (Utils.isNotEmpty(thingGroupName) && thingGroupExists(thingGroupName)) {\n+            outStream.println(\n+                    \"Thing group exists, no need to create a deployment for Greengrass first party \" + \"components\");", "originalCommit": "bd5024ee05c1c2cb8e0572d10cfa7055fbd8e217", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4667fe2c1376d5be17d77e73c24dad0af5428959", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\nindex 1d1c2685e1..e445e76216 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n\n@@ -474,41 +470,14 @@ public class DeviceProvisioningHelper {\n             deploymentRequest.withTargetName(thingInfo.thingName).withTargetType(\"thing\");\n         }\n \n-        // TODO : Add CLI component\n         deploymentRequest.addComponentsEntry(HTTP_DEBUG_VIEW_COMPONENT_NAME,\n-                new ComponentInfo().withVersion(HTTP_DEBUG_VIEW__COMPONENT_VERSION));\n+                new ComponentInfo().withVersion(HTTP_DEBUG_VIEW__COMPONENT_VERSION))\n+                .addComponentsEntry(GREENGRASS_CLI_COMPONENT_NAME,\n+                        new ComponentInfo().withVersion(GREENGRASS_CLI_COMPONENT_VERSION));\n \n         greengrassClient.createDeployment(deploymentRequest);\n-    }\n-\n-    /**\n-     * Set the default user and group to run components with, if the current user is a super user and the user or group\n-     * are not provided then ggc_user or ggc_group will be created.\n-     *\n-     * @param defaultUser  default user provided by user\n-     * @param defaultGroup default group provided by user\n-     * @throws IOException          If the provided user or group does not exist\n-     * @throws InterruptedException Error creating ggc_user or ggc_group\n-     */\n-    public void setDefaultUserAndGroup(String defaultUser, String defaultGroup)\n-            throws IOException, InterruptedException {\n-        Platform platform = Platform.getInstance();\n-        // If not super user and default user option is not provided, the current user will be used\n-        // as the default user so we do not need to create anything here\n-        if (platform.lookupCurrentUser().isSuperUser()) {\n-            if (Utils.isNotEmpty(defaultUser)) {\n-                // Ensure user exists\n-                platform.lookupUserByName(defaultUser);\n-            } else {\n-                platform.createUser(GGC_USER);\n-            }\n-            if (Utils.isNotEmpty(defaultGroup)) {\n-                // Ensure group exists\n-                platform.lookupGroupByName(defaultGroup);\n-            } else {\n-                platform.createGroup(GGC_GROUP);\n-            }\n-        }\n+        outStream.printf(\"Configured Nucleus to deploy components %s and %s %n\", GREENGRASS_CLI_COMPONENT_NAME,\n+                HTTP_DEBUG_VIEW_COMPONENT_NAME);\n     }\n \n     @AllArgsConstructor\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMDMwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518400307", "bodyText": "after creating users, set them as the default user in the config?", "author": "MikeDombo", "createdAt": "2020-11-05T22:10:19Z", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -363,8 +432,83 @@ public void addThingToGroup(IotClient iotClient, String thingName, String thingG\n         } catch (ResourceAlreadyExistsException e) {\n             outStream.printf(\"IoT Thing Group \\\"%s\\\" already existed, reusing it%n\", thingGroupName);\n         }\n-        iotClient.addThingToThingGroup(AddThingToThingGroupRequest.builder()\n-                .thingName(thingName).thingGroupName(thingGroupName).build());\n+        iotClient.addThingToThingGroup(\n+                AddThingToThingGroupRequest.builder().thingName(thingName).thingGroupName(thingGroupName).build());\n+    }\n+\n+    private boolean thingGroupExists(String thingGroupName) {\n+        try {\n+            return thingGroupName.equals(iotClient\n+                    .describeThingGroup(DescribeThingGroupRequest.builder().thingGroupName(thingGroupName).build())\n+                    .thingGroupName());\n+        } catch (ResourceNotFoundException e) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Creates an initial deployment to deploy dev tools like the Greengrass CLI and the Http Debug View component.\n+     *\n+     * @param thingInfo thing info for the device\n+     * @param thingGroupName thing group name\n+     */\n+    public void createInitialDeploymentIfNeeded(ThingInfo thingInfo, String thingGroupName) {\n+        if (Utils.isNotEmpty(thingGroupName) && thingGroupExists(thingGroupName)) {\n+            outStream.println(\n+                    \"Thing group exists, no need to create a deployment for Greengrass first party \" + \"components\");\n+            return;\n+        }\n+\n+        CreateDeploymentRequest deploymentRequest = new CreateDeploymentRequest().withDeploymentPolicies(\n+                new DeploymentPolicies()\n+                        .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(60))\n+                        .withComponentUpdatePolicy(\n+                                new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n+                                        .withTimeout(60)).withFailureHandlingPolicy(FailureHandlingPolicy.ROLLBACK));\n+\n+        if (Utils.isNotEmpty(thingGroupName)) {\n+            outStream.println(\"Creating a deployment for Greengrass first party components to the thing group\");\n+            deploymentRequest.withTargetName(thingGroupName).withTargetType(\"thinggroup\");\n+        } else {\n+            outStream.println(\"Creating a deployment for Greengrass first party components to the device\");\n+            deploymentRequest.withTargetName(thingInfo.thingName).withTargetType(\"thing\");\n+        }\n+\n+        // TODO : Add CLI component\n+        deploymentRequest.addComponentsEntry(HTTP_DEBUG_VIEW_COMPONENT_NAME,\n+                new ComponentInfo().withVersion(HTTP_DEBUG_VIEW__COMPONENT_VERSION));\n+\n+        greengrassClient.createDeployment(deploymentRequest);\n+    }\n+\n+    /**\n+     * Set the default user and group to run components with, if the current user is a super user and the user or group\n+     * are not provided then ggc_user or ggc_group will be created.\n+     *\n+     * @param defaultUser  default user provided by user\n+     * @param defaultGroup default group provided by user\n+     * @throws IOException          If the provided user or group does not exist\n+     * @throws InterruptedException Error creating ggc_user or ggc_group\n+     */\n+    public void setDefaultUserAndGroup(String defaultUser, String defaultGroup)\n+            throws IOException, InterruptedException {\n+        Platform platform = Platform.getInstance();\n+        // If not super user and default user option is not provided, the current user will be used\n+        // as the default user so we do not need to create anything here\n+        if (platform.lookupCurrentUser().isSuperUser()) {\n+            if (Utils.isNotEmpty(defaultUser)) {\n+                // Ensure user exists\n+                platform.lookupUserByName(defaultUser);\n+            } else {\n+                platform.createUser(GGC_USER);\n+            }\n+            if (Utils.isNotEmpty(defaultGroup)) {\n+                // Ensure group exists\n+                platform.lookupGroupByName(defaultGroup);\n+            } else {\n+                platform.createGroup(GGC_GROUP);", "originalCommit": "bd5024ee05c1c2cb8e0572d10cfa7055fbd8e217", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwNTA0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518405045", "bodyText": "Hmm, the kernel launch does that, but with this change when we setup the ggc user and group, it will get skipped, will fix", "author": "shaguptashaikh", "createdAt": "2020-11-05T22:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMDMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "4667fe2c1376d5be17d77e73c24dad0af5428959", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\nindex 1d1c2685e1..e445e76216 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n\n@@ -474,41 +470,14 @@ public class DeviceProvisioningHelper {\n             deploymentRequest.withTargetName(thingInfo.thingName).withTargetType(\"thing\");\n         }\n \n-        // TODO : Add CLI component\n         deploymentRequest.addComponentsEntry(HTTP_DEBUG_VIEW_COMPONENT_NAME,\n-                new ComponentInfo().withVersion(HTTP_DEBUG_VIEW__COMPONENT_VERSION));\n+                new ComponentInfo().withVersion(HTTP_DEBUG_VIEW__COMPONENT_VERSION))\n+                .addComponentsEntry(GREENGRASS_CLI_COMPONENT_NAME,\n+                        new ComponentInfo().withVersion(GREENGRASS_CLI_COMPONENT_VERSION));\n \n         greengrassClient.createDeployment(deploymentRequest);\n-    }\n-\n-    /**\n-     * Set the default user and group to run components with, if the current user is a super user and the user or group\n-     * are not provided then ggc_user or ggc_group will be created.\n-     *\n-     * @param defaultUser  default user provided by user\n-     * @param defaultGroup default group provided by user\n-     * @throws IOException          If the provided user or group does not exist\n-     * @throws InterruptedException Error creating ggc_user or ggc_group\n-     */\n-    public void setDefaultUserAndGroup(String defaultUser, String defaultGroup)\n-            throws IOException, InterruptedException {\n-        Platform platform = Platform.getInstance();\n-        // If not super user and default user option is not provided, the current user will be used\n-        // as the default user so we do not need to create anything here\n-        if (platform.lookupCurrentUser().isSuperUser()) {\n-            if (Utils.isNotEmpty(defaultUser)) {\n-                // Ensure user exists\n-                platform.lookupUserByName(defaultUser);\n-            } else {\n-                platform.createUser(GGC_USER);\n-            }\n-            if (Utils.isNotEmpty(defaultGroup)) {\n-                // Ensure group exists\n-                platform.lookupGroupByName(defaultGroup);\n-            } else {\n-                platform.createGroup(GGC_GROUP);\n-            }\n-        }\n+        outStream.printf(\"Configured Nucleus to deploy components %s and %s %n\", GREENGRASS_CLI_COMPONENT_NAME,\n+                HTTP_DEBUG_VIEW_COMPONENT_NAME);\n     }\n \n     @AllArgsConstructor\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMDY1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518400651", "bodyText": "Add TODO with SIM id to the windows epic.", "author": "MikeDombo", "createdAt": "2020-11-05T22:11:02Z", "path": "src/main/java/com/aws/greengrass/util/platforms/WindowsPlatform.java", "diffHunk": "@@ -84,6 +84,16 @@ public void validateDefaultConfiguration(DeviceConfiguration deviceConfig)\n         };\n     }\n \n+    @Override\n+    public void createUser(String user) throws IOException, InterruptedException {\n+        // yet to support\n+    }\n+\n+    @Override\n+    public void createGroup(String group) throws IOException, InterruptedException {\n+        // yet to support", "originalCommit": "bd5024ee05c1c2cb8e0572d10cfa7055fbd8e217", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4667fe2c1376d5be17d77e73c24dad0af5428959", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/WindowsPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/WindowsPlatform.java\nindex 999653b798..d6359f78e8 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/WindowsPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/WindowsPlatform.java\n\n@@ -86,12 +86,17 @@ public class WindowsPlatform extends Platform {\n \n     @Override\n     public void createUser(String user) throws IOException, InterruptedException {\n-        // yet to support\n+        // TODO: [P41452086]: Windows support - create user/group, add user to group\n     }\n \n     @Override\n     public void createGroup(String group) throws IOException, InterruptedException {\n-        // yet to support\n+        // TODO: [P41452086]: Windows support - create user/group, add user to group\n+    }\n+\n+    @Override\n+    public void addUserToGroup(String user, String group) throws IOException, InterruptedException {\n+        // TODO: [P41452086]: Windows support - create user/group, add user to group\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTM2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518401369", "bodyText": "cmd takes a varargs list. Each argument should be a separate argument", "author": "MikeDombo", "createdAt": "2020-11-05T22:12:41Z", "path": "src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms.unix;\n+\n+import com.aws.greengrass.util.Exec;\n+\n+import java.io.IOException;\n+\n+public class DarwinPlatform extends UnixPlatform {\n+    @Override\n+    public void createUser(String user) throws IOException, InterruptedException {\n+        Exec.cmd(\"dscl . create /Users/\" + user);", "originalCommit": "bd5024ee05c1c2cb8e0572d10cfa7055fbd8e217", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4667fe2c1376d5be17d77e73c24dad0af5428959", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java\nindex 2997066f39..4a56c7d3bd 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java\n\n@@ -8,15 +8,51 @@ package com.aws.greengrass.util.platforms.unix;\n import com.aws.greengrass.util.Exec;\n \n import java.io.IOException;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n \n public class DarwinPlatform extends UnixPlatform {\n+    private static String CREATE_USER_CMD_PREFIX = \"sudo dscl . -create /Users/\";\n+    private static String AVAILABLE_UNIQUE_ID_CMD =\n+            \"dscl . -list /Users UniqueID | awk '{print $2}' | sort -ug | tail -1\";\n+    private static String CREATE_GROUP_CMD_PREFIX = \"sudo dscl . -create /Groups/\";\n+    private static String AVAILABLE_GID_CMD = \"dscl . -list /Groups gid | awk '{print $2}' | sort -ug | tail -1\";\n+    private static String ADD_USER_TO_GROUP_CMD_PREFIX = \"sudo dscl . -append /Groups/\";\n+\n     @Override\n     public void createUser(String user) throws IOException, InterruptedException {\n-        Exec.cmd(\"dscl . create /Users/\" + user);\n+        try (Exec exec = new Exec()) {\n+            AtomicLong uniqueUid = new AtomicLong();\n+            Optional<Integer> exit = exec.withExec(AVAILABLE_UNIQUE_ID_CMD.split(\" \")).withShell().withOut(o -> {\n+                uniqueUid.set(Long.parseLong(o.toString().replaceAll(\"\\\\n\", \"\")) + 1L);\n+            }).exec();\n+            if (!exit.isPresent() && exit.get() != 0) {\n+                throw new IOException(\"Cannot get a unique id for creating user\");\n+            }\n+            exec.cmd((CREATE_USER_CMD_PREFIX + user).split(\" \"));\n+            exec.cmd((CREATE_USER_CMD_PREFIX + user + \" UserShell /bin/bash\").split(\" \"));\n+            exec.cmd((CREATE_USER_CMD_PREFIX + user + \" UniqueID \" + uniqueUid.get()).split(\" \"));\n+            exec.cmd((CREATE_USER_CMD_PREFIX + user + \" PrimaryGroupID \" + uniqueUid.get()).split(\" \"));\n+        }\n     }\n \n     @Override\n     public void createGroup(String group) throws IOException, InterruptedException {\n-        Exec.cmd(\"dscl . create /Groups/\" + group);\n+        try (Exec exec = new Exec()) {\n+            AtomicLong gid = new AtomicLong();\n+            Optional<Integer> exit = exec.withExec(AVAILABLE_GID_CMD.split(\" \")).withShell().withOut(o -> {\n+                gid.set(Long.parseLong(o.toString().replaceAll(\"\\\\n\", \"\")) + 1L);\n+            }).exec();\n+            if (!exit.isPresent() && exit.get() != 0) {\n+                throw new IOException(\"Cannot get a unique gid for creating group\");\n+            }\n+            exec.cmd((CREATE_GROUP_CMD_PREFIX + group).split(\" \"));\n+            exec.cmd((CREATE_GROUP_CMD_PREFIX + group + \" PrimaryGroupID \" + gid.get()).split(\" \"));\n+        }\n+    }\n+\n+    @Override\n+    public void addUserToGroup(String user, String group) throws IOException, InterruptedException {\n+        Exec.cmd((ADD_USER_TO_GROUP_CMD_PREFIX + group + \" GroupMembership \" + user).split(\" \"));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTQyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518401421", "bodyText": "use varargs", "author": "MikeDombo", "createdAt": "2020-11-05T22:12:47Z", "path": "src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java", "diffHunk": "@@ -307,6 +307,16 @@ public UnixRunWithGenerator getRunWithGenerator() {\n         return runWithGenerator;\n     }\n \n+    @Override\n+    public void createUser(String user) throws IOException, InterruptedException {\n+        Exec.cmd(\"useradd -m \" + user);\n+    }\n+\n+    @Override\n+    public void createGroup(String group) throws IOException, InterruptedException {\n+        Exec.cmd(\"groupadd\" + group);", "originalCommit": "bd5024ee05c1c2cb8e0572d10cfa7055fbd8e217", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4667fe2c1376d5be17d77e73c24dad0af5428959", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java\nindex 9a5b4a78c3..337cd3a680 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java\n\n@@ -309,73 +312,89 @@ public class UnixPlatform extends Platform {\n \n     @Override\n     public void createUser(String user) throws IOException, InterruptedException {\n-        Exec.cmd(\"useradd -m \" + user);\n+        Exec.cmd(\"useradd\", \"-m\", user);\n     }\n \n     @Override\n     public void createGroup(String group) throws IOException, InterruptedException {\n-        Exec.cmd(\"groupadd\" + group);\n+        Exec.cmd(\"groupadd\", group);\n     }\n \n     @Override\n-    public void setPermissions(FileSystemPermission permission, Path path, EnumSet<FileSystemPermission.Option> options)\n+    public void addUserToGroup(String user, String group) throws IOException, InterruptedException {\n+        Exec.cmd(\"usermod\", \"-a\", \"-G\", group, user);\n+    }\n+\n+    @Override\n+    public void setPermissions(FileSystemPermission permission, Path path, EnumSet<Option> options)\n             throws IOException {\n \n         // noop function that does not set owner\n         CrashableFunction<PosixFileAttributeView, Void, IOException> setOwner = (p) -> null;\n \n-        if (!options.contains(FileSystemPermission.Option.IgnoreOwner)\n-                && !Utils.isEmpty(permission.getOwnerUser())) {\n-            UserPrincipalLookupService lookupService = path.getFileSystem().getUserPrincipalLookupService();\n-            UserPrincipal userPrincipal = lookupService.lookupPrincipalByName(permission.getOwnerUser());\n-            GroupPrincipal groupPrincipal = Utils.isEmpty(permission.getOwnerGroup()) ? null\n-                    : lookupService.lookupPrincipalByGroupName(permission.getOwnerGroup());\n-\n-            setOwner = (view) -> {\n-                logger.atTrace().setEventType(\"set-permissions\").kv(\"path\", path).kv(\"owner\",\n-                        permission.getOwnerUser()).log();\n-                view.setOwner(userPrincipal);\n-                if (groupPrincipal != null) {\n-                    logger.atTrace().setEventType(\"set-permissions\").kv(\"path\", path).kv(\"group\",\n-                            permission.getOwnerGroup()).log();\n-                    view.setGroup(groupPrincipal);\n-                }\n-                return null;\n-            };\n+        if (options.contains(Option.SetOwner)) {\n+            if (Utils.isEmpty(permission.getOwnerUser())) {\n+                logger.atTrace().setEventType(SET_PERMISSIONS_EVENT).kv(PATH, path).log(\"No owner to set for path\");\n+            } else {\n+                UserPrincipalLookupService lookupService = path.getFileSystem().getUserPrincipalLookupService();\n+                UserPrincipal userPrincipal = lookupService.lookupPrincipalByName(permission.getOwnerUser());\n+                GroupPrincipal groupPrincipal = Utils.isEmpty(permission.getOwnerGroup()) ? null :\n+                        lookupService.lookupPrincipalByGroupName(permission.getOwnerGroup());\n+\n+                setOwner = (view) -> {\n+                    logger.atTrace().setEventType(SET_PERMISSIONS_EVENT).kv(PATH, path)\n+                            .kv(\"owner\", permission.getOwnerUser()).log();\n+                    view.setOwner(userPrincipal);\n+                    if (groupPrincipal != null) {\n+                        logger.atTrace().setEventType(SET_PERMISSIONS_EVENT).kv(PATH, path)\n+                                .kv(\"group\", permission.getOwnerGroup()).log();\n+                        view.setGroup(groupPrincipal);\n+                    }\n+                    return null;\n+                };\n+            }\n         }\n \n-        final CrashableFunction<PosixFileAttributeView, Void, IOException> setOwnerFunc = setOwner;\n \n-        Set<PosixFilePermission> perms = permission.toPosixFilePermissions();\n+        // noop function that does not change the file mode\n+        CrashableFunction<PosixFileAttributeView, Void, IOException> setMode = (p) -> null;\n \n-        CrashableFunction<Path, Void, IOException> setPerm = (p) -> {\n-            PosixFileAttributeView view =\n-                    Files.getFileAttributeView(p, PosixFileAttributeView.class, LinkOption.NOFOLLOW_LINKS);\n-            setOwnerFunc.apply(view);\n-            if (!options.contains(FileSystemPermission.Option.IgnorePermission)) {\n-                logger.atTrace().setEventType(\"set-permissions\").kv(\"path\", p).kv(\"perm\",\n+        if (options.contains(Option.SetMode)) {\n+            Set<PosixFilePermission> perms = permission.toPosixFilePermissions();\n+            setMode = (view) -> {\n+                logger.atTrace().setEventType(SET_PERMISSIONS_EVENT).kv(PATH, path).kv(\"perm\",\n                         PosixFilePermissions.toString(perms)).log();\n                 view.setPermissions(perms);\n-            }\n-            return null;\n-        };\n-\n-        if (options.contains(FileSystemPermission.Option.Recurse)) {\n+               return null;\n+           };\n+        }\n+        final CrashableFunction<PosixFileAttributeView, Void, IOException> setModeFunc = setMode;\n+        final CrashableFunction<PosixFileAttributeView, Void, IOException> setOwnerFunc = setOwner;\n+        if (options.contains(Option.Recurse)) {\n             Files.walkFileTree(path, new SimpleFileVisitor<Path>() {\n                 @Override\n                 public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                    setPerm.apply(dir);\n+                    PosixFileAttributeView view = Files.getFileAttributeView(dir, PosixFileAttributeView.class,\n+                            LinkOption.NOFOLLOW_LINKS);\n+                    setModeFunc.apply(view);\n+                    setOwnerFunc.apply(view);\n                     return FileVisitResult.CONTINUE;\n                 }\n \n                 @Override\n                 public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                    setPerm.apply(file);\n+                    PosixFileAttributeView view = Files.getFileAttributeView(file, PosixFileAttributeView.class,\n+                            LinkOption.NOFOLLOW_LINKS);\n+                    setModeFunc.apply(view);\n+                    setOwnerFunc.apply(view);\n                     return FileVisitResult.CONTINUE;\n                 }\n             });\n         } else {\n-            setPerm.apply(path);\n+            PosixFileAttributeView view = Files.getFileAttributeView(path, PosixFileAttributeView.class,\n+                    LinkOption.NOFOLLOW_LINKS);\n+            setModeFunc.apply(view);\n+            setOwnerFunc.apply(view);\n         }\n     }\n \n"}}, {"oid": "4667fe2c1376d5be17d77e73c24dad0af5428959", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4667fe2c1376d5be17d77e73c24dad0af5428959", "message": "Setup script changes", "committedDate": "2020-11-06T06:37:53Z", "type": "forcePushed"}, {"oid": "cb2233cd25f3bf73bbf06a1c8100b87a94954ee0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cb2233cd25f3bf73bbf06a1c8100b87a94954ee0", "message": "Setup script changes", "committedDate": "2020-11-06T06:38:53Z", "type": "forcePushed"}, {"oid": "3ca7f9fbd59f523d33e396728e800866d5ef1f5d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3ca7f9fbd59f523d33e396728e800866d5ef1f5d", "message": "Setup script changes", "committedDate": "2020-11-06T06:51:24Z", "type": "forcePushed"}, {"oid": "2d36be27942604638aeeda46620ecf98399bd170", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2d36be27942604638aeeda46620ecf98399bd170", "message": "Setup script changes", "committedDate": "2020-11-06T07:45:04Z", "type": "forcePushed"}, {"oid": "d2b5caf632fe98edde0f5e4487068b5891e00857", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d2b5caf632fe98edde0f5e4487068b5891e00857", "message": "Setup script changes", "committedDate": "2020-11-06T07:53:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3NDMzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518574339", "bodyText": "remove doubled underscore", "author": "MikeDombo", "createdAt": "2020-11-06T07:47:51Z", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -69,59 +81,96 @@\n  */\n @Getter\n public class DeviceProvisioningHelper {\n+    private static final String GG_THING_POLICY_NAME = \"GreengrassV2ThingPolicy\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_SUFFIX = \"Access\";\n+    private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT =\n+            \"{\\n\" + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+                    + \"    \\\"Statement\\\": [\\n\"\n+                    + \"        {\\n\"\n+                    + \"            \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+                    + \"            \\\"Action\\\": [\\n\"\n+                    + \"                \\\"iot:DescribeCertificate\\\",\\n\"\n+                    + \"                \\\"logs:CreateLogGroup\\\",\\n\"\n+                    + \"                \\\"logs:CreateLogStream\\\",\\n\"\n+                    + \"                \\\"logs:PutLogEvents\\\",\\n\"\n+                    + \"                \\\"logs:DescribeLogStreams\\\",\\n\"\n+                    + \"                \\\"iot:Connect\\\",\\n\"\n+                    + \"                \\\"iot:Publish\\\",\\n\"\n+                    + \"                \\\"iot:Subscribe\\\",\\n\"\n+                    + \"                \\\"iot:Receive\\\",\\n\"\n+                    + \"                \\\"s3:GetBucketLocation\\\"\\n\"\n+                    + \"            ],\\n\"\n+                    + \"            \\\"Resource\\\": \\\"*\\\"\\n\"\n+                    + \"        }\\n\"\n+                    + \"    ]\\n\"\n+                    + \"}\";\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final String IOT_ROLE_POLICY_NAME_PREFIX = \"GreengrassTESCertificatePolicy\";\n+    private static final String HTTP_DEBUG_VIEW_COMPONENT_NAME = \"aws.greengrass.HttpDebugView\";\n+    private static final String HTTP_DEBUG_VIEW__COMPONENT_VERSION = \"1.0.0\";", "originalCommit": "2d36be27942604638aeeda46620ecf98399bd170", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5979f26a4d3194de86900965d14faa1e4181b4a3", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\nindex 1cc708c3cc..eb9450d983 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n\n@@ -81,7 +81,7 @@ import java.util.UUID;\n  */\n @Getter\n public class DeviceProvisioningHelper {\n-    private static final String GG_THING_POLICY_NAME = \"GreengrassV2ThingPolicy\";\n+    private static final String GG_THING_POLICY_NAME = \"GreengrassV2IoTThingPolicy\";\n     private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_SUFFIX = \"Access\";\n     private static final String GG_TOKEN_EXCHANGE_ROLE_ACCESS_POLICY_DOCUMENT =\n             \"{\\n\" + \"    \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3NTUxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518575516", "bodyText": "add a separator like - between the random", "author": "MikeDombo", "createdAt": "2020-11-06T07:50:35Z", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -78,41 +78,25 @@\n     private static final String DEFAULT_GROUP_ARG = \"--component-default-group\";\n     private static final String DEFAULT_GROUP_ARG_SHORT = \"-g\";\n \n-\n     private static final String THING_NAME_ARG = \"--thing-name\";\n     private static final String THING_NAME_ARG_SHORT = \"-tn\";\n-    private static final String THING_NAME_DEFAULT = \"MyIotThing\";\n+    private static final String THING_NAME_DEFAULT = \"GreengrassV2IotThing\" + UUID.randomUUID();", "originalCommit": "2d36be27942604638aeeda46620ecf98399bd170", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5979f26a4d3194de86900965d14faa1e4181b4a3", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\nindex bf15979f64..3a375e8e6c 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n\n@@ -80,7 +80,7 @@ public class GreengrassSetup {\n \n     private static final String THING_NAME_ARG = \"--thing-name\";\n     private static final String THING_NAME_ARG_SHORT = \"-tn\";\n-    private static final String THING_NAME_DEFAULT = \"GreengrassV2IotThing\" + UUID.randomUUID();\n+    private static final String THING_NAME_DEFAULT = \"GreengrassV2IotThing_\" + UUID.randomUUID();\n \n     private static final String THING_GROUP_NAME_ARG = \"--thing-group-name\";\n     private static final String THING_GROUP_NAME_ARG_SHORT = \"-tgn\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3NzkyNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518577926", "bodyText": "this technically works, but Exec isn't really built and tested to be able to run multiple commands using the same instance.", "author": "MikeDombo", "createdAt": "2020-11-06T07:56:12Z", "path": "src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms.unix;\n+\n+import com.aws.greengrass.util.Exec;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class DarwinPlatform extends UnixPlatform {\n+    private static String CREATE_USER_CMD_PREFIX = \"sudo dscl . -create /Users/\";\n+    private static String AVAILABLE_UNIQUE_ID_CMD =\n+            \"dscl . -list /Users UniqueID | awk '{print $2}' | sort -ug | tail -1\";\n+    private static String CREATE_GROUP_CMD_PREFIX = \"sudo dscl . -create /Groups/\";\n+    private static String AVAILABLE_GID_CMD = \"dscl . -list /Groups gid | awk '{print $2}' | sort -ug | tail -1\";\n+    private static String ADD_USER_TO_GROUP_CMD_PREFIX = \"sudo dscl . -append /Groups/\";\n+\n+    @Override\n+    public void createUser(String user) throws IOException, InterruptedException {\n+        try (Exec exec = new Exec()) {", "originalCommit": "d2b5caf632fe98edde0f5e4487068b5891e00857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMDkwNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518900904", "bodyText": "It wasn't running multiple commands, made that more clear now", "author": "shaguptashaikh", "createdAt": "2020-11-06T17:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3NzkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "5979f26a4d3194de86900965d14faa1e4181b4a3", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java\nindex 4a56c7d3bd..d2974f4b2f 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/unix/DarwinPlatform.java\n\n@@ -29,10 +29,10 @@ public class DarwinPlatform extends UnixPlatform {\n             if (!exit.isPresent() && exit.get() != 0) {\n                 throw new IOException(\"Cannot get a unique id for creating user\");\n             }\n-            exec.cmd((CREATE_USER_CMD_PREFIX + user).split(\" \"));\n-            exec.cmd((CREATE_USER_CMD_PREFIX + user + \" UserShell /bin/bash\").split(\" \"));\n-            exec.cmd((CREATE_USER_CMD_PREFIX + user + \" UniqueID \" + uniqueUid.get()).split(\" \"));\n-            exec.cmd((CREATE_USER_CMD_PREFIX + user + \" PrimaryGroupID \" + uniqueUid.get()).split(\" \"));\n+            Exec.cmd((CREATE_USER_CMD_PREFIX + user).split(\" \"));\n+            Exec.cmd((CREATE_USER_CMD_PREFIX + user + \" UserShell /bin/bash\").split(\" \"));\n+            Exec.cmd((CREATE_USER_CMD_PREFIX + user + \" UniqueID \" + uniqueUid.get()).split(\" \"));\n+            Exec.cmd((CREATE_USER_CMD_PREFIX + user + \" PrimaryGroupID \" + uniqueUid.get()).split(\" \"));\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3ODk2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518578962", "bodyText": "Capture errors if this fails with logging.\nSame for all of these", "author": "MikeDombo", "createdAt": "2020-11-06T07:58:28Z", "path": "src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java", "diffHunk": "@@ -310,6 +310,21 @@ public UnixRunWithGenerator getRunWithGenerator() {\n         return runWithGenerator;\n     }\n \n+    @Override\n+    public void createUser(String user) throws IOException, InterruptedException {\n+        Exec.cmd(\"useradd\", \"-m\", user);", "originalCommit": "d2b5caf632fe98edde0f5e4487068b5891e00857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMTAxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r518901016", "bodyText": "Sure", "author": "shaguptashaikh", "createdAt": "2020-11-06T17:34:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3ODk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9c2c0ab41c0b1d9b4f9ddbaa56d6f0a5bb0a1fba", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java\nindex 337cd3a680..0c8dfd35a4 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java\n\n@@ -312,17 +327,17 @@ public class UnixPlatform extends Platform {\n \n     @Override\n     public void createUser(String user) throws IOException, InterruptedException {\n-        Exec.cmd(\"useradd\", \"-m\", user);\n+        runCmd(\"useradd -m \" + user, o -> {}, \"Failed to create user\");\n     }\n \n     @Override\n     public void createGroup(String group) throws IOException, InterruptedException {\n-        Exec.cmd(\"groupadd\", group);\n+        runCmd(\"groupadd \" + group, o -> {}, \"Failed to create group\");\n     }\n \n     @Override\n     public void addUserToGroup(String user, String group) throws IOException, InterruptedException {\n-        Exec.cmd(\"usermod\", \"-a\", \"-G\", group, user);\n+        runCmd(\"usermod -a -G \" + group + \" \" + user, o -> {}, \"Failed to add user to group\");\n     }\n \n     @Override\n"}}, {"oid": "5979f26a4d3194de86900965d14faa1e4181b4a3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5979f26a4d3194de86900965d14faa1e4181b4a3", "message": "Setup script changes", "committedDate": "2020-11-06T17:32:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxMDM4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r519010382", "bodyText": "nit: remove +", "author": "hui-yang", "createdAt": "2020-11-06T21:19:48Z", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -154,8 +214,8 @@ public ThingInfo createThing(IotClient client, String policyName, String thingNa\n                             + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n                             + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n                             + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\",\\n\"\n-                            + \"                \\\"greengrass:*\\\"\\n],\\n\"\n-                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build());\n+                            + \"                \\\"greengrass:*\\\"\\n],\\n\" + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\")", "originalCommit": "5979f26a4d3194de86900965d14faa1e4181b4a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2aec487daff6b363fdfd0d0661a59edd8d90fad", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\nindex eb9450d983..357a529c84 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java\n\n@@ -214,7 +214,8 @@ public class DeviceProvisioningHelper {\n                             + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n                             + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n                             + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\",\\n\"\n-                            + \"                \\\"greengrass:*\\\"\\n],\\n\" + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\")\n+                            + \"                \\\"greengrass:*\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\")\n                     .build());\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNTc5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r519015793", "bodyText": "Do we not take input from commandline for default user and group?", "author": "hui-yang", "createdAt": "2020-11-06T21:32:53Z", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -393,29 +341,71 @@ private String getArg() {\n     void provision(Kernel kernel) throws IOException, DeviceConfigurationException {\n         outStream.printf(\"Provisioning AWS IoT resources for the device with IoT Thing Name: [%s]...%n\", thingName);\n         final ThingInfo thingInfo =\n-                deviceProvisioningHelper.createThing(deviceProvisioningHelper.getIotClient(), policyName, thingName);\n+                deviceProvisioningHelper.createThing(deviceProvisioningHelper.getIotClient(), thingName);\n         outStream.printf(\"Successfully provisioned AWS IoT resources for the device with IoT Thing Name: [%s]!%n\",\n                 thingName);\n         if (!Utils.isEmpty(thingGroupName)) {\n             outStream.printf(\"Adding IoT Thing [%s] into Thing Group: [%s]...%n\", thingName, thingGroupName);\n-                deviceProvisioningHelper.addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName,\n-                        thingGroupName);\n+            deviceProvisioningHelper\n+                    .addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName, thingGroupName);\n             outStream.printf(\"Successfully added Thing into Thing Group: [%s]%n\", thingGroupName);\n         }\n-\n-        // TODO: [P41215965]: setupTes should not be an arg anymore since role alias is required, need to remove\n-        //  this arg and always pass either user specified or a default role alias\n-        if (setupTes) {\n-            outStream.println(\"Setting up resources for TokenExchangeService...\");\n-            deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n-            if (tesRolePolicyName != null && tesRolePolicyDoc != null) {\n-                deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName, tesRolePolicyName, tesRolePolicyDoc);\n-            }\n-        }\n-        outStream.println(\"Configuring kernel with provisioned resource details...\");\n+        outStream.printf(\"Setting up resources for %s ... %n\", TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n+        deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName);\n+        outStream.println(\"Configuring Nucleus with provisioned resource details...\");\n         deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, awsRegion, tesRoleAliasName);\n         outStream.println(\"Successfully configured kernel with provisioned resource details!\");\n+        if (deployDevTools) {\n+            deviceProvisioningHelper.createInitialDeploymentIfNeeded(thingInfo, thingGroupName);\n+        }\n+\n+    }\n \n+    private void setComponentDefaultUserAndGroup() {", "originalCommit": "5979f26a4d3194de86900965d14faa1e4181b4a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyOTg4OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r519029889", "bodyText": "We do, it's optional, but we need it if the script is run with sudo which it will be pretty much always, in that case we need more handling to either use existing ggc_user and ggc_group or create those if needed", "author": "shaguptashaikh", "createdAt": "2020-11-06T22:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNTc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9c2c0ab41c0b1d9b4f9ddbaa56d6f0a5bb0a1fba", "chunk": "diff --git a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\nindex 3a375e8e6c..cf6200c5a2 100644\n--- a/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n+++ b/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java\n\n@@ -369,10 +372,7 @@ public class GreengrassSetup {\n             // as the default user so we do not need to create anything here\n             String user = defaultUser;\n             if (platform.lookupCurrentUser().isSuperUser()) {\n-                if (Utils.isNotEmpty(defaultUser)) {\n-                    // Ensure user exists\n-                    platform.lookupUserByName(defaultUser);\n-                } else {\n+                if (Utils.isEmpty(defaultUser) || GGC_USER.equals(defaultUser)) {\n                     try {\n                         platform.lookupUserByName(GGC_USER);\n                         outStream.printf(\"Got no input for component default user, using %s %n\", GGC_USER);\n"}}, {"oid": "d457bd90d7635146573619a99f38a85a07f332ed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d457bd90d7635146573619a99f38a85a07f332ed", "message": "Setup script changes", "committedDate": "2020-11-06T22:09:11Z", "type": "commit"}, {"oid": "9c2c0ab41c0b1d9b4f9ddbaa56d6f0a5bb0a1fba", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9c2c0ab41c0b1d9b4f9ddbaa56d6f0a5bb0a1fba", "message": "Support user & group ids, help text & logs for s3 access for TES policy, address comments", "committedDate": "2020-11-06T22:10:57Z", "type": "commit"}, {"oid": "d2aec487daff6b363fdfd0d0661a59edd8d90fad", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d2aec487daff6b363fdfd0d0661a59edd8d90fad", "message": "Minor formatting", "committedDate": "2020-11-06T22:10:58Z", "type": "forcePushed"}, {"oid": "dde7500a8ca0a4814a70d9bbb9008c45e39de61c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dde7500a8ca0a4814a70d9bbb9008c45e39de61c", "message": "Minor formatting", "committedDate": "2020-11-06T22:31:16Z", "type": "forcePushed"}, {"oid": "606e99b8327af929a769dd1c2dbad6c21b68876d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/606e99b8327af929a769dd1c2dbad6c21b68876d", "message": "Minor formatting", "committedDate": "2020-11-06T22:34:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzODk3Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r519038972", "bodyText": "This isn't right is it? Shouldn't it be !present || get != 0?", "author": "MikeDombo", "createdAt": "2020-11-06T22:35:34Z", "path": "src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java", "diffHunk": "@@ -397,6 +413,27 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO\n         }\n     }\n \n+    protected void runCmd(String cmdStr, Consumer<CharSequence> out, String msg)\n+            throws IOException, InterruptedException {\n+        try (Exec exec = new Exec()) {\n+            StringBuilder output = new StringBuilder();\n+            StringBuilder error = new StringBuilder();\n+            Optional<Integer> exit = exec.withExec(cmdStr.split(\" \"))\n+                    .withShell()\n+                    .withOut(o -> {\n+                        out.accept(o);\n+                        output.append(o);\n+                    }).withErr(e -> {\n+                        error.append(e);\n+                    }).exec();\n+            if (!exit.isPresent() && exit.get() != 0) {", "originalCommit": "606e99b8327af929a769dd1c2dbad6c21b68876d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b50c8abf255006858cef486dc4e220e3b171b68c", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java\nindex 3bccaba7e8..f5783cf30b 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/unix/UnixPlatform.java\n\n@@ -426,7 +426,7 @@ public class UnixPlatform extends Platform {\n                     }).withErr(e -> {\n                         error.append(e);\n                     }).exec();\n-            if (!exit.isPresent() && exit.get() != 0) {\n+            if (!exit.isPresent() || exit.get() != 0) {\n                 throw new IOException(String.format(\n                         String.format(\"%s - command: %s, output: %s , error: %s \", cmdStr, msg, output.toString(),\n                                 error.toString())));\n"}}, {"oid": "b50c8abf255006858cef486dc4e220e3b171b68c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b50c8abf255006858cef486dc4e220e3b171b68c", "message": "Minor formatting", "committedDate": "2020-11-06T22:36:45Z", "type": "forcePushed"}, {"oid": "7ca1f63f2a9656885215fc9831324ed7b41cfbd5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7ca1f63f2a9656885215fc9831324ed7b41cfbd5", "message": "Minor formatting", "committedDate": "2020-11-06T22:37:52Z", "type": "forcePushed"}, {"oid": "d11b88055016df1616eaa5ccea4cf68b9dd435ee", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d11b88055016df1616eaa5ccea4cf68b9dd435ee", "message": "Minor formatting", "committedDate": "2020-11-06T22:44:24Z", "type": "forcePushed"}, {"oid": "07d18b16c98d1cad7e678ac49406531f408052ac", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/07d18b16c98d1cad7e678ac49406531f408052ac", "message": "Minor formatting", "committedDate": "2020-11-06T22:55:59Z", "type": "commit"}, {"oid": "07d18b16c98d1cad7e678ac49406531f408052ac", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/07d18b16c98d1cad7e678ac49406531f408052ac", "message": "Minor formatting", "committedDate": "2020-11-06T22:55:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0NjQyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r519046427", "bodyText": "PMD doesn't like that we are looking up user/group by name and then id and if both not found we throw an error. But since looking up always throws IOException if not found, we have to write fallback logic the way it is", "author": "shaguptashaikh", "createdAt": "2020-11-06T22:59:12Z", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -393,31 +344,94 @@ private String getArg() {\n     void provision(Kernel kernel) throws IOException, DeviceConfigurationException {\n         outStream.printf(\"Provisioning AWS IoT resources for the device with IoT Thing Name: [%s]...%n\", thingName);\n         final ThingInfo thingInfo =\n-                deviceProvisioningHelper.createThing(deviceProvisioningHelper.getIotClient(), policyName, thingName);\n+                deviceProvisioningHelper.createThing(deviceProvisioningHelper.getIotClient(), thingName);\n         outStream.printf(\"Successfully provisioned AWS IoT resources for the device with IoT Thing Name: [%s]!%n\",\n                 thingName);\n         if (!Utils.isEmpty(thingGroupName)) {\n             outStream.printf(\"Adding IoT Thing [%s] into Thing Group: [%s]...%n\", thingName, thingGroupName);\n-                deviceProvisioningHelper.addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName,\n-                        thingGroupName);\n+            deviceProvisioningHelper\n+                    .addThingToGroup(deviceProvisioningHelper.getIotClient(), thingName, thingGroupName);\n             outStream.printf(\"Successfully added Thing into Thing Group: [%s]%n\", thingGroupName);\n         }\n-\n-        // TODO: [P41215965]: setupTes should not be an arg anymore since role alias is required, need to remove\n-        //  this arg and always pass either user specified or a default role alias\n-        if (setupTes) {\n-            outStream.println(\"Setting up resources for TokenExchangeService...\");\n-            deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n-            if (tesRolePolicyName != null && tesRolePolicyDoc != null) {\n-                deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName, tesRolePolicyName, tesRolePolicyDoc);\n-            }\n-        }\n-        outStream.println(\"Configuring kernel with provisioned resource details...\");\n+        outStream.printf(\"Setting up resources for %s ... %n\", TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        deviceProvisioningHelper.setupIoTRoleForTes(tesRoleName, tesRoleAliasName, thingInfo.getCertificateArn());\n+        deviceProvisioningHelper.createAndAttachRolePolicy(tesRoleName);\n+        outStream.println(\"Configuring Nucleus with provisioned resource details...\");\n         deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, awsRegion, tesRoleAliasName);\n         outStream.println(\"Successfully configured kernel with provisioned resource details!\");\n+        if (deployDevTools) {\n+            deviceProvisioningHelper.createInitialDeploymentIfNeeded(thingInfo, thingGroupName);\n+        }\n \n     }\n \n+    @SuppressWarnings(\"PMD.PreserveStackTrace\")", "originalCommit": "07d18b16c98d1cad7e678ac49406531f408052ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "4dd6c1d00cdfff2755924f49f11050c8b8204954", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4dd6c1d00cdfff2755924f49f11050c8b8204954", "message": "Merge branch 'master' into setup-script", "committedDate": "2020-11-07T00:20:57Z", "type": "commit"}]}