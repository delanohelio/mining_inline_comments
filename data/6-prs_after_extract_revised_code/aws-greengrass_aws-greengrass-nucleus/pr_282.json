{"pr_number": 282, "pr_title": "Add replaceMap in Topics", "pr_createdAt": "2020-06-17T02:27:50Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NjE1MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r441246150", "bodyText": "why are you changing the mod time, but not the value? The mod time should reflect the value's time, right?", "author": "MikeDombo", "createdAt": "2020-06-17T02:33:00Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -105,7 +105,14 @@ public Topic withNewerValue(long proposedModtime, final Object proposed) {\n     public synchronized Topic withNewerValue(long proposedModtime, final Object proposed, boolean forceTimestamp) {\n         final Object currentValue = value;\n         final long currentModtime = modtime;\n-        if (Objects.equals(proposed, currentValue) || !forceTimestamp && (proposedModtime < currentModtime)) {\n+        if (Objects.equals(proposed, currentValue)) {\n+            if (forceTimestamp || currentModtime < proposedModtime) {\n+                modtime = proposedModtime;", "originalCommit": "85265c32d5894bacd6ca5ded0949c5e4277a8c46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2MjI1Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r441762256", "bodyText": "If the new proposed value is same as old proposed value, then only update the modTime.\nConsider when user update topic with value1 at t1, then update with the same value at t2. If another update happens at t3 when t1< t3< t2, then the update will take effect, but this is not the intention", "author": "ShirleyZheng92", "createdAt": "2020-06-17T18:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NjE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MDE5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r442480190", "bodyText": "Actually I don't know if it's a desired behavior. I'll revert this change for now", "author": "ShirleyZheng92", "createdAt": "2020-06-18T20:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NjE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "67b3be162d1732cf54c183ce5d3f6aec3db12755", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topic.java b/src/main/java/com/aws/iot/evergreen/config/Topic.java\nindex a87fee9bb..6198ce601 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topic.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topic.java\n\n@@ -105,14 +105,7 @@ public class Topic extends Node {\n     public synchronized Topic withNewerValue(long proposedModtime, final Object proposed, boolean forceTimestamp) {\n         final Object currentValue = value;\n         final long currentModtime = modtime;\n-        if (Objects.equals(proposed, currentValue)) {\n-            if (forceTimestamp || currentModtime < proposedModtime) {\n-                modtime = proposedModtime;\n-            }\n-            return this;\n-        }\n-\n-        if (!forceTimestamp && proposedModtime < currentModtime) {\n+        if (Objects.equals(proposed, currentValue) || !forceTimestamp && (proposedModtime < currentModtime)) {\n             return this;\n         }\n         final Object validated = validate(proposed, currentValue);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0Njg2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r441246867", "bodyText": "I don't really think we should call remove here because that will remove the watchers and send updates that it was removed. But what you really want is to just replace it atomically, not delete and then add.\nYou might want to create a Topics, copy the watchers over, then directly remove it from the children so that it never fires the WhatHappened.Removed, because that isn't really accurate.", "author": "MikeDombo", "createdAt": "2020-06-17T02:35:55Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -205,6 +207,38 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n         });\n     }\n \n+    /**\n+     * Replace the given map to this Topics tree.\n+     *\n+     * @param lastModified last modified time\n+     * @param map          map to merge in\n+     */\n+    public void replaceMap(long lastModified, Map<Object, Object> map) {\n+        Set<String> childToRemove = new HashSet<>(children.keySet());\n+\n+        map.forEach((okey, value) -> {\n+            String key = okey.toString();\n+            childToRemove.remove(key);\n+            Node existingChild = children.get(key);\n+            if (value instanceof Map) {\n+                // if a leaf node is replaced with container node\n+                if (existingChild != null && !(existingChild instanceof Topics)) {\n+                    remove(existingChild);", "originalCommit": "85265c32d5894bacd6ca5ded0949c5e4277a8c46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2ODg4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r441768887", "bodyText": "'copy the watchers over' doesn't work because the subscriber for Topics is ChildChanged and the subscriber for Topic is Subscriber, they have different interface. One is taking Node parameter, another is taking Topic parameter. Topics node also have child nodes, and these child nodes also have watchers. We do want to notify child watchers with 'removed' event.\nI also considered creating a new WhatHappened enum value, nodeTypeChanged, and unify the Subscriber and ChildChanged interface. That requires a bigger change though.\nCurrently, if you call lookupTopics() on a Topic node path (or vice versa), it will throw an illegalArg exception. If you call findTopics() on a Topic node path (or vice versa), it will return null. I guess we need to re-think these to consider how to properly switch a node between Topics and Topic. This is not high priority right now, I can add a TODO here", "author": "ShirleyZheng92", "createdAt": "2020-06-17T19:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0Njg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3MTA3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r441771070", "bodyText": "I think I might be happier with the unified subscriber interface so that you don't remove and then add it back. Not sure that we currently have a situation where this matters (I think that we always subscribe to a higher Topics which we know won't change types).", "author": "MikeDombo", "createdAt": "2020-06-17T19:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0Njg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MDg5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r442480892", "bodyText": "Some subscribers are taking Topic state. eg: _State topic. I can go through the codebase to check.", "author": "ShirleyZheng92", "createdAt": "2020-06-18T20:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0Njg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1MTc3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r450451777", "bodyText": "I tried implementing switching node between container/leaf, find out it's too big a change for this PR. I'll leave it for now and add TODO", "author": "ShirleyZheng92", "createdAt": "2020-07-06T20:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0Njg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "67b3be162d1732cf54c183ce5d3f6aec3db12755", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topics.java b/src/main/java/com/aws/iot/evergreen/config/Topics.java\nindex 0df094c95..a52bc5ead 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topics.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topics.java\n\n@@ -222,15 +222,47 @@ public class Topics extends Node implements Iterable<Node> {\n             Node existingChild = children.get(key);\n             if (value instanceof Map) {\n                 // if a leaf node is replaced with container node\n-                if (existingChild != null && !(existingChild instanceof Topics)) {\n-                    remove(existingChild);\n+                if (existingChild instanceof Topic) {\n+                    Topics newNode = new Topics(context, key, null);\n+                    newNode.replaceMap(lastModified, (Map) value);\n+\n+                    context.runOnPublishQueue(() -> {\n+                        children.put(key, newNode);\n+                        newNode.setParent(this);\n+                        existingChild.setParent(null);\n+                        // set watcher here so that the watcher doesn't receive notification from\n+                        // the above replaceMap() invocation\n+                        newNode.watchers.addAll(existingChild.watchers);\n+                        existingChild.watchers.clear();\n+                        newNode.fire(WhatHappened.nodeTypeChanged);\n+                    });\n+                } else {\n+                    createInteriorChild(key).replaceMap(lastModified, (Map) value);\n                 }\n-                createInteriorChild(key).replaceMap(lastModified, (Map) value);\n             } else {\n-                if (existingChild != null && !(existingChild instanceof Topic)) {\n-                    remove(existingChild);\n+                // if a container node is replaced with leaf node\n+                if (existingChild instanceof Topics) {\n+                    Topic newNode = new Topic(context, key, null);\n+                    newNode.withNewerValue(lastModified, value);\n+\n+                    context.runOnPublishQueue(() -> {\n+                        children.put(key, newNode);\n+                        newNode.setParent(this);\n+                        existingChild.setParent(null);\n+                        // set newNode watcher here so that the watcher doesn't receive notification from\n+                        // the above withNewerValue() invocation\n+                        newNode.watchers.addAll(existingChild.watchers);\n+                        // clear watchers from old container node so that the watcher doesn't receive\n+                        // 'childRemoved' event\n+                        existingChild.watchers.clear();\n+                        newNode.fire(WhatHappened.nodeTypeChanged);\n+                    });\n+\n+                    // notify child watchers of removal\n+                    ((Topics)existingChild).children.values().forEach(Node::remove);\n+                } else {\n+                    createLeafChild(key).withNewerValue(lastModified, value);\n                 }\n-                createLeafChild(key).withNewerValue(lastModified, value);\n             }\n         });\n \n"}}, {"oid": "67b3be162d1732cf54c183ce5d3f6aec3db12755", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/67b3be162d1732cf54c183ce5d3f6aec3db12755", "message": "Add NodeTypeChanged event type in WhatHappened enum\n\nThe event type shows a node is changed and switched between a container node and a\nleaf node.\n\nChanged function interface of Subscriber and removed ChildChanged\ninterface. Subscriber now applies to both Topic and Topics listener.", "committedDate": "2020-07-01T02:59:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNzQzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r448637437", "bodyText": "why do we need these?", "author": "MikeDombo", "createdAt": "2020-07-01T21:57:17Z", "path": "src/main/java/com/aws/iot/evergreen/config/Node.java", "diffHunk": "@@ -28,6 +28,14 @@ protected Node(Context c, String n, Topics p) {\n         fnc = calcFnc();\n     }\n \n+    public synchronized Topics getParent() {\n+        return parent;\n+    }\n+\n+    protected synchronized void setParent(Topics p) {", "originalCommit": "67b3be162d1732cf54c183ce5d3f6aec3db12755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2NjA5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r448766092", "bodyText": "to set parent for a node", "author": "ShirleyZheng92", "createdAt": "2020-07-02T06:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNzQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "67a2177e56964d47de4736a92543ae0d9085225f", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Node.java b/src/main/java/com/aws/iot/evergreen/config/Node.java\nindex 636a0bfc4..a855050c0 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Node.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Node.java\n\n@@ -28,14 +28,6 @@ public abstract class Node {\n         fnc = calcFnc();\n     }\n \n-    public synchronized Topics getParent() {\n-        return parent;\n-    }\n-\n-    protected synchronized void setParent(Topics p) {\n-        parent = p;\n-    }\n-\n     /**\n      * Append node's name to the appendable.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODIyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r448638227", "bodyText": "this shouldn't really be necessary, right? Can we just use lookupTopic which will create the node properly without this manual work?", "author": "MikeDombo", "createdAt": "2020-07-01T21:59:21Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -205,6 +207,70 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n         });\n     }\n \n+    /**\n+     * Replace the given map to this Topics tree.\n+     *\n+     * @param lastModified last modified time\n+     * @param map          map to merge in\n+     */\n+    public void replaceMap(long lastModified, Map<Object, Object> map) {\n+        Set<String> childToRemove = new HashSet<>(children.keySet());\n+\n+        map.forEach((okey, value) -> {\n+            String key = okey.toString();\n+            childToRemove.remove(key);\n+            Node existingChild = children.get(key);\n+            if (value instanceof Map) {\n+                // if a leaf node is replaced with container node\n+                if (existingChild instanceof Topic) {\n+                    Topics newNode = new Topics(context, key, null);\n+                    newNode.replaceMap(lastModified, (Map) value);\n+\n+                    context.runOnPublishQueue(() -> {\n+                        children.put(key, newNode);\n+                        newNode.setParent(this);\n+                        existingChild.setParent(null);", "originalCommit": "67b3be162d1732cf54c183ce5d3f6aec3db12755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2NTk5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r448765998", "bodyText": "lookUpTopic will throw illegalArgException since the node already exist and is not Topic instance", "author": "ShirleyZheng92", "createdAt": "2020-07-02T06:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3NTg4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449175882", "bodyText": "Then we could add a method to \"override\" properly I guess. At least encapsulate this logic.", "author": "leaf94", "createdAt": "2020-07-02T17:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0NTU5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449245598", "bodyText": "I don't think it's necessary now. So far replaceMap() is the only place where a node type can change", "author": "ShirleyZheng92", "createdAt": "2020-07-02T20:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2ODc3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449268779", "bodyText": "+1, I would also prefer if it was done through lookupTopic such that we wouldn't need two ways to change nodes", "author": "shaguptashaikh", "createdAt": "2020-07-02T21:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwOTg2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r450009865", "bodyText": "LookupTopic/LookupTopics doesn't change value of a node, it just creates new nodes (creating new node doesn't fire publishing event). The value is changed through Topic.WithNewerValue(), which notify the subscribers in the publish queue. If we try to implement removing/replacing logic in LookupTopic/LookupTopics, the order of publishing queue can be tricky.", "author": "ShirleyZheng92", "createdAt": "2020-07-06T06:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topics.java b/src/main/java/com/aws/iot/evergreen/config/Topics.java\nindex a52bc5ead..19ce7d3f4 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topics.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topics.java\n\n@@ -221,8 +225,8 @@ public class Topics extends Node implements Iterable<Node> {\n             childToRemove.remove(key);\n             Node existingChild = children.get(key);\n             if (value instanceof Map) {\n-                // if a leaf node is replaced with container node\n                 if (existingChild instanceof Topic) {\n+                    // if a leaf node is replaced with container node\n                     Topics newNode = new Topics(context, key, null);\n                     newNode.replaceMap(lastModified, (Map) value);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODUwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r448638503", "bodyText": "this shouldn't be needed since the existing child is going away, right?", "author": "MikeDombo", "createdAt": "2020-07-01T22:00:10Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -205,6 +207,70 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n         });\n     }\n \n+    /**\n+     * Replace the given map to this Topics tree.\n+     *\n+     * @param lastModified last modified time\n+     * @param map          map to merge in\n+     */\n+    public void replaceMap(long lastModified, Map<Object, Object> map) {\n+        Set<String> childToRemove = new HashSet<>(children.keySet());\n+\n+        map.forEach((okey, value) -> {\n+            String key = okey.toString();\n+            childToRemove.remove(key);\n+            Node existingChild = children.get(key);\n+            if (value instanceof Map) {\n+                // if a leaf node is replaced with container node\n+                if (existingChild instanceof Topic) {\n+                    Topics newNode = new Topics(context, key, null);\n+                    newNode.replaceMap(lastModified, (Map) value);\n+\n+                    context.runOnPublishQueue(() -> {\n+                        children.put(key, newNode);\n+                        newNode.setParent(this);\n+                        existingChild.setParent(null);\n+                        // set watcher here so that the watcher doesn't receive notification from\n+                        // the above replaceMap() invocation\n+                        newNode.watchers.addAll(existingChild.watchers);\n+                        existingChild.watchers.clear();\n+                        newNode.fire(WhatHappened.nodeTypeChanged);\n+                    });\n+                } else {\n+                    createInteriorChild(key).replaceMap(lastModified, (Map) value);\n+                }\n+            } else {\n+                // if a container node is replaced with leaf node\n+                if (existingChild instanceof Topics) {\n+                    Topic newNode = new Topic(context, key, null);\n+                    newNode.withNewerValue(lastModified, value);\n+\n+                    context.runOnPublishQueue(() -> {\n+                        children.put(key, newNode);\n+                        newNode.setParent(this);\n+                        existingChild.setParent(null);", "originalCommit": "67b3be162d1732cf54c183ce5d3f6aec3db12755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2OTk0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r448769943", "bodyText": "Not really, parent node need to remove the child from children and child need to remove reference to parent. Otherwise, when informing the children in the old container node of removal, the 'childRemoved' event will bubble up to root parent.", "author": "ShirleyZheng92", "createdAt": "2020-07-02T06:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topics.java b/src/main/java/com/aws/iot/evergreen/config/Topics.java\nindex a52bc5ead..19ce7d3f4 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topics.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topics.java\n\n@@ -221,8 +225,8 @@ public class Topics extends Node implements Iterable<Node> {\n             childToRemove.remove(key);\n             Node existingChild = children.get(key);\n             if (value instanceof Map) {\n-                // if a leaf node is replaced with container node\n                 if (existingChild instanceof Topic) {\n+                    // if a leaf node is replaced with container node\n                     Topics newNode = new Topics(context, key, null);\n                     newNode.replaceMap(lastModified, (Map) value);\n \n"}}, {"oid": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "message": "Add NodeTypeChanged event type in WhatHappened enum\n\nThe event type shows a node is changed and switched between a container node and a\nleaf node.\n\nChanged function interface of Subscriber and removed ChildChanged\ninterface. Subscriber now applies to both Topic and Topics listener.", "committedDate": "2020-07-02T06:14:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2MzUwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449163502", "bodyText": "does this TODO still apply?", "author": "leaf94", "createdAt": "2020-07-02T17:19:34Z", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -124,6 +124,6 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n     }\n \n     public void writeAll() { //TODO double check this", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67a2177e56964d47de4736a92543ae0d9085225f", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java b/src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java\nindex fc3630f6f..c63f8bba2 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java\n\n@@ -124,6 +124,6 @@ public class ConfigurationWriter implements Closeable, Subscriber {\n     }\n \n     public void writeAll() { //TODO double check this\n-        conf.deepForEachTopic(n -> published(WhatHappened.childChanged, n));\n+        conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2NDcyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449164721", "bodyText": "not sure do we want to be more specific to differentiate btw \"changed to Topics \" vs \"changed to Topic\"?", "author": "leaf94", "createdAt": "2020-07-02T17:22:03Z", "path": "src/main/java/com/aws/iot/evergreen/config/WhatHappened.java", "diffHunk": "@@ -4,5 +4,5 @@\n package com.aws.iot.evergreen.config;\n \n public enum WhatHappened {\n-    changed, initialized, childChanged, removed, childRemoved\n+    changed, initialized, childChanged, removed, childRemoved, nodeTypeChanged", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/WhatHappened.java b/src/main/java/com/aws/iot/evergreen/config/WhatHappened.java\nindex 1082510c9..afe233b39 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/WhatHappened.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/WhatHappened.java\n\n@@ -4,5 +4,5 @@\n package com.aws.iot.evergreen.config;\n \n public enum WhatHappened {\n-    changed, initialized, childChanged, removed, childRemoved, nodeTypeChanged\n+    changed, initialized, childChanged, removed, childRemoved, changedToTopic, changedToTopics\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2NTMxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449165316", "bodyText": "Like the naming here.", "author": "leaf94", "createdAt": "2020-07-02T17:23:14Z", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -302,4 +304,203 @@ public void GIVEN_config_to_merge_WHEN_read_with_current_timestamp_THEN_merge()\n         assertEquals(\"echo main service installed\",\n                 config.find(SERVICES_NAMESPACE_TOPIC, \"main\", \"lifecycle\", \"install\").getOnce());\n     }\n+\n+    @Test\n+    public void GIVEN_topics_WHEN_call_replace_map_THEN_content_replaced_and_subscribers_invoked() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeRemoved:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  leafToBeUpdated: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeRemoved: dummy\";", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\nindex af6bfffe4..3d4c3457b 100644\n--- a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n\n@@ -327,35 +327,35 @@ public class ConfigurationTest {\n         try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n             initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n         }\n-        config.mergeMap(1, initConfigMap);\n+        config.mergeMap(initConfigMap);\n         config.context.runOnPublishQueueAndWait(() -> {});\n \n-        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger containerNodeRemovedCount = new AtomicInteger(0);\n         config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                containerNodeRemoved.incrementAndGet();\n+                containerNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicInteger leafNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger leafNodeRemovedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                leafNodeRemoved.incrementAndGet();\n+                leafNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicBoolean nodeUnchangedNotified = new AtomicBoolean(false);\n+        AtomicBoolean nodeUnchangedNotifiedCount = new AtomicBoolean(false);\n         config.find(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n             if (WhatHappened.initialized != what) {\n-                nodeUnchangedNotified.set(true);\n+                nodeUnchangedNotifiedCount.set(true);\n             }\n         });\n \n-        AtomicInteger leafNodeUpdated = new AtomicInteger(0);\n+        AtomicInteger leafNodeUpdatedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeUpdated\").subscribe((what, node) -> {\n             Topic t = (Topic) node;\n             if (WhatHappened.changed == what && t.getOnce().equals(\"updatedValue\")) {\n-                leafNodeUpdated.incrementAndGet();\n+                leafNodeUpdatedCount.incrementAndGet();\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2NjQ5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449166496", "bodyText": "should we consider providing an override method without taking timestamp, which sets current timestamp? This magical number has always been confusing...", "author": "leaf94", "createdAt": "2020-07-02T17:25:30Z", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -302,4 +304,203 @@ public void GIVEN_config_to_merge_WHEN_read_with_current_timestamp_THEN_merge()\n         assertEquals(\"echo main service installed\",\n                 config.find(SERVICES_NAMESPACE_TOPIC, \"main\", \"lifecycle\", \"install\").getOnce());\n     }\n+\n+    @Test\n+    public void GIVEN_topics_WHEN_call_replace_map_THEN_content_replaced_and_subscribers_invoked() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeRemoved:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  leafToBeUpdated: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeRemoved: dummy\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeAdded: val1\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeUpdated: updatedValue\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(1, initConfigMap);", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyMzI4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r450523284", "bodyText": "I'd keep the explicit timestamp for now. So far mergeMap is only called in DeploymentMerger, with the timestamp of deploymentDoc. If in the future we need overriding method we can add that.", "author": "ShirleyZheng92", "createdAt": "2020-07-06T23:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2NjQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\nindex af6bfffe4..3d4c3457b 100644\n--- a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n\n@@ -327,35 +327,35 @@ public class ConfigurationTest {\n         try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n             initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n         }\n-        config.mergeMap(1, initConfigMap);\n+        config.mergeMap(initConfigMap);\n         config.context.runOnPublishQueueAndWait(() -> {});\n \n-        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger containerNodeRemovedCount = new AtomicInteger(0);\n         config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                containerNodeRemoved.incrementAndGet();\n+                containerNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicInteger leafNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger leafNodeRemovedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                leafNodeRemoved.incrementAndGet();\n+                leafNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicBoolean nodeUnchangedNotified = new AtomicBoolean(false);\n+        AtomicBoolean nodeUnchangedNotifiedCount = new AtomicBoolean(false);\n         config.find(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n             if (WhatHappened.initialized != what) {\n-                nodeUnchangedNotified.set(true);\n+                nodeUnchangedNotifiedCount.set(true);\n             }\n         });\n \n-        AtomicInteger leafNodeUpdated = new AtomicInteger(0);\n+        AtomicInteger leafNodeUpdatedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeUpdated\").subscribe((what, node) -> {\n             Topic t = (Topic) node;\n             if (WhatHappened.changed == what && t.getOnce().equals(\"updatedValue\")) {\n-                leafNodeUpdated.incrementAndGet();\n+                leafNodeUpdatedCount.incrementAndGet();\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2NzYyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449167624", "bodyText": "nit - I guess you didn't use AtomicBoolean because you want to ensure the count is exactly 1 - If that's the case could you rename the containerNodeRemoved to be containerNodeRemovedCount?", "author": "leaf94", "createdAt": "2020-07-02T17:27:41Z", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -302,4 +304,203 @@ public void GIVEN_config_to_merge_WHEN_read_with_current_timestamp_THEN_merge()\n         assertEquals(\"echo main service installed\",\n                 config.find(SERVICES_NAMESPACE_TOPIC, \"main\", \"lifecycle\", \"install\").getOnce());\n     }\n+\n+    @Test\n+    public void GIVEN_topics_WHEN_call_replace_map_THEN_content_replaced_and_subscribers_invoked() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeRemoved:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  leafToBeUpdated: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeRemoved: dummy\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeAdded: val1\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeUpdated: updatedValue\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(1, initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n+            if (WhatHappened.removed == what) {\n+                containerNodeRemoved.incrementAndGet();\n+            }\n+        });", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\nindex af6bfffe4..3d4c3457b 100644\n--- a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n\n@@ -327,35 +327,35 @@ public class ConfigurationTest {\n         try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n             initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n         }\n-        config.mergeMap(1, initConfigMap);\n+        config.mergeMap(initConfigMap);\n         config.context.runOnPublishQueueAndWait(() -> {});\n \n-        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger containerNodeRemovedCount = new AtomicInteger(0);\n         config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                containerNodeRemoved.incrementAndGet();\n+                containerNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicInteger leafNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger leafNodeRemovedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                leafNodeRemoved.incrementAndGet();\n+                leafNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicBoolean nodeUnchangedNotified = new AtomicBoolean(false);\n+        AtomicBoolean nodeUnchangedNotifiedCount = new AtomicBoolean(false);\n         config.find(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n             if (WhatHappened.initialized != what) {\n-                nodeUnchangedNotified.set(true);\n+                nodeUnchangedNotifiedCount.set(true);\n             }\n         });\n \n-        AtomicInteger leafNodeUpdated = new AtomicInteger(0);\n+        AtomicInteger leafNodeUpdatedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeUpdated\").subscribe((what, node) -> {\n             Topic t = (Topic) node;\n             if (WhatHappened.changed == what && t.getOnce().equals(\"updatedValue\")) {\n-                leafNodeUpdated.incrementAndGet();\n+                leafNodeUpdatedCount.incrementAndGet();\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2ODY0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449168641", "bodyText": "Very clear and easy to follow!", "author": "leaf94", "createdAt": "2020-07-02T17:29:46Z", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -302,4 +304,203 @@ public void GIVEN_config_to_merge_WHEN_read_with_current_timestamp_THEN_merge()\n         assertEquals(\"echo main service installed\",\n                 config.find(SERVICES_NAMESPACE_TOPIC, \"main\", \"lifecycle\", \"install\").getOnce());\n     }\n+\n+    @Test\n+    public void GIVEN_topics_WHEN_call_replace_map_THEN_content_replaced_and_subscribers_invoked() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeRemoved:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  leafToBeUpdated: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeRemoved: dummy\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeAdded: val1\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeUpdated: updatedValue\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(1, initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n+            if (WhatHappened.removed == what) {\n+                containerNodeRemoved.incrementAndGet();\n+            }\n+        });\n+\n+        AtomicInteger leafNodeRemoved = new AtomicInteger(0);\n+        config.find(\"foo\", \"leafToBeRemoved\").subscribe((what, c) -> {\n+            if (WhatHappened.removed == what) {\n+                leafNodeRemoved.incrementAndGet();\n+            }\n+        });\n+\n+        AtomicBoolean nodeUnchangedNotified = new AtomicBoolean(false);\n+        config.find(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n+            if (WhatHappened.initialized != what) {\n+                nodeUnchangedNotified.set(true);\n+            }\n+        });\n+\n+        AtomicInteger leafNodeUpdated = new AtomicInteger(0);\n+        config.find(\"foo\", \"leafToBeUpdated\").subscribe((what, node) -> {\n+            Topic t = (Topic) node;\n+            if (WhatHappened.changed == what && t.getOnce().equals(\"updatedValue\")) {\n+                leafNodeUpdated.incrementAndGet();\n+            }\n+        });\n+\n+        // WHEN\n+        Map<Object, Object> updateConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(updateConfig.getBytes())) {\n+            updateConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.root.replaceMap(2, updateConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        // THEN\n+        assertEquals(updateConfigMap, config.toPOJO());\n+\n+        assertEquals(1, leafNodeRemoved.get());\n+        assertEquals(1, containerNodeRemoved.get());\n+        assertEquals(1, leafNodeUpdated.get());\n+        assertFalse(nodeUnchangedNotified.get());\n+    }", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\nindex af6bfffe4..3d4c3457b 100644\n--- a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n\n@@ -327,35 +327,35 @@ public class ConfigurationTest {\n         try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n             initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n         }\n-        config.mergeMap(1, initConfigMap);\n+        config.mergeMap(initConfigMap);\n         config.context.runOnPublishQueueAndWait(() -> {});\n \n-        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger containerNodeRemovedCount = new AtomicInteger(0);\n         config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                containerNodeRemoved.incrementAndGet();\n+                containerNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicInteger leafNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger leafNodeRemovedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                leafNodeRemoved.incrementAndGet();\n+                leafNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicBoolean nodeUnchangedNotified = new AtomicBoolean(false);\n+        AtomicBoolean nodeUnchangedNotifiedCount = new AtomicBoolean(false);\n         config.find(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n             if (WhatHappened.initialized != what) {\n-                nodeUnchangedNotified.set(true);\n+                nodeUnchangedNotifiedCount.set(true);\n             }\n         });\n \n-        AtomicInteger leafNodeUpdated = new AtomicInteger(0);\n+        AtomicInteger leafNodeUpdatedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeUpdated\").subscribe((what, node) -> {\n             Topic t = (Topic) node;\n             if (WhatHappened.changed == what && t.getOnce().equals(\"updatedValue\")) {\n-                leafNodeUpdated.incrementAndGet();\n+                leafNodeUpdatedCount.incrementAndGet();\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2OTA4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449169081", "bodyText": "was this for debugging?", "author": "leaf94", "createdAt": "2020-07-02T17:30:40Z", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -302,4 +304,203 @@ public void GIVEN_config_to_merge_WHEN_read_with_current_timestamp_THEN_merge()\n         assertEquals(\"echo main service installed\",\n                 config.find(SERVICES_NAMESPACE_TOPIC, \"main\", \"lifecycle\", \"install\").getOnce());\n     }\n+\n+    @Test\n+    public void GIVEN_topics_WHEN_call_replace_map_THEN_content_replaced_and_subscribers_invoked() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeRemoved:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  leafToBeUpdated: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeRemoved: dummy\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeAdded: val1\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeUpdated: updatedValue\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(1, initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n+            if (WhatHappened.removed == what) {\n+                containerNodeRemoved.incrementAndGet();\n+            }\n+        });\n+\n+        AtomicInteger leafNodeRemoved = new AtomicInteger(0);\n+        config.find(\"foo\", \"leafToBeRemoved\").subscribe((what, c) -> {\n+            if (WhatHappened.removed == what) {\n+                leafNodeRemoved.incrementAndGet();\n+            }\n+        });\n+\n+        AtomicBoolean nodeUnchangedNotified = new AtomicBoolean(false);\n+        config.find(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n+            if (WhatHappened.initialized != what) {\n+                nodeUnchangedNotified.set(true);\n+            }\n+        });\n+\n+        AtomicInteger leafNodeUpdated = new AtomicInteger(0);\n+        config.find(\"foo\", \"leafToBeUpdated\").subscribe((what, node) -> {\n+            Topic t = (Topic) node;\n+            if (WhatHappened.changed == what && t.getOnce().equals(\"updatedValue\")) {\n+                leafNodeUpdated.incrementAndGet();\n+            }\n+        });\n+\n+        // WHEN\n+        Map<Object, Object> updateConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(updateConfig.getBytes())) {\n+            updateConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.root.replaceMap(2, updateConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        // THEN\n+        assertEquals(updateConfigMap, config.toPOJO());\n+\n+        assertEquals(1, leafNodeRemoved.get());\n+        assertEquals(1, containerNodeRemoved.get());\n+        assertEquals(1, leafNodeUpdated.get());\n+        assertFalse(nodeUnchangedNotified.get());\n+    }\n+\n+    @Test\n+    public void GIVEN_config_with_subscribers_WHEN_topic_type_changed_THEN_subscribers_notified() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  node1:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  node2: val2\\n\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  node1: val1\\n\"\n+                + \"  node2:\\n\"\n+                + \"    key2: val2\\n\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(1, initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        Pair<CompletableFuture<Void>, Subscriber> node1Changed = createSingleAssertSubscriber((what, node) -> {\n+                    assertEquals(WhatHappened.nodeTypeChanged, what, node.getFullName() + node.toPOJO());\n+                    assertEquals(\"val1\", ((Topic) node).getOnce());\n+                });\n+        config.findTopics(\"foo\", \"node1\").subscribe(node1Changed.getRight());\n+\n+        Pair<CompletableFuture<Void>, Subscriber> nodeRemoved = createSingleAssertSubscriber((what, node) -> {\n+                    assertEquals(WhatHappened.removed, what, node.getFullName());\n+                });\n+        config.find(\"foo\", \"node1\", \"key1\").subscribe(nodeRemoved.getRight());\n+\n+        Pair<CompletableFuture<Void>, Subscriber> node2Changed = createSingleAssertSubscriber((what, node) -> {\n+                    assertEquals(WhatHappened.nodeTypeChanged, what, node.getFullName());\n+                    assertEquals(\"val2\", ((Topics) node).find(\"key2\").getOnce());\n+                });\n+        config.find(\"foo\", \"node2\").subscribe(node2Changed.getRight());\n+\n+        // WHEN\n+        Map<Object, Object> updateConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(updateConfig.getBytes())) {\n+            updateConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.root.replaceMap(2, updateConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        // THEN\n+        node1Changed.getLeft().get(100, TimeUnit.MILLISECONDS);\n+        node2Changed.getLeft().get(100, TimeUnit.MILLISECONDS);\n+        nodeRemoved.getLeft().get(100, TimeUnit.MILLISECONDS);\n+\n+        assertEquals(updateConfigMap, config.toPOJO());\n+    }\n+\n+    @Test\n+    public void GIVEN_config_with_subscribers_WHEN_topic_type_changed_THEN_parent_node_notified() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  node1:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  node2: val2\\n\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  node1: val1\\n\"\n+                + \"  node2:\\n\"\n+                + \"    key2: val2\\n\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(1, initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicInteger node1Changed = new AtomicInteger();\n+        AtomicInteger node2Changed = new AtomicInteger();\n+        config.findTopics(\"foo\").subscribe((what, node) -> {\n+            if (WhatHappened.childChanged == what) {\n+                System.err.println(\"child changed\" + node.getFullName() + \" \" + node.toPOJO());", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NTc2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449185761", "bodyText": "oops", "author": "ShirleyZheng92", "createdAt": "2020-07-02T18:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2OTA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\nindex af6bfffe4..3d4c3457b 100644\n--- a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n\n@@ -327,35 +327,35 @@ public class ConfigurationTest {\n         try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n             initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n         }\n-        config.mergeMap(1, initConfigMap);\n+        config.mergeMap(initConfigMap);\n         config.context.runOnPublishQueueAndWait(() -> {});\n \n-        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger containerNodeRemovedCount = new AtomicInteger(0);\n         config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                containerNodeRemoved.incrementAndGet();\n+                containerNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicInteger leafNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger leafNodeRemovedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                leafNodeRemoved.incrementAndGet();\n+                leafNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicBoolean nodeUnchangedNotified = new AtomicBoolean(false);\n+        AtomicBoolean nodeUnchangedNotifiedCount = new AtomicBoolean(false);\n         config.find(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n             if (WhatHappened.initialized != what) {\n-                nodeUnchangedNotified.set(true);\n+                nodeUnchangedNotifiedCount.set(true);\n             }\n         });\n \n-        AtomicInteger leafNodeUpdated = new AtomicInteger(0);\n+        AtomicInteger leafNodeUpdatedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeUpdated\").subscribe((what, node) -> {\n             Topic t = (Topic) node;\n             if (WhatHappened.changed == what && t.getOnce().equals(\"updatedValue\")) {\n-                leafNodeUpdated.incrementAndGet();\n+                leafNodeUpdatedCount.incrementAndGet();\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2OTc4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449169785", "bodyText": "will we receive \"nodeTypeChanged\"?", "author": "leaf94", "createdAt": "2020-07-02T17:31:58Z", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -302,4 +304,203 @@ public void GIVEN_config_to_merge_WHEN_read_with_current_timestamp_THEN_merge()\n         assertEquals(\"echo main service installed\",\n                 config.find(SERVICES_NAMESPACE_TOPIC, \"main\", \"lifecycle\", \"install\").getOnce());\n     }\n+\n+    @Test\n+    public void GIVEN_topics_WHEN_call_replace_map_THEN_content_replaced_and_subscribers_invoked() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeRemoved:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  leafToBeUpdated: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeRemoved: dummy\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeAdded: val1\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeUpdated: updatedValue\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(1, initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n+            if (WhatHappened.removed == what) {\n+                containerNodeRemoved.incrementAndGet();\n+            }\n+        });\n+\n+        AtomicInteger leafNodeRemoved = new AtomicInteger(0);\n+        config.find(\"foo\", \"leafToBeRemoved\").subscribe((what, c) -> {\n+            if (WhatHappened.removed == what) {\n+                leafNodeRemoved.incrementAndGet();\n+            }\n+        });\n+\n+        AtomicBoolean nodeUnchangedNotified = new AtomicBoolean(false);\n+        config.find(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n+            if (WhatHappened.initialized != what) {\n+                nodeUnchangedNotified.set(true);\n+            }\n+        });\n+\n+        AtomicInteger leafNodeUpdated = new AtomicInteger(0);\n+        config.find(\"foo\", \"leafToBeUpdated\").subscribe((what, node) -> {\n+            Topic t = (Topic) node;\n+            if (WhatHappened.changed == what && t.getOnce().equals(\"updatedValue\")) {\n+                leafNodeUpdated.incrementAndGet();\n+            }\n+        });\n+\n+        // WHEN\n+        Map<Object, Object> updateConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(updateConfig.getBytes())) {\n+            updateConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.root.replaceMap(2, updateConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        // THEN\n+        assertEquals(updateConfigMap, config.toPOJO());\n+\n+        assertEquals(1, leafNodeRemoved.get());\n+        assertEquals(1, containerNodeRemoved.get());\n+        assertEquals(1, leafNodeUpdated.get());\n+        assertFalse(nodeUnchangedNotified.get());\n+    }\n+\n+    @Test\n+    public void GIVEN_config_with_subscribers_WHEN_topic_type_changed_THEN_subscribers_notified() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  node1:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  node2: val2\\n\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  node1: val1\\n\"\n+                + \"  node2:\\n\"\n+                + \"    key2: val2\\n\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(1, initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        Pair<CompletableFuture<Void>, Subscriber> node1Changed = createSingleAssertSubscriber((what, node) -> {\n+                    assertEquals(WhatHappened.nodeTypeChanged, what, node.getFullName() + node.toPOJO());\n+                    assertEquals(\"val1\", ((Topic) node).getOnce());\n+                });\n+        config.findTopics(\"foo\", \"node1\").subscribe(node1Changed.getRight());\n+\n+        Pair<CompletableFuture<Void>, Subscriber> nodeRemoved = createSingleAssertSubscriber((what, node) -> {\n+                    assertEquals(WhatHappened.removed, what, node.getFullName());\n+                });\n+        config.find(\"foo\", \"node1\", \"key1\").subscribe(nodeRemoved.getRight());\n+\n+        Pair<CompletableFuture<Void>, Subscriber> node2Changed = createSingleAssertSubscriber((what, node) -> {\n+                    assertEquals(WhatHappened.nodeTypeChanged, what, node.getFullName());\n+                    assertEquals(\"val2\", ((Topics) node).find(\"key2\").getOnce());\n+                });\n+        config.find(\"foo\", \"node2\").subscribe(node2Changed.getRight());\n+\n+        // WHEN\n+        Map<Object, Object> updateConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(updateConfig.getBytes())) {\n+            updateConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.root.replaceMap(2, updateConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        // THEN\n+        node1Changed.getLeft().get(100, TimeUnit.MILLISECONDS);\n+        node2Changed.getLeft().get(100, TimeUnit.MILLISECONDS);\n+        nodeRemoved.getLeft().get(100, TimeUnit.MILLISECONDS);\n+\n+        assertEquals(updateConfigMap, config.toPOJO());\n+    }\n+\n+    @Test\n+    public void GIVEN_config_with_subscribers_WHEN_topic_type_changed_THEN_parent_node_notified() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  node1:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  node2: val2\\n\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  node1: val1\\n\"\n+                + \"  node2:\\n\"\n+                + \"    key2: val2\\n\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(1, initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicInteger node1Changed = new AtomicInteger();\n+        AtomicInteger node2Changed = new AtomicInteger();\n+        config.findTopics(\"foo\").subscribe((what, node) -> {\n+            if (WhatHappened.childChanged == what) {", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NTkzOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449185938", "bodyText": "this is the parent node. It will only get childChanged notification", "author": "ShirleyZheng92", "createdAt": "2020-07-02T18:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2OTc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\nindex af6bfffe4..3d4c3457b 100644\n--- a/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java\n\n@@ -327,35 +327,35 @@ public class ConfigurationTest {\n         try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n             initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n         }\n-        config.mergeMap(1, initConfigMap);\n+        config.mergeMap(initConfigMap);\n         config.context.runOnPublishQueueAndWait(() -> {});\n \n-        AtomicInteger containerNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger containerNodeRemovedCount = new AtomicInteger(0);\n         config.findTopics(\"foo\", \"nodeToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                containerNodeRemoved.incrementAndGet();\n+                containerNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicInteger leafNodeRemoved = new AtomicInteger(0);\n+        AtomicInteger leafNodeRemovedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeRemoved\").subscribe((what, c) -> {\n             if (WhatHappened.removed == what) {\n-                leafNodeRemoved.incrementAndGet();\n+                leafNodeRemovedCount.incrementAndGet();\n             }\n         });\n \n-        AtomicBoolean nodeUnchangedNotified = new AtomicBoolean(false);\n+        AtomicBoolean nodeUnchangedNotifiedCount = new AtomicBoolean(false);\n         config.find(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n             if (WhatHappened.initialized != what) {\n-                nodeUnchangedNotified.set(true);\n+                nodeUnchangedNotifiedCount.set(true);\n             }\n         });\n \n-        AtomicInteger leafNodeUpdated = new AtomicInteger(0);\n+        AtomicInteger leafNodeUpdatedCount = new AtomicInteger(0);\n         config.find(\"foo\", \"leafToBeUpdated\").subscribe((what, node) -> {\n             Topic t = (Topic) node;\n             if (WhatHappened.changed == what && t.getOnce().equals(\"updatedValue\")) {\n-                leafNodeUpdated.incrementAndGet();\n+                leafNodeUpdatedCount.incrementAndGet();\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDcyOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449170728", "bodyText": "edge case - check if map is null or empty.  Especially when it is null, map.forEach will throw NPE...", "author": "leaf94", "createdAt": "2020-07-02T17:33:50Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -209,6 +211,70 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n         });\n     }\n \n+    /**\n+     * Replace the given map to this Topics tree.\n+     *\n+     * @param lastModified last modified time\n+     * @param map          map to merge in\n+     */\n+    public void replaceMap(long lastModified, Map<Object, Object> map) {", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyODUyOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449228529", "bodyText": "I don't know what's the expected behavior of null map. Should it fail silently?", "author": "ShirleyZheng92", "createdAt": "2020-07-02T19:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNDg5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r451824890", "bodyText": "I think it should either fail or just skip. Right now it will throw NPE at line 232. Maybe we can add a TODO and merge this in first?", "author": "leaf94", "createdAt": "2020-07-08T21:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyNzc3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r451927779", "bodyText": "I added null check to skip", "author": "ShirleyZheng92", "createdAt": "2020-07-09T02:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topics.java b/src/main/java/com/aws/iot/evergreen/config/Topics.java\nindex 0d56e9c9e..19ce7d3f4 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topics.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topics.java\n\n@@ -225,8 +225,8 @@ public class Topics extends Node implements Iterable<Node> {\n             childToRemove.remove(key);\n             Node existingChild = children.get(key);\n             if (value instanceof Map) {\n-                // if a leaf node is replaced with container node\n                 if (existingChild instanceof Topic) {\n+                    // if a leaf node is replaced with container node\n                     Topics newNode = new Topics(context, key, null);\n                     newNode.replaceMap(lastModified, (Map) value);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MzgxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449173817", "bodyText": "I see you are approaching this with 4 branches here: leaf -> container, leaf -> leaf, container -> container, and container -> leaf.\nSo I would suggest move this comment down btw current line 229 and 230. And also add the missing comment for leaf -> leaf and container -> container just to be clear and consistent.", "author": "leaf94", "createdAt": "2020-07-02T17:39:57Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -209,6 +211,70 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n         });\n     }\n \n+    /**\n+     * Replace the given map to this Topics tree.\n+     *\n+     * @param lastModified last modified time\n+     * @param map          map to merge in\n+     */\n+    public void replaceMap(long lastModified, Map<Object, Object> map) {\n+        Set<String> childToRemove = new HashSet<>(children.keySet());\n+\n+        map.forEach((okey, value) -> {\n+            String key = okey.toString();\n+            childToRemove.remove(key);\n+            Node existingChild = children.get(key);\n+            if (value instanceof Map) {\n+                // if a leaf node is replaced with container node", "originalCommit": "7c3dedee224bdaf2200d6e0ac2b3d4c67744be4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NjI4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449186281", "bodyText": "sure", "author": "ShirleyZheng92", "createdAt": "2020-07-02T18:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MzgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topics.java b/src/main/java/com/aws/iot/evergreen/config/Topics.java\nindex 0d56e9c9e..19ce7d3f4 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topics.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topics.java\n\n@@ -225,8 +225,8 @@ public class Topics extends Node implements Iterable<Node> {\n             childToRemove.remove(key);\n             Node existingChild = children.get(key);\n             if (value instanceof Map) {\n-                // if a leaf node is replaced with container node\n                 if (existingChild instanceof Topic) {\n+                    // if a leaf node is replaced with container node\n                     Topics newNode = new Topics(context, key, null);\n                     newNode.replaceMap(lastModified, (Map) value);\n \n"}}, {"oid": "938499640d173d9ae2585bd7cda9eafcb8928b11", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/938499640d173d9ae2585bd7cda9eafcb8928b11", "message": "split nodeTypeChanged into changedToTopic and changedToTopics", "committedDate": "2020-07-02T20:20:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2NjY2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r449266666", "bodyText": "These additional enum values here look redundant to me. I think what you're using these for can be achieved using the existing childChanged event because you fire changedToTopics / changedToTopic event in Topics->replaceMap() only to transform them to WhatHappened.childChanged at Topics.java:364 and Topic.java:151. Other than that these are only used in a test class for assertions, can't we do that without introducing new events? Or am I missing something?", "author": "shaguptashaikh", "createdAt": "2020-07-02T21:08:29Z", "path": "src/main/java/com/aws/iot/evergreen/config/WhatHappened.java", "diffHunk": "@@ -4,5 +4,5 @@\n package com.aws.iot.evergreen.config;\n \n public enum WhatHappened {\n-    changed, initialized, childChanged, removed, childRemoved\n+    changed, initialized, childChanged, removed, childRemoved, changedToTopic, changedToTopics", "originalCommit": "938499640d173d9ae2585bd7cda9eafcb8928b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2Mzc5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r450363799", "bodyText": "I plan to separate out the PR of node type switching.", "author": "ShirleyZheng92", "createdAt": "2020-07-06T17:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2NjY2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "67a2177e56964d47de4736a92543ae0d9085225f", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/WhatHappened.java b/src/main/java/com/aws/iot/evergreen/config/WhatHappened.java\nindex afe233b39..dbaed7e03 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/WhatHappened.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/WhatHappened.java\n\n@@ -4,5 +4,5 @@\n package com.aws.iot.evergreen.config;\n \n public enum WhatHappened {\n-    changed, initialized, childChanged, removed, childRemoved, changedToTopic, changedToTopics\n+    changed, initialized, childChanged, removed, childRemoved\n }\n"}}, {"oid": "67a2177e56964d47de4736a92543ae0d9085225f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/67a2177e56964d47de4736a92543ae0d9085225f", "message": "Add replaceMap in Topics\n\nReplaceMap will remove the unused fields config when reading from a new\nmap. It effectively override the config with the new map.", "committedDate": "2020-07-06T17:05:22Z", "type": "forcePushed"}, {"oid": "2ccf9601de4f557d45e994dcf72d1a835d4adf1f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2ccf9601de4f557d45e994dcf72d1a835d4adf1f", "message": "Update tlog to record container node removal. Add replaceMap in Topics.\n\nReplaceMap will remove the unused fields config when reading from a new\nmap. It effectively override the config with the new map.\n\nCurrent tlog writer/reader doesn't record container node removal event.\nUpdate Node to record modtime and node removal time.\nUpdate tlog to record container node removal.", "committedDate": "2020-07-06T19:49:39Z", "type": "forcePushed"}, {"oid": "d5889e69305876f0658334dfaf680d643126cc8c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d5889e69305876f0658334dfaf680d643126cc8c", "message": "Update tlog to record container node removal. Add replaceMap in Topics.\n\nReplaceMap will remove the unused fields config when reading from a new\nmap. It effectively override the config with the new map.\n\nCurrent tlog writer/reader doesn't record container node removal event.\nUpdate Node to record modtime and node removal time.\nUpdate tlog to record container node removal.", "committedDate": "2020-07-06T20:02:37Z", "type": "forcePushed"}, {"oid": "d53931e475a92f9e829287335277b211260ef66a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d53931e475a92f9e829287335277b211260ef66a", "message": "Update tlog to record container node removal. Add replaceMap in Topics.\n\nReplaceMap will remove the unused fields config when reading from a new\nmap. It effectively override the config with the new map.\n\nCurrent tlog writer/reader doesn't record container node removal event.\nUpdate Node to record modtime and node removal time.\nUpdate tlog to record container node removal.", "committedDate": "2020-07-06T20:50:18Z", "type": "forcePushed"}, {"oid": "a66f4f38a0ec8b5ab0a67997574419ff7d82a5ae", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a66f4f38a0ec8b5ab0a67997574419ff7d82a5ae", "message": "Update tlog to record container node removal. Add replaceMap in Topics.\n\nReplaceMap will remove the unused fields config when reading from a new\nmap. It effectively override the config with the new map.\n\nCurrent tlog writer/reader doesn't record container node removal event.\nUpdate Node to record modtime and node removal time.\nUpdate tlog to record container node removal.", "committedDate": "2020-07-07T07:00:56Z", "type": "forcePushed"}, {"oid": "06da31352404929d45e9d6e7078c2307886203e2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/06da31352404929d45e9d6e7078c2307886203e2", "message": "Update tlog to record container node removal. Add replaceMap in Topics.\n\nReplaceMap will remove the unused fields config when reading from a new\nmap. It effectively override the config with the new map.\n\nCurrent tlog writer/reader doesn't record container node removal event.\nUpdate Node to record modtime and node removal time.\nUpdate tlog to record container node removal.", "committedDate": "2020-07-08T22:22:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNjIzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r452326230", "bodyText": "return?", "author": "leaf94", "createdAt": "2020-07-09T16:02:19Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -209,6 +225,46 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n         });\n     }\n \n+    /**\n+     * Replace the given map to this Topics tree.\n+     *\n+     * @param lastModified last modified time\n+     * @param map          map to merge in\n+     */\n+    @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH\")\n+    public void replaceMap(long lastModified, Map<Object, Object> map) {\n+        if (map == null) {\n+            logger.atInfo().kv(\"node\", getFullName()).log(\"Null map received in mergeMap(), ignoring.\");\n+        }", "originalCommit": "05d97a862d1736a932372a2b4ba30fded3a3de97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1Mzc4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r452353784", "bodyText": "Ooops", "author": "ShirleyZheng92", "createdAt": "2020-07-09T16:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNjIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "533d2ee62eca0318406ec3cd044896c5c570ac3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/Topics.java b/src/main/java/com/aws/iot/evergreen/config/Topics.java\nindex f88423bef..251469e47 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/Topics.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/Topics.java\n\n@@ -235,6 +236,7 @@ public class Topics extends Node implements Iterable<Node> {\n     public void replaceMap(long lastModified, Map<Object, Object> map) {\n         if (map == null) {\n             logger.atInfo().kv(\"node\", getFullName()).log(\"Null map received in mergeMap(), ignoring.\");\n+            return;\n         }\n         Set<String> childToRemove = new HashSet<>(children.keySet());\n \n"}}, {"oid": "533d2ee62eca0318406ec3cd044896c5c570ac3d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/533d2ee62eca0318406ec3cd044896c5c570ac3d", "message": "Update tlog to record container node removal. Add replaceMap in Topics.\n\nReplaceMap will remove the unused fields config when reading from a new\nmap. It effectively override the config with the new map.\n\nCurrent tlog writer/reader doesn't record container node removal event.\nUpdate Node to record modtime and node removal time.\nUpdate tlog to record container node removal.", "committedDate": "2020-07-09T16:39:34Z", "type": "commit"}, {"oid": "533d2ee62eca0318406ec3cd044896c5c570ac3d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/533d2ee62eca0318406ec3cd044896c5c570ac3d", "message": "Update tlog to record container node removal. Add replaceMap in Topics.\n\nReplaceMap will remove the unused fields config when reading from a new\nmap. It effectively override the config with the new map.\n\nCurrent tlog writer/reader doesn't record container node removal event.\nUpdate Node to record modtime and node removal time.\nUpdate tlog to record container node removal.", "committedDate": "2020-07-09T16:39:34Z", "type": "forcePushed"}, {"oid": "ba83f9ed6e146f252ac1e10f0b671708f7d44223", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ba83f9ed6e146f252ac1e10f0b671708f7d44223", "message": "Merge branch 'master' into replaceConfig", "committedDate": "2020-07-09T16:41:29Z", "type": "commit"}, {"oid": "e77e0535577f1e05ddf83026edfaf659a443329c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e77e0535577f1e05ddf83026edfaf659a443329c", "message": "Merge branch 'master' into replaceConfig", "committedDate": "2020-07-10T17:24:22Z", "type": "commit"}, {"oid": "faef36d3c847936e1ab56478ca22fd908d549ba6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/faef36d3c847936e1ab56478ca22fd908d549ba6", "message": "Fix tests to run on Windows", "committedDate": "2020-07-14T21:19:37Z", "type": "forcePushed"}, {"oid": "e47eeb06b16d526dfb40f03344a04f018c97b3b6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e47eeb06b16d526dfb40f03344a04f018c97b3b6", "message": "Fix tests to run on Windows", "committedDate": "2020-07-14T22:46:58Z", "type": "commit"}, {"oid": "e47eeb06b16d526dfb40f03344a04f018c97b3b6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e47eeb06b16d526dfb40f03344a04f018c97b3b6", "message": "Fix tests to run on Windows", "committedDate": "2020-07-14T22:46:58Z", "type": "forcePushed"}, {"oid": "e5532e1b89ff723ef2418594b4df9b4ec75047ca", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e5532e1b89ff723ef2418594b4df9b4ec75047ca", "message": "Merge branch 'master' into replaceConfig", "committedDate": "2020-07-14T23:00:22Z", "type": "commit"}, {"oid": "325693ad7eb1077d34bc42281a30dd9945f94f40", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/325693ad7eb1077d34bc42281a30dd9945f94f40", "message": "Merge branch 'master' into replaceConfig", "committedDate": "2020-07-15T18:37:29Z", "type": "commit"}, {"oid": "e591afd738655541756374bcf4029d59debae7d9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e591afd738655541756374bcf4029d59debae7d9", "message": "Extend timeout for DeploymentTaskIntegTest\n\nFix DeploymentConfigMergerTest", "committedDate": "2020-07-15T19:41:37Z", "type": "commit"}, {"oid": "e591afd738655541756374bcf4029d59debae7d9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e591afd738655541756374bcf4029d59debae7d9", "message": "Extend timeout for DeploymentTaskIntegTest\n\nFix DeploymentConfigMergerTest", "committedDate": "2020-07-15T19:41:37Z", "type": "forcePushed"}, {"oid": "84b7335f6789359dcb1fc804be00d0c9eb9ec361", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/84b7335f6789359dcb1fc804be00d0c9eb9ec361", "message": "Merge branch 'master' into replaceConfig", "committedDate": "2020-07-16T07:16:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2MTI5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r455561299", "bodyText": "this warning means that a null dereference is inevitable. Shouldn't it be fixed instead of ignored?", "author": "MikeDombo", "createdAt": "2020-07-16T07:18:33Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -192,13 +195,27 @@ public Topics findTopics(String... path) {\n         return n;\n     }\n \n+    protected Node findNode(String... path) {\n+        int limit = path.length - 1;\n+        Topics n = this;\n+        for (int i = 0; i < limit && n != null; i++) {\n+            n = n.findInteriorChild(path[i]);\n+        }\n+        return n == null ? null : n.getChild(path[limit]);\n+    }\n+\n     /**\n      * Add the given map to this Topics tree.\n      *\n      * @param lastModified last modified time\n      * @param map          map to merge in\n      */\n+    @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH\")", "originalCommit": "84b7335f6789359dcb1fc804be00d0c9eb9ec361", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MzA1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r455893059", "bodyText": "Not really. This warning just means there exist a code path that the value is always null. It doesn't check whether you refer to the value in the code path. http://findbugs.sourceforge.net/bugDescriptions.html", "author": "ShirleyZheng92", "createdAt": "2020-07-16T15:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2MTI5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2MjQyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r455562425", "bodyText": "why do we need this change? This code was working before somehow", "author": "MikeDombo", "createdAt": "2020-07-16T07:20:38Z", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentConfigMergerTest.java", "diffHunk": "@@ -197,8 +198,9 @@ public void GIVEN_waitForServicesToStart_WHEN_service_reached_desired_state_THEN\n         assertFalse(serviceStarted.await(3*WAIT_SVC_START_POLL_INTERVAL_MILLISEC, TimeUnit.MILLISECONDS));\n \n         // WHEN\n-        when(mockService.getState()).thenReturn(State.RUNNING);\n-        when(mockService.reachedDesiredState()).thenReturn(true);\n+        // use doReturn() here: https://stackoverflow.com/questions/11121772\n+        doReturn(State.RUNNING).when(mockService).getState();", "originalCommit": "84b7335f6789359dcb1fc804be00d0c9eb9ec361", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDI2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r455890266", "bodyText": "I see the test case fails intermittently in github actions with WrongTypeOfReturnValue", "author": "ShirleyZheng92", "createdAt": "2020-07-16T15:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2MjQyNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e44fe243faeb84208a4a0333967cc5b946584bac", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e44fe243faeb84208a4a0333967cc5b946584bac", "message": "Merge branch 'master' into replaceConfig", "committedDate": "2020-07-16T18:04:14Z", "type": "commit"}, {"oid": "18cf8783ce1db2e18e74abe9248492f86546d992", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/18cf8783ce1db2e18e74abe9248492f86546d992", "message": "Modify covered ratio to pass windows build", "committedDate": "2020-07-16T20:01:21Z", "type": "commit"}, {"oid": "009b69d8d0cea0c61c2508b52c65f805384c86f5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/009b69d8d0cea0c61c2508b52c65f805384c86f5", "message": "Merge branch 'master' into replaceConfig", "committedDate": "2020-07-17T00:06:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDI1Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/282#discussion_r456610252", "bodyText": "nit: error message should be replaceMap", "author": "hui-yang", "createdAt": "2020-07-17T18:35:32Z", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -209,6 +226,47 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n         });\n     }\n \n+    /**\n+     * Replace the given map to this Topics tree.\n+     *\n+     * @param lastModified last modified time\n+     * @param map          map to merge in\n+     */\n+    @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH\")\n+    public void replaceMap(long lastModified, Map<Object, Object> map) {\n+        if (map == null) {\n+            logger.atInfo().kv(\"node\", getFullName()).log(\"Null map received in mergeMap(), ignoring.\");", "originalCommit": "009b69d8d0cea0c61c2508b52c65f805384c86f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}