{"pr_number": 143, "pr_title": "Updated kernel shutdown logic", "pr_createdAt": "2020-03-26T23:38:18Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143", "timeline": [{"oid": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4d199e0e8eaf08a3e8312fa674430fd54bbd6aac", "message": "Updated shutdown method to wait on the future from close() than look at state transitions", "committedDate": "2020-03-26T23:30:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NDg3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398954877", "bodyText": "return the interface. Why change this?", "author": "MikeDombo", "createdAt": "2020-03-26T23:39:04Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -692,7 +692,7 @@ protected void shutdown() throws InterruptedException {\n      *\n      * @return future completes when the lifecycle thread shuts down.\n      */\n-    public Future<Void> close() {\n+    public CompletableFuture<Void> close() {", "originalCommit": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MDUyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398960521", "bodyText": "Updated", "author": "fahadmohammed01", "createdAt": "2020-03-26T23:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NDg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "70e0a219c3b860d2a9beff6f3157bfec84d8ee08", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex d6925eff1..a78aa78c6 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -692,7 +692,7 @@ public class EvergreenService implements InjectionActions {\n      *\n      * @return future completes when the lifecycle thread shuts down.\n      */\n-    public CompletableFuture<Void> close() {\n+    public Future<Void> close() {\n         CompletableFuture<Void> closeFuture = new CompletableFuture<>();\n         context.get(Executor.class).execute(() -> {\n             try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398955079", "bodyText": "don't catch throwable", "author": "MikeDombo", "createdAt": "2020-03-26T23:39:42Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -484,23 +482,35 @@ public void shutdown(int timeoutSeconds) {\n         try {\n             logger.atInfo().setEventType(\"system-shutdown\").addKeyValue(\"main\", getMain()).log();\n             EvergreenService[] d = orderedDependencies().toArray(new EvergreenService[0]);\n-            CountDownLatch allServicesExitedLatch = new CountDownLatch(d.length);\n \n+            CompletableFuture[] arr = new CompletableFuture[d.length];\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n+                String serviceName = d[i].getName();\n                 try {\n-                    d[i].close();\n-                    d[i].getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n-                        if (((State) t.getOnce()).isClosable()) {\n-                            allServicesExitedLatch.countDown();\n+                    arr[i] = d[i].close();\n+                    arr[i].whenComplete((v, t) -> {\n+                        if (t != null) {\n+                            logger.atError().setEventType(\"service-shutdown-error\")\n+                                    .addKeyValue(\"serviceName\", serviceName)\n+                                    .setCause((Throwable) t).log();\n                         }\n+\n                     });\n                 } catch (Throwable t) {\n-                    logger.atError().setEventType(\"service-shutdown-error\").addKeyValue(\"serviceName\", d[i].getName())\n+                    logger.atError().setEventType(\"service-shutdown-error\")\n+                            .addKeyValue(\"serviceName\", serviceName)\n                             .setCause(t).log();\n+                    arr[i] = CompletableFuture.completedFuture(Optional.empty());\n                 }\n             }\n \n-            allServicesExitedLatch.await(timeoutSeconds, TimeUnit.SECONDS);\n+            try {\n+                CompletableFuture<Void> combinedFuture = CompletableFuture.allOf(arr);\n+                combinedFuture.get(timeoutSeconds, TimeUnit.SECONDS);\n+            } catch (Throwable t) {", "originalCommit": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MDk0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398960945", "bodyText": "Updated", "author": "fahadmohammed01", "createdAt": "2020-03-26T23:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "70e0a219c3b860d2a9beff6f3157bfec84d8ee08", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\nindex fbddf64dc..c31660452 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n\n@@ -487,7 +487,7 @@ public class Kernel extends Configuration /*implements Runnable*/ {\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n                 String serviceName = d[i].getName();\n                 try {\n-                    arr[i] = d[i].close();\n+                    arr[i] = (CompletableFuture) d[i].close();\n                     arr[i].whenComplete((v, t) -> {\n                         if (t != null) {\n                             logger.atError().setEventType(\"service-shutdown-error\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398955049", "bodyText": "Use if (t instanceof Throwable)  , null check isn't needed https://stackoverflow.com/questions/2950319/is-null-check-needed-before-calling-instanceof", "author": "ShirleyZheng92", "createdAt": "2020-03-26T23:39:38Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -484,23 +482,35 @@ public void shutdown(int timeoutSeconds) {\n         try {\n             logger.atInfo().setEventType(\"system-shutdown\").addKeyValue(\"main\", getMain()).log();\n             EvergreenService[] d = orderedDependencies().toArray(new EvergreenService[0]);\n-            CountDownLatch allServicesExitedLatch = new CountDownLatch(d.length);\n \n+            CompletableFuture[] arr = new CompletableFuture[d.length];\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n+                String serviceName = d[i].getName();\n                 try {\n-                    d[i].close();\n-                    d[i].getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n-                        if (((State) t.getOnce()).isClosable()) {\n-                            allServicesExitedLatch.countDown();\n+                    arr[i] = d[i].close();\n+                    arr[i].whenComplete((v, t) -> {\n+                        if (t != null) {", "originalCommit": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2Mzc0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398963740", "bodyText": "Synced offline, the biconsumer for whenComplete has the signature   BiConsumer<? super T, ? super Throwable> action). Null check is sufficient here", "author": "fahadmohammed01", "createdAt": "2020-03-27T00:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "70e0a219c3b860d2a9beff6f3157bfec84d8ee08", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\nindex fbddf64dc..c31660452 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n\n@@ -487,7 +487,7 @@ public class Kernel extends Configuration /*implements Runnable*/ {\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n                 String serviceName = d[i].getName();\n                 try {\n-                    arr[i] = d[i].close();\n+                    arr[i] = (CompletableFuture) d[i].close();\n                     arr[i].whenComplete((v, t) -> {\n                         if (t != null) {\n                             logger.atError().setEventType(\"service-shutdown-error\")\n"}}, {"oid": "70e0a219c3b860d2a9beff6f3157bfec84d8ee08", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/70e0a219c3b860d2a9beff6f3157bfec84d8ee08", "message": "addressed minor comments", "committedDate": "2020-03-26T23:53:23Z", "type": "commit"}, {"oid": "f7ed433dd70a50cc89368f210c90cda6430b8698", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f7ed433dd70a50cc89368f210c90cda6430b8698", "message": "renamed variable", "committedDate": "2020-03-26T23:57:53Z", "type": "commit"}, {"oid": "3211d45e7513422545080f82e4ab57aacd45e4e2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3211d45e7513422545080f82e4ab57aacd45e4e2", "message": "Merge branch 'master' into updated-shutdown", "committedDate": "2020-03-27T00:00:46Z", "type": "commit"}]}