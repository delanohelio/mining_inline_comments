{"pr_number": 320, "pr_title": "Add negative caching in TES", "pr_createdAt": "2020-07-17T22:14:33Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320", "timeline": [{"oid": "a4d7f862c929d9560890f51bbc6018b48e7fbfcb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a4d7f862c929d9560890f51bbc6018b48e7fbfcb", "message": "Add IotCloudResponse class to pass in status code", "committedDate": "2020-07-17T22:09:14Z", "type": "commit"}, {"oid": "9b160fe64572b1f67b23886a4d31abba7a7c6da3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9b160fe64572b1f67b23886a4d31abba7a7c6da3", "message": "reformat", "committedDate": "2020-07-17T22:20:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NjEzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r457546137", "bodyText": "May be we should not convert it to string, as it could be used by other clients which might just want to deal with bytes.", "author": "prateek-y", "createdAt": "2020-07-20T16:39:04Z", "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -95,34 +96,37 @@ public void onResponseHeaders(HttpStream httpStream, int i, int i1, HttpHeader[]\n             @Override\n             public int onResponseBody(HttpStream stream, byte[] bodyBytes) {\n                 responseBody.append(new String(bodyBytes, StandardCharsets.UTF_8));\n+                response.setResponseBody(responseBody.toString());", "originalCommit": "9b160fe64572b1f67b23886a4d31abba7a7c6da3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4414c26854953e0d9587af99d4273f7d5bbc22eb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java b/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\nindex 676ae410..cc1f43ea 100644\n--- a/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\n\n@@ -95,8 +95,7 @@ public class IotCloudHelper {\n \n             @Override\n             public int onResponseBody(HttpStream stream, byte[] bodyBytes) {\n-                responseBody.append(new String(bodyBytes, StandardCharsets.UTF_8));\n-                response.setResponseBody(responseBody.toString());\n+                response.setResponseBody(bodyBytes);\n                 return bodyBytes.length;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NzM2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r457547366", "bodyText": "Do you want to use @Data here?", "author": "prateek-y", "createdAt": "2020-07-20T16:41:03Z", "path": "src/main/java/com/aws/iot/evergreen/iot/model/IotCloudResponse.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.aws.iot.evergreen.iot.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Setter\n+public class IotCloudResponse {", "originalCommit": "9b160fe64572b1f67b23886a4d31abba7a7c6da3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4414c26854953e0d9587af99d4273f7d5bbc22eb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/iot/model/IotCloudResponse.java b/src/main/java/com/aws/iot/evergreen/iot/model/IotCloudResponse.java\nindex e17e8fc3..fd08b18c 100644\n--- a/src/main/java/com/aws/iot/evergreen/iot/model/IotCloudResponse.java\n+++ b/src/main/java/com/aws/iot/evergreen/iot/model/IotCloudResponse.java\n\n@@ -1,16 +1,20 @@\n package com.aws.iot.evergreen.iot.model;\n \n import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import lombok.Data;\n import lombok.NoArgsConstructor;\n-import lombok.Setter;\n \n-@Getter\n+import java.nio.charset.StandardCharsets;\n+\n @NoArgsConstructor\n @AllArgsConstructor\n-@Setter\n+@Data\n public class IotCloudResponse {\n-    private String responseBody;\n+    private byte[] responseBody;\n     private int statusCode;\n \n+    @Override\n+    public String toString() {\n+        return new String(responseBody, StandardCharsets.UTF_8);\n+    }\n }\n"}}, {"oid": "4414c26854953e0d9587af99d4273f7d5bbc22eb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4414c26854953e0d9587af99d4273f7d5bbc22eb", "message": "Add retry and ut", "committedDate": "2020-07-20T23:22:17Z", "type": "commit"}, {"oid": "2eef00de3eb77d677a092c994c04422eb9489031", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2eef00de3eb77d677a092c994c04422eb9489031", "message": "Merge branch 'master' into tes-cloud-statuscode", "committedDate": "2020-07-20T23:22:58Z", "type": "commit"}, {"oid": "227550e3690594de161b2c0ea6223d9d5ec9a1f1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/227550e3690594de161b2c0ea6223d9d5ec9a1f1", "message": "Merge branch 'master' into tes-cloud-statuscode", "committedDate": "2020-07-21T02:47:03Z", "type": "commit"}, {"oid": "e665ff4fefa484f003dfa8d6c4368d49e8a202c1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e665ff4fefa484f003dfa8d6c4368d49e8a202c1", "message": "Merge branch 'master' into tes-cloud-statuscode", "committedDate": "2020-07-21T03:17:20Z", "type": "commit"}, {"oid": "6b809d55fb20bdd9d1816af86b8909d7c087747f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6b809d55fb20bdd9d1816af86b8909d7c087747f", "message": "Merge branch 'master' into tes-cloud-statuscode", "committedDate": "2020-07-21T05:25:02Z", "type": "commit"}, {"oid": "c7e970c1838b3bdccb8e35d3f94c054b9fd0012d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c7e970c1838b3bdccb8e35d3f94c054b9fd0012d", "message": "Merge branch 'master' into tes-cloud-statuscode", "committedDate": "2020-07-21T16:38:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NDUwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r458274503", "bodyText": "I think this method might get called multiple times, you cannot assume that its only called once.", "author": "prateek-y", "createdAt": "2020-07-21T17:39:56Z", "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -95,8 +95,7 @@ public void onResponseHeaders(HttpStream httpStream, int i, int i1, HttpHeader[]\n \n             @Override\n             public int onResponseBody(HttpStream stream, byte[] bodyBytes) {\n-                responseBody.append(new String(bodyBytes, StandardCharsets.UTF_8));\n-                response.setResponseBody(responseBody.toString());\n+                response.setResponseBody(bodyBytes);", "originalCommit": "c7e970c1838b3bdccb8e35d3f94c054b9fd0012d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "120b09c98751a5318980c13c1819ced01a26625a", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java b/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\nindex cc1f43ea..eb5937fc 100644\n--- a/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\n\n@@ -95,7 +98,11 @@ public class IotCloudHelper {\n \n             @Override\n             public int onResponseBody(HttpStream stream, byte[] bodyBytes) {\n-                response.setResponseBody(bodyBytes);\n+                try {\n+                    responseByteArray.write(bodyBytes);\n+                } catch (IOException e) {\n+                    LOGGER.error(\"Fail to write response body:\", e);\n+                }\n                 return bodyBytes.length;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NDc5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r458274791", "bodyText": "Great. Thanks for adding this.", "author": "prateek-y", "createdAt": "2020-07-21T17:40:25Z", "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -55,16 +59,12 @@ public IotCloudResponse sendHttpRequest(final IotConnectionManager connManager,\n         final HttpRequestBodyStream httpRequestBodyStream = body == null ? null : createHttpRequestBodyStream(body);\n         final HttpRequest request = new HttpRequest(verb, path, headers, httpRequestBodyStream);\n \n-        IotCloudResponse response;\n         try (HttpClientConnection conn = connManager.getConnection()) {\n-            // TODO: Make it exponential backoff, create backoff util for common use.\n-            int numAttempts = 0;\n-            do {\n-                numAttempts++;\n-                response = getHttpResponse(conn, request);\n-            } while (numAttempts < 1);\n+            BaseRetryableAccessor accessor = new BaseRetryableAccessor();", "originalCommit": "c7e970c1838b3bdccb8e35d3f94c054b9fd0012d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c0d9518001bed6456806fc0558cde84677b93589", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c0d9518001bed6456806fc0558cde84677b93589", "message": "Merge branch 'master' into tes-cloud-statuscode", "committedDate": "2020-07-22T00:00:26Z", "type": "commit"}, {"oid": "120b09c98751a5318980c13c1819ced01a26625a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/120b09c98751a5318980c13c1819ced01a26625a", "message": "Add negative caching and ut", "committedDate": "2020-07-24T16:39:19Z", "type": "commit"}, {"oid": "b27d0b7053ad7fc3b17ca2448920c6080a683c49", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b27d0b7053ad7fc3b17ca2448920c6080a683c49", "message": "Merge branch 'master' into tes-cloud-statuscode", "committedDate": "2020-07-24T16:42:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzMzkwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460333901", "bodyText": "Is there a reason to introduce byte array separately and not part of IotCloudResponse ?", "author": "prateek-y", "createdAt": "2020-07-24T23:54:18Z", "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -83,7 +86,8 @@ public boolean resetPosition() {\n \n     private HttpStreamResponseHandler createResponseHandler(CompletableFuture<Integer> reqCompleted,\n                                                             Map<String, String> responseHeaders,\n-                                                            StringBuilder responseBody) {\n+                                                            ByteArrayOutputStream responseByteArray,\n+                                                            IotCloudResponse response) {", "originalCommit": "b27d0b7053ad7fc3b17ca2448920c6080a683c49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2MjI2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r461262269", "bodyText": "I was using the ByteArrayOurputStream in the same way as StringBuilder to build the response byte array. I can remove the argument and do the concatenation inside onResponseBody()", "author": "youtuyy", "createdAt": "2020-07-28T01:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzMzkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e498d4ce1f8559d6c09d6b5222116d6a814addf", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java b/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\nindex eb5937fc..cd9d2d91 100644\n--- a/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\n\n@@ -86,7 +85,6 @@ public class IotCloudHelper {\n \n     private HttpStreamResponseHandler createResponseHandler(CompletableFuture<Integer> reqCompleted,\n                                                             Map<String, String> responseHeaders,\n-                                                            ByteArrayOutputStream responseByteArray,\n                                                             IotCloudResponse response) {\n         return new HttpStreamResponseHandler() {\n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNjI5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460336294", "bodyText": "We also need to cover the case when lets say role alias is invalid, then we will receive a response with 200, but response will be error from cloud like \"role alias is invalid\"", "author": "prateek-y", "createdAt": "2020-07-25T00:07:32Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -92,45 +97,61 @@ public void handle(final HttpExchange exchange) throws IOException {\n             response = tesCache.get(iotCredentialsPath).credentials;\n             return response;\n         }\n-        \n+\n+        // Get new credentials from cloud\n+        LOGGER.info(\"IAM credentials not found in cache or already expired. Fetching new ones from TES\");\n         Instant newExpiry = tesCache.get(iotCredentialsPath).expiry;\n \n         try {\n-            final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n-                    iotCredentialsPath,\n-                    IOT_CREDENTIALS_HTTP_VERB, null);\n-\n-            try {\n-                response = translateToAwsSdkFormat(credentials);\n-                String expiryString = parseExpiryFromResponse(credentials);\n-                Instant expiry = Instant.parse(expiryString);\n-\n-                if (expiry.isBefore(Instant.now(clock))) {\n-                    String responseString = \"TES responded with expired credentials: \" + credentials;\n-                    response = responseString.getBytes(StandardCharsets.UTF_8);\n-                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n-                    LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n-                } else {\n-                    newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n-                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_OK;\n-\n-                    if (newExpiry.isBefore(Instant.now(clock))) {\n-                        LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n-                                expiry.toString(),\n-                                TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+            final IotCloudResponse cloudResponse = iotCloudHelper\n+                    .sendHttpRequest(iotConnectionManager, iotCredentialsPath, IOT_CREDENTIALS_HTTP_VERB, null);\n+            final String credentials = cloudResponse.toString();\n+            final int cloudResponseCode = cloudResponse.getStatusCode();\n+\n+            if (cloudResponseCode == 0) {\n+                // Client errors should expire immediately\n+                String responseString = \"Failed to get credentials from TES\";\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                newExpiry = Instant.now(clock);\n+                tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+            } else if (cloudResponseCode == HttpURLConnection.HTTP_OK) {\n+                // Get response successfully, cache credentials according to expiry in response\n+                try {\n+                    response = translateToAwsSdkFormat(credentials);", "originalCommit": "b27d0b7053ad7fc3b17ca2448920c6080a683c49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2MjI0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r461262249", "bodyText": "In which case will we receive 200 and error from the cloud? I'm getting \"access denied (403)\" when using a wrong role-alias in the request url", "author": "youtuyy", "createdAt": "2020-07-28T01:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNjI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3MzU0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r461773547", "bodyText": "My bad. I was trying to give an example. But you are right, status code will let us catch any errors.", "author": "prateek-y", "createdAt": "2020-07-28T18:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNjI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "6e498d4ce1f8559d6c09d6b5222116d6a814addf", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\nindex 93779073..b743efc7 100644\n--- a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n+++ b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n\n@@ -90,7 +90,7 @@ public class CredentialRequestHandler implements HttpHandler {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n+        byte[] response;\n         LOGGER.debug(\"Got request for credentials\");\n \n         if (areCredentialsValid()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNjY1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460336651", "bodyText": "nit:\nexpiryTime = UNKNOWN_ERROR_CACHE_IN_MIN;\nif (statusCode >= 400 && statusCode < 500) {\n    expiryTime = CLOUD_4XX_ERROR_CACHE_IN_MIN;\n} else if (statusCode >= 500 && statusCode < 600) {\n   expiryTime = CLOUD_5XX_ERROR_CACHE_IN_MIN;\n}\nreturn Instant.now(clock).plus(Duration.ofMinutes(expiryTime);", "author": "prateek-y", "createdAt": "2020-07-25T00:09:32Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -166,7 +187,28 @@ private String parseExpiryFromResponse(final String credentials) throws AWSIotEx\n         }\n     }\n \n-    private boolean areCredentialsValid() {\n+    private Instant getExpiryPolicyForErr(int statusCode) {\n+        Instant t;", "originalCommit": "b27d0b7053ad7fc3b17ca2448920c6080a683c49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e498d4ce1f8559d6c09d6b5222116d6a814addf", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\nindex 93779073..b743efc7 100644\n--- a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n+++ b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n\n@@ -188,19 +193,16 @@ public class CredentialRequestHandler implements HttpHandler {\n     }\n \n     private Instant getExpiryPolicyForErr(int statusCode) {\n-        Instant t;\n+        int expiryTime = UNKNOWN_ERROR_CACHE_IN_MIN; // In case of unrecognized cloud errors, back off\n         // Add caching Time-To-Live (TTL) for TES cloud errors\n         if (statusCode >= 400 && statusCode < 500) {\n             // 4xx retries are only meaningful unless a user action has been adopted, TTL should be longer\n-            t = Instant.now(clock).plus(Duration.ofMinutes(CLOUD_4XX_ERROR_CACHE_IN_MIN));\n+            expiryTime = CLOUD_4XX_ERROR_CACHE_IN_MIN;\n         } else if (statusCode >= 500 && statusCode < 600) {\n             // 5xx could be a temporary cloud unavailability, TTL should be shorter\n-            t = Instant.now(clock).plus(Duration.ofMinutes(CLOUD_5XX_ERROR_CACHE_IN_MIN));\n-        } else {\n-            // In case of unrecognized cloud errors, back off\n-            t = Instant.now(clock).plus(Duration.ofMinutes(UNKNOWN_ERROR_CACHE_IN_MIN));\n+            expiryTime = CLOUD_5XX_ERROR_CACHE_IN_MIN;\n         }\n-        return t;\n+        return Instant.now(clock).plus(Duration.ofMinutes(expiryTime));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNzMxOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460337318", "bodyText": "Lets increase the backoff time to may be 200ms? Does the retryer backs off exponentially? Then overall if it takes around 1-2 seconds to retry under no network conditions, thats ideal. We dont want to give up too early.", "author": "prateek-y", "createdAt": "2020-07-25T00:13:35Z", "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -36,6 +41,8 @@\n     // TODO: revisit all timeout values\n     // Max wait time for device to receive HTTP response from IOT CLOUD\n     private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofSeconds(30).getSeconds();\n+    private static final int RETRY_COUNT = 3;\n+    private static final int BACKOFF_MILLIS = 100;", "originalCommit": "b27d0b7053ad7fc3b17ca2448920c6080a683c49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2MjIzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r461262232", "bodyText": "There is no exponential back off. 200 sounds good", "author": "youtuyy", "createdAt": "2020-07-28T01:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNzMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "6e498d4ce1f8559d6c09d6b5222116d6a814addf", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java b/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\nindex eb5937fc..cd9d2d91 100644\n--- a/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java\n\n@@ -42,7 +41,7 @@ public class IotCloudHelper {\n     // Max wait time for device to receive HTTP response from IOT CLOUD\n     private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofSeconds(30).getSeconds();\n     private static final int RETRY_COUNT = 3;\n-    private static final int BACKOFF_MILLIS = 100;\n+    private static final int BACKOFF_MILLIS = 200;\n \n     /**\n      * Sends Http request to Iot Cloud.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNzU1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460337559", "bodyText": "Lets add a test case, when Iot cloud returns a response like \"role not found\" with a 200.", "author": "prateek-y", "createdAt": "2020-07-25T00:15:05Z", "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -171,4 +175,100 @@ public void GIVEN_unparsable_response_WHEN_called_handle_THEN_returns_error(\n         verify(mockStream, times(1)).write(expectedReponse);\n         mockStream.close();\n     }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_no_response_code_WHEN_called_handle_THEN_expire_immediately() throws Exception {\n+        String responseStr = \"\";\n+        IotCloudResponse mockResponse = new IotCloudResponse(responseStr.getBytes(StandardCharsets.UTF_8), 0);\n+        when(mockCloudHelper.sendHttpRequest(any(), any(), any(), any())).thenReturn(mockResponse);\n+        CredentialRequestHandler handler =\n+                new CredentialRequestHandler(ROLE_ALIAS, mockCloudHelper, mockConnectionManager);\n+        HttpExchange mockExchange = mock(HttpExchange.class);\n+        OutputStream mockStream = mock(OutputStream.class);\n+        when(mockExchange.getResponseBody()).thenReturn(mockStream);\n+        handler.handle(mockExchange);\n+        byte[] expectedResponse = \"Failed to get credentials from TES\".getBytes();\n+        int expectedStatus = 500;\n+        // expire immediately\n+        assertFalse(handler.areCredentialsValid());\n+        verify(mockExchange, times(1)).sendResponseHeaders(expectedStatus, expectedResponse.length);\n+        verify(mockStream, times(1)).write(expectedResponse);\n+        mockStream.close();\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_4xx_response_code_WHEN_called_handle_THEN_expire_in_2_minutes() throws Exception {\n+        byte[] response = {};\n+        IotCloudResponse mockResponse = new IotCloudResponse(response, 400);", "originalCommit": "b27d0b7053ad7fc3b17ca2448920c6080a683c49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ce7fd3776622f655562a550b839beb5bac596d6", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java b/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\nindex dc992d42..b7591c02 100644\n--- a/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java\n\n@@ -271,4 +271,23 @@ public class CredentialRequestHandlerTest {\n         verify(mockStream, times(1)).write(expectedResponse);\n         mockStream.close();\n     }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_connection_error_WHEN_called_handle_THEN_expire_immediately() throws Exception {\n+        when(mockCloudHelper.sendHttpRequest(any(), any(), any(), any())).thenThrow(AWSIotException.class);\n+        CredentialRequestHandler handler =\n+                new CredentialRequestHandler(ROLE_ALIAS, mockCloudHelper, mockConnectionManager);\n+        HttpExchange mockExchange = mock(HttpExchange.class);\n+        OutputStream mockStream = mock(OutputStream.class);\n+        when(mockExchange.getResponseBody()).thenReturn(mockStream);\n+        handler.handle(mockExchange);\n+        byte[] expectedResponse = \"Failed to get connection\".getBytes();\n+        int expectedStatus = 500;\n+        // expire immediately\n+        assertFalse(handler.areCredentialsValid());\n+        verify(mockExchange, times(1)).sendResponseHeaders(expectedStatus, expectedResponse.length);\n+        verify(mockStream, times(1)).write(expectedResponse);\n+        mockStream.close();\n+    }\n }\n"}}, {"oid": "6e498d4ce1f8559d6c09d6b5222116d6a814addf", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6e498d4ce1f8559d6c09d6b5222116d6a814addf", "message": "address comments", "committedDate": "2020-07-28T01:38:39Z", "type": "commit"}, {"oid": "3557aab3dd39069ff36d49199499901112bc0395", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3557aab3dd39069ff36d49199499901112bc0395", "message": "Merge branch 'master' into tes-cloud-statuscode", "committedDate": "2020-07-28T16:29:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMDc0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r461910748", "bodyText": "Could you add a test for this case too?", "author": "popanmol", "createdAt": "2020-07-28T21:58:51Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -82,55 +86,77 @@ public void handle(final HttpExchange exchange) throws IOException {\n \n     /**\n      * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     *\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n+        byte[] response;\n         LOGGER.debug(\"Got request for credentials\");\n \n         if (areCredentialsValid()) {\n             response = tesCache.get(iotCredentialsPath).credentials;\n             return response;\n         }\n-        \n+\n+        // Get new credentials from cloud\n+        LOGGER.info(\"IAM credentials not found in cache or already expired. Fetching new ones from TES\");\n         Instant newExpiry = tesCache.get(iotCredentialsPath).expiry;\n \n         try {\n-            final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n-                    iotCredentialsPath,\n-                    IOT_CREDENTIALS_HTTP_VERB, null);\n-\n-            try {\n-                response = translateToAwsSdkFormat(credentials);\n-                String expiryString = parseExpiryFromResponse(credentials);\n-                Instant expiry = Instant.parse(expiryString);\n-\n-                if (expiry.isBefore(Instant.now(clock))) {\n-                    String responseString = \"TES responded with expired credentials: \" + credentials;\n-                    response = responseString.getBytes(StandardCharsets.UTF_8);\n-                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n-                    LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n-                } else {\n-                    newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n-                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_OK;\n-\n-                    if (newExpiry.isBefore(Instant.now(clock))) {\n-                        LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n-                                expiry.toString(),\n-                                TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+            final IotCloudResponse cloudResponse = iotCloudHelper\n+                    .sendHttpRequest(iotConnectionManager, iotCredentialsPath, IOT_CREDENTIALS_HTTP_VERB, null);\n+            final String credentials = cloudResponse.toString();\n+            final int cloudResponseCode = cloudResponse.getStatusCode();\n+\n+            if (cloudResponseCode == 0) {\n+                // Client errors should expire immediately\n+                String responseString = \"Failed to get credentials from TES\";\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                newExpiry = Instant.now(clock);\n+                tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+            } else if (cloudResponseCode == HttpURLConnection.HTTP_OK) {\n+                // Get response successfully, cache credentials according to expiry in response\n+                try {\n+                    response = translateToAwsSdkFormat(credentials);\n+                    String expiryString = parseExpiryFromResponse(credentials);\n+                    Instant expiry = Instant.parse(expiryString);\n+\n+                    if (expiry.isBefore(Instant.now(clock))) {\n+                        String responseString = \"TES responded with expired credentials: \" + credentials;\n+                        response = responseString.getBytes(StandardCharsets.UTF_8);\n+                        tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                        LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n                     } else {\n-                        LOGGER.info(\"Received IAM credentials that will be cached until {}\", newExpiry.toString());\n+                        newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                        tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_OK;\n+\n+                        if (newExpiry.isBefore(Instant.now(clock))) {\n+                            LOGGER.warn(\n+                                    \"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                                    expiry.toString(), TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+                        } else {\n+                            LOGGER.info(\"Received IAM credentials that will be cached until {}\", newExpiry.toString());\n+                        }\n                     }\n+                } catch (AWSIotException e) {\n+                    String responseString = \"Bad TES response: \" + credentials;\n+                    response = responseString.getBytes(StandardCharsets.UTF_8);\n+                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                    LOGGER.error(\"Unable to parse response body\", e);\n                 }\n-            } catch (AWSIotException e) {\n-                String responseString = \"Bad TES response: \" + credentials;\n+            } else {\n+                // Cloud errors should be cached\n+                String responseString =\n+                        String.format(\"TES responded with status code: %d\", cloudResponseCode, credentials);\n                 response = responseString.getBytes(StandardCharsets.UTF_8);\n-                tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n-                LOGGER.error(\"Unable to parse response body\", e);\n+                newExpiry = getExpiryPolicyForErr(cloudResponseCode);\n+                tesCache.get(iotCredentialsPath).responseCode = cloudResponseCode;\n             }\n-\n         } catch (AWSIotException e) {\n-            // TODO: Generate 4xx, 5xx responses for all error scenarios\n+            // Http connection error", "originalCommit": "3557aab3dd39069ff36d49199499901112bc0395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1Mzc5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r461953793", "bodyText": "added", "author": "youtuyy", "createdAt": "2020-07-28T23:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMDc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "1ce7fd3776622f655562a550b839beb5bac596d6", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\nindex b743efc7..2559cabb 100644\n--- a/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n+++ b/src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java\n\n@@ -153,11 +153,12 @@ public class CredentialRequestHandler implements HttpHandler {\n                 tesCache.get(iotCredentialsPath).responseCode = cloudResponseCode;\n             }\n         } catch (AWSIotException e) {\n-            // Http connection error\n-            String responseString = \"Failed to get connection:\" + e.getMessage();\n+            // Http connection error should expire immediately\n+            String responseString = \"Failed to get connection\";\n             response = responseString.getBytes(StandardCharsets.UTF_8);\n+            newExpiry = Instant.now(clock);\n             tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n-            LOGGER.error(\"Encountered error while fetching credentials\", e);\n+            LOGGER.warn(\"Encountered error while fetching credentials\", e.getMessage());\n         }\n \n         tesCache.get(iotCredentialsPath).expiry = newExpiry;\n"}}, {"oid": "e60c7a95656ca32b23df24f22b981fccaa405d35", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e60c7a95656ca32b23df24f22b981fccaa405d35", "message": "Merge branch 'master' into tes-cloud-statuscode", "committedDate": "2020-07-28T22:43:59Z", "type": "commit"}, {"oid": "1ce7fd3776622f655562a550b839beb5bac596d6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1ce7fd3776622f655562a550b839beb5bac596d6", "message": "add ut", "committedDate": "2020-07-28T23:32:15Z", "type": "commit"}]}