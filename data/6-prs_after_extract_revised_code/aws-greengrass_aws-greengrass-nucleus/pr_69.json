{"pr_number": 69, "pr_title": "Enable config merging to update config and add dependencies", "pr_createdAt": "2020-02-21T22:58:53Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69", "timeline": [{"oid": "0a3aeea97f8ebabe423f8d9d8935d594521d7931", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0a3aeea97f8ebabe423f8d9d8935d594521d7931", "message": "Remove calls to setState()", "committedDate": "2020-02-21T23:48:49Z", "type": "forcePushed"}, {"oid": "0b976e973a72ee765168ba64cd4f3fd202e37457", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0b976e973a72ee765168ba64cd4f3fd202e37457", "message": "Remove calls to setState()", "committedDate": "2020-02-22T00:32:05Z", "type": "forcePushed"}, {"oid": "f16b1d8a197b17a16f25f77bb540846bd94ac997", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f16b1d8a197b17a16f25f77bb540846bd94ac997", "message": "Remove calls to setState()", "committedDate": "2020-02-22T00:38:45Z", "type": "forcePushed"}, {"oid": "e77f1660bc21c5495951e2c9ef468a9eafdddf7b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e77f1660bc21c5495951e2c9ef468a9eafdddf7b", "message": "Remove calls to setState()", "committedDate": "2020-02-22T00:42:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDA0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382880042", "bodyText": "Nit - might as well Get -> Got?", "author": "shaguptashaikh", "createdAt": "2020-02-22T02:56:04Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -370,7 +396,8 @@ private void startStateTransition() throws InterruptedException {\n                                     waitForDependencyReady();\n                                     context.getLog().note(getName(), \"starting\");\n                                 } catch (InterruptedException e) {\n-                                    context.getLog().note(getName(), \"Get interrupted when waiting for dependency ready\");\n+                                    context.getLog()\n+                                            .note(getName(), \"Get interrupted when waiting for dependency ready\");", "originalCommit": "e77f1660bc21c5495951e2c9ef468a9eafdddf7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MjkwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382882901", "bodyText": "This was pre-existing, but you're right. Can change.", "author": "MikeDombo", "createdAt": "2020-02-22T03:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7c77d5c5dd91a5d34accc1c51d666c0f509f4668", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 639241a1c6..c260ce5431 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -393,6 +393,7 @@ public class EvergreenService implements InjectionActions, Closeable {\n                         case Running:\n                             setBackingTask(() -> {\n                                 try {\n+                                    context.getLog().note(getName(), \"waiting for dependencies to start\");\n                                     waitForDependencyReady();\n                                     context.getLog().note(getName(), \"starting\");\n                                 } catch (InterruptedException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDM2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382880364", "bodyText": "How did you decide this interval? Wouldn't 1s be too long?", "author": "shaguptashaikh", "createdAt": "2020-02-22T03:01:06Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -627,15 +667,13 @@ private void waitForDependencyReady() throws InterruptedException {\n         synchronized (dependencyReadyLock) {\n             while (!dependencyReady()) {\n                 context.getLog().note(getName(), \"waiting for dependency ready\");\n-                dependencyReadyLock.wait();\n+                dependencyReadyLock.wait(1000);", "originalCommit": "e77f1660bc21c5495951e2c9ef468a9eafdddf7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MjkzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382882939", "bodyText": "Just trying to make the tests pass. This probably isn't the real solution. As you can see, previously it waits forever which I believe is causing some issues. But I won't know until I debug some more on Monday.", "author": "MikeDombo", "createdAt": "2020-02-22T03:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "7c77d5c5dd91a5d34accc1c51d666c0f509f4668", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 639241a1c6..c260ce5431 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -667,7 +669,7 @@ public class EvergreenService implements InjectionActions, Closeable {\n         synchronized (dependencyReadyLock) {\n             while (!dependencyReady()) {\n                 context.getLog().note(getName(), \"waiting for dependency ready\");\n-                dependencyReadyLock.wait(1000);\n+                dependencyReadyLock.wait();\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDcwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382880702", "bodyText": "Hmm, I have not written code to format dependencies with this pattern, it's currently just comma separated service names especially since we haven't changed the recipe model to accept dependency states. For now one of us will need to use Running as the default state", "author": "shaguptashaikh", "createdAt": "2020-02-22T03:05:50Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -664,27 +702,22 @@ public void postInject() {\n                 }\n             }\n         }).start();\n+    }\n \n-        Node d = config.getChild(\"requires\");\n-        if (d instanceof Topic) {\n-            String ds = ((Topic) d).getOnce().toString();\n-            Matcher m = DEP_PARSE.matcher(ds);\n-            while (m.find()) {\n-                addDependency(m.group(1), m.group(3));\n-            }\n-            if (!m.hitEnd()) {\n-                errored(\"bad dependency syntax\", ds);\n-            }\n-        } else if (d == null) {\n-            return;\n-        } else {\n-            String errMsg = String.format(\"Unrecognized dependency configuration, config content: %s\", d.toString());\n-            context.getLog().error(getName(), errMsg);\n-            // TODO: invalidate the config file\n+    private Map<EvergreenService, State> parseDependencyList(String dependencyList) throws Exception {\n+        Matcher m = DEP_PARSE.matcher(dependencyList);", "originalCommit": "e77f1660bc21c5495951e2c9ef468a9eafdddf7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MzAxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382883015", "bodyText": "Right now that is the way that dependencies are formatted (with the default being Running), but Shirley's doc says to remove that behavior. Again, this is unchanged behavior from before and will probably be removed eventually.", "author": "MikeDombo", "createdAt": "2020-02-22T03:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "05b1f2e0a3933c55c73cb82a5a5acaffc76b1a2e", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 639241a1c6..ebea21c867 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -719,7 +734,7 @@ public class EvergreenService implements InjectionActions, Closeable {\n \n     private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen) throws Exception {\n         if (startWhen == null) {\n-            startWhen = State.Running.toString();\n+            startWhen = State.RUNNING.toString();\n         }\n         State x = null;\n         int len = startWhen.length();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTQ5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382881494", "bodyText": "This looks like this will restart all services right? For now it's okay since we have not decided if we will send only added/updated services but curious if this can be done only for updated services if we send the full config.", "author": "shaguptashaikh", "createdAt": "2020-02-22T03:19:42Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -508,4 +518,48 @@ public void addServiceSearchURL(Object url) {\n             }\n         }\n     }\n+\n+    public Future<Void> mergeInNewConfig(String deploymentId, long timestamp, Map<Object, Object> newConfig) {\n+        CompletableFuture<Void> totallyCompleteFuture = new CompletableFuture<>();\n+        CompletableFuture<Void> mergeFuture = new CompletableFuture<>();\n+\n+        AtomicInteger allServicesUp = new AtomicInteger(newConfig.size());\n+        EvergreenService.GlobalStateChangeListener listener = (service, was) -> {\n+            if (newConfig.containsKey(service.getName()) && service.getState().equals(State.Running)) {\n+                allServicesUp.decrementAndGet();\n+            }\n+            if (allServicesUp.get() <= 0) {\n+                totallyCompleteFuture.complete(null);\n+            }\n+        };\n+\n+        totallyCompleteFuture.thenRun(() -> {\n+            context.removeGlobalStateChangeListener(listener);\n+        });\n+\n+        context.get(UpdateSystemSafelyService.class)\n+                .addUpdateAction(deploymentId, () -> context.runOnPublishQueueAndWait(() -> {\n+                    try {\n+                        context.addGlobalStateChangeListener(listener);\n+                        mergeMap(timestamp, newConfig);\n+                        mergeFuture.complete(null);\n+                    } catch (IllegalArgumentException e) {\n+                        mergeFuture.completeExceptionally(e);\n+                    }\n+                }));\n+\n+        // Wait for the merge to complete and then have all services start\n+        mergeFuture.thenRun(() -> {\n+            newConfig.keySet().forEach(serviceName -> {\n+                EvergreenService eg = EvergreenService.locate(context, (String) serviceName);\n+                if (eg != null) {\n+                    eg.requestRestart();", "originalCommit": "e77f1660bc21c5495951e2c9ef468a9eafdddf7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MjcxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382882717", "bodyText": "Also, since this is not starting up services in order, is it possible this executes more than once for certain services? say A depends on B, both A and B are part of the config so A receives restart request twice, once from here and the second time on account of B being restarted.", "author": "shaguptashaikh", "createdAt": "2020-02-22T03:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MzExNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382883114", "bodyText": "Only restarts the services listed in newConfig, so if the config only contains the changed services then only the changed once will be restarted.\nSince it is iterating through newConfig which is a map, it can't tell services to restart twice since each service is one key of the config.", "author": "MikeDombo", "createdAt": "2020-02-22T03:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "7c77d5c5dd91a5d34accc1c51d666c0f509f4668", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\nindex 925b7fcf52..53a05c6200 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n\n@@ -537,25 +537,24 @@ public class Kernel extends Configuration /*implements Runnable*/ {\n             context.removeGlobalStateChangeListener(listener);\n         });\n \n-        context.get(UpdateSystemSafelyService.class)\n-                .addUpdateAction(deploymentId, () -> context.runOnPublishQueueAndWait(() -> {\n-                    try {\n-                        context.addGlobalStateChangeListener(listener);\n-                        mergeMap(timestamp, newConfig);\n-                        mergeFuture.complete(null);\n-                    } catch (IllegalArgumentException e) {\n-                        mergeFuture.completeExceptionally(e);\n-                    }\n-                }));\n-\n-        // Wait for the merge to complete and then have all services start\n-        mergeFuture.thenRun(() -> {\n-            newConfig.keySet().forEach(serviceName -> {\n-                EvergreenService eg = EvergreenService.locate(context, (String) serviceName);\n-                if (eg != null) {\n-                    eg.requestRestart();\n-                } else {\n-                    context.getLog().error(\"Could not locate EvergreenService for modified service\", serviceName);\n+        context.get(UpdateSystemSafelyService.class).addUpdateAction(deploymentId, () -> {\n+            context.runOnPublishQueueAndWait(() -> {\n+                try {\n+                    context.addGlobalStateChangeListener(listener);\n+                    mergeMap(timestamp, newConfig);\n+\n+                    newConfig.keySet().forEach(serviceName -> {\n+                        EvergreenService eg = EvergreenService.locate(context, (String) serviceName);\n+                        if (eg == null) {\n+                            context.getLog().error(\"Could not locate EvergreenService for modified service\", serviceName);\n+                        } else {\n+                            eg.requestStart();\n+                        }\n+                    });\n+\n+                    mergeFuture.complete(null);\n+                } catch (IllegalArgumentException e) {\n+                    mergeFuture.completeExceptionally(e);\n                 }\n             });\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTYwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382881605", "bodyText": "Nit - This looks okay for now but ideally it'll be helpful if we keep one test class per class", "author": "shaguptashaikh", "createdAt": "2020-02-22T03:21:50Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/ServiceConfigMergingTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.dependency.State;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class ServiceConfigMergingTest {", "originalCommit": "e77f1660bc21c5495951e2c9ef468a9eafdddf7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MzIxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382883211", "bodyText": "I would disagree with that, especially since our classes right now our quite large. That would mean that our test classes would have an enormous number of test cases as well, which isn't ideal. For unit tests it does make sense to separate them by class, but this is more of an integration test (missing the tag right now though). I think that for integration test is makes more sense to separate the test classes based on the piece of functionality that it is testing, like the config update in this case. Of course if everyone agrees that it should be 1 test class per class, then it is easy to move these tests around.", "author": "MikeDombo", "createdAt": "2020-02-22T03:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MjY2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r384142669", "bodyText": "I also think one test per class is a bit of overkill. We could group corresponding tests together in a test class for better maintainability.", "author": "leaf94", "createdAt": "2020-02-25T21:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwMjI4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r384202283", "bodyText": "I would revisit this later if the number of additional files grows too much. One approach on the service side was we split the dataplane and control plane tests into separate test packages. We could do something similar here if needed.", "author": "chaurah", "createdAt": "2020-02-26T00:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d329be57299b45548235c11a220518b889e3bf00", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/kernel/ServiceConfigMergingTest.java b/src/test/java/com/aws/iot/evergreen/kernel/ServiceConfigMergingTest.java\nindex 30a9a31215..14c7f5212d 100644\n--- a/src/test/java/com/aws/iot/evergreen/kernel/ServiceConfigMergingTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/kernel/ServiceConfigMergingTest.java\n\n@@ -4,6 +4,7 @@ import com.aws.iot.evergreen.dependency.State;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n \n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MjQ0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382882448", "bodyText": "IIRC the code that processes updates inside this UpdateSystemSafelyService class fails silently on some errors, we would want to capture those as failures and report back, also, not sure how the rest of the code will work, in case of such failures trying to lookup new/updated services and restart them sounds unnecessary", "author": "shaguptashaikh", "createdAt": "2020-02-22T03:36:21Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -508,4 +518,48 @@ public void addServiceSearchURL(Object url) {\n             }\n         }\n     }\n+\n+    public Future<Void> mergeInNewConfig(String deploymentId, long timestamp, Map<Object, Object> newConfig) {\n+        CompletableFuture<Void> totallyCompleteFuture = new CompletableFuture<>();\n+        CompletableFuture<Void> mergeFuture = new CompletableFuture<>();\n+\n+        AtomicInteger allServicesUp = new AtomicInteger(newConfig.size());\n+        EvergreenService.GlobalStateChangeListener listener = (service, was) -> {\n+            if (newConfig.containsKey(service.getName()) && service.getState().equals(State.Running)) {\n+                allServicesUp.decrementAndGet();\n+            }\n+            if (allServicesUp.get() <= 0) {\n+                totallyCompleteFuture.complete(null);\n+            }\n+        };\n+\n+        totallyCompleteFuture.thenRun(() -> {\n+            context.removeGlobalStateChangeListener(listener);\n+        });\n+\n+        context.get(UpdateSystemSafelyService.class)", "originalCommit": "e77f1660bc21c5495951e2c9ef468a9eafdddf7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MzUzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r382883536", "bodyText": "Yeah, probably want to wrap all this and catch Throwable to send back to DA.", "author": "MikeDombo", "createdAt": "2020-02-22T03:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MjQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "7c77d5c5dd91a5d34accc1c51d666c0f509f4668", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\nindex 925b7fcf52..53a05c6200 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n\n@@ -537,25 +537,24 @@ public class Kernel extends Configuration /*implements Runnable*/ {\n             context.removeGlobalStateChangeListener(listener);\n         });\n \n-        context.get(UpdateSystemSafelyService.class)\n-                .addUpdateAction(deploymentId, () -> context.runOnPublishQueueAndWait(() -> {\n-                    try {\n-                        context.addGlobalStateChangeListener(listener);\n-                        mergeMap(timestamp, newConfig);\n-                        mergeFuture.complete(null);\n-                    } catch (IllegalArgumentException e) {\n-                        mergeFuture.completeExceptionally(e);\n-                    }\n-                }));\n-\n-        // Wait for the merge to complete and then have all services start\n-        mergeFuture.thenRun(() -> {\n-            newConfig.keySet().forEach(serviceName -> {\n-                EvergreenService eg = EvergreenService.locate(context, (String) serviceName);\n-                if (eg != null) {\n-                    eg.requestRestart();\n-                } else {\n-                    context.getLog().error(\"Could not locate EvergreenService for modified service\", serviceName);\n+        context.get(UpdateSystemSafelyService.class).addUpdateAction(deploymentId, () -> {\n+            context.runOnPublishQueueAndWait(() -> {\n+                try {\n+                    context.addGlobalStateChangeListener(listener);\n+                    mergeMap(timestamp, newConfig);\n+\n+                    newConfig.keySet().forEach(serviceName -> {\n+                        EvergreenService eg = EvergreenService.locate(context, (String) serviceName);\n+                        if (eg == null) {\n+                            context.getLog().error(\"Could not locate EvergreenService for modified service\", serviceName);\n+                        } else {\n+                            eg.requestStart();\n+                        }\n+                    });\n+\n+                    mergeFuture.complete(null);\n+                } catch (IllegalArgumentException e) {\n+                    mergeFuture.completeExceptionally(e);\n                 }\n             });\n         });\n"}}, {"oid": "7c77d5c5dd91a5d34accc1c51d666c0f509f4668", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7c77d5c5dd91a5d34accc1c51d666c0f509f4668", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T16:51:29Z", "type": "forcePushed"}, {"oid": "d329be57299b45548235c11a220518b889e3bf00", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d329be57299b45548235c11a220518b889e3bf00", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T16:52:57Z", "type": "forcePushed"}, {"oid": "dbd5faa31e1a5f105fae8b3fe7e70a136b50410f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dbd5faa31e1a5f105fae8b3fe7e70a136b50410f", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T17:08:17Z", "type": "forcePushed"}, {"oid": "45b02a1f2eb236fe7accc183b5bb9b76954181fd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/45b02a1f2eb236fe7accc183b5bb9b76954181fd", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T17:20:32Z", "type": "forcePushed"}, {"oid": "98a73062f1128f12a737094f0f857f16a5f399dd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/98a73062f1128f12a737094f0f857f16a5f399dd", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T17:26:26Z", "type": "forcePushed"}, {"oid": "aa40cf8cd3082fe1fad44503dfc34e6d3620ab91", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/aa40cf8cd3082fe1fad44503dfc34e6d3620ab91", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T17:27:37Z", "type": "forcePushed"}, {"oid": "ea8062284604a43c4f8cd90e2f67bd6e704fadad", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ea8062284604a43c4f8cd90e2f67bd6e704fadad", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T17:33:51Z", "type": "forcePushed"}, {"oid": "6c523d4fbb5d8f50c2ded957e00e2216ca62cb96", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6c523d4fbb5d8f50c2ded957e00e2216ca62cb96", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T17:35:59Z", "type": "forcePushed"}, {"oid": "bac5ef9f9fc99cd037a8733a33a03817b5d33041", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bac5ef9f9fc99cd037a8733a33a03817b5d33041", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T17:45:53Z", "type": "forcePushed"}, {"oid": "2916e573e0781907125065759a7b8021fea68f49", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2916e573e0781907125065759a7b8021fea68f49", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T18:05:58Z", "type": "forcePushed"}, {"oid": "ddb35fc135174d6cc9654067205b6fa1d6240dfd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ddb35fc135174d6cc9654067205b6fa1d6240dfd", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T18:11:17Z", "type": "forcePushed"}, {"oid": "446126fda40ac7a871adfb01b4cd1511401ff89a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/446126fda40ac7a871adfb01b4cd1511401ff89a", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T18:24:16Z", "type": "forcePushed"}, {"oid": "eb07e1937bca88ca407f23e8b03aba9189247845", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb07e1937bca88ca407f23e8b03aba9189247845", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T19:18:35Z", "type": "forcePushed"}, {"oid": "9491a29cc8f861a07b2e5de0c53e43485b8a621d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9491a29cc8f861a07b2e5de0c53e43485b8a621d", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T19:27:34Z", "type": "forcePushed"}, {"oid": "6fa692601cde17d988783403a88d68c1df18cb9c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6fa692601cde17d988783403a88d68c1df18cb9c", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T19:53:48Z", "type": "forcePushed"}, {"oid": "014078fb917ddf8f44d41d83de8b998e9a313f8c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/014078fb917ddf8f44d41d83de8b998e9a313f8c", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T20:54:08Z", "type": "forcePushed"}, {"oid": "5a6d983983ad0b8d5ae633d0626fa9691f0f915f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5a6d983983ad0b8d5ae633d0626fa9691f0f915f", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T21:01:27Z", "type": "forcePushed"}, {"oid": "96642d5316b167ac03ad58d4a3098bf5ae78efc0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/96642d5316b167ac03ad58d4a3098bf5ae78efc0", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T21:12:00Z", "type": "forcePushed"}, {"oid": "d20d7aa7b775964a4809c99d8b871f75b9bfe3e8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d20d7aa7b775964a4809c99d8b871f75b9bfe3e8", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T21:17:13Z", "type": "forcePushed"}, {"oid": "30ac9f9bc272d6ff1d131032db8e89a4a0588dbd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/30ac9f9bc272d6ff1d131032db8e89a4a0588dbd", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T21:19:05Z", "type": "forcePushed"}, {"oid": "eccda8f7cdff4a6ff1791dbafcc1adb53bed62c1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eccda8f7cdff4a6ff1791dbafcc1adb53bed62c1", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T21:28:44Z", "type": "forcePushed"}, {"oid": "ca8ae27d66e74e0129bfce57806374329ba9c25a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ca8ae27d66e74e0129bfce57806374329ba9c25a", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T21:29:01Z", "type": "forcePushed"}, {"oid": "31d339844861dbae609a1475d7cf0547fc35d416", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/31d339844861dbae609a1475d7cf0547fc35d416", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T21:41:05Z", "type": "forcePushed"}, {"oid": "407cdcb5b9e3c96a5632163c57012c8c634655b3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/407cdcb5b9e3c96a5632163c57012c8c634655b3", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T22:05:05Z", "type": "forcePushed"}, {"oid": "fdfb8882c137175402c0ce7d6e3a09117649ddb0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fdfb8882c137175402c0ce7d6e3a09117649ddb0", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T22:16:52Z", "type": "forcePushed"}, {"oid": "01b6a9e913d9675970ae55ed1f7175957ac3df84", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/01b6a9e913d9675970ae55ed1f7175957ac3df84", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T22:36:30Z", "type": "forcePushed"}, {"oid": "cb3e58d2a667a960a14e001f129b79c8cfe2045c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cb3e58d2a667a960a14e001f129b79c8cfe2045c", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T23:08:25Z", "type": "forcePushed"}, {"oid": "181e2faa05ec4a834c7ae00fdf640843cd0dde0c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/181e2faa05ec4a834c7ae00fdf640843cd0dde0c", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-24T23:15:39Z", "type": "forcePushed"}, {"oid": "f59da804f7883fbfc1b8abbc20d5f63f7b8c39f0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f59da804f7883fbfc1b8abbc20d5f63f7b8c39f0", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-25T00:05:37Z", "type": "forcePushed"}, {"oid": "a14b62543b8122bdc112732886a0cbe1342c6ed9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a14b62543b8122bdc112732886a0cbe1342c6ed9", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-25T00:29:53Z", "type": "forcePushed"}, {"oid": "12a466e51b1816a04f1d2fe2a9d47d3833145146", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/12a466e51b1816a04f1d2fe2a9d47d3833145146", "message": "More logging to debug failure in github actions", "committedDate": "2020-02-25T01:17:52Z", "type": "forcePushed"}, {"oid": "a23f3cbc0d11aee569a447a9ad9378ccc56f40a9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a23f3cbc0d11aee569a447a9ad9378ccc56f40a9", "message": "Got all tests working again", "committedDate": "2020-02-25T18:18:29Z", "type": "forcePushed"}, {"oid": "b77ee6f5190523a96b267b551634684578a4787e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b77ee6f5190523a96b267b551634684578a4787e", "message": "Got all tests working again", "committedDate": "2020-02-25T18:28:58Z", "type": "forcePushed"}, {"oid": "1a5eb11e7d2b06439d954d7267bfa16c6fbf0f57", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1a5eb11e7d2b06439d954d7267bfa16c6fbf0f57", "message": "Got all tests working again", "committedDate": "2020-02-25T18:43:45Z", "type": "forcePushed"}, {"oid": "05b1f2e0a3933c55c73cb82a5a5acaffc76b1a2e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/05b1f2e0a3933c55c73cb82a5a5acaffc76b1a2e", "message": "Got all tests working again", "committedDate": "2020-02-25T20:10:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MTI0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r384191249", "bodyText": "Throw exception instead of silent failure?", "author": "chaurah", "createdAt": "2020-02-25T23:32:19Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -589,12 +627,20 @@ public Context getContext() {\n      * @param dependentEvergreenService\n      * @param when\n      */\n-    public void addDependency(EvergreenService dependentEvergreenService, State when) {\n-        if (dependencies == null) {\n-            dependencies = new ConcurrentHashMap<>();\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when) {\n+        if (dependentEvergreenService == null || when == null) {\n+            return;", "originalCommit": "240f74b2cdc52eb5a4a20e66c6e9560d33add15b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MzM0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r384193340", "bodyText": "I'd rather not. I wouldn't really consider it a failure since adding a dependency on null, while silly, is really a no-op.\nOf course I can add it if you and others think it is worthwhile, but addDependency gets called from some places which don't have callers, so there's no one to handle the issue.", "author": "MikeDombo", "createdAt": "2020-02-25T23:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MTI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwMjc3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r384202778", "bodyText": "I would prefer an explicit failure. Ideally this shouldn't get called at all if there's no dependency right? So it's possible whoever made the request did something incorrectly.\nCan revisit in followup PR.", "author": "chaurah", "createdAt": "2020-02-26T00:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MTI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0618165f85800cb5b06f064ea30569faa2748411", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex ebea21c867..b31c6e3db4 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -646,6 +671,7 @@ public class EvergreenService implements InjectionActions, Closeable {\n             if (this.getState() == State.INSTALLED || this.getState() == State.RUNNING) {\n                 if (!dependencyReady(dependentEvergreenService)) {\n                     this.requestRestart();\n+                    logger.atInfo().setEventType(\"service-restart\").log(\"Restart service because of dependencies.\");\n                 }\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MzM5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r384193390", "bodyText": "Why the increase and why to 10? (Not for this PR but : Is this something that we may want to make configurable in the future?)", "author": "chaurah", "createdAt": "2020-02-25T23:38:13Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -88,7 +91,7 @@ public Kernel() {\n         super(new Context());\n         context.put(Configuration.class, this);\n         context.put(Kernel.class, this);\n-        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(4);\n+        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(10);", "originalCommit": "240f74b2cdc52eb5a4a20e66c6e9560d33add15b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5NDA0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/69#discussion_r384194042", "bodyText": "Not actually related to this PR, but this threadpool runs all the backing tasks for all services, so it definitely needs more threads (even more than 10). This probably needs to be switched to a cache threadpool.", "author": "MikeDombo", "createdAt": "2020-02-25T23:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MzM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "45abbd16d0299c9e6bd53252366fee98825b35d6", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\nindex 8274027fb8..5cedff4087 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n\n@@ -91,13 +91,13 @@ public class Kernel extends Configuration /*implements Runnable*/ {\n         super(new Context());\n         context.put(Configuration.class, this);\n         context.put(Kernel.class, this);\n-        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(10);\n+        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(4);\n         context.put(ScheduledThreadPoolExecutor.class, ses);\n         context.put(ScheduledExecutorService.class, ses);\n         context.put(Executor.class, ses);\n         context.put(ExecutorService.class, ses);\n         context.put(ThreadPoolExecutor.class, ses);\n-        Runtime.getRuntime().addShutdownHook(new Thread(() -> shutdown()));\n+        Runtime.getRuntime().addShutdownHook(new Thread(this::shutdown));\n \n     }\n \n"}}, {"oid": "45abbd16d0299c9e6bd53252366fee98825b35d6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/45abbd16d0299c9e6bd53252366fee98825b35d6", "message": "Got all tests working again", "committedDate": "2020-02-25T23:41:48Z", "type": "forcePushed"}, {"oid": "0618165f85800cb5b06f064ea30569faa2748411", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0618165f85800cb5b06f064ea30569faa2748411", "message": "Enable config merging to update config and add dependencies\n\nRemoves calls to setState() as well.", "committedDate": "2020-02-26T17:54:36Z", "type": "forcePushed"}, {"oid": "4b26430f04e811a210f748e1743f1dcc02419701", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4b26430f04e811a210f748e1743f1dcc02419701", "message": "Enable config merging to update config and add dependencies\n\nRemoves calls to setState() as well.", "committedDate": "2020-02-26T18:12:22Z", "type": "forcePushed"}, {"oid": "b396e9cb5126f9ed40e16966d5d693b165f4cc4e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b396e9cb5126f9ed40e16966d5d693b165f4cc4e", "message": "Enable config merging to update config and add dependencies\n\nRemoves calls to setState() as well.", "committedDate": "2020-02-26T18:14:59Z", "type": "commit"}, {"oid": "b396e9cb5126f9ed40e16966d5d693b165f4cc4e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b396e9cb5126f9ed40e16966d5d693b165f4cc4e", "message": "Enable config merging to update config and add dependencies\n\nRemoves calls to setState() as well.", "committedDate": "2020-02-26T18:14:59Z", "type": "forcePushed"}]}