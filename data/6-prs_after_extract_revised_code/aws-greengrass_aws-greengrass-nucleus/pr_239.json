{"pr_number": 239, "pr_title": "Enable replacement in package recipe for {{artifacts:path}}", "pr_createdAt": "2020-05-13T18:54:06Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/239", "timeline": [{"oid": "86548bea712039ff6dbdcdc68dc37128cc40dd40", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/86548bea712039ff6dbdcdc68dc37128cc40dd40", "message": "Enable replacement in package recipe for {{artifacts:path}}", "committedDate": "2020-05-13T18:58:48Z", "type": "commit"}, {"oid": "86548bea712039ff6dbdcdc68dc37128cc40dd40", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/86548bea712039ff6dbdcdc68dc37128cc40dd40", "message": "Enable replacement in package recipe for {{artifacts:path}}", "committedDate": "2020-05-13T18:58:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMjA5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/239#discussion_r424712091", "bodyText": "Nit - change the message", "author": "shaguptashaikh", "createdAt": "2020-05-13T20:29:09Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -275,7 +276,46 @@ void GIVEN_deployment_with_params_not_set_WHEN_previous_deployment_had_params_TH\n         assertThat(\"If no parameter value was set in current/previous deployment, the default value should be used\",\n                 getServiceRunCommand(TEST_INPUT_PACKAGE_A, servicesConfig),\n                 equalTo(\"echo running service in Package PackageA with param PackageA_Param_2_default_value\"));\n+    }\n+\n+    @Test\n+    void GIVEN_deployment_with_artifact_WHEN_config_resolution_requested_THEN_artifact_path_should_be_interpolated()\n+            throws Exception {\n+        // GIVEN\n+        PackageIdentifier rootPackageIdentifier =\n+                new PackageIdentifier(TEST_INPUT_PACKAGE_A, new Semver(\"1.2\", Semver.SemverType.NPM));\n+        List<PackageIdentifier> packagesToDeploy = Arrays.asList(rootPackageIdentifier);\n+\n+        PackageRecipe rootPackageRecipe = new PackageRecipe(RecipeTemplateVersion.JAN_25_2020, TEST_INPUT_PACKAGE_A,\n+                rootPackageIdentifier.getVersion(), \"\", \"\", Collections.emptySet(), new HashMap<String, Object>() {{\n+            put(LIFECYCLE_RUN_KEY, \"java -jar {{artifacts:path}}/test.jar -x arg\");\n+        }}, Collections.emptyList(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap());\n+\n+        DeploymentPackageConfiguration rootPackageDeploymentConfig =\n+                new DeploymentPackageConfiguration(TEST_INPUT_PACKAGE_A, \"1.2\", \">1.0\", Collections.emptySet(),\n+                        Collections.emptyList());\n+        DeploymentDocument document = DeploymentDocument.builder().rootPackages(Arrays.asList(TEST_INPUT_PACKAGE_A))\n+                .deploymentPackageConfigurationList(Arrays.asList(rootPackageDeploymentConfig)).build();\n \n+        when(packageStore.getPackageRecipe(rootPackageIdentifier)).thenReturn(rootPackageRecipe);\n+        when(packageStore.resolveArtifactDirectoryPath(rootPackageIdentifier))\n+                .thenReturn(Paths.get(\"/packages/artifacts\"));\n+        when(kernel.getMain()).thenReturn(mainService);\n+        when(kernel.locate(any())).thenThrow(new ServiceLoadException(\"Service not found\"));\n+        when(mainService.getName()).thenReturn(\"main\");\n+        when(mainService.getDependencies()).thenReturn(Collections.emptyMap());\n+\n+        // WHEN\n+        KernelConfigResolver kernelConfigResolver = new KernelConfigResolver(packageStore, kernel);\n+        Map<Object, Object> resolvedConfig =\n+                kernelConfigResolver.resolve(packagesToDeploy, document, Arrays.asList(TEST_INPUT_PACKAGE_A));\n+\n+        // THEN\n+        Map<Object, Object> servicesConfig = (Map<Object, Object>) resolvedConfig.get(SERVICES_NAMESPACE_TOPIC);\n+\n+        assertThat(\"If no parameter value was set in deployment, the default value should be used\",", "originalCommit": "86548bea712039ff6dbdcdc68dc37128cc40dd40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8f222f38a46bc1502705c1457e0323812f93b9a", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java b/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\nindex e8ca5f982..3eb6ca40a 100644\n--- a/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\n\n@@ -313,7 +313,7 @@ class KernelConfigResolverTest {\n         // THEN\n         Map<Object, Object> servicesConfig = (Map<Object, Object>) resolvedConfig.get(SERVICES_NAMESPACE_TOPIC);\n \n-        assertThat(\"If no parameter value was set in deployment, the default value should be used\",\n+        assertThat(\"{{artifacts:path}} should be replace by the package's artifact path\",\n                 getServiceRunCommand(TEST_INPUT_PACKAGE_A, servicesConfig),\n                 equalTo(\"java -jar /packages/artifacts/test.jar -x arg\"));\n     }\n"}}, {"oid": "e8f222f38a46bc1502705c1457e0323812f93b9a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e8f222f38a46bc1502705c1457e0323812f93b9a", "message": "Generify string replacements", "committedDate": "2020-05-13T20:40:49Z", "type": "commit"}, {"oid": "e8f222f38a46bc1502705c1457e0323812f93b9a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e8f222f38a46bc1502705c1457e0323812f93b9a", "message": "Generify string replacements", "committedDate": "2020-05-13T20:40:49Z", "type": "forcePushed"}, {"oid": "bf62b4701a7aa2eaafe6570ab18c8214663ed53b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bf62b4701a7aa2eaafe6570ab18c8214663ed53b", "message": "Merge branch 'master' into artifact-path-replacement", "committedDate": "2020-05-13T21:18:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3MTY3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/239#discussion_r424771674", "bodyText": "Nice we get a fresh value every time!", "author": "fufranci", "createdAt": "2020-05-13T22:41:14Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -33,23 +32,40 @@\n import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICE_DEPENDENCIES_NAMESPACE_TOPIC;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n \n-@AllArgsConstructor\n-@NoArgsConstructor\n public class KernelConfigResolver {\n \n     public static final String VERSION_CONFIG_KEY = \"version\";\n     protected static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+    private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Map from Namespace -> Key -> Function which returns the replacement value\n+    private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();\n \n+    private final PackageStore packageStore;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param packageStore package store used to look up packages\n+     * @param kernel       kernel\n+     */\n     @Inject\n-    private PackageStore packageStore;\n-    @Inject\n-    private Kernel kernel;\n+    public KernelConfigResolver(PackageStore packageStore, Kernel kernel) {\n+        this.packageStore = packageStore;\n+        this.kernel = kernel;\n+\n+        // More system parameters can be added over time by extending this map with new namespaces/keys\n+        HashMap<String, Function<PackageIdentifier, String>> artifactNamespace = new HashMap<>();\n+        artifactNamespace\n+                .put(\"path\", (id) -> packageStore.resolveArtifactDirectoryPath(id).toAbsolutePath().toString());", "originalCommit": "bf62b4701a7aa2eaafe6570ab18c8214663ed53b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}