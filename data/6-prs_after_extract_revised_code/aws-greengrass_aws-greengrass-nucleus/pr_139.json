{"pr_number": 139, "pr_title": "Add PMD checks and clean up code", "pr_createdAt": "2020-03-26T16:46:45Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139", "timeline": [{"oid": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "message": "Add PMD checks and clean up code", "committedDate": "2020-03-26T17:10:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3MjEzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398772131", "bodyText": "Is logger initalized at this point?", "author": "ShirleyZheng92", "createdAt": "2020-03-26T17:49:38Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -216,7 +213,7 @@ private void initPaths(String rootAbsolutePath) {\n      * Startup the Kernel and all services.\n      */\n     public Kernel launch() {\n-        System.out.println(\"root path = \" + rootPath + \"\\n\\t\" + configPath);\n+        logger.atInfo().log(\"root path = {}. config path = {}\", rootPath, configPath);", "originalCommit": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3MzAxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398773017", "bodyText": "Since it uses system properties, yes it is usable at this point.", "author": "MikeDombo", "createdAt": "2020-03-26T17:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3MjEzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3NTMyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398775320", "bodyText": "nice!", "author": "ShirleyZheng92", "createdAt": "2020-03-26T17:54:15Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -890,31 +891,27 @@ public void postInject() {\n                 }\n             }\n             if (x == null) {\n-                throw new Exception(startWhen + \" does not match any EvergreenService state name\");\n+                throw new InputValidationException(startWhen + \" does not match any EvergreenService state name\");\n             }\n         }\n \n         EvergreenService d = locate(context, name);\n-        if (d != null) {\n-            return new Pair<>(d, x == null ? State.RUNNING : x);\n-        } else {\n-            throw new Exception(\"Could not locate service \" + name);\n-        }\n+        return new Pair<>(d, x == null ? State.RUNNING : x);", "originalCommit": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07965b5b3d792dd3cf30e79d69497b0409426e40", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex e8a8e0b3..3ec6d104 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -899,26 +911,44 @@ public class EvergreenService implements InjectionActions {\n         return new Pair<>(d, x == null ? State.RUNNING : x);\n     }\n \n-    private synchronized void setupDependencies(Iterable<String> dependencyList)\n-            throws InputValidationException, ServiceLoadException {\n-        Map<EvergreenService, State> keptDependencies = getDependencyStateMap(dependencyList);\n+    private synchronized void setupDependencies(Iterable<String> dependencyList) throws Exception {\n+        Map<EvergreenService, State> oldDependencies = new HashMap<>(getDependencies());\n+        Map<EvergreenService, State> shouldHaveDependencies = getDependencyStateMap(dependencyList);\n \n-        Set<EvergreenService> removedDependencies =\n-                dependencies.keySet().stream().filter(d -> !keptDependencies.containsKey(d))\n-                        .collect(Collectors.toSet());\n+        Set<EvergreenService> removedDependencies = dependencies.entrySet().stream()\n+                .filter(e -> !shouldHaveDependencies.containsKey(e.getKey()) && !e.getValue().isDefaultDependency)\n+                .map(Map.Entry::getKey)\n+                .collect(Collectors.toSet());\n         if (!removedDependencies.isEmpty()) {\n-            logger.atInfo().setEventType(\"removing-unused-dependencies\").kv(\"removedDependencies\", removedDependencies);\n-            removedDependencies.forEach(dependencies::remove);\n+            logger.atInfo().setEventType(\"removing-unused-dependencies\")\n+                    .addKeyValue(\"removedDependencies\", removedDependencies);\n+\n+            removedDependencies.forEach(dependency -> {\n+                DependencyInfo dependencyInfo = dependencies.remove(dependency);\n+                dependency.getStateTopic().remove(dependencyInfo.stateTopicSubscriber);\n+            });\n             context.get(Kernel.class).clearODcache();\n         }\n-        keptDependencies.forEach((dependentEvergreenService, when) -> {\n+\n+        AtomicBoolean hasNewService = new AtomicBoolean(false);\n+        shouldHaveDependencies.forEach((dependentEvergreenService, startWhen) -> {\n             try {\n-                addDependency(dependentEvergreenService, when);\n+                if (!oldDependencies.containsKey(dependentEvergreenService)) {\n+                    hasNewService.set(true);\n+                }\n+                addOrUpdateDependency(dependentEvergreenService, startWhen, false);\n             } catch (InputValidationException e) {\n                 logger.atWarn().setCause(e).setEventType(\"add-dependency\")\n                         .log(\"Unable to add dependency {}\", dependentEvergreenService);\n             }\n         });\n+\n+        if (hasNewService.get()) {\n+            requestRestart();\n+        } else if (!dependencyReady() && !getState().equals(State.FINISHED)) {\n+            // if dependency 'startWhen' changed, restart this service.\n+            requestRestart();\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3NzEyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398777127", "bodyText": "Is this also enforced by the checkstyle rule? Will it be too strict?", "author": "ShirleyZheng92", "createdAt": "2020-03-26T17:56:41Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -90,7 +92,7 @@ public void startup() {\n             synchronized (pendingActions) {\n                 if (pendingActions.isEmpty()) {\n                     try {\n-                        pendingActions.wait(10000);\n+                        pendingActions.wait(10_000);", "originalCommit": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MjM0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398792340", "bodyText": "Not enforce by checkstyle (otherwise we would have been failing). This is not too strict, it is an easy fix to add the _ as a separator. If we want, we can always disable it.", "author": "MikeDombo", "createdAt": "2020-03-26T18:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3NzEyNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "254c2e6e61afae14dd4026d8eef9357b02e487f9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/254c2e6e61afae14dd4026d8eef9357b02e487f9", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-26T18:50:32Z", "type": "forcePushed"}, {"oid": "b2aa0c5af24d743b054b22ae62471befa865f01e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b2aa0c5af24d743b054b22ae62471befa865f01e", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-26T19:17:14Z", "type": "forcePushed"}, {"oid": "07965b5b3d792dd3cf30e79d69497b0409426e40", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/07965b5b3d792dd3cf30e79d69497b0409426e40", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-26T21:48:04Z", "type": "forcePushed"}, {"oid": "d01185f2eb6ed4a6693385cb60f24342d7850c60", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d01185f2eb6ed4a6693385cb60f24342d7850c60", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-26T21:57:06Z", "type": "forcePushed"}, {"oid": "43bb9a608d7e243cb8b7dbb339d0bccae0ca58f4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/43bb9a608d7e243cb8b7dbb339d0bccae0ca58f4", "message": "Add PMD checks and clean up code", "committedDate": "2020-03-27T01:18:07Z", "type": "commit"}, {"oid": "a82c536b6e2ff3b271b02cd2a08f3dc063241891", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a82c536b6e2ff3b271b02cd2a08f3dc063241891", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-27T01:20:49Z", "type": "commit"}, {"oid": "a82c536b6e2ff3b271b02cd2a08f3dc063241891", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a82c536b6e2ff3b271b02cd2a08f3dc063241891", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-27T01:20:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2MjAxOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r399062018", "bodyText": "Did the PMD catch this?", "author": "fahadmohammed01", "createdAt": "2020-03-27T06:40:45Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java", "diffHunk": "@@ -109,7 +109,7 @@ void registerResourceTest() throws Exception {\n         // we're looking it up based on service type only\n         LookupResourceRequest fuzzyLookup =\n                 LookupResourceRequest.builder().resource(resource.toBuilder().name(null).build()).build();\n-        lookupResults = c.lookupResources(lookup);\n+        lookupResults = c.lookupResources(fuzzyLookup);", "originalCommit": "a82c536b6e2ff3b271b02cd2a08f3dc063241891", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4NzE2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r399287165", "bodyText": "Yes because it was an unused var.", "author": "MikeDombo", "createdAt": "2020-03-27T14:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2MjAxOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3NDEyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r399074121", "bodyText": "Why remove private?", "author": "fahadmohammed01", "createdAt": "2020-03-27T07:18:19Z", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -91,16 +92,16 @@\n     private String[] environment = defaultEnvironment;\n     private String[] cmds;\n     private File dir = userdir;\n-    private Process process;\n+    Process process;", "originalCommit": "a82c536b6e2ff3b271b02cd2a08f3dc063241891", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4Nzg3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r399287870", "bodyText": "Because we access it from an inner class, Java generates an accessor since it is private which they have as a performance issue.", "author": "MikeDombo", "createdAt": "2020-03-27T14:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3NDEyMQ=="}], "type": "inlineReview", "revised_code": null}]}