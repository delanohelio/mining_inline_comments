{"pr_number": 622, "pr_title": "Add partition support for both IamSdkClientFactory.java and IotSdkCli\u2026", "pr_createdAt": "2020-11-04T19:13:59Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622", "timeline": [{"oid": "4e992d7917d42548df84c3337c8fd67f524eea04", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4e992d7917d42548df84c3337c8fd67f524eea04", "message": "add partition supoort for both IamSdkClientFactory.java and IotSdkClientFactory.java", "committedDate": "2020-11-04T19:05:57Z", "type": "commit"}, {"oid": "8a9ead3114ff45e36a6df316267c1b4fa1e64f2d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8a9ead3114ff45e36a6df316267c1b4fa1e64f2d", "message": "add new AwsRegionPartition", "committedDate": "2020-11-05T00:53:40Z", "type": "commit"}, {"oid": "99c8f939815e82a23fdc8bb4b32a6add21d2d052", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/99c8f939815e82a23fdc8bb4b32a6add21d2d052", "message": "add new AwsRegionPartition", "committedDate": "2020-11-05T01:27:28Z", "type": "commit"}, {"oid": "9f968d52ec58f1d7f22e8b1255b47e4d11d94c07", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9f968d52ec58f1d7f22e8b1255b47e4d11d94c07", "message": "bug fix", "committedDate": "2020-11-05T09:01:21Z", "type": "commit"}, {"oid": "abbfdeaa4142527f42e891c450257ff91635ff4e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/abbfdeaa4142527f42e891c450257ff91635ff4e", "message": "bug fix", "committedDate": "2020-11-05T18:00:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MTczMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518891731", "bodyText": "Can we get region from the DeviceConfiguration?", "author": "jbutler", "createdAt": "2020-11-06T17:17:31Z", "path": "src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java", "diffHunk": "@@ -35,17 +35,23 @@\n             RetryPolicy.builder().numRetries(5).backoffStrategy(BackoffStrategy.defaultThrottlingStrategy())\n                     .retryCondition(retryCondition).build();\n \n+    private static final String DEFAULT_AWS_REGION = \"us-east-1\";\n+\n     private IamSdkClientFactory() {\n     }\n \n+    public static IamClient getIamClient() {\n+        return getIamClient(DEFAULT_AWS_REGION);\n+    }", "originalCommit": "abbfdeaa4142527f42e891c450257ff91635ff4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0MzA2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518943068", "bodyText": "I check the usage of both IamClient and IotClient, it was initialized in the GreengrassSetup.java. https://github.com/aws/aws-greengrass-nucleus/blob/master/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java#L233\nUsing awsRegion as String seems more easier and consistent.", "author": "awszztt", "createdAt": "2020-11-06T18:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MTczMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNjU2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r519016562", "bodyText": "getIamClient(String region) is fine. But getIamClient() doesn't work if the GGC is in a non-aws partition. You can either remove it or have it use region from DeviceConfiguration", "author": "jbutler", "createdAt": "2020-11-06T21:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MTczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java b/src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java\nindex b6252e280..0497d3a14 100644\n--- a/src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java\n+++ b/src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java\n\n@@ -50,7 +50,7 @@ public final class IamSdkClientFactory {\n      * @return IamClient instance\n      */\n     public static IamClient getIamClient(String awsRegion) {\n-        Region region = EndpointGenerator.getGlobalRegion(awsRegion);\n+        Region region = RegionUtils.getGlobalRegion(awsRegion);\n         return IamClient.builder().region(region).httpClient(ProxyUtils.getSdkHttpClient())\n                 .overrideConfiguration(ClientOverrideConfiguration.builder().retryPolicy(retryPolicy).build()).build();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NjQ5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518896490", "bodyText": "This will require us to make a code change every time a region is added. Instead, we can ask the SDK for the partition a region is in, and then map that to a global region (e.g. \"aws\" -> AWS_GLOBAL, \"aws-cn\" -> AWS_CN_GLOBAL, etc). That way we only need to update the code to support new partitions.", "author": "jbutler", "createdAt": "2020-11-06T17:25:57Z", "path": "src/main/java/com/aws/greengrass/util/EndpointGenerator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class EndpointGenerator {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com\";\n+    private static final String CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com.cn\";\n+    private static Map<String, String> REGION_TO_IOT_CONTROL_PLANE_ENDPOINT = new HashMap<>();\n+    private static Map<String, Region> GLOBAL_REGION_CONVERTER = new HashMap<>();\n+    private static Map<String, Map<IotSdkClientFactory.EnvironmentStage, String>>\n+            REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT = new HashMap<>();\n+\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n+    );\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com.cn:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com.cn:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com.cn:8443/greengrass\"\n+    );\n+\n+    static {\n+        REGION_TO_IOT_CONTROL_PLANE_ENDPOINT.put(\"cn-north-1\", CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);\n+\n+        REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT.put(\"cn-north-1\",\n+                CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT);\n+\n+        GLOBAL_REGION_CONVERTER.put(\"cn-north-1\", Region.AWS_CN_GLOBAL);\n+        GLOBAL_REGION_CONVERTER.put(\"us-gov-east-1\", Region.AWS_US_GOV_GLOBAL);\n+        GLOBAL_REGION_CONVERTER.put(\"us-gov-west-1\", Region.AWS_US_GOV_GLOBAL);", "originalCommit": "abbfdeaa4142527f42e891c450257ff91635ff4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/EndpointGenerator.java b/src/main/java/com/aws/greengrass/util/EndpointGenerator.java\ndeleted file mode 100644\nindex c6aa07cab..000000000\n--- a/src/main/java/com/aws/greengrass/util/EndpointGenerator.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.aws.greengrass.util;\n-\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.utils.ImmutableMap;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public final class EndpointGenerator {\n-    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com\";\n-    private static final String CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com.cn\";\n-    private static Map<String, String> REGION_TO_IOT_CONTROL_PLANE_ENDPOINT = new HashMap<>();\n-    private static Map<String, Region> GLOBAL_REGION_CONVERTER = new HashMap<>();\n-    private static Map<String, Map<IotSdkClientFactory.EnvironmentStage, String>>\n-            REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT = new HashMap<>();\n-\n-    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n-            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n-    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n-            CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com.cn:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com.cn:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com.cn:8443/greengrass\"\n-    );\n-\n-    static {\n-        REGION_TO_IOT_CONTROL_PLANE_ENDPOINT.put(\"cn-north-1\", CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);\n-\n-        REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT.put(\"cn-north-1\",\n-                CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT);\n-\n-        GLOBAL_REGION_CONVERTER.put(\"cn-north-1\", Region.AWS_CN_GLOBAL);\n-        GLOBAL_REGION_CONVERTER.put(\"us-gov-east-1\", Region.AWS_US_GOV_GLOBAL);\n-        GLOBAL_REGION_CONVERTER.put(\"us-gov-west-1\", Region.AWS_US_GOV_GLOBAL);\n-    }\n-\n-    private EndpointGenerator() {\n-    }\n-\n-    /**\n-     * Get Greengrass ServiceEndpoint by region and stage.\n-     * @param awsRegion aws region\n-     * @param stage environment stage\n-     * @return Greengrass ServiceEndpoint\n-     */\n-    public static String getGreengrassServiceEndpointByRegionAndStage(String awsRegion,\n-                                                                      IotSdkClientFactory.EnvironmentStage stage) {\n-\n-        Map<IotSdkClientFactory.EnvironmentStage, String> greengrassServiceEndpointTemplate =\n-                REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT\n-                .getOrDefault(awsRegion, DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT);\n-        return String.format(greengrassServiceEndpointTemplate.get(stage), awsRegion);\n-    }\n-\n-    /**\n-     * Get Iot Control Plane Endpoint by region and stage.\n-     * @param awsRegion aws region\n-     * @param stage environment stage\n-     * @return Iot Control Plane Endpoint\n-     */\n-    public static String getIotControlPlaneEndpointByRegionAndStage(Region awsRegion,\n-                                                                    IotSdkClientFactory.EnvironmentStage stage) {\n-\n-        String iotControlPlaneEndpointTemplate = REGION_TO_IOT_CONTROL_PLANE_ENDPOINT\n-                .getOrDefault(awsRegion.toString(), DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);\n-        return  String.format(iotControlPlaneEndpointTemplate, stage.value, awsRegion);\n-    }\n-\n-    /**\n-     * Get global region.\n-     * @param awsRegion aws region\n-     * @return Region\n-     */\n-    public static Region getGlobalRegion(String awsRegion) {\n-        return GLOBAL_REGION_CONVERTER.getOrDefault(awsRegion, Region.AWS_GLOBAL);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NzIwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518897202", "bodyText": "Nit: name this RegionsUtils instead?", "author": "jbutler", "createdAt": "2020-11-06T17:27:09Z", "path": "src/main/java/com/aws/greengrass/util/EndpointGenerator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class EndpointGenerator {", "originalCommit": "abbfdeaa4142527f42e891c450257ff91635ff4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/EndpointGenerator.java b/src/main/java/com/aws/greengrass/util/EndpointGenerator.java\ndeleted file mode 100644\nindex c6aa07cab..000000000\n--- a/src/main/java/com/aws/greengrass/util/EndpointGenerator.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.aws.greengrass.util;\n-\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.utils.ImmutableMap;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public final class EndpointGenerator {\n-    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com\";\n-    private static final String CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com.cn\";\n-    private static Map<String, String> REGION_TO_IOT_CONTROL_PLANE_ENDPOINT = new HashMap<>();\n-    private static Map<String, Region> GLOBAL_REGION_CONVERTER = new HashMap<>();\n-    private static Map<String, Map<IotSdkClientFactory.EnvironmentStage, String>>\n-            REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT = new HashMap<>();\n-\n-    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n-            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n-    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n-            CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com.cn:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com.cn:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com.cn:8443/greengrass\"\n-    );\n-\n-    static {\n-        REGION_TO_IOT_CONTROL_PLANE_ENDPOINT.put(\"cn-north-1\", CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);\n-\n-        REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT.put(\"cn-north-1\",\n-                CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT);\n-\n-        GLOBAL_REGION_CONVERTER.put(\"cn-north-1\", Region.AWS_CN_GLOBAL);\n-        GLOBAL_REGION_CONVERTER.put(\"us-gov-east-1\", Region.AWS_US_GOV_GLOBAL);\n-        GLOBAL_REGION_CONVERTER.put(\"us-gov-west-1\", Region.AWS_US_GOV_GLOBAL);\n-    }\n-\n-    private EndpointGenerator() {\n-    }\n-\n-    /**\n-     * Get Greengrass ServiceEndpoint by region and stage.\n-     * @param awsRegion aws region\n-     * @param stage environment stage\n-     * @return Greengrass ServiceEndpoint\n-     */\n-    public static String getGreengrassServiceEndpointByRegionAndStage(String awsRegion,\n-                                                                      IotSdkClientFactory.EnvironmentStage stage) {\n-\n-        Map<IotSdkClientFactory.EnvironmentStage, String> greengrassServiceEndpointTemplate =\n-                REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT\n-                .getOrDefault(awsRegion, DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT);\n-        return String.format(greengrassServiceEndpointTemplate.get(stage), awsRegion);\n-    }\n-\n-    /**\n-     * Get Iot Control Plane Endpoint by region and stage.\n-     * @param awsRegion aws region\n-     * @param stage environment stage\n-     * @return Iot Control Plane Endpoint\n-     */\n-    public static String getIotControlPlaneEndpointByRegionAndStage(Region awsRegion,\n-                                                                    IotSdkClientFactory.EnvironmentStage stage) {\n-\n-        String iotControlPlaneEndpointTemplate = REGION_TO_IOT_CONTROL_PLANE_ENDPOINT\n-                .getOrDefault(awsRegion.toString(), DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);\n-        return  String.format(iotControlPlaneEndpointTemplate, stage.value, awsRegion);\n-    }\n-\n-    /**\n-     * Get global region.\n-     * @param awsRegion aws region\n-     * @return Region\n-     */\n-    public static Region getGlobalRegion(String awsRegion) {\n-        return GLOBAL_REGION_CONVERTER.getOrDefault(awsRegion, Region.AWS_GLOBAL);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMDQ1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518900458", "bodyText": "Get rid of this map, we don't need to pre-compute these strings.", "author": "jbutler", "createdAt": "2020-11-06T17:33:01Z", "path": "src/main/java/com/aws/greengrass/util/EndpointGenerator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class EndpointGenerator {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com\";\n+    private static final String CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com.cn\";\n+    private static Map<String, String> REGION_TO_IOT_CONTROL_PLANE_ENDPOINT = new HashMap<>();\n+    private static Map<String, Region> GLOBAL_REGION_CONVERTER = new HashMap<>();\n+    private static Map<String, Map<IotSdkClientFactory.EnvironmentStage, String>>\n+            REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT = new HashMap<>();\n+\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n+    );\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com.cn:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com.cn:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com.cn:8443/greengrass\"\n+    );\n+\n+    static {\n+        REGION_TO_IOT_CONTROL_PLANE_ENDPOINT.put(\"cn-north-1\", CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);", "originalCommit": "abbfdeaa4142527f42e891c450257ff91635ff4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/EndpointGenerator.java b/src/main/java/com/aws/greengrass/util/EndpointGenerator.java\ndeleted file mode 100644\nindex c6aa07cab..000000000\n--- a/src/main/java/com/aws/greengrass/util/EndpointGenerator.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.aws.greengrass.util;\n-\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.utils.ImmutableMap;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public final class EndpointGenerator {\n-    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com\";\n-    private static final String CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com.cn\";\n-    private static Map<String, String> REGION_TO_IOT_CONTROL_PLANE_ENDPOINT = new HashMap<>();\n-    private static Map<String, Region> GLOBAL_REGION_CONVERTER = new HashMap<>();\n-    private static Map<String, Map<IotSdkClientFactory.EnvironmentStage, String>>\n-            REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT = new HashMap<>();\n-\n-    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n-            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n-    );\n-    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n-            CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n-            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com.cn:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com.cn:8443/greengrass\",\n-            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com.cn:8443/greengrass\"\n-    );\n-\n-    static {\n-        REGION_TO_IOT_CONTROL_PLANE_ENDPOINT.put(\"cn-north-1\", CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);\n-\n-        REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT.put(\"cn-north-1\",\n-                CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT);\n-\n-        GLOBAL_REGION_CONVERTER.put(\"cn-north-1\", Region.AWS_CN_GLOBAL);\n-        GLOBAL_REGION_CONVERTER.put(\"us-gov-east-1\", Region.AWS_US_GOV_GLOBAL);\n-        GLOBAL_REGION_CONVERTER.put(\"us-gov-west-1\", Region.AWS_US_GOV_GLOBAL);\n-    }\n-\n-    private EndpointGenerator() {\n-    }\n-\n-    /**\n-     * Get Greengrass ServiceEndpoint by region and stage.\n-     * @param awsRegion aws region\n-     * @param stage environment stage\n-     * @return Greengrass ServiceEndpoint\n-     */\n-    public static String getGreengrassServiceEndpointByRegionAndStage(String awsRegion,\n-                                                                      IotSdkClientFactory.EnvironmentStage stage) {\n-\n-        Map<IotSdkClientFactory.EnvironmentStage, String> greengrassServiceEndpointTemplate =\n-                REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT\n-                .getOrDefault(awsRegion, DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT);\n-        return String.format(greengrassServiceEndpointTemplate.get(stage), awsRegion);\n-    }\n-\n-    /**\n-     * Get Iot Control Plane Endpoint by region and stage.\n-     * @param awsRegion aws region\n-     * @param stage environment stage\n-     * @return Iot Control Plane Endpoint\n-     */\n-    public static String getIotControlPlaneEndpointByRegionAndStage(Region awsRegion,\n-                                                                    IotSdkClientFactory.EnvironmentStage stage) {\n-\n-        String iotControlPlaneEndpointTemplate = REGION_TO_IOT_CONTROL_PLANE_ENDPOINT\n-                .getOrDefault(awsRegion.toString(), DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);\n-        return  String.format(iotControlPlaneEndpointTemplate, stage.value, awsRegion);\n-    }\n-\n-    /**\n-     * Get global region.\n-     * @param awsRegion aws region\n-     * @return Region\n-     */\n-    public static Region getGlobalRegion(String awsRegion) {\n-        return GLOBAL_REGION_CONVERTER.getOrDefault(awsRegion, Region.AWS_GLOBAL);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMjA3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518902071", "bodyText": "I don't think this is useful", "author": "jbutler", "createdAt": "2020-11-06T17:35:58Z", "path": "src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java", "diffHunk": "@@ -35,17 +35,23 @@\n             RetryPolicy.builder().numRetries(5).backoffStrategy(BackoffStrategy.defaultThrottlingStrategy())\n                     .retryCondition(retryCondition).build();\n \n+    private static final String DEFAULT_AWS_REGION = \"us-east-1\";\n+", "originalCommit": "abbfdeaa4142527f42e891c450257ff91635ff4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java b/src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java\nindex b6252e280..0497d3a14 100644\n--- a/src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java\n+++ b/src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java\n\n@@ -50,7 +50,7 @@ public final class IamSdkClientFactory {\n      * @return IamClient instance\n      */\n     public static IamClient getIamClient(String awsRegion) {\n-        Region region = EndpointGenerator.getGlobalRegion(awsRegion);\n+        Region region = RegionUtils.getGlobalRegion(awsRegion);\n         return IamClient.builder().region(region).httpClient(ProxyUtils.getSdkHttpClient())\n                 .overrideConfiguration(ClientOverrideConfiguration.builder().retryPolicy(retryPolicy).build()).build();\n     }\n"}}, {"oid": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e89fa5fd87c354ed5e918abdfa0266e42c491c4", "message": "check the region partition with the sdk", "committedDate": "2020-11-06T20:28:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNDU0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r519014542", "bodyText": "Nit: shorten this to getGreengrassServiceEndpoint", "author": "jbutler", "createdAt": "2020-11-06T21:29:46Z", "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpointByRegionAndStage(String awsRegion,", "originalCommit": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8aebc9a8174e84d58fb7abf0144fc07961810abd", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/RegionUtils.java b/src/main/java/com/aws/greengrass/util/RegionUtils.java\nindex 64263ed79..ba9293d39 100644\n--- a/src/main/java/com/aws/greengrass/util/RegionUtils.java\n+++ b/src/main/java/com/aws/greengrass/util/RegionUtils.java\n\n@@ -30,8 +30,8 @@ public final class RegionUtils {\n      * @param stage environment stage\n      * @return Greengrass ServiceEndpoint\n      */\n-    public static String getGreengrassServiceEndpointByRegionAndStage(String awsRegion,\n-                                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n         String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n         return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNDU5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r519014590", "bodyText": "nit: same thing here", "author": "jbutler", "createdAt": "2020-11-06T21:29:55Z", "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpointByRegionAndStage(String awsRegion,\n+                                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpointByRegionAndStage(Region awsRegion,", "originalCommit": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8aebc9a8174e84d58fb7abf0144fc07961810abd", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/RegionUtils.java b/src/main/java/com/aws/greengrass/util/RegionUtils.java\nindex 64263ed79..ba9293d39 100644\n--- a/src/main/java/com/aws/greengrass/util/RegionUtils.java\n+++ b/src/main/java/com/aws/greengrass/util/RegionUtils.java\n\n@@ -30,8 +30,8 @@ public final class RegionUtils {\n      * @param stage environment stage\n      * @return Greengrass ServiceEndpoint\n      */\n-    public static String getGreengrassServiceEndpointByRegionAndStage(String awsRegion,\n-                                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n         String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n         return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n     }\n"}}, {"oid": "8aebc9a8174e84d58fb7abf0144fc07961810abd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8aebc9a8174e84d58fb7abf0144fc07961810abd", "message": "remove method of getIamClient without input", "committedDate": "2020-11-06T22:47:31Z", "type": "commit"}, {"oid": "dd7ab892cfae72b5c6b022e061286de9efaa4c23", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dd7ab892cfae72b5c6b022e061286de9efaa4c23", "message": "Merge branch 'master' into iam-partition", "committedDate": "2020-11-06T22:48:06Z", "type": "commit"}, {"oid": "eb4e797cf26fb894711a0021ddc54e4eaf5e7842", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb4e797cf26fb894711a0021ddc54e4eaf5e7842", "message": "remove unnecessary field", "committedDate": "2020-11-06T23:05:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTE5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r519075190", "bodyText": "rename to getPartitionFromRegion", "author": "MikeDombo", "createdAt": "2020-11-07T01:14:53Z", "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getGlobalRegion(String awsRegion) {", "originalCommit": "eb4e797cf26fb894711a0021ddc54e4eaf5e7842", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3NzczMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520977730", "bodyText": "Sorry, I change this function name back to getGlobalRegion. getPartitionFromRegion is kind of confusing and make us  think it will return the partition name for a given region.", "author": "awszztt", "createdAt": "2020-11-11T01:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "289733302ae349e0de9f9b2eb044e2181f618d86", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/RegionUtils.java b/src/main/java/com/aws/greengrass/util/RegionUtils.java\nindex ba9293d39..5c29a0d64 100644\n--- a/src/main/java/com/aws/greengrass/util/RegionUtils.java\n+++ b/src/main/java/com/aws/greengrass/util/RegionUtils.java\n\n@@ -49,11 +49,11 @@ public final class RegionUtils {\n     }\n \n     /**\n-     * Get global region.\n+     * Get global region based on the region partition ID.\n      * @param awsRegion aws region\n      * @return Region\n      */\n-    public static Region getGlobalRegion(String awsRegion) {\n+    public static Region getPartitionFromRegion(String awsRegion) {\n         String partitionId = Region.of(awsRegion).metadata().id();\n         if (partitionId.equals(CN_PARTITION_ID)) {\n             return Region.AWS_CN_GLOBAL;\n"}}, {"oid": "289733302ae349e0de9f9b2eb044e2181f618d86", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/289733302ae349e0de9f9b2eb044e2181f618d86", "message": "remame function name to getPartitionFromRegion", "committedDate": "2020-11-07T01:34:24Z", "type": "commit"}, {"oid": "dd2588c9a499541f6696f1d6bca85dde7931507c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dd2588c9a499541f6696f1d6bca85dde7931507c", "message": "Merge branch 'master' into iam-partition", "committedDate": "2020-11-07T18:33:18Z", "type": "commit"}, {"oid": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f", "message": "Merge branch 'master' into iam-partition", "committedDate": "2020-11-09T22:43:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520928126", "bodyText": "return Region.of(Region.of(awsRegion).metadata().id()) instead of hardcoding these 3 partitions.", "author": "MikeDombo", "createdAt": "2020-11-10T22:59:08Z", "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region based on the region partition ID.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getPartitionFromRegion(String awsRegion) {\n+        String partitionId = Region.of(awsRegion).metadata().id();", "originalCommit": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODg4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520928883", "bodyText": "Also, why not use metadata().partition().id() isn't that exactly what we want?", "author": "MikeDombo", "createdAt": "2020-11-10T23:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMDIzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520930236", "bodyText": "Yes, I will change that.", "author": "awszztt", "createdAt": "2020-11-10T23:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0MTUzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520941537", "bodyText": "The id() is not global region, they are aws-cn, aws-us-gov, aws. I will keep this part.", "author": "awszztt", "createdAt": "2020-11-10T23:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0MzM3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520943373", "bodyText": "Your solution doesn't work.\nRegion.of(\"us-east-1\").metadata().id() == \"us-east-1\"\nWhich is NOT the partition.", "author": "MikeDombo", "createdAt": "2020-11-10T23:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0OTU1MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520949550", "bodyText": "That should be Region.of(awsRegion).metadata().partition().id(); I did not add the partition(). Sorry about that.", "author": "awszztt", "createdAt": "2020-11-10T23:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1MDE1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520950154", "bodyText": "That's not correct either, sorry.", "author": "MikeDombo", "createdAt": "2020-11-10T23:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1MTkxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520951913", "bodyText": "Region.of(Region.CN_NORTH_1.metadata().partition().id()+\"-global\") == \"aws-cn-global\"\n\nSomething like this does actually work, although it is a bit hacky with the \"-global\" it is the only way I have found to do it correctly.\nUnless you know better @jbutler", "author": "MikeDombo", "createdAt": "2020-11-11T00:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "5900856bdeacd1f1d2e38672cc800ef2d335ec79", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/RegionUtils.java b/src/main/java/com/aws/greengrass/util/RegionUtils.java\nindex 5c29a0d64..73ef8e8d0 100644\n--- a/src/main/java/com/aws/greengrass/util/RegionUtils.java\n+++ b/src/main/java/com/aws/greengrass/util/RegionUtils.java\n\n@@ -18,12 +18,26 @@ public final class RegionUtils {\n             IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n             IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n     );\n-    private static final String CN_PARTITION_ID = \"aws-cn\";\n-    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String> STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"evergreen.%s.%s\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"evergreen-gamma.%s.%s\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"evergreen-beta.%s.%s\"\n+    );\n \n     private RegionUtils() {\n     }\n \n+    /**\n+     * Get Evergreen Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Evergreen Endpoint\n+     */\n+    public static String getEvergreenEndpoint(String awsRegion, IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n     /**\n      * Get Greengrass ServiceEndpoint by region and stage.\n      * @param awsRegion aws region\n"}}, {"oid": "5900856bdeacd1f1d2e38672cc800ef2d335ec79", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5900856bdeacd1f1d2e38672cc800ef2d335ec79", "message": "make changes in the method of getGlobalRegion", "committedDate": "2020-11-11T00:54:24Z", "type": "commit"}, {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d85a03e78b0362d89ed1acae55362ea8d65dc6f0", "message": "Merge branch 'master' into iam-partition", "committedDate": "2020-11-11T00:55:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520985320", "bodyText": "No Evergreen. We are Greengrass", "author": "MikeDombo", "createdAt": "2020-11-11T01:15:30Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "originalCommit": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk5MDA5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520990098", "bodyText": "But we have both endpoints here, the first one would return as greengrassEndpoint.\n    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n    );\n    private static final Map<IotSdkClientFactory.EnvironmentStage, String> STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n            IotSdkClientFactory.EnvironmentStage.PROD, \"evergreen.%s.%s\",\n            IotSdkClientFactory.EnvironmentStage.GAMMA, \"evergreen-gamma.%s.%s\",\n            IotSdkClientFactory.EnvironmentStage.BETA, \"evergreen-beta.%s.%s\"\n    );", "author": "awszztt", "createdAt": "2020-11-11T01:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk5NzE0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520997145", "bodyText": "Think of a different name. We cannot use Evergreen. We are Greengrass.\nCall it GreengrassHttp vs GreengrassIot endpoint. (the ones with ats are Iot)", "author": "MikeDombo", "createdAt": "2020-11-11T01:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4NzAxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521487014", "bodyText": "Is that what we're actually doing? I thought we were putting it behind our V1 APIGW and appending v2 to the path.", "author": "jbutler", "createdAt": "2020-11-11T16:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMTE5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521521193", "bodyText": "My confusion. That's still a separate endpoint. +1", "author": "jbutler", "createdAt": "2020-11-11T17:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3Mjc3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521572771", "bodyText": "Just check with @ravmenak, the endpoints  containing \"evergreen\" will be soon replaced by the greengrass.<region>.amazonaws.com/greengrass/v2. (A MCM is starting today to promote this change to the prod).\nI will change the method names to getGreengrassHttpEndpoint(without ats) and getGreengrassDataEndpoint(with ats) right now. And make the changes to map of the endpoints when the MCM is done.", "author": "awszztt", "createdAt": "2020-11-11T18:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NDA0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521574042", "bodyText": "greengrass data is confusing, I'd use iot.", "author": "MikeDombo", "createdAt": "2020-11-11T19:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4NzQ2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521587465", "bodyText": "@MikeDombo in what way is it confusing? IMO using data tells you that it's a dataplane API, and it follows the same convention as IoT. It tells you what the endpoint is for, rather than what the DNS name is. IMO GreengrassIoT doesn't tell you anything - could be control plane or dataplane. Thoughts?", "author": "jbutler", "createdAt": "2020-11-11T19:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4ODIxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521588214", "bodyText": "ok, that's fine.", "author": "MikeDombo", "createdAt": "2020-11-11T19:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMzczNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521603737", "bodyText": "Check the greengrass and iot Core endpoints and quotas https://docs.aws.amazon.com/general/latest/gr/greengrass.html and make some changes to the method name accordingly.", "author": "awszztt", "createdAt": "2020-11-11T19:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "5a09153d4d184ce4b81d8b03f89e32a2c7760cbb", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java\nindex 4c32891d2..846ac335b 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java\n\n@@ -163,7 +163,7 @@ public class BaseE2ETestCase implements AutoCloseable {\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),\n+                                                                                             RegionUtils.getGreengrassControlPlaneEndpoint(GAMMA_REGION.toString(), envStage),\n                                                                                              GAMMA_REGION.toString()))\n                                                                              .build();\n     protected static final IamClient iamClient = IamSdkClientFactory.getIamClient(GAMMA_REGION.toString());\n"}}, {"oid": "66b88cad0e55abb16d132a6e722fc5a70ea03200", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/66b88cad0e55abb16d132a6e722fc5a70ea03200", "message": "Merge branch 'master' into iam-partition", "committedDate": "2020-11-11T06:03:22Z", "type": "commit"}, {"oid": "8d25c7147a5a9e81ef31539ba9adedd966d39443", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8d25c7147a5a9e81ef31539ba9adedd966d39443", "message": "Merge branch 'master' into iam-partition", "committedDate": "2020-11-11T06:17:31Z", "type": "commit"}, {"oid": "8d8683405a32cc5a734811d573b9ef0a3e65820d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8d8683405a32cc5a734811d573b9ef0a3e65820d", "message": "Merge branch 'master' into iam-partition", "committedDate": "2020-11-11T19:13:25Z", "type": "commit"}, {"oid": "5a09153d4d184ce4b81d8b03f89e32a2c7760cbb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5a09153d4d184ce4b81d8b03f89e32a2c7760cbb", "message": "refine the method name", "committedDate": "2020-11-11T19:54:48Z", "type": "commit"}]}