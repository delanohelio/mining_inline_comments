{"pr_number": 212, "pr_title": "Refactor PackageManager to use new PackageStore", "pr_createdAt": "2020-04-23T22:49:16Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/212", "timeline": [{"oid": "f6b64107d006490c129b8d8df9d88ec7740b4df3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f6b64107d006490c129b8d8df9d88ec7740b4df3", "message": "Implement PackageStore", "committedDate": "2020-04-23T17:14:51Z", "type": "commit"}, {"oid": "fa96f07584959ae6429866b5b27b6c2c179578af", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fa96f07584959ae6429866b5b27b6c2c179578af", "message": "Implement PackageStore", "committedDate": "2020-04-23T17:25:32Z", "type": "commit"}, {"oid": "3baa86269b0ee9fcddcb13839c27738ace8ee2bf", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3baa86269b0ee9fcddcb13839c27738ace8ee2bf", "message": "Implement PackageStore", "committedDate": "2020-04-23T17:32:46Z", "type": "commit"}, {"oid": "091066d97955d68b49c8cf7334958eda6fae157e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/091066d97955d68b49c8cf7334958eda6fae157e", "message": "small typo", "committedDate": "2020-04-23T17:43:34Z", "type": "commit"}, {"oid": "69fadd6379276c19dc05aaa9a29b82e67916f1e0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/69fadd6379276c19dc05aaa9a29b82e67916f1e0", "message": "rename to save", "committedDate": "2020-04-23T20:14:50Z", "type": "commit"}, {"oid": "e22e0b97873999a371707d13f88b8e523b3e8715", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e22e0b97873999a371707d13f88b8e523b3e8715", "message": "Refactor package manager with new store", "committedDate": "2020-04-23T22:32:54Z", "type": "commit"}, {"oid": "9c4fd9a0124f9cbae1792e6c3487bf571b843070", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9c4fd9a0124f9cbae1792e6c3487bf571b843070", "message": "Refactor package manager with new store", "committedDate": "2020-04-23T22:34:32Z", "type": "commit"}, {"oid": "dd388cd097a5fc2e6e0a93c519e01f2154a2040c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dd388cd097a5fc2e6e0a93c519e01f2154a2040c", "message": "clean up TestHelper", "committedDate": "2020-04-23T22:42:31Z", "type": "commit"}, {"oid": "b30b1f1422fe357ed1811c7804bbe860bfe400b7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b30b1f1422fe357ed1811c7804bbe860bfe400b7", "message": "clean up test resources", "committedDate": "2020-04-23T22:43:18Z", "type": "commit"}, {"oid": "093a67f80fd5eaffb18fedbc6647083778391300", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/093a67f80fd5eaffb18fedbc6647083778391300", "message": "minor", "committedDate": "2020-04-23T22:44:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NDc3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/212#discussion_r414194770", "bodyText": "Here is some logic that PackageManger knows about the internal file structure of PackageStore.\nWould it make sense if the store handles downloading as well?\nOtherwise, if you want the package manager to be 100% unaware of how the store keeps its packages, you will need to define an interface between the manager and the store which I think is an overkill.", "author": "fufranci", "createdAt": "2020-04-23T23:40:02Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -195,78 +158,24 @@ private void preparePackage(PackageIdentifier packageIdentifier)\n \n     private PackageRecipe findRecipeDownloadIfNotExisted(PackageIdentifier packageIdentifier)\n             throws PackageDownloadException, PackageLoadingException {\n-        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n         Optional<PackageRecipe> packageOptional = Optional.empty();\n         try {\n-            packageOptional = findPackageRecipe(recipePath);\n+            packageOptional = packageStore.findPackageRecipe(packageIdentifier);\n         } catch (PackageLoadingException e) {\n-            logger.atWarn().log(String.format(\"Failed to load package from %s\", recipePath), e);\n+            logger.atWarn().log(String.format(\"Failed to load package recipe for %s\", packageIdentifier), e);\n         }\n         if (packageOptional.isPresent()) {\n             return packageOptional.get();\n         } else {\n             PackageRecipe packageRecipe = greengrassPackageServiceHelper.downloadPackageRecipe(packageIdentifier);\n-            savePackageRecipeToFile(packageRecipe, recipePath);\n+            packageStore.savePackageRecipe(packageRecipe);\n             return packageRecipe;\n         }\n     }\n \n-    /**\n-     * Get the package recipe with given package identifier.\n-     *\n-     * @param pkgId package identifier\n-     * @return retrieved package recipe.\n-     * @throws PackageLoadingException if fails to find the target package recipe or failed to load recipe\n-     */\n-    public PackageRecipe getPackageRecipe(PackageIdentifier pkgId) throws PackageLoadingException {\n-        Optional<PackageRecipe> optionalPackage =\n-                findPackageRecipe(resolveRecipePath(pkgId.getName(), pkgId.getVersion()));\n-\n-        if (!optionalPackage.isPresent()) {\n-            // TODO refine exception and logs\n-            throw new PackageLoadingException(\n-                    String.format(\"The recipe for package: '%s' doesn't exist in the local package store.\", pkgId));\n-        }\n-\n-        return optionalPackage.get();\n-    }\n-\n-    Optional<PackageRecipe> findPackageRecipe(Path recipePath) throws PackageLoadingException {\n-        logger.atDebug().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", recipePath).log();\n-        if (!Files.exists(recipePath) || !Files.isRegularFile(recipePath)) {\n-            return Optional.empty();\n-        }\n-\n-        byte[] recipeContent;\n-        try {\n-            recipeContent = Files.readAllBytes(recipePath);\n-        } catch (IOException e) {\n-            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", recipePath), e);\n-        }\n-\n-        try {\n-            return Optional.of(OBJECT_MAPPER.readValue(recipeContent, PackageRecipe.class));\n-        } catch (IOException e) {\n-            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", recipePath), e);\n-        }\n-    }\n-\n-    void savePackageRecipeToFile(PackageRecipe packageRecipe, Path saveToFile) throws PackageLoadingException {\n-        try {\n-            OBJECT_MAPPER.writeValue(saveToFile.toFile(), packageRecipe);\n-        } catch (IOException e) {\n-            throw new PackageLoadingException(String.format(\"Failed to save package recipe to %s\", saveToFile), e);\n-        }\n-    }\n-\n-    private Path resolveRecipePath(String packageName, Semver packageVersion) {\n-        return recipeDirectory.resolve(String.format(\"%s-%s.yaml\", packageName, packageVersion.getValue()));\n-    }\n-\n     void downloadArtifactsIfNecessary(PackageIdentifier packageIdentifier, List<URI> artifactList)\n             throws PackageLoadingException, PackageDownloadException {\n-        Path packageArtifactDirectory =\n-                resolveArtifactDirectoryPath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        Path packageArtifactDirectory = packageStore.resolveArtifactDirectoryPath(packageIdentifier);\n         if (!Files.exists(packageArtifactDirectory) || !Files.isDirectory(packageArtifactDirectory)) {", "originalCommit": "093a67f80fd5eaffb18fedbc6647083778391300", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTEzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/212#discussion_r414211139", "bodyText": "No, it doesn't know about the internal folder structure. It just uses it after getting it from  PackageStore.\nAbout the interface, personally I prefer having an interface for PackageStore because it forces us to think about the boundary. But I didn't do it mainly because our DI doesn't support binding implementation to interface yet and also it is an overkill.", "author": "leaf94", "createdAt": "2020-04-24T00:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NDc3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODE1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/212#discussion_r414198158", "bodyText": "Is making this package private (as opposed to private) intentional?", "author": "fufranci", "createdAt": "2020-04-23T23:48:53Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -119,7 +83,7 @@ private void initializeSubDirectories(Path packageStoreDirectory) {\n      *     locally.\n      * @throws PackagingException if fails when trying to list available package metadata\n      */\n-    public Iterator<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)\n+    Iterator<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)", "originalCommit": "093a67f80fd5eaffb18fedbc6647083778391300", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTcwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/212#discussion_r414211709", "bodyText": "It is used in DependencyResolver so it can't be private, but doesn't need to be public~", "author": "leaf94", "createdAt": "2020-04-24T00:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODE1OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0OTk3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/212#discussion_r414749971", "bodyText": "What do we need NoArgsConstructor for?", "author": "hui-yang", "createdAt": "2020-04-24T17:40:44Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -12,103 +13,66 @@\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n-import com.aws.iot.evergreen.packagemanager.exceptions.UnexpectedPackagingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.packagemanager.plugins.ArtifactDownloader;\n import com.aws.iot.evergreen.packagemanager.plugins.GreengrassRepositoryDownloader;\n import com.aws.iot.evergreen.util.Coerce;\n-import com.aws.iot.evergreen.util.SerializerFactory;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.vdurmont.semver4j.Requirement;\n import com.vdurmont.semver4j.Semver;\n-import com.vdurmont.semver4j.SemverException;\n+import lombok.NoArgsConstructor;\n \n-import java.io.File;\n import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n import java.util.stream.Collectors;\n import javax.inject.Inject;\n-import javax.inject.Named;\n \n-public class PackageManager {\n+@NoArgsConstructor // for dependency injection", "originalCommit": "093a67f80fd5eaffb18fedbc6647083778391300", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg4MTM0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/212#discussion_r416881349", "bodyText": "Our DI needs a @Inject constructor or a no-arg constructor. This class use the latter~", "author": "leaf94", "createdAt": "2020-04-28T19:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0OTk3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MTM2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/212#discussion_r414751366", "bodyText": "I'm little confused. We have listAvailablePackageMetadata in both packageStore and packageManager?", "author": "hui-yang", "createdAt": "2020-04-24T17:42:52Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -129,7 +93,7 @@ private void initializeSubDirectories(Path packageStoreDirectory) {\n \n         // 2. list available packages locally\n         List<PackageMetadata> packageMetadataList =\n-                listAvailablePackageMetadataFromLocal(packageName, versionRequirement);\n+                packageStore.listAvailablePackageMetadata(packageName, versionRequirement);", "originalCommit": "093a67f80fd5eaffb18fedbc6647083778391300", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg4Mzk5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/212#discussion_r416883997", "bodyText": "Exactly and I hope this is a good example for encapsulation and independence.\nBoth listAvailablePackageMetadata returns the same thing - available versions that satisfy the version constraint.\nBut PackageStore::listAvailablePackageMetadata does this on local disk,\nwhere PackageManager::listAvailablePackageMetadata does this with its own logic -  looking for action version, listing from local, listing from cloud.\nIn summary, they are doing listAvailablePackageMetadata at their own scope. The logic is encapsulated and independent.", "author": "leaf94", "createdAt": "2020-04-28T19:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MTM2Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3651359133548188c0c56b92f986d3582e429ccd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3651359133548188c0c56b92f986d3582e429ccd", "message": "Merge branch 'master' into package_manager_refactor", "committedDate": "2020-04-28T17:27:19Z", "type": "commit"}, {"oid": "636f7669b4d493ba78b3c6869bcf10ee5fd5e895", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/636f7669b4d493ba78b3c6869bcf10ee5fd5e895", "message": "Merge branch 'master' into package_manager_refactor", "committedDate": "2020-04-28T17:47:48Z", "type": "commit"}, {"oid": "afa78e51d60ed4eddf818cda80302f0a6eea81e1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/afa78e51d60ed4eddf818cda80302f0a6eea81e1", "message": "Merge branch 'master' into package_manager_refactor", "committedDate": "2020-04-28T18:18:03Z", "type": "commit"}, {"oid": "3710394df716257f99414c344a2e35213bef56bc", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3710394df716257f99414c344a2e35213bef56bc", "message": "Fix unused import", "committedDate": "2020-04-28T18:18:28Z", "type": "commit"}, {"oid": "524d36f68ffafa3e43641a5c8061bf91e6fe2ff0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/524d36f68ffafa3e43641a5c8061bf91e6fe2ff0", "message": "Fix integ and e2e tests", "committedDate": "2020-04-28T18:37:19Z", "type": "commit"}]}