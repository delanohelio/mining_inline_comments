{"pr_number": 732, "pr_title": "Use saved recipe content string to calculate recipe digest", "pr_createdAt": "2020-11-28T05:21:29Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732", "timeline": [{"oid": "ce41e5d03c432c97ebedc32e95c37c4c51fd318b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ce41e5d03c432c97ebedc32e95c37c4c51fd318b", "message": "Use saved recipe content string to calculate recipe digest", "committedDate": "2020-11-28T05:19:28Z", "type": "commit"}, {"oid": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/909a9eefa9ae06cff1e3c530ff91ed352ad26c28", "message": "pmd and more tests", "committedDate": "2020-11-28T05:28:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTg5Njc5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531896791", "bodyText": "can this be removed? are we sending JSON right now?", "author": "rbattle", "createdAt": "2020-11-28T05:31:02Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -207,22 +186,19 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n         ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n                 new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe downloadedRecipe;\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe;\n         try {\n-            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n+            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n         } catch (PackageLoadingException e) {\n             // TODO remove this backoff operation once cloud switch to send JSON recipe\n-            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n+            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);", "originalCommit": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df7f2e52c59ae1671efdf9a1b1dad889348cafe5", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 4e4ca76e0..43c4c3672 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -186,38 +186,15 @@ public class ComponentManager implements InjectionActions {\n         ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n                 new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe;\n-        try {\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n-        } catch (PackageLoadingException e) {\n-            // TODO remove this backoff operation once cloud switch to send JSON recipe\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n-        }\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe =\n+                RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON); // cloud sends JSON\n \n-        // Save the recipe\n-        boolean recipeShouldbeSaved = true;\n-        Optional<String> recipeContentOnDevice = componentStore.findComponentRecipeContent(resolvedComponentId);\n-\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe finalDownloadedRecipe = cloudResolvedRecipe;\n-        if (recipeContentOnDevice.map(recipeContent -> {\n-            try {\n-                return RecipeLoader.parseRecipe(recipeContent, RecipeLoader.RecipeFormat.YAML);\n-            } catch (PackageLoadingException e) {\n-                // if fail to parse local recipe, treat it as not presented\n-                logger.atDebug().setCause(e).kv(\"componentId\", resolvedComponentId).log(\"Failed to parse local recipe\");\n-                return null;\n-            }\n-        }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n-            recipeShouldbeSaved = false;\n-        }\n-\n-        if (recipeShouldbeSaved) {\n-            String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n+        // Persist the recipe\n+        String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n \n-            // Since plugin runs in the same JVM as Nuleus does, we need to calculate the digest for its recipe and\n-            // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n-            storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n-        }\n+        // Since plugin runs in the same JVM as Nucleus does, we need to calculate the digest for its recipe and\n+        // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n+        storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n \n         // Save the arn to the recipe meta data file\n         componentStore.saveRecipeMetadata(resolvedComponentId, new RecipeMetadata(resolvedComponentVersion.getArn()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkwNzY3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531907673", "bodyText": "Can this be simplified so instead of:\nboolean recipeShouldbeSaved = true;\n\nif (<some long expression that is a boolean>) {\n  recipeShouldbeSaved = false\n}\n\nif (recipeShouldbeSaved) {\n\nto\nif (!<some long boolean expression>) {", "author": "rbattle", "createdAt": "2020-11-28T05:46:02Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -232,11 +208,15 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n                 return null;\n             }\n         }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n-            saveContent = false;\n+            recipeShouldbeSaved = false;\n         }\n \n-        if (saveContent) {\n-            componentStore.saveComponentRecipe(downloadedRecipe);\n+        if (recipeShouldbeSaved) {", "originalCommit": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df7f2e52c59ae1671efdf9a1b1dad889348cafe5", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 4e4ca76e0..43c4c3672 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -186,38 +186,15 @@ public class ComponentManager implements InjectionActions {\n         ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n                 new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe;\n-        try {\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n-        } catch (PackageLoadingException e) {\n-            // TODO remove this backoff operation once cloud switch to send JSON recipe\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n-        }\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe =\n+                RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON); // cloud sends JSON\n \n-        // Save the recipe\n-        boolean recipeShouldbeSaved = true;\n-        Optional<String> recipeContentOnDevice = componentStore.findComponentRecipeContent(resolvedComponentId);\n-\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe finalDownloadedRecipe = cloudResolvedRecipe;\n-        if (recipeContentOnDevice.map(recipeContent -> {\n-            try {\n-                return RecipeLoader.parseRecipe(recipeContent, RecipeLoader.RecipeFormat.YAML);\n-            } catch (PackageLoadingException e) {\n-                // if fail to parse local recipe, treat it as not presented\n-                logger.atDebug().setCause(e).kv(\"componentId\", resolvedComponentId).log(\"Failed to parse local recipe\");\n-                return null;\n-            }\n-        }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n-            recipeShouldbeSaved = false;\n-        }\n-\n-        if (recipeShouldbeSaved) {\n-            String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n+        // Persist the recipe\n+        String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n \n-            // Since plugin runs in the same JVM as Nuleus does, we need to calculate the digest for its recipe and\n-            // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n-            storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n-        }\n+        // Since plugin runs in the same JVM as Nucleus does, we need to calculate the digest for its recipe and\n+        // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n+        storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n \n         // Save the arn to the recipe meta data file\n         componentStore.saveRecipeMetadata(resolvedComponentId, new RecipeMetadata(resolvedComponentVersion.getArn()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkxMDE3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531910176", "bodyText": "why info? will this be called for every downloaded component?", "author": "rbattle", "createdAt": "2020-11-28T05:49:29Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -245,6 +225,28 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n         return resolvedComponentId;\n     }\n \n+\n+    private void storeRecipeDigestInConfigStoreForPlugin(\n+            com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe, String recipeContent)\n+            throws PackageLoadingException {\n+        ComponentIdentifier componentIdentifier =\n+                new ComponentIdentifier(componentRecipe.getComponentName(), componentRecipe.getComponentVersion());\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)", "originalCommit": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df7f2e52c59ae1671efdf9a1b1dad889348cafe5", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 4e4ca76e0..43c4c3672 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -186,38 +186,15 @@ public class ComponentManager implements InjectionActions {\n         ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n                 new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe;\n-        try {\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n-        } catch (PackageLoadingException e) {\n-            // TODO remove this backoff operation once cloud switch to send JSON recipe\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n-        }\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe =\n+                RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON); // cloud sends JSON\n \n-        // Save the recipe\n-        boolean recipeShouldbeSaved = true;\n-        Optional<String> recipeContentOnDevice = componentStore.findComponentRecipeContent(resolvedComponentId);\n-\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe finalDownloadedRecipe = cloudResolvedRecipe;\n-        if (recipeContentOnDevice.map(recipeContent -> {\n-            try {\n-                return RecipeLoader.parseRecipe(recipeContent, RecipeLoader.RecipeFormat.YAML);\n-            } catch (PackageLoadingException e) {\n-                // if fail to parse local recipe, treat it as not presented\n-                logger.atDebug().setCause(e).kv(\"componentId\", resolvedComponentId).log(\"Failed to parse local recipe\");\n-                return null;\n-            }\n-        }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n-            recipeShouldbeSaved = false;\n-        }\n-\n-        if (recipeShouldbeSaved) {\n-            String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n+        // Persist the recipe\n+        String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n \n-            // Since plugin runs in the same JVM as Nuleus does, we need to calculate the digest for its recipe and\n-            // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n-            storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n-        }\n+        // Since plugin runs in the same JVM as Nucleus does, we need to calculate the digest for its recipe and\n+        // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n+        storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n \n         // Save the arn to the recipe meta data file\n         componentStore.saveRecipeMetadata(resolvedComponentId, new RecipeMetadata(resolvedComponentVersion.getArn()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkxMDY3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531910670", "bodyText": "nit: add a kv(\"digest\", digest) and change the log to \"Save plugin digest\"", "author": "rbattle", "createdAt": "2020-11-28T05:50:11Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -245,6 +225,28 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n         return resolvedComponentId;\n     }\n \n+\n+    private void storeRecipeDigestInConfigStoreForPlugin(\n+            com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe, String recipeContent)\n+            throws PackageLoadingException {\n+        ComponentIdentifier componentIdentifier =\n+                new ComponentIdentifier(componentRecipe.getComponentName(), componentRecipe.getComponentVersion());\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY, componentIdentifier.toString())\n+                    .withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, componentIdentifier).log(\"Save calculated digest: \" + digest);", "originalCommit": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df7f2e52c59ae1671efdf9a1b1dad889348cafe5", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 4e4ca76e0..43c4c3672 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -186,38 +186,15 @@ public class ComponentManager implements InjectionActions {\n         ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n                 new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe;\n-        try {\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n-        } catch (PackageLoadingException e) {\n-            // TODO remove this backoff operation once cloud switch to send JSON recipe\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n-        }\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe =\n+                RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON); // cloud sends JSON\n \n-        // Save the recipe\n-        boolean recipeShouldbeSaved = true;\n-        Optional<String> recipeContentOnDevice = componentStore.findComponentRecipeContent(resolvedComponentId);\n-\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe finalDownloadedRecipe = cloudResolvedRecipe;\n-        if (recipeContentOnDevice.map(recipeContent -> {\n-            try {\n-                return RecipeLoader.parseRecipe(recipeContent, RecipeLoader.RecipeFormat.YAML);\n-            } catch (PackageLoadingException e) {\n-                // if fail to parse local recipe, treat it as not presented\n-                logger.atDebug().setCause(e).kv(\"componentId\", resolvedComponentId).log(\"Failed to parse local recipe\");\n-                return null;\n-            }\n-        }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n-            recipeShouldbeSaved = false;\n-        }\n-\n-        if (recipeShouldbeSaved) {\n-            String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n+        // Persist the recipe\n+        String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n \n-            // Since plugin runs in the same JVM as Nuleus does, we need to calculate the digest for its recipe and\n-            // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n-            storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n-        }\n+        // Since plugin runs in the same JVM as Nucleus does, we need to calculate the digest for its recipe and\n+        // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n+        storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n \n         // Save the arn to the recipe meta data file\n         componentStore.saveRecipeMetadata(resolvedComponentId, new RecipeMetadata(resolvedComponentVersion.getArn()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkxMTM2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531911361", "bodyText": "nit: Nucleus", "author": "rbattle", "createdAt": "2020-11-28T05:51:04Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -232,11 +208,15 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n                 return null;\n             }\n         }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n-            saveContent = false;\n+            recipeShouldbeSaved = false;\n         }\n \n-        if (saveContent) {\n-            componentStore.saveComponentRecipe(downloadedRecipe);\n+        if (recipeShouldbeSaved) {\n+            String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n+\n+            // Since plugin runs in the same JVM as Nuleus does, we need to calculate the digest for its recipe and", "originalCommit": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df7f2e52c59ae1671efdf9a1b1dad889348cafe5", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 4e4ca76e0..43c4c3672 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -186,38 +186,15 @@ public class ComponentManager implements InjectionActions {\n         ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n                 new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe;\n-        try {\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n-        } catch (PackageLoadingException e) {\n-            // TODO remove this backoff operation once cloud switch to send JSON recipe\n-            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n-        }\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe =\n+                RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON); // cloud sends JSON\n \n-        // Save the recipe\n-        boolean recipeShouldbeSaved = true;\n-        Optional<String> recipeContentOnDevice = componentStore.findComponentRecipeContent(resolvedComponentId);\n-\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe finalDownloadedRecipe = cloudResolvedRecipe;\n-        if (recipeContentOnDevice.map(recipeContent -> {\n-            try {\n-                return RecipeLoader.parseRecipe(recipeContent, RecipeLoader.RecipeFormat.YAML);\n-            } catch (PackageLoadingException e) {\n-                // if fail to parse local recipe, treat it as not presented\n-                logger.atDebug().setCause(e).kv(\"componentId\", resolvedComponentId).log(\"Failed to parse local recipe\");\n-                return null;\n-            }\n-        }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n-            recipeShouldbeSaved = false;\n-        }\n-\n-        if (recipeShouldbeSaved) {\n-            String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n+        // Persist the recipe\n+        String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n \n-            // Since plugin runs in the same JVM as Nuleus does, we need to calculate the digest for its recipe and\n-            // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n-            storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n-        }\n+        // Since plugin runs in the same JVM as Nucleus does, we need to calculate the digest for its recipe and\n+        // persist it, so that we can use it to detect and prevent a tampered plugin (recipe) gets loaded\n+        storeRecipeDigestInConfigStoreForPlugin(cloudResolvedRecipe, savedRecipeContent);\n \n         // Save the arn to the recipe meta data file\n         componentStore.saveRecipeMetadata(resolvedComponentId, new RecipeMetadata(resolvedComponentVersion.getArn()));\n"}}, {"oid": "7ce9b00e478a2d3ba70e37335197937a3754c138", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7ce9b00e478a2d3ba70e37335197937a3754c138", "message": "fix E2E", "committedDate": "2020-11-28T05:57:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkzNTE3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531935177", "bodyText": "remove this (p.s. sorry you had to do that in the first place)", "author": "rbattle", "createdAt": "2020-11-28T06:23:29Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -219,11 +219,11 @@ protected BaseE2ETestCase() throws Exception {\n     }\n \n     public static void setDefaultRunWithUser(Kernel kernel) {\n-        new DeviceConfiguration(kernel).getRunWithDefaultPosixUser().dflt(\"nobody\");\n+        new DeviceConfiguration(kernel).getRunWithDefaultPosixUser().dflt(\"shuyeh\");", "originalCommit": "7ce9b00e478a2d3ba70e37335197937a3754c138", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkzNzM0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531937349", "bodyText": "lol. Yeah was for a local test", "author": "leaf94", "createdAt": "2020-11-28T06:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkzNTE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cafba4eb398c6c370ffc131ffbc44968bbe1acbe", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java\nindex 12fcc64b4..1223aa0a2 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java\n\n@@ -219,7 +219,7 @@ public class BaseE2ETestCase implements AutoCloseable {\n     }\n \n     public static void setDefaultRunWithUser(Kernel kernel) {\n-        new DeviceConfiguration(kernel).getRunWithDefaultPosixUser().dflt(\"shuyeh\");\n+        new DeviceConfiguration(kernel).getRunWithDefaultPosixUser().dflt(\"nobody\");\n     }\n \n     protected void initKernel()\n"}}, {"oid": "df7f2e52c59ae1671efdf9a1b1dad889348cafe5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/df7f2e52c59ae1671efdf9a1b1dad889348cafe5", "message": "more refactor", "committedDate": "2020-11-28T06:25:33Z", "type": "commit"}, {"oid": "68c78a9b9678c1e612d0d5066d67ae09588c13e0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/68c78a9b9678c1e612d0d5066d67ae09588c13e0", "message": "minor", "committedDate": "2020-11-28T06:25:57Z", "type": "commit"}, {"oid": "cafba4eb398c6c370ffc131ffbc44968bbe1acbe", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cafba4eb398c6c370ffc131ffbc44968bbe1acbe", "message": "minor", "committedDate": "2020-11-28T06:26:38Z", "type": "commit"}, {"oid": "65b618a6a380511f92387da94fe6fadf44eedb74", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/65b618a6a380511f92387da94fe6fadf44eedb74", "message": "refactored unit test; Ready for PR", "committedDate": "2020-11-28T06:32:01Z", "type": "commit"}, {"oid": "d94057fa9735729f6ea1cbeb809ac5337f15fb35", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d94057fa9735729f6ea1cbeb809ac5337f15fb35", "message": "java doc", "committedDate": "2020-11-28T06:45:49Z", "type": "commit"}]}