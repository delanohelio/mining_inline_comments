{"pr_number": 462, "pr_title": "Adding retry for Iot Jobs subscriptions", "pr_createdAt": "2020-09-22T03:27:11Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462", "timeline": [{"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3bd40b83282b4854b3bb4602fe7866fe4d6054c0", "message": "Adding retry for Iot Jobs subscriptions", "committedDate": "2020-09-22T03:27:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492459432", "bodyText": "shouldn't we literally try forever as long as they have configured a cloud connection (certs)?", "author": "MikeDombo", "createdAt": "2020-09-22T03:46:26Z", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "originalCommit": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyNzQ2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492927466", "bodyText": "I think that will be unnecessary resource consumption. I think it should be triggered when network availability is detected. If its a reconnection it is already taken care by the mqtt client. If it is the first time, device should start in offline mode and then there needs to be a mechanism to indicate network availability. We have discussed this and it will probably be post Re:invent.", "author": "abanthiy", "createdAt": "2020-09-22T17:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTI3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492929275", "bodyText": "Post re:invent is not a solution. We cannot have the device be a brick, which this will be since you can't deploy anything to it because we just gave up", "author": "MikeDombo", "createdAt": "2020-09-22T17:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzMTY2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492931664", "bodyText": "@fengwa-aws thoughts?", "author": "MikeDombo", "createdAt": "2020-09-22T18:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0ODc0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492948749", "bodyText": "I agree with Michael that we cannot brick the device. Doesn't the AWS SDK handle reconnect automatically? Is there a way the application code can be notified that and retry the subscription when the MQTT connection is resumed?", "author": "fengwang666", "createdAt": "2020-09-22T18:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1MDM0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492950349", "bodyText": "I thought the AWS SDK also retries - I remember looking at the CRT and they do retry some commands\nIn GGv1 we had this devices effectively get bricked because IoT core doesn't send a response if subscribe is throttled - we need to confirm whether the SDK retries or retry ourselves (with backoff)\nThe customer had to use their own mechanism for restarting devices - in the case of an IoT core outage, when it comes back and if a significant amount of devices try to reconnect at the same time this will cause throttling and we need to be able to handle it\nWe should retry forever", "author": "rbattle", "createdAt": "2020-09-22T18:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1NTY5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492955692", "bodyText": "I realized my previous comment is irrelevant and please ignore it. I agree with Rob and Michael that the subscribe operation should be retried until it succeeds.", "author": "fengwang666", "createdAt": "2020-09-22T18:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MzU2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492963562", "bodyText": "ok, For now I will change it to retry forever. We can discuss device resource consumption and make optimizations for that in future.", "author": "abanthiy", "createdAt": "2020-09-22T18:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2NDczMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492964733", "bodyText": "The backoff can be pretty extreme. Maybe as much as 30 minutes or 1 hour.", "author": "MikeDombo", "createdAt": "2020-09-22T18:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "f1fa868c5417b01afbdf74e3b87be4403fca6488", "chunk": "diff --git a/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java b/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\nindex 509e72e1d..3f47b618f 100644\n--- a/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\n+++ b/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\n\n@@ -407,54 +414,12 @@ public class IotJobsHelper implements InjectionActions {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n-    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n-    public void subscribeToJobsTopics()   {\n-        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();\n-        try {\n-            CrashableSupplier<Void, Exception> subscribeToEventNotifications = () -> {\n-                subscribeToEventNotifications(eventHandler);\n-                return null;\n-            };\n-            retryableAccessor.retry(MAX_RETRIES_FOR_IOT_SUBSCRIPTIONS,\n-                    BACK_OFF_MS, subscribeToEventNotifications,\n-                    new HashSet<>(Arrays.asList(TimeoutException.class)));\n-\n-            CrashableSupplier<Void, Exception> subscribeToNextJobDescription = () -> {\n-                subscribeToGetNextJobDescription(describeJobExecutionResponseConsumer, rejectedError -> {\n-                    logger.error(\"Job subscription got rejected\", rejectedError);\n-                });\n-                return null;\n-            };\n-            retryableAccessor.retry(MAX_RETRIES_FOR_IOT_SUBSCRIPTIONS,\n-                    BACK_OFF_MS, subscribeToNextJobDescription,\n-                    new HashSet<>(Arrays.asList(TimeoutException.class)));\n-\n-            requestNextPendingJobDocument();\n-\n-        } catch (ExecutionException e) {\n-            //TODO: If network is not available then it will throw MqttException\n-            // If there is any other problem like thingName is not specified in the request then also\n-            // it throws Mqtt exception. Need to distinguish between what is cause due to network unavailability\n-            // and what is caused by other non-transient causes like invalid parameters\n-            if (e.getCause() instanceof MqttException) {\n-                logger.atWarn().setCause(e).log(\"No connection available during subscribing to topic. \"\n-                        + \"Will retry when connection is available\");\n-                return;\n-            }\n-            //Device will run in offline mode if it is not able to subscribe to Iot Jobs topics\n-            logger.atError().setCause(e).log(\"Caught exception while subscribing to Iot Jobs topics\");\n-        } catch (TimeoutException e) {\n-\n-            //After the max retries have been exhausted\n-            logger.atWarn().setCause(e).log(\"No connection available during subscribing to topic. \"\n-                    + \"Will retry when connection is available\");\n-        } catch (InterruptedException e) {\n-            //Since this method can run as runnable cannot throw exception so handling exceptions here\n-            logger.atWarn().log(\"Interrupted while running deployment service\");\n-        } catch (Exception e) {\n-            logger.atError().setCause(e).log(\"Caught exception while subscribing to Iot Jobs topics\");\n-        }\n-\n+    public void subscribeToJobsTopics() {\n+        subscribeToEventNotifications(eventHandler);\n+        subscribeToGetNextJobDescription(describeJobExecutionResponseConsumer, rejectedError -> {\n+            logger.error(\"Job subscription got rejected\", rejectedError);\n+        });\n+        requestNextPendingJobDocument();\n     }\n \n     /**\n"}}, {"oid": "f1fa868c5417b01afbdf74e3b87be4403fca6488", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f1fa868c5417b01afbdf74e3b87be4403fca6488", "message": "Adding retry for Iot Jobs subscriptions", "committedDate": "2020-09-22T21:38:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2OTMwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493069305", "bodyText": "can this be package-private?", "author": "MikeDombo", "createdAt": "2020-09-22T22:29:28Z", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -129,6 +139,8 @@\n \n     private IotJobsClient iotJobsClient;\n     private MqttClientConnection connection;\n+    @Setter // For tests", "originalCommit": "f1fa868c5417b01afbdf74e3b87be4403fca6488", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3MzkxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493073919", "bodyText": "Done", "author": "abanthiy", "createdAt": "2020-09-22T22:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2OTMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "54c9dc0873ca8aa6ab15c8fa09f23e7b9cb8c637", "chunk": "diff --git a/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java b/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\nindex 3f47b618f..f1f6f0648 100644\n--- a/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\n+++ b/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\n\n@@ -139,7 +140,7 @@ public class IotJobsHelper implements InjectionActions {\n \n     private IotJobsClient iotJobsClient;\n     private MqttClientConnection connection;\n-    @Setter // For tests\n+    @Setter (AccessLevel.PACKAGE) // For tests\n     private long waitTimeToSubscribeAgain = WAIT_TIME_MS_TO_SUBSCRIBE_AGAIN;\n \n     private final Consumer<JobExecutionsChangedEvent> eventHandler = event -> {\n"}}, {"oid": "54c9dc0873ca8aa6ab15c8fa09f23e7b9cb8c637", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/54c9dc0873ca8aa6ab15c8fa09f23e7b9cb8c637", "message": "Adding retry for Iot Jobs subscriptions", "committedDate": "2020-09-22T22:42:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDQ3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493074474", "bodyText": "Can the recursive call cause stack overflow eventually in extreme cases? Let's say if the device is offline for a month, then the stack can be filled up, right?", "author": "fengwang666", "createdAt": "2020-09-22T22:43:47Z", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -463,10 +452,41 @@ protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionRes\n             subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n             logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n         } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+            Throwable cause = e.getCause();\n+            if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                //TODO: If network is not available then it will throw MqttException\n+                // If there is any other problem like thingName is not specified in the request then also\n+                // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                // exposed. Will make required change in CRT package to expose the error code and then update this\n+                logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+                waitAndRetrySubscribingToJobDescriptionTopic();\n+            }\n+            if (cause instanceof InterruptedException) {\n+                logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                return;\n+            }\n+        } catch (TimeoutException e) {\n+            logger.atWarn().setCause(e).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+            waitAndRetrySubscribingToJobDescriptionTopic();\n+        } catch (InterruptedException e) {\n+            logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n         }\n     }\n \n+    private void waitAndRetrySubscribingToJobDescriptionTopic() {\n+        try {\n+            // Wait for sometime and then try to subscribe again\n+            Random jitter = new Random();\n+            Thread.sleep(waitTimeToSubscribeAgain + jitter.nextInt(10_000));\n+        } catch (InterruptedException interruptedException) {\n+            logger.atWarn().log(\"Interrupted while subscribing to Iot jobs topics\");\n+            return;\n+        }\n+        subscribeToGetNextJobDescription(describeJobExecutionResponseConsumer, rejectedError -> {", "originalCommit": "54c9dc0873ca8aa6ab15c8fa09f23e7b9cb8c637", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MTAwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493091009", "bodyText": "Yes that's a possibility. I can change this to a loop. But I think there may be other overflows like disk full due to logs (may reduce by not logging in retry branches) or buffer full for I/O.", "author": "abanthiy", "createdAt": "2020-09-22T23:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MTUyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493091527", "bodyText": "Definitely loop instead. Logs are cleaned up", "author": "MikeDombo", "createdAt": "2020-09-22T23:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDQ3NA=="}], "type": "inlineReview", "revised_code": {"commit": "c7042d1703309181ff98d5855f01d007e56056ac", "chunk": "diff --git a/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java b/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\nindex f1f6f0648..21ac23d28 100644\n--- a/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\n+++ b/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\n\n@@ -442,51 +442,41 @@ public class IotJobsHelper implements InjectionActions {\n                 new DescribeJobExecutionSubscriptionRequest();\n         describeJobExecutionSubscriptionRequest.thingName = Coerce.toString(deviceConfiguration.getThingName());\n         describeJobExecutionSubscriptionRequest.jobId = \"$next\";\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n-                        QualityOfService.AT_LEAST_ONCE, consumerAccept);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            subscribed = iotJobsClient.SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n-                    QualityOfService.AT_LEAST_ONCE, consumerReject);\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n-        } catch (ExecutionException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof MqttException || cause instanceof TimeoutException) {\n-                //TODO: If network is not available then it will throw MqttException\n-                // If there is any other problem like thingName is not specified in the request then also\n-                // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n-                // exposed. Will make required change in CRT package to expose the error code and then update this\n-                logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n-                waitAndRetrySubscribingToJobDescriptionTopic();\n-            }\n-            if (cause instanceof InterruptedException) {\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient\n+                    .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n+                            QualityOfService.AT_LEAST_ONCE, consumerAccept);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                subscribed = iotJobsClient\n+                        .SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n+                                QualityOfService.AT_LEAST_ONCE, consumerReject);\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+                }\n+                if (cause instanceof InterruptedException) {\n+                    logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                    break;\n+                }\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+            } catch (InterruptedException e) {\n                 logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n-                return;\n+                break;\n             }\n-        } catch (TimeoutException e) {\n-            logger.atWarn().setCause(e).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n-            waitAndRetrySubscribingToJobDescriptionTopic();\n-        } catch (InterruptedException e) {\n-            logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n         }\n     }\n \n-    private void waitAndRetrySubscribingToJobDescriptionTopic() {\n-        try {\n-            // Wait for sometime and then try to subscribe again\n-            Random jitter = new Random();\n-            Thread.sleep(waitTimeToSubscribeAgain + jitter.nextInt(10_000));\n-        } catch (InterruptedException interruptedException) {\n-            logger.atWarn().log(\"Interrupted while subscribing to Iot jobs topics\");\n-            return;\n-        }\n-        subscribeToGetNextJobDescription(describeJobExecutionResponseConsumer, rejectedError -> {\n-            logger.error(\"Job subscription got rejected\", rejectedError);\n-        });\n-    }\n-\n     /**\n      * Subscribe to $aws/things/{thingName}/jobs/notify topic.\n      *\n"}}, {"oid": "c7042d1703309181ff98d5855f01d007e56056ac", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c7042d1703309181ff98d5855f01d007e56056ac", "message": "Adding retry for Iot Jobs subscriptions", "committedDate": "2020-09-22T23:52:08Z", "type": "forcePushed"}, {"oid": "8199d8cb3ce8396a3b27cff14302363bd13371a3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8199d8cb3ce8396a3b27cff14302363bd13371a3", "message": "Adding retry for Iot Jobs subscriptions", "committedDate": "2020-09-23T02:39:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNDczMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493724732", "bodyText": "sleep before retrying?", "author": "MikeDombo", "createdAt": "2020-09-23T16:22:09Z", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -445,25 +435,45 @@ public void subscribeToJobsTopics()   {\n      * @throws TimeoutException     if the operation does not complete within the given time\n      */\n     protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionResponse> consumerAccept,\n-                                                    Consumer<RejectedError> consumerReject)\n-            throws ExecutionException, InterruptedException, TimeoutException {\n+                                                    Consumer<RejectedError> consumerReject) {\n \n-        logger.atInfo().log(\"Subscribing to deployment job execution update.\");\n+        logger.atDebug().log(\"Subscribing to deployment job execution update.\");\n         DescribeJobExecutionSubscriptionRequest describeJobExecutionSubscriptionRequest =\n                 new DescribeJobExecutionSubscriptionRequest();\n         describeJobExecutionSubscriptionRequest.thingName = Coerce.toString(deviceConfiguration.getThingName());\n         describeJobExecutionSubscriptionRequest.jobId = \"$next\";\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n-                        QualityOfService.AT_LEAST_ONCE, consumerAccept);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            subscribed = iotJobsClient.SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n-                    QualityOfService.AT_LEAST_ONCE, consumerReject);\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n-        } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient\n+                    .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n+                            QualityOfService.AT_LEAST_ONCE, consumerAccept);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                subscribed = iotJobsClient\n+                        .SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n+                                QualityOfService.AT_LEAST_ONCE, consumerReject);\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+                }\n+                if (cause instanceof InterruptedException) {\n+                    logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                    break;\n+                }\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+            } catch (InterruptedException e) {\n+                logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                break;\n+            }", "originalCommit": "8199d8cb3ce8396a3b27cff14302363bd13371a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNTgwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493835807", "bodyText": "Added", "author": "abanthiy", "createdAt": "2020-09-23T19:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNDczMg=="}], "type": "inlineReview", "revised_code": {"commit": "3dc3ac1c9d770a0d7ab6e4776666e42d82774f7c", "chunk": "diff --git a/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java b/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\nindex 21ac23d28..01d64168e 100644\n--- a/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\n+++ b/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java\n\n@@ -474,6 +474,15 @@ public class IotJobsHelper implements InjectionActions {\n                 logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n                 break;\n             }\n+\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(waitTimeToSubscribeAgain + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                break;\n+            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNTExMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493725111", "bodyText": "just use an atomicinteger", "author": "MikeDombo", "createdAt": "2020-09-23T16:22:43Z", "path": "src/test/java/com/aws/greengrass/deployment/IotJobsHelperTest.java", "diffHunk": "@@ -177,6 +183,68 @@ public void GIVEN_connected_to_iot_WHEN_subscribe_to_jobs_topics_THEN_get_notifi\n                 eq(QualityOfService.AT_LEAST_ONCE));\n     }\n \n+    @Test\n+    public void GIVEN_not_connected_to_iot_WHEN_subscribe_to_eventnotifications_topic_timesout_THEN_retry(ExtensionContext context)\n+            throws Exception {\n+        ignoreExceptionOfType(context, TimeoutException.class);\n+        CompletableFuture<Integer> integerCompletableFuture = CompletableFuture.completedFuture(1);\n+        CompletableFuture<Integer> exceptionallyCompletedFuture = new CompletableFuture<>();\n+        exceptionallyCompletedFuture.completeExceptionally(new TimeoutException());\n+        final int[] count = {0};", "originalCommit": "8199d8cb3ce8396a3b27cff14302363bd13371a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3dc3ac1c9d770a0d7ab6e4776666e42d82774f7c", "chunk": "diff --git a/src/test/java/com/aws/greengrass/deployment/IotJobsHelperTest.java b/src/test/java/com/aws/greengrass/deployment/IotJobsHelperTest.java\nindex fe0ac78d2..8702416aa 100644\n--- a/src/test/java/com/aws/greengrass/deployment/IotJobsHelperTest.java\n+++ b/src/test/java/com/aws/greengrass/deployment/IotJobsHelperTest.java\n\n@@ -220,11 +221,10 @@ public class IotJobsHelperTest {\n         CompletableFuture<Integer> integerCompletableFuture = CompletableFuture.completedFuture(1);\n         CompletableFuture<Integer> exceptionallyCompletedFuture = new CompletableFuture<>();\n         exceptionallyCompletedFuture.completeExceptionally(new TimeoutException());\n-        final int[] count = {0};\n+        AtomicInteger count = new AtomicInteger();\n         when(mockIotJobsClient.SubscribeToDescribeJobExecutionAccepted(any()\n                 , eq(QualityOfService.AT_LEAST_ONCE), any())).thenAnswer(invMocks -> {\n-            count[0]++;\n-            if (count[0] > 1) {\n+            if (count.incrementAndGet() > 1) {\n                 return integerCompletableFuture;\n             } else {\n                 return exceptionallyCompletedFuture;\n"}}, {"oid": "3dc3ac1c9d770a0d7ab6e4776666e42d82774f7c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3dc3ac1c9d770a0d7ab6e4776666e42d82774f7c", "message": "Adding retry for Iot Jobs subscriptions", "committedDate": "2020-09-23T18:14:37Z", "type": "forcePushed"}, {"oid": "db85e2947bd343c8861b9671d8e7189e9e3eeb45", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/db85e2947bd343c8861b9671d8e7189e9e3eeb45", "message": "Adding retry for Iot Jobs subscriptions", "committedDate": "2020-09-23T19:16:40Z", "type": "commit"}, {"oid": "db85e2947bd343c8861b9671d8e7189e9e3eeb45", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/db85e2947bd343c8861b9671d8e7189e9e3eeb45", "message": "Adding retry for Iot Jobs subscriptions", "committedDate": "2020-09-23T19:16:40Z", "type": "forcePushed"}, {"oid": "1ce2fb505609c434a214a54acd6a0af31c671db8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1ce2fb505609c434a214a54acd6a0af31c671db8", "message": "Merge branch 'master' into retrySubscriptions", "committedDate": "2020-09-23T20:15:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMzI2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493903269", "bodyText": "Will this create a lot of warn logs?", "author": "fengwang666", "createdAt": "2020-09-23T21:22:47Z", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -445,25 +435,54 @@ public void subscribeToJobsTopics()   {\n      * @throws TimeoutException     if the operation does not complete within the given time\n      */\n     protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionResponse> consumerAccept,\n-                                                    Consumer<RejectedError> consumerReject)\n-            throws ExecutionException, InterruptedException, TimeoutException {\n+                                                    Consumer<RejectedError> consumerReject) {\n \n-        logger.atInfo().log(\"Subscribing to deployment job execution update.\");\n+        logger.atDebug().log(\"Subscribing to deployment job execution update.\");\n         DescribeJobExecutionSubscriptionRequest describeJobExecutionSubscriptionRequest =\n                 new DescribeJobExecutionSubscriptionRequest();\n         describeJobExecutionSubscriptionRequest.thingName = Coerce.toString(deviceConfiguration.getThingName());\n         describeJobExecutionSubscriptionRequest.jobId = \"$next\";\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n-                        QualityOfService.AT_LEAST_ONCE, consumerAccept);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            subscribed = iotJobsClient.SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n-                    QualityOfService.AT_LEAST_ONCE, consumerReject);\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n-        } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient\n+                    .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n+                            QualityOfService.AT_LEAST_ONCE, consumerAccept);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                subscribed = iotJobsClient\n+                        .SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n+                                QualityOfService.AT_LEAST_ONCE, consumerReject);\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);", "originalCommit": "1ce2fb505609c434a214a54acd6a0af31c671db8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NjUzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r494646530", "bodyText": "This is logging a cause so I think it should be catching attention. Debug log will just get lost.", "author": "abanthiy", "createdAt": "2020-09-24T22:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMzI2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMzQ2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493903462", "bodyText": "Same here. will this create a lot of warn logs? Maybe change it to debug?", "author": "fengwang666", "createdAt": "2020-09-23T21:23:15Z", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -475,19 +494,48 @@ protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionRes\n      * @throws InterruptedException When this thread was interrupted\n      * @throws TimeoutException     if the operation does not complete within the given time\n      */\n-    protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent> eventHandler)\n-            throws ExecutionException, InterruptedException, TimeoutException {\n-        logger.atInfo().log(\"Subscribing to deployment job event notifications.\");\n+    protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent> eventHandler) {\n+\n+        logger.atDebug().log(\"Subscribing to deployment job event notifications.\");\n         JobExecutionsChangedSubscriptionRequest request = new JobExecutionsChangedSubscriptionRequest();\n         request.thingName = Coerce.toString(deviceConfiguration.getThingName());\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToJobExecutionsChangedEvents(request, QualityOfService.AT_LEAST_ONCE, eventHandler);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-        } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient.SubscribeToJobExecutionsChangedEvents(request,\n+                    QualityOfService.AT_LEAST_ONCE, eventHandler);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job event notifications.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_EVENT_NOTIFICATIONS_RETRY);", "originalCommit": "1ce2fb505609c434a214a54acd6a0af31c671db8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NjYwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r494646608", "bodyText": "Same as above", "author": "abanthiy", "createdAt": "2020-09-24T22:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMzQ2Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "fd26150125fc06c1d73a8ae0994df70dc50f13fc", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fd26150125fc06c1d73a8ae0994df70dc50f13fc", "message": "Merge branch 'master' into retrySubscriptions", "committedDate": "2020-09-24T23:39:27Z", "type": "commit"}, {"oid": "35a5539ad2d39de27fc54201b814d6d041b6a440", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35a5539ad2d39de27fc54201b814d6d041b6a440", "message": "Merge branch 'master' into retrySubscriptions", "committedDate": "2020-09-25T07:07:27Z", "type": "commit"}, {"oid": "c72b6046cd5fd475289b742c28cea6f86e81c711", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c72b6046cd5fd475289b742c28cea6f86e81c711", "message": "Merge branch 'master' into retrySubscriptions", "committedDate": "2020-09-25T16:21:58Z", "type": "commit"}, {"oid": "767744198cef2fc457f3f404a9a2a997d09701aa", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/767744198cef2fc457f3f404a9a2a997d09701aa", "message": "Merge branch 'master' into retrySubscriptions", "committedDate": "2020-09-25T18:17:11Z", "type": "commit"}, {"oid": "0de3c6b41b52323573c3c09a8305f2d9c46f583d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0de3c6b41b52323573c3c09a8305f2d9c46f583d", "message": "Merge branch 'master' into retrySubscriptions", "committedDate": "2020-09-25T18:55:12Z", "type": "commit"}]}