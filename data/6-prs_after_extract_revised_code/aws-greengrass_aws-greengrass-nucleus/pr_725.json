{"pr_number": 725, "pr_title": "[Spooler] Add maxInflightPublishes variable", "pr_createdAt": "2020-11-24T20:38:26Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDQ2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529864466", "bodyText": "why use getNow what if it isn't complete, or what if it completes with an error 1 millisecond later?", "author": "MikeDombo", "createdAt": "2020-11-24T20:40:54Z", "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -99,13 +98,11 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                         .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n                 CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n+                // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.get(2, TimeUnit.SECONDS);\n-                } catch (TimeoutException | InterruptedException ignored) {\n-                    // If it times out or we're interrupted, then just return the positive response\n-                    // it is most likely in the spooler since it didn't fail immediately.\n-                } catch (ExecutionException e) {\n-                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(null);", "originalCommit": "c8fb7579f8f6273481e548958c7b1446c48176cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MDI4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529880287", "bodyText": "MqttProxy should not wait for the future to complete. It only needs to know if the message was unable to be spooled, and if this happens it will be completed exceptionally before returning.", "author": "jbutler", "createdAt": "2020-11-24T21:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fcdf1c562505726738a956a7d6ce1dee86acc7a3", "chunk": "diff --git a/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java b/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java\nindex 4e201320ba..5b608a0889 100644\n--- a/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java\n+++ b/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java\n\n@@ -100,9 +101,9 @@ public class MqttProxyIPCAgent {\n \n                 // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.getNow(null);\n-                } catch (Exception e) {\n-                    LOGGER.atWarn().kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(0);\n+                } catch (CompletionException e) {\n+                    LOGGER.atWarn().cause(e.getCause()).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n                             .log(\"Unable to spool the publish request\");\n                     throw new ServiceError(String.format(\"Publish to topic %s failed with error %s\", topic, e));\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDY0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529864640", "bodyText": "include the exception in the log?", "author": "MikeDombo", "createdAt": "2020-11-24T20:41:14Z", "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -99,13 +98,11 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                         .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n                 CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n+                // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.get(2, TimeUnit.SECONDS);\n-                } catch (TimeoutException | InterruptedException ignored) {\n-                    // If it times out or we're interrupted, then just return the positive response\n-                    // it is most likely in the spooler since it didn't fail immediately.\n-                } catch (ExecutionException e) {\n-                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(null);\n+                } catch (Exception e) {\n+                    LOGGER.atWarn().kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)", "originalCommit": "c8fb7579f8f6273481e548958c7b1446c48176cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcdf1c562505726738a956a7d6ce1dee86acc7a3", "chunk": "diff --git a/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java b/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java\nindex 4e201320ba..5b608a0889 100644\n--- a/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java\n+++ b/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java\n\n@@ -100,9 +101,9 @@ public class MqttProxyIPCAgent {\n \n                 // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.getNow(null);\n-                } catch (Exception e) {\n-                    LOGGER.atWarn().kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(0);\n+                } catch (CompletionException e) {\n+                    LOGGER.atWarn().cause(e.getCause()).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n                             .log(\"Unable to spool the publish request\");\n                     throw new ServiceError(String.format(\"Publish to topic %s failed with error %s\", topic, e));\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDg2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529864868", "bodyText": "inflight or in flight? If 2 words, then capitalize it as InFlight", "author": "MikeDombo", "createdAt": "2020-11-24T20:41:39Z", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -75,6 +76,8 @@\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";", "originalCommit": "c8fb7579f8f6273481e548958c7b1446c48176cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MTM3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529881371", "bodyText": "Done", "author": "jbutler", "createdAt": "2020-11-24T21:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "fcdf1c562505726738a956a7d6ce1dee86acc7a3", "chunk": "diff --git a/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java b/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\nindex ef1b83b691..f186fee2be 100644\n--- a/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\n+++ b/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\n\n@@ -76,7 +76,7 @@ public class MqttClient implements Closeable {\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n-    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInFlightPublishes\";\n     static final int DEFAULT_MAX_IN_FLIGHT_PUBLISHES = 1;\n     public static final int MAX_SUBSCRIPTIONS_PER_CONNECTION = 50;\n     public static final String CLIENT_ID_KEY = \"clientId\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTAyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529865021", "bodyText": "default can probably be a handful, maybe 4 or so?", "author": "MikeDombo", "createdAt": "2020-11-24T20:41:59Z", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -75,6 +76,8 @@\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";\n+    static final int DEFAULT_MAX_IN_FLIGHT_PUBLISHES = 1;", "originalCommit": "c8fb7579f8f6273481e548958c7b1446c48176cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjEzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529882130", "bodyText": "Thoughts on this @fengwa-aws ?", "author": "jbutler", "createdAt": "2020-11-24T21:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMTM5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r530601398", "bodyText": "I don't have a strong opinion on this. If there is little down side, we can make the default to 4 or 5.", "author": "fengwang666", "createdAt": "2020-11-25T19:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyMzk2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r533123968", "bodyText": "Bumped to 5", "author": "jbutler", "createdAt": "2020-12-01T07:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fcdf1c562505726738a956a7d6ce1dee86acc7a3", "chunk": "diff --git a/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java b/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\nindex ef1b83b691..f186fee2be 100644\n--- a/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\n+++ b/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\n\n@@ -76,7 +76,7 @@ public class MqttClient implements Closeable {\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n-    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInFlightPublishes\";\n     static final int DEFAULT_MAX_IN_FLIGHT_PUBLISHES = 1;\n     public static final int MAX_SUBSCRIPTIONS_PER_CONNECTION = 50;\n     public static final String CLIENT_ID_KEY = \"clientId\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTI0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529865242", "bodyText": "node might be null", "author": "MikeDombo", "createdAt": "2020-11-24T20:42:23Z", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -197,6 +201,12 @@ protected MqttClient(DeviceConfiguration deviceConfiguration,\n         mqttTopics = this.deviceConfiguration.getMQTTNamespace();\n         this.builderProvider = builderProvider;\n \n+        mqttTopics.lookup(MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY)\n+                .dflt(DEFAULT_MAX_IN_FLIGHT_PUBLISHES)\n+                .subscribe((what, node) -> {", "originalCommit": "c8fb7579f8f6273481e548958c7b1446c48176cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcdf1c562505726738a956a7d6ce1dee86acc7a3", "chunk": "diff --git a/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java b/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\nindex ef1b83b691..f186fee2be 100644\n--- a/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\n+++ b/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\n\n@@ -204,8 +204,14 @@ public class MqttClient implements Closeable {\n         mqttTopics.lookup(MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY)\n                 .dflt(DEFAULT_MAX_IN_FLIGHT_PUBLISHES)\n                 .subscribe((what, node) -> {\n-                    logger.atInfo().kv(\"value\", Coerce.toInt(node)).log(\"updating in flight publishes key\");\n-                    maxInflightPublishes = Coerce.toInt(node);\n+                    if (node == null) {\n+                        maxInFlightPublishes = DEFAULT_MAX_IN_FLIGHT_PUBLISHES;\n+                        logger.atWarn().kv(\"value\", maxInFlightPublishes)\n+                                .log(\"maxInFlightPublishes key is null, using default value\");\n+                    } else {\n+                        maxInFlightPublishes = Coerce.toInt(node);\n+                        logger.atInfo().kv(\"value\", maxInFlightPublishes).log(\"updating maxInFlightPublishes\");\n+                    }\n                 });\n         eventLoopGroup = new EventLoopGroup(Coerce.toInt(mqttTopics.findOrDefault(1, MQTT_THREAD_POOL_SIZE_KEY)));\n         hostResolver = new HostResolver(eventLoopGroup);\n"}}, {"oid": "fcdf1c562505726738a956a7d6ce1dee86acc7a3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fcdf1c562505726738a956a7d6ce1dee86acc7a3", "message": "Address PR feedback", "committedDate": "2020-11-25T00:39:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0MDgzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r530540832", "bodyText": "Is it possible to add a DEBUG level of log with Qos and Topic if the message has been set out successful? It may be helpful for debugging,.", "author": "awszztt", "createdAt": "2020-11-25T17:31:56Z", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -432,17 +448,22 @@ protected void spoolTask() {\n \n                 long finalId = id;\n \n-                // TODO: Revisit later: currently only 1 message got sent each time.\n-                // Should make the sending in more efficient way.\n-                getConnection(false).publish(new MqttMessage(request.getTopic(),request.getPayload()),\n-                        request.getQos(), request.isRetain()).whenComplete((packetId, throwable) -> {\n+                MqttMessage m = new MqttMessage(request.getTopic(), request.getPayload());\n+                publishRequests.add(getConnection(false).publish(m, request.getQos(), request.isRetain())\n+                                .whenComplete((packetId, throwable) -> {\n                     if (throwable == null) {\n                         spool.removeMessageById(finalId);", "originalCommit": "fcdf1c562505726738a956a7d6ce1dee86acc7a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be5f5bdb8237055be7802f78d07e8cea300f3566", "chunk": "diff --git a/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java b/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\nindex f186fee2be..805f4f7ed6 100644\n--- a/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\n+++ b/src/main/java/com/aws/greengrass/mqttclient/MqttClient.java\n\n@@ -440,21 +440,22 @@ public class MqttClient implements Closeable {\n             getConnection(false).connect().get();\n             List<CompletableFuture<?>> publishRequests = new ArrayList<>();\n             while (!Thread.currentThread().isInterrupted() && mqttOnline.get() && spool.getCurrentMessageCount() > 0) {\n-                long id = spool.popId();\n+                final long id = spool.popId();\n                 PublishRequest request = spool.getMessageById(id);\n                 if (request == null) {\n                     continue;\n                 }\n \n-                long finalId = id;\n-\n                 MqttMessage m = new MqttMessage(request.getTopic(), request.getPayload());\n                 publishRequests.add(getConnection(false).publish(m, request.getQos(), request.isRetain())\n                                 .whenComplete((packetId, throwable) -> {\n+                    // packetId is the SDK assigned ID. Ignore this and instead use the spooler ID\n                     if (throwable == null) {\n-                        spool.removeMessageById(finalId);\n+                        spool.removeMessageById(id);\n+                        logger.atDebug().kv(\"id\", id).kv(\"topic\", request.getTopic())\n+                            .log(\"Successfully published message\");\n                     } else {\n-                        spool.addId(finalId);\n+                        spool.addId(id);\n                         logger.atError().log(\"Failed to publish the message via Spooler\", throwable);\n                     }\n                 }));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNTYwNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r530605604", "bodyText": "In the publish method, we need distinguish whether the future is completed exceptionally due to the message being drop because of offline or a real issue in the spooler. If the former, then we should log at DEBUG; if the latter, then we should logger at ERROR. Treating them the same as WARN will create too many logs for the message drop due to offline case.", "author": "fengwang666", "createdAt": "2020-11-25T19:42:03Z", "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -99,13 +99,11 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                         .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n                 CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n+                // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.get(2, TimeUnit.SECONDS);\n-                } catch (TimeoutException | InterruptedException ignored) {\n-                    // If it times out or we're interrupted, then just return the positive response\n-                    // it is most likely in the spooler since it didn't fail immediately.\n-                } catch (ExecutionException e) {\n-                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(0);\n+                } catch (CompletionException e) {\n+                    LOGGER.atWarn().cause(e.getCause()).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)", "originalCommit": "fcdf1c562505726738a956a7d6ce1dee86acc7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNTY4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r533125680", "bodyText": "Currently there aren't really error scenarios. Either the spool is full or Greengrass is shutting down. But I agree, we'll need this distinction.\nFor now, I'm removing logging here and just throwing the exception back to the caller. The publish method logs a couple different debug level logs, depending on what happened (spool full vs device offline and qos 0 publish). We can clean this up further after on disk spool support is added and there are more error scenarios.", "author": "jbutler", "createdAt": "2020-12-01T07:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNTYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "be5f5bdb8237055be7802f78d07e8cea300f3566", "chunk": "diff --git a/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java b/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java\nindex 5b608a0889..62b09e49d3 100644\n--- a/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java\n+++ b/src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java\n\n@@ -85,31 +85,28 @@ public class MqttProxyIPCAgent {\n         @SuppressWarnings(\"PMD.PreserveStackTrace\")\n         @Override\n         public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n-            return translateExceptions(() -> {\n-                String topic = request.getTopicName();\n+            String topic = request.getTopicName();\n \n-                try {\n-                    doAuthorization(this.getOperationModelContext().getOperationName(), serviceName, topic);\n-                } catch (AuthorizationException e) {\n-                    LOGGER.atError().cause(e).log();\n-                    throw new UnauthorizedError(String.format(\"Authorization failed with error %s\", e));\n-                }\n+            try {\n+                doAuthorization(this.getOperationModelContext().getOperationName(), serviceName, topic);\n+            } catch (AuthorizationException e) {\n+                LOGGER.atError().cause(e).log();\n+                throw new UnauthorizedError(String.format(\"Authorization failed with error %s\", e));\n+            }\n \n-                PublishRequest publishRequest = PublishRequest.builder().payload(request.getPayload()).topic(topic)\n-                        .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n-                CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n+            PublishRequest publishRequest = PublishRequest.builder().payload(request.getPayload()).topic(topic)\n+                    .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n+            CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n-                // If the future is completed exceptionally then the MqttClient was unable to spool the request\n-                try {\n-                    future.getNow(0);\n-                } catch (CompletionException e) {\n-                    LOGGER.atWarn().cause(e.getCause()).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n-                            .log(\"Unable to spool the publish request\");\n-                    throw new ServiceError(String.format(\"Publish to topic %s failed with error %s\", topic, e));\n-                }\n+            // If the future is completed exceptionally then the MqttClient was unable to spool the request\n+            try {\n+                future.getNow(0);\n+            } catch (CompletionException e) {\n+                throw new ServiceError(String.format(\"Publish to topic %s failed: %s\", topic,\n+                        e.getCause().getMessage()));\n+            }\n \n-                return new PublishToIoTCoreResponse();\n-            });\n+            return new PublishToIoTCoreResponse();\n         }\n \n         @Override\n"}}, {"oid": "be5f5bdb8237055be7802f78d07e8cea300f3566", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/be5f5bdb8237055be7802f78d07e8cea300f3566", "message": "Improve logging", "committedDate": "2020-12-01T07:30:24Z", "type": "forcePushed"}, {"oid": "fe4145cea023643fbb8092c93dd15f372cd37567", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe4145cea023643fbb8092c93dd15f372cd37567", "message": "Improve logging", "committedDate": "2020-12-01T17:45:16Z", "type": "forcePushed"}, {"oid": "d333b985b984561e34f25f41d7836da8947aa27b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d333b985b984561e34f25f41d7836da8947aa27b", "message": "[Spooler] Add maxInflightPublishes variable", "committedDate": "2020-12-03T00:58:51Z", "type": "commit"}, {"oid": "7119666db6a552fa70ae02d60b30bd1387c7a9e1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7119666db6a552fa70ae02d60b30bd1387c7a9e1", "message": "Block if in flight publishes >= maxInflightPublishes", "committedDate": "2020-12-03T00:58:51Z", "type": "commit"}, {"oid": "fcaa48ee537f2847d7bdb0a2c3916585aca6fe56", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fcaa48ee537f2847d7bdb0a2c3916585aca6fe56", "message": "Address PR feedback", "committedDate": "2020-12-03T00:58:51Z", "type": "commit"}, {"oid": "a23eb63eb4c887c081095342ae3409fbaed4ddad", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a23eb63eb4c887c081095342ae3409fbaed4ddad", "message": "Default max in flight publishes to 5", "committedDate": "2020-12-03T00:58:51Z", "type": "commit"}, {"oid": "0466e981d95c27d8463ddd20f5ef8a3999873865", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0466e981d95c27d8463ddd20f5ef8a3999873865", "message": "MQTT IPC: Do not assert on exception type", "committedDate": "2020-12-03T00:58:51Z", "type": "commit"}, {"oid": "b73022ec17e8f64eae1a06a819cb3e69771ede74", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b73022ec17e8f64eae1a06a819cb3e69771ede74", "message": "Improve logging", "committedDate": "2020-12-03T00:58:51Z", "type": "commit"}, {"oid": "b73022ec17e8f64eae1a06a819cb3e69771ede74", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b73022ec17e8f64eae1a06a819cb3e69771ede74", "message": "Improve logging", "committedDate": "2020-12-03T00:58:51Z", "type": "forcePushed"}, {"oid": "84871f38394d4aebbce94275d6d7e21138965649", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/84871f38394d4aebbce94275d6d7e21138965649", "message": "Update spool full exception string", "committedDate": "2020-12-03T01:44:27Z", "type": "commit"}, {"oid": "59f297affc6757fd2961c1c268ca546383856039", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/59f297affc6757fd2961c1c268ca546383856039", "message": "Merge branch 'master' into spooler-optimization", "committedDate": "2020-12-03T16:47:32Z", "type": "commit"}, {"oid": "e18e674d1b10f75c9ac5e89939dc0b4800c78859", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e18e674d1b10f75c9ac5e89939dc0b4800c78859", "message": "Merge branch 'master' into spooler-optimization", "committedDate": "2020-12-04T01:05:41Z", "type": "commit"}, {"oid": "1f4c9598d617bc4e73b08a5dbe46249a51a458aa", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1f4c9598d617bc4e73b08a5dbe46249a51a458aa", "message": "Merge branch 'master' into spooler-optimization", "committedDate": "2020-12-04T01:43:55Z", "type": "commit"}, {"oid": "293613024a985d06dd2be3c40f93cd031c21d7e9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/293613024a985d06dd2be3c40f93cd031c21d7e9", "message": "Merge branch 'master' into spooler-optimization", "committedDate": "2020-12-04T04:13:33Z", "type": "commit"}]}