{"pr_number": 131, "pr_title": "Switch lifecycle thread to ThreadPool", "pr_createdAt": "2020-03-24T17:04:58Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjY5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397506695", "bodyText": "NIT: if not too much change, can you update the function name to outputString() ?", "author": "ShirleyZheng92", "createdAt": "2020-03-24T22:45:09Z", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -344,15 +348,16 @@ private void exec() {\n      * Get the stdout and stderr output as a string.\n      *\n      * @return String of output.\n+     * @throws InterruptedException if thread is interrupted while executing\n      */\n-    public String asString() {\n+    public String asString() throws InterruptedException {", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODE0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397518141", "bodyText": "Ok", "author": "MikeDombo", "createdAt": "2020-03-24T23:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/util/Exec.java b/src/main/java/com/aws/iot/evergreen/util/Exec.java\nindex 7fd9a76e..44830e27 100644\n--- a/src/main/java/com/aws/iot/evergreen/util/Exec.java\n+++ b/src/main/java/com/aws/iot/evergreen/util/Exec.java\n\n@@ -350,7 +353,7 @@ public class Exec implements Closeable {\n      * @return String of output.\n      * @throws InterruptedException if thread is interrupted while executing\n      */\n-    public String asString() throws InterruptedException {\n+    public String execAndGetStringOutput() throws InterruptedException {\n         StringBuilder sb = new StringBuilder();\n         Consumer<CharSequence> f = sb::append;\n         withOut(f).withErr(f).exec();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzM5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397507391", "bodyText": "Why InterruptedException can be throw here?", "author": "ShirleyZheng92", "createdAt": "2020-03-24T22:47:00Z", "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -46,27 +46,31 @@\n         if (Files.exists(Paths.get(\"/usr/bin/yum\"))) {\n             ranks.put(\"fedora\", 11);\n         }\n-        String sysver = Exec.sh(\"uname -a\").toLowerCase();\n-        if (sysver.contains(\"ubuntu\")) {\n-            ranks.put(\"ubuntu\", 20);\n-        }\n-        if (sysver.contains(\"darwin\")) {\n-            ranks.put(\"macos\", 20);\n-        }\n-        if (sysver.contains(\"raspbian\")) {\n-            ranks.put(\"raspbian\", 22);\n-        }\n-        if (sysver.contains(\"qnx\")) {\n-            ranks.put(\"qnx\", 22);\n-        }\n-        if (sysver.contains(\"cygwin\")) {\n-            ranks.put(\"cygwin\", 22);\n-        }\n-        if (sysver.contains(\"freebsd\")) {\n-            ranks.put(\"freebsd\", 22);\n-        }\n-        if (sysver.contains(\"solaris\") || sysver.contains(\"sunos\")) {\n-            ranks.put(\"solaris\", 22);\n+        try {\n+            String sysver = Exec.sh(\"uname -a\").toLowerCase();\n+            if (sysver.contains(\"ubuntu\")) {\n+                ranks.put(\"ubuntu\", 20);\n+            }\n+            if (sysver.contains(\"darwin\")) {\n+                ranks.put(\"macos\", 20);\n+            }\n+            if (sysver.contains(\"raspbian\")) {\n+                ranks.put(\"raspbian\", 22);\n+            }\n+            if (sysver.contains(\"qnx\")) {\n+                ranks.put(\"qnx\", 22);\n+            }\n+            if (sysver.contains(\"cygwin\")) {\n+                ranks.put(\"cygwin\", 22);\n+            }\n+            if (sysver.contains(\"freebsd\")) {\n+                ranks.put(\"freebsd\", 22);\n+            }\n+            if (sysver.contains(\"solaris\") || sysver.contains(\"sunos\")) {\n+                ranks.put(\"solaris\", 22);\n+            }\n+        } catch (InterruptedException e) {", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODEwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397518106", "bodyText": "Exec can throw.", "author": "MikeDombo", "createdAt": "2020-03-24T23:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java b/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\nindex 25c2322a..218f1ada 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\n\n@@ -70,12 +74,12 @@ public class PlatformResolver {\n                 ranks.put(\"solaris\", 22);\n             }\n         } catch (InterruptedException e) {\n-            e.printStackTrace(System.err);\n+            logger.atError().log(\"Interrupted while running uname -a\");\n         }\n         try {\n             ranks.put(InetAddress.getLocalHost().getHostName(), 99);\n         } catch (UnknownHostException ex) {\n-            ex.printStackTrace();\n+            logger.atError().log(\"Error getting hostname\", ex);\n         }\n \n         return ranks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzc2Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397507763", "bodyText": "Can we wrap the try catch around only this line?", "author": "ShirleyZheng92", "createdAt": "2020-03-24T22:47:52Z", "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -46,27 +46,31 @@\n         if (Files.exists(Paths.get(\"/usr/bin/yum\"))) {\n             ranks.put(\"fedora\", 11);\n         }\n-        String sysver = Exec.sh(\"uname -a\").toLowerCase();\n-        if (sysver.contains(\"ubuntu\")) {\n-            ranks.put(\"ubuntu\", 20);\n-        }\n-        if (sysver.contains(\"darwin\")) {\n-            ranks.put(\"macos\", 20);\n-        }\n-        if (sysver.contains(\"raspbian\")) {\n-            ranks.put(\"raspbian\", 22);\n-        }\n-        if (sysver.contains(\"qnx\")) {\n-            ranks.put(\"qnx\", 22);\n-        }\n-        if (sysver.contains(\"cygwin\")) {\n-            ranks.put(\"cygwin\", 22);\n-        }\n-        if (sysver.contains(\"freebsd\")) {\n-            ranks.put(\"freebsd\", 22);\n-        }\n-        if (sysver.contains(\"solaris\") || sysver.contains(\"sunos\")) {\n-            ranks.put(\"solaris\", 22);\n+        try {\n+            String sysver = Exec.sh(\"uname -a\").toLowerCase();", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODAzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397518033", "bodyText": "The remaining code requires the variable so it doesn't make sense to do it otherwise.", "author": "MikeDombo", "createdAt": "2020-03-24T23:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java b/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\nindex 25c2322a..218f1ada 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\n\n@@ -70,12 +74,12 @@ public class PlatformResolver {\n                 ranks.put(\"solaris\", 22);\n             }\n         } catch (InterruptedException e) {\n-            e.printStackTrace(System.err);\n+            logger.atError().log(\"Interrupted while running uname -a\");\n         }\n         try {\n             ranks.put(InetAddress.getLocalHost().getHostName(), 99);\n         } catch (UnknownHostException ex) {\n-            ex.printStackTrace();\n+            logger.atError().log(\"Error getting hostname\", ex);\n         }\n \n         return ranks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTQxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397515413", "bodyText": "why not log this? whats the advantage of sending this to sys.err than logging at error.", "author": "fahadmohammed01", "createdAt": "2020-03-24T23:08:15Z", "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -46,27 +46,31 @@\n         if (Files.exists(Paths.get(\"/usr/bin/yum\"))) {\n             ranks.put(\"fedora\", 11);\n         }\n-        String sysver = Exec.sh(\"uname -a\").toLowerCase();\n-        if (sysver.contains(\"ubuntu\")) {\n-            ranks.put(\"ubuntu\", 20);\n-        }\n-        if (sysver.contains(\"darwin\")) {\n-            ranks.put(\"macos\", 20);\n-        }\n-        if (sysver.contains(\"raspbian\")) {\n-            ranks.put(\"raspbian\", 22);\n-        }\n-        if (sysver.contains(\"qnx\")) {\n-            ranks.put(\"qnx\", 22);\n-        }\n-        if (sysver.contains(\"cygwin\")) {\n-            ranks.put(\"cygwin\", 22);\n-        }\n-        if (sysver.contains(\"freebsd\")) {\n-            ranks.put(\"freebsd\", 22);\n-        }\n-        if (sysver.contains(\"solaris\") || sysver.contains(\"sunos\")) {\n-            ranks.put(\"solaris\", 22);\n+        try {\n+            String sysver = Exec.sh(\"uname -a\").toLowerCase();\n+            if (sysver.contains(\"ubuntu\")) {\n+                ranks.put(\"ubuntu\", 20);\n+            }\n+            if (sysver.contains(\"darwin\")) {\n+                ranks.put(\"macos\", 20);\n+            }\n+            if (sysver.contains(\"raspbian\")) {\n+                ranks.put(\"raspbian\", 22);\n+            }\n+            if (sysver.contains(\"qnx\")) {\n+                ranks.put(\"qnx\", 22);\n+            }\n+            if (sysver.contains(\"cygwin\")) {\n+                ranks.put(\"cygwin\", 22);\n+            }\n+            if (sysver.contains(\"freebsd\")) {\n+                ranks.put(\"freebsd\", 22);\n+            }\n+            if (sysver.contains(\"solaris\") || sysver.contains(\"sunos\")) {\n+                ranks.put(\"solaris\", 22);\n+            }\n+        } catch (InterruptedException e) {\n+            e.printStackTrace(System.err);", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNzg3Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397517872", "bodyText": "This is a static block which runs immediately on import, so the logger won't necessarily be setup. I will change it to use the logger, but it may break when the logger starts reading from config.", "author": "MikeDombo", "createdAt": "2020-03-24T23:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java b/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\nindex 25c2322a..218f1ada 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\n\n@@ -70,12 +74,12 @@ public class PlatformResolver {\n                 ranks.put(\"solaris\", 22);\n             }\n         } catch (InterruptedException e) {\n-            e.printStackTrace(System.err);\n+            logger.atError().log(\"Interrupted while running uname -a\");\n         }\n         try {\n             ranks.put(InetAddress.getLocalHost().getHostName(), 99);\n         } catch (UnknownHostException ex) {\n-            ex.printStackTrace();\n+            logger.atError().log(\"Error getting hostname\", ex);\n         }\n \n         return ranks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTkxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397535913", "bodyText": "What's the advantage of using thread pool instead of Thread here? These are long running threads that have the same lifetime as the services themselves. It doesn't seem like we can save any thread.", "author": "fengwang666", "createdAt": "2020-03-25T00:08:32Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -807,8 +798,7 @@ public String getName() {\n     @Override\n     public void postInject() {\n         initDependenciesTopic();\n-        //TODO: Use better threadPool mechanism\n-        lifeCycleThread = new Thread(() -> {\n+        lifecycleFuture = context.get(ExecutorService.class).submit(() -> {", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MzM5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397543392", "bodyText": "No, we won't save any thread except perhaps when we add or remove a service then a thread can be reused.", "author": "MikeDombo", "createdAt": "2020-03-25T00:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "50d3074288a8f8323d008f3d3277305a3b722467", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 36aeaf00..ae155dc7 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -804,6 +833,11 @@ public class EvergreenService implements InjectionActions {\n                     startStateTransition();\n                     return;\n                 } catch (Throwable e) {\n+                    if (e instanceof InterruptedException) {\n+                        logger.atWarn().setEventType(\"service-state-transition-interrupted\")\n+                                .log(\"Service lifecycle thread interrupted. Thread will exit now\");\n+                        return;\n+                    }\n                     logger.atError().setEventType(\"service-state-transition-error\")\n                             .addKeyValue(\"currentState\", getState()).setCause(e).log();\n                     logger.atInfo().setEventType(\"service-state-transition-retry\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNjI4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397536282", "bodyText": "update java doc?", "author": "fengwang666", "createdAt": "2020-03-25T00:09:43Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -618,27 +616,22 @@ public boolean isErrored() {\n      * Called when this service is known to be needed to make sure that required\n      * additional software is installed.\n      */\n-    protected void install() {\n+    protected void install() throws InterruptedException {", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 36aeaf00..32d3a5b5 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -615,6 +615,8 @@ public class EvergreenService implements InjectionActions {\n     /**\n      * Called when this service is known to be needed to make sure that required\n      * additional software is installed.\n+     *\n+     * @throws InterruptedException if the install task was interrupted while running\n      */\n     protected void install() throws InterruptedException {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNjM0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397536342", "bodyText": "update doc, this is worth documenting", "author": "fengwang666", "createdAt": "2020-03-25T00:09:53Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -618,27 +616,22 @@ public boolean isErrored() {\n      * Called when this service is known to be needed to make sure that required\n      * additional software is installed.\n      */\n-    protected void install() {\n+    protected void install() throws InterruptedException {\n     }\n \n     /**\n      * Called when all dependencies are RUNNING. If there are no dependencies,\n      * it is called right after postInject.  The service doesn't transition to RUNNING\n      * until *after* this state is complete.\n      */\n-    protected void startup() {\n+    protected void startup() throws InterruptedException {", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 36aeaf00..32d3a5b5 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -615,6 +615,8 @@ public class EvergreenService implements InjectionActions {\n     /**\n      * Called when this service is known to be needed to make sure that required\n      * additional software is installed.\n+     *\n+     * @throws InterruptedException if the install task was interrupted while running\n      */\n     protected void install() throws InterruptedException {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNjU3Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397536572", "bodyText": "update doc to document the behavior", "author": "fengwang666", "createdAt": "2020-03-25T00:10:27Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -618,27 +616,22 @@ public boolean isErrored() {\n      * Called when this service is known to be needed to make sure that required\n      * additional software is installed.\n      */\n-    protected void install() {\n+    protected void install() throws InterruptedException {\n     }\n \n     /**\n      * Called when all dependencies are RUNNING. If there are no dependencies,\n      * it is called right after postInject.  The service doesn't transition to RUNNING\n      * until *after* this state is complete.\n      */\n-    protected void startup() {\n+    protected void startup() throws InterruptedException {\n         reportState(State.RUNNING);\n     }\n \n-    @Deprecated\n-    public void run() {\n-        reportState(State.FINISHED);\n-    }\n-\n     /**\n      * Called when the object's state leaves RUNNING.\n      */\n-    protected void shutdown() {\n+    protected void shutdown() throws InterruptedException {", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 36aeaf00..32d3a5b5 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -615,6 +615,8 @@ public class EvergreenService implements InjectionActions {\n     /**\n      * Called when this service is known to be needed to make sure that required\n      * additional software is installed.\n+     *\n+     * @throws InterruptedException if the install task was interrupted while running\n      */\n     protected void install() throws InterruptedException {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNzIyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397537224", "bodyText": "Add comment explaining why we populate up the InteruptedException.", "author": "fengwang666", "createdAt": "2020-03-25T00:12:42Z", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -329,11 +329,15 @@ private void exec() {\n                         (stderr != null ? stderr : stdout).accept(\"\\n[TIMEOUT after InterruptedException]\\n\");\n                         process.destroyForcibly();\n                     }\n+                    throw ie;\n                 }\n                 stderrc.join(5000);\n                 stdoutc.join(5000);\n             }\n         } catch (Throwable ex) {\n+            if (ex instanceof InterruptedException) {\n+                throw (InterruptedException) ex;", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/util/Exec.java b/src/main/java/com/aws/iot/evergreen/util/Exec.java\nindex 7fd9a76e..44830e27 100644\n--- a/src/main/java/com/aws/iot/evergreen/util/Exec.java\n+++ b/src/main/java/com/aws/iot/evergreen/util/Exec.java\n\n@@ -335,6 +335,9 @@ public class Exec implements Closeable {\n                 stdoutc.join(5000);\n             }\n         } catch (Throwable ex) {\n+            // If the throwable is InterruptedException, then the thread was interrupted\n+            // while we were executing. We rethrow the exception so that the caller knows\n+            // to be interrupted and stop processing so that the thread can shutdown gracefully\n             if (ex instanceof InterruptedException) {\n                 throw (InterruptedException) ex;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNzc0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397537741", "bodyText": "log here?", "author": "fengwang666", "createdAt": "2020-03-25T00:14:11Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -121,7 +120,12 @@ public void startup() {\n     @Override\n     public void shutdown() {\n         inShutdown = true;\n-        run(\"shutdown\", null);\n+        try {\n+            run(\"shutdown\", null);\n+        } catch (InterruptedException ex) {\n+            inShutdown = false;", "originalCommit": "4fb83d2a454e7eae4b0b9a4f97cd0b81194b6f8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\nindex 1c30e79f..439f0d1b 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java\n\n@@ -124,6 +124,7 @@ public class GenericExternalService extends EvergreenService {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n             inShutdown = false;\n+            logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n         Exec e = runScript;\n"}}, {"oid": "da30ed45e7d233280643db22f4ca8ea72eadff3d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/da30ed45e7d233280643db22f4ca8ea72eadff3d", "message": "Switch lifecycle thread to threadpool. Pass InterruptedException all the way up", "committedDate": "2020-03-25T01:38:15Z", "type": "forcePushed"}, {"oid": "961bd14402c6d63ffeaf318578f60bcbdbb1a7c2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/961bd14402c6d63ffeaf318578f60bcbdbb1a7c2", "message": "Switch lifecycle thread to threadpool. Pass InterruptedException all the way up", "committedDate": "2020-03-25T01:38:24Z", "type": "commit"}, {"oid": "961bd14402c6d63ffeaf318578f60bcbdbb1a7c2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/961bd14402c6d63ffeaf318578f60bcbdbb1a7c2", "message": "Switch lifecycle thread to threadpool. Pass InterruptedException all the way up", "committedDate": "2020-03-25T01:38:24Z", "type": "forcePushed"}, {"oid": "50d3074288a8f8323d008f3d3277305a3b722467", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/50d3074288a8f8323d008f3d3277305a3b722467", "message": "Handle interruption from service commands appropriately", "committedDate": "2020-03-25T03:23:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4OTc1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397589757", "bodyText": "NIT:\ntry {\n} catch(InterruptedException e) {\n  logger.Warn()\n} catch(Throwable t) {\n  reportError\n} finally {\n}", "author": "ShirleyZheng92", "createdAt": "2020-03-25T03:27:20Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -413,8 +411,13 @@ private void startStateTransition() throws InterruptedException {\n                         try {\n                             install();\n                         } catch (Throwable t) {\n-                            reportState(State.ERRORED);\n-                            logger.atError().setEventType(\"service-install-error\").setCause(t).log();\n+                            if (t instanceof InterruptedException) {\n+                                logger.atWarn(\"service-install-interrupted\")\n+                                        .log(\"Service interrupted while running install\");\n+                            } else {", "originalCommit": "50d3074288a8f8323d008f3d3277305a3b722467", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "068beaa915249c7554fb55b3950f3e6ba0c21bc3", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex ae155dc7..3b4daef3 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -410,14 +410,12 @@ public class EvergreenService implements InjectionActions {\n                     setBackingTask(() -> {\n                         try {\n                             install();\n+                        } catch (InterruptedException t) {\n+                            logger.atWarn(\"service-install-interrupted\")\n+                                    .log(\"Service interrupted while running install\");\n                         } catch (Throwable t) {\n-                            if (t instanceof InterruptedException) {\n-                                logger.atWarn(\"service-install-interrupted\")\n-                                        .log(\"Service interrupted while running install\");\n-                            } else {\n-                                reportState(State.ERRORED);\n-                                logger.atError().setEventType(\"service-install-error\").setCause(t).log();\n-                            }\n+                            reportState(State.ERRORED);\n+                            logger.atError().setEventType(\"service-install-error\").setCause(t).log();\n                         } finally {\n                             installLatch.countDown();\n                         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MDMzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/131#discussion_r397590330", "bodyText": "ditto", "author": "ShirleyZheng92", "createdAt": "2020-03-25T03:29:29Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -807,33 +827,35 @@ public String getName() {\n     @Override\n     public void postInject() {\n         initDependenciesTopic();\n-        //TODO: Use better threadPool mechanism\n-        lifeCycleThread = new Thread(() -> {\n+        lifecycleFuture = context.get(ExecutorService.class).submit(() -> {\n             while (!isClosed.get()) {\n                 try {\n                     startStateTransition();\n                     return;\n                 } catch (Throwable e) {\n+                    if (e instanceof InterruptedException) {\n+                        logger.atWarn().setEventType(\"service-state-transition-interrupted\")", "originalCommit": "50d3074288a8f8323d008f3d3277305a3b722467", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "068beaa915249c7554fb55b3950f3e6ba0c21bc3", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex ae155dc7..3b4daef3 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -832,12 +827,11 @@ public class EvergreenService implements InjectionActions {\n                 try {\n                     startStateTransition();\n                     return;\n+                } catch (InterruptedException i) {\n+                    logger.atWarn().setEventType(\"service-state-transition-interrupted\")\n+                            .log(\"Service lifecycle thread interrupted. Thread will exit now\");\n+                    return;\n                 } catch (Throwable e) {\n-                    if (e instanceof InterruptedException) {\n-                        logger.atWarn().setEventType(\"service-state-transition-interrupted\")\n-                                .log(\"Service lifecycle thread interrupted. Thread will exit now\");\n-                        return;\n-                    }\n                     logger.atError().setEventType(\"service-state-transition-error\")\n                             .addKeyValue(\"currentState\", getState()).setCause(e).log();\n                     logger.atInfo().setEventType(\"service-state-transition-retry\")\n"}}, {"oid": "068beaa915249c7554fb55b3950f3e6ba0c21bc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/068beaa915249c7554fb55b3950f3e6ba0c21bc3", "message": "Handle interruption from service commands appropriately", "committedDate": "2020-03-25T03:34:27Z", "type": "commit"}, {"oid": "068beaa915249c7554fb55b3950f3e6ba0c21bc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/068beaa915249c7554fb55b3950f3e6ba0c21bc3", "message": "Handle interruption from service commands appropriately", "committedDate": "2020-03-25T03:34:27Z", "type": "forcePushed"}]}