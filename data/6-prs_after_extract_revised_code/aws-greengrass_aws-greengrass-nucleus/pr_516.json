{"pr_number": 516, "pr_title": "Exec commands with user/group", "pr_createdAt": "2020-10-12T16:20:20Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516", "timeline": [{"oid": "cb917b2de193fc181e7eacd86aad9806d53b1450", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cb917b2de193fc181e7eacd86aad9806d53b1450", "message": "Add Exec support for user and group\n\nRefactor Exec to support command decorators which can wrap a command with another command to execute a shell or change user/group", "committedDate": "2020-10-12T16:07:22Z", "type": "commit"}, {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/56b35da521480ff96519e0228ea79479bb32d0d8", "message": "clean up newlines", "committedDate": "2020-10-12T16:16:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzc1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503403757", "bodyText": "does it need a new decorator each time?", "author": "MikeDombo", "createdAt": "2020-10-12T16:22:57Z", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();", "originalCommit": "56b35da521480ff96519e0228ea79479bb32d0d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwODA1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503408051", "bodyText": "your right - this could be a single instance\nfor the UserDecorate is sets a user/group which I'm not sure you would want to reuse (although we could clear out the fields after calling decorate)", "author": "rbattle", "createdAt": "2020-10-12T16:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwOTc0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503409749", "bodyText": "For user it would not be threadsafe in that case, right?", "author": "MikeDombo", "createdAt": "2020-10-12T16:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "74849463972d77bbbed689eb4e24698e1a3534f6", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\nindex 0e9ad4febe..3c334174e1 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\n\n@@ -161,6 +162,15 @@ public class UnixPlatform extends Platform {\n             return this;\n         }\n     }\n+  \n+    @Override\n+    public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n+        Files.setPosixFilePermissions(path, permission.toPosixFilePermissions());\n+        if (permission.getOwnerUser() != null) {\n+            Files.setOwner(path, path.getFileSystem().getUserPrincipalLookupService()\n+                    .lookupPrincipalByName(permission.getOwnerUser()));\n+        }\n+    }\n \n     List<Integer> getChildPids(Process process) throws IOException, InterruptedException {\n         PidProcess pp = Processes.newPidProcess(process);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503404912", "bodyText": "why do we need this? this will do sudo -E -u <user> -- <command>? Why is -- needed?", "author": "MikeDombo", "createdAt": "2020-10-12T16:25:10Z", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;\n+        private String group;\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            // do nothing if no user set\n+            if (user == null) {\n+                return command;\n+            }\n+            int size = (group == null) ? 5 : 7;\n+            String[] ret = new String[command.length + size];\n+            ret[0] = \"sudo\";\n+            ret[1] = \"-E\";  // pass env vars through\n+            ret[2] = \"-u\";\n+            if (user.chars().allMatch(Character::isDigit)) {\n+                user = \"\\\\#\" + user;\n+            }\n+            ret[3] = user;\n+            if (group != null) {\n+                ret[4] = \"-g\";\n+                if (group.chars().allMatch(Character::isDigit)) {\n+                    group = \"\\\\#\" + group;\n+                }\n+                ret[5] = group;\n+            }\n+            ret[size - 1] = \"--\";", "originalCommit": "56b35da521480ff96519e0228ea79479bb32d0d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNzA1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503407053", "bodyText": "the \"--\" is to tell sudo to stop parsing args. Otherwise your command could be something like -u root rm -rf /", "author": "rbattle", "createdAt": "2020-10-12T16:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyMDE2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503420168", "bodyText": "However if user decorator is null then it's not parsed. Can user provide '-u root -rm -rf / ' in command and not setting withUser?", "author": "ShirleyZheng92", "createdAt": "2020-10-12T16:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyODU1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503428558", "bodyText": "If you don't set the withUser or withUserGroup on Exec, then the userDecorator is null and it doesn't get applied.\nIf you have a null user, then it won't decorate the command. It returns the command un-decorated.\nIn both these cases, no sudo is added. In your example, it would execute the command -u root rm -rf / and fail because -u is not a valid command.\nIf they are executing it in the shell, the shell decorate would prefix sh -c and it would execute sh -c -u root rm -rf / and fail for the same reason", "author": "rbattle", "createdAt": "2020-10-12T17:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NTQ1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503475454", "bodyText": "So I guess, if user type in 'sudo -u root rm -rf' it will be translated to 'sh -c sudo rm ...' and failed with 'sudo not found' error?", "author": "ShirleyZheng92", "createdAt": "2020-10-12T18:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMjExNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503512116", "bodyText": "You wouldn't get a 'sudo not found' error, unless I misunderstand you.\nA user can create a recipe and put sudo -u root rm -rf / as the command. There is nothing stopping them from doing that.\nThey can add that as a lifecycle step for a component. If a user is set for the component (or if they have configured a default runas user), then it would translate to:\nsudo -u <user> -- sh -c sudo -u root rm -rf / which should fail unless the user has a passwordless sudo access\nIf no user is set, and there is no default, then it would just run as sh -c sudo -u root rm -rf /\nIf the user running the kernel is root, or if the user running the kernel has sudo priviliges, this would execute and do bad things.\nThere isn't much we can do to stop that.\nIf the user actually wants to run the lifecycle step as root, there is a separate RequiresPrivilege flag which they can add to indicate whether the step needs to be executed as root (so they don't need to prefix it themselves with sudo -u root and we avoid the sudo -u <user> -- sudo -u root problem)", "author": "rbattle", "createdAt": "2020-10-12T20:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzNDk5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504334993", "bodyText": "", "author": "philcali", "createdAt": "2020-10-14T00:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "74849463972d77bbbed689eb4e24698e1a3534f6", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\nindex 0e9ad4febe..3c334174e1 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\n\n@@ -161,6 +162,15 @@ public class UnixPlatform extends Platform {\n             return this;\n         }\n     }\n+  \n+    @Override\n+    public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n+        Files.setPosixFilePermissions(path, permission.toPosixFilePermissions());\n+        if (permission.getOwnerUser() != null) {\n+            Files.setOwner(path, path.getFileSystem().getUserPrincipalLookupService()\n+                    .lookupPrincipalByName(permission.getOwnerUser()));\n+        }\n+    }\n \n     List<Integer> getChildPids(Process process) throws IOException, InterruptedException {\n         PidProcess pp = Processes.newPidProcess(process);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwOTE4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503409184", "bodyText": "Does this including UID?", "author": "ShirleyZheng92", "createdAt": "2020-10-12T16:33:28Z", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;", "originalCommit": "56b35da521480ff96519e0228ea79479bb32d0d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwOTU5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503409591", "bodyText": "yeah - you'll see it checks if the string is numeric and appends \"\\#\" to the beginning of it - which is what sudo expects for uid/gid", "author": "rbattle", "createdAt": "2020-10-12T16:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwOTE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "74849463972d77bbbed689eb4e24698e1a3534f6", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\nindex 0e9ad4febe..3c334174e1 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\n\n@@ -161,6 +162,15 @@ public class UnixPlatform extends Platform {\n             return this;\n         }\n     }\n+  \n+    @Override\n+    public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n+        Files.setPosixFilePermissions(path, permission.toPosixFilePermissions());\n+        if (permission.getOwnerUser() != null) {\n+            Files.setOwner(path, path.getFileSystem().getUserPrincipalLookupService()\n+                    .lookupPrincipalByName(permission.getOwnerUser()));\n+        }\n+    }\n \n     List<Integer> getChildPids(Process process) throws IOException, InterruptedException {\n         PidProcess pp = Processes.newPidProcess(process);\n"}}, {"oid": "3d1414645cf6ee7c87b4da63efd02a559c0c0aa8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3d1414645cf6ee7c87b4da63efd02a559c0c0aa8", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-12T17:13:46Z", "type": "commit"}, {"oid": "65d12ba2853cd4c3675ded0ff990486b6d068b1c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/65d12ba2853cd4c3675ded0ff990486b6d068b1c", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-12T20:41:40Z", "type": "commit"}, {"oid": "74849463972d77bbbed689eb4e24698e1a3534f6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/74849463972d77bbbed689eb4e24698e1a3534f6", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-13T16:38:47Z", "type": "commit"}, {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2", "message": "fix checkstyle", "committedDate": "2020-10-13T16:53:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODE5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504118199", "bodyText": "add GGExtension", "author": "MikeDombo", "createdAt": "2020-10-13T17:03:10Z", "path": "src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+\n+public class UnixPlatformTest {", "originalCommit": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNzUwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504127503", "bodyText": "To windows platform too", "author": "MikeDombo", "createdAt": "2020-10-13T17:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "acbeffc8264c468721c3b987cb6096564d0d91d7", "chunk": "diff --git a/src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java b/src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java\nindex dfb3cc93a6..e426486061 100644\n--- a/src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java\n+++ b/src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java\n\n@@ -5,13 +5,16 @@\n \n package com.aws.greengrass.util.platforms;\n \n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.arrayContaining;\n import static org.hamcrest.Matchers.is;\n \n-public class UnixPlatformTest {\n+@ExtendWith({GGExtension.class})\n+public class UnixPlatformTest   {\n \n     private static String[] command = {\"echo\", \"hello\", \"world\"};\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODczMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504118732", "bodyText": "why \"arrayContaining\"? Won't that mistakenly accept wrong answers if the decorator added some extra garbage?", "author": "MikeDombo", "createdAt": "2020-10-13T17:04:04Z", "path": "src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+\n+public class UnixPlatformTest {\n+\n+    private static String[] command = {\"echo\", \"hello\", \"world\"};\n+\n+    @Test\n+    public void GIVEN_no_user_and_no_group_WHEN_decorate_THEN_do_not_generate_sudo_with_user_and_group() {\n+        assertThat(new UnixPlatform.SudoDecorator().decorate(command),\n+                is(arrayContaining(command)));\n+    }\n+\n+    @Test\n+    public void GIVEN_user_and_group_WHEN_decorate_THEN_generate_sudo_with_user_and_group() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"foo\")\n+                        .withGroup(\"bar\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"foo\", \"-g\", \"bar\", \"--\", \"echo\", \"hello\", \"world\")));\n+    }\n+\n+    @Test\n+    public void GIVEN_numeric_user_and_group_WHEN_decorate_THEN_generate_sudo_with_prefix() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"100\")\n+                        .withGroup(\"200\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"\\\\#100\", \"-g\", \"\\\\#200\", \"--\", \"echo\", \"hello\", \"world\")));\n+    }\n+\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_sudo_without_group() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"foo\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"foo\", \"--\", \"echo\", \"hello\", \"world\")));", "originalCommit": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNjMwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504126306", "bodyText": "It's a poorly named matcher -\nFrom the javadoc:\n\nCreates a matcher for arrays that matches when each item in the examined array is logically equal to the corresponding item in the specified items. For a positive match, the examined array must be of the same length as the number of specified items.", "author": "rbattle", "createdAt": "2020-10-13T17:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNzQyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504127427", "bodyText": "Ok, great", "author": "MikeDombo", "createdAt": "2020-10-13T17:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODczMg=="}], "type": "inlineReview", "revised_code": {"commit": "acbeffc8264c468721c3b987cb6096564d0d91d7", "chunk": "diff --git a/src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java b/src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java\nindex dfb3cc93a6..e426486061 100644\n--- a/src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java\n+++ b/src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java\n\n@@ -5,13 +5,16 @@\n \n package com.aws.greengrass.util.platforms;\n \n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.arrayContaining;\n import static org.hamcrest.Matchers.is;\n \n-public class UnixPlatformTest {\n+@ExtendWith({GGExtension.class})\n+public class UnixPlatformTest   {\n \n     private static String[] command = {\"echo\", \"hello\", \"world\"};\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504119185", "bodyText": "why is this different from unix in that unix keeps all the arguments as separate entries? Why are they joined on \" \" on windows?", "author": "MikeDombo", "createdAt": "2020-10-13T17:04:48Z", "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {\n+\n+    @Test\n+    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"echo\", \"hello\")));\n+    }\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .withUser(\"foo@bar\")\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));", "originalCommit": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNzYwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504127608", "bodyText": "from looking at the info about the command,  windows is expecting a single string argument of the command to run, - whereas sudo will execute the command with multiple arguments after the \"--\"", "author": "rbattle", "createdAt": "2020-10-13T17:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyOTM3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504129373", "bodyText": "Have you actually tried it yet on windows? Can we get a test which actually verifies the functionality?", "author": "MikeDombo", "createdAt": "2020-10-13T17:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNjUxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504236514", "bodyText": "I have an integration test that runs on linux - I can add one for windows too - is it ok if that is in a followup?\nrunas on windows is going to require some work to get right - at least on the windows server I've tested on, you have to enter the password of the user you are switching to at least once (and then you can provide the /savecred option to reuse the saved credentials)\nIt requires the command to be a single string though:\nrunas /user:foo cmd /k echo hello will fail and print the runas help message\nrunas /user:foo \"cmd /k echo hello\" will open a command prompt and output \"hello\"", "author": "rbattle", "createdAt": "2020-10-13T20:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzczNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504237734", "bodyText": "OK we can deal with windows later. May want to create a backlog ticket", "author": "MikeDombo", "createdAt": "2020-10-13T20:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NTUzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504245539", "bodyText": "Windows doesn't allow user impersonation without credentials - we might need to do something like https://github.com/gfody/PowershellModules/tree/master/RunAs and require customers to store the password for the account they want to runas as a credential associated with the admin account\nI'm tempted to actually remove this as it's not going to work unless we have run runas /savecred on the box before hand (and the users password hasn't changed)", "author": "rbattle", "createdAt": "2020-10-13T20:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NjkwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504246909", "bodyText": "Even when running as the administrator it requires the password? If so, I think yeah we can't support it", "author": "MikeDombo", "createdAt": "2020-10-13T20:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1MjUwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504252501", "bodyText": "I've removed the Windows RunAs implementation for now - it is not going to work the way we need it to without some effort - this needs to be revisited for Windows support", "author": "rbattle", "createdAt": "2020-10-13T20:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "acbeffc8264c468721c3b987cb6096564d0d91d7", "chunk": "diff --git a/src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java b/src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java\nindex 826288e3c3..2b52703fa2 100644\n--- a/src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java\n+++ b/src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java\n\n@@ -5,30 +5,21 @@\n \n package com.aws.greengrass.util.platforms;\n \n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.arrayContaining;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@ExtendWith({GGExtension.class})\n public class WindowsPlatformTest {\n \n     @Test\n-    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n-        assertThat(new WindowsPlatform.RunAsDecorator()\n-                        .decorate(\"echo\", \"hello\"),\n-                is(arrayContaining(\"echo\", \"hello\")));\n-    }\n-    @Test\n-    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n-        assertThat(new WindowsPlatform.RunAsDecorator()\n-                        .withUser(\"foo@bar\")\n+    public void GIVEN_command_WHEN_decorate_THEN_is_decorated() {\n+        assertThat(new WindowsPlatform.CmdDecorator()\n                         .decorate(\"echo\", \"hello\"),\n-                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));\n-    }\n-\n-    @Test\n-    public void GIVEN_group_THEN_throws() {\n-        assertThrows(UnsupportedOperationException.class, () -> new WindowsPlatform.RunAsDecorator().withGroup(\"foo\"));\n+                is(arrayContaining(\"cmd.exe\", \"/C\", \"echo\", \"hello\")));\n     }\n }\n"}}, {"oid": "90985a15fefefffb6a643d84e83b3159c1f7c4bf", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/90985a15fefefffb6a643d84e83b3159c1f7c4bf", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-13T17:26:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MTAxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504241014", "bodyText": "needs GGExtension", "author": "MikeDombo", "createdAt": "2020-10-13T20:32:21Z", "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {", "originalCommit": "90985a15fefefffb6a643d84e83b3159c1f7c4bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acbeffc8264c468721c3b987cb6096564d0d91d7", "chunk": "diff --git a/src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java b/src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java\nindex 826288e3c3..2b52703fa2 100644\n--- a/src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java\n+++ b/src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java\n\n@@ -5,30 +5,21 @@\n \n package com.aws.greengrass.util.platforms;\n \n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.arrayContaining;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@ExtendWith({GGExtension.class})\n public class WindowsPlatformTest {\n \n     @Test\n-    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n-        assertThat(new WindowsPlatform.RunAsDecorator()\n-                        .decorate(\"echo\", \"hello\"),\n-                is(arrayContaining(\"echo\", \"hello\")));\n-    }\n-    @Test\n-    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n-        assertThat(new WindowsPlatform.RunAsDecorator()\n-                        .withUser(\"foo@bar\")\n+    public void GIVEN_command_WHEN_decorate_THEN_is_decorated() {\n+        assertThat(new WindowsPlatform.CmdDecorator()\n                         .decorate(\"echo\", \"hello\"),\n-                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));\n-    }\n-\n-    @Test\n-    public void GIVEN_group_THEN_throws() {\n-        assertThrows(UnsupportedOperationException.class, () -> new WindowsPlatform.RunAsDecorator().withGroup(\"foo\"));\n+                is(arrayContaining(\"cmd.exe\", \"/C\", \"echo\", \"hello\")));\n     }\n }\n"}}, {"oid": "acbeffc8264c468721c3b987cb6096564d0d91d7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/acbeffc8264c468721c3b987cb6096564d0d91d7", "message": "Remove Windows RunAs until further implementation can be sorted out. Add GGExtension", "committedDate": "2020-10-13T20:53:35Z", "type": "commit"}, {"oid": "8d46e0a66ef13b4f0d5e023401cdfdc1eceb67cd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8d46e0a66ef13b4f0d5e023401cdfdc1eceb67cd", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-13T22:11:46Z", "type": "commit"}, {"oid": "b17a5acead43b8b5caacc06f787157803aee135b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b17a5acead43b8b5caacc06f787157803aee135b", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-14T06:54:39Z", "type": "commit"}, {"oid": "9301c0cfdeb4aba2b3188779ad482dde5426dbab", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9301c0cfdeb4aba2b3188779ad482dde5426dbab", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-14T16:13:36Z", "type": "commit"}, {"oid": "9e22f4d4af71f8ac66899d462f2da731d2323706", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9e22f4d4af71f8ac66899d462f2da731d2323706", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-14T20:17:22Z", "type": "commit"}, {"oid": "e5a4c156409960687716d673fc23cbd917e4f0fd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e5a4c156409960687716d673fc23cbd917e4f0fd", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-14T21:55:00Z", "type": "commit"}, {"oid": "9ab78a2eadc6a535cf07ba5e32e135a99fcfd0d1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9ab78a2eadc6a535cf07ba5e32e135a99fcfd0d1", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-15T00:48:43Z", "type": "commit"}, {"oid": "42f87bd50c12f3e0ee852316d657679f9ad2fe5f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/42f87bd50c12f3e0ee852316d657679f9ad2fe5f", "message": "Merge branch 'master' into runwith", "committedDate": "2020-10-15T19:11:31Z", "type": "commit"}]}