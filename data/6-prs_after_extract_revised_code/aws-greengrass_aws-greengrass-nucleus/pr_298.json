{"pr_number": 298, "pr_title": "Tes integ test", "pr_createdAt": "2020-07-07T20:17:00Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298", "timeline": [{"oid": "9b73c3eca6a75ac0dd5de30814bb84ac3c689e6f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9b73c3eca6a75ac0dd5de30814bb84ac3c689e6f", "message": "Add TES Integ test", "committedDate": "2020-07-07T17:47:19Z", "type": "commit"}, {"oid": "0debf9d5a82fd8f4fd1e4a8a861e9be5cca27636", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0debf9d5a82fd8f4fd1e4a8a861e9be5cca27636", "message": "Revert", "committedDate": "2020-07-07T19:24:35Z", "type": "commit"}, {"oid": "c5073e0e3d62f0e81a24ceb22ff6b54c1afe4e7f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c5073e0e3d62f0e81a24ceb22ff6b54c1afe4e7f", "message": "Add tes happy case test", "committedDate": "2020-07-07T19:25:33Z", "type": "commit"}, {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/95a4abe4223ac25006b3697cab898fc7f799ee06", "message": "minor fix", "committedDate": "2020-07-07T19:29:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExOTMzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451119334", "bodyText": "no * imports. Import the IntelliJ.xml file in the code style directory to get our code style rules automatically.", "author": "MikeDombo", "createdAt": "2020-07-07T20:19:38Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nsimilarity index 56%\nrename from src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\nrename to src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nindex 38d9d09213..b631d0daf9 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\n\n@@ -1,28 +1,36 @@\n package com.aws.iot.evergreen.integrationtests.tes;\n \n import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.IotJobsUtils;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n-import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n import com.aws.iot.evergreen.util.IotSdkClientFactory;\n import org.junit.jupiter.api.*;\n import org.junit.jupiter.api.extension.ExtendWith;\n \n+import java.io.BufferedReader;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.*;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.matchesPattern;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.*;\n \n @ExtendWith(EGExtension.class)\n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-class TESIntegrationTest {\n+@Tag(\"E2E\")\n+class TESTest {\n \n     private static Kernel kernel;\n     private ThingInfo thingInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExOTczOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451119739", "bodyText": "if this is talking to the cloud, then this isn't integ, but E2E. if it is E2E please add that as a tag so that it runs with the other E2E tests.", "author": "MikeDombo", "createdAt": "2020-07-07T20:20:30Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nsimilarity index 56%\nrename from src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\nrename to src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nindex 38d9d09213..b631d0daf9 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\n\n@@ -1,28 +1,36 @@\n package com.aws.iot.evergreen.integrationtests.tes;\n \n import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.IotJobsUtils;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n-import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n import com.aws.iot.evergreen.util.IotSdkClientFactory;\n import org.junit.jupiter.api.*;\n import org.junit.jupiter.api.extension.ExtendWith;\n \n+import java.io.BufferedReader;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.*;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.matchesPattern;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.*;\n \n @ExtendWith(EGExtension.class)\n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-class TESIntegrationTest {\n+@Tag(\"E2E\")\n+class TESTest {\n \n     private static Kernel kernel;\n     private ThingInfo thingInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDU1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451120555", "bodyText": "try not to just add sleeps, this is very flaky or in the best case just slows down the tests. Instead, find a way to wait until the kernel is in whatever state you need it to be in (such as TES is in the RUNNING state).", "author": "MikeDombo", "createdAt": "2020-07-07T20:21:32Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        kernel.shutdown();\n+        deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION), thingInfo);\n+        deviceProvisioningHelper.cleanUpIotRoleForTest(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+    }\n+\n+    @Test\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n+        kernel.launch();\n+        Thread.sleep(5000);", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NDY4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r453754685", "bodyText": "Added wait for TES status RUNNING but it still occasionally fails to load the environment variable within that time. Had to keep the sleep for test to pass", "author": "youtuyy", "createdAt": "2020-07-13T15:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MTc1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r453761755", "bodyText": "You can also subscribe to the environment variable topic and then you'd be notified when it was set.", "author": "MikeDombo", "createdAt": "2020-07-13T16:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MTE0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r453991140", "bodyText": "Tried making it wait for the environment variable set as well. But it turns out at that moment the credentials are still not ready to vend at the url.", "author": "youtuyy", "createdAt": "2020-07-13T22:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nsimilarity index 56%\nrename from src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\nrename to src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nindex 38d9d09213..b631d0daf9 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\n\n@@ -1,28 +1,36 @@\n package com.aws.iot.evergreen.integrationtests.tes;\n \n import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.IotJobsUtils;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n-import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n import com.aws.iot.evergreen.util.IotSdkClientFactory;\n import org.junit.jupiter.api.*;\n import org.junit.jupiter.api.extension.ExtendWith;\n \n+import java.io.BufferedReader;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.*;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.matchesPattern;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.*;\n \n @ExtendWith(EGExtension.class)\n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-class TESIntegrationTest {\n+@Tag(\"E2E\")\n+class TESTest {\n \n     private static Kernel kernel;\n     private ThingInfo thingInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDg3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451120870", "bodyText": "this won't work on windows. Don't hard code commands like this, instead just use Java to poll the server and check the response.", "author": "MikeDombo", "createdAt": "2020-07-07T20:22:13Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        kernel.shutdown();\n+        deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION), thingInfo);\n+        deviceProvisioningHelper.cleanUpIotRoleForTest(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+    }\n+\n+    @Test\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n+        kernel.launch();\n+        Thread.sleep(5000);\n+        String url = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, \"AWS_CONTAINER_CREDENTIALS_FULL_URI\").getOnce().toString();\n+        assertNotNull(url);\n+        String credentials = Exec.sh(String.format(\"curl -s -o /dev/stdout %s\", url));", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nsimilarity index 56%\nrename from src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\nrename to src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nindex 38d9d09213..b631d0daf9 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\n\n@@ -1,28 +1,36 @@\n package com.aws.iot.evergreen.integrationtests.tes;\n \n import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.IotJobsUtils;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n-import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n import com.aws.iot.evergreen.util.IotSdkClientFactory;\n import org.junit.jupiter.api.*;\n import org.junit.jupiter.api.extension.ExtendWith;\n \n+import java.io.BufferedReader;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.*;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.matchesPattern;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.*;\n \n @ExtendWith(EGExtension.class)\n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-class TESIntegrationTest {\n+@Tag(\"E2E\")\n+class TESTest {\n \n     private static Kernel kernel;\n     private ThingInfo thingInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMTA4OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451121089", "bodyText": "do not print to stderr. If the test should fail at this point, make it fail. Just printing to stderr does nothing.", "author": "MikeDombo", "createdAt": "2020-07-07T20:22:39Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        kernel.shutdown();\n+        deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION), thingInfo);\n+        deviceProvisioningHelper.cleanUpIotRoleForTest(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+    }\n+\n+    @Test\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n+        kernel.launch();\n+        Thread.sleep(5000);\n+        String url = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, \"AWS_CONTAINER_CREDENTIALS_FULL_URI\").getOnce().toString();\n+        assertNotNull(url);\n+        String credentials = Exec.sh(String.format(\"curl -s -o /dev/stdout %s\", url));\n+        assertThat(credentials, matchesPattern(\n+                \"\\\\{\\\"AccessKeyId\\\":\\\".+\\\",\\\"SecretAccessKey\\\":\\\".+\\\",\\\"Expiration\\\":\\\".+\\\",\\\"Token\\\":\\\".+\\\"\\\\}\"));\n+    }\n+\n+    void provision(Kernel kernel) throws IOException {\n+        thingInfo = deviceProvisioningHelper.createThing(IotSdkClientFactory.getIotClient(AWS_REGION), POLICY_NAME, THING_NAME);\n+        deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, AWS_REGION);\n+        deviceProvisioningHelper.setupIoTRoleForTes(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+        deviceProvisioningHelper.updateKernelConfigWithTesRoleInfo(kernel, TES_ROLE_ALIAS_NAME);\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        if (tesTopics != null) {\n+            System.err.println(tesTopics);", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nsimilarity index 56%\nrename from src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\nrename to src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nindex 38d9d09213..b631d0daf9 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\n\n@@ -1,28 +1,36 @@\n package com.aws.iot.evergreen.integrationtests.tes;\n \n import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.IotJobsUtils;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n-import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n import com.aws.iot.evergreen.util.IotSdkClientFactory;\n import org.junit.jupiter.api.*;\n import org.junit.jupiter.api.extension.ExtendWith;\n \n+import java.io.BufferedReader;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.*;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.matchesPattern;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.*;\n \n @ExtendWith(EGExtension.class)\n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-class TESIntegrationTest {\n+@Tag(\"E2E\")\n+class TESTest {\n \n     private static Kernel kernel;\n     private ThingInfo thingInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMjExOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451122119", "bodyText": "why are we adding this? Don't we already have this logic implemented in the easy setup?\nIf this is only for tests, then move it to the test utilities.", "author": "MikeDombo", "createdAt": "2020-07-07T20:24:40Z", "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -118,6 +124,53 @@ public ThingInfo createThingForE2ETests() {\n                 E2E_TESTS_THING_NAME_PREFIX + UUID.randomUUID().toString());\n     }\n \n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param policyName policyName\n+     * @param thingName  thingName\n+     * @return created thing info\n+     */\n+    public ThingInfo createThingForTES(String policyName, String thingName) {", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NzIzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451167234", "bodyText": "It was left here by mistake. Will remove.", "author": "youtuyy", "createdAt": "2020-07-07T21:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMjExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java\nindex e60f6a61b8..3cb40ad3a1 100644\n--- a/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java\n\n@@ -124,53 +119,6 @@ public class DeviceProvisioningHelper {\n                 E2E_TESTS_THING_NAME_PREFIX + UUID.randomUUID().toString());\n     }\n \n-    /**\n-     * Create a thing with provided configuration.\n-     *\n-     * @param policyName policyName\n-     * @param thingName  thingName\n-     * @return created thing info\n-     */\n-    public ThingInfo createThingForTES(String policyName, String thingName) {\n-        // Find or create IoT policy\n-        try {\n-            iotClient.getPolicy(GetPolicyRequest.builder().policyName(policyName).build());\n-            outStream.println(String.format(\"Found IoT policy \\\"%s\\\", reusing it\", policyName));\n-        } catch (ResourceNotFoundException e) {\n-            outStream.println(String.format(\"Creating new IoT policy \\\"%s\\\"\", policyName));\n-            iotClient.createPolicy(CreatePolicyRequest.builder().policyName(policyName).policyDocument(\n-                    \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n-                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n-                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n-                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n-                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build());\n-        }\n-\n-        // Create cert\n-        outStream.println(\"Creating keys and certificate...\");\n-        CreateKeysAndCertificateResponse keyResponse =\n-                iotClient.createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build());\n-\n-        // Attach policy to cert\n-        outStream.println(\"Attaching policy to certificate...\");\n-        iotClient.attachPolicy(\n-                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build());\n-\n-        // Create the thing and attach the cert to it\n-        outStream.println(String.format(\"Creating IoT Thing \\\"%s\\\"...\", thingName));\n-        String thingArn = iotClient.createThing(CreateThingRequest.builder().thingName(thingName).build()).thingArn();\n-        outStream.println(\"Attaching certificate to IoT thing...\");\n-        iotClient.attachThingPrincipal(\n-                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n-                        .build());\n-\n-        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n-                keyResponse.certificatePem(), keyResponse.keyPair(),\n-                iotClient.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build())\n-                        .endpointAddress(), iotClient.describeEndpoint(\n-                DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()).endpointAddress());\n-    }\n-\n     /**\n      * Create a thing with provided configuration.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMjQ5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451122490", "bodyText": "why is this all being reverted? What was wrong with the change? I'm sure you had tested that change, so why are we reverting it now?", "author": "MikeDombo", "createdAt": "2020-07-07T20:25:21Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -6,42 +6,50 @@\n import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.sun.net.httpserver.HttpExchange;\n import com.sun.net.httpserver.HttpHandler;\n-import software.amazon.awssdk.crt.auth.credentials.Credentials;\n \n import java.io.IOException;\n import java.net.HttpURLConnection;\n-import java.nio.charset.StandardCharsets;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n import java.util.HashMap;\n-import java.util.Locale;\n import java.util.Map;\n \n public class CredentialRequestHandler implements HttpHandler {\n     private static final Logger LOGGER = LogManager.getLogger(CredentialRequestHandler.class);\n     public static final String IOT_CREDENTIALS_HTTP_VERB = \"GET\";\n-    private static final String ACCESS_KEY_STR = \"AccessKeyId\";\n-    private static final String SECRET_ACCESS_STR = \"SecretAccessKey\";\n-    private static final String SESSION_TOKEN_STR = \"Token\";\n-    private static final String EXPIRATION_STR = \"Expiration\";\n+    private static final String CREDENTIALS_UPSTREAM_STR = \"credentials\";", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NzIwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451167208", "bodyText": "Synced up offline. Will try not to revert the commit and fix it within this pr. Checked policies used for potential cause, which looked good so far, and will keep looking into that. Also getting help from the sdk side. They asked to cut a ticket for further investigation. Will followup.", "author": "youtuyy", "createdAt": "2020-07-07T21:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMjQ5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxNjg0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451916840", "bodyText": "Nit - use the constant from TokenExhangeService.java for AWS_CONTAINER_CREDENTIALS_FULL_URI", "author": "shaguptashaikh", "createdAt": "2020-07-09T01:45:14Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        kernel.shutdown();\n+        deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION), thingInfo);\n+        deviceProvisioningHelper.cleanUpIotRoleForTest(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+    }\n+\n+    @Test\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n+        kernel.launch();\n+        Thread.sleep(5000);\n+        String url = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, \"AWS_CONTAINER_CREDENTIALS_FULL_URI\").getOnce().toString();", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nsimilarity index 56%\nrename from src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\nrename to src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\nindex 38d9d09213..b631d0daf9 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java\n\n@@ -1,28 +1,36 @@\n package com.aws.iot.evergreen.integrationtests.tes;\n \n import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.IotJobsUtils;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n-import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n import com.aws.iot.evergreen.util.IotSdkClientFactory;\n import org.junit.jupiter.api.*;\n import org.junit.jupiter.api.extension.ExtendWith;\n \n+import java.io.BufferedReader;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n-import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.*;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.matchesPattern;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.*;\n \n @ExtendWith(EGExtension.class)\n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-class TESIntegrationTest {\n+@Tag(\"E2E\")\n+class TESTest {\n \n     private static Kernel kernel;\n     private ThingInfo thingInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxODg5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451918890", "bodyText": "Can we not hardcode  ReadOnlyAcces? Ideally this policy will be set by the customer, so the policy document should be taken from them as the CLI input to the easy setup CLI and create a separate role policy with that document here, if you cannot do that in this PR then please do this inside your integ test code and not hardcode here like so -\nCreatePolicyResponse createPolicyResponse = iamClient.createPolicy(\n                    CreatePolicyRequest.builder().policyName(TES_ROLE_POLICY_NAME).policyDocument(TES_ROLE_POLICY_DOCUMENT)\n                            .description(\"Defines permissions to access AWS services for E2E test device TES role\").build());\n            iamClient.attachRolePolicy(AttachRolePolicyRequest.builder().roleName(TES_ROLE_NAME).policyArn(createPolicyResponse.policy().arn()).build());", "author": "shaguptashaikh", "createdAt": "2020-07-09T01:52:41Z", "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -262,6 +315,11 @@ public void setupIoTRoleForTes(String roleName, String roleAliasName, String cer\n                                 + \"      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"credentials.iot.amazonaws.com\\\"\\n\"\n                                 + \"      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    }\\n  ]\\n}\").build();\n                 roleArn = iamClient.createRole(createRoleRequest).role().arn();\n+                AttachRolePolicyRequest attachRolePolicyRequest = AttachRolePolicyRequest.builder()\n+                        .policyArn(\"arn:aws:iam::aws:policy/ReadOnlyAccess\")", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1MzAxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r453753012", "bodyText": "Removed for now as test currently is not using any policy.\nIf no policy is given by the customer, should we just leave it with no policy or should be some default?", "author": "youtuyy", "createdAt": "2020-07-13T15:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxODg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java\nindex e60f6a61b8..3cb40ad3a1 100644\n--- a/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java\n\n@@ -315,11 +263,7 @@ public class DeviceProvisioningHelper {\n                                 + \"      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"credentials.iot.amazonaws.com\\\"\\n\"\n                                 + \"      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    }\\n  ]\\n}\").build();\n                 roleArn = iamClient.createRole(createRoleRequest).role().arn();\n-                AttachRolePolicyRequest attachRolePolicyRequest = AttachRolePolicyRequest.builder()\n-                        .policyArn(\"arn:aws:iam::aws:policy/ReadOnlyAccess\")\n-                        .roleName(roleName)\n-                        .build();\n-                iamClient.attachRolePolicy(attachRolePolicyRequest);\n+                //TODO: Attach role policy that is passed in by customer\n             }\n \n             CreateRoleAliasRequest createRoleAliasRequest =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxOTY2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451919664", "bodyText": "Let's keep the clean up logic inside the test helpers, in a user journey clean up will not be needed since once these resources are setup they will be used throughout the lifecycle of that device, only possible changes would be in the role policy and that can be made from the cloud", "author": "shaguptashaikh", "createdAt": "2020-07-09T01:55:28Z", "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -289,6 +347,46 @@ public void setupIoTRoleForTes(String roleName, String roleAliasName, String cer\n         iotClient.attachPolicy(attachPolicyRequest);\n     }\n \n+    /**\n+     * Clean Up IoT/IAM roles for using TES.\n+     *\n+     * @param roleName IAM role Name\n+     * @param roleAliasName IOT roleAlias name\n+     * @param certArn IOT certificate Arn\n+     */\n+    public void cleanUpIotRoleForTest(String roleName, String roleAliasName, String certArn) {", "originalCommit": "95a4abe4223ac25006b3697cab898fc7f799ee06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1MTQ3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r453751474", "bodyText": "Moved to IotJobsUtils", "author": "youtuyy", "createdAt": "2020-07-13T15:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxOTY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java b/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java\nindex e60f6a61b8..3cb40ad3a1 100644\n--- a/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java\n\n@@ -347,46 +291,6 @@ public class DeviceProvisioningHelper {\n         iotClient.attachPolicy(attachPolicyRequest);\n     }\n \n-    /**\n-     * Clean Up IoT/IAM roles for using TES.\n-     *\n-     * @param roleName IAM role Name\n-     * @param roleAliasName IOT roleAlias name\n-     * @param certArn IOT certificate Arn\n-     */\n-    public void cleanUpIotRoleForTest(String roleName, String roleAliasName, String certArn) {\n-        try {\n-            DeleteRoleAliasRequest deleteRoleAliasRequest = DeleteRoleAliasRequest.builder()\n-                    .roleAlias(roleAliasName).build();\n-            iotClient.deleteRoleAlias(deleteRoleAliasRequest);\n-        } catch (ResourceNotFoundException e) {\n-            // Ignore as role alias does not exist\n-        }\n-        try {\n-            DetachRolePolicyRequest detachRolePolicyRequest = DetachRolePolicyRequest.builder()\n-                    .policyArn(\"arn:aws:iam::aws:policy/ReadOnlyAccess\")\n-                    .roleName(roleName)\n-                    .build();\n-            iamClient.detachRolePolicy(detachRolePolicyRequest);\n-            DeleteRoleRequest deleteRoleRequest = DeleteRoleRequest.builder()\n-                    .roleName(roleName).build();\n-            iamClient.deleteRole(deleteRoleRequest);\n-        } catch (ResourceNotFoundException e) {\n-            // Ignore as role alias does not exist\n-        }\n-        String iotRolePolicyName = IOT_ROLE_POLICY_NAME_PREFIX + roleAliasName;\n-        try {\n-            DetachPolicyRequest detachPolicyRequest = DetachPolicyRequest.builder()\n-                    .policyName(iotRolePolicyName).target(certArn).build();\n-            iotClient.detachPolicy(detachPolicyRequest);\n-            DeletePolicyRequest deletePolicyRequest = DeletePolicyRequest.builder()\n-                    .policyName(iotRolePolicyName).build();\n-            iotClient.deletePolicy(deletePolicyRequest);\n-        } catch (ResourceNotFoundException e) {\n-            // Ignore as policy does not exist\n-        }\n-    }\n-\n     /**\n      * Update the kernel config with TES role alias.\n      *\n"}}, {"oid": "f51b9016c05a9d7dee1587843e5a1ee84b34b893", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f51b9016c05a9d7dee1587843e5a1ee84b34b893", "message": "Merge branch 'master' into tes-integ-test", "committedDate": "2020-07-10T18:08:47Z", "type": "commit"}, {"oid": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "message": "Address comments", "committedDate": "2020-07-13T07:12:31Z", "type": "commit"}, {"oid": "afaf41ddf56309596909d5abde8ccbf2f783297a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/afaf41ddf56309596909d5abde8ccbf2f783297a", "message": "typo", "committedDate": "2020-07-13T15:50:04Z", "type": "commit"}, {"oid": "954b17ab52d9170600c5fc083a4dd7dc0004500b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/954b17ab52d9170600c5fc083a4dd7dc0004500b", "message": "improve import", "committedDate": "2020-07-13T16:02:14Z", "type": "commit"}, {"oid": "3bc39834eca434641170a40aefbb6b4d79908245", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3bc39834eca434641170a40aefbb6b4d79908245", "message": "fix bufferedreader", "committedDate": "2020-07-13T16:10:53Z", "type": "commit"}, {"oid": "496ab1dce20ce6d24056a8bd5fc66e6db3f93256", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/496ab1dce20ce6d24056a8bd5fc66e6db3f93256", "message": "Update README", "committedDate": "2020-07-13T19:44:30Z", "type": "commit"}]}