{"pr_number": 537, "pr_title": "Runwith implementation - load user info considering default, component, and recipe and resolve which user to run as at execution time", "pr_createdAt": "2020-10-16T07:25:54Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537", "timeline": [{"oid": "c9e88a424acfdbb172c8a233aefa6242fd175061", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c9e88a424acfdbb172c8a233aefa6242fd175061", "message": "Implement RunWith for user and group\n\nLook up a default RunWith in the DeviceConfiguration\n\nLookup RunWith per deployed component\n\nAllow running steps as a privileged user\n\nKeep track of the info used to start a service so that after a deployment, the same user that started the service will stop it\n\nAdd integration tests", "committedDate": "2020-10-16T06:57:39Z", "type": "commit"}, {"oid": "c0f31e76406c2e0eaf5e9e44a6b28d98bb321bff", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c0f31e76406c2e0eaf5e9e44a6b28d98bb321bff", "message": "Remove enableLogBash flag and always enable", "committedDate": "2020-10-16T07:14:31Z", "type": "commit"}, {"oid": "e4252e5fbf175c6936025c52561dd71862b96891", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e4252e5fbf175c6936025c52561dd71862b96891", "message": "Remove reference to logbash in comment", "committedDate": "2020-10-16T07:17:56Z", "type": "commit"}, {"oid": "93a9b90d01c7418beb291c376c4dbf412946c3c8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/93a9b90d01c7418beb291c376c4dbf412946c3c8", "message": "Merge branch 'master' into runwith-impl", "committedDate": "2020-10-16T07:27:06Z", "type": "commit"}, {"oid": "a5b23ba99a51fe3d06fb8f78e502c8aa2d01e160", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a5b23ba99a51fe3d06fb8f78e502c8aa2d01e160", "message": "Remove redundant test", "committedDate": "2020-10-16T07:36:56Z", "type": "commit"}, {"oid": "5c85f3cf1a209f68dc2aff54144d14d110a74c80", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5c85f3cf1a209f68dc2aff54144d14d110a74c80", "message": "fix copyright", "committedDate": "2020-10-16T07:38:18Z", "type": "commit"}, {"oid": "78875834f38422174ccc9b7cff4501fdda49e007", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/78875834f38422174ccc9b7cff4501fdda49e007", "message": "change whitespace", "committedDate": "2020-10-16T07:39:48Z", "type": "commit"}, {"oid": "b54b82fc0f2e5de1254a12339158cc808e0d8360", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b54b82fc0f2e5de1254a12339158cc808e0d8360", "message": "Fix comment", "committedDate": "2020-10-16T15:39:39Z", "type": "commit"}, {"oid": "0d9efe2bf8b4c3379cbf82b3c0c5621566256fb5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0d9efe2bf8b4c3379cbf82b3c0c5621566256fb5", "message": "Add windows test that ignores posix user/group", "committedDate": "2020-10-16T16:00:31Z", "type": "commit"}, {"oid": "2f9362e2e6a07b9462f73abecf607465712034b2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2f9362e2e6a07b9462f73abecf607465712034b2", "message": "remove stubbing", "committedDate": "2020-10-16T16:31:40Z", "type": "commit"}, {"oid": "eb143854e4f381772d4e84643d7f95d6715cc5d6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb143854e4f381772d4e84643d7f95d6715cc5d6", "message": "Fix test", "committedDate": "2020-10-16T16:35:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNjEyOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506606128", "bodyText": "use a try-finally to remove the listener at the end.", "author": "MikeDombo", "createdAt": "2020-10-16T17:03:42Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -724,6 +731,68 @@ void GIVEN_services_running_WHEN_service_added_and_deleted_THEN_add_remove_servi\n         assertThrows(ServiceLoadException.class, () -> kernel.locate(\"Mosquitto\"));\n         assertThrows(ServiceLoadException.class, () -> kernel.locate(\"GreenSignal\"));\n     }\n+    /**\n+     * Start a service running with a user, then deploy an update to change the user and ensure the correct user\n+     * stops the process and starts the new one.\n+     */\n+    @Test\n+    @Order(5) // deploy before tests that break services\n+    @EnabledOnOs(OS.LINUX)\n+    void GIVEN_a_deployment_with_runwith_config_WHEN_submitted_THEN_runwith_updated() throws Exception {\n+        ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n+                GreengrassService.class.getName());\n+\n+        assumeCanSudoShell(kernel);\n+\n+        countDownLatch = new CountDownLatch(2);\n+        // Set up stdout listener to capture stdout for verifying users\n+        List<String> stdouts = new CopyOnWriteArrayList<>();\n+        Consumer<GreengrassLogMessage> listener = m -> {\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if (messageOnStdout != null && messageOnStdout.contains(\"with user\")) {\n+                stdouts.add(messageOnStdout);\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Slf4jLogAdapter.addGlobalListener(listener);", "originalCommit": "eb143854e4f381772d4e84643d7f95d6715cc5d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcea6b2b34bfb6d7824a7285a4af13b17164c1a1", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentTaskIntegrationTest.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentTaskIntegrationTest.java\nindex 5d6ab185f..ffa2af6df 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentTaskIntegrationTest.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentTaskIntegrationTest.java\n\n@@ -756,42 +727,42 @@ class DeploymentTaskIntegrationTest {\n             }\n         };\n         Slf4jLogAdapter.addGlobalListener(listener);\n-\n-\n-        /*\n-         * 1st deployment. Default Config.\n-         */\n-        Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n-                DeploymentTaskIntegrationTest.class.getResource(\"SampleJobDocumentWithUser_1.json\").toURI(),\n-                System.currentTimeMillis());\n-        resultFuture.get(10, TimeUnit.SECONDS);\n-\n-        // verify user\n-        String user = Coerce.toString(kernel.findServiceTopic(\"CustomerAppStartupShutdown\")\n-                .find(RUN_WITH_NAMESPACE_TOPIC, POSIX_USER_KEY));\n-        assertEquals(\"123456\", user);\n-        countDownLatch.await(5, TimeUnit.SECONDS); // the output should appear within 5 seconds\n-        assertThat(stdouts, hasItem(containsString(\"installing app with user root\")));\n-        assertThat(stdouts, hasItem(containsString(\"starting app with user #123456\")));\n-\n-        stdouts.clear();\n-        /*\n-         * 2nd deployment. Change user\n-         */\n-        countDownLatch = new CountDownLatch(2);\n-        resultFuture = submitSampleJobDocument(\n-                DeploymentTaskIntegrationTest.class.getResource(\"SampleJobDocumentWithUser_2.json\").toURI(),\n-                System.currentTimeMillis());\n-        resultFuture.get(10, TimeUnit.SECONDS);\n-        user = Coerce.toString(kernel.findServiceTopic(\"CustomerAppStartupShutdown\")\n-                .find(RUN_WITH_NAMESPACE_TOPIC, POSIX_USER_KEY));\n-        assertEquals(\"54321\", user);\n-\n-        countDownLatch.await(5, TimeUnit.SECONDS); // the output should appear within 5 seconds\n-        assertThat(stdouts, hasItem(containsString(\"stopping app with user #123456\")));\n-        assertThat(stdouts, hasItem(containsString(\"starting app with user #54321\")));\n-\n-        Slf4jLogAdapter.removeGlobalListener(listener);\n+        try {\n+            /*\n+             * 1st deployment. Default Config.\n+             */\n+            Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n+                    DeploymentTaskIntegrationTest.class.getResource(\"SampleJobDocumentWithUser_1.json\").toURI(),\n+                    System.currentTimeMillis());\n+            resultFuture.get(10, TimeUnit.SECONDS);\n+\n+            // verify user\n+            String user = Coerce.toString(kernel.findServiceTopic(\"CustomerAppStartupShutdown\")\n+                    .find(RUN_WITH_NAMESPACE_TOPIC, POSIX_USER_KEY));\n+            assertEquals(\"123456\", user);\n+            countDownLatch.await(5, TimeUnit.SECONDS); // the output should appear within 5 seconds\n+            assertThat(stdouts, hasItem(containsString(\"installing app with user root\")));\n+            assertThat(stdouts, hasItem(containsString(\"starting app with user #123456\")));\n+\n+            stdouts.clear();\n+            /*\n+             * 2nd deployment. Change user\n+             */\n+            countDownLatch = new CountDownLatch(2);\n+            resultFuture = submitSampleJobDocument(\n+                    DeploymentTaskIntegrationTest.class.getResource(\"SampleJobDocumentWithUser_2.json\").toURI(),\n+                    System.currentTimeMillis());\n+            resultFuture.get(10, TimeUnit.SECONDS);\n+            user = Coerce.toString(kernel.findServiceTopic(\"CustomerAppStartupShutdown\")\n+                    .find(RUN_WITH_NAMESPACE_TOPIC, POSIX_USER_KEY));\n+            assertEquals(\"54321\", user);\n+\n+            countDownLatch.await(5, TimeUnit.SECONDS); // the output should appear within 5 seconds\n+            assertThat(stdouts, hasItem(containsString(\"stopping app with user #123456\")));\n+            assertThat(stdouts, hasItem(containsString(\"starting app with user #54321\")));\n+        } finally {\n+            Slf4jLogAdapter.removeGlobalListener(listener);\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNzAyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506607024", "bodyText": "[nit]\nYou could use a parameterized test for these", "author": "MikeDombo", "createdAt": "2020-10-16T17:05:23Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java", "diffHunk": "@@ -297,4 +299,50 @@ void GIVEN_bootstrap_command_WHEN_runs_longer_than_5_sec_THEN_timeout_exception_\n         // this runs 5 seconds\n         assertThrows(TimeoutException.class, serviceWithJustBootstrapAndShouldTimeout::bootstrap);\n     }\n+\n+    @EnabledOnOs(OS.LINUX)\n+    @Test\n+    void GIVEN_linux_default_user_WHEN_runs_THEN_runs_with_default_user() throws Exception {\n+        runPosixUserShellTest(\"config_run_with_user.yaml\", \"123456\");\n+\n+    }\n+\n+    @EnabledOnOs(OS.LINUX)\n+    @Test\n+    void GIVEN_linux_default_shell_WHEN_runs_THEN_runs_with_default_shell() throws Exception {\n+        runPosixUserShellTest(\"config_run_with_user_shell.yaml\", \"123456\");\n+    }\n+\n+    @EnabledOnOs(OS.LINUX)\n+    @Test\n+    void GIVEN_linux_requires_privilege_WHEN_runs_THEN_runs_with_root() throws Exception {\n+        runPosixUserShellTest(\"config_run_with_privilege.yaml\", \"0\");", "originalCommit": "eb143854e4f381772d4e84643d7f95d6715cc5d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87a2afd8ba24ca3cfdc9ac14f6d7cbe1ca9f4f73", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java\nindex fbf4f5453..d8b6dcf49 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java\n\n@@ -300,26 +305,11 @@ class GenericExternalServiceTest extends BaseITCase {\n         assertThrows(TimeoutException.class, serviceWithJustBootstrapAndShouldTimeout::bootstrap);\n     }\n \n-    @EnabledOnOs(OS.LINUX)\n-    @Test\n-    void GIVEN_linux_default_user_WHEN_runs_THEN_runs_with_default_user() throws Exception {\n-        runPosixUserShellTest(\"config_run_with_user.yaml\", \"123456\");\n-\n-    }\n-\n-    @EnabledOnOs(OS.LINUX)\n-    @Test\n-    void GIVEN_linux_default_shell_WHEN_runs_THEN_runs_with_default_shell() throws Exception {\n-        runPosixUserShellTest(\"config_run_with_user_shell.yaml\", \"123456\");\n-    }\n-\n-    @EnabledOnOs(OS.LINUX)\n-    @Test\n-    void GIVEN_linux_requires_privilege_WHEN_runs_THEN_runs_with_root() throws Exception {\n-        runPosixUserShellTest(\"config_run_with_privilege.yaml\", \"0\");\n-    }\n-\n-    private void runPosixUserShellTest(String file, String expectedUid) throws Exception {\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    @ParameterizedTest\n+    @MethodSource(\"posixTestUserConfig\")\n+    void GIVEN_posix_default_user_WHEN_runs_THEN_runs_with_default_user(String file, String expectedUid)\n+            throws Exception {\n         kernel.parseArgs(\"-i\", getClass().getResource(file).toString());\n \n         // skip when running as a user that cannot sudo to shell\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxMDU1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506610551", "bodyText": "windows shell too? powershell vs. cmd?", "author": "MikeDombo", "createdAt": "2020-10-16T17:11:49Z", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -135,6 +139,26 @@ private Validator getRegionValidator() {\n         };\n     }\n \n+    public Topics getRunWithTopic() {\n+        return getTopics(RUN_WITH_TOPIC);\n+    }\n+\n+    public Topic getRunWithDefaultPosixUser() {\n+        return getRunWithTopic().lookup(RUN_WITH_DEFAULT_POSIX_USER);\n+    }\n+\n+    public Topic getRunWithDefaultPosixGroup() {\n+        return getRunWithTopic().lookup(RUN_WITH_DEFAULT_POSIX_GROUP);\n+    }\n+\n+    public Topic getRunWithDefaultPosixShell() {", "originalCommit": "eb143854e4f381772d4e84643d7f95d6715cc5d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzYxOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506647618", "bodyText": "so this makes it interesting - with linux shells, they all take a \"-c\" arg to pass a command to run\nPowerShell is a completely different beast to cmd.exe and it takes a  \"-Command\" option rather than \"/C\", and has a ton of other parameters that customers may want to use\nI'd prefer to attack this in a follow-on as there may be some powershell capabilities we wish to use - it supports a more straightforward way of running as a different user (although still requiring credentials)\nIt may be the case that for windows we require them to specify \"cmd\" or \"powershell\" as an enumeration and we figure out what to do based on that.", "author": "rbattle", "createdAt": "2020-10-16T18:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxMDU1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxMTY3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506611678", "bodyText": "not needed", "author": "MikeDombo", "createdAt": "2020-10-16T17:13:44Z", "path": "src/main/java/com/aws/greengrass/deployment/model/RunWith.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.deployment.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * Class to represent info about how the kernel should run lifecycle commands.\n+ */\n+@Getter\n+@Builder\n+@JsonDeserialize\n+@JsonSerialize", "originalCommit": "eb143854e4f381772d4e84643d7f95d6715cc5d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2f76f4a0d91da62c6d816c7f7708e3e8c4260c6", "chunk": "diff --git a/src/main/java/com/aws/greengrass/deployment/model/RunWith.java b/src/main/java/com/aws/greengrass/deployment/model/RunWith.java\nindex 859b9a207..a76f0a71c 100644\n--- a/src/main/java/com/aws/greengrass/deployment/model/RunWith.java\n+++ b/src/main/java/com/aws/greengrass/deployment/model/RunWith.java\n\n@@ -4,8 +4,6 @@\n package com.aws.greengrass.deployment.model;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.EqualsAndHashCode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxMzc0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506613747", "bodyText": "why save to local vars and then the fields? Why not just write to the fields?", "author": "MikeDombo", "createdAt": "2020-10-16T17:17:23Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -324,6 +347,31 @@ public void handleError() throws InterruptedException {\n         run(\"recover\", null, lifecycleProcesses);\n     }\n \n+    /**\n+     * Store user, group, and shell that will be used to run the service. This should be used throughout the lifecycle.\n+     * This information can change with a deployment, but service *must* execute the lifecycle steps with the same\n+     * user/group/shell that was configured when it started.\n+     */\n+    protected void storeInitialRunWithConfiguration() {\n+        String user = null;\n+        String group = null;\n+        String shell = null;", "originalCommit": "eb143854e4f381772d4e84643d7f95d6715cc5d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcea6b2b34bfb6d7824a7285a4af13b17164c1a1", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java b/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java\nindex 24bea14e9..0ec4c8969 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java\n\n@@ -351,25 +350,22 @@ public class GenericExternalService extends GreengrassService {\n      * Store user, group, and shell that will be used to run the service. This should be used throughout the lifecycle.\n      * This information can change with a deployment, but service *must* execute the lifecycle steps with the same\n      * user/group/shell that was configured when it started.\n+     *\n+     * If no RunWith configuration is provided (either from kernel or the service), all lifecycle steps execute as the\n+     * kernel user.\n      */\n     protected void storeInitialRunWithConfiguration() {\n-        String user = null;\n-        String group = null;\n-        String shell = null;\n-\n         // TODO: Add support for Windows\n-        if (PlatformResolver.RANKS.get().containsKey(\"posix\")) {\n-            user = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixUser());\n-            group = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixGroup());\n+        if (!Exec.isWindows) {\n+            runWithUser = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixUser());\n+            runWithGroup = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixGroup());\n             // shell cannot be changed from kernel default\n-            shell = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixShell());\n+            runWithShell = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixShell());\n \n-            user = Coerce.toString(config.findOrDefault(user, RUN_WITH_NAMESPACE_TOPIC, POSIX_USER_KEY));\n-            group = Coerce.toString(config.findOrDefault(group, RUN_WITH_NAMESPACE_TOPIC, POSIX_GROUP_KEY));\n+            runWithUser = Coerce.toString(config.findOrDefault(runWithUser, RUN_WITH_NAMESPACE_TOPIC, POSIX_USER_KEY));\n+            runWithGroup = Coerce.toString(config.findOrDefault(runWithGroup, RUN_WITH_NAMESPACE_TOPIC,\n+                    POSIX_GROUP_KEY));\n         }\n-        this.runWithUser = user;\n-        this.runWithGroup = group;\n-        this.runWithShell = shell;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxMzk2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506613967", "bodyText": "maybe just use if (!Exec.isWindows())", "author": "MikeDombo", "createdAt": "2020-10-16T17:17:42Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -324,6 +347,31 @@ public void handleError() throws InterruptedException {\n         run(\"recover\", null, lifecycleProcesses);\n     }\n \n+    /**\n+     * Store user, group, and shell that will be used to run the service. This should be used throughout the lifecycle.\n+     * This information can change with a deployment, but service *must* execute the lifecycle steps with the same\n+     * user/group/shell that was configured when it started.\n+     */\n+    protected void storeInitialRunWithConfiguration() {\n+        String user = null;\n+        String group = null;\n+        String shell = null;\n+\n+        // TODO: Add support for Windows\n+        if (PlatformResolver.RANKS.get().containsKey(\"posix\")) {", "originalCommit": "eb143854e4f381772d4e84643d7f95d6715cc5d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcea6b2b34bfb6d7824a7285a4af13b17164c1a1", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java b/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java\nindex 24bea14e9..0ec4c8969 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java\n\n@@ -351,25 +350,22 @@ public class GenericExternalService extends GreengrassService {\n      * Store user, group, and shell that will be used to run the service. This should be used throughout the lifecycle.\n      * This information can change with a deployment, but service *must* execute the lifecycle steps with the same\n      * user/group/shell that was configured when it started.\n+     *\n+     * If no RunWith configuration is provided (either from kernel or the service), all lifecycle steps execute as the\n+     * kernel user.\n      */\n     protected void storeInitialRunWithConfiguration() {\n-        String user = null;\n-        String group = null;\n-        String shell = null;\n-\n         // TODO: Add support for Windows\n-        if (PlatformResolver.RANKS.get().containsKey(\"posix\")) {\n-            user = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixUser());\n-            group = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixGroup());\n+        if (!Exec.isWindows) {\n+            runWithUser = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixUser());\n+            runWithGroup = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixGroup());\n             // shell cannot be changed from kernel default\n-            shell = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixShell());\n+            runWithShell = Coerce.toString(deviceConfiguration.getRunWithDefaultPosixShell());\n \n-            user = Coerce.toString(config.findOrDefault(user, RUN_WITH_NAMESPACE_TOPIC, POSIX_USER_KEY));\n-            group = Coerce.toString(config.findOrDefault(group, RUN_WITH_NAMESPACE_TOPIC, POSIX_GROUP_KEY));\n+            runWithUser = Coerce.toString(config.findOrDefault(runWithUser, RUN_WITH_NAMESPACE_TOPIC, POSIX_USER_KEY));\n+            runWithGroup = Coerce.toString(config.findOrDefault(runWithGroup, RUN_WITH_NAMESPACE_TOPIC,\n+                    POSIX_GROUP_KEY));\n         }\n-        this.runWithUser = user;\n-        this.runWithGroup = group;\n-        this.runWithShell = shell;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNDQwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506614401", "bodyText": "use protected?", "author": "MikeDombo", "createdAt": "2020-10-16T17:18:20Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -443,4 +495,66 @@ protected void addEnv(Exec exec, Topics src) {\n             });\n         }\n     }\n+\n+    Exec addUserGroup(Exec exec) {\n+        return addUserGroup(exec, runWithUser, runWithGroup);\n+    }\n+\n+    private Exec addUserGroup(Exec exec, String user, String group) {", "originalCommit": "eb143854e4f381772d4e84643d7f95d6715cc5d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcea6b2b34bfb6d7824a7285a4af13b17164c1a1", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java b/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java\nindex 24bea14e9..0ec4c8969 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java\n\n@@ -496,11 +492,11 @@ public class GenericExternalService extends GreengrassService {\n         }\n     }\n \n-    Exec addUserGroup(Exec exec) {\n+    protected Exec addUserGroup(Exec exec) {\n         return addUserGroup(exec, runWithUser, runWithGroup);\n     }\n \n-    private Exec addUserGroup(Exec exec, String user, String group) {\n+    protected Exec addUserGroup(Exec exec, String user, String group) {\n         boolean validUser = !Utils.isEmpty(user);\n         if (validUser) {\n             exec = exec.withUser(user);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNjAxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506616019", "bodyText": "why only linux? Why not mac?", "author": "MikeDombo", "createdAt": "2020-10-16T17:21:21Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java", "diffHunk": "@@ -297,4 +299,50 @@ void GIVEN_bootstrap_command_WHEN_runs_longer_than_5_sec_THEN_timeout_exception_\n         // this runs 5 seconds\n         assertThrows(TimeoutException.class, serviceWithJustBootstrapAndShouldTimeout::bootstrap);\n     }\n+\n+    @EnabledOnOs(OS.LINUX)", "originalCommit": "eb143854e4f381772d4e84643d7f95d6715cc5d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYyNzQ1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506627454", "bodyText": "These won't work unless your mac allows unknown users - which ours by default don't - and I don't want to require everyone to have to set up a test user in order to pass these tests.\nI could make these enabled on mac and have them skip like I do in other tests by checking a similar sudo command", "author": "rbattle", "createdAt": "2020-10-16T17:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNjAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MzE4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506653181", "bodyText": "I've enabled the tests on mac - they'll skip on our laptops though", "author": "rbattle", "createdAt": "2020-10-16T18:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNjAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1NTgwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506655807", "bodyText": "Why would it skip for us if you've enabled it", "author": "MikeDombo", "createdAt": "2020-10-16T18:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNjAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NzA1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506667059", "bodyText": "because we can't sudo to an unknown user - the assumeCanSudoShell method checks that we can execute sudo on a shell as a user 123456. If it cannot, the assumption fails, and the test is skipped.\nOn our provided mac laptops, we cannot execute sudo -u \\#123456 - it will fail with sudo: unknown user: #123456\nHowever - I just discovered that the userid -2 is predefined on macs as an \"unprivileged user\". I'll update this test to use that user instead so that it will run as expected", "author": "rbattle", "createdAt": "2020-10-16T18:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNjAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3Mzc0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r506673747", "bodyText": "nevermind - it still won't work - it requires the user to enter the password for sudo as non-root user in the same session that the test is run in.", "author": "rbattle", "createdAt": "2020-10-16T19:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNjAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "87a2afd8ba24ca3cfdc9ac14f6d7cbe1ca9f4f73", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java\nindex fbf4f5453..d8b6dcf49 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java\n\n@@ -300,26 +305,11 @@ class GenericExternalServiceTest extends BaseITCase {\n         assertThrows(TimeoutException.class, serviceWithJustBootstrapAndShouldTimeout::bootstrap);\n     }\n \n-    @EnabledOnOs(OS.LINUX)\n-    @Test\n-    void GIVEN_linux_default_user_WHEN_runs_THEN_runs_with_default_user() throws Exception {\n-        runPosixUserShellTest(\"config_run_with_user.yaml\", \"123456\");\n-\n-    }\n-\n-    @EnabledOnOs(OS.LINUX)\n-    @Test\n-    void GIVEN_linux_default_shell_WHEN_runs_THEN_runs_with_default_shell() throws Exception {\n-        runPosixUserShellTest(\"config_run_with_user_shell.yaml\", \"123456\");\n-    }\n-\n-    @EnabledOnOs(OS.LINUX)\n-    @Test\n-    void GIVEN_linux_requires_privilege_WHEN_runs_THEN_runs_with_root() throws Exception {\n-        runPosixUserShellTest(\"config_run_with_privilege.yaml\", \"0\");\n-    }\n-\n-    private void runPosixUserShellTest(String file, String expectedUid) throws Exception {\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    @ParameterizedTest\n+    @MethodSource(\"posixTestUserConfig\")\n+    void GIVEN_posix_default_user_WHEN_runs_THEN_runs_with_default_user(String file, String expectedUid)\n+            throws Exception {\n         kernel.parseArgs(\"-i\", getClass().getResource(file).toString());\n \n         // skip when running as a user that cannot sudo to shell\n"}}, {"oid": "dcea6b2b34bfb6d7824a7285a4af13b17164c1a1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dcea6b2b34bfb6d7824a7285a4af13b17164c1a1", "message": "cleanup tests", "committedDate": "2020-10-16T17:49:38Z", "type": "commit"}, {"oid": "a2f76f4a0d91da62c6d816c7f7708e3e8c4260c6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a2f76f4a0d91da62c6d816c7f7708e3e8c4260c6", "message": "remove annotations and fix javadoc", "committedDate": "2020-10-16T17:56:52Z", "type": "commit"}, {"oid": "87a2afd8ba24ca3cfdc9ac14f6d7cbe1ca9f4f73", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/87a2afd8ba24ca3cfdc9ac14f6d7cbe1ca9f4f73", "message": "paramaterize test", "committedDate": "2020-10-16T18:28:14Z", "type": "commit"}, {"oid": "5453801c9943b5b3d61e6d9361569608d73280f8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5453801c9943b5b3d61e6d9361569608d73280f8", "message": "Merge branch 'master' into runwith-impl", "committedDate": "2020-10-16T18:28:30Z", "type": "commit"}, {"oid": "6676d929eecaa87673a28e096e07ead78e0ae52b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6676d929eecaa87673a28e096e07ead78e0ae52b", "message": "Merge branch 'master' into runwith-impl", "committedDate": "2020-10-18T23:13:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI1NzQ1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/537#discussion_r507257458", "bodyText": "[nit]\nClose reader", "author": "MikeDombo", "createdAt": "2020-10-18T23:40:52Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java", "diffHunk": "@@ -297,4 +304,43 @@ void GIVEN_bootstrap_command_WHEN_runs_longer_than_5_sec_THEN_timeout_exception_\n         // this runs 5 seconds\n         assertThrows(TimeoutException.class, serviceWithJustBootstrapAndShouldTimeout::bootstrap);\n     }\n+\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    @ParameterizedTest\n+    @MethodSource(\"posixTestUserConfig\")\n+    void GIVEN_posix_default_user_WHEN_runs_THEN_runs_with_default_user(String file, String expectedUid)\n+            throws Exception {\n+        kernel.parseArgs(\"-i\", getClass().getResource(file).toString());\n+\n+        // skip when running as a user that cannot sudo to shell\n+        assumeCanSudoShell(kernel);\n+\n+        // create file for test to write UID into\n+        File testFile = File.createTempFile(\"user-test\", \".txt\");\n+        testFile.deleteOnExit();\n+        assertTrue(testFile.setWritable(true, false), \"could not set test file to be writable\");\n+        GenericExternalService service = (GenericExternalService) kernel.locate(\"echo_service\");\n+        service.getServiceConfig().find(SETENV_CONFIG_NAMESPACE, \"output_path\").withValue(testFile.getAbsolutePath());\n+\n+        CountDownLatch main = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((s, oldState, newState) -> {\n+            if (s.getName().equals(\"main\") && newState.equals(State.FINISHED)) {\n+                main.countDown();\n+            }\n+        });\n+        kernel.launch();\n+\n+        assertTrue(main.await(10, TimeUnit.SECONDS));\n+\n+        String user = Files.newBufferedReader(testFile.toPath()).readLine();", "originalCommit": "6676d929eecaa87673a28e096e07ead78e0ae52b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "fa49c6fa606bbcf324e60a06eef77a6b1bbf2b69", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fa49c6fa606bbcf324e60a06eef77a6b1bbf2b69", "message": "Fix binaryCompatibility to find causes not just at the class level", "committedDate": "2020-10-18T23:53:54Z", "type": "commit"}, {"oid": "af98a1132e651007f0545b5608bcf045082d9ac2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/af98a1132e651007f0545b5608bcf045082d9ac2", "message": "Merge branch 'master' into runwith-impl", "committedDate": "2020-10-19T22:26:14Z", "type": "commit"}, {"oid": "1ac17565798354f7b75664729aafa0f24401365f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1ac17565798354f7b75664729aafa0f24401365f", "message": "Merge branch 'master' into runwith-impl", "committedDate": "2020-10-20T15:39:31Z", "type": "commit"}]}