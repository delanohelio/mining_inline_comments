{"pr_number": 452, "pr_title": "Authorization bug fixes", "pr_createdAt": "2020-09-18T16:15:06Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NzM4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491057380", "bodyText": "don't undo Fahad's work at speeding things up by reusing the same kernel", "author": "MikeDombo", "createdAt": "2020-09-18T16:20:58Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -59,25 +71,21 @@\n     @BeforeAll\n     static void startKernel() throws InterruptedException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n-        kernel = prepareKernelFromConfigFile(\"pubsub.yaml\", IPCPubSubTest.class, \"SubscribeAndPublish\");\n     }\n \n-    @AfterAll\n-    static void stopKernel() {\n+    @AfterEach\n+    void stopKernel() throws IOException {", "originalCommit": "845155d1b3f83f9e1d53cbf231df134484ccb40b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MzcwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491173700", "bodyText": "moved relevant tests to another file", "author": "avipinku", "createdAt": "2020-09-18T20:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NzM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "06b5a4a0eecd4397c7c3c04fd7cc2980b29c5500", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java\nindex a64d0ce451..9862a2e119 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java\n\n@@ -66,15 +46,16 @@ class IPCPubSubTest {\n     static Path tempRootDir;\n     private static int TIMEOUT_FOR_PUBSUB_SECONDS = 2;\n     private static Kernel kernel;\n-    private IPCClient client;\n+    private static IPCClient client;\n \n     @BeforeAll\n     static void startKernel() throws InterruptedException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+        kernel = prepareKernelFromConfigFile(\"pubsub.yaml\", IPCPubSubTest.class, \"SubscribeAndPublish\");\n     }\n \n-    @AfterEach\n-    void stopKernel() throws IOException {\n+    @AfterAll\n+    static void stopKernel() throws IOException {\n         client.disconnect();\n         kernel.shutdown();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1ODk0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491058943", "bodyText": "remove this", "author": "MikeDombo", "createdAt": "2020-09-18T16:23:39Z", "path": "src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java", "diffHunk": "@@ -65,20 +65,19 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n         Map<String, List<AuthorizationPolicy>> componentNameToPolicies = policyParser.parseAllAuthorizationPolicies(\n                 kernel);\n         for (Map.Entry<String, List<AuthorizationPolicy>> acl : componentNameToPolicies.entrySet()) {\n-            this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), false);\n+            this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());\n         }\n \n-        //Load default policy for TES\n-        this.loadAuthorizationPolicies(TOKEN_EXCHANGE_SERVICE_TOPICS,\n-                getDefaultPolicyForService(AUTHZ_TES_OPERATION),\n-                false);\n+        //Load default policies\n+        addDefaultPolicies();\n \n         //Subscribe to future auth config updates\n         this.kernel.getConfig().getRoot().subscribe(\n                 (why, newv) -> {\n                     if (newv == null) {\n                         return;\n                     }\n+                    logger.atInfo(newv.toString());", "originalCommit": "845155d1b3f83f9e1d53cbf231df134484ccb40b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06b5a4a0eecd4397c7c3c04fd7cc2980b29c5500", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java b/src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java\nindex b3437fcdfb..f40315b884 100644\n--- a/src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java\n+++ b/src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java\n\n@@ -77,7 +77,6 @@ public class AuthorizationHandler  {\n                     if (newv == null) {\n                         return;\n                     }\n-                    logger.atInfo(newv.toString());\n \n                     //If there is a childChanged event, it has to be the 'accessControl' Topic that has bubbled up\n                     //If there is a childRemoved event, it could be the component is removed, or either the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTQzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491059431", "bodyText": "during this time period, requests are being wrongly dropped.", "author": "MikeDombo", "createdAt": "2020-09-18T16:24:32Z", "path": "src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java", "diffHunk": "@@ -105,10 +104,19 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                     //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n                     // instead of reloading everything on every update.\n                     // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n                             .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    componentToAuthZConfig.clear();\n+                    authModule.deleteAllPermissions();\n+\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();\n+\n                     for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());", "originalCommit": "845155d1b3f83f9e1d53cbf231df134484ccb40b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5MzE2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491093164", "bodyText": "Good callout, we would need to flip it atomically.", "author": "prateek-y", "createdAt": "2020-09-18T17:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExODI0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491118241", "bodyText": "I think we can do this, basically we need to make sure that isAuthorized and reload are mutually exclusive, and if reload throws we should somehow revert back to original state. I think load does not throw today, so we should be ok there.\n@synchronized\nprivate void reloadPolicies(String componentName, List<AuthorizationPolicy> policies) {\n    clearPolicies(component);\n    loadAuthorizationPolicies(component, policies);\n}\n\nprivate void clearPolicies(String component) {\n    authModule.deletePermissionsWithDestination(component);\n}\n\n@synchronized\npublic boolean isAuthorized(String destination, Permission permission) throws AuthorizationException {", "author": "prateek-y", "createdAt": "2020-09-18T18:22:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MzEyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492363125", "bodyText": "Added @Synchronized to clearPolicies, isAuthorized, and loadAuthorizationPolicies, i.e. the only three methods that access the authModule.\nYes; if at any point when loading in policies, loadAuthorizationPolicies will just log the error and return. But I think there may be some danger here, since we don't actually call addPermissions until we've validated the operations and principals for all policies, but we only continue in the case of an error. Additionally, addPermission itself could potentially throw an error, which would also be caught and continue'd. This could leave permissions in an unstable state if, say, some policies are reloaded with errors and others are not.\nhttps://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java#L227", "author": "avipinku", "createdAt": "2020-09-21T21:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f16b92b3b403d803ad4574c5d3a7edf62fa54fee", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\nsimilarity index 92%\nrename from src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java\nrename to src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\nindex b3437fcdfb..22e37fa2e6 100644\n--- a/src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java\n+++ b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n\n@@ -109,8 +111,7 @@ public class AuthorizationHandler  {\n                             .parseAllAuthorizationPolicies(kernel);\n \n                     //Delete all policies before reloading\n-                    componentToAuthZConfig.clear();\n-                    authModule.deleteAllPermissions();\n+                    clearPolicies();\n \n                     //Add back in the relevant default policies\n                     addDefaultPolicies();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTkxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491059913", "bodyText": "flip this. Expected then actual", "author": "MikeDombo", "createdAt": "2020-09-18T16:25:21Z", "path": "src/test/java/com/aws/iot/evergreen/authorization/AuthorizationModuleTest.java", "diffHunk": "@@ -96,9 +96,8 @@ void Given_authZmodule_WHEN_given_component_and_clear_permissions_THEN_delete_pe\n                 fail(\"Encountered exception \", e);\n             }\n         });\n-        String componentToRemove = \"ComponentB\";\n-        module.deletePermissionsWithDestination(componentToRemove);\n-        assertEquals(module.permissions.get(\"ComponentB\").size(), 0);\n+        module.deleteAllPermissions();\n+        assertEquals(module.permissions.size(), 0);", "originalCommit": "845155d1b3f83f9e1d53cbf231df134484ccb40b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06b5a4a0eecd4397c7c3c04fd7cc2980b29c5500", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/authorization/AuthorizationModuleTest.java b/src/test/java/com/aws/iot/evergreen/authorization/AuthorizationModuleTest.java\nindex b39619fa99..2b376d5b55 100644\n--- a/src/test/java/com/aws/iot/evergreen/authorization/AuthorizationModuleTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/authorization/AuthorizationModuleTest.java\n\n@@ -97,7 +97,7 @@ public class AuthorizationModuleTest {\n             }\n         });\n         module.deleteAllPermissions();\n-        assertEquals(module.permissions.size(), 0);\n+        assertEquals(0, module.permissions.size());\n     }\n \n     @Test\n"}}, {"oid": "06b5a4a0eecd4397c7c3c04fd7cc2980b29c5500", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/06b5a4a0eecd4397c7c3c04fd7cc2980b29c5500", "message": "Responded to feedback", "committedDate": "2020-09-18T20:24:51Z", "type": "forcePushed"}, {"oid": "f16b92b3b403d803ad4574c5d3a7edf62fa54fee", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f16b92b3b403d803ad4574c5d3a7edf62fa54fee", "message": "Responded to feedback", "committedDate": "2020-09-21T21:40:02Z", "type": "forcePushed"}, {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c6665ce5e5ecea415a1c63ba384644e842aa92f7", "message": "Responded to feedback", "committedDate": "2020-09-21T21:54:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzA0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492377048", "bodyText": "if order matter, use the order junit annotations, otherwise it is likely to break", "author": "MikeDombo", "createdAt": "2020-09-21T22:16:22Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubRemovalTest.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.ipc;\n+\n+import com.aws.greengrass.authorization.AuthorizationModule;\n+import com.aws.greengrass.authorization.Permission;\n+import com.aws.greengrass.componentmanager.exceptions.PackageDownloadException;\n+import com.aws.greengrass.config.Topic;\n+import com.aws.greengrass.config.Topics;\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.ipc.IPCClient;\n+import com.aws.greengrass.ipc.IPCClientImpl;\n+import com.aws.greengrass.ipc.config.KernelIPCClientConfig;\n+import com.aws.greengrass.ipc.services.cli.Cli;\n+import com.aws.greengrass.ipc.services.cli.CliImpl;\n+import com.aws.greengrass.ipc.services.cli.models.CreateLocalDeploymentRequest;\n+import com.aws.greengrass.ipc.services.cli.models.CreateLocalDeploymentResponse;\n+import com.aws.greengrass.ipc.services.cli.models.UpdateRecipesAndArtifactsRequest;\n+import com.aws.greengrass.ipc.services.pubsub.PubSub;\n+import com.aws.greengrass.ipc.services.pubsub.PubSubException;\n+import com.aws.greengrass.ipc.services.pubsub.PubSubImpl;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.aws.greengrass.util.Pair;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.greengrass.componentmanager.KernelConfigResolver.PARAMETERS_CONFIG_KEY;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.getIPCConfigForService;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.prepareKernelFromConfigFile;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.waitForDeploymentToBeSuccessful;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.waitForServiceToComeInState;\n+import static com.aws.greengrass.ipc.modules.PubSubIPCService.PUB_SUB_SERVICE_NAME;\n+import static com.aws.greengrass.lifecyclemanager.GreengrassService.ACCESS_CONTROL_NAMESPACE_TOPIC;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionUltimateCauseWithMessage;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionWithMessage;\n+import static com.aws.greengrass.testcommons.testutilities.TestUtils.asyncAssertOnConsumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(GGExtension.class)\n+class IPCPubSubRemovalTest {", "originalCommit": "c6665ce5e5ecea415a1c63ba384644e842aa92f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNjI4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492406280", "bodyText": "Since it's running a new kernel for each test, the order shouldn't matter", "author": "avipinku", "createdAt": "2020-09-21T23:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubRemovalTest.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubRemovalTest.java\nindex 4864f8c97d..1d1ab47797 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubRemovalTest.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubRemovalTest.java\n\n@@ -71,7 +71,7 @@ class IPCPubSubRemovalTest {\n     private static IPCClient client;\n \n     @BeforeAll\n-    static void startKernel() throws InterruptedException {\n+    static void startKernel() {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzIxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492377212", "bodyText": "keep this as static and afterall", "author": "MikeDombo", "createdAt": "2020-09-21T22:16:51Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -59,25 +53,21 @@\n     @BeforeAll\n     static void startKernel() throws InterruptedException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n-        kernel = prepareKernelFromConfigFile(\"pubsub.yaml\", IPCPubSubTest.class, \"SubscribeAndPublish\");\n     }\n \n-    @AfterAll\n-    static void stopKernel() {\n+    @AfterEach\n+    void stopKernel() throws IOException {", "originalCommit": "c6665ce5e5ecea415a1c63ba384644e842aa92f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNjI5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492406295", "bodyText": "fixed", "author": "avipinku", "createdAt": "2020-09-21T23:44:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java\nindex 1725f63f04..be24c6a552 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java\n\n@@ -48,21 +47,11 @@ class IPCPubSubTest {\n     static Path tempRootDir;\n     private static int TIMEOUT_FOR_PUBSUB_SECONDS = 2;\n     private static Kernel kernel;\n-    private IPCClient client;\n+    private static IPCClient client;\n \n     @BeforeAll\n-    static void startKernel() throws InterruptedException {\n+    static void beforeEach(ExtensionContext context) throws InterruptedException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n-    }\n-\n-    @AfterEach\n-    void stopKernel() throws IOException {\n-        client.disconnect();\n-        kernel.shutdown();\n-    }\n-\n-    @BeforeEach\n-    void beforeEach(ExtensionContext context) throws InterruptedException {\n         ignoreExceptionOfType(context, InterruptedException.class);\n         ignoreExceptionWithMessage(context, \"Connection reset by peer\");\n         // Ignore if IPC can't send us more lifecycle updates because the test is already done.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3ODc4OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492378789", "bodyText": "don't use this", "author": "MikeDombo", "createdAt": "2020-09-21T22:20:52Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -12,6 +12,7 @@\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Utils;\n+import lombok.Synchronized;", "originalCommit": "c6665ce5e5ecea415a1c63ba384644e842aa92f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "chunk": "diff --git a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\nindex 22e37fa2e6..7c86777094 100644\n--- a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n+++ b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n\n@@ -12,7 +12,6 @@ import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Utils;\n-import lombok.Synchronized;\n \n import java.util.Arrays;\n import java.util.HashSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3ODkxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492378914", "bodyText": "just use normal sync. public synchronized boolean ...", "author": "MikeDombo", "createdAt": "2020-09-21T22:21:12Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -126,6 +133,7 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n      * @return whether the input combination is a valid flow.\n      * @throws AuthorizationException when flow is not authorized.\n      */\n+    @Synchronized", "originalCommit": "c6665ce5e5ecea415a1c63ba384644e842aa92f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4Mjc0Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492382746", "bodyText": "nevermind, see comment above.", "author": "MikeDombo", "createdAt": "2020-09-21T22:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3ODkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "chunk": "diff --git a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\nindex 22e37fa2e6..7c86777094 100644\n--- a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n+++ b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n\n@@ -133,7 +147,6 @@ public class AuthorizationHandler  {\n      * @return whether the input combination is a valid flow.\n      * @throws AuthorizationException when flow is not authorized.\n      */\n-    @Synchronized\n     public boolean isAuthorized(String destination, Permission permission) throws AuthorizationException {\n         String principal = permission.getPrincipal();\n         String operation = permission.getOperation();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3OTE1Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492379156", "bodyText": "what about what we discussed re: deleting policies and synchronization?", "author": "MikeDombo", "createdAt": "2020-09-21T22:21:47Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -107,10 +106,18 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                     //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n                     // instead of reloading everything on every update.\n                     // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n                             .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    clearPolicies();\n+\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();", "originalCommit": "c6665ce5e5ecea415a1c63ba384644e842aa92f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3OTU4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492379585", "bodyText": "your synchronization strategy is still wrong. Use a ReentrantReadWriteLock. Use the readlock for isAuthorized and wrap the writelock around this whole block of L109-121", "author": "MikeDombo", "createdAt": "2020-09-21T22:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3OTE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNjMxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492406317", "bodyText": "added", "author": "avipinku", "createdAt": "2020-09-21T23:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3OTE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "chunk": "diff --git a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\nindex 22e37fa2e6..7c86777094 100644\n--- a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n+++ b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n\n@@ -102,22 +104,34 @@ public class AuthorizationHandler  {\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-\n-                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-\n-                    //Delete all policies before reloading\n-                    clearPolicies();\n+                    try {\n+                        rwLock.writeLock().lock();\n+\n+                        //Reload all policies\n+                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                        // instead of reloading everything on every update.\n+                        // https://issues-iad.amazon.com/issues/V243584397\n+                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                                .parseAllAuthorizationPolicies(kernel);\n+\n+                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :\n+                                componentToAuthZConfig.entrySet()) {\n+                            String policyType = masterPolicyList.getKey();\n+                            if (!reloadedPolicies.containsKey(policyType)) {\n+                                //If the policyType already exists and was not reparsed correctly and/or removed from\n+                                //the newly parsed list, delete it from our store since it is now an unwanted relic\n+                                componentToAuthZConfig.remove(policyType);\n+                                authModule.deletePermissionsWithDestination(policyType);\n+                            }\n+                        }\n \n-                    //Add back in the relevant default policies\n-                    addDefaultPolicies();\n+                        //Now we reload the policies that reflect the current state of the kernel config\n+                        for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n+                            this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                        }\n \n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());\n+                    } finally {\n+                        rwLock.writeLock().unlock();\n                     }\n                 });\n     }\n"}}, {"oid": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "message": "Delete only policies not present in reloaded diff", "committedDate": "2020-09-22T20:23:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjM3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493096379", "bodyText": "We can move the lock() here. We do not need that for parsing the config.", "author": "prateek-y", "createdAt": "2020-09-22T23:53:12Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -103,14 +104,34 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                    try {\n+                        rwLock.writeLock().lock();\n+\n+                        //Reload all policies\n+                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                        // instead of reloading everything on every update.\n+                        // https://issues-iad.amazon.com/issues/V243584397\n+                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                                .parseAllAuthorizationPolicies(kernel);\n+\n+                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :", "originalCommit": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMjI2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493112265", "bodyText": "done", "author": "avipinku", "createdAt": "2020-09-23T00:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e05201d11bc2832aa7718563c9dc461b8210266", "chunk": "diff --git a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\nindex 7c86777094..63d0011daa 100644\n--- a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n+++ b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n\n@@ -104,34 +103,22 @@ public class AuthorizationHandler  {\n                         return;\n                     }\n \n-                    try {\n-                        rwLock.writeLock().lock();\n-\n-                        //Reload all policies\n-                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                        // instead of reloading everything on every update.\n-                        // https://issues-iad.amazon.com/issues/V243584397\n-                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                                .parseAllAuthorizationPolicies(kernel);\n-\n-                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :\n-                                componentToAuthZConfig.entrySet()) {\n-                            String policyType = masterPolicyList.getKey();\n-                            if (!reloadedPolicies.containsKey(policyType)) {\n-                                //If the policyType already exists and was not reparsed correctly and/or removed from\n-                                //the newly parsed list, delete it from our store since it is now an unwanted relic\n-                                componentToAuthZConfig.remove(policyType);\n-                                authModule.deletePermissionsWithDestination(policyType);\n-                            }\n-                        }\n+                    //Reload all policies\n+                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                    // instead of reloading everything on every update.\n+                    // https://issues-iad.amazon.com/issues/V243584397\n \n-                        //Now we reload the policies that reflect the current state of the kernel config\n-                        for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                            this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n-                        }\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                            .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    clearPolicies();\n \n-                    } finally {\n-                        rwLock.writeLock().unlock();\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();\n+\n+                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n+                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());\n                     }\n                 });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NzQxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493097417", "bodyText": "This will also remove default policies like TES?", "author": "prateek-y", "createdAt": "2020-09-22T23:56:36Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -103,14 +104,34 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                    try {\n+                        rwLock.writeLock().lock();\n+\n+                        //Reload all policies\n+                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                        // instead of reloading everything on every update.\n+                        // https://issues-iad.amazon.com/issues/V243584397\n+                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                                .parseAllAuthorizationPolicies(kernel);\n+\n+                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :\n+                                componentToAuthZConfig.entrySet()) {\n+                            String policyType = masterPolicyList.getKey();\n+                            if (!reloadedPolicies.containsKey(policyType)) {\n+                                //If the policyType already exists and was not reparsed correctly and/or removed from\n+                                //the newly parsed list, delete it from our store since it is now an unwanted relic\n+                                componentToAuthZConfig.remove(policyType);", "originalCommit": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMjI3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493112270", "bodyText": "Good point; re-added them and added checks in integ tests for TES policies", "author": "avipinku", "createdAt": "2020-09-23T00:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NzQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "2e05201d11bc2832aa7718563c9dc461b8210266", "chunk": "diff --git a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\nindex 7c86777094..63d0011daa 100644\n--- a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n+++ b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n\n@@ -104,34 +103,22 @@ public class AuthorizationHandler  {\n                         return;\n                     }\n \n-                    try {\n-                        rwLock.writeLock().lock();\n-\n-                        //Reload all policies\n-                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                        // instead of reloading everything on every update.\n-                        // https://issues-iad.amazon.com/issues/V243584397\n-                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                                .parseAllAuthorizationPolicies(kernel);\n-\n-                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :\n-                                componentToAuthZConfig.entrySet()) {\n-                            String policyType = masterPolicyList.getKey();\n-                            if (!reloadedPolicies.containsKey(policyType)) {\n-                                //If the policyType already exists and was not reparsed correctly and/or removed from\n-                                //the newly parsed list, delete it from our store since it is now an unwanted relic\n-                                componentToAuthZConfig.remove(policyType);\n-                                authModule.deletePermissionsWithDestination(policyType);\n-                            }\n-                        }\n+                    //Reload all policies\n+                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                    // instead of reloading everything on every update.\n+                    // https://issues-iad.amazon.com/issues/V243584397\n \n-                        //Now we reload the policies that reflect the current state of the kernel config\n-                        for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                            this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n-                        }\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                            .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    clearPolicies();\n \n-                    } finally {\n-                        rwLock.writeLock().unlock();\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();\n+\n+                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n+                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());\n                     }\n                 });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMjYxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493102615", "bodyText": "use try-with-resources and our LockScope", "author": "MikeDombo", "createdAt": "2020-09-23T00:14:48Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -103,14 +104,34 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                    try {\n+                        rwLock.writeLock().lock();", "originalCommit": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMjM1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493112354", "bodyText": "very useful, thanks; added", "author": "avipinku", "createdAt": "2020-09-23T00:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMjYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e05201d11bc2832aa7718563c9dc461b8210266", "chunk": "diff --git a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\nindex 7c86777094..63d0011daa 100644\n--- a/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n+++ b/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java\n\n@@ -104,34 +103,22 @@ public class AuthorizationHandler  {\n                         return;\n                     }\n \n-                    try {\n-                        rwLock.writeLock().lock();\n-\n-                        //Reload all policies\n-                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                        // instead of reloading everything on every update.\n-                        // https://issues-iad.amazon.com/issues/V243584397\n-                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                                .parseAllAuthorizationPolicies(kernel);\n-\n-                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :\n-                                componentToAuthZConfig.entrySet()) {\n-                            String policyType = masterPolicyList.getKey();\n-                            if (!reloadedPolicies.containsKey(policyType)) {\n-                                //If the policyType already exists and was not reparsed correctly and/or removed from\n-                                //the newly parsed list, delete it from our store since it is now an unwanted relic\n-                                componentToAuthZConfig.remove(policyType);\n-                                authModule.deletePermissionsWithDestination(policyType);\n-                            }\n-                        }\n+                    //Reload all policies\n+                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                    // instead of reloading everything on every update.\n+                    // https://issues-iad.amazon.com/issues/V243584397\n \n-                        //Now we reload the policies that reflect the current state of the kernel config\n-                        for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                            this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n-                        }\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                            .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    clearPolicies();\n \n-                    } finally {\n-                        rwLock.writeLock().unlock();\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();\n+\n+                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n+                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());\n                     }\n                 });\n     }\n"}}, {"oid": "2e05201d11bc2832aa7718563c9dc461b8210266", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2e05201d11bc2832aa7718563c9dc461b8210266", "message": "Authorization bug fixes", "committedDate": "2020-09-23T00:50:37Z", "type": "commit"}, {"oid": "b7516ef118f135b6ba1ea9f0eec2937bc2366fe4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b7516ef118f135b6ba1ea9f0eec2937bc2366fe4", "message": "Delete only policies not present in reloaded diff", "committedDate": "2020-09-23T00:50:37Z", "type": "commit"}, {"oid": "a3659f8875224978a734c87b34cfb8c1ca801f43", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a3659f8875224978a734c87b34cfb8c1ca801f43", "message": "Responded to feedback", "committedDate": "2020-09-23T00:50:37Z", "type": "commit"}, {"oid": "a3659f8875224978a734c87b34cfb8c1ca801f43", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a3659f8875224978a734c87b34cfb8c1ca801f43", "message": "Responded to feedback", "committedDate": "2020-09-23T00:50:37Z", "type": "forcePushed"}]}