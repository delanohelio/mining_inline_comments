{"pr_number": 351, "pr_title": "Support cross-component parameters", "pr_createdAt": "2020-08-05T00:50:46Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351", "timeline": [{"oid": "5db21eb3256559426a93983ff76345de14c42461", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5db21eb3256559426a93983ff76345de14c42461", "message": "Add auth so that components can only read from their direct dependencies", "committedDate": "2020-08-05T01:47:40Z", "type": "forcePushed"}, {"oid": "af8123cd0aad3fe0f4febb81046e9b679b8c43b0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/af8123cd0aad3fe0f4febb81046e9b679b8c43b0", "message": "Add auth so that components can only read from their direct dependencies", "committedDate": "2020-08-05T01:50:14Z", "type": "forcePushed"}, {"oid": "11c6dcffc754ca2b932bc814a54f06874dfc85af", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/11c6dcffc754ca2b932bc814a54f06874dfc85af", "message": "Add auth so that components can only read from their direct dependencies", "committedDate": "2020-08-05T01:55:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MTA4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465981086", "bodyText": "Saves duplicate file writes but any main memory concerns in case of large number of packages in one configuration? It may get complicated but hybrid would be to cache only the needed information (system parameters and params).", "author": "abanthiy", "createdAt": "2020-08-05T20:21:34Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,12 +40,18 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();\n \n     private final PackageStore packageStore;\n     private final Kernel kernel;\n+    private final Map<PackageIdentifier, PackageRecipe> recipeCache = new ConcurrentHashMap<>();", "originalCommit": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMTIxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466021217", "bodyText": "Yes, it trying to save us from reading in the recipe file multiple times. I also debated this myself since it obviously increases our memory usage during the resolution time. If you don't think it is worthwhile, then I can get rid of it. I'm not sure how feasible caching just the parameters is, but I'll look.", "author": "MikeDombo", "createdAt": "2020-08-05T21:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMDA1MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466030050", "bodyText": "It is now caching only the parameters and dependencies.", "author": "MikeDombo", "createdAt": "2020-08-05T22:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MTA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "123c0506a108e8509e21d0ee81c52fc94e51e733", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex fdee9534..239c6ec4 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -51,7 +52,8 @@ public class KernelConfigResolver {\n \n     private final PackageStore packageStore;\n     private final Kernel kernel;\n-    private final Map<PackageIdentifier, PackageRecipe> recipeCache = new ConcurrentHashMap<>();\n+    private final Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache =\n+            new ConcurrentHashMap<>();\n \n     /**\n      * Constructor.\n"}}, {"oid": "46a9c0ae9fa30712729da0d37e35110b4f867301", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/46a9c0ae9fa30712729da0d37e35110b4f867301", "message": "Do not tlog items under private namespaces", "committedDate": "2020-08-05T02:16:23Z", "type": "forcePushed"}, {"oid": "123c0506a108e8509e21d0ee81c52fc94e51e733", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/123c0506a108e8509e21d0ee81c52fc94e51e733", "message": "Cache only parameters and dependencies", "committedDate": "2020-08-05T21:59:48Z", "type": "forcePushed"}, {"oid": "ae7a2e6fb91e3e2b9543510c63dd7baf633f922c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ae7a2e6fb91e3e2b9543510c63dd7baf633f922c", "message": "Cache only parameters and dependencies", "committedDate": "2020-08-05T22:01:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNjU1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466036551", "bodyText": "Nit: Would rename method to indicate this is using cache. Overloading reduces readability for me.", "author": "abanthiy", "createdAt": "2020-08-05T22:21:13Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +282,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUse(PackageIdentifier packageIdentifier,", "originalCommit": "ae7a2e6fb91e3e2b9543510c63dd7baf633f922c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e4c3078e131d10ba13eb996929a17d316a82163", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex 6abd9448..108ed725 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -282,8 +282,8 @@ public class KernelConfigResolver {\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n-    private Set<PackageParameter> resolveParameterValuesToUse(PackageIdentifier packageIdentifier,\n-                                                              DeploymentDocument document)\n+    private Set<PackageParameter> resolveParameterValuesToUseWithCache(PackageIdentifier packageIdentifier,\n+                                                                       DeploymentDocument document)\n             throws PackageLoadingException {\n         if (parameterAndDependencyCache.containsKey(packageIdentifier)\n                 && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n"}}, {"oid": "9e4c3078e131d10ba13eb996929a17d316a82163", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9e4c3078e131d10ba13eb996929a17d316a82163", "message": "Cache only parameters and dependencies", "committedDate": "2020-08-05T22:22:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTQ3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465985474", "bodyText": "NIT: can you have a comment of what the cross platform param would look like?", "author": "ShirleyZheng92", "createdAt": "2020-08-05T20:30:02Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,63 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);", "originalCommit": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "123c0506a108e8509e21d0ee81c52fc94e51e733", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex fdee9534..239c6ec4 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -217,12 +213,19 @@ public class KernelConfigResolver {\n     }\n \n     private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom) {\n-        try {\n-            PackageRecipe recipe = getPackageRecipe(component);\n-            return recipe.getDependencies().containsKey(canReadFrom.getName());\n-        } catch (PackageLoadingException e) {\n-            return false;\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());\n+            } catch (PackageLoadingException e) {\n+                return false;\n+            }\n         }\n+        return depSet.contains(canReadFrom.getName());\n     }\n \n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTg1Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465995852", "bodyText": "Does this expose to all components? Are we having authz issues?", "author": "ShirleyZheng92", "createdAt": "2020-08-05T20:50:39Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,63 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get())) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom) {", "originalCommit": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0OTk5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466049997", "bodyText": "Any component can read any other component's parameters only if the component has the other as a dependency. That's what this function is for; it is providing the authorization.", "author": "MikeDombo", "createdAt": "2020-08-05T23:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MjE4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466062183", "bodyText": "Is it safe to assume such Authz assumption?", "author": "ShirleyZheng92", "createdAt": "2020-08-05T23:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MzM4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466063388", "bodyText": "That's how I want to define it. I don't think that it is reasonable to add more authz", "author": "MikeDombo", "createdAt": "2020-08-05T23:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "123c0506a108e8509e21d0ee81c52fc94e51e733", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex fdee9534..239c6ec4 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -217,12 +213,19 @@ public class KernelConfigResolver {\n     }\n \n     private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom) {\n-        try {\n-            PackageRecipe recipe = getPackageRecipe(component);\n-            return recipe.getDependencies().containsKey(canReadFrom.getName());\n-        } catch (PackageLoadingException e) {\n-            return false;\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());\n+            } catch (PackageLoadingException e) {\n+                return false;\n+            }\n         }\n+        return depSet.contains(canReadFrom.getName());\n     }\n \n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5ODM2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465998360", "bodyText": "can we use computeIfAbsent? also does this function have to synchronize on the entire kernelConfigResolver?", "author": "ShirleyZheng92", "createdAt": "2020-08-05T20:55:42Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -123,22 +140,32 @@ public KernelConfigResolver(PackageStore packageStore, Kernel kernel) {\n         return resolvedServiceConfig;\n     }\n \n+    private synchronized PackageRecipe getPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException {\n+        if (!recipeCache.containsKey(packageIdentifier)) {\n+            recipeCache.put(packageIdentifier, packageStore.getPackageRecipe(packageIdentifier));\n+        }", "originalCommit": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "123c0506a108e8509e21d0ee81c52fc94e51e733", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex fdee9534..239c6ec4 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -140,14 +144,6 @@ public class KernelConfigResolver {\n         return resolvedServiceConfig;\n     }\n \n-    private synchronized PackageRecipe getPackageRecipe(PackageIdentifier packageIdentifier)\n-            throws PackageLoadingException {\n-        if (!recipeCache.containsKey(packageIdentifier)) {\n-            recipeCache.put(packageIdentifier, packageStore.getPackageRecipe(packageIdentifier));\n-        }\n-        return recipeCache.get(packageIdentifier);\n-    }\n-\n     /*\n      * For each lifecycle key-value pair of a package, substitute parameter values.\n      */\n"}}, {"oid": "7c247e7638f6a0da5069766f76f139ba0167d945", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7c247e7638f6a0da5069766f76f139ba0167d945", "message": "Cache only parameters and dependencies", "committedDate": "2020-08-05T23:15:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjQ4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466066487", "bodyText": "Thanks for adding the comment!", "author": "fengwang666", "createdAt": "2020-08-05T23:52:34Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Patter matches {{otherComponentName:parameterNamespace:parameterKey}}", "originalCommit": "7c247e7638f6a0da5069766f76f139ba0167d945", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "185c21cf47dba46af807b9a607aafd00b4a06795", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex f4fb297e..4ea39283 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -41,7 +41,7 @@ public class KernelConfigResolver {\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    // Patter matches {{otherComponentName:parameterNamespace:parameterKey}}\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}\n     private static final Pattern CROSS_INTERPOLATION_REGEX =\n             Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n     private static final String PARAM_NAMESPACE = \"params\";\n"}}, {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/185c21cf47dba46af807b9a607aafd00b4a06795", "message": "Cache only parameters and dependencies", "committedDate": "2020-08-05T23:53:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2ODAwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466068009", "bodyText": "The PackageIdentifier constructor is labeled as deprecated. Why using a deprecated constructor?", "author": "fengwang666", "createdAt": "2020-08-05T23:57:39Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -214,6 +228,59 @@ void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_\n                 equalTo(\"echo running service in Package \" + \"PackageA with param PackageA_Param_2_default_value\"));\n     }\n \n+    @Test\n+    void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_cross_component_parameters_should_be_interpolated()\n+            throws Exception {\n+        // GIVEN\n+        PackageIdentifier rootPackageIdentifier =\n+                new PackageIdentifier(TEST_INPUT_PACKAGE_A, new Semver(\"1.2\", Semver.SemverType.NPM));", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwOTU1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466109555", "bodyText": "The identifier now includes \"scope\" which can be public or private. This constructor just sets it to private, which is fine for our testing. Kernel doesn't properly support scope right now and I'm not going to fix it in this PR.", "author": "MikeDombo", "createdAt": "2020-08-06T02:31:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2ODAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ca7be6e05982b16ceea3dc7ccfcdefd0d98706a", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java b/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\nindex cf52b1b6..7a8ea7d3 100644\n--- a/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\n\n@@ -236,13 +243,17 @@ class KernelConfigResolverTest {\n                 new PackageIdentifier(TEST_INPUT_PACKAGE_A, new Semver(\"1.2\", Semver.SemverType.NPM));\n         PackageIdentifier package2 =\n                 new PackageIdentifier(TEST_INPUT_PACKAGE_B, new Semver(\"1.5\", Semver.SemverType.NPM));\n-        List<PackageIdentifier> packagesToDeploy = Arrays.asList(rootPackageIdentifier, package2);\n+        PackageIdentifier package3 =\n+                new PackageIdentifier(TEST_INPUT_PACKAGE_C, new Semver(\"1.5\", Semver.SemverType.NPM));\n+        List<PackageIdentifier> packagesToDeploy = Arrays.asList(rootPackageIdentifier, package2, package3);\n \n         PackageRecipe rootPackageRecipe = getPackage(TEST_INPUT_PACKAGE_A, \"1.2\", Collections.emptyMap(),\n                 getSimpleParameterMap(TEST_INPUT_PACKAGE_A), TEST_INPUT_PACKAGE_A);\n         PackageRecipe package2Recipe = getPackage(TEST_INPUT_PACKAGE_B, \"1.5\", Utils.immutableMap(TEST_INPUT_PACKAGE_A,\n                 new RecipeDependencyProperties(\"=1.2\", DependencyType.HARD.toString())),\n                 getSimpleParameterMap(TEST_INPUT_PACKAGE_B), TEST_INPUT_PACKAGE_A);\n+        PackageRecipe package3Recipe = getPackage(TEST_INPUT_PACKAGE_C, \"1.5\", Collections.emptyMap(),\n+                getSimpleParameterMap(TEST_INPUT_PACKAGE_C), TEST_INPUT_PACKAGE_A);\n \n         DeploymentPackageConfiguration rootPackageDeploymentConfig =\n                 new DeploymentPackageConfiguration(TEST_INPUT_PACKAGE_A, true, \"1.2\", new HashMap<String, Object>() {{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3MTU0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466071545", "bodyText": "This is due to my lack of knowledge in kernel. What are the prameterNamespace?", "author": "fengwang666", "createdAt": "2020-08-06T00:10:22Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4ODE2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466088160", "bodyText": "Right now we have 2: artifacts and params.", "author": "MikeDombo", "createdAt": "2020-08-06T01:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3MTU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex 4ea39283..ab9d40de 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -41,9 +39,8 @@ public class KernelConfigResolver {\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}\n     private static final Pattern CROSS_INTERPOLATION_REGEX =\n-            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\", Pattern.MULTILINE);\n     private static final String PARAM_NAMESPACE = \"params\";\n     private static final String PARAM_VALUE_SUFFIX = \".value\";\n     private static final String PARAMETER_REFERENCE_FORMAT =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTE2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466075160", "bodyText": "When would the code run in the else block? Shouldn' t the condition check in if branch be always true?", "author": "fengwang666", "createdAt": "2020-08-06T00:23:35Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4ODMyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466088321", "bodyText": "This should not be possible. I can remove it, but was just being extra safe.", "author": "MikeDombo", "createdAt": "2020-08-06T01:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MDkwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466090901", "bodyText": "If it's not possible, then let's remove it. It's a piece of dead code that conveys the wrong information.", "author": "fengwang666", "createdAt": "2020-08-06T01:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMDc1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466100758", "bodyText": "I was wrong. It is possible because the order of component interpolation isn't defined, so this could by trying to access a component that hasn't yet been loaded.", "author": "MikeDombo", "createdAt": "2020-08-06T01:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex 4ea39283..ab9d40de 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -202,12 +188,9 @@ public class KernelConfigResolver {\n             String crossComponent = matcher.group(1);\n             Optional<PackageIdentifier> crossComponentIdentifier =\n                     packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n-\n-            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n-                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n-                String replacement =\n-                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n-                                matcher.group(2), matcher.group(3));\n+            if (crossComponentIdentifier.isPresent()) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n                 if (replacement != null) {\n                     stringValue = stringValue.replace(matcher.group(), replacement);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466076268", "bodyText": "getName() can throw NPE potentially?", "author": "fengwang666", "createdAt": "2020-08-06T00:27:13Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4ODQ3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466088474", "bodyText": "No, why would you say so?", "author": "MikeDombo", "createdAt": "2020-08-06T01:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MTYwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466091601", "bodyText": "Okay. I forgot optional.get() throws NoSuchElementException instead of return null. However, we probably still want to handle NoSuchElementException instead of let it go up the stack.", "author": "fengwang666", "createdAt": "2020-08-06T01:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MjQ5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466092493", "bodyText": "Why are you talking about optional? What line are you talking about?", "author": "MikeDombo", "createdAt": "2020-08-06T01:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMTgzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466101837", "bodyText": "line 206: if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier, crossComponentIdentifier.get(), parameterAndDependencyCache))\ncrossComponentIdentifier.get() can throw NoSuchElementException.", "author": "fengwang666", "createdAt": "2020-08-06T02:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMjE0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466102141", "bodyText": "No it can't because I just called isPresent, so it will be present.", "author": "MikeDombo", "createdAt": "2020-08-06T02:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMjcxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466102713", "bodyText": "ahhh...I missed that.", "author": "fengwang666", "createdAt": "2020-08-06T02:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex 4ea39283..ab9d40de 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -202,12 +188,9 @@ public class KernelConfigResolver {\n             String crossComponent = matcher.group(1);\n             Optional<PackageIdentifier> crossComponentIdentifier =\n                     packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n-\n-            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n-                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n-                String replacement =\n-                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n-                                matcher.group(2), matcher.group(3));\n+            if (crossComponentIdentifier.isPresent()) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n                 if (replacement != null) {\n                     stringValue = stringValue.replace(matcher.group(), replacement);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjQzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466076439", "bodyText": "Shouldn't it log an error if it throws an exception?", "author": "fengwang666", "createdAt": "2020-08-06T00:27:50Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());\n+            } catch (PackageLoadingException e) {\n+                return false;", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex 4ea39283..ab9d40de 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -202,12 +188,9 @@ public class KernelConfigResolver {\n             String crossComponent = matcher.group(1);\n             Optional<PackageIdentifier> crossComponentIdentifier =\n                     packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n-\n-            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n-                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n-                String replacement =\n-                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n-                                matcher.group(2), matcher.group(3));\n+            if (crossComponentIdentifier.isPresent()) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n                 if (replacement != null) {\n                     stringValue = stringValue.replace(matcher.group(), replacement);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzkwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466077909", "bodyText": "Curious why we choose a function as the value? Is the intend to compute the value at dynamically? What if the compute is expensive?", "author": "fengwang666", "createdAt": "2020-08-06T00:32:59Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODkxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466078912", "bodyText": "Also is systemParameters accessible from IPC? Why is defined here?", "author": "fengwang666", "createdAt": "2020-08-06T00:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4OTEyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466089121", "bodyText": "No, not available over IPC.\nIt is a function so that it can differ by what package it is for. So far all the implementations are not doing anything slow.", "author": "MikeDombo", "createdAt": "2020-08-06T01:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex 4ea39283..ab9d40de 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -41,9 +39,8 @@ public class KernelConfigResolver {\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}\n     private static final Pattern CROSS_INTERPOLATION_REGEX =\n-            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\", Pattern.MULTILINE);\n     private static final String PARAM_NAMESPACE = \"params\";\n     private static final String PARAM_VALUE_SUFFIX = \".value\";\n     private static final String PARAMETER_REFERENCE_FORMAT =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODQ1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466078454", "bodyText": "Can you extract path and artifact to constants? I cannot comment on the lines that are from previous merge.", "author": "fengwang666", "createdAt": "2020-08-06T00:35:04Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -52,8 +55,11 @@\n             \"echo installing service in Package %s with param {{params:%s_Param_1.value}}\";\n     private static final String LIFECYCLE_MOCK_RUN_COMMAND_FORMAT =\n             \"echo running service in Package %s with param {{params:%s_Param_2.value}}\";\n+    private static final String LIFECYCLE_MOCK_CROSS_COMPONENT_FORMAT =\n+            \"Package %s with param {{%s:params:%s_Param_1.value}} {{%s:artifacts:path}}\";", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ca7be6e05982b16ceea3dc7ccfcdefd0d98706a", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java b/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\nindex cf52b1b6..7a8ea7d3 100644\n--- a/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\n\n@@ -52,13 +56,16 @@ class KernelConfigResolverTest {\n     private static final String LIFECYCLE_RUN_KEY = \"run\";\n     private static final String LIFECYCLE_SCRIPT_KEY = \"script\";\n     private static final String LIFECYCLE_MOCK_INSTALL_COMMAND_FORMAT =\n-            \"echo installing service in Package %s with param {{params:%s_Param_1.value}}\";\n+            \"echo installing service in Package %s with param {{\" + PARAM_NAMESPACE + \":%s_Param_1\" + PARAM_VALUE_SUFFIX\n+                    + \"}}\";\n     private static final String LIFECYCLE_MOCK_RUN_COMMAND_FORMAT =\n-            \"echo running service in Package %s with param {{params:%s_Param_2.value}}\";\n+            \"echo running service in Package %s with param {{\" + PARAM_NAMESPACE + \":%s_Param_2\" + PARAM_VALUE_SUFFIX\n+                    + \"}}\";\n     private static final String LIFECYCLE_MOCK_CROSS_COMPONENT_FORMAT =\n-            \"Package %s with param {{%s:params:%s_Param_1.value}} {{%s:artifacts:path}}\";\n+            \"Package %s with param {{%s:params:%s_Param_1.value}} {{%s:\" + ARTIFACTS_NAMESPACE + \":\" + PATH_KEY + \"}}\";\n     private static final String TEST_INPUT_PACKAGE_A = \"PackageA\";\n     private static final String TEST_INPUT_PACKAGE_B = \"PackageB\";\n+    private static final String TEST_INPUT_PACKAGE_C = \"PackageC\";\n     private static final String TEST_NAMESPACE = \"test\";\n     @Mock\n     private Kernel kernel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MDA4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466080085", "bodyText": "Same here. Which case is not covered in the if block?", "author": "fengwang666", "createdAt": "2020-08-06T00:41:14Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +291,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUseWithCache(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            PackageIdentifier packageIdentifier, DeploymentDocument document) throws PackageLoadingException {\n+        if (parameterAndDependencyCache.containsKey(packageIdentifier)\n+                && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n+            return parameterAndDependencyCache.get(packageIdentifier).getLeft();\n+        }\n+        return resolveParameterValuesToUse(document, packageStore.getPackageRecipe(packageIdentifier));", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex 4ea39283..ab9d40de 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -291,16 +256,6 @@ public class KernelConfigResolver {\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n-    private Set<PackageParameter> resolveParameterValuesToUseWithCache(\n-            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n-            PackageIdentifier packageIdentifier, DeploymentDocument document) throws PackageLoadingException {\n-        if (parameterAndDependencyCache.containsKey(packageIdentifier)\n-                && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n-            return parameterAndDependencyCache.get(packageIdentifier).getLeft();\n-        }\n-        return resolveParameterValuesToUse(document, packageStore.getPackageRecipe(packageIdentifier));\n-    }\n-\n     /*\n      * Resolve values to be used for all package parameters combining those coming from\n      * deployment document, if not, those stored in the kernel config for previous\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MDI3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466080271", "bodyText": "If the getLeft() is an empty set, do you still return it?", "author": "fengwang666", "createdAt": "2020-08-06T00:42:03Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +291,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUseWithCache(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            PackageIdentifier packageIdentifier, DeploymentDocument document) throws PackageLoadingException {\n+        if (parameterAndDependencyCache.containsKey(packageIdentifier)\n+                && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n+            return parameterAndDependencyCache.get(packageIdentifier).getLeft();", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4OTMyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466089325", "bodyText": "Yes, that is legitimate. Currently if a parameter is not declared then it won't have anything interpolated.", "author": "MikeDombo", "createdAt": "2020-08-06T01:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MDI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex 4ea39283..ab9d40de 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -291,16 +256,6 @@ public class KernelConfigResolver {\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n-    private Set<PackageParameter> resolveParameterValuesToUseWithCache(\n-            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n-            PackageIdentifier packageIdentifier, DeploymentDocument document) throws PackageLoadingException {\n-        if (parameterAndDependencyCache.containsKey(packageIdentifier)\n-                && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n-            return parameterAndDependencyCache.get(packageIdentifier).getLeft();\n-        }\n-        return resolveParameterValuesToUse(document, packageStore.getPackageRecipe(packageIdentifier));\n-    }\n-\n     /*\n      * Resolve values to be used for all package parameters combining those coming from\n      * deployment document, if not, those stored in the kernel config for previous\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5Mzg1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466093855", "bodyText": "Is the exception expected? Wouldn't you want to log the exception?", "author": "fengwang666", "createdAt": "2020-08-06T01:33:34Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());\n+            } catch (PackageLoadingException e) {\n+                return false;\n+            }\n+        }\n+        return depSet.contains(canReadFrom.getName());\n+    }\n+\n+    @Nullable\n+    private String crossComponentLookup(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            DeploymentDocument document, PackageIdentifier crossedComponent, String namespace, String key) {\n+        // Handle cross-component system parameters\n+        Map<String, Function<PackageIdentifier, String>> systemParams =\n+                systemParameters.getOrDefault(namespace, Collections.emptyMap());\n+        if (systemParams.containsKey(key)) {\n+            return systemParams.get(key).apply(crossedComponent);\n+        }\n+\n+        // Handle cross-component component parameters\n+        if (namespace.equals(PARAM_NAMESPACE)) {\n+            try {\n+                Set<PackageParameter> resolvedParams =\n+                        resolveParameterValuesToUseWithCache(parameterAndDependencyCache, crossedComponent, document);\n+                Optional<PackageParameter> potentialParameter =\n+                        resolvedParams.stream().filter(p -> (p.getName() + PARAM_VALUE_SUFFIX).equals(key)).findFirst();\n+                if (potentialParameter.isPresent()) {\n+                    return potentialParameter.get().getValue();\n+                }\n+            } catch (PackageLoadingException e) {\n+                return null;", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\nindex 4ea39283..ab9d40de 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java\n\n@@ -202,12 +188,9 @@ public class KernelConfigResolver {\n             String crossComponent = matcher.group(1);\n             Optional<PackageIdentifier> crossComponentIdentifier =\n                     packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n-\n-            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n-                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n-                String replacement =\n-                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n-                                matcher.group(2), matcher.group(3));\n+            if (crossComponentIdentifier.isPresent()) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n                 if (replacement != null) {\n                     stringValue = stringValue.replace(matcher.group(), replacement);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5NDU1Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466094552", "bodyText": "Do we want to add some additional test cases that cover error scenarios? e.g. the parameter value is not provided, or a wrong format of the placeholder is provided.", "author": "fengwang666", "createdAt": "2020-08-06T01:35:36Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -214,6 +228,59 @@ void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_\n                 equalTo(\"echo running service in Package \" + \"PackageA with param PackageA_Param_2_default_value\"));\n     }\n \n+    @Test\n+    void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_cross_component_parameters_should_be_interpolated()", "originalCommit": "185c21cf47dba46af807b9a607aafd00b4a06795", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ca7be6e05982b16ceea3dc7ccfcdefd0d98706a", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java b/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\nindex cf52b1b6..7a8ea7d3 100644\n--- a/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java\n\n@@ -236,13 +243,17 @@ class KernelConfigResolverTest {\n                 new PackageIdentifier(TEST_INPUT_PACKAGE_A, new Semver(\"1.2\", Semver.SemverType.NPM));\n         PackageIdentifier package2 =\n                 new PackageIdentifier(TEST_INPUT_PACKAGE_B, new Semver(\"1.5\", Semver.SemverType.NPM));\n-        List<PackageIdentifier> packagesToDeploy = Arrays.asList(rootPackageIdentifier, package2);\n+        PackageIdentifier package3 =\n+                new PackageIdentifier(TEST_INPUT_PACKAGE_C, new Semver(\"1.5\", Semver.SemverType.NPM));\n+        List<PackageIdentifier> packagesToDeploy = Arrays.asList(rootPackageIdentifier, package2, package3);\n \n         PackageRecipe rootPackageRecipe = getPackage(TEST_INPUT_PACKAGE_A, \"1.2\", Collections.emptyMap(),\n                 getSimpleParameterMap(TEST_INPUT_PACKAGE_A), TEST_INPUT_PACKAGE_A);\n         PackageRecipe package2Recipe = getPackage(TEST_INPUT_PACKAGE_B, \"1.5\", Utils.immutableMap(TEST_INPUT_PACKAGE_A,\n                 new RecipeDependencyProperties(\"=1.2\", DependencyType.HARD.toString())),\n                 getSimpleParameterMap(TEST_INPUT_PACKAGE_B), TEST_INPUT_PACKAGE_A);\n+        PackageRecipe package3Recipe = getPackage(TEST_INPUT_PACKAGE_C, \"1.5\", Collections.emptyMap(),\n+                getSimpleParameterMap(TEST_INPUT_PACKAGE_C), TEST_INPUT_PACKAGE_A);\n \n         DeploymentPackageConfiguration rootPackageDeploymentConfig =\n                 new DeploymentPackageConfiguration(TEST_INPUT_PACKAGE_A, true, \"1.2\", new HashMap<String, Object>() {{\n"}}, {"oid": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/81772a8787b50d0649a0656d9fdd6562c2a49a61", "message": "Support cross-component parameters (no auth)", "committedDate": "2020-08-06T02:32:21Z", "type": "commit"}, {"oid": "9c66a0e5a3657dc63d325624f8111cdb22f4a00b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9c66a0e5a3657dc63d325624f8111cdb22f4a00b", "message": "Add auth so that components can only read from their direct dependencies", "committedDate": "2020-08-06T02:32:21Z", "type": "commit"}, {"oid": "5b9dee2a66b4fda6161bcaec5e841bbab2b4d1f2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5b9dee2a66b4fda6161bcaec5e841bbab2b4d1f2", "message": "Cache only parameters and dependencies", "committedDate": "2020-08-06T02:32:21Z", "type": "commit"}, {"oid": "6ca7be6e05982b16ceea3dc7ccfcdefd0d98706a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6ca7be6e05982b16ceea3dc7ccfcdefd0d98706a", "message": "Address comments", "committedDate": "2020-08-06T02:32:22Z", "type": "forcePushed"}, {"oid": "76d92bf9760a204c14f4ad52edb244dc61cd17d3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/76d92bf9760a204c14f4ad52edb244dc61cd17d3", "message": "Address comments", "committedDate": "2020-08-06T02:36:18Z", "type": "forcePushed"}, {"oid": "97c21544d9ec07ed6e879d56486821cdd49918fd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/97c21544d9ec07ed6e879d56486821cdd49918fd", "message": "Address comments", "committedDate": "2020-08-06T02:41:42Z", "type": "forcePushed"}, {"oid": "f152e8d2b104978f279b153f41994ad0db2206da", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f152e8d2b104978f279b153f41994ad0db2206da", "message": "Address comments", "committedDate": "2020-08-06T02:49:45Z", "type": "commit"}, {"oid": "f152e8d2b104978f279b153f41994ad0db2206da", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f152e8d2b104978f279b153f41994ad0db2206da", "message": "Address comments", "committedDate": "2020-08-06T02:49:45Z", "type": "forcePushed"}, {"oid": "98c76de68811ec205a17b74b359a8a4f9fcb8707", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/98c76de68811ec205a17b74b359a8a4f9fcb8707", "message": "Simplify parameter interpolation", "committedDate": "2020-08-06T03:27:44Z", "type": "forcePushed"}, {"oid": "ade2b48870b099b95ccb0bec035f53d8b46c37ff", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ade2b48870b099b95ccb0bec035f53d8b46c37ff", "message": "Simplify parameter interpolation", "committedDate": "2020-08-06T03:45:43Z", "type": "commit"}, {"oid": "ade2b48870b099b95ccb0bec035f53d8b46c37ff", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ade2b48870b099b95ccb0bec035f53d8b46c37ff", "message": "Simplify parameter interpolation", "committedDate": "2020-08-06T03:45:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzOTMyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466139320", "bodyText": "Thanks for fixing it!", "author": "fengwang666", "createdAt": "2020-08-06T04:31:10Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -102,8 +102,10 @@ public static String exit2String(int exitCode) {\n \n     @Override\n     public void postInject() {\n-        super.postInject();\n+        // Register token before calling super so that the token is available when the lifecyle thread\n+        // starts running\n         AuthenticationHandler.registerAuthToken(this);\n+        super.postInject();", "originalCommit": "ade2b48870b099b95ccb0bec035f53d8b46c37ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}