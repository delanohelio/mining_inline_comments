{"pr_number": 389, "pr_title": "Add logic for resolving current platform and findBestMatch platform", "pr_createdAt": "2020-08-26T05:03:25Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2Mjk1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477462953", "bodyText": "Another way is that we define OS as enums and every enum has a children fields. Personally I think that's cleaner. But I'm good with merging this as first iteration.", "author": "leaf94", "createdAt": "2020-08-26T17:19:35Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.aws.iot.evergreen.packagemanager.common.Platform.ALL_KEYWORD;\n+\n+public final class PlatformHelper {\n+\n+    public static final OS OS_ALL = new OS(null, ALL_KEYWORD);\n+    public static final OS OS_WINDOWS = OS_ALL.addChild(\"windows\");\n+    public static final OS OS_UNIX = OS_ALL.addChild(\"unix\");\n+    public static final OS OS_LINUX = OS_UNIX.addChild(\"linux\");\n+    public static final OS OS_FEDORA = OS_LINUX.addChild(\"fedora\");\n+    public static final OS OS_DEBIAN = OS_LINUX.addChild(\"debian\");\n+    public static final OS OS_UBUNTU = OS_DEBIAN.addChild(\"ubuntu\");\n+    public static final OS OS_RASPBIAN = OS_DEBIAN.addChild(\"raspbian\");\n+    public static final OS OS_DARWIN = OS_UNIX.addChild(\"darwin\");\n+    public static final OS OS_MAC_OS = OS_DARWIN.addChild(\"macOs\");", "originalCommit": "ba7fa04e9b368ba636cf8909c7dfd51158f9ae05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7ccc9c14c0e00e5aa5c6c863e088f2c74a64bfc", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java b/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java\nindex a244563c07..15ab9ff62f 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java\n\n@@ -3,7 +3,6 @@ package com.aws.iot.evergreen.packagemanager.common;\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n"}}, {"oid": "b3b5bfc11fb33b0d777000d0c9ad778a42419b65", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b3b5bfc11fb33b0d777000d0c9ad778a42419b65", "message": "Add logic for resolving current platform and findBestMatch platform\n\nfindBestMatch functions will be moved to the common model between local and cloud.", "committedDate": "2020-08-26T18:30:25Z", "type": "commit"}, {"oid": "d7ccc9c14c0e00e5aa5c6c863e088f2c74a64bfc", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d7ccc9c14c0e00e5aa5c6c863e088f2c74a64bfc", "message": "Address comments", "committedDate": "2020-08-26T18:30:25Z", "type": "commit"}, {"oid": "d7ccc9c14c0e00e5aa5c6c863e088f2c74a64bfc", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d7ccc9c14c0e00e5aa5c6c863e088f2c74a64bfc", "message": "Address comments", "committedDate": "2020-08-26T18:30:25Z", "type": "forcePushed"}, {"oid": "92c19249289e4cc0f014169ee493f0612a780a05", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/92c19249289e4cc0f014169ee493f0612a780a05", "message": "change integ test coverage to pass on Windows", "committedDate": "2020-08-26T19:20:28Z", "type": "commit"}, {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2c9af6e8b267383a02e5e751aee0fb48936f53e8", "message": "Merge branch 'master' into platform_resolv", "committedDate": "2020-08-26T20:43:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwODE5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477708192", "bodyText": "This is very counter-intuitive...\nI'd rather iterate through the recipeList and filter out the non-matching architecture.\nIn a nutshell, I think we could do\nrecipeList\n.filter(matchArch(platform.getArch))\n.filter(matchOS(platform.getOs))\n.sort(byOsRank())\n.findFirst()", "author": "leaf94", "createdAt": "2020-08-26T23:52:44Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.aws.iot.evergreen.packagemanager.common.Platform.ALL_KEYWORD;\n+\n+public final class PlatformHelper {\n+\n+    public static final Collection<OS> OS_SUPPORTED = OS.ALL.getChildrenRecursively();\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        List<String> architecturesToCheck;\n+        if (currentPlatform.getArchitecture() == null) {\n+            architecturesToCheck = Collections.singletonList(ALL_KEYWORD);\n+        } else {\n+            architecturesToCheck = Arrays.asList(currentPlatform.getArchitecture(), ALL_KEYWORD);\n+        }\n+\n+        for (String arch : architecturesToCheck) {\n+            // filter matching architecture", "originalCommit": "2c9af6e8b267383a02e5e751aee0fb48936f53e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c91ec9648e0fca24a072a167753721e88451c3b9", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java b/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java\nindex 15ab9ff62f..77e55bb6fe 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java\n\n@@ -1,23 +1,13 @@\n package com.aws.iot.evergreen.packagemanager.common;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n \n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import static com.aws.iot.evergreen.packagemanager.common.Platform.ALL_KEYWORD;\n \n public final class PlatformHelper {\n \n-    public static final Collection<OS> OS_SUPPORTED = OS.ALL.getChildrenRecursively();\n-\n     private PlatformHelper() {\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwOTI3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477709276", "bodyText": "Also any.", "author": "leaf94", "createdAt": "2020-08-26T23:53:27Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.aws.iot.evergreen.packagemanager.common.Platform.ALL_KEYWORD;\n+\n+public final class PlatformHelper {\n+\n+    public static final Collection<OS> OS_SUPPORTED = OS.ALL.getChildrenRecursively();\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        List<String> architecturesToCheck;\n+        if (currentPlatform.getArchitecture() == null) {\n+            architecturesToCheck = Collections.singletonList(ALL_KEYWORD);\n+        } else {\n+            architecturesToCheck = Arrays.asList(currentPlatform.getArchitecture(), ALL_KEYWORD);\n+        }\n+\n+        for (String arch : architecturesToCheck) {\n+            // filter matching architecture\n+            List<PlatformSpecificManifest> candidateRecipes = recipeList.stream().filter(r -> {\n+                if (!ALL_KEYWORD.equalsIgnoreCase(arch)) {\n+                    return r.getPlatform() != null && arch.equalsIgnoreCase(r.getPlatform().getArchitecture());\n+                }\n+                return r.getPlatform() == null\n+                        || r.getPlatform().getArchitecture() == null\n+                        || ALL_KEYWORD.equalsIgnoreCase(r.getPlatform().getArchitecture());\n+            }).collect(Collectors.toList());\n+\n+            // match os in rank\n+            OS currentOS = OS_SUPPORTED.stream()\n+                    .filter(r -> r.getName().equalsIgnoreCase(currentPlatform.getOs()))\n+                    .findFirst().orElse(null);\n+\n+            while (currentOS != null && !OS.ALL.equals(currentOS)) {\n+                OS osToCheck = currentOS;\n+                Optional<PlatformSpecificManifest> recipe = candidateRecipes.stream()\n+                        .filter(r -> r.getPlatform() != null\n+                                && osToCheck.getName().equalsIgnoreCase(r.getPlatform().getOs()))\n+                        // TODO: filter version match\n+                        .findFirst();\n+                if (recipe.isPresent()) {\n+                    return recipe;\n+                }\n+                // if can't find match for current OS, search a more generic one\n+                currentOS = currentOS.parent;\n+            }\n+\n+            // if no match find, try to match the 'all'.\n+            Optional<PlatformSpecificManifest> recipe = candidateRecipes.stream()\n+                    .filter(r -> r.getPlatform() == null || r.getPlatform().getOs() == null\n+                            || r.getPlatform().getOs().equalsIgnoreCase(ALL_KEYWORD))\n+                    // TODO: filter version match\n+                    .findFirst();\n+\n+            if (recipe.isPresent()) {\n+                return recipe;\n+            }\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Find the higher rank (more specific one) between OS info. This doesn't check the two OS are on the same branch.\n+     * @param thisOS this\n+     * @param other other\n+     * @return higer rank OS\n+     */\n+    public static OS findMoreSpecificOS(OS thisOS, OS other) {\n+        if (thisOS == null) {\n+            return other;\n+        }\n+        if (other == null) {\n+            return thisOS;\n+        }\n+        if (other.getRank() > thisOS.getRank()) {\n+            return other;\n+        }\n+        return thisOS;\n+    }\n+\n+    /**\n+     * Non customer-facing class. Keeps the OS hierarchy data.\n+     */\n+    @Getter\n+    public enum OS {\n+        ALL(null, ALL_KEYWORD),\n+        WINDOWS(ALL, \"windows\"),\n+        UNIX(ALL, \"unix\"),\n+        LINUX(UNIX, \"linux\"),\n+        FEDORA(LINUX, \"fedora\"),\n+        DEBIAN(LINUX, \"debian\"),\n+        UBUNTU(DEBIAN, \"ubuntu\"),\n+        RASPBIAN(DEBIAN, \"raspbian\"),\n+        DARWIN(UNIX, \"darwin\"),\n+        MAC_OS(DARWIN, \"macOS\");\n+\n+        private final OS parent;\n+        private final String name;\n+        private final Collection<OS> children;\n+        private final int rank;\n+\n+        OS(OS parent, String name) {\n+            this.parent = parent;\n+            this.name = name;\n+            this.children = new HashSet<>();\n+            if (parent == null) {\n+                this.rank = 0;\n+            } else {\n+                this.rank = parent.getRank() + 1;\n+                parent.getChildren().add(this);\n+            }\n+        }\n+\n+        Set<OS> getChildrenRecursively() {\n+            Set<OS> result = new HashSet<>(children);\n+            for (OS child: children) {\n+                result.addAll(child.getChildrenRecursively());\n+            }\n+            return result;\n+        }\n+    }\n+\n+    /**\n+     * Non customer-facing class. Currently only has name field.\n+     */\n+    @Getter\n+    @AllArgsConstructor\n+    public enum Architecture {\n+        ALL(ALL_KEYWORD), AMD64(\"amd64\"), ARM(\"arm\");", "originalCommit": "2c9af6e8b267383a02e5e751aee0fb48936f53e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c91ec9648e0fca24a072a167753721e88451c3b9", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java b/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java\nindex 15ab9ff62f..77e55bb6fe 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java\n\n@@ -1,23 +1,13 @@\n package com.aws.iot.evergreen.packagemanager.common;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n \n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import static com.aws.iot.evergreen.packagemanager.common.Platform.ALL_KEYWORD;\n \n public final class PlatformHelper {\n \n-    public static final Collection<OS> OS_SUPPORTED = OS.ALL.getChildrenRecursively();\n-\n     private PlatformHelper() {\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcxMjI3Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477712272", "bodyText": "We can now use Enum here. With @Builder.Default = ALL. so that we don't have to deal with null case specially.", "author": "leaf94", "createdAt": "2020-08-26T23:55:26Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java", "diffHunk": "@@ -14,8 +14,9 @@\n @Builder\n @Value\n public class Platform {\n+    public static final String ALL_KEYWORD = \"all\";\n     String os;\n-    //    String osVersion;\n+    // String osVersion;\n     String architecture;", "originalCommit": "2c9af6e8b267383a02e5e751aee0fb48936f53e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c91ec9648e0fca24a072a167753721e88451c3b9", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java b/src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java\nindex f695660072..56981640ab 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java\n\n@@ -5,21 +5,139 @@\n \n package com.aws.iot.evergreen.packagemanager.common;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n+import lombok.Getter;\n import lombok.Value;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n+\n @JsonDeserialize(builder = Platform.PlatformBuilder.class)\n @Builder\n @Value\n public class Platform {\n     public static final String ALL_KEYWORD = \"all\";\n-    String os;\n+\n+    @Builder.Default\n+    OS os = OS.ALL;\n     // String osVersion;\n-    String architecture;\n+    @Builder.Default\n+    Architecture architecture = Architecture.ALL;\n \n     @JsonPOJOBuilder(withPrefix = \"\")\n     public static class PlatformBuilder {\n     }\n+\n+    /**\n+     * Non customer-facing class. Keeps the OS hierarchy data.\n+     */\n+    @Getter\n+    public enum OS {\n+        ALL(null, ALL_KEYWORD),\n+        WINDOWS(ALL, \"windows\"),\n+        UNIX(ALL, \"unix\"),\n+        LINUX(UNIX, \"linux\"),\n+        FEDORA(LINUX, \"fedora\"),\n+        DEBIAN(LINUX, \"debian\"),\n+        UBUNTU(DEBIAN, \"ubuntu\"),\n+        RASPBIAN(DEBIAN, \"raspbian\"),\n+        DARWIN(UNIX, \"darwin\"),\n+        MAC_OS(DARWIN, \"macOS\");\n+\n+        @JsonValue\n+        private final String name;\n+        private final OS parent;\n+        private final Collection<OS> children;\n+        private final int rank;\n+\n+        OS(OS parent, String name) {\n+            this.parent = parent;\n+            this.name = name;\n+            this.children = new HashSet<>();\n+            if (parent == null) {\n+                this.rank = 0;\n+            } else {\n+                this.rank = parent.getRank() + 1;\n+                parent.getChildren().add(this);\n+            }\n+        }\n+\n+        /**\n+         * get OS enum from string value. Ignore case.\n+         * Unrecognized values will map to OS.ALL\n+         * @param value String of OS\n+         * @return OS enum\n+         */\n+        @JsonCreator\n+        public static OS getOS(String value) {\n+            // \"any\" and \"all\" keyword are both accepted in recipe.\n+            if (\"any\".equalsIgnoreCase(value)) {\n+                return OS.ALL;\n+            }\n+\n+            for (OS os : values()) {\n+                if (os.getName().equalsIgnoreCase(value)) {\n+                    return os;\n+                }\n+            }\n+            // TODO: throw exception of unrecognized OS\n+            return OS.ALL;\n+        }\n+    }\n+\n+    /**\n+     * Non customer-facing class. Currently only has name field.\n+     */\n+    @Getter\n+    @AllArgsConstructor\n+    public enum Architecture {\n+        ALL(null, ALL_KEYWORD),\n+        AMD64(ALL, \"amd64\"),\n+        ARM(ALL, \"arm\");\n+\n+        @JsonValue\n+        private final String name;\n+        private final Architecture parent;\n+        private final Collection<Architecture> children;\n+        private final int rank;\n+\n+        Architecture(Architecture parent, String name) {\n+            this.parent = parent;\n+            this.name = name;\n+            this.children = new HashSet<>();\n+            if (parent == null) {\n+                this.rank = 0;\n+            } else {\n+                this.rank = parent.getRank() + 1;\n+                parent.getChildren().add(this);\n+            }\n+        }\n+\n+        /**\n+         * get Architecture enum from string value. Ignore case.\n+         * Unrecognized values will map to Architecture.ALL\n+         * @param value String of Architecture\n+         * @return Architecture enum\n+         */\n+        @JsonCreator\n+        public static Architecture getArch(String value) {\n+            if (\"any\".equalsIgnoreCase(value)) {\n+                // \"any\" and \"all\" keyword are both accepted in recipe.\n+                return Architecture.ALL;\n+            }\n+\n+            for (Architecture arch : values()) {\n+                if (arch.getName().equalsIgnoreCase(value)) {\n+                    return arch;\n+                }\n+            }\n+            // TODO: throw exception\n+            return Architecture.ALL;\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcyMTgyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477721820", "bodyText": "In this case, the architecture should be NOT_RECOGNIZED which isn't ALL.\nBecause ALL is a requirement, it's technically not an architecture. But NOT_RECOGNIZED is one, which could satisfy All as a requirement.", "author": "leaf94", "createdAt": "2020-08-27T00:01:47Z", "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -87,16 +119,77 @@\n         return ranks;\n     }\n \n+    @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+    private static OS getOSInfo() throws IOException, InterruptedException {\n+        if (isWindows) {\n+            return OS.WINDOWS;\n+        }\n+\n+        OS currentOS = OS.ALL;\n+        String sysver = Exec.sh(\"uname -a\").toLowerCase();\n+        String osNameFromSysProperty = System.getProperty(\"os.name\").toLowerCase();\n+\n+        if (Files.exists(Paths.get(\"/bin/sh\")) || Files.exists(Paths.get(\"/usr/bin/sh\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.UNIX);\n+        }\n+        if (sysver.contains(\"darwin\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.DARWIN);\n+        }\n+        if (osNameFromSysProperty.replaceAll(\"\\\\s\",\"\").contains(\"macos\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.MAC_OS);\n+        }\n+        if (Files.exists(Paths.get(\"/proc\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.LINUX);\n+        }\n+        if (Files.exists(Paths.get(\"/usr/bin/yum\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.FEDORA);\n+        }\n+        if (Files.exists(Paths.get(\"/usr/bin/apt-get\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.DEBIAN);\n+        }\n+        if (sysver.contains(\"raspbian\") || sysver.contains(\"raspberry\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.RASPBIAN);\n+        }\n+        if (sysver.contains(\"ubuntu\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.UBUNTU);\n+        }\n+\n+        return currentOS;\n+    }\n+\n+    private static Architecture getArchInfo() {\n+        String arch = System.getProperty(\"os.arch\").toLowerCase();\n+        if (\"x86_64\".equals(arch) || \"amd64\".equals(arch)) {\n+            return Architecture.AMD64; // x86_64 & amd64 are same\n+        }\n+        if (arch.contains(\"arm\")) {\n+            return Architecture.ARM;\n+        }\n+        return Architecture.ALL;", "originalCommit": "2c9af6e8b267383a02e5e751aee0fb48936f53e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc1ODExMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477758112", "bodyText": "Ignore or add a TODO for now. This could be optimized later and doesn't affect any behavior.", "author": "leaf94", "createdAt": "2020-08-27T00:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcyMTgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODExNjk5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478116995", "bodyText": "I don't know if NOT_RECOGNIZED should be one of the enum. because \"all\"/\"any\" can appear in recipe but NOT_RECOGNIZED isn't part of recipe.", "author": "ShirleyZheng92", "createdAt": "2020-08-27T04:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcyMTgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NzA4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478657088", "bodyText": "IMO, the function can return 'not recognized', the function caller could throw exception, it means we can't work on your device yet.", "author": "wikimonkey", "createdAt": "2020-08-27T19:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcyMTgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c91ec9648e0fca24a072a167753721e88451c3b9", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java b/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\nindex b778e2b05a..1be858475d 100644\n--- a/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\n+++ b/src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java\n\n@@ -125,6 +125,7 @@ public final class PlatformResolver {\n             return OS.WINDOWS;\n         }\n \n+        // TODO: use UNRECOGNIZED instead.\n         OS currentOS = OS.ALL;\n         String sysver = Exec.sh(\"uname -a\").toLowerCase();\n         String osNameFromSysProperty = System.getProperty(\"os.name\").toLowerCase();\n"}}, {"oid": "c91ec9648e0fca24a072a167753721e88451c3b9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c91ec9648e0fca24a072a167753721e88451c3b9", "message": "Address comments", "committedDate": "2020-08-27T02:52:00Z", "type": "commit"}, {"oid": "c91ec9648e0fca24a072a167753721e88451c3b9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c91ec9648e0fca24a072a167753721e88451c3b9", "message": "Address comments", "committedDate": "2020-08-27T02:52:00Z", "type": "forcePushed"}, {"oid": "2f84aa3e51908d15eee54bb616f6eaeb09ff8b84", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2f84aa3e51908d15eee54bb616f6eaeb09ff8b84", "message": "Merge branch 'master' into platform_resolv", "committedDate": "2020-08-27T02:52:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMDM4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478520384", "bodyText": "Nice!", "author": "leaf94", "createdAt": "2020-08-27T15:48:14Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class PlatformHelper {\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        return recipeList.stream()\n+                .filter(r -> {\n+                    // match arch\n+                    if (r.getPlatform() == null || r.getPlatform().getArchitecture() == null\n+                            || r.getPlatform().getArchitecture().equals(Architecture.ALL)) {\n+                        return true;\n+                    }\n+                    Architecture currentArch = currentPlatform.getArchitecture();\n+                    while (!Architecture.ALL.equals(currentArch)) {\n+                        if (currentArch.equals(r.getPlatform().getArchitecture())) {\n+                            return true;\n+                        }\n+                        currentArch = currentArch.getParent();\n+                    }\n+                    return false;\n+                })\n+                .filter(r -> {\n+                    // match os\n+                    if (r.getPlatform() == null || r.getPlatform().getOs() == null\n+                        || r.getPlatform().getOs().equals(OS.ALL)) {\n+                        return true;\n+                    }\n+                    OS currentOS = currentPlatform.getOs();\n+                    while (!currentOS.equals(OS.ALL)) {\n+                        if (currentOS.equals(r.getPlatform().getOs())) {\n+                            return true;\n+                        }\n+                        currentOS = currentOS.getParent();\n+                    }\n+                    return false;\n+                })\n+                .max((o1, o2) -> {\n+                    if (o1.getPlatform() == null) {\n+                        return -1;\n+                    }\n+                    if (o2.getPlatform() == null) {\n+                        return 1;\n+                    }\n+                    // getPlatform().getArch() shouldn't return null after parsing from recipe\n+                    // Having null check just in case", "originalCommit": "2f84aa3e51908d15eee54bb616f6eaeb09ff8b84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMDY4OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478520689", "bodyText": "nit - separate a method like matchOS for even better readability and maintainability.", "author": "leaf94", "createdAt": "2020-08-27T15:48:43Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class PlatformHelper {\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        return recipeList.stream()\n+                .filter(r -> {\n+                    // match arch\n+                    if (r.getPlatform() == null || r.getPlatform().getArchitecture() == null\n+                            || r.getPlatform().getArchitecture().equals(Architecture.ALL)) {\n+                        return true;\n+                    }\n+                    Architecture currentArch = currentPlatform.getArchitecture();\n+                    while (!Architecture.ALL.equals(currentArch)) {\n+                        if (currentArch.equals(r.getPlatform().getArchitecture())) {\n+                            return true;\n+                        }\n+                        currentArch = currentArch.getParent();\n+                    }\n+                    return false;\n+                })", "originalCommit": "2f84aa3e51908d15eee54bb616f6eaeb09ff8b84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMTQ1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478521458", "bodyText": "Maybe use the real SerializerFactory.getRecipeSerializer so that we make sure this test's result is consistent with source code.", "author": "leaf94", "createdAt": "2020-08-27T15:49:55Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/common/PlatformTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class PlatformTest {\n+    ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper(new JsonFactory()).configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n+                    .setSerializationInclusion(JsonInclude.Include.NON_NULL);", "originalCommit": "2f84aa3e51908d15eee54bb616f6eaeb09ff8b84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4MTY4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478581687", "bodyText": "That serializer is Yaml, I personally prefer using Json since it's cleaner in String :)", "author": "ShirleyZheng92", "createdAt": "2020-08-27T17:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMTQ1OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "message": "Merge branch 'master' into platform_resolv", "committedDate": "2020-08-27T15:50:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMzAyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478523022", "bodyText": "For the helper method, it could be simplified to be Optional.ofNullable(arch).getOrDefault(ALL)", "author": "leaf94", "createdAt": "2020-08-27T15:52:18Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class PlatformHelper {\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        return recipeList.stream()\n+                .filter(r -> {\n+                    // match arch\n+                    if (r.getPlatform() == null || r.getPlatform().getArchitecture() == null\n+                            || r.getPlatform().getArchitecture().equals(Architecture.ALL)) {\n+                        return true;\n+                    }\n+                    Architecture currentArch = currentPlatform.getArchitecture();\n+                    while (!Architecture.ALL.equals(currentArch)) {\n+                        if (currentArch.equals(r.getPlatform().getArchitecture())) {\n+                            return true;\n+                        }\n+                        currentArch = currentArch.getParent();\n+                    }\n+                    return false;\n+                })\n+                .filter(r -> {\n+                    // match os\n+                    if (r.getPlatform() == null || r.getPlatform().getOs() == null\n+                        || r.getPlatform().getOs().equals(OS.ALL)) {\n+                        return true;\n+                    }\n+                    OS currentOS = currentPlatform.getOs();\n+                    while (!currentOS.equals(OS.ALL)) {\n+                        if (currentOS.equals(r.getPlatform().getOs())) {\n+                            return true;\n+                        }\n+                        currentOS = currentOS.getParent();\n+                    }\n+                    return false;\n+                })\n+                .max((o1, o2) -> {\n+                    if (o1.getPlatform() == null) {\n+                        return -1;\n+                    }\n+                    if (o2.getPlatform() == null) {\n+                        return 1;\n+                    }\n+                    // getPlatform().getArch() shouldn't return null after parsing from recipe\n+                    // Having null check just in case\n+                    Architecture o1Arch = getOrDefault(o1.getPlatform().getArchitecture(), Architecture.ALL);\n+                    Architecture o2Arch = getOrDefault(o2.getPlatform().getArchitecture(), Architecture.ALL);\n+\n+                    if (o1Arch.getRank() != o2Arch.getRank()) {\n+                        return o1Arch.getRank() < o2Arch.getRank() ? -1 : 1;\n+                    }\n+\n+                    OS o1Os = getOrDefault(o1.getPlatform().getOs(), OS.ALL);\n+                    OS o2Os = getOrDefault(o2.getPlatform().getOs(), OS.ALL);\n+                    return Integer.compare(o1Os.getRank(), o2Os.getRank());\n+                });\n+    }\n+\n+    private static <T> T getOrDefault(T getValue, T defaultValue) {\n+        if (getValue == null) {\n+            return defaultValue;\n+        }\n+        return getValue;\n+    }\n+", "originalCommit": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4MDUwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478580509", "bodyText": "AH. Thanks for reminding!", "author": "ShirleyZheng92", "createdAt": "2020-08-27T17:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMzAyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0Nzg1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478647851", "bodyText": "I remember Ethan removed final for mocking it. Should we avoid going back and forth?", "author": "wikimonkey", "createdAt": "2020-08-27T19:31:40Z", "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -20,19 +24,45 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-public class PlatformResolver {\n+import static com.aws.iot.evergreen.packagemanager.common.PlatformHelper.findMoreSpecificOS;\n+\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\"})\n+public final class PlatformResolver {", "originalCommit": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MzEwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478653100", "bodyText": "Recommend to avoid importing static method for readability.", "author": "wikimonkey", "createdAt": "2020-08-27T19:42:02Z", "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -20,19 +24,45 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-public class PlatformResolver {\n+import static com.aws.iot.evergreen.packagemanager.common.PlatformHelper.findMoreSpecificOS;", "originalCommit": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MzgwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478653807", "bodyText": "Should we fail if can't acquire platform info. Falling back to 'all' could be dangerous.", "author": "wikimonkey", "createdAt": "2020-08-27T19:43:22Z", "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -20,19 +24,45 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-public class PlatformResolver {\n+import static com.aws.iot.evergreen.packagemanager.common.PlatformHelper.findMoreSpecificOS;\n+\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\"})\n+public final class PlatformResolver {\n+    public static final boolean isWindows = System.getProperty(\"os.name\").toLowerCase().contains(\"wind\");\n     private static final Set<String> SUPPORTED_PLATFORMS = Collections.unmodifiableSet(initializeSupportedPlatforms());\n     private static final Logger logger = LogManager.getLogger(PlatformResolver.class);\n     public static final AtomicReference<Map<String, Integer>> RANKS =\n             new AtomicReference<>(Collections.unmodifiableMap(initializeRanks()));\n \n+    public static final Platform CURRENT_PLATFORM = initializePlatformInfo();\n+\n+    private static Platform initializePlatformInfo() {\n+        try {\n+            return Platform.builder()\n+                    .os(getOSInfo())\n+                    .architecture(getArchInfo())\n+                    .build();\n+        } catch (InterruptedException | IOException e) {\n+            // TODO: Better err handling\n+            logger.atError().setCause(e).log(\"Fail to read platform info\");\n+            return Platform.builder()", "originalCommit": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NTc1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478655754", "bodyText": "Again, I think default to 'ALL' is dangerous. Also can we switch to keyword 'any'?", "author": "wikimonkey", "createdAt": "2020-08-27T19:46:57Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java", "diffHunk": "@@ -5,20 +5,139 @@\n \n package com.aws.iot.evergreen.packagemanager.common;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n+import lombok.Getter;\n import lombok.Value;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n+\n @JsonDeserialize(builder = Platform.PlatformBuilder.class)\n @Builder\n @Value\n public class Platform {\n-    String os;\n-    //    String osVersion;\n-    String architecture;\n+    public static final String ALL_KEYWORD = \"all\";\n+\n+    @Builder.Default\n+    OS os = OS.ALL;", "originalCommit": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxOTAwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478719009", "bodyText": "ALL and ANY are functionally the same. I can rename this Enum to ANY", "author": "ShirleyZheng92", "createdAt": "2020-08-27T21:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NTc1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1ODcyNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478658726", "bodyText": "I see, you take any keyword here.", "author": "wikimonkey", "createdAt": "2020-08-27T19:52:41Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java", "diffHunk": "@@ -5,20 +5,139 @@\n \n package com.aws.iot.evergreen.packagemanager.common;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n+import lombok.Getter;\n import lombok.Value;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n+\n @JsonDeserialize(builder = Platform.PlatformBuilder.class)\n @Builder\n @Value\n public class Platform {\n-    String os;\n-    //    String osVersion;\n-    String architecture;\n+    public static final String ALL_KEYWORD = \"all\";\n+\n+    @Builder.Default\n+    OS os = OS.ALL;\n+    // String osVersion;\n+    @Builder.Default\n+    Architecture architecture = Architecture.ALL;\n \n     @JsonPOJOBuilder(withPrefix = \"\")\n     public static class PlatformBuilder {\n     }\n+\n+    /**\n+     * Non customer-facing class. Keeps the OS hierarchy data.\n+     */\n+    @Getter\n+    public enum OS {\n+        ALL(null, ALL_KEYWORD),\n+        WINDOWS(ALL, \"windows\"),\n+        UNIX(ALL, \"unix\"),\n+        LINUX(UNIX, \"linux\"),\n+        FEDORA(LINUX, \"fedora\"),\n+        DEBIAN(LINUX, \"debian\"),\n+        UBUNTU(DEBIAN, \"ubuntu\"),\n+        RASPBIAN(DEBIAN, \"raspbian\"),\n+        DARWIN(UNIX, \"darwin\"),\n+        MAC_OS(DARWIN, \"macOS\");\n+\n+        @JsonValue\n+        private final String name;\n+        private final OS parent;\n+        private final Collection<OS> children;\n+        private final int rank;\n+\n+        OS(OS parent, String name) {\n+            this.parent = parent;\n+            this.name = name;\n+            this.children = new HashSet<>();\n+            if (parent == null) {\n+                this.rank = 0;\n+            } else {\n+                this.rank = parent.getRank() + 1;\n+                parent.getChildren().add(this);\n+            }\n+        }\n+\n+        /**\n+         * get OS enum from string value. Ignore case.\n+         * Unrecognized values will map to OS.ALL\n+         * @param value String of OS\n+         * @return OS enum\n+         */\n+        @JsonCreator\n+        public static OS getOS(String value) {\n+            // \"any\" and \"all\" keyword are both accepted in recipe.\n+            if (\"any\".equalsIgnoreCase(value)) {", "originalCommit": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4NDM4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478684385", "bodyText": "Does it mean architecture taking precedence?", "author": "wikimonkey", "createdAt": "2020-08-27T20:43:45Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class PlatformHelper {\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        return recipeList.stream()\n+                .filter(r -> {\n+                    // match arch\n+                    if (r.getPlatform() == null || r.getPlatform().getArchitecture() == null\n+                            || r.getPlatform().getArchitecture().equals(Architecture.ALL)) {\n+                        return true;\n+                    }\n+                    Architecture currentArch = currentPlatform.getArchitecture();\n+                    while (!Architecture.ALL.equals(currentArch)) {\n+                        if (currentArch.equals(r.getPlatform().getArchitecture())) {\n+                            return true;\n+                        }\n+                        currentArch = currentArch.getParent();\n+                    }\n+                    return false;\n+                })\n+                .filter(r -> {\n+                    // match os\n+                    if (r.getPlatform() == null || r.getPlatform().getOs() == null\n+                        || r.getPlatform().getOs().equals(OS.ALL)) {\n+                        return true;\n+                    }\n+                    OS currentOS = currentPlatform.getOs();\n+                    while (!currentOS.equals(OS.ALL)) {\n+                        if (currentOS.equals(r.getPlatform().getOs())) {\n+                            return true;\n+                        }\n+                        currentOS = currentOS.getParent();\n+                    }\n+                    return false;\n+                })\n+                .max((o1, o2) -> {\n+                    if (o1.getPlatform() == null) {\n+                        return -1;\n+                    }\n+                    if (o2.getPlatform() == null) {\n+                        return 1;\n+                    }\n+                    // getPlatform().getArch() shouldn't return null after parsing from recipe\n+                    // Having null check just in case\n+                    Architecture o1Arch = getOrDefault(o1.getPlatform().getArchitecture(), Architecture.ALL);\n+                    Architecture o2Arch = getOrDefault(o2.getPlatform().getArchitecture(), Architecture.ALL);\n+\n+                    if (o1Arch.getRank() != o2Arch.getRank()) {\n+                        return o1Arch.getRank() < o2Arch.getRank() ? -1 : 1;\n+                    }", "originalCommit": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxODY3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478718676", "bodyText": "Yes.", "author": "ShirleyZheng92", "createdAt": "2020-08-27T21:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4NDM4NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "be85b7b1f3498ae4a4bfa8bf822fe5674de54141", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/be85b7b1f3498ae4a4bfa8bf822fe5674de54141", "message": "Merge branch 'master' into platform_resolv", "committedDate": "2020-08-27T23:17:05Z", "type": "commit"}]}