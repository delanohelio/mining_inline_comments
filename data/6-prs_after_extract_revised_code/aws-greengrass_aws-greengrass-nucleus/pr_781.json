{"pr_number": 781, "pr_title": "Fix for handling close stream from client", "pr_createdAt": "2020-12-10T22:25:38Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0MzM5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540543395", "bodyText": "why is this a warning? We have too many logs from IPC already IMO.", "author": "MikeDombo", "createdAt": "2020-12-10T22:27:55Z", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -41,7 +41,8 @@ public OperationContinuationHandler(final OperationContinuationHandlerContext co\n \n     @Override\n     final protected void onContinuationClosed() {\n-        LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n+        LOGGER.warn(\"{} stream continuation closed.\", getOperationName());", "originalCommit": "76b3c4094f3586488fd12175351b16181a1e077d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NTYzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540555631", "bodyText": "Needs to be updated in Sdk code. For now I am changing in nucleus.", "author": "abanthiy", "createdAt": "2020-12-10T22:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0MzM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "667ae3b18bb21b9cb44e87353db6078a22fb3b24", "chunk": "diff --git a/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java b/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java\nindex 92a35d68..66cb3652 100644\n--- a/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java\n+++ b/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java\n\n@@ -41,7 +41,7 @@ public abstract class OperationContinuationHandler\n \n     @Override\n     final protected void onContinuationClosed() {\n-        LOGGER.warn(\"{} stream continuation closed.\", getOperationName());\n+        LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n         continuation.close();\n         try {\n             onStreamClosed();\n"}}, {"oid": "fb87b6d22f16b3d119f29a9fa0d98fddd7f8d6fd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb87b6d22f16b3d119f29a9fa0d98fddd7f8d6fd", "message": "Fix for handling close stream from client", "committedDate": "2020-12-10T22:46:01Z", "type": "forcePushed"}, {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/667ae3b18bb21b9cb44e87353db6078a22fb3b24", "message": "Fix for handling close stream from client", "committedDate": "2020-12-10T22:50:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3MjU4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540572587", "bodyText": "every request is a stream, right? seems too many info logs.", "author": "fengwang666", "createdAt": "2020-12-10T23:19:15Z", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -162,17 +163,17 @@ final protected OperationContinuationHandlerContext getContext () {\n      */\n     @Override\n     final public CompletableFuture<Void> closeStream() {\n-        LOGGER.debug(\"[{}] closing stream\", getOperationName());\n+        LOGGER.info(\"[{}] closing stream\", getOperationName());", "originalCommit": "667ae3b18bb21b9cb44e87353db6078a22fb3b24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NzU3Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540597572", "bodyText": "Ya we can keep this as debug log", "author": "abanthiy", "createdAt": "2020-12-11T00:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3MjU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "05b7d54140653b81ad130668cba4ca67112021b8", "chunk": "diff --git a/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java b/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java\nindex 66cb3652..8085fd02 100644\n--- a/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java\n+++ b/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java\n\n@@ -163,7 +163,7 @@ public abstract class OperationContinuationHandler\n      */\n     @Override\n     final public CompletableFuture<Void> closeStream() {\n-        LOGGER.info(\"[{}] closing stream\", getOperationName());\n+        LOGGER.debug(\"[{}] closing stream\", getOperationName());\n         return continuation.sendMessage(null, null,\n                 MessageType.ApplicationMessage, MessageFlags.TerminateStream.getByteValue())\n             .whenComplete((res, ex) -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540584976", "bodyText": "Is this correct? In this parent class ServerConnectionContinuationHandler:\n    protected void onContinuationClosed() {\n        this.close();\n    }", "author": "fengwang666", "createdAt": "2020-12-10T23:48:14Z", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -42,6 +42,7 @@ public OperationContinuationHandler(final OperationContinuationHandlerContext co\n     @Override\n     final protected void onContinuationClosed() {\n         LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n+        continuation.close();", "originalCommit": "667ae3b18bb21b9cb44e87353db6078a22fb3b24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NzI4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540597288", "bodyText": "They both seem to ultimately go to same code path for continuation.decRef(). But this.close() seems more safe as it also marks the continuation as null. @DavidOgunsAWS ?", "author": "abanthiy", "createdAt": "2020-12-11T00:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMzE4OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540603189", "bodyText": "Have verified this.close() also works", "author": "abanthiy", "createdAt": "2020-12-11T00:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMzg5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540603895", "bodyText": "This is correct. onContinuationClosed() may be invoked via paths not related to known calls that terminate. In these cases, we wouldn't want to miss deRef()ing the object.", "author": "DavidOgunsAWS", "createdAt": "2020-12-11T00:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNDY3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540604673", "bodyText": "I'm asking why not call super.onContinuationClosed()?", "author": "fengwang666", "createdAt": "2020-12-11T00:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NTM0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540585348", "bodyText": "This long if condition requires comments.", "author": "fengwang666", "createdAt": "2020-12-10T23:49:09Z", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -242,21 +243,29 @@ private void invokeAfterHandleRequest() {\n     }\n \n     @Override\n-    final protected void onContinuationMessage(List<Header> list, byte[] bytes, MessageType messageType, int i) {\n+    final protected void onContinuationMessage(List<Header> list, byte[] bytes, MessageType messageType, int messageFlags) {\n         LOGGER.debug(\"Continuation native id: \" + continuation.getNativeHandle());\n-        final EventStreamRPCServiceModel serviceModel = getOperationModelContext().getServiceModel();\n \n+        //We can prevent a client from sending a request, and hanging up before receiving a response\n+        //but doing so will prevent any work from being done\n+        if (initialRequest == null && (messageFlags & MessageFlags.TerminateStream.getByteValue()) != 0) {\n+            LOGGER.warn(\"Not invoking \" + getOperationName() + \" operation for client request received with a terminate flag set to 1\");\n+            return;\n+        }\n+        final EventStreamRPCServiceModel serviceModel = getOperationModelContext().getServiceModel();\n         try {\n             if (initialRequest != null) {\n-                //TODO: FIX empty close messages arrive here and throw exception\n-                final StreamingRequestType streamEvent = serviceModel.fromJson(getStreamingRequestClass(), bytes);\n-                //exceptions occurring during this processing will result in closure of stream\n-                handleStreamEvent(streamEvent);\n+                if ((messageFlags & MessageFlags.TerminateStream.getByteValue()) != 0 && (bytes == null || bytes.length == 0)) {", "originalCommit": "667ae3b18bb21b9cb44e87353db6078a22fb3b24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5MTM1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540591354", "bodyText": "This condition reads \"if the incoming message is terminating the stream and the payload of the message itself is empty.\"", "author": "DavidOgunsAWS", "createdAt": "2020-12-11T00:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMDM3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540600377", "bodyText": "I have added the comment to nucleus code.", "author": "abanthiy", "createdAt": "2020-12-11T00:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NTM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "05b7d54140653b81ad130668cba4ca67112021b8", "chunk": "diff --git a/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java b/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java\nindex 66cb3652..8085fd02 100644\n--- a/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java\n+++ b/src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java\n\n@@ -255,6 +255,7 @@ public abstract class OperationContinuationHandler\n         final EventStreamRPCServiceModel serviceModel = getOperationModelContext().getServiceModel();\n         try {\n             if (initialRequest != null) {\n+                // Empty close stream messages from the client are valid. Do not need any processing here.\n                 if ((messageFlags & MessageFlags.TerminateStream.getByteValue()) != 0 && (bytes == null || bytes.length == 0)) {\n                     return;\n                 } else {\n"}}, {"oid": "05b7d54140653b81ad130668cba4ca67112021b8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/05b7d54140653b81ad130668cba4ca67112021b8", "message": "Fix for handling close stream from client", "committedDate": "2020-12-11T00:41:31Z", "type": "forcePushed"}, {"oid": "d6133e76e1b6ca0a34a079f523329ad8e1246299", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d6133e76e1b6ca0a34a079f523329ad8e1246299", "message": "Fix for handling close stream from client", "committedDate": "2020-12-11T00:44:02Z", "type": "commit"}, {"oid": "d6133e76e1b6ca0a34a079f523329ad8e1246299", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d6133e76e1b6ca0a34a079f523329ad8e1246299", "message": "Fix for handling close stream from client", "committedDate": "2020-12-11T00:44:02Z", "type": "forcePushed"}, {"oid": "0722935ffd527e1a45f68db0e7d1c813ddbadabe", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0722935ffd527e1a45f68db0e7d1c813ddbadabe", "message": "Updating logging levels in SDK server code", "committedDate": "2020-12-11T00:55:16Z", "type": "commit"}]}