{"pr_number": 90, "pr_title": "Add JUnit 5 Extension to Capture Runtime Metrics", "pr_createdAt": "2020-03-02T19:24:58Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90", "timeline": [{"oid": "1586358dae0010deb310948b43862cf114e76e3f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1586358dae0010deb310948b43862cf114e76e3f", "message": "Add extension", "committedDate": "2020-03-02T19:27:18Z", "type": "forcePushed"}, {"oid": "44a03e771de5b1437834517ebb4765efeeee2509", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/44a03e771de5b1437834517ebb4765efeeee2509", "message": "Add extension", "committedDate": "2020-03-02T19:31:21Z", "type": "forcePushed"}, {"oid": "1a488b70a61b6bfa332a7104e247b4eec1f1a6a8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1a488b70a61b6bfa332a7104e247b4eec1f1a6a8", "message": "Add extension", "committedDate": "2020-03-02T20:03:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjI3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386616278", "bodyText": "Shouldn't this be true?", "author": "fengwang666", "createdAt": "2020-03-02T19:56:23Z", "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EGExtension\n+        implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+    private static final ExtensionContext.Namespace NAMESPACE =\n+            ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final ScheduledExecutorService exec = new ScheduledThreadPoolExecutor(1);\n+    private static final MemoryMXBean MEMORY_BEAN = ManagementFactory.getMemoryMXBean();\n+    private static final ClassLoadingMXBean CLASS_BEAN = ManagementFactory.getClassLoadingMXBean();\n+    private ScheduledFuture<?> running;\n+    private static volatile boolean calledAlready;\n+    private static File reportFile;\n+\n+    @Override\n+    public void beforeTestExecution(ExtensionContext context) throws Exception {\n+        // Request that we first gc to make sure that we start as small as possible\n+        Runtime.getRuntime().gc();\n+        context.getStore(NAMESPACE).put(context.getDisplayName(), new RuntimeInfo(0, 0, 0));\n+\n+        // Refresh the stats every 50ms, taking the maximum of each value every time\n+        running = exec.scheduleAtFixedRate(() -> context.getStore(NAMESPACE).put(context.getDisplayName(),\n+                ((RuntimeInfo) context.getStore(NAMESPACE).get(context.getDisplayName()))\n+                        .max(new RuntimeInfo(MEMORY_BEAN.getHeapMemoryUsage().getUsed(),\n+                                MEMORY_BEAN.getNonHeapMemoryUsage().getUsed(), CLASS_BEAN.getLoadedClassCount()))), 0,\n+                50, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) throws Exception {\n+        running.cancel(false);", "originalCommit": "44a03e771de5b1437834517ebb4765efeeee2509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3OTkzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386679933", "bodyText": "Debatable, but yeah maybe. I thought since what we're running is so quick, I should just try to let if finish the current one. So I may get the very last value, or not, but either way it isn't a big deal.", "author": "MikeDombo", "createdAt": "2020-03-02T22:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "1a488b70a61b6bfa332a7104e247b4eec1f1a6a8", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/extension/EGExtension.java b/src/test/java/com/aws/iot/evergreen/extension/EGExtension.java\nindex 4a7a6121a..76cacf6ad 100644\n--- a/src/test/java/com/aws/iot/evergreen/extension/EGExtension.java\n+++ b/src/test/java/com/aws/iot/evergreen/extension/EGExtension.java\n\n@@ -23,6 +23,8 @@ import java.io.FileWriter;\n import java.lang.management.ClassLoadingMXBean;\n import java.lang.management.ManagementFactory;\n import java.lang.management.MemoryMXBean;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n"}}, {"oid": "48a3b139e40157dbe2c1bcccae8bd2951d4fbcff", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/48a3b139e40157dbe2c1bcccae8bd2951d4fbcff", "message": "Add extension", "committedDate": "2020-03-02T22:14:23Z", "type": "forcePushed"}, {"oid": "5d0d88231648fdce739d20e8e9ebed69ce085925", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5d0d88231648fdce739d20e8e9ebed69ce085925", "message": "Add extension", "committedDate": "2020-03-02T22:15:15Z", "type": "forcePushed"}, {"oid": "a47e0f5256c84fa1fb514c8638b48d6770834038", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a47e0f5256c84fa1fb514c8638b48d6770834038", "message": "Add extension", "committedDate": "2020-03-03T00:41:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NzkxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386747919", "bodyText": "Should you give the extension a more explicit name, since it's about performance metrics?", "author": "wikimonkey", "createdAt": "2020-03-03T01:19:30Z", "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EGExtension", "originalCommit": "a47e0f5256c84fa1fb514c8638b48d6770834038", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0OTUzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386749537", "bodyText": "Yeah, just named it when I was trying to get something working. Will rename.", "author": "MikeDombo", "createdAt": "2020-03-03T01:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NzkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "822d3dd80eac9d964086cae9d326bba809894387", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/extension/EGExtension.java b/src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java\nsimilarity index 98%\nrename from src/test/java/com/aws/iot/evergreen/extension/EGExtension.java\nrename to src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java\nindex b8eb53b98..ade319192 100644\n--- a/src/test/java/com/aws/iot/evergreen/extension/EGExtension.java\n+++ b/src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java\n\n@@ -31,7 +31,7 @@ import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.ScheduledThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n \n-public class EGExtension\n+public class PerformanceReporting\n         implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n     private static final ExtensionContext.Namespace NAMESPACE =\n             ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0ODA1Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386748056", "bodyText": "Can it be private?", "author": "wikimonkey", "createdAt": "2020-03-03T01:20:00Z", "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EGExtension\n+        implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+    private static final ExtensionContext.Namespace NAMESPACE =\n+            ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final ScheduledExecutorService exec = new ScheduledThreadPoolExecutor(1);\n+    private static final MemoryMXBean MEMORY_BEAN = ManagementFactory.getMemoryMXBean();\n+    private static final ClassLoadingMXBean CLASS_BEAN = ManagementFactory.getClassLoadingMXBean();\n+    private ScheduledFuture<?> running;\n+    private static File reportFile;\n+\n+    @Override\n+    public void beforeTestExecution(ExtensionContext context) throws Exception {\n+        // Request that we first gc to make sure that we start as small as possible\n+        Runtime.getRuntime().gc();\n+        context.getStore(NAMESPACE).put(context.getDisplayName(), new LinkedList<RuntimeInfo>());\n+\n+        // Refresh the stats every 50ms, taking the maximum of each value every time\n+        running = exec.scheduleAtFixedRate(() -> {\n+            ((List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName()))\n+                    .add(new RuntimeInfo(MEMORY_BEAN.getHeapMemoryUsage().getUsed(),\n+                            MEMORY_BEAN.getNonHeapMemoryUsage().getUsed(), CLASS_BEAN.getLoadedClassCount()));\n+        }, 0, 50, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) throws Exception {\n+        running.cancel(false);\n+        List<RuntimeInfo> infoList = (List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName());\n+        double maxHeapMemoryMB = infoList.stream().mapToLong(x -> x.heapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        double maxNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        long maxLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).max().getAsLong();\n+\n+        double avgHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.heapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).average().getAsDouble();\n+\n+        Map<String, String> map = Utils.immutableMap(\"name\", context.getRequiredTestMethod().getName(), \"classname\",\n+                context.getRequiredTestClass().getName(), \"maxHeapMemoryMB\", maxHeapMemoryMB, \"maxNonHeapMemoryMB\",\n+                maxNonHeapMemoryMB, \"maxLoadedClassCount\", maxLoadedClassCount, \"avgHeapMemoryMB\", avgHeapMemoryMB,\n+                \"avgNonHeapMemoryMB\", avgNonHeapMemoryMB, \"avgLoadedClassCount\", avgLoadedClassCount);\n+\n+        ValueIterator<?> existing = null;\n+        try {\n+            existing = JSON.std.anySequenceFrom(reportFile);\n+        } catch (JSONObjectException ignored) {\n+        }\n+\n+        try (FileWriter fileWriter = new FileWriter(reportFile, false);\n+             SequenceWriter seqWriter = MAPPER.writer().writeValuesAsArray(fileWriter)) {\n+            if (existing != null) {\n+                seqWriter.writeAll(existing.readAll());\n+            }\n+            seqWriter.write(map);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeAll(ExtensionContext context) throws Exception {\n+        File surefireReportDir = new File(System.getProperty(\"surefireReportDir\", \"target/surefire-reports\"));\n+        if (!surefireReportDir.exists()) {\n+            surefireReportDir.mkdirs();\n+        }\n+\n+        reportFile = surefireReportDir.toPath().resolve(\"junitReport.json\").toFile();\n+        if (!reportFile.exists()) {\n+            reportFile.createNewFile();\n+        }\n+    }\n+\n+    @AllArgsConstructor\n+    static class RuntimeInfo {", "originalCommit": "a47e0f5256c84fa1fb514c8638b48d6770834038", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0OTU5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386749599", "bodyText": "If it can be private I'll switch it to private.", "author": "MikeDombo", "createdAt": "2020-03-03T01:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0ODA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "822d3dd80eac9d964086cae9d326bba809894387", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/extension/EGExtension.java b/src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java\nsimilarity index 98%\nrename from src/test/java/com/aws/iot/evergreen/extension/EGExtension.java\nrename to src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java\nindex b8eb53b98..ade319192 100644\n--- a/src/test/java/com/aws/iot/evergreen/extension/EGExtension.java\n+++ b/src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java\n\n@@ -31,7 +31,7 @@ import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.ScheduledThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n \n-public class EGExtension\n+public class PerformanceReporting\n         implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n     private static final ExtensionContext.Namespace NAMESPACE =\n             ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n"}}, {"oid": "822d3dd80eac9d964086cae9d326bba809894387", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/822d3dd80eac9d964086cae9d326bba809894387", "message": "Add extension", "committedDate": "2020-03-03T01:45:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1OTkyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386759925", "bodyText": "Hm what's the difference with @BeforeAll in Performance?", "author": "ShirleyZheng92", "createdAt": "2020-03-03T02:02:44Z", "path": "src/test/java/com/aws/iot/evergreen/extension/InitTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+public class InitTest {\n+    // This test case runs once per test suite execution before the suite starts.\n+    // Put logic here which should run only once before all tests.\n+    @Test\n+    public void init() throws Exception {", "originalCommit": "822d3dd80eac9d964086cae9d326bba809894387", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2MTAwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386761008", "bodyText": "BeforeAll doesn't run before all tests. The BeforeAll runs before every test class, not the whole test suite. This one only ever runs once before everything else.", "author": "MikeDombo", "createdAt": "2020-03-03T02:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1OTkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "95f38d4c4e5e3795c3967d68e6640de259944be4", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/extension/InitTest.java b/src/test/java/com/aws/iot/evergreen/extension/InitTestSuite.java\nsimilarity index 96%\nrename from src/test/java/com/aws/iot/evergreen/extension/InitTest.java\nrename to src/test/java/com/aws/iot/evergreen/extension/InitTestSuite.java\nindex 36069b83d..8002c9207 100644\n--- a/src/test/java/com/aws/iot/evergreen/extension/InitTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/extension/InitTestSuite.java\n\n@@ -10,7 +10,7 @@ import org.junit.jupiter.api.Test;\n import java.io.File;\n import java.io.FileWriter;\n \n-public class InitTest {\n+public class InitTestSuite {\n     // This test case runs once per test suite execution before the suite starts.\n     // Put logic here which should run only once before all tests.\n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1OTk5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386759990", "bodyText": "Maybe name to InitTestSuite?", "author": "ShirleyZheng92", "createdAt": "2020-03-03T02:02:56Z", "path": "src/test/java/com/aws/iot/evergreen/extension/InitTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+public class InitTest {", "originalCommit": "822d3dd80eac9d964086cae9d326bba809894387", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95f38d4c4e5e3795c3967d68e6640de259944be4", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/extension/InitTest.java b/src/test/java/com/aws/iot/evergreen/extension/InitTestSuite.java\nsimilarity index 96%\nrename from src/test/java/com/aws/iot/evergreen/extension/InitTest.java\nrename to src/test/java/com/aws/iot/evergreen/extension/InitTestSuite.java\nindex 36069b83d..8002c9207 100644\n--- a/src/test/java/com/aws/iot/evergreen/extension/InitTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/extension/InitTestSuite.java\n\n@@ -10,7 +10,7 @@ import org.junit.jupiter.api.Test;\n import java.io.File;\n import java.io.FileWriter;\n \n-public class InitTest {\n+public class InitTestSuite {\n     // This test case runs once per test suite execution before the suite starts.\n     // Put logic here which should run only once before all tests.\n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2MDE1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386760159", "bodyText": "rename to performanceResultMap or perfResultMap", "author": "ShirleyZheng92", "createdAt": "2020-03-03T02:03:33Z", "path": "src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PerformanceReporting\n+        implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+    private static final ExtensionContext.Namespace NAMESPACE =\n+            ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final ScheduledExecutorService exec = new ScheduledThreadPoolExecutor(1);\n+    private static final MemoryMXBean MEMORY_BEAN = ManagementFactory.getMemoryMXBean();\n+    private static final ClassLoadingMXBean CLASS_BEAN = ManagementFactory.getClassLoadingMXBean();\n+    private ScheduledFuture<?> running;\n+    private static File reportFile;\n+\n+    @Override\n+    public void beforeTestExecution(ExtensionContext context) throws Exception {\n+        // Request that we first gc to make sure that we start as small as possible\n+        Runtime.getRuntime().gc();\n+        context.getStore(NAMESPACE).put(context.getDisplayName(), new LinkedList<RuntimeInfo>());\n+\n+        // Refresh the stats every 50ms, taking the maximum of each value every time\n+        running = exec.scheduleAtFixedRate(() -> {\n+            ((List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName()))\n+                    .add(new RuntimeInfo(MEMORY_BEAN.getHeapMemoryUsage().getUsed(),\n+                            MEMORY_BEAN.getNonHeapMemoryUsage().getUsed(), CLASS_BEAN.getLoadedClassCount()));\n+        }, 0, 50, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) throws Exception {\n+        running.cancel(false);\n+        List<RuntimeInfo> infoList = (List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName());\n+        double maxHeapMemoryMB = infoList.stream().mapToLong(x -> x.heapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        double maxNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        long maxLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).max().getAsLong();\n+\n+        double avgHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.heapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).average().getAsDouble();\n+\n+        Map<String, String> map = Utils.immutableMap(\"name\", context.getRequiredTestMethod().getName(), \"classname\",", "originalCommit": "822d3dd80eac9d964086cae9d326bba809894387", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95f38d4c4e5e3795c3967d68e6640de259944be4", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java b/src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java\nindex ade319192..43a0928ca 100644\n--- a/src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java\n+++ b/src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java\n\n@@ -71,7 +71,7 @@ public class PerformanceReporting\n                 infoList.stream().mapToLong(x -> x.nonHeapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n         double avgLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).average().getAsDouble();\n \n-        Map<String, String> map = Utils.immutableMap(\"name\", context.getRequiredTestMethod().getName(), \"classname\",\n+        Map<String, String> perfValueMap = Utils.immutableMap(\"name\", context.getRequiredTestMethod().getName(), \"classname\",\n                 context.getRequiredTestClass().getName(), \"maxHeapMemoryMB\", maxHeapMemoryMB, \"maxNonHeapMemoryMB\",\n                 maxNonHeapMemoryMB, \"maxLoadedClassCount\", maxLoadedClassCount, \"avgHeapMemoryMB\", avgHeapMemoryMB,\n                 \"avgNonHeapMemoryMB\", avgNonHeapMemoryMB, \"avgLoadedClassCount\", avgLoadedClassCount);\n"}}, {"oid": "95f38d4c4e5e3795c3967d68e6640de259944be4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/95f38d4c4e5e3795c3967d68e6640de259944be4", "message": "Add extension", "committedDate": "2020-03-03T02:08:38Z", "type": "commit"}, {"oid": "95f38d4c4e5e3795c3967d68e6640de259944be4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/95f38d4c4e5e3795c3967d68e6640de259944be4", "message": "Add extension", "committedDate": "2020-03-03T02:08:38Z", "type": "forcePushed"}]}