{"pr_number": 780, "pr_title": "Read in config.yaml only when requested", "pr_createdAt": "2020-12-10T21:13:55Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODQ2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540528461", "bodyText": "Kernel update uses this to override the config file to read. It has to be either getProvidedConfigPathName or transactionLogPath, and in order", "author": "hui-yang", "createdAt": "2020-12-10T22:01:02Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -143,21 +142,14 @@ void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n             Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n-            if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n-                // If a config file is provided, kernel will use the provided file as a new base\n-                // and ignore existing config and tlog files.\n-                // This ideally should only used for testing and not in production\n-                kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());", "originalCommit": "7898983e34d26ea0a460b0e5b7e0c183b8cbb76b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDQ2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540530466", "bodyText": "See this recent change 9e7bd4a#diff-cb3183decf6725a896e16eba3ccf01fa10f8d8f08835204e4f1f7c56b7be6ae5 which resolves config file in kernel launch (instead of loader before)", "author": "hui-yang", "createdAt": "2020-12-10T22:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8d6b1bbc5d61c52a659c37ff9de0e8c62a574db8", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java b/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\nindex 22518543f3..d9b8298d44 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\n\n@@ -141,20 +143,37 @@ public class KernelLifecycle {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n-            // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n-            if (Files.exists(transactionLogPath)) {\n-                kernel.getConfig().read(transactionLogPath);\n-            }\n \n-            // If we're provided a yaml file explicitly (and only explicitly), then read it in a merge with tlog\n-            if (Utils.isNotEmpty(kernelCommandLine.getProvidedConfigPathName())) {\n+            if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n+                // If a config file is provided, kernel will use the provided file as a new base\n+                // and ignore existing config and tlog files.\n+                // This ideally should only used for testing and not in production\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n+            } else {\n+                String externalConfig = nucleusPaths.configPath()\n+                        .resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ).toString();\n+                boolean externalConfigFromCmd = Utils.isNotEmpty(kernelCommandLine.getProvidedInitialConfigPath());\n+                if (externalConfigFromCmd) {\n+                    externalConfig = kernelCommandLine.getProvidedInitialConfigPath();\n+                }\n+\n+                boolean tlogExists = Files.exists(transactionLogPath);\n+                boolean externalConfigExists = Files.exists(Paths.get(externalConfig));\n+\n+                // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n+                if (tlogExists) {\n+                    kernel.getConfig().read(transactionLogPath);\n+                }\n+\n+                // If there is no tlog, or the yaml path was provided via commandline, read in that file\n+                if ((externalConfigFromCmd || !tlogExists) && externalConfigExists) {\n+                    kernel.getConfig().read(externalConfig);\n+                }\n             }\n \n             // write new tlog and config files\n             kernel.writeEffectiveConfigAsTransactionLog(transactionLogPath);\n-            kernel.writeEffectiveConfig(configurationFile);\n+            kernel.writeEffectiveConfig();\n \n             // hook tlog to config\n             tlog = ConfigurationWriter.logTransactionsTo(kernel.getConfig(), transactionLogPath)\n"}}, {"oid": "8d6b1bbc5d61c52a659c37ff9de0e8c62a574db8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8d6b1bbc5d61c52a659c37ff9de0e8c62a574db8", "message": "Read in config.yaml only when requested", "committedDate": "2020-12-10T22:26:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0NTcwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540545707", "bodyText": "remove? Or do you intend to keep it for internal use?", "author": "hui-yang", "createdAt": "2020-12-10T22:32:15Z", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -116,6 +116,8 @@\n \n     private static final String KERNEL_CONFIG_ARG = \"--config\";\n     private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";", "originalCommit": "8d6b1bbc5d61c52a659c37ff9de0e8c62a574db8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5Njc0Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540596746", "bodyText": "Same question. Where are they kept?", "author": "fengwang666", "createdAt": "2020-12-11T00:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0NTcwNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "fb1d97251b09249416eae82ced8c158d70eb3a71", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb1d97251b09249416eae82ced8c158d70eb3a71", "message": "Read in config.yaml only when requested", "committedDate": "2020-12-10T22:46:50Z", "type": "forcePushed"}, {"oid": "a31221917fbda53c2a12ec5a6a916c7ffbb98451", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a31221917fbda53c2a12ec5a6a916c7ffbb98451", "message": "Read in config.yaml only when requested", "committedDate": "2020-12-10T22:48:50Z", "type": "forcePushed"}, {"oid": "d773760a3aab972f222e914a5ec74513b455100b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d773760a3aab972f222e914a5ec74513b455100b", "message": "Read in config.yaml only when requested", "committedDate": "2020-12-10T22:52:16Z", "type": "forcePushed"}, {"oid": "1c2a55e5071cdc8dd473eafbfb1711c86eed3511", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1c2a55e5071cdc8dd473eafbfb1711c86eed3511", "message": "Read in config.yaml only when requested", "committedDate": "2020-12-10T22:57:14Z", "type": "forcePushed"}, {"oid": "b79572c643d8c03b016b124909a7204599800e53", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b79572c643d8c03b016b124909a7204599800e53", "message": "Read in config.yaml only when requested", "committedDate": "2020-12-10T23:01:52Z", "type": "forcePushed"}, {"oid": "f6fc620eda82861910d6b2e1a33e44fc28cbeb3e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f6fc620eda82861910d6b2e1a33e44fc28cbeb3e", "message": "Read in config.yaml only when requested", "committedDate": "2020-12-10T23:09:45Z", "type": "forcePushed"}, {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c0031061658accdb1631452a8a565ca4ffcacc58", "message": "Dump effective config when shutting down, not only when we start up", "committedDate": "2020-12-10T23:43:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODg0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540598847", "bodyText": "is the original --config kept for our UAT?", "author": "fengwang666", "createdAt": "2020-12-11T00:23:13Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelCommandLine.java", "diffHunk": "@@ -93,6 +95,12 @@ public void parseArgs(String... args) {\n                     Objects.requireNonNull(configArg, \"-i or --config requires an argument\");", "originalCommit": "c0031061658accdb1631452a8a565ca4ffcacc58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMDIwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540610205", "bodyText": "It is kept for tests inside the kernel which use it", "author": "MikeDombo", "createdAt": "2020-12-11T00:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODg0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNDA4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540604083", "bodyText": "Remove this comment? It doesn't sound accurate. This branch seems being used in kernel update.", "author": "fengwang666", "createdAt": "2020-12-11T00:37:44Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production", "originalCommit": "c0031061658accdb1631452a8a565ca4ffcacc58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMTk1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540611958", "bodyText": "Updating comment.", "author": "MikeDombo", "createdAt": "2020-12-11T00:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNDA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "440a85621a66e53d74e41cf033305af7c0e71e1e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java b/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\nindex c0469967e9..1af2f3dc22 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\n\n@@ -147,7 +147,7 @@ public class KernelLifecycle {\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n-                // This ideally should only used for testing and not in production\n+                // This is used by the nucleus bootstrap workflow\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n                 Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNTU4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540605586", "bodyText": "What's in the default config.yaml? Do we want to rename it to defaultConfig.yaml?", "author": "fengwang666", "createdAt": "2020-12-11T00:42:04Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -87,7 +87,8 @@\n     public static final String SERVICE_TYPE_TOPIC_KEY = \"componentType\";\n     public static final String SERVICE_TYPE_TO_CLASS_MAP_KEY = \"componentTypeToClassMap\";\n     private static final String PLUGIN_SERVICE_TYPE_NAME = \"plugin\";\n-    static final String DEFAULT_CONFIG_YAML_FILE = \"config.yaml\";\n+    static final String DEFAULT_CONFIG_YAML_FILE_READ = \"config.yaml\";", "originalCommit": "c0031061658accdb1631452a8a565ca4ffcacc58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMDQ3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540610479", "bodyText": "What is in the file is determined by the user. It is config.yaml so that our uats can use it", "author": "MikeDombo", "createdAt": "2020-12-11T00:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNTU4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNzQzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540607430", "bodyText": "Isn't this duplicate of line174?", "author": "fengwang666", "createdAt": "2020-12-11T00:46:47Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n-                // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n-                if (Files.exists(transactionLogPath)) {\n+                Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n+                boolean externalConfigFromCmd = Utils.isNotEmpty(kernelCommandLine.getProvidedInitialConfigPath());\n+                if (externalConfigFromCmd) {\n+                    externalConfig = Paths.get(kernelCommandLine.getProvidedInitialConfigPath());\n+                }\n+\n+                boolean tlogExists = Files.exists(transactionLogPath);\n+                boolean externalConfigExists = Files.exists(externalConfig);\n+\n+                // if tlog is present, read the tlog first because the yaml config file may not be up to date\n+                if (tlogExists) {\n                     kernel.getConfig().read(transactionLogPath);\n                 }\n \n-                // if configuration file is available, merge it. It will be merged with file's last modified timestamp\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n+                // If there is no tlog, or the path was provided via commandline, read in that file\n+                if ((externalConfigFromCmd || !tlogExists) && externalConfigExists) {\n+                    kernel.getConfig().read(externalConfig);\n                 }\n             }\n \n             // write new tlog and config files\n             kernel.writeEffectiveConfigAsTransactionLog(transactionLogPath);\n-            kernel.writeEffectiveConfig(configurationFile);\n+            kernel.writeEffectiveConfig();\n \n             // hook tlog to config\n             tlog = ConfigurationWriter.logTransactionsTo(kernel.getConfig(), transactionLogPath)", "originalCommit": "c0031061658accdb1631452a8a565ca4ffcacc58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMDYyOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540610629", "bodyText": "No. Write effective config writes it as YAML, not TLOG.", "author": "MikeDombo", "createdAt": "2020-12-11T00:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNzQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMjI3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540612279", "bodyText": "kernel.writeEffectiveConfigAsTransactionLog(transactionLogPath);\n\nThis is writing to a tlog, right?\nAnd line 178 is also writing a tlog.", "author": "fengwang666", "createdAt": "2020-12-11T00:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNzQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMzAwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540613009", "bodyText": "No, that's different. That's hooking up the tlog so that it will write to it with all the changes.", "author": "MikeDombo", "createdAt": "2020-12-11T01:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNzQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "440a85621a66e53d74e41cf033305af7c0e71e1e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java b/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\nindex c0469967e9..1af2f3dc22 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\n\n@@ -147,7 +147,7 @@ public class KernelLifecycle {\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n-                // This ideally should only used for testing and not in production\n+                // This is used by the nucleus bootstrap workflow\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n                 Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwODQzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540608437", "bodyText": "What if none of these three exists? Do we handle that?", "author": "fengwang666", "createdAt": "2020-12-11T00:49:44Z", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n-                // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n-                if (Files.exists(transactionLogPath)) {\n+                Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n+                boolean externalConfigFromCmd = Utils.isNotEmpty(kernelCommandLine.getProvidedInitialConfigPath());\n+                if (externalConfigFromCmd) {\n+                    externalConfig = Paths.get(kernelCommandLine.getProvidedInitialConfigPath());\n+                }\n+\n+                boolean tlogExists = Files.exists(transactionLogPath);\n+                boolean externalConfigExists = Files.exists(externalConfig);\n+\n+                // if tlog is present, read the tlog first because the yaml config file may not be up to date\n+                if (tlogExists) {\n                     kernel.getConfig().read(transactionLogPath);\n                 }\n \n-                // if configuration file is available, merge it. It will be merged with file's last modified timestamp\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n+                // If there is no tlog, or the path was provided via commandline, read in that file", "originalCommit": "c0031061658accdb1631452a8a565ca4ffcacc58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMDcwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540610705", "bodyText": "We do. We don't need to do anything, we just startup", "author": "MikeDombo", "createdAt": "2020-12-11T00:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwODQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "440a85621a66e53d74e41cf033305af7c0e71e1e", "chunk": "diff --git a/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java b/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\nindex c0469967e9..1af2f3dc22 100644\n--- a/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\n+++ b/src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java\n\n@@ -147,7 +147,7 @@ public class KernelLifecycle {\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n-                // This ideally should only used for testing and not in production\n+                // This is used by the nucleus bootstrap workflow\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n                 Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n"}}, {"oid": "e74a3a804a4c253d8022a2a21124b0a6e7829049", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e74a3a804a4c253d8022a2a21124b0a6e7829049", "message": "Read in config.yaml only when requested", "committedDate": "2020-12-11T00:58:16Z", "type": "commit"}, {"oid": "b5f4650396d18e67315e3feeb4b496b0cab4f050", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b5f4650396d18e67315e3feeb4b496b0cab4f050", "message": "Dump effective config when shutting down, not only when we start up", "committedDate": "2020-12-11T00:58:16Z", "type": "commit"}, {"oid": "440a85621a66e53d74e41cf033305af7c0e71e1e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/440a85621a66e53d74e41cf033305af7c0e71e1e", "message": "PR comments", "committedDate": "2020-12-11T01:15:27Z", "type": "commit"}, {"oid": "440a85621a66e53d74e41cf033305af7c0e71e1e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/440a85621a66e53d74e41cf033305af7c0e71e1e", "message": "PR comments", "committedDate": "2020-12-11T01:15:27Z", "type": "forcePushed"}, {"oid": "58d8337d585cb75e802f14457a9bdd92ab3264d7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/58d8337d585cb75e802f14457a9bdd92ab3264d7", "message": "Merge branch 'master' into config-explicit", "committedDate": "2020-12-11T01:59:14Z", "type": "commit"}, {"oid": "a8cd7e4f1c9d5189731d9665fa0cf81203192883", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a8cd7e4f1c9d5189731d9665fa0cf81203192883", "message": "Merge branch 'master' into config-explicit", "committedDate": "2020-12-11T02:00:33Z", "type": "commit"}]}