{"pr_number": 517, "pr_title": "Set permissions on all paths", "pr_createdAt": "2020-10-12T19:22:39Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517", "timeline": [{"oid": "01c05f61467dc9414fa28a3d04407e4bfe8d9c96", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/01c05f61467dc9414fa28a3d04407e4bfe8d9c96", "message": "Set permissions on all paths", "committedDate": "2020-10-12T19:27:50Z", "type": "forcePushed"}, {"oid": "e31e19f5124675787971a3efb7bbb19056275ed6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e31e19f5124675787971a3efb7bbb19056275ed6", "message": "Set permissions on all paths", "committedDate": "2020-10-12T20:04:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMjU0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503512543", "bodyText": "you are checking whether it is set in order to enable the read/write/execute bits, but this won't remove any bits that are already set by the umask when the file was created.\nI think you need to do\nf.setReadable(permissions.isOwnerRead(), true);\nf.setReadable(permissions.isOtherRead(), false);\nf.setWritable(permissions.isOwnerWrite(), true);\nf.setWritable(permissions.isOtherWrite(), false);\nf.setExecutable(permissions.isOwnerExecute(), true);\nf.setExecutable(permissions.isOtherExecute(), false);", "author": "rbattle", "createdAt": "2020-10-12T20:17:37Z", "path": "src/main/java/com/aws/greengrass/util/platforms/Platform.java", "diffHunk": "@@ -43,4 +46,52 @@ public abstract void killProcessAndChildren(Process process, boolean force)\n     public abstract String[] getShellForCommand(String command);\n \n     public abstract int exitCodeWhenCommandDoesNotExist();\n+\n+    /**\n+     * Set permissions on a path.\n+     *\n+     * @param permission permissions to set\n+     * @param path path to apply to\n+     * @throws IOException if any exception occurs while changing permissions\n+     */\n+    public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n+        // Just use builtin Java utilities to set permissions, we can expand this to do more in subclasses\n+        // as needed.\n+\n+        File f = path.toFile();\n+        if (!f.exists()) {\n+            throw new IOException(f + \" was expected to exist, but it does not exist\");\n+        }\n+        boolean happy = true;\n+        if (permission.isOwnerRead()) {\n+            happy = f.setReadable(true, true);\n+        }", "originalCommit": "e31e19f5124675787971a3efb7bbb19056275ed6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32994bc26477be841e9dc007f8ef394eae8fa51f", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/Platform.java b/src/main/java/com/aws/greengrass/util/platforms/Platform.java\nindex 4812bcb7a9..88e8468c43 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/Platform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/Platform.java\n\n@@ -54,44 +53,5 @@ public abstract class Platform {\n      * @param path path to apply to\n      * @throws IOException if any exception occurs while changing permissions\n      */\n-    public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n-        // Just use builtin Java utilities to set permissions, we can expand this to do more in subclasses\n-        // as needed.\n-\n-        File f = path.toFile();\n-        if (!f.exists()) {\n-            throw new IOException(f + \" was expected to exist, but it does not exist\");\n-        }\n-        boolean happy = true;\n-        if (permission.isOwnerRead()) {\n-            happy = f.setReadable(true, true);\n-        }\n-        checkHappy(happy, \"readable by owner\", f);\n-        if (permission.isOtherRead()) {\n-            happy = f.setReadable(true, false);\n-        }\n-        checkHappy(happy, \"readable by others\", f);\n-        if (permission.isOwnerWrite()) {\n-            happy = f.setWritable(true, true);\n-        }\n-        checkHappy(happy, \"writable by owner\", f);\n-        if (permission.isOtherWrite()) {\n-            happy = f.setWritable(true, false);\n-        }\n-        checkHappy(happy, \"writable by others\", f);\n-        if (permission.isOwnerExecute()) {\n-            happy = f.setExecutable(true, true);\n-        }\n-        checkHappy(happy, \"executable by owner\", f);\n-        if (permission.isOtherExecute()) {\n-            happy = f.setExecutable(true, false);\n-        }\n-        checkHappy(happy, \"executable by others\", f);\n-    }\n-\n-    private void checkHappy(boolean happy, String note, File f) throws IOException {\n-        if (!happy) {\n-            throw new IOException(String.format(\"Failed to set %s to be %s\", f, note));\n-        }\n-    }\n+    public abstract void setPermissions(FileSystemPermission permission, Path path) throws IOException;\n }\n"}}, {"oid": "32994bc26477be841e9dc007f8ef394eae8fa51f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32994bc26477be841e9dc007f8ef394eae8fa51f", "message": "Set permissions on all paths", "committedDate": "2020-10-12T20:29:16Z", "type": "forcePushed"}, {"oid": "0ac70d3fb664c2503ab2856a35ad4d99d51fdfd3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0ac70d3fb664c2503ab2856a35ad4d99d51fdfd3", "message": "Set permissions on all paths", "committedDate": "2020-10-12T20:30:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxOTI3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503519270", "bodyText": "can this occur after setting the file permissions?\nAt least on snap, this will fail because the root user in snap does not have CAP_FOWNER (which allows you to do chmod operations on files not owned by yourself)", "author": "rbattle", "createdAt": "2020-10-12T20:34:45Z", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -67,6 +68,15 @@ public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n+        if (permission.getOwnerUser() != null) {\n+            Files.setOwner(path, path.getFileSystem().getUserPrincipalLookupService()\n+                    .lookupPrincipalByName(permission.getOwnerUser()));\n+        }", "originalCommit": "0ac70d3fb664c2503ab2856a35ad4d99d51fdfd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDUzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503520537", "bodyText": "Updated.", "author": "MikeDombo", "createdAt": "2020-10-12T20:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxOTI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "2565839dc9ad3bafaf542e10696c5e9c09bc81d4", "chunk": "diff --git a/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java b/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\nindex 9473c36333..a538349eb8 100644\n--- a/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\n+++ b/src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java\n\n@@ -70,11 +70,11 @@ public class UnixPlatform extends Platform {\n \n     @Override\n     public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n+        Files.setPosixFilePermissions(path, permission.toPosixFilePermissions());\n         if (permission.getOwnerUser() != null) {\n             Files.setOwner(path, path.getFileSystem().getUserPrincipalLookupService()\n                     .lookupPrincipalByName(permission.getOwnerUser()));\n         }\n-        Files.setPosixFilePermissions(path, permission.toPosixFilePermissions());\n     }\n \n     List<Integer> getChildPids(Process process) throws IOException, InterruptedException {\n"}}, {"oid": "2565839dc9ad3bafaf542e10696c5e9c09bc81d4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2565839dc9ad3bafaf542e10696c5e9c09bc81d4", "message": "Set permissions on all paths", "committedDate": "2020-10-12T20:37:53Z", "type": "commit"}, {"oid": "2565839dc9ad3bafaf542e10696c5e9c09bc81d4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2565839dc9ad3bafaf542e10696c5e9c09bc81d4", "message": "Set permissions on all paths", "committedDate": "2020-10-12T20:37:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjQzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503576435", "bodyText": "Have you thought using Java BitSet to represent these? Then you can use the normal linux file permission bits(e.g. 777) to initialize them, which I think it's more readable.", "author": "fengwang666", "createdAt": "2020-10-12T23:02:30Z", "path": "src/main/java/com/aws/greengrass/util/FileSystemPermission.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Value\n+@Builder\n+@AllArgsConstructor\n+public class FileSystemPermission {\n+    String ownerUser;\n+    String ownerGroup;\n+    boolean ownerRead;\n+    boolean ownerWrite;\n+    boolean ownerExecute;\n+\n+    boolean groupRead;\n+    boolean groupWrite;\n+    boolean groupExecute;\n+\n+    boolean otherRead;\n+    boolean otherWrite;\n+    boolean otherExecute;", "originalCommit": "2565839dc9ad3bafaf542e10696c5e9c09bc81d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NzE3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503577174", "bodyText": "I don't really agree that that's easier to understand TBH.", "author": "MikeDombo", "createdAt": "2020-10-12T23:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MjkzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503582932", "bodyText": "Especially if using a builder, this is super clear", "author": "MikeDombo", "createdAt": "2020-10-12T23:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjQzNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "492c354142b14161b445db5eabdf690d238d8c29", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/492c354142b14161b445db5eabdf690d238d8c29", "message": "Reuse TES components", "committedDate": "2020-10-12T23:39:07Z", "type": "forcePushed"}, {"oid": "57be08f2b291d1c43eb599cd64631d15a1a14c3a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/57be08f2b291d1c43eb599cd64631d15a1a14c3a", "message": "Reuse TES components", "committedDate": "2020-10-13T00:34:45Z", "type": "forcePushed"}, {"oid": "c3098f11ec34841d20df3bb49c0c05d55a820cbf", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c3098f11ec34841d20df3bb49c0c05d55a820cbf", "message": "Reuse TES components", "committedDate": "2020-10-13T00:40:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODEzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503658130", "bodyText": "is this intentionally left commented rather than removing the call to the method?", "author": "rbattle", "createdAt": "2020-10-13T04:19:58Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -427,18 +421,18 @@ protected void setupTesRoleAndAlias() throws InterruptedException, ServiceLoadEx\n     }\n \n     protected static void cleanUpTesRoleAndAlias() {\n-        try {\n-            iotClient.deleteRoleAlias(DeleteRoleAliasRequest.builder().roleAlias(TES_ROLE_ALIAS_NAME).build());\n-\n-            if (tesRolePolicyArn.isPresent()) {\n-                iamClient.detachRolePolicy(DetachRolePolicyRequest.builder().roleName(TES_ROLE_NAME).policyArn(tesRolePolicyArn.get()).build());\n-                iamClient.deletePolicy(DeletePolicyRequest.builder().policyArn(tesRolePolicyArn.get()).build());\n-            }\n-\n-            iamClient.deleteRole(DeleteRoleRequest.builder().roleName(TES_ROLE_NAME).build());\n-        } catch (ResourceNotFoundException | NoSuchEntityException e) {\n-            logger.atInfo().addKeyValue(\"error-message\", e.getMessage()).log(\"Could not clean up TES resources\");\n-        }\n+//        try {\n+//            iotClient.deleteRoleAlias(DeleteRoleAliasRequest.builder().roleAlias(TES_ROLE_ALIAS_NAME).build());\n+//\n+//            if (tesRolePolicyArn.isPresent()) {\n+//                iamClient.detachRolePolicy(DetachRolePolicyRequest.builder().roleName(TES_ROLE_NAME).policyArn(tesRolePolicyArn.get()).build());\n+//                iamClient.deletePolicy(DeletePolicyRequest.builder().policyArn(tesRolePolicyArn.get()).build());\n+//            }\n+//\n+//            iamClient.deleteRole(DeleteRoleRequest.builder().roleName(TES_ROLE_NAME).build());\n+//        } catch (ResourceNotFoundException | NoSuchEntityException e) {\n+//            logger.atInfo().addKeyValue(\"error-message\", e.getMessage()).log(\"Could not clean up TES resources\");\n+//        }\n     }", "originalCommit": "c3098f11ec34841d20df3bb49c0c05d55a820cbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODg2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503658868", "bodyText": "Right now yes, I just wanted to make sure it worked. I can remove it, though I'd need to wait for everything to pass again :(.", "author": "MikeDombo", "createdAt": "2020-10-13T04:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "c8e332e0ae2841f71c1675bec90fa5d8b8b66b54", "chunk": "diff --git a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java\nindex 357d8fb01a..ab0351687f 100644\n--- a/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java\n+++ b/src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java\n\n@@ -420,21 +419,6 @@ public class BaseE2ETestCase implements AutoCloseable {\n         }\n     }\n \n-    protected static void cleanUpTesRoleAndAlias() {\n-//        try {\n-//            iotClient.deleteRoleAlias(DeleteRoleAliasRequest.builder().roleAlias(TES_ROLE_ALIAS_NAME).build());\n-//\n-//            if (tesRolePolicyArn.isPresent()) {\n-//                iamClient.detachRolePolicy(DetachRolePolicyRequest.builder().roleName(TES_ROLE_NAME).policyArn(tesRolePolicyArn.get()).build());\n-//                iamClient.deletePolicy(DeletePolicyRequest.builder().policyArn(tesRolePolicyArn.get()).build());\n-//            }\n-//\n-//            iamClient.deleteRole(DeleteRoleRequest.builder().roleName(TES_ROLE_NAME).build());\n-//        } catch (ResourceNotFoundException | NoSuchEntityException e) {\n-//            logger.atInfo().addKeyValue(\"error-message\", e.getMessage()).log(\"Could not clean up TES resources\");\n-//        }\n-    }\n-\n     @Override\n     public void close() throws Exception {\n         greengrassClient.shutdown();\n"}}, {"oid": "c8e332e0ae2841f71c1675bec90fa5d8b8b66b54", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c8e332e0ae2841f71c1675bec90fa5d8b8b66b54", "message": "Reuse TES components", "committedDate": "2020-10-13T04:24:06Z", "type": "commit"}, {"oid": "c8e332e0ae2841f71c1675bec90fa5d8b8b66b54", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c8e332e0ae2841f71c1675bec90fa5d8b8b66b54", "message": "Reuse TES components", "committedDate": "2020-10-13T04:24:06Z", "type": "forcePushed"}]}