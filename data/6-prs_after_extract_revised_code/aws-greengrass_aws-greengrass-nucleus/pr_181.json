{"pr_number": 181, "pr_title": "Initial refactor of Kernel.java to split it into several classes", "pr_createdAt": "2020-04-14T21:16:05Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181", "timeline": [{"oid": "fbb87a2335c21bf9a5dd71525c494281b44e4151", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fbb87a2335c21bf9a5dd71525c494281b44e4151", "message": "Initial refactor of Kernel.java", "committedDate": "2020-04-14T21:26:43Z", "type": "forcePushed"}, {"oid": "8f6586d05dca90e832d5b78ea0534ca20c9b540a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8f6586d05dca90e832d5b78ea0534ca20c9b540a", "message": "Initial refactor of Kernel.java", "committedDate": "2020-04-14T21:44:58Z", "type": "forcePushed"}, {"oid": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5976f0bd0956d5faa1f7ac9e0c336414ddcf645f", "message": "Initial refactor of Kernel.java", "committedDate": "2020-04-14T21:45:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NjMzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408456330", "bodyText": "Nit- this deTilde method here has nothing to do with command line arg passing, it's finding more use then we could move it to the Utils class?", "author": "shaguptashaikh", "createdAt": "2020-04-14T21:48:20Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfigurationHelper.java", "diffHunk": "@@ -30,16 +31,20 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private KernelCommandLine kernelCommandLine;\n+\n     /**\n      * Retrieves the device configuration information from kernel config to communicate with Iot Cloud.\n      * @return {@link DeviceConfiguration}\n      * @throws DeviceConfigurationException when configuration is not available for the device.\n      */\n     public DeviceConfiguration getDeviceConfiguration() throws DeviceConfigurationException {\n         String thingName = getStringParameterFromConfig(DEVICE_PARAM_THING_NAME);\n-        String certificateFilePath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n-        String privateKeyPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n-        String rootCAPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));\n+        String certificateFilePath = kernelCommandLine.deTilde(\n+                getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n+        String privateKeyPath = kernelCommandLine.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n+        String rootCAPath = kernelCommandLine.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));", "originalCommit": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ5MDU3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408490575", "bodyText": "Since it cannot be static, I don't think it should move to utils. Unless I changed the signature to take in a kernel reference. What do you think?", "author": "MikeDombo", "createdAt": "2020-04-14T23:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NjMzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzOTY3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408539670", "bodyText": "Right, it is using non static members, maybe leave it as it is then", "author": "shaguptashaikh", "createdAt": "2020-04-15T02:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NjMzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NjM0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408486348", "bodyText": "Does it need to return this? it is essentially taking a kernel instance in the constructor and modifying it", "author": "shaguptashaikh", "createdAt": "2020-04-14T23:05:23Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.ConfigurationWriter;\n+import com.aws.iot.evergreen.dependency.EZPlugins;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.kernel.exceptions.InputValidationException;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Exec;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.aws.iot.evergreen.util.Utils.close;\n+import static com.aws.iot.evergreen.util.Utils.deepToString;\n+\n+public class KernelLifecycle {\n+    private static final Logger logger = LogManager.getLogger(KernelLifecycle.class);\n+\n+    private final Kernel kernel;\n+    private final KernelCommandLine kernelCommandLine;\n+    private final Map<String, Class<?>> serviceImplementors = new HashMap<>();\n+    private ConfigurationWriter tlog;\n+    private EvergreenService mainService;\n+    private final AtomicBoolean isShutdownInitiated = new AtomicBoolean(false);\n+\n+    public KernelLifecycle(Kernel kernel, KernelCommandLine kernelCommandLine) {\n+        this.kernel = kernel;\n+        this.kernelCommandLine = kernelCommandLine;\n+    }\n+\n+    /**\n+     * Startup the Kernel and all services.\n+     */\n+    public Kernel launch() {\n+        logger.atInfo().log(\"root path = {}. config path = {}\", kernel.rootPath,\n+                kernel.configPath);\n+        kernelCommandLine.installCliTool(getClass().getClassLoader().getResource(\"evergreen-launch\"));\n+        Exec.setDefaultEnv(\"EVERGREEN_HOME\", kernel.rootPath.toString());\n+\n+        try {\n+            mainService = kernel.locate(kernelCommandLine.mainServiceName);\n+        } catch (ServiceLoadException sle) {\n+            RuntimeException rte =\n+                    new RuntimeException(\"Cannot load main service\", sle);\n+            logger.atError(\"system-boot-error\", rte).log();\n+            throw rte;\n+        }\n+        Path transactionLogPath = kernel.configPath.resolve(\"config.tlog\");\n+        Path configurationFile = kernel.configPath.resolve(\"config.yaml\");\n+        try {\n+            if (kernelCommandLine.haveRead) {\n+                // new config file came in from the outside\n+                kernel.writeEffectiveConfig(configurationFile);\n+                Files.deleteIfExists(transactionLogPath);\n+            } else {\n+                if (Files.exists(configurationFile)) {\n+                    kernel.config.read(configurationFile);\n+                }\n+                if (Files.exists(transactionLogPath)) {\n+                    kernel.config.read(transactionLogPath);\n+                }\n+            }\n+            tlog = ConfigurationWriter.logTransactionsTo(kernel.config, transactionLogPath);\n+            tlog.flushImmediately(true);\n+        } catch (IOException ioe) {\n+            logger.atError().setEventType(\"system-config-error\").setCause(ioe).log();\n+            throw new RuntimeException(ioe);\n+        }\n+\n+        if (!kernelCommandLine.forReal) {\n+            kernel.context.put(ShellRunner.class, kernel.context.get(ShellRunner.Dryrun.class));\n+        }\n+\n+        Queue<String> autostart = findBuiltInServicesAndPlugins();\n+        autostart.forEach(s -> {\n+            try {\n+                mainService.addOrUpdateDependency(kernel.locate(s), State.RUNNING, true);\n+            } catch (ServiceLoadException se) {\n+                logger.atError().setCause(se).log(\"Unable to load service {}\", s);\n+            } catch (InputValidationException e) {\n+                logger.atError().setCause(e).log(\"Unable to add auto-starting dependency {} to main\", s);\n+            }\n+        });\n+        kernel.writeEffectiveConfig();\n+        logger.atInfo().setEventType(\"system-start\").addKeyValue(\"main\", kernel.getMain()).log();\n+        startupAllServices();\n+\n+        return kernel;", "originalCommit": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ5MDc4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408490780", "bodyText": "Technically sure, this is just there to keep the signature the same. I can remove it.", "author": "MikeDombo", "createdAt": "2020-04-14T23:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NjM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "29300fad0c3c074e2d956a1927148e31b98a5b56", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java b/src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java\nindex f0427e1d6..07f1e5958 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java\n\n@@ -52,7 +52,7 @@ public class KernelLifecycle {\n     /**\n      * Startup the Kernel and all services.\n      */\n-    public Kernel launch() {\n+    public void launch() {\n         logger.atInfo().log(\"root path = {}. config path = {}\", kernel.rootPath,\n                 kernel.configPath);\n         kernelCommandLine.installCliTool(getClass().getClassLoader().getResource(\"evergreen-launch\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NzczMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408487732", "bodyText": "Nit- I would name it something that is more specific and suits better as a class name, say DeploymentConfigMerger, and if this is only intended to be used for deployments, should we move it to the deployment package?", "author": "shaguptashaikh", "createdAt": "2020-04-14T23:09:36Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/DeploymentMerge.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.exceptions.ServiceUpdateException;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+\n+@AllArgsConstructor\n+public class DeploymentMerge {", "originalCommit": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ5MTAzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408491033", "bodyText": "Thanks for the better name. Yes, I thought about moving it into deployment package. I can definitely move it over.", "author": "MikeDombo", "createdAt": "2020-04-14T23:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NzczMg=="}], "type": "inlineReview", "revised_code": {"commit": "29300fad0c3c074e2d956a1927148e31b98a5b56", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/DeploymentMerge.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java\nsimilarity index 96%\nrename from src/main/java/com/aws/iot/evergreen/kernel/DeploymentMerge.java\nrename to src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java\nindex c3aea569c..a63c56bd4 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/DeploymentMerge.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java\n\n@@ -3,10 +3,14 @@\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package com.aws.iot.evergreen.kernel;\n+package com.aws.iot.evergreen.deployment;\n \n import com.aws.iot.evergreen.dependency.State;\n import com.aws.iot.evergreen.deployment.exceptions.ServiceUpdateException;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.GenericExternalService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.kernel.UpdateSystemSafelyService;\n import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n"}}, {"oid": "a811cb375fca693b0eaef8ad2c6e2c1d33edcf30", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a811cb375fca693b0eaef8ad2c6e2c1d33edcf30", "message": "Initial refactor of Kernel.java", "committedDate": "2020-04-15T00:31:09Z", "type": "commit"}, {"oid": "29300fad0c3c074e2d956a1927148e31b98a5b56", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/29300fad0c3c074e2d956a1927148e31b98a5b56", "message": "Address PR comments", "committedDate": "2020-04-15T00:31:45Z", "type": "forcePushed"}, {"oid": "5068d1ae3e2fb5ab59770a88b0d54a786c44424b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5068d1ae3e2fb5ab59770a88b0d54a786c44424b", "message": "Address PR comments", "committedDate": "2020-04-15T00:33:42Z", "type": "forcePushed"}, {"oid": "d84fd7c3c9604938d9545b0b7355caf62d455828", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d84fd7c3c9604938d9545b0b7355caf62d455828", "message": "Address PR comments", "committedDate": "2020-04-15T00:36:14Z", "type": "forcePushed"}, {"oid": "c466a80670fbda88948e0f2031a74634a30ae7f5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c466a80670fbda88948e0f2031a74634a30ae7f5", "message": "Address PR comments", "committedDate": "2020-04-15T02:42:07Z", "type": "forcePushed"}, {"oid": "9497fcc3ebad603e2eb970411e8cf5ca90426749", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9497fcc3ebad603e2eb970411e8cf5ca90426749", "message": "Address PR comments", "committedDate": "2020-04-15T02:46:11Z", "type": "commit"}, {"oid": "9497fcc3ebad603e2eb970411e8cf5ca90426749", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9497fcc3ebad603e2eb970411e8cf5ca90426749", "message": "Address PR comments", "committedDate": "2020-04-15T02:46:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjE2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409022166", "bodyText": "This seems weird, we call kernel.parseArgs from KernelCommandLine and then kernel.parseArgs() calls parseArgs() method in KernelCommandLine class", "author": "fahadmohammed01", "createdAt": "2020-04-15T17:45:05Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Objects;\n+\n+import static com.aws.iot.evergreen.util.Utils.HOME_PATH;\n+\n+public class KernelCommandLine {\n+    private static final Logger logger = LogManager.getLogger(KernelCommandLine.class);\n+    private static final String done = \" missing \"; // unique marker\n+    private final Kernel kernel;\n+    boolean forReal = true;\n+    boolean haveRead = false;\n+    String mainServiceName = \"main\";\n+    private String[] args;\n+    private String arg;\n+    private int argpos = 0;\n+\n+    private static final String configPathName = \"~root/config\";\n+    private static final String clitoolPathName = \"~root/bin\";\n+    private static final String workPathName = \"~root/work\";\n+    private static final String packageStorePathName = \"~root/packages\";\n+\n+    public static void main(String[] args) {\n+        new Kernel().parseArgs(args).launch();", "originalCommit": "9497fcc3ebad603e2eb970411e8cf5ca90426749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzI3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409027275", "bodyText": "I would say that that isn't exactly the point, since this is just the main entrypoint, and our main needs to be starting with a Kernel.", "author": "MikeDombo", "createdAt": "2020-04-15T17:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjE2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjg4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409022884", "bodyText": "move deTilde to a util?", "author": "fahadmohammed01", "createdAt": "2020-04-15T17:46:20Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfigurationHelper.java", "diffHunk": "@@ -30,16 +31,20 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private KernelCommandLine kernelCommandLine;\n+\n     /**\n      * Retrieves the device configuration information from kernel config to communicate with Iot Cloud.\n      * @return {@link DeviceConfiguration}\n      * @throws DeviceConfigurationException when configuration is not available for the device.\n      */\n     public DeviceConfiguration getDeviceConfiguration() throws DeviceConfigurationException {\n         String thingName = getStringParameterFromConfig(DEVICE_PARAM_THING_NAME);\n-        String certificateFilePath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n-        String privateKeyPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n-        String rootCAPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));\n+        String certificateFilePath = kernelCommandLine.deTilde(", "originalCommit": "9497fcc3ebad603e2eb970411e8cf5ca90426749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNTczNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409025737", "bodyText": "Shagupta said the same. It can't be moved because it isn't static, unless I change it to have kernel as a parameter.", "author": "MikeDombo", "createdAt": "2020-04-15T17:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjg4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMzUzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409023534", "bodyText": "Moving all this to DeploymentConfigMerger makes a lot of sense, nice!", "author": "fahadmohammed01", "createdAt": "2020-04-15T17:47:25Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.exceptions.ServiceUpdateException;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.GenericExternalService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.kernel.UpdateSystemSafelyService;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+\n+@AllArgsConstructor\n+public class DeploymentConfigMerger {", "originalCommit": "9497fcc3ebad603e2eb970411e8cf5ca90426749", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}