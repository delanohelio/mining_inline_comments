{"pr_number": 63, "pr_title": "Refactor server pushing", "pr_createdAt": "2020-02-14T20:56:45Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/63", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3ODQ4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/63#discussion_r379678481", "bodyText": "Why not move Set to a field 'onDisconnectTasks' in ConnectionContext object?", "author": "ShirleyZheng92", "createdAt": "2020-02-14T22:46:31Z", "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -34,8 +34,7 @@\n \n     private final Map<Integer, IPCCallback> destinationCallbackMap = new ConcurrentHashMap<>();\n     private final Map<ConnectionContext, Channel> clientToChannelMap = new ConcurrentHashMap<>();\n-    private final Map<ConnectionContext, List<Consumer<ConnectionContext>>> clientToDisconnectorsMap =\n-            new ConcurrentHashMap<>();\n+    private final Map<ConnectionContext, Set<Runnable>> clientToDisconnectorsMap = new ConcurrentHashMap<>();", "originalCommit": "e0c46a9b0e08c286da959bf5dbb4a168c2c7c2cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6929a201ca36b60efa4879ee0587442c4c4f655", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java b/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java\nindex e0e337c1b..0c63a3a20 100644\n--- a/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java\n+++ b/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java\n\n@@ -34,7 +31,6 @@ public class IPCRouter {\n \n     private final Map<Integer, IPCCallback> destinationCallbackMap = new ConcurrentHashMap<>();\n     private final Map<ConnectionContext, Channel> clientToChannelMap = new ConcurrentHashMap<>();\n-    private final Map<ConnectionContext, Set<Runnable>> clientToDisconnectorsMap = new ConcurrentHashMap<>();\n     private final Map<ClientAndRequestId, CompletableFuture<FrameReader.Message>> requestIdToCallbackMap =\n             new ConcurrentHashMap<>();\n \n"}}, {"oid": "c6929a201ca36b60efa4879ee0587442c4c4f655", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c6929a201ca36b60efa4879ee0587442c4c4f655", "message": "Refactor server pushing", "committedDate": "2020-02-17T21:45:17Z", "type": "forcePushed"}, {"oid": "1e3bf5037005158c1004c71993b349dfc0d037a6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e3bf5037005158c1004c71993b349dfc0d037a6", "message": "Refactor server pushing", "committedDate": "2020-02-17T21:54:11Z", "type": "forcePushed"}, {"oid": "67d8099357664a2848948c17f4ef51287b1a9e67", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/67d8099357664a2848948c17f4ef51287b1a9e67", "message": "Refactor server pushing", "committedDate": "2020-02-17T22:00:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4MDIwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/63#discussion_r380380202", "bodyText": "NIT: You can add context.onDisconnect(clientToChannelMap.onDisconnect(context));", "author": "ShirleyZheng92", "createdAt": "2020-02-17T22:06:06Z", "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -68,79 +63,59 @@ public IPCCallback getCallbackForDestination(int destination) {\n     }\n \n     /**\n-     * Tries to get a connection handle from a context. The connection handle can be used to send\n-     * requests to the client and then wait for a response.\n+     * Send a message to a connection's destination and get a future for the response message.\n      *\n-     * @param connectionContext  The request context of the client that you want the handle to.\n-     * @param disconnectCallback Function to be called when the client disconnects. Use for cleaning up\n-     *                           extra listeners.\n-     * @return\n+     * @param connection  connection to send the message to\n+     * @param destination destination within the context to target\n+     * @param msg         message to be send\n+     * @return future containing response message or exception\n      */\n-    @Nullable\n-    public ConnectionHandle getConnectionHandle(ConnectionContext connectionContext,\n-                                                Consumer<ConnectionContext> disconnectCallback) {\n-        Channel channel = clientToChannelMap.get(connectionContext);\n+    public Future<FrameReader.Message> sendAndReceive(ConnectionContext connection, int destination,\n+                                                      FrameReader.Message msg) {\n+        CompletableFuture<FrameReader.Message> fut = new CompletableFuture<>();\n+\n+        Channel channel = clientToChannelMap.get(connection);\n         if (channel == null) {\n-            return null;\n+            fut.completeExceptionally(new IPCException(\"Channel not found for given connection context\"));\n+            return fut;\n         }\n \n-        clientToDisconnectorsMap.compute(connectionContext, (key, value) -> {\n-            if (value == null) {\n-                value = new ArrayList<>();\n-            }\n-            value.add(disconnectCallback);\n-            return value;\n-        });\n-\n-        return (destination, message) -> {\n-            FrameReader.MessageFrame requestFrame =\n-                    new FrameReader.MessageFrame(destination, message, FrameReader.FrameType.REQUEST);\n+        FrameReader.MessageFrame requestFrame =\n+                new FrameReader.MessageFrame(destination, msg, FrameReader.FrameType.REQUEST);\n+        requestIdToCallbackMap.put(new ClientAndRequestId(requestFrame.requestId, connection), fut);\n \n-            CompletableFuture<FrameReader.Message> fut = new CompletableFuture<>();\n-            requestIdToCallbackMap\n-                    .put(new ClientAndRequestId(requestFrame.requestId, connectionContext), fut);\n-\n-            channel.writeAndFlush(requestFrame);\n-\n-            return fut;\n-        };\n+        channel.writeAndFlush(requestFrame);\n+        return fut;\n     }\n \n     /**\n-     * Only called by MessageRouter, do not call in any other place.\n      * Called when a client disconnects from the server.\n      *\n      * @param context client which disconnected's context\n      */\n-    public void clientDisconnected(ConnectionContext context) {\n+    void clientDisconnected(ConnectionContext context) {\n         clientToChannelMap.remove(context);\n-        List<Consumer<ConnectionContext>> disconnectors = clientToDisconnectorsMap.remove(context);\n-        if (disconnectors != null) {\n-            disconnectors.forEach(d -> d.accept(context));\n-        }\n     }\n \n     /**\n-     * Only called by MessageRouter, do not call in any other place.\n      * Called when a client first authenticates successfully.\n      *\n      * @param context the context for the client that just connected\n      * @param channel the channel to talk to the client\n      */\n-    public void clientConnected(ConnectionContext context, Channel channel) {\n+    void clientConnected(ConnectionContext context, Channel channel) {", "originalCommit": "67d8099357664a2848948c17f4ef51287b1a9e67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9a219dbe06975f3e26c7ae53ed1ca47d17f77ce", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java b/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java\nindex 0c63a3a20..a19fc5c6a 100644\n--- a/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java\n+++ b/src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java\n\n@@ -93,7 +93,7 @@ public class IPCRouter {\n      *\n      * @param context client which disconnected's context\n      */\n-    void clientDisconnected(ConnectionContext context) {\n+    private void clientDisconnected(ConnectionContext context) {\n         clientToChannelMap.remove(context);\n     }\n \n"}}, {"oid": "1a6a44bd5aa358943d54bfd12e5271dca61d2637", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1a6a44bd5aa358943d54bfd12e5271dca61d2637", "message": "Refactor server pushing", "committedDate": "2020-02-17T22:37:00Z", "type": "forcePushed"}, {"oid": "8caa9157d93ff1ae614076f3065d8791ecae252b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8caa9157d93ff1ae614076f3065d8791ecae252b", "message": "Refactor server pushing", "committedDate": "2020-02-18T17:51:52Z", "type": "forcePushed"}, {"oid": "c9a219dbe06975f3e26c7ae53ed1ca47d17f77ce", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c9a219dbe06975f3e26c7ae53ed1ca47d17f77ce", "message": "Refactor server pushing", "committedDate": "2020-02-18T17:58:52Z", "type": "forcePushed"}, {"oid": "232f8d049b6981fad566bc3e1ea48c2c8df2b791", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/232f8d049b6981fad566bc3e1ea48c2c8df2b791", "message": "Refactor server pushing", "committedDate": "2020-02-18T18:15:28Z", "type": "commit"}, {"oid": "232f8d049b6981fad566bc3e1ea48c2c8df2b791", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/232f8d049b6981fad566bc3e1ea48c2c8df2b791", "message": "Refactor server pushing", "committedDate": "2020-02-18T18:15:28Z", "type": "forcePushed"}, {"oid": "997402103895a4c04a6c5be4bd97488b1ca33d5e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/997402103895a4c04a6c5be4bd97488b1ca33d5e", "message": "Merge branch 'master' into refactor_server_push", "committedDate": "2020-02-18T18:30:56Z", "type": "commit"}]}