{"pr_number": 224, "pr_title": "Implement service soft dependencies in Kernel", "pr_createdAt": "2020-05-06T02:22:41Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224", "timeline": [{"oid": "31f83a652b3c44d6fb69f19dc48c78c8ec64d6cb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/31f83a652b3c44d6fb69f19dc48c78c8ec64d6cb", "message": "Implement soft dependencies with startWhen setting", "committedDate": "2020-05-06T02:41:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0MjQzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r420542431", "bodyText": "Where did the default of RUNNING go to?", "author": "MikeDombo", "createdAt": "2020-05-06T04:44:51Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -469,21 +477,19 @@ public Topics getServiceConfig() {\n \n     private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen)\n             throws InputValidationException, ServiceLoadException {\n-        if (startWhen == null) {\n-            startWhen = State.RUNNING.toString();\n-        }\n         State x = null;\n-        int len = startWhen.length();\n-        if (len > 0) {\n+        if (startWhen != null && !startWhen.isEmpty()) {", "originalCommit": "31f83a652b3c44d6fb69f19dc48c78c8ec64d6cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19e8e80e41548d709edc8ccc75405d2e1f990d28", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex ad992bc2..b77e3604 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -460,47 +457,45 @@ public class EvergreenService implements InjectionActions, DisruptableCheck {\n         return config;\n     }\n \n-    private Map<EvergreenService, State> getDependencyStateMap(Iterable<String> dependencyList)\n+    private Map<EvergreenService, Type> getDependencyTypeMap(Iterable<String> dependencyList)\n             throws InputValidationException, ServiceLoadException {\n-        HashMap<EvergreenService, State> ret = new HashMap<>();\n+        HashMap<EvergreenService, Type> ret = new HashMap<>();\n         for (String dependency : dependencyList) {\n             String[] dependencyInfo = dependency.split(\":\");\n             if (dependencyInfo.length == 0 || dependencyInfo.length > 2) {\n                 throw new InputValidationException(\"Bad dependency syntax\");\n             }\n-            Pair<EvergreenService, State> dep =\n+            Pair<EvergreenService, Type> dep =\n                     parseSingleDependency(dependencyInfo[0], dependencyInfo.length > 1 ? dependencyInfo[1] : null);\n             ret.put(dep.getLeft(), dep.getRight());\n         }\n         return ret;\n     }\n \n-    private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen)\n+    private Pair<EvergreenService, Type> parseSingleDependency(String name, String typeString)\n             throws InputValidationException, ServiceLoadException {\n-        State x = null;\n-        if (startWhen != null && !startWhen.isEmpty()) {\n+        Type type = null;\n+        if (typeString != null && !typeString.isEmpty()) {\n             // do \"friendly\" match\n-            for (State s : SUPPORTED_DEPENDENCY_TARGET_STATES) {\n-                if (startWhen.regionMatches(true, 0, s.name(), 0, startWhen.length())) {\n-                    x = s;\n+            for (Type s : Type.values()) {\n+                if (typeString.regionMatches(true, 0, s.name(), 0, typeString.length())) {\n+                    type = s;\n                     break;\n                 }\n             }\n-            if (x == null) {\n-                throw new InputValidationException(String.format(\n-                        \"'%s' does not match any supported EvergreenService state name: %s\", startWhen,\n-                        SUPPORTED_DEPENDENCY_TARGET_STATES));\n+            if (type == null) {\n+                throw new InputValidationException(typeString + \" does not match any Service dependency type\");\n             }\n         }\n \n         EvergreenService d = context.get(Kernel.class).locate(name);\n-        return new Pair<>(d, x == null ? State.RUNNING : x);\n+        return new Pair<>(d, type == null ? Type.HARD : type);\n     }\n \n     private synchronized void setupDependencies(Iterable<String> dependencyList)\n             throws ServiceLoadException, InputValidationException {\n-        Map<EvergreenService, State> oldDependencies = new HashMap<>(getDependencies());\n-        Map<EvergreenService, State> keptDependencies = getDependencyStateMap(dependencyList);\n+        Map<EvergreenService, Type> oldDependencies = new HashMap<>(getDependencies());\n+        Map<EvergreenService, Type> keptDependencies = getDependencyTypeMap(dependencyList);\n \n         Set<EvergreenService> removedDependencies = dependencies.entrySet().stream()\n                 .filter(e -> !keptDependencies.containsKey(e.getKey()) && !e.getValue().isDefaultDependency)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0Mjc0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r420542747", "bodyText": "Why only RUNNING here? Should this include FINISHED also since that is almost even harder than RUNNING?", "author": "MikeDombo", "createdAt": "2020-05-06T04:46:13Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -358,13 +360,14 @@ private Subscriber createDependencySubscriber(EvergreenService dependentEvergree\n         };\n     }\n \n-    private List<EvergreenService> getDependers() {\n+    private List<EvergreenService> getHardDependers() {\n         List<EvergreenService> dependers = new ArrayList<>();\n         Kernel kernel = context.get(Kernel.class);\n         for (EvergreenService evergreenService : kernel.orderedDependencies()) {\n-            boolean isDepender = evergreenService.dependencies.keySet().stream().anyMatch(d -> d.equals(this));\n-            if (isDepender) {\n-                dependers.add(evergreenService);\n+            for (Map.Entry<EvergreenService, DependencyInfo> entry : evergreenService.dependencies.entrySet()) {\n+                if (entry.getKey().equals(this) && State.RUNNING.equals(entry.getValue().startWhen)) {", "originalCommit": "31f83a652b3c44d6fb69f19dc48c78c8ec64d6cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19e8e80e41548d709edc8ccc75405d2e1f990d28", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex ad992bc2..b77e3604 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -365,7 +366,7 @@ public class EvergreenService implements InjectionActions, DisruptableCheck {\n         Kernel kernel = context.get(Kernel.class);\n         for (EvergreenService evergreenService : kernel.orderedDependencies()) {\n             for (Map.Entry<EvergreenService, DependencyInfo> entry : evergreenService.dependencies.entrySet()) {\n-                if (entry.getKey().equals(this) && State.RUNNING.equals(entry.getValue().startWhen)) {\n+                if (entry.getKey().equals(this) && Type.HARD.equals(entry.getValue().dependencyType)) {\n                     dependers.add(evergreenService);\n                 }\n             }\n"}}, {"oid": "19e8e80e41548d709edc8ccc75405d2e1f990d28", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/19e8e80e41548d709edc8ccc75405d2e1f990d28", "message": "Support service soft dependencies in Kernel", "committedDate": "2020-05-12T02:40:46Z", "type": "forcePushed"}, {"oid": "e985ed015a4d35b412a430eaee402911f8e46371", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e985ed015a4d35b412a430eaee402911f8e46371", "message": "Support service soft dependencies in Kernel", "committedDate": "2020-05-12T20:49:23Z", "type": "forcePushed"}, {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/48a65508db1f3ac766abafc8e9f0df612f926bb2", "message": "Support service soft dependencies in Kernel", "committedDate": "2020-05-12T21:00:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjI5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424046295", "bodyText": "nit: lowercase service here.", "author": "MikeDombo", "createdAt": "2020-05-12T21:32:45Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -444,49 +445,45 @@ public Topics getServiceConfig() {\n         return config;\n     }\n \n-    private Map<EvergreenService, State> getDependencyStateMap(Iterable<String> dependencyList)\n+    private Map<EvergreenService, Type> getDependencyTypeMap(Iterable<String> dependencyList)\n             throws InputValidationException, ServiceLoadException {\n-        HashMap<EvergreenService, State> ret = new HashMap<>();\n+        HashMap<EvergreenService, Type> ret = new HashMap<>();\n         for (String dependency : dependencyList) {\n             String[] dependencyInfo = dependency.split(\":\");\n             if (dependencyInfo.length == 0 || dependencyInfo.length > 2) {\n                 throw new InputValidationException(\"Bad dependency syntax\");\n             }\n-            Pair<EvergreenService, State> dep =\n+            Pair<EvergreenService, Type> dep =\n                     parseSingleDependency(dependencyInfo[0], dependencyInfo.length > 1 ? dependencyInfo[1] : null);\n             ret.put(dep.getLeft(), dep.getRight());\n         }\n         return ret;\n     }\n \n-    private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen)\n+    private Pair<EvergreenService, Type> parseSingleDependency(String name, String typeString)\n             throws InputValidationException, ServiceLoadException {\n-        if (startWhen == null) {\n-            startWhen = State.RUNNING.toString();\n-        }\n-        State x = null;\n-        int len = startWhen.length();\n-        if (len > 0) {\n+        Type type = null;\n+        if (typeString != null && !typeString.isEmpty()) {\n             // do \"friendly\" match\n-            for (State s : State.values()) {\n-                if (startWhen.regionMatches(true, 0, s.name(), 0, len)) {\n-                    x = s;\n+            for (Type s : Type.values()) {\n+                if (typeString.regionMatches(true, 0, s.name(), 0, typeString.length())) {\n+                    type = s;\n                     break;\n                 }\n             }\n-            if (x == null) {\n-                throw new InputValidationException(startWhen + \" does not match any EvergreenService state name\");\n+            if (type == null) {\n+                throw new InputValidationException(typeString + \" does not match any Service dependency type\");", "originalCommit": "48a65508db1f3ac766abafc8e9f0df612f926bb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNjQzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424726433", "bodyText": "This hasn't been updated.", "author": "MikeDombo", "createdAt": "2020-05-13T20:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjI5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 37d9e1f9..3ea9a02e 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -445,27 +447,27 @@ public class EvergreenService implements InjectionActions, DisruptableCheck {\n         return config;\n     }\n \n-    private Map<EvergreenService, Type> getDependencyTypeMap(Iterable<String> dependencyList)\n+    protected Map<EvergreenService, DependencyType> getDependencyTypeMap(Iterable<String> dependencyList)\n             throws InputValidationException, ServiceLoadException {\n-        HashMap<EvergreenService, Type> ret = new HashMap<>();\n+        HashMap<EvergreenService, DependencyType> ret = new HashMap<>();\n         for (String dependency : dependencyList) {\n             String[] dependencyInfo = dependency.split(\":\");\n             if (dependencyInfo.length == 0 || dependencyInfo.length > 2) {\n                 throw new InputValidationException(\"Bad dependency syntax\");\n             }\n-            Pair<EvergreenService, Type> dep =\n+            Pair<EvergreenService, DependencyType> dep =\n                     parseSingleDependency(dependencyInfo[0], dependencyInfo.length > 1 ? dependencyInfo[1] : null);\n             ret.put(dep.getLeft(), dep.getRight());\n         }\n         return ret;\n     }\n \n-    private Pair<EvergreenService, Type> parseSingleDependency(String name, String typeString)\n+    private Pair<EvergreenService, DependencyType> parseSingleDependency(String name, String typeString)\n             throws InputValidationException, ServiceLoadException {\n-        Type type = null;\n+        DependencyType type = null;\n         if (typeString != null && !typeString.isEmpty()) {\n             // do \"friendly\" match\n-            for (Type s : Type.values()) {\n+            for (DependencyType s : DependencyType.values()) {\n                 if (typeString.regionMatches(true, 0, s.name(), 0, typeString.length())) {\n                     type = s;\n                     break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjczOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424046739", "bodyText": "IMO these can probably be soft.", "author": "MikeDombo", "createdAt": "2020-05-12T21:33:48Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -73,7 +73,7 @@ public void launch() {\n \n         autostart.forEach(s -> {\n             try {\n-                mainService.addOrUpdateDependency(kernel.locate(s), State.RUNNING, true);\n+                mainService.addOrUpdateDependency(kernel.locate(s), Type.HARD, true);", "originalCommit": "48a65508db1f3ac766abafc8e9f0df612f926bb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MzE0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424053144", "bodyText": "Does mean if an EG-aware service wants to use IPC featues, it has to explicitly declare hard dependency on IPCService? Maybe we can discuss offline which 1P offerings can be soft dependency and whether we should expose that in configuration.", "author": "hui-yang", "createdAt": "2020-05-12T21:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MTg3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424091875", "bodyText": "Discussed offline. We agreed to leave the defaults to be hard dependencies.", "author": "hui-yang", "createdAt": "2020-05-12T23:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java b/src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java\nindex c640e300..959f4d6c 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java\n\n@@ -73,7 +73,7 @@ public class KernelLifecycle {\n \n         autostart.forEach(s -> {\n             try {\n-                mainService.addOrUpdateDependency(kernel.locate(s), Type.HARD, true);\n+                mainService.addOrUpdateDependency(kernel.locate(s), DependencyType.HARD, true);\n             } catch (ServiceLoadException se) {\n                 logger.atError().log(\"Unable to load service {}\", s, se);\n             } catch (InputValidationException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0ODEwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424048103", "bodyText": "nit: may want to do a case-insensitive match using toUpperCase", "author": "MikeDombo", "createdAt": "2020-05-12T21:37:01Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -444,49 +445,45 @@ public Topics getServiceConfig() {\n         return config;\n     }\n \n-    private Map<EvergreenService, State> getDependencyStateMap(Iterable<String> dependencyList)\n+    private Map<EvergreenService, Type> getDependencyTypeMap(Iterable<String> dependencyList)\n             throws InputValidationException, ServiceLoadException {\n-        HashMap<EvergreenService, State> ret = new HashMap<>();\n+        HashMap<EvergreenService, Type> ret = new HashMap<>();\n         for (String dependency : dependencyList) {\n             String[] dependencyInfo = dependency.split(\":\");\n             if (dependencyInfo.length == 0 || dependencyInfo.length > 2) {\n                 throw new InputValidationException(\"Bad dependency syntax\");\n             }\n-            Pair<EvergreenService, State> dep =\n+            Pair<EvergreenService, Type> dep =\n                     parseSingleDependency(dependencyInfo[0], dependencyInfo.length > 1 ? dependencyInfo[1] : null);\n             ret.put(dep.getLeft(), dep.getRight());\n         }\n         return ret;\n     }\n \n-    private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen)\n+    private Pair<EvergreenService, Type> parseSingleDependency(String name, String typeString)\n             throws InputValidationException, ServiceLoadException {\n-        if (startWhen == null) {\n-            startWhen = State.RUNNING.toString();\n-        }\n-        State x = null;\n-        int len = startWhen.length();\n-        if (len > 0) {\n+        Type type = null;\n+        if (typeString != null && !typeString.isEmpty()) {\n             // do \"friendly\" match\n-            for (State s : State.values()) {\n-                if (startWhen.regionMatches(true, 0, s.name(), 0, len)) {\n-                    x = s;\n+            for (Type s : Type.values()) {", "originalCommit": "48a65508db1f3ac766abafc8e9f0df612f926bb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1NDI1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424054251", "bodyText": "It should be case-insensitive because of next line. I'll add unit tests to verify that.", "author": "hui-yang", "createdAt": "2020-05-12T21:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0ODEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\nindex 37d9e1f9..3ea9a02e 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java\n\n@@ -445,27 +447,27 @@ public class EvergreenService implements InjectionActions, DisruptableCheck {\n         return config;\n     }\n \n-    private Map<EvergreenService, Type> getDependencyTypeMap(Iterable<String> dependencyList)\n+    protected Map<EvergreenService, DependencyType> getDependencyTypeMap(Iterable<String> dependencyList)\n             throws InputValidationException, ServiceLoadException {\n-        HashMap<EvergreenService, Type> ret = new HashMap<>();\n+        HashMap<EvergreenService, DependencyType> ret = new HashMap<>();\n         for (String dependency : dependencyList) {\n             String[] dependencyInfo = dependency.split(\":\");\n             if (dependencyInfo.length == 0 || dependencyInfo.length > 2) {\n                 throw new InputValidationException(\"Bad dependency syntax\");\n             }\n-            Pair<EvergreenService, Type> dep =\n+            Pair<EvergreenService, DependencyType> dep =\n                     parseSingleDependency(dependencyInfo[0], dependencyInfo.length > 1 ? dependencyInfo[1] : null);\n             ret.put(dep.getLeft(), dep.getRight());\n         }\n         return ret;\n     }\n \n-    private Pair<EvergreenService, Type> parseSingleDependency(String name, String typeString)\n+    private Pair<EvergreenService, DependencyType> parseSingleDependency(String name, String typeString)\n             throws InputValidationException, ServiceLoadException {\n-        Type type = null;\n+        DependencyType type = null;\n         if (typeString != null && !typeString.isEmpty()) {\n             // do \"friendly\" match\n-            for (Type s : Type.values()) {\n+            for (DependencyType s : DependencyType.values()) {\n                 if (typeString.regionMatches(true, 0, s.name(), 0, typeString.length())) {\n                     type = s;\n                     break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0ODUyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424048520", "bodyText": "Please add javadoc explaining what hard and soft mean.", "author": "MikeDombo", "createdAt": "2020-05-12T21:37:54Z", "path": "src/main/java/com/aws/iot/evergreen/dependency/Type.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.dependency;\n+\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Dependency type used for declared service dependencies.\n+ */\n+@AllArgsConstructor\n+public enum Type {\n+    HARD(\"HARD\"),", "originalCommit": "48a65508db1f3ac766abafc8e9f0df612f926bb2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/dependency/Type.java b/src/main/java/com/aws/iot/evergreen/dependency/Type.java\ndeleted file mode 100644\nindex 84baec40..00000000\n--- a/src/main/java/com/aws/iot/evergreen/dependency/Type.java\n+++ /dev/null\n\n@@ -1,19 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.aws.iot.evergreen.dependency;\n-\n-import lombok.AllArgsConstructor;\n-\n-/**\n- * Dependency type used for declared service dependencies.\n- */\n-@AllArgsConstructor\n-public enum Type {\n-    HARD(\"HARD\"),\n-    SOFT(\"SOFT\");\n-\n-    private String value;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0ODY1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424048651", "bodyText": "Type is far too generic. Please rename. Perhaps DependencyType.", "author": "MikeDombo", "createdAt": "2020-05-12T21:38:12Z", "path": "src/main/java/com/aws/iot/evergreen/dependency/Type.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.dependency;\n+\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Dependency type used for declared service dependencies.\n+ */\n+@AllArgsConstructor\n+public enum Type {", "originalCommit": "48a65508db1f3ac766abafc8e9f0df612f926bb2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/dependency/Type.java b/src/main/java/com/aws/iot/evergreen/dependency/Type.java\ndeleted file mode 100644\nindex 84baec40..00000000\n--- a/src/main/java/com/aws/iot/evergreen/dependency/Type.java\n+++ /dev/null\n\n@@ -1,19 +0,0 @@\n-/*\n- * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.aws.iot.evergreen.dependency;\n-\n-import lombok.AllArgsConstructor;\n-\n-/**\n- * Dependency type used for declared service dependencies.\n- */\n-@AllArgsConstructor\n-public enum Type {\n-    HARD(\"HARD\"),\n-    SOFT(\"SOFT\");\n-\n-    private String value;\n-}\n"}}, {"oid": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "message": "Address comments", "committedDate": "2020-05-12T22:34:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNTA2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424535064", "bodyText": "Nit- looks like leftover commented code, just remove it?", "author": "shaguptashaikh", "createdAt": "2020-05-13T15:36:33Z", "path": "src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java", "diffHunk": "@@ -109,7 +109,7 @@ public void T1() {\n \n     public static class C2 extends EvergreenService {\n         final String id = \"c2/\" + ++seq;\n-        //        @Inject @StartWhen(NEW) c1 parent;\n+        //        @Inject @ServiceDependencyType(DependencyType.SOFT) c1 parent;", "originalCommit": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTg0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424611841", "bodyText": "Yeah I can just remove it", "author": "hui-yang", "createdAt": "2020-05-13T17:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNTA2NA=="}], "type": "inlineReview", "revised_code": {"commit": "2e10b864238711738a94fba0dd4faef1e9c4f926", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java b/src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java\nindex 9efdb0ee..2d3f3b14 100644\n--- a/src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java\n\n@@ -109,7 +109,7 @@ public class LifecycleTest {\n \n     public static class C2 extends EvergreenService {\n         final String id = \"c2/\" + ++seq;\n-        //        @Inject @ServiceDependencyType(DependencyType.SOFT) c1 parent;\n+        //        @Inject @DependencyType(NEW) c1 parent;\n         public boolean shutdownCalled;\n         public boolean startupCalled;\n         @Inject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNzExMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424537111", "bodyText": "This TODO can be removed now right? or are you waiting for your other PRs?", "author": "shaguptashaikh", "createdAt": "2020-05-13T15:39:01Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -103,12 +103,12 @@\n         resolvedServiceConfig.put(SETENV_CONFIG_NAMESPACE, resolvedSetEnvConfig);\n \n         // TODO : Update package recipe format to include all information that service dependencies config\n-        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // expects according to the new syntax e.g. dependencyType,", "originalCommit": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTYyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424611623", "bodyText": "Yes. It's in the next PR to modify package recipes.", "author": "hui-yang", "createdAt": "2020-05-13T17:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNzExMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzOTIwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424539201", "bodyText": "Nit- now since you're making an effort to clean up this test, also static import verify?", "author": "shaguptashaikh", "createdAt": "2020-05-13T15:41:53Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java", "diffHunk": "@@ -1,63 +1,88 @@\n package com.aws.iot.evergreen.kernel;\n \n import com.aws.iot.evergreen.config.Subscriber;\n-import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.dependency.DependencyType;\n+import com.aws.iot.evergreen.kernel.exceptions.InputValidationException;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n-import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import java.util.Arrays;\n import java.util.Map;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n public class SetupDependencyTest extends EGServiceTestUtil {\n \n     private EvergreenService evergreenService;\n+    private Kernel mockKernel;\n \n \n     @BeforeEach\n     void beforeEach() {\n         evergreenService = new EvergreenService(initializeMockedConfig());\n         evergreenService.context = context;\n-        Kernel mockKernel = Mockito.mock(Kernel.class);\n-        Mockito.when(context.get(Kernel.class)).thenReturn(mockKernel);\n+        mockKernel = mock(Kernel.class);\n+        when(context.get(Kernel.class)).thenReturn(mockKernel);\n     }\n \n     @Test\n     void GIVEN_no_dependencies_added_WHEN_dependency_is_added_THEN_dependency_add_successful() throws Exception {\n         // GIVEN\n-        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n+        EvergreenService dep1 = mock(EvergreenService.class);\n \n         // WHEN\n-        evergreenService.addOrUpdateDependency(dep1, State.INSTALLED, false);\n+        evergreenService.addOrUpdateDependency(dep1, DependencyType.SOFT, false);\n \n         // THEN\n-        Map<EvergreenService, State> dependencies = evergreenService.getDependencies();\n+        Map<EvergreenService, DependencyType> dependencies = evergreenService.getDependencies();\n         // verify dependency added\n-        Assertions.assertEquals(1, dependencies.size());\n-        Assertions.assertEquals(State.INSTALLED, dependencies.get(dep1));\n+        assertEquals(1, dependencies.size());\n+        assertEquals(DependencyType.SOFT, dependencies.get(dep1));\n     }\n \n     @Test\n     void GIVEN_dependency_exist_WHEN_dependency_is_updated_THEN_update_successful() throws Exception {\n         // GIVEN\n-        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n+        EvergreenService dep1 = mock(EvergreenService.class);\n \n-        evergreenService.addOrUpdateDependency(dep1, State.INSTALLED, false);\n+        evergreenService.addOrUpdateDependency(dep1, DependencyType.SOFT, false);\n         Mockito.verify(dep1).addStateSubscriber(Mockito.any(Subscriber.class));", "originalCommit": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMjAyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424612027", "bodyText": "Will do.", "author": "hui-yang", "createdAt": "2020-05-13T17:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzOTIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e10b864238711738a94fba0dd4faef1e9c4f926", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java b/src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java\nindex b7185ae9..b95a732e 100644\n--- a/src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java\n\n@@ -1,88 +1,63 @@\n package com.aws.iot.evergreen.kernel;\n \n import com.aws.iot.evergreen.config.Subscriber;\n-import com.aws.iot.evergreen.dependency.DependencyType;\n-import com.aws.iot.evergreen.kernel.exceptions.InputValidationException;\n-import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import com.aws.iot.evergreen.dependency.Type;\n import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n-import java.util.Arrays;\n import java.util.Map;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n public class SetupDependencyTest extends EGServiceTestUtil {\n \n     private EvergreenService evergreenService;\n-    private Kernel mockKernel;\n \n \n     @BeforeEach\n     void beforeEach() {\n         evergreenService = new EvergreenService(initializeMockedConfig());\n         evergreenService.context = context;\n-        mockKernel = mock(Kernel.class);\n-        when(context.get(Kernel.class)).thenReturn(mockKernel);\n+        Kernel mockKernel = Mockito.mock(Kernel.class);\n+        Mockito.when(context.get(Kernel.class)).thenReturn(mockKernel);\n     }\n \n     @Test\n     void GIVEN_no_dependencies_added_WHEN_dependency_is_added_THEN_dependency_add_successful() throws Exception {\n         // GIVEN\n-        EvergreenService dep1 = mock(EvergreenService.class);\n+        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n \n         // WHEN\n-        evergreenService.addOrUpdateDependency(dep1, DependencyType.SOFT, false);\n+        evergreenService.addOrUpdateDependency(dep1, Type.SOFT, false);\n \n         // THEN\n-        Map<EvergreenService, DependencyType> dependencies = evergreenService.getDependencies();\n+        Map<EvergreenService, Type> dependencies = evergreenService.getDependencies();\n         // verify dependency added\n-        assertEquals(1, dependencies.size());\n-        assertEquals(DependencyType.SOFT, dependencies.get(dep1));\n+        Assertions.assertEquals(1, dependencies.size());\n+        Assertions.assertEquals(Type.SOFT, dependencies.get(dep1));\n     }\n \n     @Test\n     void GIVEN_dependency_exist_WHEN_dependency_is_updated_THEN_update_successful() throws Exception {\n         // GIVEN\n-        EvergreenService dep1 = mock(EvergreenService.class);\n+        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n \n-        evergreenService.addOrUpdateDependency(dep1, DependencyType.SOFT, false);\n+        evergreenService.addOrUpdateDependency(dep1, Type.SOFT, false);\n         Mockito.verify(dep1).addStateSubscriber(Mockito.any(Subscriber.class));\n \n-        Map<EvergreenService, DependencyType> dependencies = evergreenService.getDependencies();\n-        assertEquals(1, dependencies.size());\n-        assertEquals(DependencyType.SOFT, dependencies.get(dep1));\n+        Map<EvergreenService, Type> dependencies = evergreenService.getDependencies();\n+        Assertions.assertEquals(1, dependencies.size());\n+        Assertions.assertEquals(Type.SOFT, dependencies.get(dep1));\n \n         // WHEN\n-        evergreenService.addOrUpdateDependency(dep1, DependencyType.HARD, true);\n+        evergreenService.addOrUpdateDependency(dep1, Type.HARD, true);\n \n         // THEN\n         dependencies = evergreenService.getDependencies();\n-        assertEquals(1, dependencies.size());\n-        assertEquals(DependencyType.HARD, dependencies.get(dep1));\n+        Assertions.assertEquals(1, dependencies.size());\n+        Assertions.assertEquals(Type.HARD, dependencies.get(dep1));\n         // Remove the previous subscriber.\n         Mockito.verify(dep1).removeStateSubscriber(Mockito.any(Subscriber.class));\n     }\n-\n-    @Test\n-    void GIVEN_dependency_list_WHEN_parse_in_case_insensitive_way_THEN_get_dependency_name_and_type()\n-            throws ServiceLoadException, InputValidationException {\n-        EvergreenService svcA = mock(EvergreenService.class);\n-        EvergreenService svcB = mock(EvergreenService.class);\n-        EvergreenService svcC = mock(EvergreenService.class);\n-        when(mockKernel.locate(\"svcA\")).thenReturn(svcA);\n-        when(mockKernel.locate(\"svcB\")).thenReturn(svcB);\n-        when(mockKernel.locate(\"svcC\")).thenReturn(svcC);\n-\n-        Map<EvergreenService, DependencyType> dependencyMap = evergreenService.getDependencyTypeMap(Arrays\n-                .asList(\"svcA\", \"svcB:Hard\", \"svcC:sOFT\"));\n-        assertEquals(3, dependencyMap.size());\n-        assertEquals(DependencyType.HARD, dependencyMap.get(svcA));\n-        assertEquals(DependencyType.HARD, dependencyMap.get(svcB));\n-        assertEquals(DependencyType.SOFT, dependencyMap.get(svcC));\n-    }\n }\n"}}, {"oid": "2e10b864238711738a94fba0dd4faef1e9c4f926", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2e10b864238711738a94fba0dd4faef1e9c4f926", "message": "Support service soft dependencies in Kernel", "committedDate": "2020-05-13T18:24:11Z", "type": "commit"}, {"oid": "471e0dadab19c65c83631afa58fdba27f9218325", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/471e0dadab19c65c83631afa58fdba27f9218325", "message": "Address comments", "committedDate": "2020-05-13T18:24:11Z", "type": "commit"}, {"oid": "471e0dadab19c65c83631afa58fdba27f9218325", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/471e0dadab19c65c83631afa58fdba27f9218325", "message": "Address comments", "committedDate": "2020-05-13T18:24:11Z", "type": "forcePushed"}, {"oid": "02ffb7f6a4133c2a1acfc5f8e6482d0ade81ec44", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/02ffb7f6a4133c2a1acfc5f8e6482d0ade81ec44", "message": "Merge branch 'master' into soft-dep", "committedDate": "2020-05-13T20:21:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMDc4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424710788", "bodyText": "Nit - remain in its state", "author": "shaguptashaikh", "createdAt": "2020-05-13T20:26:35Z", "path": "src/main/java/com/aws/iot/evergreen/dependency/DependencyType.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.dependency;\n+\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Dependency type used for declared service dependencies.\n+ */\n+@AllArgsConstructor\n+public enum DependencyType {\n+    /**\n+     * The lifecycle of hard dependencies will impact the lifecycle of the depending service.\n+     * e.g. the depending service will be restarted by Kernel if any hard dependency errors out and tries to recover.\n+     */\n+    HARD(\"HARD\"),\n+\n+    /**\n+     * Soft dependencies have independent lifecycle from the depending service.\n+     * e.g. the depending service can remain its state if any soft dependency errors out.", "originalCommit": "02ffb7f6a4133c2a1acfc5f8e6482d0ade81ec44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNjU2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424736564", "bodyText": "Will update in the next PR #237", "author": "hui-yang", "createdAt": "2020-05-13T21:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMDc4OA=="}], "type": "inlineReview", "revised_code": null}]}