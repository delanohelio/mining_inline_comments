{"pr_number": 103, "pr_title": "Refactor the deployment workflow", "pr_createdAt": "2020-03-09T18:35:52Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103", "timeline": [{"oid": "e68d358306aca1c1dbc1e79a687d181660abfa62", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e68d358306aca1c1dbc1e79a687d181660abfa62", "message": "Refactor the deployment workflow\n\nRemove the state machine and make the deployment workflow simpler.", "committedDate": "2020-03-09T18:24:31Z", "type": "commit"}, {"oid": "a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf", "message": "Add comments and wait mergeInNewConfig", "committedDate": "2020-03-09T18:47:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4NjQ0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389886449", "bodyText": "just use lombok?", "author": "MikeDombo", "createdAt": "2020-03-09T18:39:24Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    /**\n+     * DeploymentTask Constructor.\n+     * @param dependencyResolver dependency resolver\n+     * @param packageCache package cache\n+     * @param kernelConfigResolver kernel config resolver\n+     * @param kernel kernel\n+     * @param logger logger\n+     * @param document deployment document\n+     */\n+    public DeploymentTask(DependencyResolver dependencyResolver, PackageCache packageCache,", "originalCommit": "e68d358306aca1c1dbc1e79a687d181660abfa62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NzMwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389897300", "bodyText": "sure. I can update that.", "author": "fengwang666", "createdAt": "2020-03-09T18:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4NjQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\nindex 2f7cfef028..2d8324034a 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n\n@@ -52,9 +52,13 @@ public class DeploymentTask implements Callable<Void> {\n             logger.atInfo().addKeyValue(\"deploymentId\", document.getDeploymentId())\n                     .log(\"Start deployment task\");\n             List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+            // Block this without timeout because a device can be offline and it can take quite a long time\n+            // to download a package.\n             packageCache.preparePackages(desiredPackages).get();\n             Map<Object, Object> newConfig = kernelConfigResolver.resolve(desiredPackages, document);\n-            kernel.mergeInNewConfig(document.getDeploymentId(), document.getTimestamp(), newConfig);\n+            // Block this without timeout because it can take a long time for the device to update the config\n+            // (if it's not in a safe window).\n+            kernel.mergeInNewConfig(document.getDeploymentId(), document.getTimestamp(), newConfig).get();\n             logger.atInfo().addKeyValue(\"deploymentId\", document.getDeploymentId())\n                     .log(\"Finish deployment task\");\n         } catch (PackageVersionConflictException | ExecutionException | InterruptedException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MDI1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389890254", "bodyText": "if the name matches, you don't need @JsonProperty.", "author": "MikeDombo", "createdAt": "2020-03-09T18:46:21Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -15,13 +16,14 @@\n  */\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n+@Builder\n public class DeploymentDocument {\n \n     @JsonProperty(\"DeploymentId\")\n     String deploymentId;\n \n-    @JsonProperty(\"ListOfPackagesToDeploy\")\n-    List<String> listOfPackagesToDeploy;\n+    @JsonProperty(\"rootPackages\")", "originalCommit": "e68d358306aca1c1dbc1e79a687d181660abfa62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NTg1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389895859", "bodyText": "Yeah. Since other fields all have annotations, I'll change it to RootPackages and keep the annotation.", "author": "fengwang666", "createdAt": "2020-03-09T18:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MDI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java b/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java\nindex 44b1a0035e..11929dec99 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java\n\n@@ -22,7 +22,7 @@ public class DeploymentDocument {\n     @JsonProperty(\"DeploymentId\")\n     String deploymentId;\n \n-    @JsonProperty(\"rootPackages\")\n+    @JsonProperty(\"RootPackages\")\n     List<String> rootPackages;\n \n     @JsonProperty(\"Packages\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MDc4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389890784", "bodyText": "What does \"commit a state\" mean?", "author": "MikeDombo", "createdAt": "2020-03-09T18:47:18Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -573,6 +573,7 @@ private void addServiceSearchURL(Object url) {\n      * @param newConfig    the map of new configuration\n      * @return future which completes only once the config is merged and all the services in the config are running\n      */\n+    // TODO: mergeInNewConfig should also commit a state to indicate the deployment succeeds.", "originalCommit": "e68d358306aca1c1dbc1e79a687d181660abfa62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NzAwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389897005", "bodyText": "It means persisting the deployment status in the config store. The idea is to make the \"kernel update\" and \"deployment status update\" transactional. I'll just remove the comment and put it in a SIM.", "author": "fengwang666", "createdAt": "2020-03-09T18:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MDc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\nindex 55bada244d..a20a0ee6b4 100644\n--- a/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n+++ b/src/main/java/com/aws/iot/evergreen/kernel/Kernel.java\n\n@@ -573,7 +573,6 @@ public class Kernel extends Configuration /*implements Runnable*/ {\n      * @param newConfig    the map of new configuration\n      * @return future which completes only once the config is merged and all the services in the config are running\n      */\n-    // TODO: mergeInNewConfig should also commit a state to indicate the deployment succeeds.\n     public Future<Void> mergeInNewConfig(String deploymentId, long timestamp, Map<Object, Object> newConfig) {\n         CompletableFuture<Void> totallyCompleteFuture = new CompletableFuture<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MTMwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389891303", "bodyText": "Do we need this class? Don't we have one which does this already?", "author": "MikeDombo", "createdAt": "2020-03-09T18:48:18Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.vdurmont.semver4j.Semver;\n+\n+// TODO: temporarily suppress this warning which will be gone after these fields get used.\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"UUF_UNUSED_FIELD\")\n+public class PackageIdentifier {", "originalCommit": "a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NzI3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389897270", "bodyText": "It's intended to replace the NameVersionPair.", "author": "fengwang666", "createdAt": "2020-03-09T18:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MTMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java b/src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java\nindex b7e22941d4..086200d784 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java\n\n@@ -1,10 +1,18 @@\n package com.aws.iot.evergreen.packagemanager.models;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.vdurmont.semver4j.Semver;\n+import lombok.Getter;\n \n-// TODO: temporarily suppress this warning which will be gone after these fields get used.\n-@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"UUF_UNUSED_FIELD\")\n+@JsonSerialize\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class PackageIdentifier {\n+    @JsonProperty(\"Name\")\n+    @Getter\n     String name;\n+    @JsonProperty(\"Version\")\n+    @Getter\n     Semver version;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDU1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389990551", "bodyText": "We also want event types I believe", "author": "MikeDombo", "createdAt": "2020-03-09T22:12:15Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    /**\n+     * DeploymentTask Constructor.\n+     * @param dependencyResolver dependency resolver\n+     * @param packageCache package cache\n+     * @param kernelConfigResolver kernel config resolver\n+     * @param kernel kernel\n+     * @param logger logger\n+     * @param document deployment document\n+     */\n+    public DeploymentTask(DependencyResolver dependencyResolver, PackageCache packageCache,\n+                          KernelConfigResolver kernelConfigResolver, Kernel kernel,\n+                          Logger logger, DeploymentDocument document) {\n+        this.dependencyResolver = dependencyResolver;\n+        this.packageCache = packageCache;\n+        this.kernelConfigResolver = kernelConfigResolver;\n+        this.kernel = kernel;\n+        this.logger = logger;\n+        this.document = document;\n+    }\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().addKeyValue(\"deploymentId\", document.getDeploymentId())", "originalCommit": "a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\nindex 2d8324034a..72f483b5be 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n\n@@ -9,6 +9,7 @@ import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n import com.aws.iot.evergreen.packagemanager.PackageCache;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n \n import java.util.List;\n import java.util.Map;\n"}}, {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f54a4fdf668034fbb040a39744662fc99f3630bb", "message": "address comments", "committedDate": "2020-03-09T22:58:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODM0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390008343", "bodyText": "Should this have a timeout + retry instead of blocking forever? Thinking about the offline scenario, that means that the preparePackages itself will need to have timeouts and retries to deal with not having a network.", "author": "MikeDombo", "createdAt": "2020-03-09T23:04:05Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+            // Block this without timeout because a device can be offline and it can take quite a long time\n+            // to download a package.\n+            packageCache.preparePackages(desiredPackages).get();", "originalCommit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMTMyNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390011326", "bodyText": "The caller of deploymentTask can abort a deployment task if necessary. Not sure if we need to add another layer of timeout/retry here.", "author": "fengwang666", "createdAt": "2020-03-09T23:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\nindex 72f483b5be..4b6c3406ba 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n\n@@ -1,6 +1,7 @@\n package com.aws.iot.evergreen.deployment;\n \n-import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.NonRetryableDeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.RetryableDeploymentTaskFailureException;\n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.logging.api.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODQ5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390008497", "bodyText": "Future here? If resolving dependencies might need a network connection (which I think it may).", "author": "MikeDombo", "createdAt": "2020-03-09T23:04:32Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);", "originalCommit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMDE1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390010155", "bodyText": "The current design assumes the dependency resolution doesn't require network connection. With the cloud sending all the possible dependency trees, the device shouldn't require network connection to resolve the dependency.", "author": "fengwang666", "createdAt": "2020-03-09T23:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMzY2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390013668", "bodyText": "Local packages that the cloud doesn't know about potentially need a network connection to complete the dependency resolution.", "author": "MikeDombo", "createdAt": "2020-03-09T23:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxOTAyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390419023", "bodyText": "In the case of a local deployment where you've added a dependency on something not on disk, is it the responsibility of the local deployment call to cancel the task and retry?", "author": "rbattle", "createdAt": "2020-03-10T15:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2NzczOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390467738", "bodyText": "I think so. I would prefer we build the retry logic on the top level.", "author": "fengwang666", "createdAt": "2020-03-10T17:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\nindex 72f483b5be..4b6c3406ba 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n\n@@ -1,6 +1,7 @@\n package com.aws.iot.evergreen.deployment;\n \n-import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.NonRetryableDeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.RetryableDeploymentTaskFailureException;\n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.logging.api.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMzI0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390013241", "bodyText": "Might be good idea to add debug logs before these two steps to indicate that package downloading and kernel update steps have been started", "author": "abanthiy", "createdAt": "2020-03-09T23:19:16Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+            // Block this without timeout because a device can be offline and it can take quite a long time\n+            // to download a package.\n+            packageCache.preparePackages(desiredPackages).get();", "originalCommit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0OTQ5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390049499", "bodyText": "I'll leave the debug log to later once all the dependent calls are implemented.", "author": "fengwang666", "createdAt": "2020-03-10T01:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMzI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxNzI3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390417277", "bodyText": "yeah - the api calls themselves may log - we don't want to double log things", "author": "rbattle", "createdAt": "2020-03-10T15:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMzI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\nindex 72f483b5be..4b6c3406ba 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n\n@@ -1,6 +1,7 @@\n package com.aws.iot.evergreen.deployment;\n \n-import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.NonRetryableDeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.RetryableDeploymentTaskFailureException;\n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.logging.api.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxNTUzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390015534", "bodyText": "The JsonProperty name should be defined as \"Name\" and \"Version\" to match with current convention being used in DeploymentDocument? I believe this will be used in the DeploymentDocument", "author": "abanthiy", "createdAt": "2020-03-09T23:26:46Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.vdurmont.semver4j.Semver;\n+\n+// TODO: temporarily suppress this warning which will be gone after these fields get used.\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"UUF_UNUSED_FIELD\")\n+public class PackageIdentifier {\n+    String name;", "originalCommit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMzE3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390033170", "bodyText": "updated", "author": "fengwang666", "createdAt": "2020-03-10T00:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxNTUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java b/src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java\nindex b7e22941d4..086200d784 100644\n--- a/src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java\n+++ b/src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java\n\n@@ -1,10 +1,18 @@\n package com.aws.iot.evergreen.packagemanager.models;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.vdurmont.semver4j.Semver;\n+import lombok.Getter;\n \n-// TODO: temporarily suppress this warning which will be gone after these fields get used.\n-@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"UUF_UNUSED_FIELD\")\n+@JsonSerialize\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class PackageIdentifier {\n+    @JsonProperty(\"Name\")\n+    @Getter\n     String name;\n+    @JsonProperty(\"Version\")\n+    @Getter\n     Semver version;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxNjQ3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390016477", "bodyText": "Where is this class intended to be used now? DeploymentProcess will be replaced by DeploymentTask now, right?\nSo this parsing needs to happen in DeploymentService ?", "author": "abanthiy", "createdAt": "2020-03-09T23:30:09Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/state/ParseAndValidateState.java", "diffHunk": "@@ -80,7 +80,7 @@ public void proceed() throws DeploymentFailureException {\n                     }\n                 }\n             }\n-            if (deploymentDocument.getListOfPackagesToDeploy().contains(packageName)) {\n+            if (deploymentDocument.getRootPackages().contains(packageName)) {", "originalCommit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMzc3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390033779", "bodyText": "Inside the resolveDependencies() method, it will conduct necessary parsing and validation on the DeploymentDocument.", "author": "fengwang666", "createdAt": "2020-03-10T00:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxNjQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NDg1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390044855", "bodyText": "ok, I would imagine this would be done in the dependency resolution task then.", "author": "abanthiy", "createdAt": "2020-03-10T01:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxNjQ3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTAwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390021007", "bodyText": "While we check that this is executed, is it guaranteed that this test will not be flaky? Can it get interrupted before this is called and lead to failure of this test?", "author": "abanthiy", "createdAt": "2020-03-09T23:45:28Z", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.FutureTask;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeploymentTaskTest {\n+    @Mock\n+    private DependencyResolver mockDependencyResolver;\n+    @Mock\n+    private PackageCache mockPackageCache;\n+    @Mock\n+    private KernelConfigResolver mockKernelConfigResolver;\n+    @Mock\n+    private Kernel mockKernel;\n+    private DeploymentDocument deploymentDocument =\n+            DeploymentDocument.builder().deploymentId(\"TestDeployment\").timestamp(System.currentTimeMillis()).build();\n+\n+    private Logger logger = LogManager.getLogger(\"unit test\");\n+\n+    private DeploymentTask deploymentTask;\n+\n+    @BeforeEach\n+    public void setup() {\n+        deploymentTask = new DeploymentTask(mockDependencyResolver, mockPackageCache, mockKernelConfigResolver,\n+                mockKernel, logger, deploymentDocument);\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_start_deploymentTask_THEN_succeeds() throws Exception {\n+        when(mockPackageCache.preparePackages(anyList())).thenReturn(CompletableFuture.completedFuture(null));\n+        when(mockKernel.mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap()))\n+                .thenReturn(CompletableFuture.completedFuture(null));\n+        deploymentTask.call();\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockPackageCache).preparePackages(anyList());\n+        verify(mockKernelConfigResolver).resolve(anyList(), eq(deploymentDocument));\n+        verify(mockKernel).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_resolveDependencies_interrupted_THEN_deploymentTask_aborted() throws Exception {\n+        when(mockDependencyResolver.resolveDependencies(deploymentDocument)).thenThrow(new InterruptedException());\n+        Exception thrown = assertThrows(DeploymentTaskFailureException.class, () -> deploymentTask.call());\n+        assertTrue(thrown.getCause() instanceof InterruptedException);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockPackageCache, times(0)).preparePackages(anyList());\n+        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument));\n+        verify(mockKernel, times(0)).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_preparePackages_interrupted_THEN_deploymentTask_aborted() throws Exception {\n+        lenient().when(mockPackageCache.preparePackages(anyList())).thenReturn(new CompletableFuture<>());\n+        FutureTask<Void> futureTask = new FutureTask<>(deploymentTask);\n+        Thread t = new Thread(futureTask);\n+        t.start();\n+\n+        t.interrupt();\n+        Exception thrown = assertThrows(ExecutionException.class, () -> futureTask.get());\n+        assertTrue(thrown.getCause() instanceof DeploymentTaskFailureException);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);", "originalCommit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzNTg4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390035884", "bodyText": "It won't be flaky because either the execution is blocked on preparePackages when the thread is interrupted or the thread has been interrupted before the execution reaches preparePackages. Both cases will trigger the blocking methods inside preparePackages throw InterruptedException and cause the future.get() to return.", "author": "fengwang666", "createdAt": "2020-03-10T00:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0MjY0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390042648", "bodyText": "I might be misunderstanding, but if it is interrupted before the preparePackages, why will it be blocked on the blocking method inside preparePackages? Wouldn't it directly go to catch block handling the interrupted exception?", "author": "abanthiy", "createdAt": "2020-03-10T01:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0OTM0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390049345", "bodyText": "In this test case it won't. When a thread is interrupted, the only thing that changes is the interrupt status. It's up to the code running on the thread on how to handle it. Many blocking libraries choose to throw InterruptedException once they detect the flag is set and force the caller of the libraries to handle the interrupt.", "author": "fengwang666", "createdAt": "2020-03-10T01:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA1MTgxOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390051818", "bodyText": "Got it. Thanks!", "author": "abanthiy", "createdAt": "2020-03-10T01:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java b/src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java\nindex 54f8289fb6..97aac684fb 100644\n--- a/src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java\n\n@@ -1,6 +1,7 @@\n package com.aws.iot.evergreen.deployment;\n \n-import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.NonRetryableDeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.RetryableDeploymentTaskFailureException;\n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.logging.api.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNTUzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390025536", "bodyText": "Should we separate InterruptException handling and Interrupt inside ExecutionException?\nAn interrupt does not mean a failure (it is a cancelled action triggered by the deployment service) in DeploymentTask and should be indicated so?", "author": "abanthiy", "createdAt": "2020-03-10T00:01:23Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+            // Block this without timeout because a device can be offline and it can take quite a long time\n+            // to download a package.\n+            packageCache.preparePackages(desiredPackages).get();\n+            Map<Object, Object> newConfig = kernelConfigResolver.resolve(desiredPackages, document);\n+            // Block this without timeout because it can take a long time for the device to update the config\n+            // (if it's not in a safe window).\n+            kernel.mergeInNewConfig(document.getDeploymentId(), document.getTimestamp(), newConfig).get();\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\", document.getDeploymentId())\n+                    .log(\"Finish deployment task\");\n+        } catch (PackageVersionConflictException | ExecutionException | InterruptedException e) {", "originalCommit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzNjg2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390036869", "bodyText": "Thanks for pointing this out. What really needs to be separated is retryable and nonretryable failure. PackageVersionConflictException is non-retryable failure while ExecutionException and InterruptedException are retryable.", "author": "fengwang666", "createdAt": "2020-03-10T00:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNTUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NDM4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390044380", "bodyText": "In case of cancel, I imagine I trigger deploymentTask.cancel(), and then check deploymentTask.isDone(). In this case, InterruptException is not a retryable exception, it needs to be handled. If the task cannot be cancelled, then it should proceed to finish and isDone() will be blocked until tasks finishes. If task can be canceled then we may throw DeploymentTaskCanceled exception or simply terminate the thread.\nRetryable exception indicates that something needs to be attempted again. This is not how I am seeing the cancel operation.\nAlso, ExecutionException might not be retryable always?", "author": "abanthiy", "createdAt": "2020-03-10T01:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNTUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODUwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390048502", "bodyText": "Many cases can trigger the DeploymentTask thread interrupted, e.g. the task is cancelled or the device is shutting down. It's up to the caller to decide how to handle the exception and the callee doesn't understand the intention of the caller. The caller can retry it or create a new task with a different deployment document.", "author": "fengwang666", "createdAt": "2020-03-10T01:33:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNTUzNg=="}], "type": "inlineReview", "revised_code": {"commit": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\nindex 72f483b5be..4b6c3406ba 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java\n\n@@ -1,6 +1,7 @@\n package com.aws.iot.evergreen.deployment;\n \n-import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.NonRetryableDeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.RetryableDeploymentTaskFailureException;\n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n import com.aws.iot.evergreen.kernel.Kernel;\n import com.aws.iot.evergreen.logging.api.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNzE5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390027196", "bodyText": "Might not be part of this CR, but this needs to be put in library which cloud can reuse. Adding TODO should suffice for this CR maybe?", "author": "abanthiy", "createdAt": "2020-03-10T00:07:31Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -15,13 +16,14 @@\n  */\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n+@Builder\n public class DeploymentDocument {", "originalCommit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzNzA1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390037059", "bodyText": "Correct. I'll add a todo comment on it.", "author": "fengwang666", "createdAt": "2020-03-10T00:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNzE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "chunk": "diff --git a/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java b/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java\nindex 11929dec99..5b2d730d2a 100644\n--- a/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java\n+++ b/src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java\n\n@@ -17,6 +17,7 @@ import java.util.List;\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n @Builder\n+// TODO: pull this class to a library to share with cloud services. SIM: https://sim.amazon.com/issues/P33788350\n public class DeploymentDocument {\n \n     @JsonProperty(\"DeploymentId\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0MDkyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390040924", "bodyText": "From my understanding, PackageRegistry will be removed and replaced by directly getting active package information from Kernel. But this can be changed later.", "author": "hui-yang", "createdAt": "2020-03-10T01:00:44Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class DependencyResolver {\n+    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+    private final PackageRegistry packageRegistry;", "originalCommit": "f54a4fdf668034fbb040a39744662fc99f3630bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0MjgwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390042806", "bodyText": "You're correct. It can be done in future changes.", "author": "fengwang666", "createdAt": "2020-03-10T01:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0MDkyNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1f890bc4b42fefe0c333647da045a2afe6e598d2", "message": "address comments, separate retryable and nonretryable falures", "committedDate": "2020-03-10T01:07:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxNjcxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390416712", "bodyText": "nitpick: why not use hamcrest matchers:\nassertThat(thrown.getCause()).isa(PackageVersionConflictException.class)?\nThat way you get nice error messages on failure, instead of: expected true, was false", "author": "rbattle", "createdAt": "2020-03-10T15:48:45Z", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.NonRetryableDeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.RetryableDeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.FutureTask;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeploymentTaskTest {\n+    @Mock\n+    private DependencyResolver mockDependencyResolver;\n+    @Mock\n+    private PackageCache mockPackageCache;\n+    @Mock\n+    private KernelConfigResolver mockKernelConfigResolver;\n+    @Mock\n+    private Kernel mockKernel;\n+    private DeploymentDocument deploymentDocument =\n+            DeploymentDocument.builder().deploymentId(\"TestDeployment\").timestamp(System.currentTimeMillis()).build();\n+\n+    private Logger logger = LogManager.getLogger(\"unit test\");\n+\n+    private DeploymentTask deploymentTask;\n+\n+    @BeforeEach\n+    public void setup() {\n+        deploymentTask = new DeploymentTask(mockDependencyResolver, mockPackageCache, mockKernelConfigResolver,\n+                mockKernel, logger, deploymentDocument);\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_start_deploymentTask_THEN_succeeds() throws Exception {\n+        when(mockPackageCache.preparePackages(anyList())).thenReturn(CompletableFuture.completedFuture(null));\n+        when(mockKernel.mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap()))\n+                .thenReturn(CompletableFuture.completedFuture(null));\n+        deploymentTask.call();\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockPackageCache).preparePackages(anyList());\n+        verify(mockKernelConfigResolver).resolve(anyList(), eq(deploymentDocument));\n+        verify(mockKernel).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_resolveDependencies_with_conflicted_dependency_THEN_deploymentTask_aborted()\n+            throws Exception {\n+        when(mockDependencyResolver.resolveDependencies(deploymentDocument))\n+                .thenThrow(new PackageVersionConflictException(\"\"));\n+        Exception thrown = assertThrows(NonRetryableDeploymentTaskFailureException.class, () -> deploymentTask.call());\n+        assertTrue(thrown.getCause() instanceof PackageVersionConflictException);", "originalCommit": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2NjE3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390466174", "bodyText": "Updated. Thanks!", "author": "fengwang666", "createdAt": "2020-03-10T16:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxNjcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "9a1e2f3f70c92fb64c6f9d071ced428c0594a6b8", "chunk": "diff --git a/src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java b/src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java\nindex 97aac684fb..8600874ec0 100644\n--- a/src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java\n+++ b/src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java\n\n@@ -20,8 +20,9 @@ import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.FutureTask;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.isA;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.anyList;\n import static org.mockito.ArgumentMatchers.anyLong;\n import static org.mockito.ArgumentMatchers.anyMap;\n"}}, {"oid": "9a1e2f3f70c92fb64c6f9d071ced428c0594a6b8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9a1e2f3f70c92fb64c6f9d071ced428c0594a6b8", "message": "update to use hamcrest matcher in unit tests", "committedDate": "2020-03-10T16:57:49Z", "type": "commit"}, {"oid": "611467df14729410c136e8572c976c3f44e01a13", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/611467df14729410c136e8572c976c3f44e01a13", "message": "Merge branch 'master' into refactor-deployment-workflow", "committedDate": "2020-03-10T17:47:37Z", "type": "commit"}]}