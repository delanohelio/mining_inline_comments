{"pr_number": 473, "pr_title": "Size limit", "pr_createdAt": "2020-09-25T16:15:07Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473", "timeline": [{"oid": "4d5e363c7334efce09d10a55056963f490ef9ed5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4d5e363c7334efce09d10a55056963f490ef9ed5", "message": "component store cleanup logic", "committedDate": "2020-09-25T16:16:51Z", "type": "forcePushed"}, {"oid": "ff6976d4a7681cddb838391a4096120176834fac", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ff6976d4a7681cddb838391a4096120176834fac", "message": "component store cleanup logic", "committedDate": "2020-09-25T16:23:38Z", "type": "forcePushed"}, {"oid": "2c8c05286451a5f09e396f422e9209d4024a397a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2c8c05286451a5f09e396f422e9209d4024a397a", "message": "component store cleanup logic", "committedDate": "2020-09-28T18:09:11Z", "type": "forcePushed"}, {"oid": "03e6416ac7533f41ea4683a215af8e0f995924b0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/03e6416ac7533f41ea4683a215af8e0f995924b0", "message": "component store cleanup logic", "committedDate": "2020-09-28T18:13:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1NzE3Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496157172", "bodyText": "A few questions.\n\nIs the stale version saved in each service config? If deleteAllUnusedLocalComponents removed all stale versions at certain point, is this deleteComponent going to handle it gracefully?\nWhen to use deleteAllUnusedLocalComponents or cleanupStaleVersions?\nWhy does deleteComponent require scope? Do we tell PRIVATE_SCOPE from public in local store?", "author": "hui-yang", "createdAt": "2020-09-28T18:40:31Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -247,6 +270,60 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    /**\n+     * Delete stale versions from local store.\n+     *\n+     * @param deployedServiceConfig service config map that was deployed. Expected to be\n+     * {@code Map<String, Map<String, Object>>}\n+     * @throws PackageLoadingException if I/O exception during deletion\n+     */\n+    public void cleanupStaleVersions(Map<String, Object> deployedServiceConfig) throws PackageLoadingException {\n+        for (Map.Entry<String, Object> compServiceConfig : deployedServiceConfig.entrySet()) {\n+             @SuppressWarnings(\"unchecked\")\n+             Map<String, Object> config = (Map<String, Object>) compServiceConfig.getValue();\n+             String staleVersion = (String) config.get(STALE_VERSION_CONFIG_KEY);\n+             if (staleVersion != null) {\n+                 componentStore.deleteComponent(new ComponentIdentifier(compServiceConfig.getKey(),\n+                         new Semver(staleVersion), PRIVATE_SCOPE));\n+             }\n+        }\n+    }", "originalCommit": "03e6416ac7533f41ea4683a215af8e0f995924b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4ODY1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496188653", "bodyText": "Yes, it's along side the original \"version\" topic in service config. deleteComponent handles the case when file doesn't exist.\nSo we have \"version\", \"previousVersion\", and \"staleVersion\". deleteAllUnusedLocalComponents attempts to delete everything other than \"version\" which is the currently running one. This is private and will be called once when space not enough for a deployment. cleanupStaleVersions only deletes \"staleVersion\". This is called after every deployment to cleanup stale versions preemptively.\nThe ComponentIdentifier constructor without a scope argument is marked deprecated so a scope must be provided here", "author": "tilo-chen", "createdAt": "2020-09-28T19:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1NzE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNTE0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496205140", "bodyText": "Thanks. Just confirming on 3, seems it doesn't matter what scope to provide here, we only use name and version in the clean up. Is it correct?", "author": "hui-yang", "createdAt": "2020-09-28T20:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1NzE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNjI4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496206280", "bodyText": "that's right!", "author": "tilo-chen", "createdAt": "2020-09-28T20:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1NzE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9bd7c04a734a8ae508ec80e944628251d6af1657", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 2af05c3f..11c60aa6 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -273,53 +356,48 @@ public class ComponentManager implements InjectionActions {\n     /**\n      * Delete stale versions from local store.\n      *\n-     * @param deployedServiceConfig service config map that was deployed. Expected to be\n-     * {@code Map<String, Map<String, Object>>}\n      * @throws PackageLoadingException if I/O exception during deletion\n      */\n-    public void cleanupStaleVersions(Map<String, Object> deployedServiceConfig) throws PackageLoadingException {\n-        for (Map.Entry<String, Object> compServiceConfig : deployedServiceConfig.entrySet()) {\n-             @SuppressWarnings(\"unchecked\")\n-             Map<String, Object> config = (Map<String, Object>) compServiceConfig.getValue();\n-             String staleVersion = (String) config.get(STALE_VERSION_CONFIG_KEY);\n-             if (staleVersion != null) {\n-                 componentStore.deleteComponent(new ComponentIdentifier(compServiceConfig.getKey(),\n-                         new Semver(staleVersion), PRIVATE_SCOPE));\n-             }\n-        }\n-    }\n-\n-    /**\n-     * Iterate through the inventory and delete all local components that is not currently running.\n-     *\n-     * @throws PackageLoadingException if I/O error encountered during deletion\n-     */\n-    private void deleteAllUnusedLocalComponents() throws PackageLoadingException {\n-        Map<String, String> runningComponentVersion = getRunningComponentVersionsOnce();\n+    public void cleanupStaleVersions() throws PackageLoadingException {\n+        logger.atInfo(\"cleanup-stale-versions-start\").log();\n+        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n         Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n-        for (Map.Entry<String, Set<String>> localCompVer : localComponentVersions.entrySet()) {\n-            String compName = localCompVer.getKey();\n-            for (String compVersion : localCompVer.getValue()) {\n-                // do not delete if some running component has the same name and version\n-                if (compVersion.equals(runningComponentVersion.get(compName))) {\n-                    continue;\n+        // remove all local versions that does not present in keepVersions\n+        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+            String compName = localVersions.getKey();\n+            if (keepVersions.containsKey(compName)) {\n+                Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n+                removeVersions.removeAll(keepVersions.get(compName));\n+                for (String compVersion : removeVersions) {\n+                    componentStore\n+                            .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n                 }\n-                componentStore\n-                        .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n             }\n         }\n+        logger.atInfo(\"cleanup-stale-versions-finish\").log();\n     }\n \n-\n-    private Map<String, String> getRunningComponentVersionsOnce() {\n+    /**\n+     * Query service config to obtain non-stale versions of components which should not be cleaned up.\n+     *\n+     * @return mapping from component name string to collection of non-stale version strings\n+     */\n+    public Map<String, Set<String>> getNonStaleComponentVersionsOnce() {\n         // TODO maybe subscribe to service topics instead of getOnce every time\n-        Map<String, String> result = new HashMap<>();\n+        Map<String, Set<String>> result = new HashMap<>();\n         for (GreengrassService service : kernel.orderedDependencies()) {\n+            Set<String> nonStaleVersions = new HashSet<>();\n             Topic versionTopic = service.getServiceConfig().find(VERSION_CONFIG_KEY);\n-            if (versionTopic != null) {  // Component is expected to have version topic\n+            Topic prevVersionTopic = service.getServiceConfig().find(PREV_VERSION_CONFIG_KEY);\n+            if (versionTopic != null) {\n                 String version = (String) versionTopic.getOnce();\n-                result.put(service.getName(), version);\n+                nonStaleVersions.add(version);\n+            }\n+            if (prevVersionTopic != null) {\n+                String version = (String) prevVersionTopic.getOnce();\n+                nonStaleVersions.add(version);\n             }\n+            result.put(service.getName(), nonStaleVersions);\n         }\n         return result;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MDAwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496160009", "bodyText": "Add java doc @throws? Want to confirm again, this method doesn't throw if files don't exist, right?\nPackageLoadingException may not be the best way to describe this error.", "author": "hui-yang", "createdAt": "2020-09-28T18:45:43Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -141,21 +142,21 @@ ComponentRecipe getPackageRecipe(@NonNull ComponentIdentifier pkgId) throws Pack\n     }\n \n     /**\n-     * Delete the package recipe and all artifacts from disk.\n+     * Delete the component recipe and all artifacts from disk.\n      *\n-     * @param pkgId package identifier\n+     * @param compId component identifier\n      */\n-    void deletePackage(@NonNull ComponentIdentifier pkgId) throws PackagingException {\n-        Path recipePath = resolveRecipePath(pkgId.getName(), pkgId.getVersion());\n-        Path artifactDirPath = resolveArtifactDirectoryPath(pkgId);\n-        Path artifactDecompressedDirPath = resolveArtifactsDecompressedDirectory(pkgId);\n+    void deleteComponent(@NonNull ComponentIdentifier compId) throws PackageLoadingException {", "originalCommit": "03e6416ac7533f41ea4683a215af8e0f995924b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MTc3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496191774", "bodyText": "Yeah this method can handle file not exist.\nSo I found a TODO in PackageLoadingException saying refactor it to \"PackageIOException\", so I used it to wrap IOExceptions in a lot of places. Actually these exceptions do need to be organized. Other code in this package also don't seem to throw the most meaningful one. Maybe a task for the next sprint?", "author": "tilo-chen", "createdAt": "2020-09-28T19:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MDAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "95e7f3844d05e99fcf6c4c676dce8bd97842b9ef", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\nindex 0b8ccf77..01fd5f9b 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n\n@@ -133,8 +135,8 @@ public class ComponentStore {\n \n         if (!optionalPackage.isPresent()) {\n             // TODO refine exception and logs\n-            throw new PackageLoadingException(\n-                    String.format(\"Failed to find usable recipe for current platform: %s, for package: '%s' in the \"\n+            throw new PackageLoadingException(String.format(\n+                    \"Failed to find usable recipe for current platform: %s, for package: '%s' in the \"\n                             + \"local package store.\", PlatformResolver.CURRENT_PLATFORM, pkgId));\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MTY2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496161667", "bodyText": "Does PackageLoadingException best describe the error?", "author": "hui-yang", "createdAt": "2020-09-28T18:48:40Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -271,29 +299,29 @@ public Path resolveAndSetupArtifactsDecompressedDirectory(@NonNull ComponentIden\n      * estimate of the package store's disk usage.\n      *\n      * @return total length of files in bytes\n-     * @throws UnexpectedPackagingException if unable to access the package store directory\n+     * @throws PackageLoadingException if unable to access the package store directory\n      */\n-    public long getContentSize() throws UnexpectedPackagingException {\n+    public long getContentSize() throws PackageLoadingException {\n         try {\n-            try (Stream<Path> s = Files.walk(this.componentStoreDirectory)) {\n-                return s.map(Path::toFile)\n-                        .filter(File::isFile)\n-                        .mapToLong(File::length)\n-                        .sum();\n-            }\n+            return Files.walk(this.componentStoreDirectory).map(Path::toFile)\n+                    .filter(File::isFile).mapToLong(File::length).sum();\n         } catch (IOException e) {\n-            throw new UnexpectedPackagingException(\"Failed to access package store\", e);\n+            throw new PackageLoadingException(\"Failed to access package store\", e);\n         }\n     }\n \n     /**\n      * Get remaining usable bytes for the package store.\n      * @return usable bytes\n-     * @throws IOException if I/O error occurred\n+     * @throws PackageLoadingException if I/O error occurred\n      */\n-    public long getUsableSpace() throws IOException {\n-        FileStore filestore = Files.getFileStore(this.componentStoreDirectory);\n-        return filestore.getUsableSpace();\n+    public long getUsableSpace() throws PackageLoadingException {\n+        try {\n+            FileStore filestore = Files.getFileStore(this.componentStoreDirectory);\n+            return filestore.getUsableSpace();\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(\"Failed to get usable disk space\", e);\n+        }", "originalCommit": "03e6416ac7533f41ea4683a215af8e0f995924b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bd7c04a734a8ae508ec80e944628251d6af1657", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\nindex 0b8ccf77..6624d104 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n\n@@ -317,8 +353,20 @@ public class ComponentStore {\n      */\n     public long getUsableSpace() throws PackageLoadingException {\n         try {\n-            FileStore filestore = Files.getFileStore(this.componentStoreDirectory);\n-            return filestore.getUsableSpace();\n+            return Files.getFileStore(this.componentStoreDirectory).getUsableSpace();\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(\"Failed to get usable disk space\", e);\n+        }\n+    }\n+\n+    /**\n+     * Get remaining usable bytes for the package store.\n+     * @return usable bytes\n+     * @throws PackageLoadingException if I/O error occurred\n+     */\n+    public long getTotalSpace() throws PackageLoadingException {\n+        try {\n+            return Files.getFileStore(this.componentStoreDirectory).getTotalSpace();\n         } catch (IOException e) {\n             throw new PackageLoadingException(\"Failed to get usable disk space\", e);\n         }\n"}}, {"oid": "95e7f3844d05e99fcf6c4c676dce8bd97842b9ef", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/95e7f3844d05e99fcf6c4c676dce8bd97842b9ef", "message": "component store cleanup logic", "committedDate": "2020-09-28T21:38:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0NjkyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496246927", "bodyText": "Maybe change to if cleanup of present component files fails just to be more specific", "author": "hui-yang", "createdAt": "2020-09-28T21:37:24Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -145,6 +145,7 @@ ComponentRecipe getPackageRecipe(@NonNull ComponentIdentifier pkgId) throws Pack\n      * Delete the component recipe and all artifacts from disk.\n      *\n      * @param compId component identifier\n+     * @throws PackageLoadingException if I/O error occurred", "originalCommit": "27f4a1a7d2cadf633431ac5e1e2f534c5129f697", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bd7c04a734a8ae508ec80e944628251d6af1657", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\nindex df96947e..6624d104 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n\n@@ -145,9 +146,10 @@ public class ComponentStore {\n      * Delete the component recipe and all artifacts from disk.\n      *\n      * @param compId component identifier\n-     * @throws PackageLoadingException if I/O error occurred\n+     * @throws PackageLoadingException if deletion of the component failed\n      */\n     void deleteComponent(@NonNull ComponentIdentifier compId) throws PackageLoadingException {\n+        logger.atInfo(\"delete-component-start\").kv(\"componentIdentifier\", compId).log();\n         Path recipePath = resolveRecipePath(compId.getName(), compId.getVersion());\n         Path artifactDirPath = resolveArtifactDirectoryPath(compId);\n         Path artifactDecompressedDirPath = resolveArtifactsDecompressedDirectory(compId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI1MDU3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496250577", "bodyText": "Though unlikely in real use cases, but can we add a test where PREV_VERSION_CONFIG_KEY doesn't exist but STALE_VERSION_CONFIG_KEY exists? Just want to make sure the config will be overridden correctly", "author": "hui-yang", "createdAt": "2020-09-28T21:44:09Z", "path": "src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java", "diffHunk": "@@ -290,6 +292,33 @@ private String lookupParameterValueForComponent(\n         return mainServiceConfig;\n     }\n \n+    /*\n+     * Record current deployment version in service config. Rotate among version, previousVersion and staleVersion.\n+     * staleVersion is subject to preemptive cleanup after deployment is merged\n+     */\n+    private void handleConfigVersions(ComponentIdentifier compId, String deploymentVersion,\n+                                      Map<String, Object> newServiceConfig) {\n+        newServiceConfig.put(VERSION_CONFIG_KEY, deploymentVersion);\n+        Topics existingServiceConfig = kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, compId.getName());\n+        if (existingServiceConfig == null) {\n+            return;\n+        }\n+        Topic versionTopic = existingServiceConfig.find(VERSION_CONFIG_KEY);\n+        if (versionTopic == null) {\n+            return;\n+        }\n+        // rotate versions only if deploying a different version than the existing one\n+        String existingVersion = (String) versionTopic.getOnce();\n+        if (existingVersion.equals(deploymentVersion)) {\n+            return;\n+        }\n+        newServiceConfig.put(PREV_VERSION_CONFIG_KEY, existingVersion);\n+        Topic existingPrevVersion = existingServiceConfig.find(PREV_VERSION_CONFIG_KEY);\n+        if (existingPrevVersion != null) {\n+            newServiceConfig.put(STALE_VERSION_CONFIG_KEY, existingPrevVersion.getOnce());\n+        }", "originalCommit": "95e7f3844d05e99fcf6c4c676dce8bd97842b9ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NTAyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498345023", "bodyText": "so now we won't keep stale version in the config. Instead, the cleanup process deletes everything other than versions and previousVersions, which simplifies things a bit.", "author": "tilo-chen", "createdAt": "2020-10-01T15:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI1MDU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9bd7c04a734a8ae508ec80e944628251d6af1657", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java b/src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java\nindex a31438b5..e6125f00 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java\n\n@@ -293,29 +292,20 @@ public class KernelConfigResolver {\n     }\n \n     /*\n-     * Record current deployment version in service config. Rotate among version, previousVersion and staleVersion.\n-     * staleVersion is subject to preemptive cleanup after deployment is merged\n+     * Record current deployment version in service config. Rotate versions.\n      */\n     private void handleConfigVersions(ComponentIdentifier compId, String deploymentVersion,\n-                                      Map<String, Object> newServiceConfig) {\n-        newServiceConfig.put(VERSION_CONFIG_KEY, deploymentVersion);\n-        Topics existingServiceConfig = kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, compId.getName());\n-        if (existingServiceConfig == null) {\n-            return;\n-        }\n-        Topic versionTopic = existingServiceConfig.find(VERSION_CONFIG_KEY);\n-        if (versionTopic == null) {\n+                                      Map<String, Object> newConfig) {\n+        newConfig.put(VERSION_CONFIG_KEY, deploymentVersion);\n+        Topic existingVersionTopic =\n+                kernel.getConfig().find(SERVICES_NAMESPACE_TOPIC, compId.getName(), VERSION_CONFIG_KEY);\n+        if (existingVersionTopic == null) {\n             return;\n         }\n         // rotate versions only if deploying a different version than the existing one\n-        String existingVersion = (String) versionTopic.getOnce();\n-        if (existingVersion.equals(deploymentVersion)) {\n-            return;\n-        }\n-        newServiceConfig.put(PREV_VERSION_CONFIG_KEY, existingVersion);\n-        Topic existingPrevVersion = existingServiceConfig.find(PREV_VERSION_CONFIG_KEY);\n-        if (existingPrevVersion != null) {\n-            newServiceConfig.put(STALE_VERSION_CONFIG_KEY, existingPrevVersion.getOnce());\n+        String existingVersion = (String) existingVersionTopic.getOnce();\n+        if (!existingVersion.equals(deploymentVersion)) {\n+            newConfig.put(PREV_VERSION_CONFIG_KEY, existingVersion);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI1ODEyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496258123", "bodyText": "Is the stale version supposed to exist in the kernel config store only during deployment and will be cleaned up at the end of each deployment? If so, what's the downside to doing something like this instead -> save only version and previous version in the kernel config, then in this method get a list of current and previous methods then iterate over all of component store files and delete everything that doesn't exist in that list?", "author": "shaguptashaikh", "createdAt": "2020-09-28T21:54:18Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -332,6 +355,60 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    /**\n+     * Delete stale versions from local store.\n+     *\n+     * @param deployedServiceConfig service config map that was deployed. Expected to be\n+     * {@code Map<String, Map<String, Object>>}\n+     * @throws PackageLoadingException if I/O exception during deletion\n+     */\n+    public void cleanupStaleVersions(Map<String, Object> deployedServiceConfig) throws PackageLoadingException {\n+        for (Map.Entry<String, Object> compServiceConfig : deployedServiceConfig.entrySet()) {\n+             @SuppressWarnings(\"unchecked\")\n+             Map<String, Object> config = (Map<String, Object>) compServiceConfig.getValue();\n+             String staleVersion = (String) config.get(STALE_VERSION_CONFIG_KEY);", "originalCommit": "95e7f3844d05e99fcf6c4c676dce8bd97842b9ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4MDkwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496280908", "bodyText": "Discussed offline: staleVersion is better kept outside kernel config. Pass it for cleanup in another way.", "author": "tilo-chen", "createdAt": "2020-09-28T22:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI1ODEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "9bd7c04a734a8ae508ec80e944628251d6af1657", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 6e666677..11c60aa6 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -358,53 +356,48 @@ public class ComponentManager implements InjectionActions {\n     /**\n      * Delete stale versions from local store.\n      *\n-     * @param deployedServiceConfig service config map that was deployed. Expected to be\n-     * {@code Map<String, Map<String, Object>>}\n      * @throws PackageLoadingException if I/O exception during deletion\n      */\n-    public void cleanupStaleVersions(Map<String, Object> deployedServiceConfig) throws PackageLoadingException {\n-        for (Map.Entry<String, Object> compServiceConfig : deployedServiceConfig.entrySet()) {\n-             @SuppressWarnings(\"unchecked\")\n-             Map<String, Object> config = (Map<String, Object>) compServiceConfig.getValue();\n-             String staleVersion = (String) config.get(STALE_VERSION_CONFIG_KEY);\n-             if (staleVersion != null) {\n-                 componentStore.deleteComponent(new ComponentIdentifier(compServiceConfig.getKey(),\n-                         new Semver(staleVersion), PRIVATE_SCOPE));\n-             }\n-        }\n-    }\n-\n-    /**\n-     * Iterate through the inventory and delete all local components that is not currently running.\n-     *\n-     * @throws PackageLoadingException if I/O error encountered during deletion\n-     */\n-    private void deleteAllUnusedLocalComponents() throws PackageLoadingException {\n-        Map<String, String> runningComponentVersion = getRunningComponentVersionsOnce();\n+    public void cleanupStaleVersions() throws PackageLoadingException {\n+        logger.atInfo(\"cleanup-stale-versions-start\").log();\n+        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n         Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n-        for (Map.Entry<String, Set<String>> localCompVer : localComponentVersions.entrySet()) {\n-            String compName = localCompVer.getKey();\n-            for (String compVersion : localCompVer.getValue()) {\n-                // do not delete if some running component has the same name and version\n-                if (compVersion.equals(runningComponentVersion.get(compName))) {\n-                    continue;\n+        // remove all local versions that does not present in keepVersions\n+        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+            String compName = localVersions.getKey();\n+            if (keepVersions.containsKey(compName)) {\n+                Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n+                removeVersions.removeAll(keepVersions.get(compName));\n+                for (String compVersion : removeVersions) {\n+                    componentStore\n+                            .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n                 }\n-                componentStore\n-                        .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n             }\n         }\n+        logger.atInfo(\"cleanup-stale-versions-finish\").log();\n     }\n \n-\n-    private Map<String, String> getRunningComponentVersionsOnce() {\n+    /**\n+     * Query service config to obtain non-stale versions of components which should not be cleaned up.\n+     *\n+     * @return mapping from component name string to collection of non-stale version strings\n+     */\n+    public Map<String, Set<String>> getNonStaleComponentVersionsOnce() {\n         // TODO maybe subscribe to service topics instead of getOnce every time\n-        Map<String, String> result = new HashMap<>();\n+        Map<String, Set<String>> result = new HashMap<>();\n         for (GreengrassService service : kernel.orderedDependencies()) {\n+            Set<String> nonStaleVersions = new HashSet<>();\n             Topic versionTopic = service.getServiceConfig().find(VERSION_CONFIG_KEY);\n-            if (versionTopic != null) {  // Component is expected to have version topic\n+            Topic prevVersionTopic = service.getServiceConfig().find(PREV_VERSION_CONFIG_KEY);\n+            if (versionTopic != null) {\n                 String version = (String) versionTopic.getOnce();\n-                result.put(service.getName(), version);\n+                nonStaleVersions.add(version);\n+            }\n+            if (prevVersionTopic != null) {\n+                String version = (String) prevVersionTopic.getOnce();\n+                nonStaleVersions.add(version);\n             }\n+            result.put(service.getName(), nonStaleVersions);\n         }\n         return result;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDUxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496260515", "bodyText": "Why do we need to do this if there already will be regular cleanup after every deployment? Also, will it be erroneous in such cases -> Components c1, c2, c3 have running versions 1.0, 1.0, 1.0 then current deployment has components c1 1.1, c2 1.1 and c3 1.1, the download stage has dowloaded c1 1.1 and while downloading c2 1.1 it encounters limit exceeded error, and it cleans up everything except running versions so ends up deleting c1's 1.1 version needed for the ongoing deployment as well. Regardless of that, I do think if we have preemptive  cleanup after each deployment then we don't need this deleteall method during download because it won't find anything to cleanup in the first place?", "author": "shaguptashaikh", "createdAt": "2020-09-28T22:00:24Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -332,6 +355,60 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    /**\n+     * Delete stale versions from local store.\n+     *\n+     * @param deployedServiceConfig service config map that was deployed. Expected to be\n+     * {@code Map<String, Map<String, Object>>}\n+     * @throws PackageLoadingException if I/O exception during deletion\n+     */\n+    public void cleanupStaleVersions(Map<String, Object> deployedServiceConfig) throws PackageLoadingException {\n+        for (Map.Entry<String, Object> compServiceConfig : deployedServiceConfig.entrySet()) {\n+             @SuppressWarnings(\"unchecked\")\n+             Map<String, Object> config = (Map<String, Object>) compServiceConfig.getValue();\n+             String staleVersion = (String) config.get(STALE_VERSION_CONFIG_KEY);\n+             if (staleVersion != null) {\n+                 componentStore.deleteComponent(new ComponentIdentifier(compServiceConfig.getKey(),\n+                         new Semver(staleVersion), PRIVATE_SCOPE));\n+             }\n+        }\n+    }\n+\n+    /**\n+     * Iterate through the inventory and delete all local components that is not currently running.\n+     *\n+     * @throws PackageLoadingException if I/O error encountered during deletion\n+     */\n+    private void deleteAllUnusedLocalComponents() throws PackageLoadingException {\n+        Map<String, String> runningComponentVersion = getRunningComponentVersionsOnce();\n+        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n+        for (Map.Entry<String, Set<String>> localCompVer : localComponentVersions.entrySet()) {\n+            String compName = localCompVer.getKey();\n+            for (String compVersion : localCompVer.getValue()) {\n+                // do not delete if some running component has the same name and version\n+                if (compVersion.equals(runningComponentVersion.get(compName))) {\n+                    continue;\n+                }\n+                componentStore\n+                        .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n+            }\n+        }", "originalCommit": "95e7f3844d05e99fcf6c4c676dce8bd97842b9ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4MTc0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r496281748", "bodyText": "Discussed offline: do not do deleteAll because previous version is required for fallback. Always keep current and previous versions for now.", "author": "tilo-chen", "createdAt": "2020-09-28T23:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9bd7c04a734a8ae508ec80e944628251d6af1657", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 6e666677..11c60aa6 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -358,53 +356,48 @@ public class ComponentManager implements InjectionActions {\n     /**\n      * Delete stale versions from local store.\n      *\n-     * @param deployedServiceConfig service config map that was deployed. Expected to be\n-     * {@code Map<String, Map<String, Object>>}\n      * @throws PackageLoadingException if I/O exception during deletion\n      */\n-    public void cleanupStaleVersions(Map<String, Object> deployedServiceConfig) throws PackageLoadingException {\n-        for (Map.Entry<String, Object> compServiceConfig : deployedServiceConfig.entrySet()) {\n-             @SuppressWarnings(\"unchecked\")\n-             Map<String, Object> config = (Map<String, Object>) compServiceConfig.getValue();\n-             String staleVersion = (String) config.get(STALE_VERSION_CONFIG_KEY);\n-             if (staleVersion != null) {\n-                 componentStore.deleteComponent(new ComponentIdentifier(compServiceConfig.getKey(),\n-                         new Semver(staleVersion), PRIVATE_SCOPE));\n-             }\n-        }\n-    }\n-\n-    /**\n-     * Iterate through the inventory and delete all local components that is not currently running.\n-     *\n-     * @throws PackageLoadingException if I/O error encountered during deletion\n-     */\n-    private void deleteAllUnusedLocalComponents() throws PackageLoadingException {\n-        Map<String, String> runningComponentVersion = getRunningComponentVersionsOnce();\n+    public void cleanupStaleVersions() throws PackageLoadingException {\n+        logger.atInfo(\"cleanup-stale-versions-start\").log();\n+        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n         Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n-        for (Map.Entry<String, Set<String>> localCompVer : localComponentVersions.entrySet()) {\n-            String compName = localCompVer.getKey();\n-            for (String compVersion : localCompVer.getValue()) {\n-                // do not delete if some running component has the same name and version\n-                if (compVersion.equals(runningComponentVersion.get(compName))) {\n-                    continue;\n+        // remove all local versions that does not present in keepVersions\n+        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+            String compName = localVersions.getKey();\n+            if (keepVersions.containsKey(compName)) {\n+                Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n+                removeVersions.removeAll(keepVersions.get(compName));\n+                for (String compVersion : removeVersions) {\n+                    componentStore\n+                            .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n                 }\n-                componentStore\n-                        .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n             }\n         }\n+        logger.atInfo(\"cleanup-stale-versions-finish\").log();\n     }\n \n-\n-    private Map<String, String> getRunningComponentVersionsOnce() {\n+    /**\n+     * Query service config to obtain non-stale versions of components which should not be cleaned up.\n+     *\n+     * @return mapping from component name string to collection of non-stale version strings\n+     */\n+    public Map<String, Set<String>> getNonStaleComponentVersionsOnce() {\n         // TODO maybe subscribe to service topics instead of getOnce every time\n-        Map<String, String> result = new HashMap<>();\n+        Map<String, Set<String>> result = new HashMap<>();\n         for (GreengrassService service : kernel.orderedDependencies()) {\n+            Set<String> nonStaleVersions = new HashSet<>();\n             Topic versionTopic = service.getServiceConfig().find(VERSION_CONFIG_KEY);\n-            if (versionTopic != null) {  // Component is expected to have version topic\n+            Topic prevVersionTopic = service.getServiceConfig().find(PREV_VERSION_CONFIG_KEY);\n+            if (versionTopic != null) {\n                 String version = (String) versionTopic.getOnce();\n-                result.put(service.getName(), version);\n+                nonStaleVersions.add(version);\n+            }\n+            if (prevVersionTopic != null) {\n+                String version = (String) prevVersionTopic.getOnce();\n+                nonStaleVersions.add(version);\n             }\n+            result.put(service.getName(), nonStaleVersions);\n         }\n         return result;\n     }\n"}}, {"oid": "9bd7c04a734a8ae508ec80e944628251d6af1657", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9bd7c04a734a8ae508ec80e944628251d6af1657", "message": "component store cleanup logic", "committedDate": "2020-10-01T17:29:51Z", "type": "forcePushed"}, {"oid": "a99bce01e9eb33c82a9c8543772264936d876439", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a99bce01e9eb33c82a9c8543772264936d876439", "message": "component store cleanup logic", "committedDate": "2020-10-01T18:10:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NDAxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498574012", "bodyText": "So we will clean up after each deployment? Is this the current decision? Why don't we call this method only when we run into space issues?", "author": "hui-yang", "createdAt": "2020-10-02T00:33:38Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -333,6 +353,55 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    /**\n+     * Delete stale versions from local store.\n+     *\n+     * @throws PackageLoadingException if I/O exception during deletion\n+     */\n+    public void cleanupStaleVersions() throws PackageLoadingException {", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MjQ1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498862451", "bodyText": "Yes. We do this cleanup after every deployment.", "author": "tilo-chen", "createdAt": "2020-10-02T14:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NDAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 11c60aa6..157d45b7 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -360,14 +393,14 @@ public class ComponentManager implements InjectionActions {\n      */\n     public void cleanupStaleVersions() throws PackageLoadingException {\n         logger.atInfo(\"cleanup-stale-versions-start\").log();\n-        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n-        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n-        // remove all local versions that does not present in keepVersions\n-        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+        Map<String, Set<String>> versionsToKeep = getVersionsToKeep();\n+        Map<String, Set<String>> versionsToRemove = componentStore.listAvailableComponentVersions();\n+        // remove all local versions that does not exist in versionsToKeep\n+        for (Map.Entry<String, Set<String>> localVersions : versionsToRemove.entrySet()) {\n             String compName = localVersions.getKey();\n-            if (keepVersions.containsKey(compName)) {\n+            if (versionsToKeep.containsKey(compName)) {\n                 Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n-                removeVersions.removeAll(keepVersions.get(compName));\n+                removeVersions.removeAll(versionsToKeep.get(compName));\n                 for (String compVersion : removeVersions) {\n                     componentStore\n                             .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NTEyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498575122", "bodyText": "Where is this used? Also the javadoc is identical to getUsableSpace?", "author": "hui-yang", "createdAt": "2020-10-02T00:39:02Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -305,29 +335,41 @@ public Path resolveAndSetupArtifactsDecompressedDirectory(@NonNull ComponentIden\n      * estimate of the package store's disk usage.\n      *\n      * @return total length of files in bytes\n-     * @throws UnexpectedPackagingException if unable to access the package store directory\n+     * @throws PackageLoadingException if unable to access the package store directory\n      */\n-    public long getContentSize() throws UnexpectedPackagingException {\n+    public long getContentSize() throws PackageLoadingException {\n         try {\n-            try (Stream<Path> s = Files.walk(this.componentStoreDirectory)) {\n-                return s.map(Path::toFile)\n-                        .filter(File::isFile)\n-                        .mapToLong(File::length)\n-                        .sum();\n-            }\n+            return Files.walk(this.componentStoreDirectory).map(Path::toFile)\n+                    .filter(File::isFile).mapToLong(File::length).sum();\n         } catch (IOException e) {\n-            throw new UnexpectedPackagingException(\"Failed to access package store\", e);\n+            throw new PackageLoadingException(\"Failed to access package store\", e);\n         }\n     }\n \n     /**\n      * Get remaining usable bytes for the package store.\n      * @return usable bytes\n-     * @throws IOException if I/O error occurred\n+     * @throws PackageLoadingException if I/O error occurred\n      */\n-    public long getUsableSpace() throws IOException {\n-        FileStore filestore = Files.getFileStore(this.componentStoreDirectory);\n-        return filestore.getUsableSpace();\n+    public long getUsableSpace() throws PackageLoadingException {\n+        try {\n+            return Files.getFileStore(this.componentStoreDirectory).getUsableSpace();\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(\"Failed to get usable disk space\", e);\n+        }\n+    }\n+\n+    /**\n+     * Get remaining usable bytes for the package store.\n+     * @return usable bytes\n+     * @throws PackageLoadingException if I/O error occurred\n+     */\n+    public long getTotalSpace() throws PackageLoadingException {", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2NjA0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498866045", "bodyText": "oh this slipped in... didn't mean to include it. this is useful if we want to configure limit by percentage.", "author": "tilo-chen", "createdAt": "2020-10-02T14:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NTEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\nindex 6624d104..c8b68552 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n\n@@ -359,19 +359,6 @@ public class ComponentStore {\n         }\n     }\n \n-    /**\n-     * Get remaining usable bytes for the package store.\n-     * @return usable bytes\n-     * @throws PackageLoadingException if I/O error occurred\n-     */\n-    public long getTotalSpace() throws PackageLoadingException {\n-        try {\n-            return Files.getFileStore(this.componentStoreDirectory).getTotalSpace();\n-        } catch (IOException e) {\n-            throw new PackageLoadingException(\"Failed to get usable disk space\", e);\n-        }\n-    }\n-\n     private static String parsePackageNameFromFileName(String filename) {\n         // TODO validate filename\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NTYyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498575627", "bodyText": "Here should we also check if local artifact exists first and verify the integrity?", "author": "hui-yang", "createdAt": "2020-10-02T00:41:43Z", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -105,35 +105,37 @@ public File downloadToPath(ComponentIdentifier componentIdentifier, ComponentArt\n         return null;\n     }\n \n-    /**\n-     * Get the size of artifact from greengrass repo by sending HTTP HEAD request.\n-     *\n-     * @param packageIdentifier package info\n-     * @param artifact artifact info\n-     * @return ContentLength in bytes\n-     */\n     @Override\n-    public long getSize(ComponentIdentifier packageIdentifier, ComponentArtifact artifact)\n-            throws IOException, PackageDownloadException {\n-        logger.atInfo().setEventType(\"get-artifact-size-from-greengrass-repo\")\n-                .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+    public long getDownloadSize(ComponentIdentifier componentIdentifier, ComponentArtifact artifact, Path saveToPath)", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MDQ4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r500640480", "bodyText": "fixed! https://github.com/aws/aws-greengrass-kernel/pull/473/files#diff-3a536e9baefee5c9f99baac5d74c032cR352", "author": "tilo-chen", "createdAt": "2020-10-06T22:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NTYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "59064442039afdbd5f49ea3c65135b37cb70207b", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java b/src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java\nindex 283b83a5..f26a1b8e 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java\n\n@@ -122,20 +129,13 @@ public class GreengrassRepositoryDownloader extends ArtifactDownloader {\n             // TODO verify this works by trying on a real package\n             if (!headers.containsKey(HTTP_HEADER_CONTENT_LENGTH)\n                     || headers.get(HTTP_HEADER_CONTENT_LENGTH).size() != 1) {\n-                throw new PackageDownloadException(HTTP_HEADER_CONTENT_LENGTH + \" not found in response \" + \"header\");\n+                throw new PackageDownloadException(HTTP_HEADER_CONTENT_LENGTH + \" not found in response header\");\n             }\n             return Long.parseLong(headers.get(HTTP_HEADER_CONTENT_LENGTH).get(0));\n-        } catch (PackageDownloadException e) {\n-            if (!saveToPath.resolve(artifact.getArtifactUri().getSchemeSpecificPart()).toFile().exists()) {\n-                throw e;\n-            }\n-            logger.atInfo(\"get-download-size-from-greengrass-repo\")\n-                    .log(\"Failed to download artifact, but found it locally\", e);\n-            return 0;\n         } catch (NumberFormatException e) {\n             throw new PackageDownloadException(\"Got mal-formed Content-Length\", e);\n         } catch (IOException e) {\n-            throw new PackageDownloadException(\"Failed to get size\", e);\n+            throw new PackageDownloadException(\"Failed to get download size\", e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NTk3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498575974", "bodyText": "If we decide to clean up everytime, then also add to KernelUpdateDeploymentTask", "author": "hui-yang", "createdAt": "2020-10-02T00:43:44Z", "path": "src/main/java/com/aws/greengrass/deployment/DefaultDeploymentTask.java", "diffHunk": "@@ -112,6 +112,8 @@ public DeploymentResult call()\n \n             logger.atInfo(DEPLOYMENT_TASK_EVENT_TYPE).setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .log(\"Finished deployment task\");\n+\n+            componentManager.cleanupStaleVersions();", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NzAwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498897000", "bodyText": "I didn't add it because it seems KernelUpdateDeploymentTask doesn't change components/services? So a cleanup may be not needed there?", "author": "tilo-chen", "createdAt": "2020-10-02T15:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NTk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0Njk2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498946962", "bodyText": "kernel update actually branches out from this class. More details here https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/greengrass/deployment/README.md#deploymenttask-in-details", "author": "hui-yang", "createdAt": "2020-10-02T17:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NTk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzOTEzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r500639136", "bodyText": "Thanks! Added", "author": "tilo-chen", "createdAt": "2020-10-06T22:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NTk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/deployment/DefaultDeploymentTask.java b/src/main/java/com/aws/greengrass/deployment/DefaultDeploymentTask.java\nindex e0b17d0f..e9692fb9 100644\n--- a/src/main/java/com/aws/greengrass/deployment/DefaultDeploymentTask.java\n+++ b/src/main/java/com/aws/greengrass/deployment/DefaultDeploymentTask.java\n\n@@ -115,7 +115,7 @@ public class DefaultDeploymentTask implements DeploymentTask {\n \n             componentManager.cleanupStaleVersions();\n             return result;\n-        } catch (ComponentVersionConflictException | UnexpectedPackagingException e) {\n+        } catch (NoAvailableComponentVersionException | UnexpectedPackagingException e) {\n             throw new NonRetryableDeploymentTaskFailureException(e);\n         } catch (ExecutionException e) {\n             Throwable t = e.getCause();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMTc2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498901762", "bodyText": "Deployment failing despite a cleanup and size limit option being in place is the expected behavior I think, doing this refactoring will only save us the work for doing the partial download right?", "author": "shaguptashaikh", "createdAt": "2020-10-02T15:43:45Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -303,7 +310,20 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n                 .addKeyValue(PACKAGE_IDENTIFIER, componentIdentifier).log();\n \n         for (ComponentArtifact artifact : artifacts) {\n+            // check disk space before download\n+            //TODO refactor to check total artifacts size in preparePackages before download anything\n+            // because all artifacts must fit otherwise the deployment still can fail.", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMzc1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498903755", "bodyText": "Yes. That way we can fail it early instead of fail after downloading partial required files.", "author": "tilo-chen", "createdAt": "2020-10-02T15:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMTc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 11c60aa6..157d45b7 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -311,14 +343,15 @@ public class ComponentManager implements InjectionActions {\n \n         for (ComponentArtifact artifact : artifacts) {\n             // check disk space before download\n-            //TODO refactor to check total artifacts size in preparePackages before download anything\n-            // because all artifacts must fit otherwise the deployment still can fail.\n-            // also revise entire download flow to check existence first\n+            //TODO refactor to check total size of artifacts from all components at once instead of one by one\n+            // because all artifacts must fit otherwise the deployment still fails.\n             if (componentStore.getUsableSpace() < DEFAULT_MIN_DISK_AVAIL_BYTES) {\n                 throw new SizeLimitException(\"Disk space critical\");\n             }\n-\n             ArtifactDownloader downloader = selectArtifactDownloader(artifact.getArtifactUri());\n+            if (!downloader.downloadRequired(componentIdentifier, artifact, packageArtifactDirectory)) {\n+                continue;\n+            }\n             long downloadSize = downloader.getDownloadSize(componentIdentifier, artifact, packageArtifactDirectory);\n             if (componentStore.getContentSize() + downloadSize > DEFAULT_MAX_STORE_SIZE_BYTES) {\n                 throw new SizeLimitException(\"Component store size limit reached\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMjI5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498902292", "bodyText": "nit - does not exist", "author": "shaguptashaikh", "createdAt": "2020-10-02T15:44:39Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -333,6 +353,55 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    /**\n+     * Delete stale versions from local store.\n+     *\n+     * @throws PackageLoadingException if I/O exception during deletion\n+     */\n+    public void cleanupStaleVersions() throws PackageLoadingException {\n+        logger.atInfo(\"cleanup-stale-versions-start\").log();\n+        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n+        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n+        // remove all local versions that does not present in keepVersions", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 11c60aa6..157d45b7 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -360,14 +393,14 @@ public class ComponentManager implements InjectionActions {\n      */\n     public void cleanupStaleVersions() throws PackageLoadingException {\n         logger.atInfo(\"cleanup-stale-versions-start\").log();\n-        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n-        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n-        // remove all local versions that does not present in keepVersions\n-        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+        Map<String, Set<String>> versionsToKeep = getVersionsToKeep();\n+        Map<String, Set<String>> versionsToRemove = componentStore.listAvailableComponentVersions();\n+        // remove all local versions that does not exist in versionsToKeep\n+        for (Map.Entry<String, Set<String>> localVersions : versionsToRemove.entrySet()) {\n             String compName = localVersions.getKey();\n-            if (keepVersions.containsKey(compName)) {\n+            if (versionsToKeep.containsKey(compName)) {\n                 Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n-                removeVersions.removeAll(keepVersions.get(compName));\n+                removeVersions.removeAll(versionsToKeep.get(compName));\n                 for (String compVersion : removeVersions) {\n                     componentStore\n                             .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMzA5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498903091", "bodyText": "Nit - can we give this a little simpler name like getVersionsToKeep()?", "author": "shaguptashaikh", "createdAt": "2020-10-02T15:46:02Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -333,6 +353,55 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    /**\n+     * Delete stale versions from local store.\n+     *\n+     * @throws PackageLoadingException if I/O exception during deletion\n+     */\n+    public void cleanupStaleVersions() throws PackageLoadingException {\n+        logger.atInfo(\"cleanup-stale-versions-start\").log();\n+        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n+        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n+        // remove all local versions that does not present in keepVersions\n+        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+            String compName = localVersions.getKey();\n+            if (keepVersions.containsKey(compName)) {\n+                Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n+                removeVersions.removeAll(keepVersions.get(compName));\n+                for (String compVersion : removeVersions) {\n+                    componentStore\n+                            .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n+                }\n+            }\n+        }\n+        logger.atInfo(\"cleanup-stale-versions-finish\").log();\n+    }\n+\n+    /**\n+     * Query service config to obtain non-stale versions of components which should not be cleaned up.\n+     *\n+     * @return mapping from component name string to collection of non-stale version strings\n+     */\n+    public Map<String, Set<String>> getNonStaleComponentVersionsOnce() {", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 11c60aa6..157d45b7 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -360,14 +393,14 @@ public class ComponentManager implements InjectionActions {\n      */\n     public void cleanupStaleVersions() throws PackageLoadingException {\n         logger.atInfo(\"cleanup-stale-versions-start\").log();\n-        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n-        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n-        // remove all local versions that does not present in keepVersions\n-        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+        Map<String, Set<String>> versionsToKeep = getVersionsToKeep();\n+        Map<String, Set<String>> versionsToRemove = componentStore.listAvailableComponentVersions();\n+        // remove all local versions that does not exist in versionsToKeep\n+        for (Map.Entry<String, Set<String>> localVersions : versionsToRemove.entrySet()) {\n             String compName = localVersions.getKey();\n-            if (keepVersions.containsKey(compName)) {\n+            if (versionsToKeep.containsKey(compName)) {\n                 Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n-                removeVersions.removeAll(keepVersions.get(compName));\n+                removeVersions.removeAll(versionsToKeep.get(compName));\n                 for (String compVersion : removeVersions) {\n                     componentStore\n                             .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNDExNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498904117", "bodyText": "Nit - This could read better as versionsToKeep and the opposite versionsToRemove", "author": "shaguptashaikh", "createdAt": "2020-10-02T15:47:53Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -333,6 +353,55 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    /**\n+     * Delete stale versions from local store.\n+     *\n+     * @throws PackageLoadingException if I/O exception during deletion\n+     */\n+    public void cleanupStaleVersions() throws PackageLoadingException {\n+        logger.atInfo(\"cleanup-stale-versions-start\").log();\n+        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 11c60aa6..157d45b7 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -360,14 +393,14 @@ public class ComponentManager implements InjectionActions {\n      */\n     public void cleanupStaleVersions() throws PackageLoadingException {\n         logger.atInfo(\"cleanup-stale-versions-start\").log();\n-        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n-        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n-        // remove all local versions that does not present in keepVersions\n-        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+        Map<String, Set<String>> versionsToKeep = getVersionsToKeep();\n+        Map<String, Set<String>> versionsToRemove = componentStore.listAvailableComponentVersions();\n+        // remove all local versions that does not exist in versionsToKeep\n+        for (Map.Entry<String, Set<String>> localVersions : versionsToRemove.entrySet()) {\n             String compName = localVersions.getKey();\n-            if (keepVersions.containsKey(compName)) {\n+            if (versionsToKeep.containsKey(compName)) {\n                 Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n-                removeVersions.removeAll(keepVersions.get(compName));\n+                removeVersions.removeAll(versionsToKeep.get(compName));\n                 for (String compVersion : removeVersions) {\n                     componentStore\n                             .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNDc5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498904790", "bodyText": "I don't think we need to subscribe because deployment workflow is the only thing that ever changes the versions, lets remove this TODO", "author": "shaguptashaikh", "createdAt": "2020-10-02T15:49:07Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -333,6 +353,55 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    /**\n+     * Delete stale versions from local store.\n+     *\n+     * @throws PackageLoadingException if I/O exception during deletion\n+     */\n+    public void cleanupStaleVersions() throws PackageLoadingException {\n+        logger.atInfo(\"cleanup-stale-versions-start\").log();\n+        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n+        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n+        // remove all local versions that does not present in keepVersions\n+        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+            String compName = localVersions.getKey();\n+            if (keepVersions.containsKey(compName)) {\n+                Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n+                removeVersions.removeAll(keepVersions.get(compName));\n+                for (String compVersion : removeVersions) {\n+                    componentStore\n+                            .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n+                }\n+            }\n+        }\n+        logger.atInfo(\"cleanup-stale-versions-finish\").log();\n+    }\n+\n+    /**\n+     * Query service config to obtain non-stale versions of components which should not be cleaned up.\n+     *\n+     * @return mapping from component name string to collection of non-stale version strings\n+     */\n+    public Map<String, Set<String>> getNonStaleComponentVersionsOnce() {\n+        // TODO maybe subscribe to service topics instead of getOnce every time", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 11c60aa6..157d45b7 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -360,14 +393,14 @@ public class ComponentManager implements InjectionActions {\n      */\n     public void cleanupStaleVersions() throws PackageLoadingException {\n         logger.atInfo(\"cleanup-stale-versions-start\").log();\n-        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n-        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n-        // remove all local versions that does not present in keepVersions\n-        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+        Map<String, Set<String>> versionsToKeep = getVersionsToKeep();\n+        Map<String, Set<String>> versionsToRemove = componentStore.listAvailableComponentVersions();\n+        // remove all local versions that does not exist in versionsToKeep\n+        for (Map.Entry<String, Set<String>> localVersions : versionsToRemove.entrySet()) {\n             String compName = localVersions.getKey();\n-            if (keepVersions.containsKey(compName)) {\n+            if (versionsToKeep.containsKey(compName)) {\n                 Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n-                removeVersions.removeAll(keepVersions.get(compName));\n+                removeVersions.removeAll(versionsToKeep.get(compName));\n                 for (String compVersion : removeVersions) {\n                     componentStore\n                             .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNjk5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498906996", "bodyText": "I don't remember this from the previous PRs, but this does delete directories as well right?", "author": "shaguptashaikh", "createdAt": "2020-10-02T15:53:12Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -333,6 +353,55 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    /**\n+     * Delete stale versions from local store.\n+     *\n+     * @throws PackageLoadingException if I/O exception during deletion\n+     */\n+    public void cleanupStaleVersions() throws PackageLoadingException {\n+        logger.atInfo(\"cleanup-stale-versions-start\").log();\n+        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n+        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n+        // remove all local versions that does not present in keepVersions\n+        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+            String compName = localVersions.getKey();\n+            if (keepVersions.containsKey(compName)) {\n+                Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n+                removeVersions.removeAll(keepVersions.get(compName));\n+                for (String compVersion : removeVersions) {\n+                    componentStore\n+                            .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwOTAzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498909032", "bodyText": "Yeah here:\nhttps://github.com/aws/aws-greengrass-kernel/pull/473/files#diff-fcb4ee4e2bf335be63da6cd477ac9c88R158-R160\nIt tries to delete recipe, artifact directory, and artifact decompressed directory", "author": "tilo-chen", "createdAt": "2020-10-02T15:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNjk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 11c60aa6..157d45b7 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -360,14 +393,14 @@ public class ComponentManager implements InjectionActions {\n      */\n     public void cleanupStaleVersions() throws PackageLoadingException {\n         logger.atInfo(\"cleanup-stale-versions-start\").log();\n-        Map<String, Set<String>> keepVersions = getNonStaleComponentVersionsOnce();\n-        Map<String, Set<String>> localComponentVersions = componentStore.listArtifactAvailableComponents();\n-        // remove all local versions that does not present in keepVersions\n-        for (Map.Entry<String, Set<String>> localVersions : localComponentVersions.entrySet()) {\n+        Map<String, Set<String>> versionsToKeep = getVersionsToKeep();\n+        Map<String, Set<String>> versionsToRemove = componentStore.listAvailableComponentVersions();\n+        // remove all local versions that does not exist in versionsToKeep\n+        for (Map.Entry<String, Set<String>> localVersions : versionsToRemove.entrySet()) {\n             String compName = localVersions.getKey();\n-            if (keepVersions.containsKey(compName)) {\n+            if (versionsToKeep.containsKey(compName)) {\n                 Set<String> removeVersions = new HashSet<>(localVersions.getValue());\n-                removeVersions.removeAll(keepVersions.get(compName));\n+                removeVersions.removeAll(versionsToKeep.get(compName));\n                 for (String compVersion : removeVersions) {\n                     componentStore\n                             .deleteComponent(new ComponentIdentifier(compName, new Semver(compVersion), PRIVATE_SCOPE));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNzczMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498907731", "bodyText": "Nit - handleComponentVersionConfigs sounds like a better name here, current name gives an impression that the version is for the config", "author": "shaguptashaikh", "createdAt": "2020-10-02T15:54:32Z", "path": "src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java", "diffHunk": "@@ -290,6 +291,33 @@ private String lookupParameterValueForComponent(\n         return mainServiceConfig;\n     }\n \n+    /*\n+     * Record current deployment version in service config. Rotate versions.\n+     */\n+    private void handleConfigVersions(ComponentIdentifier compId, String deploymentVersion,", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java b/src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java\nindex d1a89e83..ffa01216 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java\n\n@@ -294,8 +295,8 @@ public class KernelConfigResolver {\n     /*\n      * Record current deployment version in service config. Rotate versions.\n      */\n-    private void handleConfigVersions(ComponentIdentifier compId, String deploymentVersion,\n-                                      Map<String, Object> newConfig) {\n+    private void handleComponentVersionConfigs(ComponentIdentifier compId, String deploymentVersion,\n+                                               Map<String, Object> newConfig) {\n         newConfig.put(VERSION_CONFIG_KEY, deploymentVersion);\n         Topic existingVersionTopic =\n                 kernel.getConfig().find(SERVICES_NAMESPACE_TOPIC, compId.getName(), VERSION_CONFIG_KEY);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwOTQ0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r498909442", "bodyText": "What's the plan for this? Let's make sure it doesn't slip and is covered by tests, are we dependent on anything from cloud team to test this?", "author": "shaguptashaikh", "createdAt": "2020-10-02T15:57:38Z", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -105,35 +105,37 @@ public File downloadToPath(ComponentIdentifier componentIdentifier, ComponentArt\n         return null;\n     }\n \n-    /**\n-     * Get the size of artifact from greengrass repo by sending HTTP HEAD request.\n-     *\n-     * @param packageIdentifier package info\n-     * @param artifact artifact info\n-     * @return ContentLength in bytes\n-     */\n     @Override\n-    public long getSize(ComponentIdentifier packageIdentifier, ComponentArtifact artifact)\n-            throws IOException, PackageDownloadException {\n-        logger.atInfo().setEventType(\"get-artifact-size-from-greengrass-repo\")\n-                .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+    public long getDownloadSize(ComponentIdentifier componentIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"get-download-size-from-greengrass-repo\")\n+                .addKeyValue(\"componentIdentifier\", componentIdentifier)\n                 .addKeyValue(\"artifactUri\", artifact.getArtifactUri().toString()).log();\n \n-        String preSignedUrl =\n-                getArtifactDownloadURL(packageIdentifier, artifact.getArtifactUri().getSchemeSpecificPart());\n-        URL url = new URL(preSignedUrl);\n-        HttpURLConnection conn = connect(url);\n-        conn.setRequestMethod(\"HEAD\");\n-        Map<String, List<String>> headers = conn.getHeaderFields();\n-        // TODO verify this works by trying on a real package\n-        if (!headers.containsKey(HTTP_HEADER_CONTENT_LENGTH) || headers.get(HTTP_HEADER_CONTENT_LENGTH).size() != 1) {\n-            throw new PackageDownloadException(HTTP_HEADER_CONTENT_LENGTH + \" not found in response \" + \"header\");\n-        }\n-\n         try {\n+            String preSignedUrl =\n+                    getArtifactDownloadURL(componentIdentifier, artifact.getArtifactUri().getSchemeSpecificPart());\n+            URL url = new URL(preSignedUrl);\n+            HttpURLConnection conn = connect(url);\n+            conn.setRequestMethod(\"HEAD\");\n+            Map<String, List<String>> headers = conn.getHeaderFields();\n+            // TODO verify this works by trying on a real package", "originalCommit": "a1996a0a397a7c380db93f75e13fd1fe66f6eb57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwMzg2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r500603864", "bodyText": "will be addressed later along with other TODOs related to public component in GreengrassRepositoryDownloader", "author": "tilo-chen", "createdAt": "2020-10-06T21:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwOTQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "59064442039afdbd5f49ea3c65135b37cb70207b", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java b/src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java\nindex 283b83a5..f26a1b8e 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java\n\n@@ -122,20 +129,13 @@ public class GreengrassRepositoryDownloader extends ArtifactDownloader {\n             // TODO verify this works by trying on a real package\n             if (!headers.containsKey(HTTP_HEADER_CONTENT_LENGTH)\n                     || headers.get(HTTP_HEADER_CONTENT_LENGTH).size() != 1) {\n-                throw new PackageDownloadException(HTTP_HEADER_CONTENT_LENGTH + \" not found in response \" + \"header\");\n+                throw new PackageDownloadException(HTTP_HEADER_CONTENT_LENGTH + \" not found in response header\");\n             }\n             return Long.parseLong(headers.get(HTTP_HEADER_CONTENT_LENGTH).get(0));\n-        } catch (PackageDownloadException e) {\n-            if (!saveToPath.resolve(artifact.getArtifactUri().getSchemeSpecificPart()).toFile().exists()) {\n-                throw e;\n-            }\n-            logger.atInfo(\"get-download-size-from-greengrass-repo\")\n-                    .log(\"Failed to download artifact, but found it locally\", e);\n-            return 0;\n         } catch (NumberFormatException e) {\n             throw new PackageDownloadException(\"Got mal-formed Content-Length\", e);\n         } catch (IOException e) {\n-            throw new PackageDownloadException(\"Failed to get size\", e);\n+            throw new PackageDownloadException(\"Failed to get download size\", e);\n         }\n     }\n \n"}}, {"oid": "fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fd2bb1812c5bf4e8c6e2880b755b65cfcf69cd06", "message": "address comments", "committedDate": "2020-10-06T15:09:55Z", "type": "forcePushed"}, {"oid": "53fbd981f1df3f3e42ba761f982d0199e4f52f50", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/53fbd981f1df3f3e42ba761f982d0199e4f52f50", "message": "fix test", "committedDate": "2020-10-06T20:30:00Z", "type": "forcePushed"}, {"oid": "e770f978a2e4394e6112a9605cbe9d33cb12c784", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e770f978a2e4394e6112a9605cbe9d33cb12c784", "message": "add unit test. fix bug", "committedDate": "2020-10-07T01:05:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5ODYyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r500698621", "bodyText": "Should this exception include the getUsableSpace reported as well as DEFAULT_MIN_DISK_AVAIL_BYTES?", "author": "philcali", "createdAt": "2020-10-07T02:17:47Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -335,7 +342,21 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n                 .addKeyValue(PACKAGE_IDENTIFIER, componentIdentifier).log();\n \n         for (ComponentArtifact artifact : artifacts) {\n+            // check disk space before download\n+            //TODO refactor to check total size of artifacts from all components at once instead of one by one\n+            // because all artifacts must fit otherwise the deployment still fails.\n+            if (componentStore.getUsableSpace() < DEFAULT_MIN_DISK_AVAIL_BYTES) {\n+                throw new SizeLimitException(\"Disk space critical\");", "originalCommit": "faf7f8cc99486e9d91fc7a5539b6b9e341335ce4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMDY1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r501210653", "bodyText": "added. Thanks!", "author": "tilo-chen", "createdAt": "2020-10-07T18:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5ODYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "59064442039afdbd5f49ea3c65135b37cb70207b", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 640d940e..d15519d4 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -345,16 +345,23 @@ public class ComponentManager implements InjectionActions {\n             // check disk space before download\n             //TODO refactor to check total size of artifacts from all components at once instead of one by one\n             // because all artifacts must fit otherwise the deployment still fails.\n-            if (componentStore.getUsableSpace() < DEFAULT_MIN_DISK_AVAIL_BYTES) {\n-                throw new SizeLimitException(\"Disk space critical\");\n+            long usableSpaceBytes = componentStore.getUsableSpace();\n+            if (usableSpaceBytes < DEFAULT_MIN_DISK_AVAIL_BYTES) {\n+                throw new SizeLimitException(\n+                        String.format(\"Disk space critical: %d bytes usable, %d bytes minimum allowed\",\n+                                usableSpaceBytes, DEFAULT_MIN_DISK_AVAIL_BYTES));\n             }\n             ArtifactDownloader downloader = selectArtifactDownloader(artifact.getArtifactUri());\n             if (!downloader.downloadRequired(componentIdentifier, artifact, packageArtifactDirectory)) {\n                 continue;\n             }\n             long downloadSize = downloader.getDownloadSize(componentIdentifier, artifact, packageArtifactDirectory);\n-            if (componentStore.getContentSize() + downloadSize > DEFAULT_MAX_STORE_SIZE_BYTES) {\n-                throw new SizeLimitException(\"Component store size limit reached\");\n+            long storeContentSize = componentStore.getContentSize();\n+            if (storeContentSize + downloadSize > DEFAULT_MAX_STORE_SIZE_BYTES) {\n+                throw new SizeLimitException(String.format(\n+                        \"Component store size limit reached: %d bytes existing, %d bytes needed,\"\n+                                + \"%d bytes maximum allowed total\", storeContentSize, downloadSize,\n+                        DEFAULT_MAX_STORE_SIZE_BYTES));\n             }\n \n             File downloadedFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5ODk2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r500698965", "bodyText": "Should this exception include componentStore.getContentSize() + downloadSize as well as DEFAULT_MAX_STORE_SIZE_BYTES?", "author": "philcali", "createdAt": "2020-10-07T02:18:53Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -335,7 +342,21 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n                 .addKeyValue(PACKAGE_IDENTIFIER, componentIdentifier).log();\n \n         for (ComponentArtifact artifact : artifacts) {\n+            // check disk space before download\n+            //TODO refactor to check total size of artifacts from all components at once instead of one by one\n+            // because all artifacts must fit otherwise the deployment still fails.\n+            if (componentStore.getUsableSpace() < DEFAULT_MIN_DISK_AVAIL_BYTES) {\n+                throw new SizeLimitException(\"Disk space critical\");\n+            }\n             ArtifactDownloader downloader = selectArtifactDownloader(artifact.getArtifactUri());\n+            if (!downloader.downloadRequired(componentIdentifier, artifact, packageArtifactDirectory)) {\n+                continue;\n+            }\n+            long downloadSize = downloader.getDownloadSize(componentIdentifier, artifact, packageArtifactDirectory);\n+            if (componentStore.getContentSize() + downloadSize > DEFAULT_MAX_STORE_SIZE_BYTES) {\n+                throw new SizeLimitException(\"Component store size limit reached\");", "originalCommit": "faf7f8cc99486e9d91fc7a5539b6b9e341335ce4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMDY3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r501210675", "bodyText": "added. Thanks!", "author": "tilo-chen", "createdAt": "2020-10-07T18:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5ODk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "59064442039afdbd5f49ea3c65135b37cb70207b", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\nindex 640d940e..d15519d4 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java\n\n@@ -345,16 +345,23 @@ public class ComponentManager implements InjectionActions {\n             // check disk space before download\n             //TODO refactor to check total size of artifacts from all components at once instead of one by one\n             // because all artifacts must fit otherwise the deployment still fails.\n-            if (componentStore.getUsableSpace() < DEFAULT_MIN_DISK_AVAIL_BYTES) {\n-                throw new SizeLimitException(\"Disk space critical\");\n+            long usableSpaceBytes = componentStore.getUsableSpace();\n+            if (usableSpaceBytes < DEFAULT_MIN_DISK_AVAIL_BYTES) {\n+                throw new SizeLimitException(\n+                        String.format(\"Disk space critical: %d bytes usable, %d bytes minimum allowed\",\n+                                usableSpaceBytes, DEFAULT_MIN_DISK_AVAIL_BYTES));\n             }\n             ArtifactDownloader downloader = selectArtifactDownloader(artifact.getArtifactUri());\n             if (!downloader.downloadRequired(componentIdentifier, artifact, packageArtifactDirectory)) {\n                 continue;\n             }\n             long downloadSize = downloader.getDownloadSize(componentIdentifier, artifact, packageArtifactDirectory);\n-            if (componentStore.getContentSize() + downloadSize > DEFAULT_MAX_STORE_SIZE_BYTES) {\n-                throw new SizeLimitException(\"Component store size limit reached\");\n+            long storeContentSize = componentStore.getContentSize();\n+            if (storeContentSize + downloadSize > DEFAULT_MAX_STORE_SIZE_BYTES) {\n+                throw new SizeLimitException(String.format(\n+                        \"Component store size limit reached: %d bytes existing, %d bytes needed,\"\n+                                + \"%d bytes maximum allowed total\", storeContentSize, downloadSize,\n+                        DEFAULT_MAX_STORE_SIZE_BYTES));\n             }\n \n             File downloadedFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTU5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r500701596", "bodyText": "Include the componentStoreDirectory in the exception?", "author": "philcali", "createdAt": "2020-10-07T02:27:47Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -305,29 +335,28 @@ public Path resolveAndSetupArtifactsDecompressedDirectory(@NonNull ComponentIden\n      * estimate of the package store's disk usage.\n      *\n      * @return total length of files in bytes\n-     * @throws UnexpectedPackagingException if unable to access the package store directory\n+     * @throws PackageLoadingException if unable to access the package store directory\n      */\n-    public long getContentSize() throws UnexpectedPackagingException {\n+    public long getContentSize() throws PackageLoadingException {\n         try {\n-            try (Stream<Path> s = Files.walk(this.componentStoreDirectory)) {\n-                return s.map(Path::toFile)\n-                        .filter(File::isFile)\n-                        .mapToLong(File::length)\n-                        .sum();\n-            }\n+            return Files.walk(this.componentStoreDirectory).map(Path::toFile)\n+                    .filter(File::isFile).mapToLong(File::length).sum();\n         } catch (IOException e) {\n-            throw new UnexpectedPackagingException(\"Failed to access package store\", e);\n+            throw new PackageLoadingException(\"Failed to access package store\", e);\n         }\n     }\n \n     /**\n      * Get remaining usable bytes for the package store.\n      * @return usable bytes\n-     * @throws IOException if I/O error occurred\n+     * @throws PackageLoadingException if I/O error occurred\n      */\n-    public long getUsableSpace() throws IOException {\n-        FileStore filestore = Files.getFileStore(this.componentStoreDirectory);\n-        return filestore.getUsableSpace();\n+    public long getUsableSpace() throws PackageLoadingException {\n+        try {\n+            return Files.getFileStore(this.componentStoreDirectory).getUsableSpace();\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(\"Failed to get usable disk space\", e);", "originalCommit": "faf7f8cc99486e9d91fc7a5539b6b9e341335ce4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMDY5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r501210696", "bodyText": "added. Thanks!", "author": "tilo-chen", "createdAt": "2020-10-07T18:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "59064442039afdbd5f49ea3c65135b37cb70207b", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\nindex c8b68552..87c9f921 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n\n@@ -355,7 +355,8 @@ public class ComponentStore {\n         try {\n             return Files.getFileStore(this.componentStoreDirectory).getUsableSpace();\n         } catch (IOException e) {\n-            throw new PackageLoadingException(\"Failed to get usable disk space\", e);\n+            throw new PackageLoadingException(\n+                    \"Failed to get usable disk space for directory: \" + this.componentStoreDirectory, e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTY4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r500701682", "bodyText": "Include the componentStoreDirectory in the exception?", "author": "philcali", "createdAt": "2020-10-07T02:28:03Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -305,29 +335,28 @@ public Path resolveAndSetupArtifactsDecompressedDirectory(@NonNull ComponentIden\n      * estimate of the package store's disk usage.\n      *\n      * @return total length of files in bytes\n-     * @throws UnexpectedPackagingException if unable to access the package store directory\n+     * @throws PackageLoadingException if unable to access the package store directory\n      */\n-    public long getContentSize() throws UnexpectedPackagingException {\n+    public long getContentSize() throws PackageLoadingException {\n         try {\n-            try (Stream<Path> s = Files.walk(this.componentStoreDirectory)) {\n-                return s.map(Path::toFile)\n-                        .filter(File::isFile)\n-                        .mapToLong(File::length)\n-                        .sum();\n-            }\n+            return Files.walk(this.componentStoreDirectory).map(Path::toFile)\n+                    .filter(File::isFile).mapToLong(File::length).sum();\n         } catch (IOException e) {\n-            throw new UnexpectedPackagingException(\"Failed to access package store\", e);\n+            throw new PackageLoadingException(\"Failed to access package store\", e);", "originalCommit": "faf7f8cc99486e9d91fc7a5539b6b9e341335ce4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMDcxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r501210715", "bodyText": "added. Thanks!", "author": "tilo-chen", "createdAt": "2020-10-07T18:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMTY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "59064442039afdbd5f49ea3c65135b37cb70207b", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\nindex c8b68552..87c9f921 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java\n\n@@ -355,7 +355,8 @@ public class ComponentStore {\n         try {\n             return Files.getFileStore(this.componentStoreDirectory).getUsableSpace();\n         } catch (IOException e) {\n-            throw new PackageLoadingException(\"Failed to get usable disk space\", e);\n+            throw new PackageLoadingException(\n+                    \"Failed to get usable disk space for directory: \" + this.componentStoreDirectory, e);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjAyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r500702023", "bodyText": "License header is needed.", "author": "philcali", "createdAt": "2020-10-07T02:29:32Z", "path": "src/main/java/com/aws/greengrass/componentmanager/exceptions/SizeLimitException.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.aws.greengrass.componentmanager.exceptions;", "originalCommit": "faf7f8cc99486e9d91fc7a5539b6b9e341335ce4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMDczNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r501210736", "bodyText": "added. Thanks!", "author": "tilo-chen", "createdAt": "2020-10-07T18:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "59064442039afdbd5f49ea3c65135b37cb70207b", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/exceptions/SizeLimitException.java b/src/main/java/com/aws/greengrass/componentmanager/exceptions/SizeLimitException.java\nindex 05628c46..119ad2b5 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/exceptions/SizeLimitException.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/exceptions/SizeLimitException.java\n\n@@ -1,3 +1,8 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n package com.aws.greengrass.componentmanager.exceptions;\n \n public class SizeLimitException extends PackageDownloadException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjcyOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r500702729", "bodyText": "The downloadRequired and needsDownload needs some disambiguation.", "author": "philcali", "createdAt": "2020-10-07T02:32:21Z", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/ArtifactDownloader.java", "diffHunk": "@@ -63,14 +63,28 @@ static void checkIntegrityAndSaveToStore(InputStream artifactObject, ComponentAr\n         }\n     }\n \n-    static boolean needsDownload(ComponentArtifact artifact, Path saveToPath)\n-            throws PackageDownloadException, IOException {\n+    /**\n+     * Checks whether it is necessary to download the artifact or the existing file suffices.\n+     *\n+     * @param componentIdentifier component that has the artifact\n+     * @param artifact an artifact object\n+     * @param saveToPath path of directory where the artifact is expected to exist\n+     * @return true if download is necessary\n+     * @throws PackageDownloadException if error occurred in download process\n+     * @throws InvalidArtifactUriException if given artifact URI has error\n+     */\n+    public abstract boolean downloadRequired(ComponentIdentifier componentIdentifier, ComponentArtifact artifact,\n+                                             Path saveToPath)\n+            throws InvalidArtifactUriException, PackageDownloadException;\n+\n+    static boolean needsDownload(ComponentArtifact artifact, Path filePath)\n+            throws PackageDownloadException {", "originalCommit": "faf7f8cc99486e9d91fc7a5539b6b9e341335ce4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMDQ1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r501210454", "bodyText": "Renamed needsDownload to artifactExistsAndChecksum", "author": "tilo-chen", "createdAt": "2020-10-07T18:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "59064442039afdbd5f49ea3c65135b37cb70207b", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/plugins/ArtifactDownloader.java b/src/main/java/com/aws/greengrass/componentmanager/plugins/ArtifactDownloader.java\nindex 3e0ac4bd..dfed333e 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/plugins/ArtifactDownloader.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/plugins/ArtifactDownloader.java\n\n@@ -77,7 +77,15 @@ public abstract class ArtifactDownloader {\n                                              Path saveToPath)\n             throws InvalidArtifactUriException, PackageDownloadException;\n \n-    static boolean needsDownload(ComponentArtifact artifact, Path filePath)\n+    /**\n+     * Checks the given artifact file exists at given path and has the right checksum.\n+     *\n+     * @param artifact an artifact object\n+     * @param filePath path where the artifact file should exist locally\n+     * @return true if the file exists and has the right checksum\n+     * @throws PackageDownloadException if No local artifact found and recipe does not have required digest information\n+     */\n+    static boolean artifactExistsAndChecksum(ComponentArtifact artifact, Path filePath)\n             throws PackageDownloadException {\n         // Local recipes don't have digest or algorithm and that's expected, in such case, use the\n         // locally present artifact. On the other hand, recipes downloaded from cloud will always\n"}}, {"oid": "59064442039afdbd5f49ea3c65135b37cb70207b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/59064442039afdbd5f49ea3c65135b37cb70207b", "message": "remove existence check from getDownloadSize", "committedDate": "2020-10-07T20:30:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1MDUxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r501850519", "bodyText": "Now that you're checking if download is needed or not in component store, do we still need this condition here and same for the greengrass repo downloader because it will not reach here if the download isn't needed right?", "author": "shaguptashaikh", "createdAt": "2020-10-08T16:23:21Z", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java", "diffHunk": "@@ -71,7 +79,7 @@ public File downloadToPath(ComponentIdentifier componentIdentifier, ComponentArt\n         try {\n             Path filePath = saveToPath.resolve(extractFileName(key));\n             // Skip download if not needed\n-            if (needsDownload(artifact, filePath)) {\n+            if (artifactExistsAndChecksum(artifact, filePath)) {", "originalCommit": "c5a6fbf0df670174cbacd92165d5c8497a79c3f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMjUyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r501922527", "bodyText": "Yeah! Now we're checking this in ComponentManger before calling downloadToPath", "author": "tilo-chen", "createdAt": "2020-10-08T18:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1MDUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NjU5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/473#discussion_r501996592", "bodyText": "Turns out many tests depend on downloadToPath to check existence. Not removing it for now.", "author": "tilo-chen", "createdAt": "2020-10-08T20:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1MDUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "767a804ac28ac17f5d78751d40c7d988ed0bb2d5", "chunk": "diff --git a/src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java b/src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java\nindex f917cb6b..e422f822 100644\n--- a/src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java\n+++ b/src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java\n\n@@ -79,7 +71,7 @@ public class S3Downloader extends ArtifactDownloader {\n         try {\n             Path filePath = saveToPath.resolve(extractFileName(key));\n             // Skip download if not needed\n-            if (artifactExistsAndChecksum(artifact, filePath)) {\n+            if (needsDownload(artifact, filePath)) {\n                 // Get artifact from S3\n                 artifactObject = getObject(bucket, key, artifact, componentIdentifier);\n \n"}}, {"oid": "767a804ac28ac17f5d78751d40c7d988ed0bb2d5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/767a804ac28ac17f5d78751d40c7d988ed0bb2d5", "message": "component store cleanup logic", "committedDate": "2020-10-08T17:55:02Z", "type": "commit"}, {"oid": "93955192e2e3c421bcaf90745f2fe8488c8d5e65", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/93955192e2e3c421bcaf90745f2fe8488c8d5e65", "message": "fix test", "committedDate": "2020-10-08T17:55:04Z", "type": "commit"}, {"oid": "e84f33ee32ed6a784777b122a18d89b4205909ed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e84f33ee32ed6a784777b122a18d89b4205909ed", "message": "remove unused import", "committedDate": "2020-10-08T17:55:04Z", "type": "commit"}, {"oid": "5266f156fae8b22fd691a4ae044e068a79d13950", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5266f156fae8b22fd691a4ae044e068a79d13950", "message": "fix e2e test", "committedDate": "2020-10-08T17:55:04Z", "type": "commit"}, {"oid": "c11e1cdc58842c82eac0ffe0e94ca798cbb7c14f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c11e1cdc58842c82eac0ffe0e94ca798cbb7c14f", "message": "address comments", "committedDate": "2020-10-08T17:55:23Z", "type": "commit"}, {"oid": "20c1966da2827f99e5a1c02753c8d8c3d4a42476", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/20c1966da2827f99e5a1c02753c8d8c3d4a42476", "message": "fix test", "committedDate": "2020-10-08T17:56:34Z", "type": "commit"}, {"oid": "f46fe11266e5a8d75375779b59556e2f56381d85", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f46fe11266e5a8d75375779b59556e2f56381d85", "message": "add cleanup to KernelUpdateDeploymentTask", "committedDate": "2020-10-08T17:56:36Z", "type": "commit"}, {"oid": "bbc59113b3a385ec63a40e10031a51492271e6d9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bbc59113b3a385ec63a40e10031a51492271e6d9", "message": "add unit test. fix bug", "committedDate": "2020-10-08T17:56:36Z", "type": "commit"}, {"oid": "6362b5d55bd8b296ed3297e1b66f0f72174ca8bc", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6362b5d55bd8b296ed3297e1b66f0f72174ca8bc", "message": "fix test", "committedDate": "2020-10-08T17:57:16Z", "type": "commit"}, {"oid": "56a267d65bf061bc476ea49eead324409c055c12", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/56a267d65bf061bc476ea49eead324409c055c12", "message": "address comments. add more info to size limit exception message", "committedDate": "2020-10-08T17:57:18Z", "type": "commit"}, {"oid": "d28653dad9b1dfaf52dd54e011257c37d52c29bd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d28653dad9b1dfaf52dd54e011257c37d52c29bd", "message": "tiny fix", "committedDate": "2020-10-08T18:00:01Z", "type": "forcePushed"}, {"oid": "8efedd87671d0d4241767f72c0a49d1a0bb91a70", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8efedd87671d0d4241767f72c0a49d1a0bb91a70", "message": "remove existence check from getDownloadSize", "committedDate": "2020-10-08T22:18:55Z", "type": "commit"}, {"oid": "8efedd87671d0d4241767f72c0a49d1a0bb91a70", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8efedd87671d0d4241767f72c0a49d1a0bb91a70", "message": "remove existence check from getDownloadSize", "committedDate": "2020-10-08T22:18:55Z", "type": "forcePushed"}]}