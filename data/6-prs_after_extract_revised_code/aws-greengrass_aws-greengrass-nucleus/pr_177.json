{"pr_number": 177, "pr_title": "Fix IPC Lifecycle test, Fix benchmark, do not retry lifecycle on RejectedExecutionException", "pr_createdAt": "2020-04-13T18:18:50Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177", "timeline": [{"oid": "32960add77d84c33086012d839a5ffbaba2e5ba4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32960add77d84c33086012d839a5ffbaba2e5ba4", "message": "Remove test forking, do not retry lifecycle on RejectedExecutionException", "committedDate": "2020-04-13T20:08:07Z", "type": "commit"}, {"oid": "32960add77d84c33086012d839a5ffbaba2e5ba4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32960add77d84c33086012d839a5ffbaba2e5ba4", "message": "Remove test forking, do not retry lifecycle on RejectedExecutionException", "committedDate": "2020-04-13T20:08:07Z", "type": "forcePushed"}, {"oid": "cb5c5f22d0ce07c7c23afa23041fafeb887357de", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cb5c5f22d0ce07c7c23afa23041fafeb887357de", "message": "Fix IPC Lifecycle test", "committedDate": "2020-04-13T20:44:26Z", "type": "commit"}, {"oid": "87b54cf0bd99f3ad24201f5358bdd33a066c2442", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/87b54cf0bd99f3ad24201f5358bdd33a066c2442", "message": "Merge branch 'master' into no-fork", "committedDate": "2020-04-13T20:44:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMTIxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#discussion_r407731216", "bodyText": "Why do we need this change? Waiting for IPCService to be ready is not sufficient?", "author": "hui-yang", "createdAt": "2020-04-13T21:26:25Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java", "diffHunk": "@@ -60,7 +60,7 @@ static void startKernel() throws Exception {\n         // ensure awaitIpcServiceLatch starts\n         CountDownLatch awaitIpcServiceLatch = new CountDownLatch(1);\n         kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n-            if (service.getName().equals(\"IPCService\") && newState.equals(State.RUNNING)) {\n+            if (service.getName().equals(\"ServiceName\") && newState.equals(State.FINISHED)) {", "originalCommit": "87b54cf0bd99f3ad24201f5358bdd33a066c2442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2MTQ2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#discussion_r407761468", "bodyText": "I want to have a well known state, so I start with the service under test which is \"ServiceName\", is running.", "author": "MikeDombo", "createdAt": "2020-04-13T22:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMTIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "cc7487eb090aede6a18a2b421981fb014c408c19", "chunk": "diff --git a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java\nindex d72e35e0..acc4bac8 100644\n--- a/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java\n+++ b/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java\n\n@@ -60,7 +60,7 @@ class IPCServicesTest {\n         // ensure awaitIpcServiceLatch starts\n         CountDownLatch awaitIpcServiceLatch = new CountDownLatch(1);\n         kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n-            if (service.getName().equals(\"ServiceName\") && newState.equals(State.FINISHED)) {\n+            if (service.getName().equals(\"ServiceName\") && newState.equals(State.RUNNING)) {\n                 awaitIpcServiceLatch.countDown();\n             }\n         });\n"}}, {"oid": "b043abb65405a770e540296089820809cbf05ecb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b043abb65405a770e540296089820809cbf05ecb", "message": "Fix benchmark for dependency resolution", "committedDate": "2020-04-13T21:57:33Z", "type": "commit"}, {"oid": "cc7487eb090aede6a18a2b421981fb014c408c19", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cc7487eb090aede6a18a2b421981fb014c408c19", "message": "Fix ordering of IPC lifecycle changes", "committedDate": "2020-04-13T22:39:52Z", "type": "commit"}, {"oid": "2ef84b8c7d6eaef568d93f2a712b6fe7a5d061a5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2ef84b8c7d6eaef568d93f2a712b6fe7a5d061a5", "message": "Fix PMD issues", "committedDate": "2020-04-13T22:44:44Z", "type": "commit"}, {"oid": "e303af677675494c4f4cc111786ebbb153aa1811", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e303af677675494c4f4cc111786ebbb153aa1811", "message": "Rename DeploymentTaskIntegrationTest", "committedDate": "2020-04-14T00:46:39Z", "type": "commit"}, {"oid": "e303af677675494c4f4cc111786ebbb153aa1811", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e303af677675494c4f4cc111786ebbb153aa1811", "message": "Rename DeploymentTaskIntegrationTest", "committedDate": "2020-04-14T00:46:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjAzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#discussion_r407802039", "bodyText": "Can there be other exception?", "author": "ShirleyZheng92", "createdAt": "2020-04-14T00:51:30Z", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -106,35 +107,45 @@ public LifecycleGenericResponse listenToStateChanges(LifecycleListenRequest life\n         return LifecycleGenericResponse.builder().status(LifecycleResponseStatus.Success).build();\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidGettingFutureWithoutTimeout\")\n     private BiConsumer<State, State> sendStateUpdateToListener(LifecycleListenRequest listenRequest,\n                                                                ConnectionContext context) {\n         return (oldState, newState) -> {\n-            executor.execute(() -> {\n-                // Synchronize on context so that we only try to send 1 update at a time to a given client\n-                synchronized (context) {\n-                    StateTransitionEvent stateTransitionEvent =\n-                            StateTransitionEvent.builder().newState(newState.toString()).oldState(oldState.toString())\n-                                    .service(listenRequest.getServiceName()).build();\n-\n-                    log.info(\"Pushing state change notification to {} from {} to {}\",\n-                            listenRequest.getServiceName(), oldState, newState);\n-                    try {\n-                        ApplicationMessage applicationMessage =\n-                                ApplicationMessage.builder().version(LifecycleImpl.API_VERSION)\n-                                        .opCode(LifecycleClientOpCodes.STATE_TRANSITION.ordinal())\n-                                        .payload(IPCUtil.encode(stateTransitionEvent)).build();\n-                        // TODO: Add timeout and retry to make sure the client got the request. https://sim.amazon.com/issues/P32541289\n+            StateTransitionEvent stateTransitionEvent =\n+                    StateTransitionEvent.builder().newState(newState.toString()).oldState(oldState.toString())\n+                            .service(listenRequest.getServiceName()).build();\n+\n+            log.info(\"Pushing state change notification to {} from {} to {}\",\n+                    listenRequest.getServiceName(), oldState, newState);\n+            try {\n+                ApplicationMessage applicationMessage =\n+                        ApplicationMessage.builder().version(LifecycleImpl.API_VERSION)\n+                                .opCode(LifecycleClientOpCodes.STATE_TRANSITION.ordinal())\n+                                .payload(IPCUtil.encode(stateTransitionEvent)).build();\n+                // TODO: Add timeout and retry to make sure the client got the request. https://sim.amazon.com/issues/P32541289\n+                Future<FrameReader.Message> fut =\n                         context.serverPush(BuiltInServiceDestinationCode.LIFECYCLE.getValue(),\n-                                new FrameReader.Message(applicationMessage.toByteArray())).get();\n+                                new FrameReader.Message(applicationMessage.toByteArray()));\n+\n+                // call the blocking \"get\" in a separate thread so we don't block the publish queue\n+                executor.execute(() -> {\n+                    try {\n+                        fut.get();\n                         // TODO: Check the response message and make sure it was successful. https://sim.amazon.com/issues/P32541289\n-                    } catch (IOException | InterruptedException | ExecutionException e) {\n+                    } catch (InterruptedException | ExecutionException e) {", "originalCommit": "e303af677675494c4f4cc111786ebbb153aa1811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjQwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#discussion_r407802408", "bodyText": "No, any exception would be caught within the execution exception", "author": "MikeDombo", "createdAt": "2020-04-14T00:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjAzOQ=="}], "type": "inlineReview", "revised_code": null}]}