{"pr_number": 384, "pr_title": "Implement async event tasks.", "pr_createdAt": "2020-11-05T22:54:24Z", "pr_url": "https://github.com/VelocityPowered/Velocity/pull/384", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyODM2Mg==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518428362", "bodyText": "Why only as a lambda?", "author": "kashike", "createdAt": "2020-11-05T23:17:10Z", "path": "api/src/main/java/com/velocitypowered/api/event/AsyncTask.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.velocitypowered.api.event;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+@FunctionalInterface\n+public interface AsyncTask {\n+\n+  /**\n+   * Runs the task.\n+   *\n+   * @deprecated Should only be implemented as a lambda and called internally.", "originalCommit": "dafc5d2127686b1b1540362fe260b70391101930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d810241b742536ed191014e1bec8aa57941efd1", "chunk": "diff --git a/api/src/main/java/com/velocitypowered/api/event/AsyncTask.java b/api/src/main/java/com/velocitypowered/api/event/AsyncTask.java\ndeleted file mode 100644\nindex 85492e93..00000000\n--- a/api/src/main/java/com/velocitypowered/api/event/AsyncTask.java\n+++ /dev/null\n\n@@ -1,78 +0,0 @@\n-package com.velocitypowered.api.event;\n-\n-import static java.util.Objects.requireNonNull;\n-\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Consumer;\n-\n-@FunctionalInterface\n-public interface AsyncTask {\n-\n-  /**\n-   * Runs the task.\n-   *\n-   * @deprecated Should only be implemented as a lambda and called internally.\n-   */\n-  @Deprecated\n-  void run();\n-\n-  @FunctionalInterface\n-  interface WithContinuation extends AsyncTask {\n-\n-    @Deprecated\n-    @Override\n-    default void run() {\n-      throw new UnsupportedOperationException();\n-    }\n-\n-    /**\n-     * Runs this async task with the given continuation.\n-     *\n-     * @param continuation The continuation\n-     */\n-    void run(Continuation continuation);\n-  }\n-\n-  /**\n-   * Creates an {@link AsyncTask} from the given {@code task}.\n-   *\n-   * @param task The task\n-   * @return The async\n-   */\n-  static AsyncTask of(final Runnable task) {\n-    requireNonNull(task, \"task\");\n-    return task::run;\n-  }\n-\n-  /**\n-   * Creates an {@link AsyncTask} for which the {@link Continuation}\n-   * needs to be notified manually.\n-   *\n-   * @param task The task to execute\n-   * @return The async task\n-   */\n-  static AsyncTask.WithContinuation withContinuation(final Consumer<Continuation> task) {\n-    requireNonNull(task, \"task\");\n-    return task::accept;\n-  }\n-\n-  /**\n-   * Creates an {@link AsyncTask} for the given {@link CompletableFuture}. The\n-   * handlers will continue after the future is completed.\n-   *\n-   * @param future The task to wait for\n-   * @return The async task\n-   */\n-  static AsyncTask.WithContinuation resumeWhenComplete(final CompletableFuture<?> future) {\n-    requireNonNull(future, \"future\");\n-    return continuation -> future.whenComplete((result, cause) -> {\n-      try {\n-        if (cause != null) {\n-          throw new RuntimeException(cause);\n-        }\n-      } finally {\n-        continuation.resume();\n-      }\n-    });\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518431966", "bodyText": "AsyncSubscriber or something, maybe?", "author": "kashike", "createdAt": "2020-11-05T23:26:55Z", "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.velocitypowered.api.event;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an event handler method as async. By default are events handled on the\n+ * network task executor, using this annotations performs them on an asynchronous\n+ * task executor.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface Async {", "originalCommit": "dafc5d2127686b1b1540362fe260b70391101930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1NDAyNg==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518454026", "bodyText": "In the code prototype he showed off on Discord, @Async is meant to be combined with @Subscribe.", "author": "astei", "createdAt": "2020-11-06T00:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwOTU5OA==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518509598", "bodyText": "Sure, but Async is a bit vague here, especially when working with certain other libraries that have classes named the same.", "author": "kashike", "createdAt": "2020-11-06T03:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3MjkzNQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518772935", "bodyText": "I don't think @Async will be a big problem, you're more likely to confuse the guava Subscribe with the velocity one with the current libraries, I don't see another Async class or annotation", "author": "Cybermaxke", "createdAt": "2020-11-06T14:07:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1NDQ4OA==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r519154488", "bodyText": "Perhaps then Velocity's annotation should just get a new async boolean property?", "author": "Proximyst", "createdAt": "2020-11-07T08:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzNzMyNg==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r520537326", "bodyText": "Personally I prefer @Async, but an async property is also an option. @astei what do you prefer?", "author": "Cybermaxke", "createdAt": "2020-11-10T12:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU1NTg1Ng==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r520555856", "bodyText": "async property gets my vote.", "author": "kashike", "createdAt": "2020-11-10T13:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MDU1MQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r520560551", "bodyText": "async property", "author": "MrIvanPlays", "createdAt": "2020-11-10T13:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b04d5de14126d7d56a8b29030be025933e750a6d", "chunk": "diff --git a/api/src/main/java/com/velocitypowered/api/event/Async.java b/api/src/main/java/com/velocitypowered/api/event/Async.java\ndeleted file mode 100644\nindex a7e78c5d..00000000\n--- a/api/src/main/java/com/velocitypowered/api/event/Async.java\n+++ /dev/null\n\n@@ -1,17 +0,0 @@\n-package com.velocitypowered.api.event;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-/**\n- * Marks an event handler method as async. By default are events handled on the\n- * network task executor, using this annotations performs them on an asynchronous\n- * task executor.\n- */\n-@Retention(RetentionPolicy.RUNTIME)\n-@Target(ElementType.METHOD)\n-public @interface Async {\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMzYyMw==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518433623", "bodyText": "I'm not a huge fan of the name AsyncTask. I don't have another good name for this - perhaps EventTask or even EventContinuation would be better (and then rename AsyncTask.WithContinuation to EventContinuation.Deferred).", "author": "astei", "createdAt": "2020-11-05T23:31:25Z", "path": "api/src/main/java/com/velocitypowered/api/event/AsyncTask.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.velocitypowered.api.event;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+@FunctionalInterface\n+public interface AsyncTask {", "originalCommit": "dafc5d2127686b1b1540362fe260b70391101930", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjU0NQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518436545", "bodyText": "I'm also not a big fan of the current naming, but I haven't found a good name to actually represent what is does. DeferredEventTask (DeferredTask) could be another option?", "author": "Cybermaxke", "createdAt": "2020-11-05T23:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMzYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MzY2Ng==", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518453666", "bodyText": "It needs to include the word Event as otherwise it could be confused with the scheduler. I think DeferredEventTask is fine.", "author": "astei", "createdAt": "2020-11-06T00:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMzYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "1d810241b742536ed191014e1bec8aa57941efd1", "chunk": "diff --git a/api/src/main/java/com/velocitypowered/api/event/AsyncTask.java b/api/src/main/java/com/velocitypowered/api/event/AsyncTask.java\ndeleted file mode 100644\nindex 85492e93..00000000\n--- a/api/src/main/java/com/velocitypowered/api/event/AsyncTask.java\n+++ /dev/null\n\n@@ -1,78 +0,0 @@\n-package com.velocitypowered.api.event;\n-\n-import static java.util.Objects.requireNonNull;\n-\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Consumer;\n-\n-@FunctionalInterface\n-public interface AsyncTask {\n-\n-  /**\n-   * Runs the task.\n-   *\n-   * @deprecated Should only be implemented as a lambda and called internally.\n-   */\n-  @Deprecated\n-  void run();\n-\n-  @FunctionalInterface\n-  interface WithContinuation extends AsyncTask {\n-\n-    @Deprecated\n-    @Override\n-    default void run() {\n-      throw new UnsupportedOperationException();\n-    }\n-\n-    /**\n-     * Runs this async task with the given continuation.\n-     *\n-     * @param continuation The continuation\n-     */\n-    void run(Continuation continuation);\n-  }\n-\n-  /**\n-   * Creates an {@link AsyncTask} from the given {@code task}.\n-   *\n-   * @param task The task\n-   * @return The async\n-   */\n-  static AsyncTask of(final Runnable task) {\n-    requireNonNull(task, \"task\");\n-    return task::run;\n-  }\n-\n-  /**\n-   * Creates an {@link AsyncTask} for which the {@link Continuation}\n-   * needs to be notified manually.\n-   *\n-   * @param task The task to execute\n-   * @return The async task\n-   */\n-  static AsyncTask.WithContinuation withContinuation(final Consumer<Continuation> task) {\n-    requireNonNull(task, \"task\");\n-    return task::accept;\n-  }\n-\n-  /**\n-   * Creates an {@link AsyncTask} for the given {@link CompletableFuture}. The\n-   * handlers will continue after the future is completed.\n-   *\n-   * @param future The task to wait for\n-   * @return The async task\n-   */\n-  static AsyncTask.WithContinuation resumeWhenComplete(final CompletableFuture<?> future) {\n-    requireNonNull(future, \"future\");\n-    return continuation -> future.whenComplete((result, cause) -> {\n-      try {\n-        if (cause != null) {\n-          throw new RuntimeException(cause);\n-        }\n-      } finally {\n-        continuation.resume();\n-      }\n-    });\n-  }\n-}\n"}}, {"oid": "1d810241b742536ed191014e1bec8aa57941efd1", "url": "https://github.com/VelocityPowered/Velocity/commit/1d810241b742536ed191014e1bec8aa57941efd1", "message": "Untargeted handlers should be cached weakly. Other small changes.", "committedDate": "2020-11-06T17:32:23Z", "type": "forcePushed"}, {"oid": "b04d5de14126d7d56a8b29030be025933e750a6d", "url": "https://github.com/VelocityPowered/Velocity/commit/b04d5de14126d7d56a8b29030be025933e750a6d", "message": "Implement async event tasks.\n\nEvents will now only be handled by an async executor if necessary. This should improve performance for lightweight listeners.", "committedDate": "2020-12-15T11:48:32Z", "type": "commit"}, {"oid": "d0a61e87043031c8ce82d42cb9781a8e8c5eb28b", "url": "https://github.com/VelocityPowered/Velocity/commit/d0a61e87043031c8ce82d42cb9781a8e8c5eb28b", "message": "Update java version. Switch to caffeine cache to allow null values.", "committedDate": "2020-12-15T12:05:32Z", "type": "commit"}, {"oid": "d0a61e87043031c8ce82d42cb9781a8e8c5eb28b", "url": "https://github.com/VelocityPowered/Velocity/commit/d0a61e87043031c8ce82d42cb9781a8e8c5eb28b", "message": "Update java version. Switch to caffeine cache to allow null values.", "committedDate": "2020-12-15T12:05:32Z", "type": "forcePushed"}, {"oid": "2705eba5538499f0af59ddc4451e523f6d8ab145", "url": "https://github.com/VelocityPowered/Velocity/commit/2705eba5538499f0af59ddc4451e523f6d8ab145", "message": "Small cleanup.", "committedDate": "2020-12-15T13:00:10Z", "type": "commit"}]}