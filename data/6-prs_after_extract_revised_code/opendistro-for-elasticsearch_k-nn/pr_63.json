{"pr_number": 63, "pr_title": "fixed cb", "pr_createdAt": "2020-03-09T18:57:22Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63", "timeline": [{"oid": "01c630ca6710450fc80745b1519e8e30ec7b062a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/01c630ca6710450fc80745b1519e8e30ec7b062a", "message": "fixed cb", "committedDate": "2020-03-09T18:47:24Z", "type": "commit"}, {"oid": "ab6cf6fc52a553469f0c7c2571ade8525864ec6c", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ab6cf6fc52a553469f0c7c2571ade8525864ec6c", "message": "added todo", "committedDate": "2020-03-09T20:58:37Z", "type": "commit"}, {"oid": "58b17f37786984a9325426894f386b29e3830380", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/58b17f37786984a9325426894f386b29e3830380", "message": "updated comment", "committedDate": "2020-03-09T21:21:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NDk5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#discussion_r389994997", "bodyText": "Nit: Add comment to mention seconds?", "author": "vamshin", "createdAt": "2020-03-09T22:24:59Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreaker.java", "diffHunk": "@@ -35,6 +36,7 @@\n  */\n public class KNNCircuitBreaker {\n     private static Logger logger = LogManager.getLogger(KNNCircuitBreaker.class);\n+    public static int CB_TIME_INTERVAL = 2*60;\n ", "originalCommit": "58b17f37786984a9325426894f386b29e3830380", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyOTUxNA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#discussion_r390029514", "bodyText": "Will add", "author": "jmazanec15", "createdAt": "2020-03-10T00:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NDk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreaker.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreaker.java\nindex c85d9e2..38f1095 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreaker.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreaker.java\n\n@@ -36,7 +36,7 @@ import java.util.List;\n  */\n public class KNNCircuitBreaker {\n     private static Logger logger = LogManager.getLogger(KNNCircuitBreaker.class);\n-    public static int CB_TIME_INTERVAL = 2*60;\n+    public static int CB_TIME_INTERVAL = 2*60; // seconds\n \n     private static KNNCircuitBreaker INSTANCE;\n     private ThreadPool threadPool;\n"}}, {"oid": "9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc", "message": "cleaned up", "committedDate": "2020-03-10T00:37:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5OTg0NA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#discussion_r390599844", "bodyText": "Do we still need to sleep here?", "author": "vamshin", "createdAt": "2020-03-10T20:45:28Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.action.bulk.BackoffPolicy;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNCircuitBreaker.CB_TIME_INTERVAL;\n+\n+/**\n+ * Integration tests to test Circuit Breaker functionality\n+ */\n+public class KNNCircuitBreakerIT extends BaseKNNIntegTestIT {\n+    /**\n+     * Utility function that sets the cb limit low enough that ingesting 20 documents trips it\n+     */\n+    private void tripCb() throws Exception {\n+        // Make sure that Cb is intially not tripped\n+        assertFalse(isCbTripped());\n+\n+        // Set circuit breaker limit to 1 KB\n+        updateClusterSettings(\"knn.memory.circuit_breaker.limit\", \"1kb\");\n+\n+        // Create Single Shard Index so that all data is hosted on a single node\n+        Settings settings = Settings.builder()\n+                .put(\"number_of_shards\", 1)\n+                .put(\"number_of_replicas\", 0)\n+                .put(\"index.knn\", true)\n+                .build();\n+        createKnnIndex(INDEX_NAME, settings, createKnnIndexMapping(FIELD_NAME, 2));\n+\n+        // Index 20 dummy documents\n+        Float[] vector = {1.3f, 2.2f};\n+        for (int i = 0; i < 10; i++) {\n+            addKnnDoc(INDEX_NAME, Integer.toString(i), FIELD_NAME, vector);\n+        }\n+\n+        // Execute search\n+        float[] qvector = {1.9f, 2.4f};\n+        int k = 10;\n+        searchKNNIndex(INDEX_NAME, new KNNQueryBuilder(FIELD_NAME, qvector, k), k);\n+\n+        // Assert that Cb get triggered\n+        assertTrue(isCbTripped());\n+    }\n+\n+    public boolean isCbTripped() throws Exception {\n+        Response response = getKnnStats(Collections.emptyList(),\n+                Collections.singletonList(\"circuit_breaker_triggered\"));\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        Map<String, Object> clusterStats = parseClusterStatsResponse(responseBody);\n+        return (Boolean) clusterStats.get(\"circuit_breaker_triggered\");\n+    }\n+\n+    public void testCbTripped() throws Exception {\n+        tripCb();\n+    }\n+\n+    public void testCbUntrips() throws Exception {\n+        updateClusterSettings(\"knn.circuit_breaker.triggered\", \"true\");\n+        //TODO: Attempt to find a better way to trigger runnable than waiting 2 minutes for it to finish\n+        Thread.sleep(CB_TIME_INTERVAL*1000);\n+        assertFalse(isCbTripped());", "originalCommit": "9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NDc3MA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#discussion_r391084770", "bodyText": "Good catch. I must have forgotten to remove that", "author": "jmazanec15", "createdAt": "2020-03-11T16:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5OTg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "b6eeb3835bfe9edf9de22edba3cc1a70f1bfc082", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java b/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java\nindex 7f7b926..02c4c9b 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java\n\n@@ -16,13 +16,10 @@\n package com.amazon.opendistroforelasticsearch.knn.index;\n \n import org.apache.http.util.EntityUtils;\n-import org.elasticsearch.action.bulk.BackoffPolicy;\n import org.elasticsearch.client.Response;\n import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.common.unit.TimeValue;\n \n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.Map;\n \n import static com.amazon.opendistroforelasticsearch.knn.index.KNNCircuitBreaker.CB_TIME_INTERVAL;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMDM3OA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#discussion_r390600378", "bodyText": "Looks like BackoffPolicy takes care of waiting. We can remove these assertions?", "author": "vamshin", "createdAt": "2020-03-10T20:46:25Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import org.apache.http.util.EntityUtils;\n+import org.elasticsearch.action.bulk.BackoffPolicy;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNCircuitBreaker.CB_TIME_INTERVAL;\n+\n+/**\n+ * Integration tests to test Circuit Breaker functionality\n+ */\n+public class KNNCircuitBreakerIT extends BaseKNNIntegTestIT {\n+    /**\n+     * Utility function that sets the cb limit low enough that ingesting 20 documents trips it\n+     */\n+    private void tripCb() throws Exception {\n+        // Make sure that Cb is intially not tripped\n+        assertFalse(isCbTripped());\n+\n+        // Set circuit breaker limit to 1 KB\n+        updateClusterSettings(\"knn.memory.circuit_breaker.limit\", \"1kb\");\n+\n+        // Create Single Shard Index so that all data is hosted on a single node\n+        Settings settings = Settings.builder()\n+                .put(\"number_of_shards\", 1)\n+                .put(\"number_of_replicas\", 0)\n+                .put(\"index.knn\", true)\n+                .build();\n+        createKnnIndex(INDEX_NAME, settings, createKnnIndexMapping(FIELD_NAME, 2));\n+\n+        // Index 20 dummy documents\n+        Float[] vector = {1.3f, 2.2f};\n+        for (int i = 0; i < 10; i++) {\n+            addKnnDoc(INDEX_NAME, Integer.toString(i), FIELD_NAME, vector);\n+        }\n+\n+        // Execute search\n+        float[] qvector = {1.9f, 2.4f};\n+        int k = 10;\n+        searchKNNIndex(INDEX_NAME, new KNNQueryBuilder(FIELD_NAME, qvector, k), k);\n+\n+        // Assert that Cb get triggered\n+        assertTrue(isCbTripped());\n+    }\n+\n+    public boolean isCbTripped() throws Exception {\n+        Response response = getKnnStats(Collections.emptyList(),\n+                Collections.singletonList(\"circuit_breaker_triggered\"));\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        Map<String, Object> clusterStats = parseClusterStatsResponse(responseBody);\n+        return (Boolean) clusterStats.get(\"circuit_breaker_triggered\");\n+    }\n+\n+    public void testCbTripped() throws Exception {\n+        tripCb();\n+    }\n+\n+    public void testCbUntrips() throws Exception {\n+        updateClusterSettings(\"knn.circuit_breaker.triggered\", \"true\");\n+        //TODO: Attempt to find a better way to trigger runnable than waiting 2 minutes for it to finish\n+        Thread.sleep(CB_TIME_INTERVAL*1000);\n+        assertFalse(isCbTripped());", "originalCommit": "9c8190d469aea5a7b87c6fb8d1c0fda8baa241cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NTQ1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/63#discussion_r391085453", "bodyText": "Yes. Will update.", "author": "jmazanec15", "createdAt": "2020-03-11T16:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMDM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "b6eeb3835bfe9edf9de22edba3cc1a70f1bfc082", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java b/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java\nindex 7f7b926..02c4c9b 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNCircuitBreakerIT.java\n\n@@ -16,13 +16,10 @@\n package com.amazon.opendistroforelasticsearch.knn.index;\n \n import org.apache.http.util.EntityUtils;\n-import org.elasticsearch.action.bulk.BackoffPolicy;\n import org.elasticsearch.client.Response;\n import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.common.unit.TimeValue;\n \n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.Map;\n \n import static com.amazon.opendistroforelasticsearch.knn.index.KNNCircuitBreaker.CB_TIME_INTERVAL;\n"}}, {"oid": "b6eeb3835bfe9edf9de22edba3cc1a70f1bfc082", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/b6eeb3835bfe9edf9de22edba3cc1a70f1bfc082", "message": "stopped using backoff policy", "committedDate": "2020-03-11T16:29:40Z", "type": "commit"}]}