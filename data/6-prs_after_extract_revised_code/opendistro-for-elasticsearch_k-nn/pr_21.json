{"pr_number": 21, "pr_title": "KNN Codec versioning support for backward compatibility", "pr_createdAt": "2020-01-23T20:40:41Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/21", "timeline": [{"oid": "b857352fc123d222d4d9a2e7671dd6ccfa11bae8", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/b857352fc123d222d4d9a2e7671dd6ccfa11bae8", "message": "opendistro-1.3 support with ES 7.3.2", "committedDate": "2020-01-23T07:31:09Z", "type": "commit"}, {"oid": "5a823292f0acaefe897a1d61bdcee402b505c613", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/5a823292f0acaefe897a1d61bdcee402b505c613", "message": "opendistro-1.3 support with ES 7.3.2", "committedDate": "2020-01-23T07:35:17Z", "type": "commit"}, {"oid": "be234e05ace24f4b2aeb6cc065da2c808a12770d", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/be234e05ace24f4b2aeb6cc065da2c808a12770d", "message": "opendistro-1.3 support with ES 7.3.2", "committedDate": "2020-01-23T07:40:17Z", "type": "commit"}, {"oid": "22dd85e39efc46ab0d8527cddab2c11d7808130e", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/22dd85e39efc46ab0d8527cddab2c11d7808130e", "message": "opendistro-1.3 support. Incorporated comments", "committedDate": "2020-01-23T18:55:05Z", "type": "commit"}, {"oid": "090e8b5dbb9c3772c11635227ab7dfc0d5729609", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/090e8b5dbb9c3772c11635227ab7dfc0d5729609", "message": "KNN Codec versioning support", "committedDate": "2020-01-23T20:28:56Z", "type": "commit"}, {"oid": "fa3cb180b84e4e2d9b12f2e4c35576e03772fd29", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/fa3cb180b84e4e2d9b12f2e4c35576e03772fd29", "message": "KNN codec versioning support", "committedDate": "2020-01-23T20:39:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NTE2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/21#discussion_r370345167", "bodyText": "Looks like leftover merge conflict", "author": "jmazanec15", "createdAt": "2020-01-23T20:45:41Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java", "diffHunk": "@@ -126,6 +128,7 @@ public void testCorrectStatsReturned() throws IOException {\n      * @throws IOException throws IOException\n      */\n     public void testStatsValueCheck() throws IOException {\n+// <<<<<<< HEAD", "originalCommit": "fa3cb180b84e4e2d9b12f2e4c35576e03772fd29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0ODk2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/21#discussion_r370348969", "bodyText": "fixed", "author": "vamshin", "createdAt": "2020-01-23T20:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NTE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "47078f0ed28966ac485bdb005509b8066addb503", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java b/src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java\nindex da2c15d..7900c71 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java\n\n@@ -128,7 +128,6 @@ public class RestKNNStatsHandlerIT extends ESRestTestCase {\n      * @throws IOException throws IOException\n      */\n     public void testStatsValueCheck() throws IOException {\n-// <<<<<<< HEAD\n         // Setup request for stat calls\n         Request statsRequest = new Request(\n                 \"GET\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NTM1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/21#discussion_r370345355", "bodyText": "Why is this section commented out?", "author": "jmazanec15", "createdAt": "2020-01-23T20:46:04Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java", "diffHunk": "@@ -232,6 +235,118 @@ public void testStatsValueCheck() throws IOException {\n         assertTrue(\"Miss and hit count does not return expected\",\n                 (Integer) metricMap2.get(StatNames.HIT_COUNT.getName()) == initialHitCount + 1 &&\n                         (Integer) metricMap2.get(StatNames.MISS_COUNT.getName()) == initialMissCount + 1);\n+//=======", "originalCommit": "fa3cb180b84e4e2d9b12f2e4c35576e03772fd29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0ODg1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/21#discussion_r370348852", "bodyText": "Fixed", "author": "vamshin", "createdAt": "2020-01-23T20:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NTM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "47078f0ed28966ac485bdb005509b8066addb503", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java b/src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java\nindex da2c15d..7900c71 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/knn/plugin/action/RestKNNStatsHandlerIT.java\n\n@@ -235,120 +234,9 @@ public class RestKNNStatsHandlerIT extends ESRestTestCase {\n         assertTrue(\"Miss and hit count does not return expected\",\n                 (Integer) metricMap2.get(StatNames.HIT_COUNT.getName()) == initialHitCount + 1 &&\n                         (Integer) metricMap2.get(StatNames.MISS_COUNT.getName()) == initialMissCount + 1);\n-//=======\n-\n-\n-//        try {\n-//            // Setup request for stat calls\n-//            Request statsRequest = new Request(\n-//                    \"GET\",\n-//                    KNNPlugin.KNN_BASE_URI + \"/stats\"\n-//            );\n-//\n-//            // Get initial stats as baseline\n-//            String statsResponseBody = makeRequestAndReturnResponseBody(statsRequest);\n-//            Map<String, Object> responseMap0 = createParser(XContentType.JSON.xContent(), statsResponseBody).map();\n-//            assertNotNull(\"Stats response 0 is null\", responseMap0);\n-//\n-//            @SuppressWarnings(\"unchecked\")\n-//            Map<String, Object> nodesResponseMap0 = (HashMap<String, Object>)responseMap0.get(\"nodes\");\n-//            assertNotNull(\"Stats node response 0 is null\", nodesResponseMap0);\n-//\n-//            Object[] keys = nodesResponseMap0.keySet().toArray();\n-//            assertTrue(\"No node keys returned\", keys.length > 0);\n-//            String key = (String) keys[0];\n-//\n-//            @SuppressWarnings(\"unchecked\")\n-//            HashMap<String, Object> metricMap0 = (HashMap<String, Object>) nodesResponseMap0.get(key);\n-//            Integer initialHitCount = (Integer) metricMap0.get(\"hitCount\");\n-//            Integer initialMissCount = (Integer) metricMap0.get(\"missCount\");\n-//\n-//            // Setup index\n-//            Settings settings = Settings.builder()\n-//                                        .put(\"number_of_shards\", 1)\n-//                                        .put(\"number_of_replicas\", 0)\n-//                                        .put(\"index.knn\", true)\n-//                                        .build();\n-//            String index = \"testindex\";\n-//            createIndex(index, settings);\n-//\n-//            // Put KNN mapping\n-//            Request mappingRequest = new Request(\n-//                    \"PUT\",\n-//                    \"/\" + index + \"/_mapping\"\n-//            );\n-//\n-//            XContentBuilder builder = XContentFactory.jsonBuilder().startObject()\n-//                                                     .startObject(\"properties\")\n-//                                                     .startObject(\"my_vector\")\n-//                                                     .field(\"type\", \"knn_vector\")\n-//                                                     .field(\"dimension\", \"2\")\n-//                                                     .endObject()\n-//                                                     .endObject()\n-//                                                     .endObject();\n-//\n-//            mappingRequest.setJsonEntity(Strings.toString(builder));\n-//            Response response = client().performRequest(mappingRequest);\n-//            assertEquals(mappingRequest.getEndpoint() + \": failed\", RestStatus.OK, RestStatus.fromCode(response.getStatusLine().getStatusCode()));\n-//\n-//            // Index test document\n-//            Request indexRequest = new Request(\n-//                    \"POST\",\n-//                    \"/\" + index + \"/_doc/1?refresh=true\" // refresh=true ensures document is searchable immediately after index\n-//            );\n-//\n-//            float[] vector = {6.0f, 6.0f};\n-//\n-//            builder = XContentFactory.jsonBuilder().startObject()\n-//                                     .field(\"my_vector\", vector)\n-//                                     .endObject();\n-//\n-//            indexRequest.setJsonEntity(Strings.toString(builder));\n-//\n-//            response = client().performRequest(indexRequest);\n-//            assertEquals(indexRequest.getEndpoint() + \": failed\", RestStatus.CREATED, RestStatus.fromCode(response.getStatusLine().getStatusCode()));\n-//\n-//            // First search: Ensure that misses=1\n-//            response = makeGenericKnnQuery(index, vector, 1);\n-//            assertEquals(\"knn query failed\", RestStatus.OK, RestStatus.fromCode(response.getStatusLine().getStatusCode()));\n-//\n-//            statsResponseBody = makeRequestAndReturnResponseBody(statsRequest);\n-//            Map<String, Object> responseMap1 = createParser(XContentType.JSON.xContent(), statsResponseBody).map();\n-//            assertNotNull(\"Stats response 1 is null\", responseMap1);\n-//\n-//            @SuppressWarnings(\"unchecked\")\n-//            Map<String, Object> nodesResponseMap1 = (HashMap<String, Object>)responseMap1.get(\"nodes\");\n-//            assertNotNull(\"Stats node response 1 is null\", nodesResponseMap1);\n-//\n-//            @SuppressWarnings(\"unchecked\")\n-//            HashMap<String, Object> metricMap1 = (HashMap<String, Object>) nodesResponseMap1.get(key);\n-//            assertNotNull(\"Stats metric map response 1 is null\", metricMap1);\n-//            assertTrue(\"Miss and hit count does not return expected\",  (Integer) metricMap1.get(\"missCount\") == initialMissCount + 1\n-//                    && metricMap1.get(\"hitCount\") == initialHitCount);\n-//\n-//            // Second search: Ensure that hits=1\n-//            response = makeGenericKnnQuery(index, vector, 1);\n-//            assertEquals(\"knn query failed\", RestStatus.OK, RestStatus.fromCode(response.getStatusLine().getStatusCode()));\n-//\n-//            statsResponseBody = makeRequestAndReturnResponseBody(statsRequest);\n-//            Map<String, Object> responseMap2 = createParser(XContentType.JSON.xContent(), statsResponseBody).map();\n-//            assertNotNull(\"Stats response 2 is null\", responseMap2);\n-//\n-//            @SuppressWarnings(\"unchecked\")\n-//            Map<String, Object> nodesResponseMap2 = (HashMap<String, Object>)responseMap2.get(\"nodes\");\n-//            assertNotNull(\"Stats node response 2 is null\", nodesResponseMap2);\n-//\n-//            @SuppressWarnings(\"unchecked\")\n-//            HashMap<String, Object> metricMap2 = (HashMap<String, Object>) nodesResponseMap2.get(key);\n-//            assertNotNull(\"Stats metric map response 2 is null\", metricMap2);\n-//            assertTrue(\"Miss and hit count does not return expected\", (Integer) metricMap2.get(\"hitCount\") == initialHitCount + 1\n-//                    && (Integer) metricMap2.get(\"missCount\") == initialMissCount + 1);\n-//        } catch (Exception ex) {\n-//            fail(\"Exception not expected as valid index arguments passed \" + ex);\n-//        }\n-// >>>>>>> codec-version\n     }\n \n+\n     /**\n      *  Test checks that handler correctly returns selected metrics\n      * @throws IOException throws IOException\n"}}, {"oid": "47078f0ed28966ac485bdb005509b8066addb503", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/47078f0ed28966ac485bdb005509b8066addb503", "message": "removed comments in test", "committedDate": "2020-01-23T20:52:57Z", "type": "commit"}]}