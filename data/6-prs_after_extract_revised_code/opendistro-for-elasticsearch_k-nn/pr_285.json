{"pr_number": 285, "pr_title": "Adding support for FAISS JNI", "pr_createdAt": "2020-12-25T07:51:55Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285", "timeline": [{"oid": "1c3d3731a2d9dae90b02d76af314b026b8847572", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1c3d3731a2d9dae90b02d76af314b026b8847572", "message": "1. New Branch Support Faiss\n2. Right Now Only Support JNI", "committedDate": "2020-12-25T07:03:43Z", "type": "commit"}, {"oid": "6066a658a8681a28216741c6614e7e2ae9ab4ac9", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/6066a658a8681a28216741c6614e7e2ae9ab4ac9", "message": "1. add submmodule faiss", "committedDate": "2020-12-25T07:28:13Z", "type": "commit"}, {"oid": "5165e70bf618244e57ac0079f831cacd266fd948", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/5165e70bf618244e57ac0079f831cacd266fd948", "message": "1. External Submodule", "committedDate": "2020-12-25T07:30:12Z", "type": "commit"}, {"oid": "fb10190e89783dbd8faaa169af6b01608b5084df", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/fb10190e89783dbd8faaa169af6b01608b5084df", "message": "Update CMakeLists.txt\n\nmodified make without clang", "committedDate": "2020-12-25T08:04:18Z", "type": "commit"}, {"oid": "54cf6a52e1511d7679bdcbdf3055c6f09c2752d9", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/54cf6a52e1511d7679bdcbdf3055c6f09c2752d9", "message": "Update CMakeLists.txt\n\nmodified OPENMP build in CMakeLists.txt", "committedDate": "2020-12-25T08:13:25Z", "type": "commit"}, {"oid": "0f4bdf0fd57cbfa733dd4934da75628bfad895ca", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/0f4bdf0fd57cbfa733dd4934da75628bfad895ca", "message": "1. add knnEngine as a Settings\n2. When Write index and query index, we use knnEngine to verify search in faiss or nmslib", "committedDate": "2020-12-25T11:03:21Z", "type": "commit"}, {"oid": "ab8e950dc2752871e2020125d311d6fbc8ed4dd5", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ab8e950dc2752871e2020125d311d6fbc8ed4dd5", "message": "1. Modified some FIXME", "committedDate": "2020-12-25T11:06:27Z", "type": "commit"}, {"oid": "950e46012de9f67d6830ae2960cf5e70dcededd3", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/950e46012de9f67d6830ae2960cf5e70dcededd3", "message": "Merge pull request #1 from luyuncheng/faiss_withIT\n\nAdd index.knn.knnEngine in the ES Settings. When Write a Segment OR Query Index. It would use this settings to find the knn lib", "committedDate": "2020-12-25T11:11:25Z", "type": "commit"}, {"oid": "22ce60540e4a7eecdc3baae2d03f7ec9f4970cbd", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/22ce60540e4a7eecdc3baae2d03f7ec9f4970cbd", "message": "1. gradle build jni and jniFaiss\n2. almost integTest and unitest PASSED", "committedDate": "2020-12-25T12:35:30Z", "type": "commit"}, {"oid": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1a44194c9439c15bf073e62a0e61137ab5b9a301", "message": "Merge pull request #2 from luyuncheng/faiss_withIT\n\nGradle build jni and jniFaiss", "committedDate": "2020-12-25T12:37:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NDQwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r553574405", "bodyText": "What do you mean by this?", "author": "jmazanec15", "createdAt": "2021-01-07T20:37:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -151,12 +153,22 @@ private void onRemoval(RemovalNotification<String, KNNIndexCacheEntry> removalNo\n      */\n     public KNNIndex getIndex(String key, final String indexName) {\n         try {\n+            //TODO if Type Not consistent", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU2Nzk0OA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r554567948", "bodyText": "when cached an Index, should we verify which engine for this index, and then load the exactly library?", "author": "luyuncheng", "createdAt": "2021-01-10T13:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0Njk3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562946971", "bodyText": "I see. I think we should add a different file extension for faiss graphs as opposed to nmslib graphs. Maybe .faiss_hnsw.", "author": "jmazanec15", "createdAt": "2021-01-22T22:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NDQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d13a7b158352b2be042e011a29dd31233f4c8dd", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\nindex 811cc87..f3d7dae 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n\n@@ -153,22 +151,12 @@ public class KNNIndexCache implements Closeable {\n      */\n     public KNNIndex getIndex(String key, final String indexName) {\n         try {\n-            //TODO if Type Not consistent\n             final KNNIndexCacheEntry knnIndexCacheEntry = cache.get(key, () -> loadIndex(key, indexName));\n             return knnIndexCacheEntry.getKnnIndex();\n         } catch (ExecutionException e) {\n             throw new RuntimeException(e);\n         }\n     }\n-    public KNNFIndex getFIndex(String key, final String indexName) {\n-        try {\n-            //TODO if Type Not consistent\n-            final KNNIndexCacheEntry knnIndexCacheEntry = cache.get(key, () -> loadIndex(key, indexName));\n-            return knnIndexCacheEntry.getKnnFindex();\n-        } catch (ExecutionException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n \n     /**\n      * Loads list of segments for the given index into the cache and returns list of KNNIndex's.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NTA5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r553575099", "bodyText": "I think we should keep nmslib as the default engine.", "author": "jmazanec15", "createdAt": "2021-01-07T20:38:43Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -83,6 +85,7 @@\n     /**\n      * Default setting values\n      */\n+    public static final String INDEX_KNN_DEFAULT_ENGINE = \"Faiss\"; // nmslib, faiss", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU2ODE1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r554568157", "bodyText": "Yes, you are right. this is just for integration test can cover the faiss engine code.", "author": "luyuncheng", "createdAt": "2021-01-10T13:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NTA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d13a7b158352b2be042e011a29dd31233f4c8dd", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\nindex 05f4b37..e71ec71 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n\n@@ -85,7 +83,6 @@ public class KNNSettings {\n     /**\n      * Default setting values\n      */\n-    public static final String INDEX_KNN_DEFAULT_ENGINE = \"Faiss\"; // nmslib, faiss\n     public static final String INDEX_KNN_DEFAULT_SPACE_TYPE = \"l2\";\n     public static final Integer INDEX_KNN_DEFAULT_ALGO_PARAM_M = 16;\n     public static final Integer INDEX_KNN_DEFAULT_ALGO_PARAM_EF_SEARCH = 512;\n"}}, {"oid": "3d13a7b158352b2be042e011a29dd31233f4c8dd", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3d13a7b158352b2be042e011a29dd31233f4c8dd", "message": "Merge pull request #6 from opendistro-for-elasticsearch/master\n\nupstream master merge into local master", "committedDate": "2021-01-11T10:29:28Z", "type": "commit"}, {"oid": "6f7094b5a863adc990875190499d307a31f254bf", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/6f7094b5a863adc990875190499d307a31f254bf", "message": "1. FIXED SpaceType Get From IndexSettings may be EMPTY when a anonymous field create.", "committedDate": "2021-01-11T12:29:33Z", "type": "commit"}, {"oid": "d94881c21e9b6ec5e8855072477f23c24a24d810", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/d94881c21e9b6ec5e8855072477f23c24a24d810", "message": "Update CI.yml", "committedDate": "2021-01-11T12:33:45Z", "type": "commit"}, {"oid": "3dfb7146b168a2a1e62cdda8b7566fcb82c5db81", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3dfb7146b168a2a1e62cdda8b7566fcb82c5db81", "message": "1. Add CI branches for faiss", "committedDate": "2021-01-11T12:35:02Z", "type": "commit"}, {"oid": "3834ea0f56356c4c34571c4a06c3cc21a64fda7e", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3834ea0f56356c4c34571c4a06c3cc21a64fda7e", "message": "1. Update Cmake Files", "committedDate": "2021-01-11T13:47:32Z", "type": "commit"}, {"oid": "a775a3dcb220b34e660ee9f3caf45e8ed7f3c498", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/a775a3dcb220b34e660ee9f3caf45e8ed7f3c498", "message": "OFF GPU", "committedDate": "2021-01-11T13:54:05Z", "type": "commit"}, {"oid": "051a54b1d1452313e74267e93089dab5a200badb", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/051a54b1d1452313e74267e93089dab5a200badb", "message": "OFF PYTHON", "committedDate": "2021-01-11T13:59:55Z", "type": "commit"}, {"oid": "8cd57a7c502f69ac420c878265e33297102f62ba", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/8cd57a7c502f69ac420c878265e33297102f62ba", "message": "delete COMPILER", "committedDate": "2021-01-11T14:05:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555473326", "bodyText": "Having Faiss part of NmsLibVersion class would add confusion. We should probably have dedicated enum class for Faiss versions? Intension of this class is to hold different versions of same library and refer them from this class incase we happen to maintain more than one version of the library because of compatability issues.", "author": "vamshin", "createdAt": "2021-01-12T02:37:48Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java", "diffHunk": "@@ -25,9 +28,17 @@\n         public String indexLibraryVersion() {\n             return \"KNNIndexV2_0_6\";\n         }\n+    },\n+    VFaiss(\"Faiss\") {", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwMDM5OA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555900398", "bodyText": "Nice idea! i'll do it", "author": "luyuncheng", "createdAt": "2021-01-12T16:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM1OTQ1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r556359455", "bodyText": "How about make\nnmslib: KNNIndex_NMSLIB_V2_0_6,\nfaiss: KNNIndex_FAISS_V1_6_4\nlike this:\npublic enum NmsLibVersion {\n    VNMSLIB_208(\"NMSLIB_208\"){\n        @Override\n        public String indexLibraryVersion() {\n            return \"KNNIndex_NMSLIB_V2_0_8\";\n        }\n    },\n    VFAISS_164(\"FAISS_164\") {\n        @Override\n        public String indexLibraryVersion() {\n            return \"KNNIndex_FAISS_V1_6_4\";\n        }\n    };\n}\n\nor do you have any idea to distinguish the name between nmslib and faiss library.", "author": "luyuncheng", "createdAt": "2021-01-13T08:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE2MjY0Ng==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562162646", "bodyText": "We could have new enum class for FAISS that just holds FAISS versions.  Example\npublic enum FAISSLibVersion {\n\n    /**\n     * Latest available faiss version\n     */\n    V_164(\"164\"){\n        @Override\n        public String indexLibraryVersion() {\n            return \"KNNIndexV2_0_11\";\n        }\n    };\n\n    public static final FAISSLibVersion LATEST = V164;\n\n    public String buildVersion;\n\n    FAISSLibVersion(String buildVersion) {\n        this.buildVersion = buildVersion;\n    }\n\n    /**\n     * FAISS library version used by the KNN codec\n     * @return name\n     */\n    public abstract String indexLibraryVersion();\n}", "author": "vamshin", "createdAt": "2021-01-21T20:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMxOTY3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563319671", "bodyText": "We could have new enum class for FAISS that just holds FAISS versions. Example\n\nyes, it is great. i added FAISSLibVersion in the latest commits", "author": "luyuncheng", "createdAt": "2021-01-24T16:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "3d0a2de094f2bfb6a69c1a9075c00d31cca843e1", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java\nindex b6da230..0dcc4fd 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java\n\n@@ -15,30 +15,19 @@\n \n package com.amazon.opendistroforelasticsearch.knn.index.util;\n \n-import java.util.HashSet;\n-import java.util.Set;\n-\n public enum NmsLibVersion {\n \n     /**\n      * Latest available nmslib version\n      */\n-    V206(\"206\"){\n-        @Override\n-        public String indexLibraryVersion() {\n-            return \"KNNIndexV2_0_6\";\n-        }\n-    },\n-    VFaiss(\"Faiss\") {\n+    V208(\"208\"){\n         @Override\n         public String indexLibraryVersion() {\n-            return \"KNNIndexVFaiss\";\n+            return \"KNNIndexV2_0_8\";\n         }\n     };\n \n-\n-    //FIXME\n-    public static final NmsLibVersion LATEST = VFaiss;\n+    public static final NmsLibVersion LATEST = V208;\n \n     public String buildVersion;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NDI0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555474242", "bodyText": "We should also have some tests that create both nmslib and faiss indices and perform search in the same test and assert right values are retrieved. This is to verify we are not mixing up between library calls.", "author": "vamshin", "createdAt": "2021-01-12T02:41:05Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNIFaissTests.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.faiss.KNNFIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.FSDirectory;\n+import org.apache.lucene.store.FilterDirectory;\n+\n+import java.nio.file.Paths;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class KNNJNIFaissTests extends KNNTestCase {", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUyNTAzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563525031", "bodyText": "yes, i would add tests for mixed engine and test with exceptions case", "author": "luyuncheng", "createdAt": "2021-01-25T08:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NDI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3d0a2de094f2bfb6a69c1a9075c00d31cca843e1", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNIFaissTests.java b/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNIFaissTests.java\ndeleted file mode 100644\nindex 0b23df1..0000000\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNIFaissTests.java\n+++ /dev/null\n\n@@ -1,177 +0,0 @@\n-package com.amazon.opendistroforelasticsearch.knn.index;\n-\n-import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n-\n-import com.amazon.opendistroforelasticsearch.knn.index.faiss.KNNFIndex;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.apache.lucene.store.Directory;\n-import org.apache.lucene.store.FSDirectory;\n-import org.apache.lucene.store.FilterDirectory;\n-\n-import java.nio.file.Paths;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.util.Arrays;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-public class KNNJNIFaissTests extends KNNTestCase {\n-    private static final Logger logger = LogManager.getLogger(KNNJNIFaissTests.class);\n-\n-    public void testCreateFaissHnswIndex() throws Exception {\n-        int[] docs = {0, 1, 2};\n-\n-        float[][] vectors = {\n-                {1.0f, 2.0f, 3.0f, 4.0f},\n-                {5.0f, 6.0f, 7.0f, 8.0f},\n-                {9.0f, 10.0f, 11.0f, 12.0f}\n-        };\n-\n-        Directory dir = newFSDirectory(createTempDir());\n-        String segmentName = \"_dummy\";\n-        String indexPath = Paths.get(((FSDirectory) (FilterDirectory.unwrap(dir))).getDirectory().toString(),\n-                String.format(\"%s.faiss\", segmentName)).toString();\n-\n-        String[] algoParams = {};\n-        AccessController.doPrivileged(\n-                new PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        KNNFIndex.saveIndex(docs, vectors, indexPath, algoParams, \"l2\");\n-                        return null;\n-                    }\n-                }\n-        );\n-\n-        assertTrue(Arrays.asList(dir.listAll()).contains(\"_dummy.faiss\"));\n-        dir.close();\n-    }\n-\n-    public void testQueryFaissHnswIndex() throws Exception {\n-        int[] docs = {0, 1, 2};\n-\n-        float[][] vectors = {\n-                {5.0f, 6.0f, 7.0f, 8.0f},\n-                {1.0f, 2.0f, 3.0f, 4.0f},\n-                {9.0f, 10.0f, 11.0f, 12.0f}\n-        };\n-\n-        Directory dir = newFSDirectory(createTempDir());\n-        String segmentName = \"_dummy1\";\n-        String indexPath = Paths.get(((FSDirectory) (FilterDirectory.unwrap(dir))).getDirectory().toString(),\n-                String.format(\"%s.hnsw\", segmentName)).toString();\n-\n-        String[] algoParams = {};\n-        AccessController.doPrivileged(\n-                new PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        KNNFIndex.saveIndex(docs, vectors, indexPath, algoParams, \"l2\");\n-                        return null;\n-                    }\n-                }\n-        );\n-\n-        assertTrue(Arrays.asList(dir.listAll()).contains(\"_dummy1.hnsw\"));\n-\n-        float[] queryVector = {1.0f, 1.0f, 1.0f, 1.0f};\n-        String[] algoQueryParams = {\"efSearch=20\"};\n-\n-        final KNNFIndex knnIndex = KNNFIndex.loadIndex(indexPath, algoQueryParams, \"l2\");\n-        final KNNQueryResult[] results = knnIndex.queryIndex(queryVector, 30);\n-\n-        Map<Integer, Float> scores = Arrays.stream(results).collect(\n-                Collectors.toMap(result -> result.getId(), result -> result.getScore()));\n-        logger.info(scores);\n-\n-        assertEquals(results.length, 3);\n-        /*\n-         * scores are evaluated using Euclidean distance. Distance of the documents with\n-         * respect to query vector are as follows\n-         * doc0 = 11.224972, doc1 = 3.7416575,  doc2 = 19.131126\n-         * Nearest neighbor is doc1 then doc0 then doc2\n-         * Faiss Returns need Math.pow(dis,2)\n-         */\n-        assertEquals(scores.get(0), Math.pow(11.224972,2), 0.1);\n-        assertEquals(scores.get(1), Math.pow(3.7416575,2), 0.1);\n-        assertEquals(scores.get(2), Math.pow(19.131126,2), 0.1);\n-        dir.close();\n-    }\n-\n-    public void testAssertExceptionFromJni() throws Exception {\n-\n-        Directory dir = newFSDirectory(createTempDir());\n-        String segmentName = \"_dummy1\";\n-        String indexPath = Paths.get(((FSDirectory) (FilterDirectory.unwrap(dir))).getDirectory().toString(),\n-                String.format(\"%s.hnsw\", segmentName)).toString();\n-        /***\n-         * Trying to load index which did not exist. This results in Runtime Error in nmslib.\n-         * Making sure c++ exceptions are casted to java Exception to avoid ES process crash\n-         */\n-        expectThrows(Exception.class, () ->\n-                AccessController.doPrivileged(\n-                        new PrivilegedAction<Void>() {\n-                            public Void run() {\n-                                KNNFIndex index = KNNFIndex.loadIndex(indexPath.toString(), new String[] {}, \"l2\");\n-                                return null;\n-                            }\n-                        }\n-                ));\n-        dir.close();\n-    }\n-\n-    public void testQueryHnswIndexWithValidAlgoParams() throws Exception {\n-        int[] docs = {0, 1, 2};\n-\n-        float[][] vectors = {\n-                {5.0f, 6.0f, 7.0f, 8.0f},\n-                {1.0f, 2.0f, 3.0f, 4.0f},\n-                {9.0f, 10.0f, 11.0f, 12.0f}\n-        };\n-\n-        Directory dir = newFSDirectory(createTempDir());\n-        String indexPath = getIndexPath(dir);\n-\n-        /**\n-         * Passing valid algo params should not fail the graph construction.\n-         */\n-        String[] algoIndexParams = {\"HNSW40\",\"efConstruction=200\", \"efSearch=100\"};\n-        AccessController.doPrivileged(\n-                new PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        KNNFIndex.saveIndex(docs, vectors, indexPath, algoIndexParams, \"l2\");\n-                        return null;\n-                    }\n-                }\n-        );\n-\n-\n-        assertTrue(Arrays.asList(dir.listAll()).contains(\"_dummy1.hnsw\"));\n-\n-        float[] queryVector = {1.0f, 1.0f, 1.0f, 1.0f};\n-        String[] algoQueryParams = {\"efSearch=200\"};\n-\n-        final KNNFIndex index = KNNFIndex.loadIndex(indexPath, algoQueryParams, \"l2\");\n-        final KNNQueryResult[] results = index.queryIndex(queryVector, 30);\n-\n-        Map<Integer, Float> scores = Arrays.stream(results).collect(\n-                Collectors.toMap(result -> result.getId(), result -> result.getScore()));\n-        logger.info(scores);\n-\n-        assertEquals(results.length, 3);\n-        /*\n-         * scores are evaluated using Euclidean distance. Distance of the documents with\n-         * respect to query vector are as follows\n-         * doc0 = 11.224972, doc1 = 3.7416575,  doc2 = 19.131126\n-         * Nearest neighbor is doc1 then doc0 then doc2\n-         */\n-        assertEquals(scores.get(0), Math.pow(11.224972,2), 0.1);\n-        assertEquals(scores.get(1), Math.pow(3.7416575,2), 0.1);\n-        assertEquals(scores.get(2), Math.pow(19.131126,2), 0.1);\n-        dir.close();\n-    }\n-    private String getIndexPath(Directory dir ) {\n-        String segmentName = \"_dummy1\";\n-        return Paths.get(((FSDirectory) (FilterDirectory.unwrap(dir))).getDirectory().toString(),\n-                String.format(\"%s.hnsw\", segmentName)).toString();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NjgxNA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555476814", "bodyText": "package name should have version information similar to nmslib.", "author": "vamshin", "createdAt": "2021-01-12T02:50:02Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/faiss/KNNFIndex.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.amazon.opendistroforelasticsearch.knn.index.faiss;", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMxOTQ3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563319479", "bodyText": "in the latest commits, i add faiss version into package and function names.", "author": "luyuncheng", "createdAt": "2021-01-24T16:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NjgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "3d0a2de094f2bfb6a69c1a9075c00d31cca843e1", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/faiss/KNNFIndex.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/faiss/KNNFIndex.java\ndeleted file mode 100644\nindex c3ccca6..0000000\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/faiss/KNNFIndex.java\n+++ /dev/null\n\n@@ -1,138 +0,0 @@\n-package com.amazon.opendistroforelasticsearch.knn.index.faiss;\n-\n-import com.amazon.opendistroforelasticsearch.knn.index.KNNQueryResult;\n-import com.amazon.opendistroforelasticsearch.knn.index.util.NmsLibVersion;\n-import com.amazon.opendistroforelasticsearch.knn.plugin.stats.KNNCounter;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReadWriteLock;\n-import java.util.concurrent.locks.ReentrantReadWriteLock;\n-\n-public class KNNFIndex implements AutoCloseable {\n-\n-    public static NmsLibVersion VERSION = NmsLibVersion.VFaiss;\n-    static {\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                System.loadLibrary(NmsLibVersion.VFaiss.indexLibraryVersion());\n-                return null;\n-            }\n-        });\n-        initLibrary();\n-    }\n-\n-    private volatile boolean isClosed = false;\n-    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n-\n-    private final long indexPointer;\n-    private final long indexSize;\n-\n-    private KNNFIndex(final long indexPointer, final long indexSize) {\n-        this.indexPointer = indexPointer;\n-        this.indexSize = indexSize;\n-    }\n-\n-    /**\n-     * This function is useful in computing the weight for caching. File sizes are stored in KiloBytes to prevent an\n-     * Integer Overflow. The Guava Cache weigh method returns an int. The max size of a Java int is 2,147,483,647. So,\n-     * a 2GB file, would lead to an overflow. With KB, however, 2,147,483,647 KB = 1.99 TB. So, it would take a 2 TB\n-     * file to produce an Integer Overflow.\n-     *\n-     * @return size of the hnsw index on the disk in KB.\n-     */\n-    public long getIndexSize() {\n-        return this.indexSize;\n-    }\n-\n-    public KNNQueryResult[] queryIndex(final float[] query, final int k) throws IOException {\n-        Lock readLock = readWriteLock.readLock();\n-        readLock.lock();\n-        KNNCounter.GRAPH_QUERY_REQUESTS.increment();\n-        try {\n-            if (this.isClosed) {\n-                throw new IOException(\"Index is already closed\");\n-            }\n-            final long indexPointer = this.indexPointer;\n-            return AccessController.doPrivileged(\n-                    new PrivilegedAction<KNNQueryResult[]>() {\n-                        public KNNQueryResult[] run() {\n-                            return queryIndex(indexPointer, query, k);\n-                        }\n-                    }\n-            );\n-\n-        } catch (Exception ex) {\n-            KNNCounter.GRAPH_QUERY_ERRORS.increment();\n-            throw new RuntimeException(\"Unable to query the index: \" + ex);\n-        } finally {\n-            readLock.unlock();\n-        }\n-    }\n-\n-    @Override\n-    public void close() {\n-        Lock writeLock = readWriteLock.writeLock();\n-        writeLock.lock();\n-        // Autocloseable documentation recommends making close idempotent. We don't expect to doubly close\n-        // but this will help prevent a crash in that situation.\n-        if (this.isClosed) {\n-            return;\n-        }\n-        try {\n-            gc(this.indexPointer);\n-        } finally {\n-            this.isClosed = true;\n-            writeLock.unlock();\n-        }\n-    }\n-\n-    /**\n-     * Loads the knn index to memory for querying the neighbours\n-     *\n-     * @param indexPath path where the hnsw index is stored\n-     * @param algoParams hnsw algorithm parameters\n-     * @param spaceType space type of the index\n-     * @return knn index that can be queried for k nearest neighbours\n-     */\n-    public static KNNFIndex loadIndex(String indexPath, final String[] algoParams, final String spaceType) {\n-        long fileSize = computeFileSize(indexPath);\n-        long indexPointer = init(indexPath, algoParams, spaceType);\n-        return new KNNFIndex(indexPointer, fileSize);\n-    }\n-\n-    /**\n-     * determines the size of the hnsw index on disk\n-     * @param indexPath absolute path of the index\n-     *\n-     */\n-    private static long computeFileSize(String indexPath) {\n-        if (indexPath == null || indexPath.isEmpty()) {\n-            return 0;\n-        }\n-        File file = new File(indexPath);\n-        if (!file.exists() || !file.isFile()) {\n-            return 0;\n-        }\n-\n-        return file.length() / 1024 + 1;\n-    }\n-\n-    // Builds index and writes to disk (no index pointer escapes).\n-    public static native void saveIndex(int[] ids, float[][] data, String indexPath, String[] algoParams, String spaceType);\n-\n-    // Queries index (thread safe with other readers, blocked by write lock)\n-    private static native KNNQueryResult[] queryIndex(long indexPointer, float[] query, int k);\n-\n-\n-    // Loads index and returns pointer to index\n-    private static native long init(String indexPath, String[] algoParams, String spaceType);\n-\n-    // Deletes memory pointed to by index pointer (needs write lock)\n-    private static native void gc(long indexPointer);\n-\n-    private static native void initLibrary();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4MTMwOQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555481309", "bodyText": "How about we move if else check inside the AccessController.doPrivileged. Something like below example\n                AccessController.doPrivileged(\n                        new PrivilegedAction<Void>() {\n                            public Void run() {\n                                if(knnindex)\n                                      KNNIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n                                if(faissindex)\n                                     KNNFIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);      \n                               return null;\n                            }\n      ```", "author": "vamshin", "createdAt": "2021-01-12T03:05:45Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNN80Codec/KNN80DocValuesConsumer.java", "diffHunk": "@@ -98,16 +99,29 @@ public void addKNNBinaryField(FieldInfo field, DocValuesProducer valuesProducer)\n             // Pass the path for the nms library to save the file\n             String tempIndexPath = indexPath + TEMP_SUFFIX;\n             Map<String, String> fieldAttributes = field.attributes();\n+            String knnEngine = fieldAttributes.getOrDefault(KNNConstants.KNNEngine, KNNSettings.INDEX_KNN_DEFAULT_ENGINE);\n             String spaceType = fieldAttributes.getOrDefault(KNNConstants.SPACE_TYPE, SpaceTypes.l2.getValue());\n             String[] algoParams = getKNNIndexParams(fieldAttributes);\n-            AccessController.doPrivileged(\n-                    new PrivilegedAction<Void>() {\n-                        public Void run() {\n-                            KNNIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n-                            return null;\n+\n+            if(knnEngine.contains(NmsLibVersion.VFaiss.getBuildVersion())) {\n+                AccessController.doPrivileged(\n+                        new PrivilegedAction<Void>() {\n+                            public Void run() {\n+                                KNNFIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n+                                return null;\n+                            }\n+                        }\n+                );\n+            } else {\n+                AccessController.doPrivileged(\n+                        new PrivilegedAction<Void>() {\n+                            public Void run() {\n+                                KNNIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n+                                return null;\n+                            }\n                         }\n-                    }\n-            );\n+                );\n+            }", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d0a2de094f2bfb6a69c1a9075c00d31cca843e1", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNN80Codec/KNN80DocValuesConsumer.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNN80Codec/KNN80DocValuesConsumer.java\nindex dbff893..fd97bff 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNN80Codec/KNN80DocValuesConsumer.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNN80Codec/KNN80DocValuesConsumer.java\n\n@@ -99,29 +98,16 @@ class KNN80DocValuesConsumer extends DocValuesConsumer implements Closeable {\n             // Pass the path for the nms library to save the file\n             String tempIndexPath = indexPath + TEMP_SUFFIX;\n             Map<String, String> fieldAttributes = field.attributes();\n-            String knnEngine = fieldAttributes.getOrDefault(KNNConstants.KNNEngine, KNNSettings.INDEX_KNN_DEFAULT_ENGINE);\n             String spaceType = fieldAttributes.getOrDefault(KNNConstants.SPACE_TYPE, SpaceTypes.l2.getValue());\n             String[] algoParams = getKNNIndexParams(fieldAttributes);\n-\n-            if(knnEngine.contains(NmsLibVersion.VFaiss.getBuildVersion())) {\n-                AccessController.doPrivileged(\n-                        new PrivilegedAction<Void>() {\n-                            public Void run() {\n-                                KNNFIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n-                                return null;\n-                            }\n-                        }\n-                );\n-            } else {\n-                AccessController.doPrivileged(\n-                        new PrivilegedAction<Void>() {\n-                            public Void run() {\n-                                KNNIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n-                                return null;\n-                            }\n+            AccessController.doPrivileged(\n+                    new PrivilegedAction<Void>() {\n+                        public Void run() {\n+                            KNNIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n+                            return null;\n                         }\n-                );\n-            }\n+                    }\n+            );\n \n             String hsnwTempFileName = hnswFileName + TEMP_SUFFIX;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4NTU2NA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555485564", "bodyText": "How about we pull out the methods in KNNFIndex and KNNIndex to interface so that we could refer with one object to keep it more cleaner? Something like\nKNNIndex index;\nif (fieldAttributes.containsValue(NmsLibVersion.V206.getBuildVersion())) {\n       index = knnIndexCache.getIndex(indexPath.toString(), knnQuery.getIndexName());\n} else {\n       index = knnIndexCache.getFIndex(indexPath.toString(), knnQuery.getIndexName());\n}\nresults = index.queryIndex(knnQuery.getQueryVector(), knnQuery.getK());", "author": "vamshin", "createdAt": "2021-01-12T03:21:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java", "diffHunk": "@@ -97,11 +100,21 @@ public Scorer scorer(LeafReaderContext context) throws IOException {\n              */\n \n             Path indexPath = PathUtils.get(directory, hnswFiles.get(0));\n-            final KNNIndex index = knnIndexCache.getIndex(indexPath.toString(), knnQuery.getIndexName());\n-            final KNNQueryResult[] results = index.queryIndex(\n-                    knnQuery.getQueryVector(),\n-                    knnQuery.getK()\n-            );\n+            final KNNQueryResult[] results;\n+\n+            if (fieldAttributes.containsValue(NmsLibVersion.V206.getBuildVersion())) {", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM0OTI3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r556349277", "bodyText": "this is may make the log of changes in KNNIndex. In KNNIndex class, it would load the specific library, if we want to pull out the methods getIndex, we need an abstraction of KNNIndex and verify the engine we are using.\nLet me think about it how to do it.", "author": "luyuncheng", "createdAt": "2021-01-13T08:42:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4NTU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUzODk1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563538952", "bodyText": "How about we pull out the methods in KNNFIndex and KNNIndex to interface so that we could refer with one object to keep it more cleaner? Something like\n\nin the latest commits, I used KNNIndex as abstract class. KNNFaissIndex and KNNNmsLibIndex extends the KNNINdex.\nKNNIndexCacheEntry only save the KNNIndex.\nif you have any other idea, pls let me know", "author": "luyuncheng", "createdAt": "2021-01-25T08:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4NTU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "3d0a2de094f2bfb6a69c1a9075c00d31cca843e1", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java\nindex 005e240..b50d204 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java\n\n@@ -91,30 +89,19 @@ public class KNNWeight extends Weight {\n             }\n \n             FieldInfo queryFieldInfo = reader.getFieldInfos().fieldInfo(knnQuery.getField());\n-            Map<String, String> fieldAttributes = queryFieldInfo.attributes();\n \n             /**\n              * TODO Add logic to pick up the right nmslib version based on the version\n-             * in the name of the file. As of now we have one version 2.0.6\n+             * in the name of the file. As of now we have one version 2.0.8\n              * So deferring this to future releases\n              */\n \n             Path indexPath = PathUtils.get(directory, hnswFiles.get(0));\n-            final KNNQueryResult[] results;\n-\n-            if (fieldAttributes.containsValue(NmsLibVersion.V206.getBuildVersion())) {\n-                final KNNIndex index = knnIndexCache.getIndex(indexPath.toString(), knnQuery.getIndexName());\n-                results = index.queryIndex(\n-                        knnQuery.getQueryVector(),\n-                        knnQuery.getK()\n-                );\n-            } else {\n-                final KNNFIndex index = knnIndexCache.getFIndex(indexPath.toString(), knnQuery.getIndexName());\n-                results = index.queryIndex(\n-                        knnQuery.getQueryVector(),\n-                        knnQuery.getK()\n-                );\n-            }\n+            final KNNIndex index = knnIndexCache.getIndex(indexPath.toString(), knnQuery.getIndexName());\n+            final KNNQueryResult[] results = index.queryIndex(\n+                    knnQuery.getQueryVector(),\n+                    knnQuery.getK()\n+            );\n \n             /**\n              * Scores represent the distance of the documents with respect to given query vector.\n"}}, {"oid": "ff99c4c486cb9c6cc5e4971876130da5022fc3c7", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ff99c4c486cb9c6cc5e4971876130da5022fc3c7", "message": "Update CMakeLists.txt\n\nupdate CMakeLists.txt", "committedDate": "2021-01-12T09:21:13Z", "type": "commit"}, {"oid": "d3d9baac6cb0c49b26255df095e7f69ba28c1f68", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/d3d9baac6cb0c49b26255df095e7f69ba28c1f68", "message": "Update CMakeLists.txt", "committedDate": "2021-01-12T09:24:37Z", "type": "commit"}, {"oid": "afa1b5c517576ffb786bd31d035d57549f342fa3", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/afa1b5c517576ffb786bd31d035d57549f342fa3", "message": "Update build.gradle\n\nFixed depends On in gradle", "committedDate": "2021-01-12T09:37:21Z", "type": "commit"}, {"oid": "ce389f45d8a546b960e3dba2bf5fe8f116eb60a9", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ce389f45d8a546b960e3dba2bf5fe8f116eb60a9", "message": "Update com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex.cpp", "committedDate": "2021-01-12T09:49:45Z", "type": "commit"}, {"oid": "716557464a362c5784d98ef5d8c09f8f5e10b175", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/716557464a362c5784d98ef5d8c09f8f5e10b175", "message": "Update CMakeLists.txt", "committedDate": "2021-01-12T10:43:01Z", "type": "commit"}, {"oid": "3d1670d48e029e1dde1187d79dd84d511933c22c", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3d1670d48e029e1dde1187d79dd84d511933c22c", "message": "Merge branch 'faiss' into faiss_dev", "committedDate": "2021-01-12T11:00:09Z", "type": "commit"}, {"oid": "3d0a2de094f2bfb6a69c1a9075c00d31cca843e1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3d0a2de094f2bfb6a69c1a9075c00d31cca843e1", "message": "Update KNNCircuitBreakerIT.java", "committedDate": "2021-01-12T12:04:37Z", "type": "commit"}, {"oid": "698fbeaf8cdac40bb7f23eb3a0038aec06e22515", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/698fbeaf8cdac40bb7f23eb3a0038aec06e22515", "message": "Update KNNCircuitBreakerIT.java", "committedDate": "2021-01-12T12:07:30Z", "type": "commit"}, {"oid": "890d6f75ea7c5f0fa3d4f9f6da1b031ef86a0334", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/890d6f75ea7c5f0fa3d4f9f6da1b031ef86a0334", "message": "Update KNNCircuitBreakerIT.java", "committedDate": "2021-01-12T12:07:47Z", "type": "commit"}, {"oid": "8b08b4eb1efdb624c9ea3e79ce825fcd2121c2f0", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/8b08b4eb1efdb624c9ea3e79ce825fcd2121c2f0", "message": "Update KNNCodecTestCase.java", "committedDate": "2021-01-12T12:33:02Z", "type": "commit"}, {"oid": "8fd12205bc17f3a3e28d05ef6921c8f6899dfb9d", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/8fd12205bc17f3a3e28d05ef6921c8f6899dfb9d", "message": "Merge pull request #7 from luyuncheng/faiss_dev\n\nFixed using CI run  integration tests", "committedDate": "2021-01-12T12:42:32Z", "type": "commit"}, {"oid": "381dd58821e40fdc21f3510310d669d6d0c96d64", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/381dd58821e40fdc21f3510310d669d6d0c96d64", "message": "Merge branch 'master' into faiss", "committedDate": "2021-01-12T12:46:07Z", "type": "commit"}, {"oid": "20672dfa243e65b7245f1dcf820904eba3146f9c", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/20672dfa243e65b7245f1dcf820904eba3146f9c", "message": "Update test-workflow.yml", "committedDate": "2021-01-12T13:23:27Z", "type": "commit"}, {"oid": "deeefeb81098132d05828af15ea31071f8f9c99a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/deeefeb81098132d05828af15ea31071f8f9c99a", "message": "Merge pull request #8 from luyuncheng/faiss_dev\n\nUpdate test-workflow.yml", "committedDate": "2021-01-12T13:34:03Z", "type": "commit"}, {"oid": "fdeca84996659452b41ff44f27aeee4c4185cb38", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/fdeca84996659452b41ff44f27aeee4c4185cb38", "message": "Merge branch 'master' into faiss_dev\n\n# Conflicts:\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java\n#\tsrc/main/plugin-metadata/plugin-security.policy\n#\tsrc/test/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNNCodecTestCase.java", "committedDate": "2021-01-12T14:16:29Z", "type": "commit"}, {"oid": "0423466cf09e6747b26141ddfc581903c806fdff", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/0423466cf09e6747b26141ddfc581903c806fdff", "message": "Merge Master Into Faiss", "committedDate": "2021-01-12T14:23:09Z", "type": "commit"}, {"oid": "4d2960d275dc0bb61f5fef8c28a7407e14b97ceb", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/4d2960d275dc0bb61f5fef8c28a7407e14b97ceb", "message": "Merge Master Into Faiss", "committedDate": "2021-01-12T15:09:39Z", "type": "commit"}, {"oid": "654cb52e17296562182ece3bcffc80b4258fa552", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/654cb52e17296562182ece3bcffc80b4258fa552", "message": "Merge Master Into Faiss", "committedDate": "2021-01-12T15:43:18Z", "type": "commit"}, {"oid": "f549e3ef56c60bd32d6d0b5a79ab1020b2c047a1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/f549e3ef56c60bd32d6d0b5a79ab1020b2c047a1", "message": "Merge branch 'faiss' into faiss_dev", "committedDate": "2021-01-12T15:50:11Z", "type": "commit"}, {"oid": "98d44d1e91818216dc31c7eb4e3df210f5c25906", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/98d44d1e91818216dc31c7eb4e3df210f5c25906", "message": "Merge pull request #10 from luyuncheng/faiss_dev\n\nMerge Upstream Maser into faiss", "committedDate": "2021-01-12T16:09:39Z", "type": "commit"}, {"oid": "243eb81c1928828a0b897d1ab3d17c76a4a11acc", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/243eb81c1928828a0b897d1ab3d17c76a4a11acc", "message": "move IndexClass check inside the AccessController.doPrivileged", "committedDate": "2021-01-13T08:45:23Z", "type": "commit"}, {"oid": "3c2e397dfa6a6cdb6371e7f7e00f881f0b4ae854", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3c2e397dfa6a6cdb6371e7f7e00f881f0b4ae854", "message": "Add Tests for Circuit breaker test with different engine", "committedDate": "2021-01-18T12:39:59Z", "type": "commit"}, {"oid": "f23196502a4705636c6d4040f181fcb83521be6a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/f23196502a4705636c6d4040f181fcb83521be6a", "message": "1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-20T12:39:13Z", "type": "commit"}, {"oid": "3bdbc436164e3eb288343ad292951ae29e8f346a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3bdbc436164e3eb288343ad292951ae29e8f346a", "message": "Update CMakeLists.txt\n\nupdate Lib Version", "committedDate": "2021-01-20T12:41:15Z", "type": "commit"}, {"oid": "ce141a3b1a68ecf6be737a73f3c64f6863509075", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ce141a3b1a68ecf6be737a73f3c64f6863509075", "message": "Update CMakeLists.txt", "committedDate": "2021-01-20T12:48:23Z", "type": "commit"}, {"oid": "652c329f06e2b14f2c769162a0546cee52b1d250", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/652c329f06e2b14f2c769162a0546cee52b1d250", "message": "Update CMakeLists.txt", "committedDate": "2021-01-20T13:05:42Z", "type": "commit"}, {"oid": "667281433fb2da253e00d4250f6b11f22b75a5ee", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/667281433fb2da253e00d4250f6b11f22b75a5ee", "message": "Update KNNWeight.java", "committedDate": "2021-01-20T13:21:29Z", "type": "commit"}, {"oid": "b08d2d996c8ca47613181c13154484569831098f", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/b08d2d996c8ca47613181c13154484569831098f", "message": "Update CMakeLists.txt", "committedDate": "2021-01-20T13:23:57Z", "type": "commit"}, {"oid": "f4ebd79541a83db4c0fa898d60218ba314277a88", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/f4ebd79541a83db4c0fa898d60218ba314277a88", "message": "1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-20T13:30:23Z", "type": "commit"}, {"oid": "df4c2185019a1df1d86d74cbb04ed6f6017ba8af", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/df4c2185019a1df1d86d74cbb04ed6f6017ba8af", "message": "Merge remote-tracking branch 'origin/faiss_dev_libversion' into faiss_dev_libversion", "committedDate": "2021-01-20T13:31:03Z", "type": "commit"}, {"oid": "1777bd14ab9e8dc5982b28a09351b82b26e2bf4a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1777bd14ab9e8dc5982b28a09351b82b26e2bf4a", "message": "1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-20T13:39:23Z", "type": "commit"}, {"oid": "576a8eb0ae2c12e64e2e4026630e100f6cc0ef4c", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/576a8eb0ae2c12e64e2e4026630e100f6cc0ef4c", "message": "Merge pull request #11 from luyuncheng/faiss_dev_libversion\n\nAdd Faiss and nmslib LibVersion into knn plugin", "committedDate": "2021-01-20T13:50:18Z", "type": "commit"}, {"oid": "d37a523a778eaed5959175fbe8d1e202721eafac", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/d37a523a778eaed5959175fbe8d1e202721eafac", "message": "Add NmsLib Version And Faiss Version into KNN Plugin\n\n1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-20T14:12:06Z", "type": "commit"}, {"oid": "7c83e70d4d9da5e406f12c8f49735a9583b529a8", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/7c83e70d4d9da5e406f12c8f49735a9583b529a8", "message": "Merge pull request #13 from opendistro-for-elasticsearch/master\n\nUpdate Upstream Master", "committedDate": "2021-01-22T15:32:29Z", "type": "commit"}, {"oid": "dd179b571fc218c4ee3d1386d015b83615f4e3de", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/dd179b571fc218c4ee3d1386d015b83615f4e3de", "message": "1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-22T16:01:20Z", "type": "commit"}, {"oid": "cd7e3e8545304f713ef67e33c8093d9f77ecb6c1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/cd7e3e8545304f713ef67e33c8093d9f77ecb6c1", "message": "1. Merge remote-tracking branch 'origin/master' into faiss_dev\n2. Make Faiss Version into code\n3. Update Hnswlib to 2.0.10\n\n# Conflicts:\n#\tjni/CMakeLists.txt\n#\tjni/include/com_amazon_opendistroforelasticsearch_knn_index_nmslib_v208_KNNIndex.h\n#\tjni/include/com_amazon_opendistroforelasticsearch_knn_index_v2011_KNNIndex.h\n#\tjni/include/com_amazon_opendistroforelasticsearch_knn_index_v208_KNNIndex.h\n#\tjni/src/com_amazon_opendistroforelasticsearch_knn_index_nmslib_v208_KNNIndex.cpp\n#\tjni/src/com_amazon_opendistroforelasticsearch_knn_index_v2011_KNNIndex.cpp\n#\tjni/src/com_amazon_opendistroforelasticsearch_knn_index_v208_KNNIndex.cpp\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNN80Codec/KNN80DocValuesConsumer.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/nmslib/v208/KNNIndex.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/v2011/KNNIndex.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/v208/KNNIndex.java\n#\tsrc/main/plugin-metadata/plugin-security.policy\n#\tsrc/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCacheTests.java\n#\tsrc/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITests.java", "committedDate": "2021-01-22T16:38:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NzU4OA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562947588", "bodyText": "Seems to me that knnIndex and knnFindex should inherit from some kind of abstract class.", "author": "jmazanec15", "createdAt": "2021-01-22T22:25:22Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -320,22 +339,52 @@ public KNNIndexCacheEntry loadIndex(String indexPathUrl, String indexName) throw\n      * upon expiration of the cache.\n      */\n     private static class KNNIndexCacheEntry {\n+\n         private final KNNIndex knnIndex;\n+        private final KNNFIndex knnFindex;\n         private final String indexPathUrl;\n         private final String esIndexName;\n         private final WatcherHandle<FileWatcher> fileWatcherHandle;\n \n         private KNNIndexCacheEntry(final KNNIndex knnIndex, final String indexPathUrl, final String esIndexName,\n                                    final WatcherHandle<FileWatcher> fileWatcherHandle) {\n             this.knnIndex = knnIndex;\n+            this.knnFindex = null;", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMxNzU1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563317555", "bodyText": "I see. I think we should add a different file extension for faiss graphs as opposed to nmslib graphs. Maybe .faiss_hnsw.\n\nin the latest commit, i use knnEngine name in the index file names like:\nString hnswFileName = String.format(\"%s_%s_%s%s\", \n    state.segmentInfo.name, \n    knnEngine.getLatestBuildVersion(),\n    field.name, \n    KNNCodecUtil.HNSW_EXTENSION);\n\n\nSeems to me that knnIndex and knnFindex should inherit from some kind of abstract class.\n\nyes, you are right. let me think about how to abstract this.", "author": "luyuncheng", "createdAt": "2021-01-24T16:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NzU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUzNzYwNw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563537607", "bodyText": "Seems to me that knnIndex and knnFindex should inherit from some kind of abstract class.\n\nI used KNNIndex as abstract class. KNNFaissIndex and KNNNmsLibIndex extends the KNNINdex.\nKNNIndexCacheEntry only save the KNNIndex.\nif you have any other idea, pls let me know", "author": "luyuncheng", "createdAt": "2021-01-25T08:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NzU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDEwNTA4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r564105085", "bodyText": "I think that makes sense. Thanks for making the change!", "author": "jmazanec15", "createdAt": "2021-01-25T23:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NzU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "bea16d6d5b6c8c48f8b44991c7335e21ed04465e", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\nindex ca44dad..c2c98b8 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n\n@@ -341,23 +332,20 @@ public class KNNIndexCache implements Closeable {\n     private static class KNNIndexCacheEntry {\n \n         private final KNNIndex knnIndex;\n-        private final KNNFIndex knnFindex;\n         private final String indexPathUrl;\n         private final String esIndexName;\n         private final WatcherHandle<FileWatcher> fileWatcherHandle;\n \n-        private KNNIndexCacheEntry(final KNNIndex knnIndex, final String indexPathUrl, final String esIndexName,\n+        private KNNIndexCacheEntry(final KNNNmsLibIndex knnIndex, final String indexPathUrl, final String esIndexName,\n                                    final WatcherHandle<FileWatcher> fileWatcherHandle) {\n             this.knnIndex = knnIndex;\n-            this.knnFindex = null;\n             this.indexPathUrl = indexPathUrl;\n             this.esIndexName = esIndexName;\n             this.fileWatcherHandle = fileWatcherHandle;\n         }\n-        private KNNIndexCacheEntry(final KNNFIndex knnFindex, final String indexPathUrl, final String esIndexName,\n+        private KNNIndexCacheEntry(final KNNFaissIndex knnIndex, final String indexPathUrl, final String esIndexName,\n                                    final WatcherHandle<FileWatcher> fileWatcherHandle) {\n-            this.knnIndex = null;\n-            this.knnFindex = knnFindex;\n+            this.knnIndex = knnIndex;\n             this.indexPathUrl = indexPathUrl;\n             this.esIndexName = esIndexName;\n             this.fileWatcherHandle = fileWatcherHandle;\n"}}, {"oid": "9056b858d7f2fab56fdb885a7184c9d3a6316b60", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/9056b858d7f2fab56fdb885a7184c9d3a6316b60", "message": "1. Update Submodule FAISS to new version\n2. Remove no useful libfaiss.a\n3. Update JniFaiss CmakeLists.txt", "committedDate": "2021-01-24T13:04:27Z", "type": "commit"}, {"oid": "a33625cbe034be7b04f19c638bb46724d6384ff1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/a33625cbe034be7b04f19c638bb46724d6384ff1", "message": "1. Update Submodule FAISS to new version V1.6.5(HASH:88eabe9)", "committedDate": "2021-01-24T13:38:05Z", "type": "commit"}, {"oid": "ee0a3fe92a72855c6177627bca1a6c103991615b", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ee0a3fe92a72855c6177627bca1a6c103991615b", "message": "1. Update Submodule FAISS to new version V1.6.5(HASH:88eabe9)\n2. Remove no use comments", "committedDate": "2021-01-24T13:41:58Z", "type": "commit"}, {"oid": "d613095a3a418c76dde0f8020c2334eaad1b2c8a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/d613095a3a418c76dde0f8020c2334eaad1b2c8a", "message": "1. Remove nouse CI branches", "committedDate": "2021-01-24T13:52:49Z", "type": "commit"}, {"oid": "7715563c70b2850b86bff2fe4358791d7b636008", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/7715563c70b2850b86bff2fe4358791d7b636008", "message": "Merge pull request #14 from luyuncheng/faiss_dev\n\nAdd NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-24T14:04:20Z", "type": "commit"}, {"oid": "82671ad0d0818d3b69ee42de62f671cb78ba1d48", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/82671ad0d0818d3b69ee42de62f671cb78ba1d48", "message": "1. Fixed Indentation", "committedDate": "2021-01-25T05:10:13Z", "type": "commit"}, {"oid": "bea16d6d5b6c8c48f8b44991c7335e21ed04465e", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/bea16d6d5b6c8c48f8b44991c7335e21ed04465e", "message": "1. Make KNNIndex as abstract class\n2. Add KNNNmsLibIndex and KNNFaissIndex inherit the KNNIndex", "committedDate": "2021-01-25T07:01:14Z", "type": "commit"}, {"oid": "3dc4f1fa6786f004a603e1853fddfd666c431594", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3dc4f1fa6786f004a603e1853fddfd666c431594", "message": "1. Make KNNIndex as abstract class\n2. Add KNNNmsLibIndex and KNNFaissIndex inherit the KNNIndex\n3. Move JNITests into JNINmsLibTests\n4. Add New JNITests which would mixed knnEngine, and test with exception", "committedDate": "2021-01-25T08:01:56Z", "type": "commit"}, {"oid": "1207bac03b2a5d097bdb59684b273dbb525b6d8e", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1207bac03b2a5d097bdb59684b273dbb525b6d8e", "message": "Merge pull request #15 from luyuncheng/opendistro-faiss_dev\n\nMake KNNIndex as abstract class", "committedDate": "2021-01-25T08:15:07Z", "type": "commit"}]}