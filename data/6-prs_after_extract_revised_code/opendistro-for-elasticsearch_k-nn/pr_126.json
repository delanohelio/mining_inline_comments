{"pr_number": 126, "pr_title": "ENH: ability to dynamically update efSearch setting", "pr_createdAt": "2020-05-22T19:48:30Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126", "timeline": [{"oid": "1ad00912c908b0c8f1a4dc5305117e551690f971", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1ad00912c908b0c8f1a4dc5305117e551690f971", "message": "add ef_search into query and query builder; adapt loadIndex", "committedDate": "2020-05-22T14:22:59Z", "type": "commit"}, {"oid": "8cf5ab0b221759a72cde473f830e5cdc55037d27", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/8cf5ab0b221759a72cde473f830e5cdc55037d27", "message": "FIX: integration tests", "committedDate": "2020-05-22T18:37:31Z", "type": "commit"}, {"oid": "756f4874a4c6c49b760accc7b57f7153ab735c8d", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/756f4874a4c6c49b760accc7b57f7153ab735c8d", "message": "FIX: @param in docstring", "committedDate": "2020-05-22T19:39:32Z", "type": "commit"}, {"oid": "e3f0b06e9f1cab21d0fb3338cd004c7431f66029", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/e3f0b06e9f1cab21d0fb3338cd004c7431f66029", "message": "FIX: query builder on efsearch", "committedDate": "2020-05-22T19:40:35Z", "type": "commit"}, {"oid": "7f0a41e01ed251c2f1f3686b3f12f73426173989", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/7f0a41e01ed251c2f1f3686b3f12f73426173989", "message": "Adapt test case to cover efsearch in query", "committedDate": "2020-05-22T19:41:01Z", "type": "commit"}, {"oid": "4fb5f407b059cd46844c7f3ef338ee02f194031a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/4fb5f407b059cd46844c7f3ef338ee02f194031a", "message": "FIX: validity check and test case", "committedDate": "2020-05-22T19:55:01Z", "type": "commit"}, {"oid": "7e06873aef0afee53afbe02ea8f905d8fb982696", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/7e06873aef0afee53afbe02ea8f905d8fb982696", "message": "RMV: unused imports", "committedDate": "2020-05-22T20:01:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MDY2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r430840662", "bodyText": "This method would be called only once when there is cache miss. The efsearch value passed is stored in the\nIndexWrapper as part of init call. So ef_search passed in subsequent queries would not be reflected.\nIdeal way is to plumb the ef_search through queryIndex function from KNNWeight. As part of this function in the jni, we could set the  ef_search usingsetQueryTimeParams if ef_search is not null otherwise just use the existing value.\nWe need to be careful while calling setQueryTimeParams because at the same time it is possible some query is already referencing this object and could cause segmentation faults. We need to kind of ensure only one thread is setting/getting ef_search .", "author": "vamshin", "createdAt": "2020-05-27T03:44:07Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -273,11 +275,12 @@ public void evictAllGraphsFromCache() {\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n      * @param indexName index name\n+     * @param efSearch HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors\"\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndexCacheEntry loadIndex(String indexPathUrl, String indexName) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, String indexName, int efSearch) throws Exception {", "originalCommit": "7e06873aef0afee53afbe02ea8f905d8fb982696", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzMDc5MA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r431530790", "bodyText": "Ideal way is to plumb the ef_search through queryIndex function from KNNWeight. As part of this function in the jni, we could set the ef_search using setQueryTimeParams if ef_search is not null otherwise just use the existing value.\n\nThanks for pointing that out. I need to renew license on CLion for getting this part done.\n\nWe need to be careful while calling setQueryTimeParams because at the same time it is possible some query is already referencing this object and could cause segmentation faults. We need to kind of ensure only one thread is setting/getting ef_search .\n\nThanks for reminder. My first thought is to use writeLock in queryIndex if ef_search is not null. Might need to put some thought into this. Suggestion is welcome.", "author": "chenqi0805", "createdAt": "2020-05-28T01:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5MDQxMg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r431990412", "bodyText": "I suspect that supporting a dynamic efSearch parameter would either require:\n\nSynchronizing search queries from multiple threads onto a shared index (which would likely hurt query performance significantly)\nRequire changes to the KNN library dependency to make the efSearch parameter a local parameter of the KNN query structure rather than a member of the index. It's currently a class member of the HNSW index, which is why the opendistro plugin is setting it once on index load rather than supporting per query, since mutations within queries would affect unrelated queries (see here for one example usage of the member variable).", "author": "jschmitz28", "createdAt": "2020-05-28T17:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MjY1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r433052655", "bodyText": "Agree. Synchronizing could hurt performance because of locking. At this point to me, Approach 2 mentioned by @jschmitz28  seems to be best way to achieve this.\nOther solution i could think of is, make ef_search setting dynamic Elasticsearch index setting(currently its static index setting, once define cannot be changed). On the change of this setting, we could evict the graphs from memory and load freshly with the new ef_search.  We already do this eviction when we change few settings. Example here\n\nThis removes the indexing cost to rebuild the whole index which is a pain point today and on next query graphs should be available for search.\nAvoid errors possible from mutation.", "author": "vamshin", "createdAt": "2020-06-01T05:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0MjQwMg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r436442402", "bodyText": "@vamshin I have two more points to clarify regarding your solution, first UX and second implementation:\n(1) dynamical setting still needs to be updated through index settings API: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html\nso I think UX is going to be different from #116 . Is that OK? Otherwise I will return to approach 2 by @jschmitz28 .\n(2) On trying to implemnt your solution by defining ef_search to be index scope and dynamic. As you mentioned, we also need to add custom setting update consumer for that ef_search. Now the issue is that IndexModule has not yet been passed into KNNSettings so we do not have way to add the consumer for index scope settings.\nFrom my observation, we can implement\nhttps://github.com/elastic/elasticsearch/blob/853dd1b873d02d04231c32722d4784c9da1068dc/server/src/main/java/org/elasticsearch/plugins/Plugin.java#L131\nin KNNPlugin, then we add an accept index module API in KNNSetting. Thought?", "author": "chenqi0805", "createdAt": "2020-06-08T03:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1OTg0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r436959842", "bodyText": "@chenqi0805\n(1) Seems to be perfectly ok to change that.\nRegarding the approach mentioned by @jschmitz28  we could create an issue in the nmslib and ask their opinion about this change? Not sure if they had to do this way for some optimizations.\n(2) Makes sense.", "author": "vamshin", "createdAt": "2020-06-08T19:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwMzU5NA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438503594", "bodyText": "nmslib/nmslib#442", "author": "chenqi0805", "createdAt": "2020-06-11T02:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MDY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "abed522998fd90ff265750c7d56bbfafed5bfe68", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\nindex 7a5df4f..0cacf86 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n\n@@ -275,12 +273,11 @@ public class KNNIndexCache implements Closeable {\n      *\n      * @param indexPathUrl path for serialized hnsw graph\n      * @param indexName index name\n-     * @param efSearch HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors\"\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      * @throws Exception Exception could occur when registering the index path\n      * to Resource watcher or if the JNI call throws\n      */\n-    public KNNIndexCacheEntry loadIndex(String indexPathUrl, String indexName, int efSearch) throws Exception {\n+    public KNNIndexCacheEntry loadIndex(String indexPathUrl, String indexName) throws Exception {\n         if(Strings.isNullOrEmpty(indexPathUrl))\n             throw new IllegalStateException(\"indexPath is null while performing load index\");\n         logger.debug(\"Loading index on cache miss .. {}\", indexPathUrl);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MTE3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r430841173", "bodyText": "We do not have to change this method.  This method can always read the default setting so that IndexWrapper can refer it when ef_search is null.", "author": "vamshin", "createdAt": "2020-05-27T03:46:22Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -290,7 +293,8 @@ public KNNIndexCacheEntry loadIndex(String indexPathUrl, String indexName) throw\n         // the entry\n         fileWatcher.init();\n \n-        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, getQueryParams(indexName), KNNSettings.getSpaceType(indexName));\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(", "originalCommit": "7e06873aef0afee53afbe02ea8f905d8fb982696", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abed522998fd90ff265750c7d56bbfafed5bfe68", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\nindex 7a5df4f..0cacf86 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n\n@@ -293,8 +290,7 @@ public class KNNIndexCache implements Closeable {\n         // the entry\n         fileWatcher.init();\n \n-        final KNNIndex knnIndex = KNNIndex.loadIndex(\n-                indexPathUrl, getQueryParams(indexName, efSearch), KNNSettings.getSpaceType(indexName));\n+        final KNNIndex knnIndex = KNNIndex.loadIndex(indexPathUrl, getQueryParams(indexName), KNNSettings.getSpaceType(indexName));\n \n         // TODO verify that this is safe - ideally we'd explicitly ensure that the FileWatcher is only checked\n         // after the guava cache has finished loading the key to avoid a race condition where the watcher\n"}}, {"oid": "abed522998fd90ff265750c7d56bbfafed5bfe68", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/abed522998fd90ff265750c7d56bbfafed5bfe68", "message": "Make ef_search dynamic and register setting update consumer for the parameter", "committedDate": "2020-06-09T03:15:00Z", "type": "commit"}, {"oid": "e478ee8a95f259ebc395471f7b5434d840de1ea6", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/e478ee8a95f259ebc395471f7b5434d840de1ea6", "message": "Revert query structure and relevant tests", "committedDate": "2020-06-09T03:18:36Z", "type": "commit"}, {"oid": "e15043612b4df97f0e88cfb265ea54a536edcab0", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/e15043612b4df97f0e88cfb265ea54a536edcab0", "message": "Merge branch 'master' into enh/ability-to-pass-ef-search-in-query\n\n* master:\n  added github action to build library artifacts (#132)\n  FIX: buildDir->rootDir\n  Build separate artifacts for library using CPack (#123)\n  Fix test structure (#125)", "committedDate": "2020-06-09T03:19:13Z", "type": "commit"}, {"oid": "b84085771ae4075c7e4c5ebab1acd3720c1efbe4", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/b84085771ae4075c7e4c5ebab1acd3720c1efbe4", "message": "TST: update ef_search after index creation", "committedDate": "2020-06-09T15:04:12Z", "type": "commit"}, {"oid": "498b4bf02c68e90860059b5df82ab0ef64dd1ed5", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/498b4bf02c68e90860059b5df82ab0ef64dd1ed5", "message": "checkStyle", "committedDate": "2020-06-09T15:29:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1ODc0Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r437858747", "bodyText": "we could remove this comment. Cache rebuild already seem to happen in a dedicated thread", "author": "vamshin", "createdAt": "2020-06-10T04:51:41Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -396,4 +398,15 @@ public void setClusterService(ClusterService clusterService) {\n             }\n         }\n     }\n+\n+    public void onIndexModule(IndexModule module) {\n+        module.addSettingsUpdateConsumer(\n+                INDEX_KNN_ALGO_PARAM_EF_SEARCH_SETTING,\n+                newVal -> {\n+                    logger.debug(\"The value of setting [{}] changed to [{}]\", KNN_ALGO_PARAM_EF_SEARCH, newVal);\n+                    latestSettings.put(KNN_ALGO_PARAM_EF_SEARCH, newVal);\n+                    // spawn a thread", "originalCommit": "498b4bf02c68e90860059b5df82ab0ef64dd1ed5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a6a269f31d67862cd4b7bac5509ff86ec161c79", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\nindex a641318..bf71686 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n\n@@ -405,7 +405,7 @@ public class KNNSettings {\n                 newVal -> {\n                     logger.debug(\"The value of setting [{}] changed to [{}]\", KNN_ALGO_PARAM_EF_SEARCH, newVal);\n                     latestSettings.put(KNN_ALGO_PARAM_EF_SEARCH, newVal);\n-                    // spawn a thread\n+                    // TODO: replace cache-rebuild with index reload into the cache\n                     KNNWeight.knnIndexCache.rebuild();\n                 });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1OTIxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r437859215", "bodyText": "rebuild whole cache might not be necessary as we could lose graphs of other indices. Once we have the clear cache api #68 , we could selectively evict entries of a particular index. We could leave a TODO  to fix after clear cache api is built. Would be great to create an issue as well to just track the fix?", "author": "vamshin", "createdAt": "2020-06-10T04:53:34Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -396,4 +398,15 @@ public void setClusterService(ClusterService clusterService) {\n             }\n         }\n     }\n+\n+    public void onIndexModule(IndexModule module) {\n+        module.addSettingsUpdateConsumer(\n+                INDEX_KNN_ALGO_PARAM_EF_SEARCH_SETTING,\n+                newVal -> {\n+                    logger.debug(\"The value of setting [{}] changed to [{}]\", KNN_ALGO_PARAM_EF_SEARCH, newVal);\n+                    latestSettings.put(KNN_ALGO_PARAM_EF_SEARCH, newVal);\n+                    // spawn a thread\n+                    KNNWeight.knnIndexCache.rebuild();", "originalCommit": "498b4bf02c68e90860059b5df82ab0ef64dd1ed5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1NDM2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438254369", "bodyText": "Yes, I agree once we have functionality to manually remove and load an index's graphs, we should implement a reload function that operates at the index level. For now, a TODO will be fine.", "author": "jmazanec15", "createdAt": "2020-06-10T16:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1OTIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a6a269f31d67862cd4b7bac5509ff86ec161c79", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\nindex a641318..bf71686 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n\n@@ -405,7 +405,7 @@ public class KNNSettings {\n                 newVal -> {\n                     logger.debug(\"The value of setting [{}] changed to [{}]\", KNN_ALGO_PARAM_EF_SEARCH, newVal);\n                     latestSettings.put(KNN_ALGO_PARAM_EF_SEARCH, newVal);\n-                    // spawn a thread\n+                    // TODO: replace cache-rebuild with index reload into the cache\n                     KNNWeight.knnIndexCache.rebuild();\n                 });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1ODAwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r432658005", "bodyText": "I would say if you include quotes include the source. Also, I think this description can be expanded, or a link to the NMSLIB documentation that discusses it would be helpful. Here is a link", "author": "jmazanec15", "createdAt": "2020-05-29T18:18:36Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -144,11 +144,12 @@ private void onRemoval(RemovalNotification<String, KNNIndexCacheEntry> removalNo\n      *\n      * @param key indexPath where the serialized hnsw graph is stored\n      * @param indexName index name\n+     * @param efSearch HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors\"", "originalCommit": "7e06873aef0afee53afbe02ea8f905d8fb982696", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyODc4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438428786", "bodyText": "Thank you for comment. Good to remember that although the current line is outdated.", "author": "chenqi0805", "createdAt": "2020-06-10T21:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1ODAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "abed522998fd90ff265750c7d56bbfafed5bfe68", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\nindex 7a5df4f..0cacf86 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n\n@@ -144,12 +144,11 @@ public class KNNIndexCache implements Closeable {\n      *\n      * @param key indexPath where the serialized hnsw graph is stored\n      * @param indexName index name\n-     * @param efSearch HNSW parameter that represents \"the size of the dynamic list for the nearest neighbors\"\n      * @return KNNIndex holding the heap pointer of the loaded graph\n      */\n-    public KNNIndex getIndex(String key, final String indexName, final int efSearch) {\n+    public KNNIndex getIndex(String key, final String indexName) {\n         try {\n-            final KNNIndexCacheEntry knnIndexCacheEntry = cache.get(key, () -> loadIndex(key, indexName, efSearch));\n+            final KNNIndexCacheEntry knnIndexCacheEntry = cache.get(key, () -> loadIndex(key, indexName));\n             return knnIndexCacheEntry.getKnnIndex();\n         } catch (ExecutionException e) {\n             throw new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1NjI5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438256292", "bodyText": "Nit: Can you prepend log statement with \"[KNN] \" so that it is easier to identify when going through logs?", "author": "jmazanec15", "createdAt": "2020-06-10T16:28:19Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -396,4 +398,15 @@ public void setClusterService(ClusterService clusterService) {\n             }\n         }\n     }\n+\n+    public void onIndexModule(IndexModule module) {\n+        module.addSettingsUpdateConsumer(\n+                INDEX_KNN_ALGO_PARAM_EF_SEARCH_SETTING,\n+                newVal -> {\n+                    logger.debug(\"The value of setting [{}] changed to [{}]\", KNN_ALGO_PARAM_EF_SEARCH, newVal);", "originalCommit": "498b4bf02c68e90860059b5df82ab0ef64dd1ed5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a6a269f31d67862cd4b7bac5509ff86ec161c79", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\nindex a641318..bf71686 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n\n@@ -405,7 +405,7 @@ public class KNNSettings {\n                 newVal -> {\n                     logger.debug(\"The value of setting [{}] changed to [{}]\", KNN_ALGO_PARAM_EF_SEARCH, newVal);\n                     latestSettings.put(KNN_ALGO_PARAM_EF_SEARCH, newVal);\n-                    // spawn a thread\n+                    // TODO: replace cache-rebuild with index reload into the cache\n                     KNNWeight.knnIndexCache.rebuild();\n                 });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1NzkzMA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438257930", "bodyText": "Just curious, what happens if a invalid parameter is passed in? Does it fail gracefully?", "author": "jmazanec15", "createdAt": "2020-06-10T16:30:55Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -396,4 +398,15 @@ public void setClusterService(ClusterService clusterService) {\n             }\n         }\n     }\n+\n+    public void onIndexModule(IndexModule module) {\n+        module.addSettingsUpdateConsumer(\n+                INDEX_KNN_ALGO_PARAM_EF_SEARCH_SETTING,\n+                newVal -> {", "originalCommit": "498b4bf02c68e90860059b5df82ab0ef64dd1ed5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4NDc3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438284773", "bodyText": "Good point to check. I expect the validator in INDEX_KNN_ALGO_PARAM_EF_SEARCH_SETTING should handle it.", "author": "chenqi0805", "createdAt": "2020-06-10T17:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1NzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NDg3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438454873", "bodyText": "I have expanded testUpdateIndexSetting to cover invalid update now.", "author": "chenqi0805", "createdAt": "2020-06-10T23:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1NzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NTY2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438465662", "bodyText": "Great thanks", "author": "jmazanec15", "createdAt": "2020-06-10T23:43:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1NzkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "6a6a269f31d67862cd4b7bac5509ff86ec161c79", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\nindex a641318..bf71686 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java\n\n@@ -405,7 +405,7 @@ public class KNNSettings {\n                 newVal -> {\n                     logger.debug(\"The value of setting [{}] changed to [{}]\", KNN_ALGO_PARAM_EF_SEARCH, newVal);\n                     latestSettings.put(KNN_ALGO_PARAM_EF_SEARCH, newVal);\n-                    // spawn a thread\n+                    // TODO: replace cache-rebuild with index reload into the cache\n                     KNNWeight.knnIndexCache.rebuild();\n                 });\n     }\n"}}, {"oid": "6a6a269f31d67862cd4b7bac5509ff86ec161c79", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/6a6a269f31d67862cd4b7bac5509ff86ec161c79", "message": "MNT: comment", "committedDate": "2020-06-10T21:53:58Z", "type": "commit"}, {"oid": "235683b92fb3e6a6ce8db37bdec1150a87f0d09c", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/235683b92fb3e6a6ce8db37bdec1150a87f0d09c", "message": "MNT: log statement", "committedDate": "2020-06-10T21:56:23Z", "type": "commit"}, {"oid": "0c56d966cfef0dc57a9f682a0c76429a2ef59b41", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/0c56d966cfef0dc57a9f682a0c76429a2ef59b41", "message": "TST: include invalid update", "committedDate": "2020-06-10T22:03:05Z", "type": "commit"}, {"oid": "80b5dd0e468fbac2cba259e2a1d68beabd2fdaf1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/80b5dd0e468fbac2cba259e2a1d68beabd2fdaf1", "message": "TST: cache miss for search after update setting", "committedDate": "2020-06-10T23:05:08Z", "type": "commit"}, {"oid": "c313fa08b5bd465c851136cd59f22e5e9c0d38e1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/c313fa08b5bd465c851136cd59f22e5e9c0d38e1", "message": "FIX: old artifact", "committedDate": "2020-06-10T23:17:22Z", "type": "commit"}, {"oid": "2424d7a4a3363bfb911cf93fc87f0ce75cf73717", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/2424d7a4a3363bfb911cf93fc87f0ce75cf73717", "message": "RMV: unused setting", "committedDate": "2020-06-10T23:25:57Z", "type": "commit"}, {"oid": "211c245c062e1a98a8c679b2e6cc245b457b3f57", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/211c245c062e1a98a8c679b2e6cc245b457b3f57", "message": "FIX: test logic", "committedDate": "2020-06-10T23:34:27Z", "type": "commit"}, {"oid": "0aa1dc3c608afdd1c7580b814e3758d39ba3328b", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/0aa1dc3c608afdd1c7580b814e3758d39ba3328b", "message": "MNT: comment", "committedDate": "2020-06-10T23:36:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MTUyMw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438471523", "bodyText": "I think the purpose of this test case is to confirm that the Index is evicted from the cache after the settings are updated. That being said, I think the test should be renamed testCacheRebuiltAfterUpdateIndexSettings.\nFurther more, instead of comparing deltas of hit and miss count, you can check that the cache is empty with the indices_in_cache stat. Then, you can just\n\nCreate index\nIndex sample docs\nSearch index\nConfirm index is present in cache\nUpdate index settings\nConfirm there are no indices in the cache.", "author": "jmazanec15", "createdAt": "2020-06-11T00:03:32Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNESSettingsTestIT.java", "diffHunk": "@@ -87,5 +91,73 @@ public void testCreateIndexWithInvalidSpaceType() throws IOException {\n             () -> createKnnIndex(INDEX_NAME, invalidSettings, createKnnIndexMapping(FIELD_NAME, 2)));\n         assertThat(ex.getMessage(), containsString(String.format(\"Unsupported space type: %s\", invalidSpaceType)));\n     }\n+\n+    public void testUpdateIndexSetting() throws IOException {\n+        Settings settings = Settings.builder()\n+                .put(\"index.knn\", true)\n+                .put(KNNSettings.KNN_ALGO_PARAM_EF_SEARCH, 512)\n+                .build();\n+        createKnnIndex(INDEX_NAME, settings, createKnnIndexMapping(FIELD_NAME, 2));\n+        assertEquals(\"512\", getIndexSettingByName(INDEX_NAME, KNNSettings.KNN_ALGO_PARAM_EF_SEARCH));\n+\n+        updateIndexSettings(INDEX_NAME, Settings.builder().put(KNNSettings.KNN_ALGO_PARAM_EF_SEARCH, 400));\n+        assertEquals(\"400\", getIndexSettingByName(INDEX_NAME, KNNSettings.KNN_ALGO_PARAM_EF_SEARCH));\n+\n+        Exception ex = expectThrows(ResponseException.class,\n+                () -> updateIndexSettings(INDEX_NAME,\n+                        Settings.builder().put(KNNSettings.KNN_ALGO_PARAM_EF_SEARCH, 1)));\n+        assertThat(ex.getMessage(),\n+                containsString(\"Failed to parse value [1] for setting [index.knn.algo_param.ef_search] must be >= 2\"));\n+    }\n+\n+    public void testKNNStatsAfterUpdateIndexSetting() throws IOException {", "originalCommit": "0aa1dc3c608afdd1c7580b814e3758d39ba3328b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwMDY1NA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438500654", "bodyText": "Cool. Fixed.", "author": "chenqi0805", "createdAt": "2020-06-11T01:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MTUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "21f10c384ae1a96a0f15f31a800496ea6044d864", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNESSettingsTestIT.java b/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNESSettingsTestIT.java\nindex 1341c5f..9279c92 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNESSettingsTestIT.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNESSettingsTestIT.java\n\n@@ -110,14 +110,8 @@ public class KNNESSettingsTestIT extends KNNRestTestCase {\n                 containsString(\"Failed to parse value [1] for setting [index.knn.algo_param.ef_search] must be >= 2\"));\n     }\n \n-    public void testKNNStatsAfterUpdateIndexSetting() throws IOException {\n-        Response response = getKnnStats(Collections.emptyList(), Collections.emptyList());\n-        String responseBody = EntityUtils.toString(response.getEntity());\n-\n-        Map<String, Object> nodeStats0 = parseNodeStatsResponse(responseBody).get(0);\n-        Integer hitCount0 = (Integer) nodeStats0.get(StatNames.HIT_COUNT.getName());\n-        Integer missCount0 = (Integer) nodeStats0.get(StatNames.MISS_COUNT.getName());\n-\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCacheRebuiltAfterUpdateIndexSettings() throws IOException {\n         createKnnIndex(INDEX_NAME, createKnnIndexMapping(FIELD_NAME, 2));\n \n         Float[] vector = {6.0f, 6.0f};\n"}}, {"oid": "21f10c384ae1a96a0f15f31a800496ea6044d864", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/21f10c384ae1a96a0f15f31a800496ea6044d864", "message": "MAINT: simplify test logic", "committedDate": "2020-06-11T01:57:51Z", "type": "commit"}]}