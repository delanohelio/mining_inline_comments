{"pr_number": 6448, "pr_title": "fixed incoherent unit test cases in allele subsetting utils", "pr_createdAt": "2020-02-09T06:18:31Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6448", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NjA4MA==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r377846080", "bodyText": "It would be great to fix these typos for searchability -- tripoid > triploid", "author": "ldgauthier", "createdAt": "2020-02-11T19:21:03Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java", "diffHunk": "@@ -105,19 +107,20 @@ public void testUpdatePLsAndADData(final VariantContext originalVC,\n         // for P=3 and N=2, the ordering is 000, 001, 011, 111, 002, 012, 112, 022, 122, 222\n         final double[] triploidRef3AllelesPL = new double[]{0, -10, -20, -30, -40, -50, -60, -70, -80, -90};\n         final double[] tripoidAltC3AllelesPL = new double[]{-10, 0, -20, -30, -40, -50, -60, -70, -80, -90};\n+        final double[] tripoidAltG3AllelesPL = new double[]{-10, -40, -70, -90, 0, -50, -80, -20, -60, -30};", "originalCommit": "a5b14c71dbbeace5b5756cfecc4a272bba8b7ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMTkzMA==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r378001930", "bodyText": "done", "author": "davidbenjamin", "createdAt": "2020-02-12T01:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NjA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "306dd0670af62de408f3251f690e6fc7faf94980", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\nindex 3df423fba..eca0d23fd 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\n\n@@ -86,98 +86,95 @@ public class AlleleSubsettingUtilsUnitTest extends GATKBaseTest {\n         tests.add(new Object[]{new VariantContextBuilder(vcBase).genotypes(emptyGT).make(), new VariantContextBuilder(vcBase).alleles(AC).make(), Collections.singletonList(emptyGT)});\n \n         // actually subsetting down from multiple alt values\n-        final double[] homRef3AllelesPL = new double[]{0, -10, -20, -30, -40, -50};\n-        final double[] hetRefC3AllelesPL = new double[]{-10, 0, -20, -30, -40, -50};\n-        final double[] homC3AllelesPL = new double[]{-20, -10, 0, -30, -40, -50};\n-        final double[] hetRefG3AllelesPL = new double[]{-20, -10, -30, 0, -40, -50};\n-        final double[] hetCG3AllelesPL = new double[]{-20, -10, -30, -40, 0, -50}; // AA, AC, CC, AG, CG, GG\n-        final double[] homG3AllelesPL = new double[]{-20, -10, -30, -40, -50, 0};  // AA, AC, CC, AG, CG, GG\n+        final double[] homRef3AllelesPL = new double[]{0, -30, -60, -30, -60, -60};\n+        final double[] hetRefC3AllelesPL = new double[]{-20, 0, -20, -30, -40, -60};\n+        final double[] homC3AllelesPL = new double[]{-50, -30, 0, -70, -30, -70};\n+        final double[] hetRefG3AllelesPL = new double[]{-50, -30, -70, 0, -30, -20};\n+        final double[] homG3AllelesPL = new double[]{-50, -70, -70, -30, -30, 0};  // AA, AC, CC, AG, CG, GG\n \n         final int[] homRef3AllelesAD = new int[]{20, 0, 1};\n-        final int[] hetRefC3AllelesAD = new int[]{10, 10, 1};\n+        final int[] hetRefC3AllelesAD = new int[]{14, 7, 1};\n         final int[] homC3AllelesAD = new int[]{0, 20, 1};\n-        final int[] hetRefG3AllelesAD = new int[]{10, 0, 11};\n-        final int[] hetCG3AllelesAD = new int[]{0, 12, 11}; // AA, AC, CC, AG, CG, GG\n+        final int[] hetRefG3AllelesAD = new int[]{14, 0, 7};\n         final int[] homG3AllelesAD = new int[]{0, 1, 21};  // AA, AC, CC, AG, CG, GG\n \n-        final double[] haploidRef3AllelesPL = new double[]{0, -10, -20};\n-        final double[] haploidAltC3AllelesPL = new double[]{-10, 0, -20};\n-        final double[] haploidAltG3AllelesPL = new double[]{-20, -10, 0};\n+        final double[] haploidRef3AllelesPL = new double[]{0, -50, -50};\n+        final double[] haploidAltC3AllelesPL = new double[]{-30, 0, -60};\n+        final double[] haploidAltG3AllelesPL = new double[]{-40, -70, 0};\n \n         // for P=3 and N=2, the ordering is 000, 001, 011, 111, 002, 012, 112, 022, 122, 222\n-        final double[] triploidRef3AllelesPL = new double[]{0, -10, -20, -30, -40, -50, -60, -70, -80, -90};\n-        final double[] tripoidAltC3AllelesPL = new double[]{-10, 0, -20, -30, -40, -50, -60, -70, -80, -90};\n-        final double[] tripoidAltG3AllelesPL = new double[]{-10, -40, -70, -90, 0, -50, -80, -20, -60, -30};\n+        final double[] triploidRef3AllelesPL = new double[]{0, -30, -60, -90, -30, -60, -90, -60, -90, -90};\n+        final double[] triploidAltC3AllelesPL = new double[]{-20, 0, -20, -50, -40, -70, -90, -90, -100, -100};\n+        final double[] triploidAltG3AllelesPL = new double[]{-20, -40, -90, -100, 0, -70, -100, -20, -90, -50};\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).AD(homRef3AllelesAD).PL(haploidRef3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).PL(new double[]{0, -10}).AD(new int[]{20, 0}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).PL(new double[]{0, -50}).AD(new int[]{20, 0}).GQ(500).make())});\n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).AD(homC3AllelesAD).PL(haploidAltC3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).PL(new double[]{-10, 0}).AD(new int[]{0, 20}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).PL(new double[]{-30, 0}).AD(new int[]{0, 20}).GQ(300).make())});\n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).AD(homG3AllelesAD).PL(haploidAltG3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).PL(new double[]{-20, 0}).AD(new int[]{0, 21}).GQ(200).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).PL(new double[]{-40, 0}).AD(new int[]{0, 21}).GQ(400).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).AD(homRef3AllelesAD).PL(triploidRef3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).PL(new double[]{0, -10, -20, -30}).AD(new int[]{20, 0}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).PL(new double[]{0, -30, -60, -90}).AD(new int[]{20, 0}).GQ(300).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).AD(hetRefC3AllelesAD).PL(tripoidAltC3AllelesPL).make()).make(),\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).AD(hetRefC3AllelesAD).PL(triploidAltC3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 10}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-20, 0, -20, -50}).AD(new int[]{14, 7}).GQ(200).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(hetRefG3AllelesAD).PL(tripoidAltG3AllelesPL).make()).make(),\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(hetRefG3AllelesAD).PL(triploidAltG3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 11}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{-20, 0, -20, -50}).AD(new int[]{14, 7}).GQ(200).make())});\n \n         final int[] homRef3AllelesSAC = new int[]{20, 19, 0, 1, 3, 4};\n         final int[] hetRefC3AllelesSAC = new int[]{10, 9, 10, 9, 1, 1};\n         final int[] homC3AllelesSAC = new int[]{0, 0, 20, 20, 1, 1};\n         final int[] hetRefG3AllelesSAC = new int[]{10, 10, 0, 0, 11, 11};\n-        final int[] hetCG3AllelesSAC = new int[]{0, 0, 12, 12, 11, 11}; // AA, AC, CC, AG, CG, GG\n         final int[] homG3AllelesSAC = new int[]{0, 0, 1, 1, 21, 21};  // AA, AC, CC, AG, CG, GG\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AA).AD(homRef3AllelesAD).PL(homRef3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homRef3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{0, -10, -20}).AD(new int[]{20, 0}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{20, 19, 0, 1}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{0, -30, -60}).AD(new int[]{20, 0}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{20, 19, 0, 1}).GQ(300).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AC).AD(hetRefC3AllelesAD).PL(hetRefC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AC).PL(new double[]{-10, 0, -20}).AD(new int[]{10, 10}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 9, 10, 9}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AC).PL(new double[]{-20, 0, -20}).AD(new int[]{14, 7}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 9, 10, 9}).GQ(200).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(CC).AD(homC3AllelesAD).PL(homC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(CC).PL(new double[]{-20, -10, 0}).AD(new int[]{0, 20}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 20, 20}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(CC).PL(new double[]{-50, -30, 0}).AD(new int[]{0, 20}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 20, 20}).GQ(300).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AG).AD(hetRefG3AllelesAD).PL(hetRefG3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefG3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AG).PL(new double[]{-20, 0, -50}).AD(new int[]{10, 11}).\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AG).PL(new double[]{-50, 0, -20}).AD(new int[]{14, 7}).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 10, 11, 11}).GQ(200).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(GG).AD(homG3AllelesAD).PL(homG3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homG3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(GG).PL(new double[]{-20, -40, 0}).AD(new int[]{0, 21}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 21, 21}).GQ(200).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(GG).PL(new double[]{-50, -30, 0}).AD(new int[]{0, 21}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 21, 21}).GQ(300).make())});\n \n         return tests.toArray(new Object[][]{});\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0ODkyMA==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r377848920", "bodyText": "The genotypes around line 74 have bad ADs too -- Genotype acGT and Genotype ccGT", "author": "ldgauthier", "createdAt": "2020-02-11T19:26:10Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java", "diffHunk": "@@ -56,7 +56,9 @@ public void testUpdatePLsAndADData(final VariantContext originalVC,\n         final List<Allele> AA = Arrays.asList(Aref, Aref);\n         final List<Allele> AC = Arrays.asList(Aref,C);\n         final List<Allele> CC = Arrays.asList(C,C);\n+        final List<Allele> CG = Arrays.asList(C,G);\n         final List<Allele> AG = Arrays.asList(Aref,G);\n+        final List<Allele> GG = Arrays.asList(G,G);", "originalCommit": "a5b14c71dbbeace5b5756cfecc4a272bba8b7ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNTg2Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r378005863", "bodyText": "done", "author": "davidbenjamin", "createdAt": "2020-02-12T02:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0ODkyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1ODkyNg==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r377858926", "bodyText": "The allele balance on this AD isn't great -- can we do like {14,7} so the genotype is more obvious?", "author": "ldgauthier", "createdAt": "2020-02-11T19:45:18Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java", "diffHunk": "@@ -130,9 +133,9 @@ public void testUpdatePLsAndADData(final VariantContext originalVC,\n                 Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 10}).GQ(100).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(homRef3AllelesAD).PL(triploidRef3AllelesPL).make()).make(),\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(hetRefG3AllelesAD).PL(tripoidAltG3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{0, -40, -70, -90}).AD(new int[]{20, 1}).GQ(400).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 11}).GQ(100).make())});", "originalCommit": "a5b14c71dbbeace5b5756cfecc4a272bba8b7ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNzcxMA==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r378007710", "bodyText": "done", "author": "davidbenjamin", "createdAt": "2020-02-12T02:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1ODkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "306dd0670af62de408f3251f690e6fc7faf94980", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\nindex 3df423fba..eca0d23fd 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\n\n@@ -86,98 +86,95 @@ public class AlleleSubsettingUtilsUnitTest extends GATKBaseTest {\n         tests.add(new Object[]{new VariantContextBuilder(vcBase).genotypes(emptyGT).make(), new VariantContextBuilder(vcBase).alleles(AC).make(), Collections.singletonList(emptyGT)});\n \n         // actually subsetting down from multiple alt values\n-        final double[] homRef3AllelesPL = new double[]{0, -10, -20, -30, -40, -50};\n-        final double[] hetRefC3AllelesPL = new double[]{-10, 0, -20, -30, -40, -50};\n-        final double[] homC3AllelesPL = new double[]{-20, -10, 0, -30, -40, -50};\n-        final double[] hetRefG3AllelesPL = new double[]{-20, -10, -30, 0, -40, -50};\n-        final double[] hetCG3AllelesPL = new double[]{-20, -10, -30, -40, 0, -50}; // AA, AC, CC, AG, CG, GG\n-        final double[] homG3AllelesPL = new double[]{-20, -10, -30, -40, -50, 0};  // AA, AC, CC, AG, CG, GG\n+        final double[] homRef3AllelesPL = new double[]{0, -30, -60, -30, -60, -60};\n+        final double[] hetRefC3AllelesPL = new double[]{-20, 0, -20, -30, -40, -60};\n+        final double[] homC3AllelesPL = new double[]{-50, -30, 0, -70, -30, -70};\n+        final double[] hetRefG3AllelesPL = new double[]{-50, -30, -70, 0, -30, -20};\n+        final double[] homG3AllelesPL = new double[]{-50, -70, -70, -30, -30, 0};  // AA, AC, CC, AG, CG, GG\n \n         final int[] homRef3AllelesAD = new int[]{20, 0, 1};\n-        final int[] hetRefC3AllelesAD = new int[]{10, 10, 1};\n+        final int[] hetRefC3AllelesAD = new int[]{14, 7, 1};\n         final int[] homC3AllelesAD = new int[]{0, 20, 1};\n-        final int[] hetRefG3AllelesAD = new int[]{10, 0, 11};\n-        final int[] hetCG3AllelesAD = new int[]{0, 12, 11}; // AA, AC, CC, AG, CG, GG\n+        final int[] hetRefG3AllelesAD = new int[]{14, 0, 7};\n         final int[] homG3AllelesAD = new int[]{0, 1, 21};  // AA, AC, CC, AG, CG, GG\n \n-        final double[] haploidRef3AllelesPL = new double[]{0, -10, -20};\n-        final double[] haploidAltC3AllelesPL = new double[]{-10, 0, -20};\n-        final double[] haploidAltG3AllelesPL = new double[]{-20, -10, 0};\n+        final double[] haploidRef3AllelesPL = new double[]{0, -50, -50};\n+        final double[] haploidAltC3AllelesPL = new double[]{-30, 0, -60};\n+        final double[] haploidAltG3AllelesPL = new double[]{-40, -70, 0};\n \n         // for P=3 and N=2, the ordering is 000, 001, 011, 111, 002, 012, 112, 022, 122, 222\n-        final double[] triploidRef3AllelesPL = new double[]{0, -10, -20, -30, -40, -50, -60, -70, -80, -90};\n-        final double[] tripoidAltC3AllelesPL = new double[]{-10, 0, -20, -30, -40, -50, -60, -70, -80, -90};\n-        final double[] tripoidAltG3AllelesPL = new double[]{-10, -40, -70, -90, 0, -50, -80, -20, -60, -30};\n+        final double[] triploidRef3AllelesPL = new double[]{0, -30, -60, -90, -30, -60, -90, -60, -90, -90};\n+        final double[] triploidAltC3AllelesPL = new double[]{-20, 0, -20, -50, -40, -70, -90, -90, -100, -100};\n+        final double[] triploidAltG3AllelesPL = new double[]{-20, -40, -90, -100, 0, -70, -100, -20, -90, -50};\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).AD(homRef3AllelesAD).PL(haploidRef3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).PL(new double[]{0, -10}).AD(new int[]{20, 0}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).PL(new double[]{0, -50}).AD(new int[]{20, 0}).GQ(500).make())});\n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).AD(homC3AllelesAD).PL(haploidAltC3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).PL(new double[]{-10, 0}).AD(new int[]{0, 20}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).PL(new double[]{-30, 0}).AD(new int[]{0, 20}).GQ(300).make())});\n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).AD(homG3AllelesAD).PL(haploidAltG3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).PL(new double[]{-20, 0}).AD(new int[]{0, 21}).GQ(200).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).PL(new double[]{-40, 0}).AD(new int[]{0, 21}).GQ(400).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).AD(homRef3AllelesAD).PL(triploidRef3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).PL(new double[]{0, -10, -20, -30}).AD(new int[]{20, 0}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).PL(new double[]{0, -30, -60, -90}).AD(new int[]{20, 0}).GQ(300).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).AD(hetRefC3AllelesAD).PL(tripoidAltC3AllelesPL).make()).make(),\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).AD(hetRefC3AllelesAD).PL(triploidAltC3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 10}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-20, 0, -20, -50}).AD(new int[]{14, 7}).GQ(200).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(hetRefG3AllelesAD).PL(tripoidAltG3AllelesPL).make()).make(),\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(hetRefG3AllelesAD).PL(triploidAltG3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 11}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{-20, 0, -20, -50}).AD(new int[]{14, 7}).GQ(200).make())});\n \n         final int[] homRef3AllelesSAC = new int[]{20, 19, 0, 1, 3, 4};\n         final int[] hetRefC3AllelesSAC = new int[]{10, 9, 10, 9, 1, 1};\n         final int[] homC3AllelesSAC = new int[]{0, 0, 20, 20, 1, 1};\n         final int[] hetRefG3AllelesSAC = new int[]{10, 10, 0, 0, 11, 11};\n-        final int[] hetCG3AllelesSAC = new int[]{0, 0, 12, 12, 11, 11}; // AA, AC, CC, AG, CG, GG\n         final int[] homG3AllelesSAC = new int[]{0, 0, 1, 1, 21, 21};  // AA, AC, CC, AG, CG, GG\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AA).AD(homRef3AllelesAD).PL(homRef3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homRef3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{0, -10, -20}).AD(new int[]{20, 0}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{20, 19, 0, 1}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{0, -30, -60}).AD(new int[]{20, 0}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{20, 19, 0, 1}).GQ(300).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AC).AD(hetRefC3AllelesAD).PL(hetRefC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AC).PL(new double[]{-10, 0, -20}).AD(new int[]{10, 10}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 9, 10, 9}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AC).PL(new double[]{-20, 0, -20}).AD(new int[]{14, 7}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 9, 10, 9}).GQ(200).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(CC).AD(homC3AllelesAD).PL(homC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(CC).PL(new double[]{-20, -10, 0}).AD(new int[]{0, 20}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 20, 20}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(CC).PL(new double[]{-50, -30, 0}).AD(new int[]{0, 20}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 20, 20}).GQ(300).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AG).AD(hetRefG3AllelesAD).PL(hetRefG3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefG3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AG).PL(new double[]{-20, 0, -50}).AD(new int[]{10, 11}).\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AG).PL(new double[]{-50, 0, -20}).AD(new int[]{14, 7}).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 10, 11, 11}).GQ(200).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(GG).AD(homG3AllelesAD).PL(homG3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homG3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(GG).PL(new double[]{-20, -40, 0}).AD(new int[]{0, 21}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 21, 21}).GQ(200).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(GG).PL(new double[]{-50, -30, 0}).AD(new int[]{0, 21}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 21, 21}).GQ(300).make())});\n \n         return tests.toArray(new Object[][]{});\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MDYwMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r377860601", "bodyText": "Same here -- I'd rather a 2:1 ratio on AD.  And the PLs don't look big enough.", "author": "ldgauthier", "createdAt": "2020-02-11T19:48:27Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java", "diffHunk": "@@ -130,9 +133,9 @@ public void testUpdatePLsAndADData(final VariantContext originalVC,\n                 Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 10}).GQ(100).make())});", "originalCommit": "a5b14c71dbbeace5b5756cfecc4a272bba8b7ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0MTE4NA==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r378041184", "bodyText": "done and made the PLs more realistic", "author": "davidbenjamin", "createdAt": "2020-02-12T04:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MDYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "306dd0670af62de408f3251f690e6fc7faf94980", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\nindex 3df423fba..eca0d23fd 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\n\n@@ -86,98 +86,95 @@ public class AlleleSubsettingUtilsUnitTest extends GATKBaseTest {\n         tests.add(new Object[]{new VariantContextBuilder(vcBase).genotypes(emptyGT).make(), new VariantContextBuilder(vcBase).alleles(AC).make(), Collections.singletonList(emptyGT)});\n \n         // actually subsetting down from multiple alt values\n-        final double[] homRef3AllelesPL = new double[]{0, -10, -20, -30, -40, -50};\n-        final double[] hetRefC3AllelesPL = new double[]{-10, 0, -20, -30, -40, -50};\n-        final double[] homC3AllelesPL = new double[]{-20, -10, 0, -30, -40, -50};\n-        final double[] hetRefG3AllelesPL = new double[]{-20, -10, -30, 0, -40, -50};\n-        final double[] hetCG3AllelesPL = new double[]{-20, -10, -30, -40, 0, -50}; // AA, AC, CC, AG, CG, GG\n-        final double[] homG3AllelesPL = new double[]{-20, -10, -30, -40, -50, 0};  // AA, AC, CC, AG, CG, GG\n+        final double[] homRef3AllelesPL = new double[]{0, -30, -60, -30, -60, -60};\n+        final double[] hetRefC3AllelesPL = new double[]{-20, 0, -20, -30, -40, -60};\n+        final double[] homC3AllelesPL = new double[]{-50, -30, 0, -70, -30, -70};\n+        final double[] hetRefG3AllelesPL = new double[]{-50, -30, -70, 0, -30, -20};\n+        final double[] homG3AllelesPL = new double[]{-50, -70, -70, -30, -30, 0};  // AA, AC, CC, AG, CG, GG\n \n         final int[] homRef3AllelesAD = new int[]{20, 0, 1};\n-        final int[] hetRefC3AllelesAD = new int[]{10, 10, 1};\n+        final int[] hetRefC3AllelesAD = new int[]{14, 7, 1};\n         final int[] homC3AllelesAD = new int[]{0, 20, 1};\n-        final int[] hetRefG3AllelesAD = new int[]{10, 0, 11};\n-        final int[] hetCG3AllelesAD = new int[]{0, 12, 11}; // AA, AC, CC, AG, CG, GG\n+        final int[] hetRefG3AllelesAD = new int[]{14, 0, 7};\n         final int[] homG3AllelesAD = new int[]{0, 1, 21};  // AA, AC, CC, AG, CG, GG\n \n-        final double[] haploidRef3AllelesPL = new double[]{0, -10, -20};\n-        final double[] haploidAltC3AllelesPL = new double[]{-10, 0, -20};\n-        final double[] haploidAltG3AllelesPL = new double[]{-20, -10, 0};\n+        final double[] haploidRef3AllelesPL = new double[]{0, -50, -50};\n+        final double[] haploidAltC3AllelesPL = new double[]{-30, 0, -60};\n+        final double[] haploidAltG3AllelesPL = new double[]{-40, -70, 0};\n \n         // for P=3 and N=2, the ordering is 000, 001, 011, 111, 002, 012, 112, 022, 122, 222\n-        final double[] triploidRef3AllelesPL = new double[]{0, -10, -20, -30, -40, -50, -60, -70, -80, -90};\n-        final double[] tripoidAltC3AllelesPL = new double[]{-10, 0, -20, -30, -40, -50, -60, -70, -80, -90};\n-        final double[] tripoidAltG3AllelesPL = new double[]{-10, -40, -70, -90, 0, -50, -80, -20, -60, -30};\n+        final double[] triploidRef3AllelesPL = new double[]{0, -30, -60, -90, -30, -60, -90, -60, -90, -90};\n+        final double[] triploidAltC3AllelesPL = new double[]{-20, 0, -20, -50, -40, -70, -90, -90, -100, -100};\n+        final double[] triploidAltG3AllelesPL = new double[]{-20, -40, -90, -100, 0, -70, -100, -20, -90, -50};\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).AD(homRef3AllelesAD).PL(haploidRef3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).PL(new double[]{0, -10}).AD(new int[]{20, 0}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).PL(new double[]{0, -50}).AD(new int[]{20, 0}).GQ(500).make())});\n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).AD(homC3AllelesAD).PL(haploidAltC3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).PL(new double[]{-10, 0}).AD(new int[]{0, 20}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).PL(new double[]{-30, 0}).AD(new int[]{0, 20}).GQ(300).make())});\n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).AD(homG3AllelesAD).PL(haploidAltG3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).PL(new double[]{-20, 0}).AD(new int[]{0, 21}).GQ(200).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).PL(new double[]{-40, 0}).AD(new int[]{0, 21}).GQ(400).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).AD(homRef3AllelesAD).PL(triploidRef3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).PL(new double[]{0, -10, -20, -30}).AD(new int[]{20, 0}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).PL(new double[]{0, -30, -60, -90}).AD(new int[]{20, 0}).GQ(300).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).AD(hetRefC3AllelesAD).PL(tripoidAltC3AllelesPL).make()).make(),\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).AD(hetRefC3AllelesAD).PL(triploidAltC3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 10}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-20, 0, -20, -50}).AD(new int[]{14, 7}).GQ(200).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(hetRefG3AllelesAD).PL(tripoidAltG3AllelesPL).make()).make(),\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(hetRefG3AllelesAD).PL(triploidAltG3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 11}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{-20, 0, -20, -50}).AD(new int[]{14, 7}).GQ(200).make())});\n \n         final int[] homRef3AllelesSAC = new int[]{20, 19, 0, 1, 3, 4};\n         final int[] hetRefC3AllelesSAC = new int[]{10, 9, 10, 9, 1, 1};\n         final int[] homC3AllelesSAC = new int[]{0, 0, 20, 20, 1, 1};\n         final int[] hetRefG3AllelesSAC = new int[]{10, 10, 0, 0, 11, 11};\n-        final int[] hetCG3AllelesSAC = new int[]{0, 0, 12, 12, 11, 11}; // AA, AC, CC, AG, CG, GG\n         final int[] homG3AllelesSAC = new int[]{0, 0, 1, 1, 21, 21};  // AA, AC, CC, AG, CG, GG\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AA).AD(homRef3AllelesAD).PL(homRef3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homRef3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{0, -10, -20}).AD(new int[]{20, 0}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{20, 19, 0, 1}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{0, -30, -60}).AD(new int[]{20, 0}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{20, 19, 0, 1}).GQ(300).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AC).AD(hetRefC3AllelesAD).PL(hetRefC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AC).PL(new double[]{-10, 0, -20}).AD(new int[]{10, 10}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 9, 10, 9}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AC).PL(new double[]{-20, 0, -20}).AD(new int[]{14, 7}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 9, 10, 9}).GQ(200).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(CC).AD(homC3AllelesAD).PL(homC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(CC).PL(new double[]{-20, -10, 0}).AD(new int[]{0, 20}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 20, 20}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(CC).PL(new double[]{-50, -30, 0}).AD(new int[]{0, 20}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 20, 20}).GQ(300).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AG).AD(hetRefG3AllelesAD).PL(hetRefG3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefG3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AG).PL(new double[]{-20, 0, -50}).AD(new int[]{10, 11}).\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AG).PL(new double[]{-50, 0, -20}).AD(new int[]{14, 7}).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 10, 11, 11}).GQ(200).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(GG).AD(homG3AllelesAD).PL(homG3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homG3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(GG).PL(new double[]{-20, -40, 0}).AD(new int[]{0, 21}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 21, 21}).GQ(200).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(GG).PL(new double[]{-50, -30, 0}).AD(new int[]{0, 21}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 21, 21}).GQ(300).make())});\n \n         return tests.toArray(new Object[][]{});\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzE0OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r377863149", "bodyText": "What was wrong with this test case?", "author": "ldgauthier", "createdAt": "2020-02-11T19:53:15Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java", "diffHunk": "@@ -149,38 +152,31 @@ public void testUpdatePLsAndADData(final VariantContext originalVC,\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{20, 19, 0, 1}).GQ(100).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AA).AD(hetRefC3AllelesAD).PL(hetRefC3AllelesPL).\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AC).AD(hetRefC3AllelesAD).PL(hetRefC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{-10, 0, -20}).AD(new int[]{10, 10}).\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AC).PL(new double[]{-10, 0, -20}).AD(new int[]{10, 10}).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 9, 10, 9}).GQ(100).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AA).AD(homC3AllelesAD).PL(homC3AllelesPL).\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(CC).AD(homC3AllelesAD).PL(homC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{-20, -10, 0}).AD(new int[]{0, 20}).\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(CC).PL(new double[]{-20, -10, 0}).AD(new int[]{0, 20}).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 20, 20}).GQ(100).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AA).AD(hetRefG3AllelesAD).PL(hetRefG3AllelesPL).\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AG).AD(hetRefG3AllelesAD).PL(hetRefG3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefG3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{-20, 0, -50}).AD(new int[]{10, 11}).\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AG).PL(new double[]{-20, 0, -50}).AD(new int[]{10, 11}).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 10, 11, 11}).GQ(200).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AA).AD(hetCG3AllelesAD).PL(hetCG3AllelesPL).", "originalCommit": "a5b14c71dbbeace5b5756cfecc4a272bba8b7ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTEwNg==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r378035106", "bodyText": "Based on the ADs and PLs this case was supposed to be: triallelic (A,C,G) variant with het alt (C/G) genotype, subset to just the ref and one alt allele.  But that throws an error since the genotype has both alt alleles.  Previously no error was thrown because the genotype was accidentally set as hom ref, contradicting the ADs and PLs.  The test as intended was inherently impossible.", "author": "davidbenjamin", "createdAt": "2020-02-12T04:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2NDQyNA==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r378364424", "bodyText": "Got it.  You can take it out entirely then.", "author": "ldgauthier", "createdAt": "2020-02-12T16:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NTA3Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6448#discussion_r378395072", "bodyText": "It's gone; the diff mixed-and-matched similar lines to give the appearance that part of this case remained.", "author": "davidbenjamin", "createdAt": "2020-02-12T17:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "306dd0670af62de408f3251f690e6fc7faf94980", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\nindex 3df423fba..eca0d23fd 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/genotyper/AlleleSubsettingUtilsUnitTest.java\n\n@@ -86,98 +86,95 @@ public class AlleleSubsettingUtilsUnitTest extends GATKBaseTest {\n         tests.add(new Object[]{new VariantContextBuilder(vcBase).genotypes(emptyGT).make(), new VariantContextBuilder(vcBase).alleles(AC).make(), Collections.singletonList(emptyGT)});\n \n         // actually subsetting down from multiple alt values\n-        final double[] homRef3AllelesPL = new double[]{0, -10, -20, -30, -40, -50};\n-        final double[] hetRefC3AllelesPL = new double[]{-10, 0, -20, -30, -40, -50};\n-        final double[] homC3AllelesPL = new double[]{-20, -10, 0, -30, -40, -50};\n-        final double[] hetRefG3AllelesPL = new double[]{-20, -10, -30, 0, -40, -50};\n-        final double[] hetCG3AllelesPL = new double[]{-20, -10, -30, -40, 0, -50}; // AA, AC, CC, AG, CG, GG\n-        final double[] homG3AllelesPL = new double[]{-20, -10, -30, -40, -50, 0};  // AA, AC, CC, AG, CG, GG\n+        final double[] homRef3AllelesPL = new double[]{0, -30, -60, -30, -60, -60};\n+        final double[] hetRefC3AllelesPL = new double[]{-20, 0, -20, -30, -40, -60};\n+        final double[] homC3AllelesPL = new double[]{-50, -30, 0, -70, -30, -70};\n+        final double[] hetRefG3AllelesPL = new double[]{-50, -30, -70, 0, -30, -20};\n+        final double[] homG3AllelesPL = new double[]{-50, -70, -70, -30, -30, 0};  // AA, AC, CC, AG, CG, GG\n \n         final int[] homRef3AllelesAD = new int[]{20, 0, 1};\n-        final int[] hetRefC3AllelesAD = new int[]{10, 10, 1};\n+        final int[] hetRefC3AllelesAD = new int[]{14, 7, 1};\n         final int[] homC3AllelesAD = new int[]{0, 20, 1};\n-        final int[] hetRefG3AllelesAD = new int[]{10, 0, 11};\n-        final int[] hetCG3AllelesAD = new int[]{0, 12, 11}; // AA, AC, CC, AG, CG, GG\n+        final int[] hetRefG3AllelesAD = new int[]{14, 0, 7};\n         final int[] homG3AllelesAD = new int[]{0, 1, 21};  // AA, AC, CC, AG, CG, GG\n \n-        final double[] haploidRef3AllelesPL = new double[]{0, -10, -20};\n-        final double[] haploidAltC3AllelesPL = new double[]{-10, 0, -20};\n-        final double[] haploidAltG3AllelesPL = new double[]{-20, -10, 0};\n+        final double[] haploidRef3AllelesPL = new double[]{0, -50, -50};\n+        final double[] haploidAltC3AllelesPL = new double[]{-30, 0, -60};\n+        final double[] haploidAltG3AllelesPL = new double[]{-40, -70, 0};\n \n         // for P=3 and N=2, the ordering is 000, 001, 011, 111, 002, 012, 112, 022, 122, 222\n-        final double[] triploidRef3AllelesPL = new double[]{0, -10, -20, -30, -40, -50, -60, -70, -80, -90};\n-        final double[] tripoidAltC3AllelesPL = new double[]{-10, 0, -20, -30, -40, -50, -60, -70, -80, -90};\n-        final double[] tripoidAltG3AllelesPL = new double[]{-10, -40, -70, -90, 0, -50, -80, -20, -60, -30};\n+        final double[] triploidRef3AllelesPL = new double[]{0, -30, -60, -90, -30, -60, -90, -60, -90, -90};\n+        final double[] triploidAltC3AllelesPL = new double[]{-20, 0, -20, -50, -40, -70, -90, -90, -100, -100};\n+        final double[] triploidAltG3AllelesPL = new double[]{-20, -40, -90, -100, 0, -70, -100, -20, -90, -50};\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).AD(homRef3AllelesAD).PL(haploidRef3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).PL(new double[]{0, -10}).AD(new int[]{20, 0}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(Aref)).PL(new double[]{0, -50}).AD(new int[]{20, 0}).GQ(500).make())});\n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).AD(homC3AllelesAD).PL(haploidAltC3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).PL(new double[]{-10, 0}).AD(new int[]{0, 20}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(C)).PL(new double[]{-30, 0}).AD(new int[]{0, 20}).GQ(300).make())});\n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).AD(homG3AllelesAD).PL(haploidAltG3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).PL(new double[]{-20, 0}).AD(new int[]{0, 21}).GQ(200).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Collections.singletonList(G)).PL(new double[]{-40, 0}).AD(new int[]{0, 21}).GQ(400).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).AD(homRef3AllelesAD).PL(triploidRef3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).PL(new double[]{0, -10, -20, -30}).AD(new int[]{20, 0}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, Aref)).PL(new double[]{0, -30, -60, -90}).AD(new int[]{20, 0}).GQ(300).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).AD(hetRefC3AllelesAD).PL(tripoidAltC3AllelesPL).make()).make(),\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).AD(hetRefC3AllelesAD).PL(triploidAltC3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 10}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, C)).PL(new double[]{-20, 0, -20, -50}).AD(new int[]{14, 7}).GQ(200).make())});\n \n         tests.add(new Object[]{\n-                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(hetRefG3AllelesAD).PL(tripoidAltG3AllelesPL).make()).make(),\n+                new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).AD(hetRefG3AllelesAD).PL(triploidAltG3AllelesPL).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{-10, 0, -20, -30}).AD(new int[]{10, 11}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(Arrays.asList(Aref, Aref, G)).PL(new double[]{-20, 0, -20, -50}).AD(new int[]{14, 7}).GQ(200).make())});\n \n         final int[] homRef3AllelesSAC = new int[]{20, 19, 0, 1, 3, 4};\n         final int[] hetRefC3AllelesSAC = new int[]{10, 9, 10, 9, 1, 1};\n         final int[] homC3AllelesSAC = new int[]{0, 0, 20, 20, 1, 1};\n         final int[] hetRefG3AllelesSAC = new int[]{10, 10, 0, 0, 11, 11};\n-        final int[] hetCG3AllelesSAC = new int[]{0, 0, 12, 12, 11, 11}; // AA, AC, CC, AG, CG, GG\n         final int[] homG3AllelesSAC = new int[]{0, 0, 1, 1, 21, 21};  // AA, AC, CC, AG, CG, GG\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AA).AD(homRef3AllelesAD).PL(homRef3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homRef3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{0, -10, -20}).AD(new int[]{20, 0}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{20, 19, 0, 1}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AA).PL(new double[]{0, -30, -60}).AD(new int[]{20, 0}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{20, 19, 0, 1}).GQ(300).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AC).AD(hetRefC3AllelesAD).PL(hetRefC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AC).PL(new double[]{-10, 0, -20}).AD(new int[]{10, 10}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 9, 10, 9}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AC).PL(new double[]{-20, 0, -20}).AD(new int[]{14, 7}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 9, 10, 9}).GQ(200).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(CC).AD(homC3AllelesAD).PL(homC3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homC3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AC).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(CC).PL(new double[]{-20, -10, 0}).AD(new int[]{0, 20}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 20, 20}).GQ(100).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(CC).PL(new double[]{-50, -30, 0}).AD(new int[]{0, 20}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 20, 20}).GQ(300).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(AG).AD(hetRefG3AllelesAD).PL(hetRefG3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, hetRefG3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(AG).PL(new double[]{-20, 0, -50}).AD(new int[]{10, 11}).\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(AG).PL(new double[]{-50, 0, -20}).AD(new int[]{14, 7}).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{10, 10, 11, 11}).GQ(200).make())});\n \n         tests.add(new Object[]{\n                 new VariantContextBuilder(vcBase).alleles(ACG).genotypes(new GenotypeBuilder(base).alleles(GG).AD(homG3AllelesAD).PL(homG3AllelesPL).\n                         attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, homG3AllelesSAC).make()).make(),\n                 new VariantContextBuilder(vcBase).alleles(AG).make(),\n-                Collections.singletonList(new GenotypeBuilder(base).alleles(GG).PL(new double[]{-20, -40, 0}).AD(new int[]{0, 21}).\n-                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 21, 21}).GQ(200).make())});\n+                Collections.singletonList(new GenotypeBuilder(base).alleles(GG).PL(new double[]{-50, -30, 0}).AD(new int[]{0, 21}).\n+                        attribute(GATKVCFConstants.STRAND_COUNT_BY_SAMPLE_KEY, new int[]{0, 0, 21, 21}).GQ(300).make())});\n \n         return tests.toArray(new Object[][]{});\n     }\n"}}, {"oid": "306dd0670af62de408f3251f690e6fc7faf94980", "url": "https://github.com/broadinstitute/gatk/commit/306dd0670af62de408f3251f690e6fc7faf94980", "message": "review edits", "committedDate": "2020-02-12T19:09:18Z", "type": "forcePushed"}, {"oid": "4ef84fb548c27e5994d7ede4cfedcd36719c88b5", "url": "https://github.com/broadinstitute/gatk/commit/4ef84fb548c27e5994d7ede4cfedcd36719c88b5", "message": "fixed incoherent unit test cases in allele subsetting utils", "committedDate": "2020-02-16T02:17:13Z", "type": "commit"}, {"oid": "a4e6390a19aaccd317e438f5ad4b58f675b8df92", "url": "https://github.com/broadinstitute/gatk/commit/a4e6390a19aaccd317e438f5ad4b58f675b8df92", "message": "review edits", "committedDate": "2020-02-16T02:17:13Z", "type": "commit"}, {"oid": "a4e6390a19aaccd317e438f5ad4b58f675b8df92", "url": "https://github.com/broadinstitute/gatk/commit/a4e6390a19aaccd317e438f5ad4b58f675b8df92", "message": "review edits", "committedDate": "2020-02-16T02:17:13Z", "type": "forcePushed"}]}