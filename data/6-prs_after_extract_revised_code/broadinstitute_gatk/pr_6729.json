{"pr_number": 6729, "pr_title": "Fix a performance regression in SelectVariants", "pr_createdAt": "2020-07-28T15:32:04Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6729", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDE2MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6729#discussion_r461690161", "bodyText": "If you want to exactly match the previous behavior while still getting rid of the O(n^2) complexity, you could cache the result of vc.getGenotypes().stream().anyMatch(Genotype::hasLikelihoods) before entering the enclosing for loop, and check it here.", "author": "droazen", "createdAt": "2020-07-28T15:53:14Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -714,11 +714,13 @@ private void initalizeAlleleAnyploidIndicesCache(final VariantContext vc) {\n                 // Make a new entry if the we have not yet cached a PL to allele indices map for this ploidy and allele count\n                 // skip if there are no PLs -- this avoids hanging on high-allelic somatic samples, for example, where\n                 // there's no need for the PL indices since they don't exist\n-                if (g.getPloidy() != 0 && (!ploidyToNumberOfAlleles.containsKey(g.getPloidy()) || ploidyToNumberOfAlleles.get(g.getPloidy()) < vc.getNAlleles())) {\n-                    if (vc.getGenotypes().stream().anyMatch(Genotype::hasLikelihoods)) {\n-                        GenotypeLikelihoods.initializeAnyploidPLIndexToAlleleIndices(vc.getNAlleles() - 1, g.getPloidy());\n-                        ploidyToNumberOfAlleles.put(g.getPloidy(), vc.getNAlleles());\n-                    }\n+                final int genotypePloidy = g.getPloidy();\n+                final int nAlleles = vc.getNAlleles();\n+                if (genotypePloidy != 0\n+                        && (!ploidyToNumberOfAlleles.containsKey(genotypePloidy) || ploidyToNumberOfAlleles.get(genotypePloidy) < nAlleles)\n+                        && g.hasLikelihoods()) {", "originalCommit": "a53d3210074424cdfac215f28276613c3f9fa41a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MTMwMg==", "url": "https://github.com/broadinstitute/gatk/pull/6729#discussion_r461691302", "bodyText": "(Otherwise the behavior will differ from the previous behavior if some genotypes have PLs and others don't)", "author": "droazen", "createdAt": "2020-07-28T15:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5NTUwOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6729#discussion_r461695509", "bodyText": "Oh, you're right.  I was thinking that since its just building up a cache it would hit it anyway when it got to one with PLs, but if the ploidy is different it will end up missing some.  Good call.", "author": "lbergelson", "createdAt": "2020-07-28T16:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5OTg1Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6729#discussion_r461699857", "bodyText": "Thanks for catching that @droazen. Probably best to preserve behavior. LGTM otherwise, thanks @lbergelson!", "author": "samuelklee", "createdAt": "2020-07-28T16:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxODU0Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6729#discussion_r465918542", "bodyText": "@droazen  Instead of caching I moved it up to the outer guard.  Why loop at all if we're always going to skip.  Could you take a peak just to verify that that makes sense to you.", "author": "lbergelson", "createdAt": "2020-08-05T18:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0eaa1cd88abb783b9b16f9bc6edb85d21eb0118d", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\nindex 916e4c76f..667308218 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n\n@@ -709,18 +709,16 @@ public final class SelectVariants extends VariantWalker {\n      * @param vc    Variant Context\n      */\n     private void initalizeAlleleAnyploidIndicesCache(final VariantContext vc) {\n-        if (vc.getType() != VariantContext.Type.NO_VARIATION) { // Bypass if not a variant\n+        if (vc.getType() != VariantContext.Type.NO_VARIATION &&\n+                vc.getGenotypes().stream().anyMatch(Genotype::hasLikelihoods)) { // Bypass if not a variant or no genotype has Pls\n             for (final Genotype g : vc.getGenotypes()) {\n                 // Make a new entry if the we have not yet cached a PL to allele indices map for this ploidy and allele count\n                 // skip if there are no PLs -- this avoids hanging on high-allelic somatic samples, for example, where\n                 // there's no need for the PL indices since they don't exist\n                 final int genotypePloidy = g.getPloidy();\n-                final int nAlleles = vc.getNAlleles();\n-                if (genotypePloidy != 0\n-                        && (!ploidyToNumberOfAlleles.containsKey(genotypePloidy) || ploidyToNumberOfAlleles.get(genotypePloidy) < nAlleles)\n-                        && g.hasLikelihoods()) {\n-                    GenotypeLikelihoods.initializeAnyploidPLIndexToAlleleIndices(nAlleles - 1, genotypePloidy);\n-                    ploidyToNumberOfAlleles.put(genotypePloidy, nAlleles);\n+                if (genotypePloidy != 0 && (!ploidyToNumberOfAlleles.containsKey(genotypePloidy) || ploidyToNumberOfAlleles.get(genotypePloidy) < vc.getNAlleles())) {\n+                    GenotypeLikelihoods.initializeAnyploidPLIndexToAlleleIndices(vc.getNAlleles() - 1, genotypePloidy);\n+                    ploidyToNumberOfAlleles.put(genotypePloidy, vc.getNAlleles());\n                 }\n             }\n         }\n"}}, {"oid": "0eaa1cd88abb783b9b16f9bc6edb85d21eb0118d", "url": "https://github.com/broadinstitute/gatk/commit/0eaa1cd88abb783b9b16f9bc6edb85d21eb0118d", "message": "fixup", "committedDate": "2020-08-05T18:11:20Z", "type": "forcePushed"}, {"oid": "8392400ba8f8cef9a6546fd320fcf3399b74ae18", "url": "https://github.com/broadinstitute/gatk/commit/8392400ba8f8cef9a6546fd320fcf3399b74ae18", "message": "fixup", "committedDate": "2020-08-05T18:20:59Z", "type": "commit"}, {"oid": "8392400ba8f8cef9a6546fd320fcf3399b74ae18", "url": "https://github.com/broadinstitute/gatk/commit/8392400ba8f8cef9a6546fd320fcf3399b74ae18", "message": "fixup", "committedDate": "2020-08-05T18:20:59Z", "type": "forcePushed"}]}