{"pr_number": 6781, "pr_title": "Improving exception messages in AssemblyRegion", "pr_createdAt": "2020-08-31T19:45:15Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6781", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzA3Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481237077", "bodyText": "Move to SequenceDictionaryUtils (or, better, use one of the existing methods there like SequenceDictionaryUtils.getContigNamesList())", "author": "droazen", "createdAt": "2020-09-01T15:36:53Z", "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,\n                 Math.max(1, genomeLoc.getStart() - padding),\n-                Math.min(referenceReader.getSequenceDictionary().getSequence(genomeLoc.getContig()).getSequenceLength(), genomeLoc.getEnd() + padding) ).getBases();\n+                Math.min(sequence.getSequenceLength(), genomeLoc.getEnd() + padding)).getBases();\n+    }\n+\n+    private static String listContigsAsString(final SAMSequenceDictionary sequenceDictionary) {", "originalCommit": "4b0c1ac35a659de5965696ea61f58165afeef1fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Nzk2MA==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481287960", "bodyText": "Of course that exists already.", "author": "lbergelson", "createdAt": "2020-09-01T16:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4Nzg2NA==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481387864", "bodyText": "It actually exists in at least 2 places.  ReadUtils.prettyPrintSequenceRecords seems to be the version I want.", "author": "lbergelson", "createdAt": "2020-09-01T19:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "20328e75cf0301e667eaae18ee9f5535b3cf32e7", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java b/src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java\nindex 5ad019349..142f31fdf 100644\n--- a/src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java\n+++ b/src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java\n\n@@ -308,23 +313,18 @@ public final class AssemblyRegion implements Locatable {\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n         final String contig = genomeLoc.getContig();\n-        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n-                () -> \"Contig \" + contig + \" not found in reference. \" +\n-                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n-                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n-\n+        final SAMSequenceDictionary sequenceDictionary = referenceReader.getSequenceDictionary();\n+        final SAMSequenceRecord sequence = sequenceDictionary.getSequence(contig);\n+        if ( sequence == null ) {\n+            throw new UserException.MissingContigInSequenceDictionary(\"Contig: \" + contig + \" not found in reference dictionary.\" +\n+                    \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                    \"\\nReference Contigs: \" + ReadUtils.prettyPrintSequenceRecords(sequenceDictionary));\n+        }\n         return referenceReader.getSubsequenceAt(contig,\n                 Math.max(1, genomeLoc.getStart() - padding),\n                 Math.min(sequence.getSequenceLength(), genomeLoc.getEnd() + padding)).getBases();\n     }\n \n-    private static String listContigsAsString(final SAMSequenceDictionary sequenceDictionary) {\n-        return sequenceDictionary.getSequences()\n-                .stream()\n-                .map(SAMSequenceRecord::getContig)\n-                .collect(Collectors.joining(\",\", \"[\", \"]\"));\n-    }\n-\n     /**\n      * See {@link #getAssemblyRegionReference} with padding == 0\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzM4Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481237386", "bodyText": "Mimatched -> Mismatched", "author": "droazen", "createdAt": "2020-09-01T15:37:20Z", "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n+    //assembly region.\n+    public void testMimatchedReferenceAndRegion(){", "originalCommit": "4b0c1ac35a659de5965696ea61f58165afeef1fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4NzY2Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481387666", "bodyText": "My keyboard is going to kill me with typos.  It's started to just drop random letters and double others.", "author": "lbergelson", "createdAt": "2020-09-01T19:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "20328e75cf0301e667eaae18ee9f5535b3cf32e7", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java b/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java\nindex 8ae48e32d..9ccf6204a 100644\n--- a/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java\n\n@@ -124,11 +128,11 @@ public final class AssemblyRegionUnitTest extends GATKBaseTest {\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n-    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    @Test(expectedExceptions = UserException.MissingContigInSequenceDictionary.class)\n     //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n     //assembly region.\n-    public void testMimatchedReferenceAndRegion(){\n-        final SAMSequenceDictionary sequenceDictionary = header.getSequenceDictionary();\n+    public void testMismatchedReferenceAndRegion(){\n+        final SAMSequenceDictionary sequenceDictionary = new SAMSequenceDictionary(new ArrayList<>(header.getSequenceDictionary().getSequences()));\n         final String contigNotInReference = \"chrNotInReference\";\n         sequenceDictionary.addSequence(new SAMSequenceRecord(contigNotInReference, 1000));\n         //it's not possible to create an assembly region on a contig that isn't in the given SamHeader\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjQzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481246435", "bodyText": "getSubsequenceAt() will already throw a UserException.MissingContigInSequenceDictionary exception internally if the contig is missing -- is there some way we could rely on that existing check? Ideally we should avoid adding lots of additional sequence dictionary lookups to frequently-called methods if we can possibly help it...", "author": "droazen", "createdAt": "2020-09-01T15:50:42Z", "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,", "originalCommit": "4b0c1ac35a659de5965696ea61f58165afeef1fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjM4OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481346389", "bodyText": "It's not clear to me how to avoid it because we need the sequence length from the sequence to make the call to getSubsequenceAt. This pr isn't adding a new lookup, it's just moving it.  We could add a new sequenceDictionary method that automatically clips to the ends to avoid this extra lookup, but that seems like a lot of effort.", "author": "lbergelson", "createdAt": "2020-09-01T18:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MDc4NA==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481380784", "bodyText": "Yes, you're right, it can't be avoided. This is fine then.", "author": "droazen", "createdAt": "2020-09-01T19:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "20328e75cf0301e667eaae18ee9f5535b3cf32e7", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java b/src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java\nindex 5ad019349..142f31fdf 100644\n--- a/src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java\n+++ b/src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java\n\n@@ -308,23 +313,18 @@ public final class AssemblyRegion implements Locatable {\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n         final String contig = genomeLoc.getContig();\n-        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n-                () -> \"Contig \" + contig + \" not found in reference. \" +\n-                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n-                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n-\n+        final SAMSequenceDictionary sequenceDictionary = referenceReader.getSequenceDictionary();\n+        final SAMSequenceRecord sequence = sequenceDictionary.getSequence(contig);\n+        if ( sequence == null ) {\n+            throw new UserException.MissingContigInSequenceDictionary(\"Contig: \" + contig + \" not found in reference dictionary.\" +\n+                    \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                    \"\\nReference Contigs: \" + ReadUtils.prettyPrintSequenceRecords(sequenceDictionary));\n+        }\n         return referenceReader.getSubsequenceAt(contig,\n                 Math.max(1, genomeLoc.getStart() - padding),\n                 Math.min(sequence.getSequenceLength(), genomeLoc.getEnd() + padding)).getBases();\n     }\n \n-    private static String listContigsAsString(final SAMSequenceDictionary sequenceDictionary) {\n-        return sequenceDictionary.getSequences()\n-                .stream()\n-                .map(SAMSequenceRecord::getContig)\n-                .collect(Collectors.joining(\",\", \"[\", \"]\"));\n-    }\n-\n     /**\n      * See {@link #getAssemblyRegionReference} with padding == 0\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODMxNg==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481248316", "bodyText": "I did not know about expectedExceptionsMessageRegExp ! And now that I do, I have mixed feelings about it...throwing a more specific exception type is better than checking the exception message text itself.", "author": "droazen", "createdAt": "2020-09-01T15:53:33Z", "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")", "originalCommit": "4b0c1ac35a659de5965696ea61f58165afeef1fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4OTM1NA==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481389354", "bodyText": "You're right... changing to UserException.MissingContigInSequenceDictionary.", "author": "lbergelson", "createdAt": "2020-09-01T19:44:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "20328e75cf0301e667eaae18ee9f5535b3cf32e7", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java b/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java\nindex 8ae48e32d..9ccf6204a 100644\n--- a/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java\n\n@@ -124,11 +128,11 @@ public final class AssemblyRegionUnitTest extends GATKBaseTest {\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n-    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    @Test(expectedExceptions = UserException.MissingContigInSequenceDictionary.class)\n     //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n     //assembly region.\n-    public void testMimatchedReferenceAndRegion(){\n-        final SAMSequenceDictionary sequenceDictionary = header.getSequenceDictionary();\n+    public void testMismatchedReferenceAndRegion(){\n+        final SAMSequenceDictionary sequenceDictionary = new SAMSequenceDictionary(new ArrayList<>(header.getSequenceDictionary().getSequences()));\n         final String contigNotInReference = \"chrNotInReference\";\n         sequenceDictionary.addSequence(new SAMSequenceRecord(contigNotInReference, 1000));\n         //it's not possible to create an assembly region on a contig that isn't in the given SamHeader\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MjczMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481252731", "bodyText": "Won't this change the sequence dictionary in the shared header instance used by all the tests in this class? Can you write this test in a way that doesn't modify shared data?", "author": "droazen", "createdAt": "2020-09-01T15:59:05Z", "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n+    //assembly region.\n+    public void testMimatchedReferenceAndRegion(){\n+        final SAMSequenceDictionary sequenceDictionary = header.getSequenceDictionary();\n+        final String contigNotInReference = \"chrNotInReference\";\n+        sequenceDictionary.addSequence(new SAMSequenceRecord(contigNotInReference, 1000));", "originalCommit": "4b0c1ac35a659de5965696ea61f58165afeef1fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4OTM0NA==", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481389344", "bodyText": "Ugh. Yes it does. Changing.  Good catch.", "author": "lbergelson", "createdAt": "2020-09-01T19:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MjczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "20328e75cf0301e667eaae18ee9f5535b3cf32e7", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java b/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java\nindex 8ae48e32d..9ccf6204a 100644\n--- a/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java\n\n@@ -124,11 +128,11 @@ public final class AssemblyRegionUnitTest extends GATKBaseTest {\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n-    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    @Test(expectedExceptions = UserException.MissingContigInSequenceDictionary.class)\n     //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n     //assembly region.\n-    public void testMimatchedReferenceAndRegion(){\n-        final SAMSequenceDictionary sequenceDictionary = header.getSequenceDictionary();\n+    public void testMismatchedReferenceAndRegion(){\n+        final SAMSequenceDictionary sequenceDictionary = new SAMSequenceDictionary(new ArrayList<>(header.getSequenceDictionary().getSequences()));\n         final String contigNotInReference = \"chrNotInReference\";\n         sequenceDictionary.addSequence(new SAMSequenceRecord(contigNotInReference, 1000));\n         //it's not possible to create an assembly region on a contig that isn't in the given SamHeader\n"}}, {"oid": "8f08c1d7b960ea2fe20e425d4b02f4a20b3b6ed9", "url": "https://github.com/broadinstitute/gatk/commit/8f08c1d7b960ea2fe20e425d4b02f4a20b3b6ed9", "message": "Improving exception messages in AssemblyRegion\n\n* Replacing some cases of NPE with IllegalArgumentException with a clear message.", "committedDate": "2020-09-01T19:47:24Z", "type": "commit"}, {"oid": "20328e75cf0301e667eaae18ee9f5535b3cf32e7", "url": "https://github.com/broadinstitute/gatk/commit/20328e75cf0301e667eaae18ee9f5535b3cf32e7", "message": "responding to comments", "committedDate": "2020-09-01T19:48:43Z", "type": "commit"}, {"oid": "20328e75cf0301e667eaae18ee9f5535b3cf32e7", "url": "https://github.com/broadinstitute/gatk/commit/20328e75cf0301e667eaae18ee9f5535b3cf32e7", "message": "responding to comments", "committedDate": "2020-09-01T19:48:43Z", "type": "forcePushed"}]}