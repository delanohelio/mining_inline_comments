{"pr_number": 6807, "pr_title": "Added a maximum version number for data sources.", "pr_createdAt": "2020-09-10T23:22:44Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6807", "timeline": [{"oid": "1f3d0ad80da1d03fe673d4803e6897281887e9b8", "url": "https://github.com/broadinstitute/gatk/commit/1f3d0ad80da1d03fe673d4803e6897281887e9b8", "message": "Added a maximum version number for data sources.\n\n- Added max version check for data sources.  This will automatically be\nused when validating a data sources version for running.\n\nFixes #6712", "committedDate": "2020-09-10T23:21:16Z", "type": "commit"}, {"oid": "385453a43c85801809527e26d2a3d34c4790e65b", "url": "https://github.com/broadinstitute/gatk/commit/385453a43c85801809527e26d2a3d34c4790e65b", "message": "Logging updates and minor changes for code style (finalized variables).", "committedDate": "2020-09-17T16:14:35Z", "type": "commit"}, {"oid": "7d34cdfcb96851ba39041498bd574c7df238b54f", "url": "https://github.com/broadinstitute/gatk/commit/7d34cdfcb96851ba39041498bd574c7df238b54f", "message": "Fixed failing tests.", "committedDate": "2020-09-18T16:08:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTQ4MA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r494505480", "bodyText": "Maybe \"Performing conversion\" would be more accurate than \"Conversion required\", as the latter makes it sound like the user needs to do something, but in fact the conversion is automatic (right?)", "author": "droazen", "createdAt": "2020-09-24T17:55:20Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorEngine.java", "diffHunk": "@@ -471,10 +471,21 @@ private boolean determineReferenceAndDatasourceCompatibility() {\n \n         boolean mustConvertInputContigsToHg19 = false;\n \n-        if ( funcotatorArgs.forceB37ToHg19ContigNameConversion ||\n-                ( funcotatorArgs.referenceVersion.equals(BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19) &&\n-                        FuncotatorUtils.isSequenceDictionaryUsingB37Reference(sequenceDictionaryForDrivingVariants) )) {\n+        // Do individual checks here so we can have a helpful log message for each case:\n+        if ( funcotatorArgs.forceB37ToHg19ContigNameConversion ) {\n+            logger.info(\"Forcing B37 -> HG19 Variant conversion.\");\n+            mustConvertInputContigsToHg19 = true;\n+        }\n+        else if ( funcotatorArgs.referenceVersion.equals(BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19) &&\n+                        FuncotatorUtils.isSequenceDictionaryUsingB37Reference(sequenceDictionaryForDrivingVariants) ) {\n+            logger.info(\"VCF sequence dictionary detected as B37 in HG19 annotation mode.  Conversion required.\");", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NzA1MA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r499767050", "bodyText": "Yeah - that's a good point.  I'll update it.", "author": "jonn-smith", "createdAt": "2020-10-05T17:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "f677b9915618b0b6b487e02878df937391bc4fb9", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorEngine.java b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorEngine.java\nindex 18f9952df..8b036b91f 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorEngine.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorEngine.java\n\n@@ -478,7 +478,7 @@ public final class FuncotatorEngine implements AutoCloseable {\n         }\n         else if ( funcotatorArgs.referenceVersion.equals(BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19) &&\n                         FuncotatorUtils.isSequenceDictionaryUsingB37Reference(sequenceDictionaryForDrivingVariants) ) {\n-            logger.info(\"VCF sequence dictionary detected as B37 in HG19 annotation mode.  Conversion required.\");\n+            logger.info(\"VCF sequence dictionary detected as B37 in HG19 annotation mode.  Performing conversion.\");\n             mustConvertInputContigsToHg19 = true;\n         }\n         else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwOTYyNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r494509625", "bodyText": "Is there a test somewhere that these dates correspond to actual released versions?", "author": "droazen", "createdAt": "2020-09-24T18:02:32Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java", "diffHunk": "@@ -61,17 +61,21 @@ private DataSourceUtils() {}\n     @VisibleForTesting\n     static final int MIN_MINOR_VERSION_NUMBER = 6;\n     @VisibleForTesting\n-    static final int MIN_YEAR_RELEASED        = 2019;\n+    static final Calendar MIN_DATE                = new GregorianCalendar(2019, Calendar.JANUARY, 24);\n+\n+    // Track out maximum version number here:\n+    @VisibleForTesting\n+    static final int MAX_MAJOR_VERSION_NUMBER = 1;\n     @VisibleForTesting\n-    static final int MIN_MONTH_RELEASED       = 1;\n+    static final int MAX_MINOR_VERSION_NUMBER = 7;\n     @VisibleForTesting\n-    static final int MIN_DAY_RELEASED         = 24;\n+    static final Calendar MAX_DATE            = new GregorianCalendar(2020, Calendar.MAY, 21);", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NDk3Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r499774972", "bodyText": "The DbSnpIntegrationTest::testDbSnpDataSourceParsing test does part of this already because it uses the latest version of dbSNP to check that it works.\nI can add one in to query the google bucket for the min and max versions though.", "author": "jonn-smith", "createdAt": "2020-10-05T17:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwOTYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\nindex bfd7d6770..c70697029 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n\n@@ -57,11 +59,11 @@ final public class DataSourceUtils {\n \n     // Track our minimum version number here:\n     @VisibleForTesting\n-    static final int MIN_MAJOR_VERSION_NUMBER = 1;\n+    static final int       MIN_MAJOR_VERSION_NUMBER = 1;\n     @VisibleForTesting\n-    static final int MIN_MINOR_VERSION_NUMBER = 6;\n+    static final int       MIN_MINOR_VERSION_NUMBER = 6;\n     @VisibleForTesting\n-    static final Calendar MIN_DATE                = new GregorianCalendar(2019, Calendar.JANUARY, 24);\n+    static final LocalDate MIN_DATE                 = LocalDate.of(2019, Month.JANUARY, 24);\n \n     // Track out maximum version number here:\n     @VisibleForTesting\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMzMzMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r495133331", "bodyText": "Did you want to fill in this empty javadoc comment?", "author": "droazen", "createdAt": "2020-09-25T17:30:49Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java", "diffHunk": "@@ -723,34 +727,33 @@ private static boolean logDataSourcesInfo(final Path dataSourcesPath) {\n     }\n \n     @VisibleForTesting\n+    /**\n+     *\n+     */", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NTQ5NA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r499775494", "bodyText": "Oops!  I sure did!", "author": "jonn-smith", "createdAt": "2020-10-05T17:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMzMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\nindex bfd7d6770..c70697029 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n\n@@ -726,34 +782,37 @@ final public class DataSourceUtils {\n         return dataSourcesPathIsAcceptable;\n     }\n \n-    @VisibleForTesting\n     /**\n+     * Checks that the version information given is within the valid range for data source versions.\n+     *\n+     * @param major int containing the major version number to be checked.\n+     * @param minor int containing the minor version number to be checked.\n+     * @param year int containing the year version number to be checked.RecQ DNA helicase WRN\n+     * @param month int containing the month version number to be checked.\n+     * @param day int containing the day version number to be checked.\n      *\n+     * @return {@code true} iff the given version information is valid for the current data source ranges.  {@code false} otherwise.\n      */\n+    @VisibleForTesting\n     static boolean validateVersionInformation(final int major, final int minor, final int year, final int month, final int day) {\n \n-        // Compare from largest to smallest differences for Min version:\n-        if ( major < MIN_MAJOR_VERSION_NUMBER ) {\n-            return false;\n-        }\n-        if ( minor <  MIN_MINOR_VERSION_NUMBER ) {\n+        // Compare Major Version:\n+        if ((major < MIN_MAJOR_VERSION_NUMBER) || (major > MAX_MAJOR_VERSION_NUMBER)) {\n             return false;\n         }\n \n-        // Compare from largest to smallest differences for Max version:\n-        if ( major > MAX_MAJOR_VERSION_NUMBER ) {\n-            return false;\n-        }\n-        if ( minor >  MAX_MINOR_VERSION_NUMBER ) {\n-            return false;\n+        // Compare minor version if we're on the edge of versions:\n+        if ( (major == MIN_MAJOR_VERSION_NUMBER) || (major == MAX_MAJOR_VERSION_NUMBER) ) {\n+            if ((minor < MIN_MINOR_VERSION_NUMBER) || (minor > MAX_MINOR_VERSION_NUMBER)) {\n+                return false;\n+            }\n         }\n \n         // Now make sure the date is between or equal to the min and max date:\n-        // Note: we have to convert the month as parsed into a Calendar.MONTH constant.\n-        final Calendar versionCal = new GregorianCalendar(year, Utils.getCalendarMonth(month), day);\n+        final LocalDate versionDate = LocalDate.of(year, month, day);\n \n         // A valid date is between min and max date inclusive.\n-        return (!versionCal.before(MIN_DATE)) && (!versionCal.after(MAX_DATE));\n+        return (!versionDate.isBefore(MIN_DATE)) && (!versionDate.isAfter(MAX_DATE));\n     }\n \n     // ========================================================================================================\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNTE2OA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r495135168", "bodyText": "The ordering of these checks seems problematic to me. Suppose, for example that the minimum supported major+minor version is 1.5, and the maximum supported major+minor version is 3.0. If the actual major+minor version being tested is 2.0, then this method would return false, since 0 < 5, even though 2.0 is between 1.5 and 3.0 and should be compatible with this version of Funcotator.\nI think you need to check the minor version only if the major version is equal to either the min or max supported major version. If the major version is between the min and max, the minor version should not matter.\nAlso you should check that the major version is fully within range (>= MIN and <= MAX) before potentially moving on to examine the minor version.", "author": "droazen", "createdAt": "2020-09-25T17:34:38Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java", "diffHunk": "@@ -723,34 +727,33 @@ private static boolean logDataSourcesInfo(final Path dataSourcesPath) {\n     }\n \n     @VisibleForTesting\n+    /**\n+     *\n+     */\n     static boolean validateVersionInformation(final int major, final int minor, final int year, final int month, final int day) {\n \n-        // Compare from largest to smallest differences:\n-\n+        // Compare from largest to smallest differences for Min version:\n         if ( major < MIN_MAJOR_VERSION_NUMBER ) {\n             return false;\n         }\n-\n         if ( minor <  MIN_MINOR_VERSION_NUMBER ) {\n             return false;", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NjAwNw==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r499856007", "bodyText": "Agreed.  Sounds good.", "author": "jonn-smith", "createdAt": "2020-10-05T20:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNTE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\nindex bfd7d6770..c70697029 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n\n@@ -726,34 +782,37 @@ final public class DataSourceUtils {\n         return dataSourcesPathIsAcceptable;\n     }\n \n-    @VisibleForTesting\n     /**\n+     * Checks that the version information given is within the valid range for data source versions.\n+     *\n+     * @param major int containing the major version number to be checked.\n+     * @param minor int containing the minor version number to be checked.\n+     * @param year int containing the year version number to be checked.RecQ DNA helicase WRN\n+     * @param month int containing the month version number to be checked.\n+     * @param day int containing the day version number to be checked.\n      *\n+     * @return {@code true} iff the given version information is valid for the current data source ranges.  {@code false} otherwise.\n      */\n+    @VisibleForTesting\n     static boolean validateVersionInformation(final int major, final int minor, final int year, final int month, final int day) {\n \n-        // Compare from largest to smallest differences for Min version:\n-        if ( major < MIN_MAJOR_VERSION_NUMBER ) {\n-            return false;\n-        }\n-        if ( minor <  MIN_MINOR_VERSION_NUMBER ) {\n+        // Compare Major Version:\n+        if ((major < MIN_MAJOR_VERSION_NUMBER) || (major > MAX_MAJOR_VERSION_NUMBER)) {\n             return false;\n         }\n \n-        // Compare from largest to smallest differences for Max version:\n-        if ( major > MAX_MAJOR_VERSION_NUMBER ) {\n-            return false;\n-        }\n-        if ( minor >  MAX_MINOR_VERSION_NUMBER ) {\n-            return false;\n+        // Compare minor version if we're on the edge of versions:\n+        if ( (major == MIN_MAJOR_VERSION_NUMBER) || (major == MAX_MAJOR_VERSION_NUMBER) ) {\n+            if ((minor < MIN_MINOR_VERSION_NUMBER) || (minor > MAX_MINOR_VERSION_NUMBER)) {\n+                return false;\n+            }\n         }\n \n         // Now make sure the date is between or equal to the min and max date:\n-        // Note: we have to convert the month as parsed into a Calendar.MONTH constant.\n-        final Calendar versionCal = new GregorianCalendar(year, Utils.getCalendarMonth(month), day);\n+        final LocalDate versionDate = LocalDate.of(year, month, day);\n \n         // A valid date is between min and max date inclusive.\n-        return (!versionCal.before(MIN_DATE)) && (!versionCal.after(MAX_DATE));\n+        return (!versionDate.isBefore(MIN_DATE)) && (!versionDate.isAfter(MAX_DATE));\n     }\n \n     // ========================================================================================================\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0MTM3NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r495141375", "bodyText": "I think it's better to avoid fallthrough / combining cases in switch statements, as it's an invitation for future bugs. Recommend separating out the cases as before.", "author": "droazen", "createdAt": "2020-09-25T17:47:16Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/SequenceDictionaryUtils.java", "diffHunk": "@@ -153,6 +153,7 @@ public static void validateDictionaries( final String name1,\n \n         switch ( type ) {\n             case IDENTICAL:\n+            case SUPERSET:", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MTE1Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r501761157", "bodyText": "Sure.  Fixed!", "author": "jonn-smith", "createdAt": "2020-10-08T14:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0MTM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/SequenceDictionaryUtils.java b/src/main/java/org/broadinstitute/hellbender/utils/SequenceDictionaryUtils.java\nindex 5ce92fd04..7f1db9fd9 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/SequenceDictionaryUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/SequenceDictionaryUtils.java\n\n@@ -153,6 +153,7 @@ public final class SequenceDictionaryUtils {\n \n         switch ( type ) {\n             case IDENTICAL:\n+                return;\n             case SUPERSET:\n                 return;\n             case COMMON_SUBSET:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0MzY0Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r495143642", "bodyText": "I think the import statement collapsing setting in your IDE might be too high -- we definitely want to collapse imports after ~5 or so imports from the same package.", "author": "droazen", "createdAt": "2020-09-25T17:52:04Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/Utils.java", "diffHunk": "@@ -28,7 +29,24 @@\n import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n import java.time.format.FormatStyle;\n-import java.util.*;\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.Random;\n+import java.util.Set;", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1ODc5Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r499858792", "bodyText": "Yup - it was set to 50.  I set it to 5.", "author": "jonn-smith", "createdAt": "2020-10-05T20:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0MzY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/Utils.java b/src/main/java/org/broadinstitute/hellbender/utils/Utils.java\nindex 0bc3ccfc7..a78325b8c 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/Utils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/Utils.java\n\n@@ -29,24 +25,7 @@ import java.security.NoSuchAlgorithmException;\n import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n import java.time.format.FormatStyle;\n-import java.util.AbstractList;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.LinkedHashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Queue;\n-import java.util.Random;\n-import java.util.Set;\n+import java.util.*;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0OTg3Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r495149873", "bodyText": "You should consider migrating to the newer java.time.* classes (eg., LocalDate) that were introduced in Java 8, instead of using the legacy Calendar class. For example, java.time has a proper Month enum with a Month.of(int) method, which would eliminate the need for a method like this.", "author": "droazen", "createdAt": "2020-09-25T18:04:49Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/Utils.java", "diffHunk": "@@ -1407,4 +1425,54 @@ public static void truncate(final List<?> list, final int maxLength) {\n             }\n         }\n     }\n+\n+    /**\n+     * Convert a logical month of the year into the Calendar constant for that month.\n+     *\n+     * Will throw an {@link IllegalArgumentException} if the given month value falls outside\n+     * the expected range - [1-12] inclusive.\n+     *\n+     * @param month The logical month to convert in the range [1-12] inclusive.\n+     * @return The Calendar constant for the given month.  One of:\n+     *         {@link java.util.Calendar.JANUARY}, {@link java.util.Calendar.FEBRUARY},\n+     *         {@link java.util.Calendar.MARCH}, {@link java.util.Calendar.APRIL}, {@link java.util.Calendar.MAY},\n+     *         {@link java.util.Calendar.JUNE}, {@link java.util.Calendar.JULY}, {@link java.util.Calendar.AUGUST},\n+     *         {@link java.util.Calendar.SEPTEMBER}, {@link java.util.Calendar.OCTOBER},\n+     *         {@link java.util.Calendar.NOVEMBER}, {@link java.util.Calendar.DECEMBER}\n+     */\n+    public static int getCalendarMonth(final int month) {\n+\n+        final String baseMessage = \"Given month falls outside the acceptable range [1-12]: \";\n+\n+        Utils.validateArg((1 <= month) && (month <= 12), baseMessage + month);\n+\n+        switch (month) {\n+            case 1:\n+                return Calendar.JANUARY;", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2NTQxNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r501765415", "bodyText": "Yeah - the old way was deprecated and this was the first solution that I found.  I agree - it's terrible.\nI'll switch over to LocalDate or some equivalent.", "author": "jonn-smith", "createdAt": "2020-10-08T14:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0OTg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/Utils.java b/src/main/java/org/broadinstitute/hellbender/utils/Utils.java\nindex 0bc3ccfc7..a78325b8c 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/Utils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/Utils.java\n\n@@ -1425,54 +1404,4 @@ public final class Utils {\n             }\n         }\n     }\n-\n-    /**\n-     * Convert a logical month of the year into the Calendar constant for that month.\n-     *\n-     * Will throw an {@link IllegalArgumentException} if the given month value falls outside\n-     * the expected range - [1-12] inclusive.\n-     *\n-     * @param month The logical month to convert in the range [1-12] inclusive.\n-     * @return The Calendar constant for the given month.  One of:\n-     *         {@link java.util.Calendar.JANUARY}, {@link java.util.Calendar.FEBRUARY},\n-     *         {@link java.util.Calendar.MARCH}, {@link java.util.Calendar.APRIL}, {@link java.util.Calendar.MAY},\n-     *         {@link java.util.Calendar.JUNE}, {@link java.util.Calendar.JULY}, {@link java.util.Calendar.AUGUST},\n-     *         {@link java.util.Calendar.SEPTEMBER}, {@link java.util.Calendar.OCTOBER},\n-     *         {@link java.util.Calendar.NOVEMBER}, {@link java.util.Calendar.DECEMBER}\n-     */\n-    public static int getCalendarMonth(final int month) {\n-\n-        final String baseMessage = \"Given month falls outside the acceptable range [1-12]: \";\n-\n-        Utils.validateArg((1 <= month) && (month <= 12), baseMessage + month);\n-\n-        switch (month) {\n-            case 1:\n-                return Calendar.JANUARY;\n-            case 2:\n-                return Calendar.FEBRUARY;\n-            case 3:\n-                return Calendar.MARCH;\n-            case 4:\n-                return Calendar.APRIL;\n-            case 5:\n-                return Calendar.MAY;\n-            case 6:\n-                return Calendar.JUNE;\n-            case 7:\n-                return Calendar.JULY;\n-            case 8:\n-                return Calendar.AUGUST;\n-            case 9:\n-                return Calendar.SEPTEMBER;\n-            case 10:\n-                return Calendar.OCTOBER;\n-            case 11:\n-                return Calendar.NOVEMBER;\n-            case 12:\n-                return Calendar.DECEMBER;\n-            default:\n-                throw new IllegalArgumentException(baseMessage + month);\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE1MDY0OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r495150649", "bodyText": "Did you intend to import this class, or did you mean to import java.util.Collections?", "author": "droazen", "createdAt": "2020-09-25T18:06:25Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java", "diffHunk": "@@ -1,12 +1,16 @@\n package org.broadinstitute.hellbender.tools.funcotator.dataSources;\n \n+import org.aeonbits.owner.util.Collections;", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MTk3Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r501761976", "bodyText": "Wow.  No - IntelliJ got a little funny with this one I guess.", "author": "jonn-smith", "createdAt": "2020-10-08T14:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE1MDY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\nindex 9c540ba35..66a4079e4 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n\n@@ -1,16 +1,15 @@\n package org.broadinstitute.hellbender.tools.funcotator.dataSources;\n \n-import org.aeonbits.owner.util.Collections;\n import org.apache.commons.lang.RandomStringUtils;\n import org.broadinstitute.hellbender.GATKBaseTest;\n-import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n import org.testng.Assert;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import java.time.LocalDate;\n import java.util.ArrayList;\n-import java.util.Calendar;\n-import java.util.GregorianCalendar;\n+import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Matcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE1NzA5Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r495157092", "bodyText": "Again, what about the case mentioned above of 2.0 (major.minor) being between 1.5 and 3.0?\nThis DataProvider code is long and complicated and it's difficult for me to confirm that you've covered the important boundary cases. I'd recommend replacing it with a curated and easy-to-read but systematic set of test cases instead -- eg.,\n* major < MIN_MAJOR (in which case minor shouldn't matter, so test with various values of minor)\n* major = MIN_MAJOR (in which case minor does matter, so again test with various values of minor)\n* major > MIN_MAJOR and < MAX_MAJOR (in which case minor shouldn't matter...)\n* major = MAX_MAJOR (in which case minor does matter...)\n* major > MAX_MAJOR (in which case minor shouldn't matter...)\n\nThen have separate test cases for dates both within and outside the acceptable range, for cases where major and minor are in range.", "author": "droazen", "createdAt": "2020-09-25T18:19:35Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java", "diffHunk": "@@ -33,37 +37,163 @@\n         final ArrayList<Integer> baseArgs = new ArrayList<>();\n         baseArgs.add(DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n         baseArgs.add(DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_YEAR_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_MONTH_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_DAY_RELEASED);\n+        baseArgs.add(DataSourceUtils.MIN_DATE.get(Calendar.YEAR));\n+        baseArgs.add(DataSourceUtils.MIN_DATE.get(Calendar.MONTH));\n+        baseArgs.add(DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH));\n+\n+        final ArrayList<Integer> goodRange = new ArrayList<>();\n+        goodRange.add(DataSourceUtils.MAX_MAJOR_VERSION_NUMBER - DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n+        goodRange.add(DataSourceUtils.MAX_MINOR_VERSION_NUMBER - DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n+        goodRange.add(\n+                DataSourceUtils.MAX_DATE.get(Calendar.YEAR) - DataSourceUtils.MIN_DATE.get(Calendar.YEAR)\n+        );\n+        goodRange.add(\n+                DataSourceUtils.MAX_DATE.get(Calendar.MONTH) - DataSourceUtils.MIN_DATE.get(Calendar.MONTH)\n+        );\n+        goodRange.add(\n+                DataSourceUtils.MAX_DATE.get(Calendar.DAY_OF_MONTH) - DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH)\n+        );\n \n-        for ( int offset = -1 ; offset < 2; ++offset ) {\n-            for ( int i = 0; i < baseArgs.size(); ++i ) {\n+        final int MAX_OFFSET = 5;\n \n-                final ArrayList<Object> argList = new ArrayList<>();\n+        for ( int i = 0; i < baseArgs.size(); ++i ) {\n+            for ( int offset = -MAX_OFFSET; offset < goodRange.get(i) + MAX_OFFSET; ++offset){\n \n-                argList.addAll(baseArgs.subList(0, i));\n+                final ArrayList<Object> argList = new ArrayList<>(baseArgs.subList(0, i));\n                 argList.add(baseArgs.get(i) + offset);\n \n-                if ( i < baseArgs.size() - 1) {\n+                if ( i < baseArgs.size() - 1 ) {\n                     argList.addAll(baseArgs.subList(i + 1, baseArgs.size()));\n                 }\n \n-                argList.add(offset >= 0);\n+                try {\n+                    final Calendar releaseDate = new GregorianCalendar(\n+                            (int) argList.get(2), Utils.getCalendarMonth((int) argList.get(3)), (int) argList.get(4)\n+                    );\n+\n+                    boolean passes = ((Integer) argList.get(0) >= DataSourceUtils.MIN_MAJOR_VERSION_NUMBER) && ((Integer) argList.get(0) <= DataSourceUtils.MAX_MAJOR_VERSION_NUMBER);\n+                    passes = passes && ((Integer) argList.get(1) >= DataSourceUtils.MIN_MINOR_VERSION_NUMBER) && ((Integer) argList.get(1) <= DataSourceUtils.MAX_MINOR_VERSION_NUMBER);", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4OTgxOA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r501789818", "bodyText": "Sure.  I was trying to automate the tests based on the current acceptable range, then below I had specific test cases for the bounds checking.  I'll refactor as you suggested.", "author": "jonn-smith", "createdAt": "2020-10-08T14:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE1NzA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNjE3Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r501806173", "bodyText": "The only issue here is that currently the minimum and maximum major version numbers are the same - 1.  So some of the tests can't really be written (using int values).", "author": "jonn-smith", "createdAt": "2020-10-08T15:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE1NzA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\nindex 9c540ba35..66a4079e4 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n\n@@ -34,166 +33,223 @@ public class DataSourceUtilsUnitTest extends GATKBaseTest {\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n \n-        final ArrayList<Integer> baseArgs = new ArrayList<>();\n-        baseArgs.add(DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_DATE.get(Calendar.YEAR));\n-        baseArgs.add(DataSourceUtils.MIN_DATE.get(Calendar.MONTH));\n-        baseArgs.add(DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH));\n-\n-        final ArrayList<Integer> goodRange = new ArrayList<>();\n-        goodRange.add(DataSourceUtils.MAX_MAJOR_VERSION_NUMBER - DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n-        goodRange.add(DataSourceUtils.MAX_MINOR_VERSION_NUMBER - DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n-        goodRange.add(\n-                DataSourceUtils.MAX_DATE.get(Calendar.YEAR) - DataSourceUtils.MIN_DATE.get(Calendar.YEAR)\n-        );\n-        goodRange.add(\n-                DataSourceUtils.MAX_DATE.get(Calendar.MONTH) - DataSourceUtils.MIN_DATE.get(Calendar.MONTH)\n-        );\n-        goodRange.add(\n-                DataSourceUtils.MAX_DATE.get(Calendar.DAY_OF_MONTH) - DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH)\n-        );\n+        // =============================================================\n+        // First do tests that check the major / minor version numbers:\n+        // -------------------------------------------------------------\n \n-        final int MAX_OFFSET = 5;\n+        final int MINOR_IT_MAX_VAL = 20;\n \n-        for ( int i = 0; i < baseArgs.size(); ++i ) {\n-            for ( int offset = -MAX_OFFSET; offset < goodRange.get(i) + MAX_OFFSET; ++offset){\n-\n-                final ArrayList<Object> argList = new ArrayList<>(baseArgs.subList(0, i));\n-                argList.add(baseArgs.get(i) + offset);\n+        // major < MIN_MAJOR (minor shouldn't matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER - 1, minor, DataSourceUtils.MIN_DATE, false\n+                    }\n+            );\n+        }\n \n-                if ( i < baseArgs.size() - 1 ) {\n-                    argList.addAll(baseArgs.subList(i + 1, baseArgs.size()));\n-                }\n+        // major == MIN_MAJOR (minor does matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, minor, DataSourceUtils.MIN_DATE,\n+                            (minor == DataSourceUtils.MIN_MINOR_VERSION_NUMBER || minor == DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                    }\n+            );\n+        }\n \n-                try {\n-                    final Calendar releaseDate = new GregorianCalendar(\n-                            (int) argList.get(2), Utils.getCalendarMonth((int) argList.get(3)), (int) argList.get(4)\n-                    );\n+        // major > MIN_MAJOR and < MAX_MAJOR (minor shouldn't matter)\n+        // Can't currently test here - version numbers use integer values and right now\n+        // MIN_MAJOR_VERSION_NUMBER == MAX_MAJOR_VERSION_NUMBER\n+        // TODO: Add in test when possible.\n+\n+        // major == MAX_MAJOR (minor does matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MAX_MAJOR_VERSION_NUMBER, minor, DataSourceUtils.MAX_DATE,\n+                            (minor == DataSourceUtils.MIN_MINOR_VERSION_NUMBER || minor == DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                    }\n+            );\n+        }\n \n-                    boolean passes = ((Integer) argList.get(0) >= DataSourceUtils.MIN_MAJOR_VERSION_NUMBER) && ((Integer) argList.get(0) <= DataSourceUtils.MAX_MAJOR_VERSION_NUMBER);\n-                    passes = passes && ((Integer) argList.get(1) >= DataSourceUtils.MIN_MINOR_VERSION_NUMBER) && ((Integer) argList.get(1) <= DataSourceUtils.MAX_MINOR_VERSION_NUMBER);\n-                    passes = passes &&\n-                            (!releaseDate.before(DataSourceUtils.MIN_DATE)) &&\n-                            (!releaseDate.after(DataSourceUtils.MAX_DATE));\n+        // major > MAX_MAJOR (minor shouldn't matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MAX_MAJOR_VERSION_NUMBER + 1, minor, DataSourceUtils.MAX_DATE, false\n+                    }\n+            );\n+        }\n \n-                    testArgs.add(\n-                            Collections.list(\n-                                    argList.get(0),\n-                                    argList.get(1),\n-                                    releaseDate,\n-                                    passes\n-                            ).toArray()\n-                    );\n+        // =============================================================\n+        // Next do tests that check the dates themselves:\n+        // -------------------------------------------------------------\n+\n+        // ----------------------------------------\n+        // Dates in range:\n+        // ----------------------------------------\n+\n+        // Min version with minimally / maximally acceptable dates:\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_DATE,\n+                        true\n                 }\n-                catch (final IllegalArgumentException ex) {\n-                    // If this happened we gave the code an invalid month.  We should ignore this case.\n+        );\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_DATE,\n+                        true\n                 }\n-            }\n-        }\n-\n-        // Tests for the min version:\n-        final ArrayList<Integer> minArgs = new ArrayList<>();\n-        minArgs.add(DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n-        minArgs.add(DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n-        minArgs.add(DataSourceUtils.MIN_DATE.get(Calendar.YEAR));\n-        minArgs.add(DataSourceUtils.MIN_DATE.get(Calendar.MONTH));\n-        minArgs.add(DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH));\n+        );\n \n-        for ( int offset = -2 ; offset < -1; ++offset ) {\n-            for ( int i = 0; i < minArgs.size(); ++i ) {\n+        // Max version with minimally / maximally acceptable dates:\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_DATE,\n+                        true\n+                }\n+        );\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_DATE,\n+                        true\n+                }\n+        );\n \n-                final ArrayList<Object> argList = new ArrayList<>(minArgs.subList(0, i));\n-                argList.add(minArgs.get(i) + offset);\n+        // Year / Month inside acceptable dates with any valid day:\n+        for (int day = 1; day < 30; ++day) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                            DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                            LocalDate.of(2020, 4, day),\n+                            true\n+                    }\n+            );\n+        }\n \n-                if ( i < minArgs.size() - 1) {\n-                    argList.addAll(minArgs.subList(i + 1, minArgs.size()));\n+        // 1 day inside the acceptable release window:\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                        LocalDate.of(\n+                                DataSourceUtils.MIN_DATE.getYear(),\n+                                DataSourceUtils.MIN_DATE.getMonth(),\n+                                DataSourceUtils.MIN_DATE.getDayOfMonth() + 1\n+                        ),\n+                        true\n                 }\n+        );\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                        LocalDate.of(\n+                                DataSourceUtils.MAX_DATE.getYear(),\n+                                DataSourceUtils.MAX_DATE.getMonth(),\n+                                DataSourceUtils.MAX_DATE.getDayOfMonth() - 1\n+                        ),\n+                        true\n+                }\n+        );\n \n-                try {\n-                    testArgs.add(\n-                            Collections.list(\n-                                    argList.get(0),\n-                                    argList.get(1),\n-                                    new GregorianCalendar(\n-                                            (int) argList.get(2), (int) argList.get(3), (int) argList.get(4)\n-                                    ),\n-                                    false\n-                            ).toArray()\n-                    );\n+        // ----------------------------------------\n+        // Dates out of range:\n+        // ----------------------------------------\n+\n+        // 1 day outside the acceptable release window:\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                        LocalDate.of(\n+                                DataSourceUtils.MIN_DATE.getYear(),\n+                                DataSourceUtils.MIN_DATE.getMonth(),\n+                                DataSourceUtils.MIN_DATE.getDayOfMonth() - 1\n+                        ),\n+                        false\n                 }\n-                catch (final IllegalArgumentException ex) {\n-                    // If this happened we gave the code an invalid month.  We should ignore this case.\n+        );\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                        LocalDate.of(\n+                                DataSourceUtils.MAX_DATE.getYear(),\n+                                DataSourceUtils.MAX_DATE.getMonth(),\n+                                DataSourceUtils.MAX_DATE.getDayOfMonth() + 1\n+                        ),\n+                        false\n                 }\n-            }\n-        }\n-\n-        // Tests for max version:\n-        final ArrayList<Integer> maxArgs = new ArrayList<>();\n-        maxArgs.add(DataSourceUtils.MAX_MAJOR_VERSION_NUMBER);\n-        maxArgs.add(DataSourceUtils.MAX_MINOR_VERSION_NUMBER);\n-        maxArgs.add(DataSourceUtils.MAX_DATE.get(Calendar.YEAR));\n-        maxArgs.add(DataSourceUtils.MAX_DATE.get(Calendar.MONTH));\n-        maxArgs.add(DataSourceUtils.MAX_DATE.get(Calendar.DAY_OF_MONTH));\n-\n-        for ( int offset = 1 ; offset < 3; ++offset ) {\n-            for ( int i = 0; i < maxArgs.size(); ++i ) {\n-\n-                final ArrayList<Object> argList = new ArrayList<>(maxArgs.subList(0, i));\n-                argList.add(maxArgs.get(i) + offset);\n+        );\n \n-                if ( i < maxArgs.size() - 1) {\n-                    argList.addAll(maxArgs.subList(i + 1, maxArgs.size()));\n+        // 1 month outside the acceptable release window:\n+\n+        // Note: Min date month is January, so cannot test one month before it -\n+        //       that test case is covered by the year being below the minimum.\n+        // TODO: Add in test when possible.\n+\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                        LocalDate.of(\n+                                DataSourceUtils.MAX_DATE.getYear(),\n+                                DataSourceUtils.MAX_DATE.getMonthValue() + 1,\n+                                DataSourceUtils.MAX_DATE.getDayOfMonth()\n+                        ),\n+                        false\n                 }\n+        );\n \n-                try {\n-                    testArgs.add(\n-                        Collections.list(\n-                            argList.get(0),\n-                            argList.get(1),\n-                            new GregorianCalendar(\n-                                    (int)argList.get(2), (int) argList.get(3), (int)argList.get(4)\n-                            ),\n-                            false\n-                        ).toArray()\n-                    );\n+        // 1 year outside the acceptable release window:\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                        LocalDate.of(\n+                                DataSourceUtils.MIN_DATE.getYear() - 1,\n+                                DataSourceUtils.MIN_DATE.getMonth(),\n+                                DataSourceUtils.MIN_DATE.getDayOfMonth()\n+                        ),\n+                        false\n                 }\n-                catch (final IllegalArgumentException ex) {\n-                    // If this happened we gave the code an invalid month.  We should ignore this case.\n+        );\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                        LocalDate.of(\n+                                DataSourceUtils.MAX_DATE.getYear() + 1,\n+                                DataSourceUtils.MAX_DATE.getMonth(),\n+                                DataSourceUtils.MAX_DATE.getDayOfMonth()\n+                        ),\n+                        false\n                 }\n-            }\n-        }\n+        );\n \n-        // Some specific test cases to prevent regression of version checks:\n-        // 1 Month after OK release date, but 1 day before OK release date (should pass):\n-        final Calendar c1 = new GregorianCalendar(DataSourceUtils.MIN_DATE.get(Calendar.YEAR), DataSourceUtils.MIN_DATE.get(Calendar.MONTH) + 1, DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH) - 1);\n-        testArgs.add( new Object[] { DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, DataSourceUtils.MIN_MINOR_VERSION_NUMBER, c1, true } );\n-        // 1 Year after OK release date, but 1 day before OK release date (should pass):\n-        final Calendar c2 = new GregorianCalendar(DataSourceUtils.MIN_DATE.get(Calendar.YEAR)+1, DataSourceUtils.MIN_DATE.get(Calendar.MONTH) , DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH) - 1);\n-        testArgs.add( new Object[] { DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, DataSourceUtils.MIN_MINOR_VERSION_NUMBER, c2, true } );\n-        // 1 Year after OK release date, but 1 month before OK release date (should pass):\n-        final Calendar c3 = new GregorianCalendar(DataSourceUtils.MIN_DATE.get(Calendar.YEAR)+1, DataSourceUtils.MIN_DATE.get(Calendar.MONTH) - 1, DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH));\n-        testArgs.add( new Object[] { DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, DataSourceUtils.MIN_MINOR_VERSION_NUMBER, c3, true } );\n-        // 1 Year after OK release date, but 1 month and 1 day before OK release date (should pass):\n-        final Calendar c4 = new GregorianCalendar(DataSourceUtils.MIN_DATE.get(Calendar.YEAR)+1, DataSourceUtils.MIN_DATE.get(Calendar.MONTH) - 1, DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH) - 1);\n-        testArgs.add( new Object[] { DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, DataSourceUtils.MIN_MINOR_VERSION_NUMBER, c4, true } );\n-\n-        // A value in the middle:\n-        final Calendar c5 = new GregorianCalendar(DataSourceUtils.MIN_DATE.get(Calendar.YEAR)+1, DataSourceUtils.MIN_DATE.get(Calendar.MONTH), DataSourceUtils.MIN_DATE.get(Calendar.DAY_OF_MONTH));\n-        testArgs.add( new Object[] { DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, DataSourceUtils.MIN_MINOR_VERSION_NUMBER, c5, true } );\n-\n-        // 1 Month before OK max date, but 1 day before OK max release date (should pass):\n-        final Calendar c6 = new GregorianCalendar(DataSourceUtils.MAX_DATE.get(Calendar.YEAR), DataSourceUtils.MAX_DATE.get(Calendar.MONTH) - 1, DataSourceUtils.MAX_DATE.get(Calendar.DAY_OF_MONTH) + 1);\n-        testArgs.add( new Object[] { DataSourceUtils.MAX_MAJOR_VERSION_NUMBER, DataSourceUtils.MAX_MINOR_VERSION_NUMBER, c6, true } );\n-        // 1 Year before OK max release date, but 1 day before OK max release date (should pass):\n-        final Calendar c7 = new GregorianCalendar(DataSourceUtils.MAX_DATE.get(Calendar.YEAR) - 1  , DataSourceUtils.MAX_DATE.get(Calendar.MONTH), DataSourceUtils.MAX_DATE.get(Calendar.DAY_OF_MONTH) + 1);\n-        testArgs.add( new Object[] { DataSourceUtils.MAX_MAJOR_VERSION_NUMBER, DataSourceUtils.MAX_MINOR_VERSION_NUMBER, c7, true } );\n-        // 1 Year before OK max release date, but 1 month before OK max release date (should pass):\n-        final Calendar c8 = new GregorianCalendar(DataSourceUtils.MAX_DATE.get(Calendar.YEAR) - 1, DataSourceUtils.MAX_DATE.get(Calendar.MONTH) - 1, DataSourceUtils.MAX_DATE.get(Calendar.DAY_OF_MONTH));\n-        testArgs.add( new Object[] { DataSourceUtils.MAX_MAJOR_VERSION_NUMBER, DataSourceUtils.MAX_MINOR_VERSION_NUMBER, c8, true } );\n-        // 1 Year before OK max release date, but 1 month and 1 day before OK max release date (should pass):\n-        final Calendar c9 = new GregorianCalendar(DataSourceUtils.MAX_DATE.get(Calendar.YEAR)-1, DataSourceUtils.MAX_DATE.get(Calendar.MONTH) - 1, DataSourceUtils.MAX_DATE.get(Calendar.DAY_OF_MONTH) + 1);\n-        testArgs.add( new Object[] { DataSourceUtils.MAX_MAJOR_VERSION_NUMBER, DataSourceUtils.MAX_MINOR_VERSION_NUMBER, c9, true } );\n+        // Valid Year, month outside bounds, all day values:\n+        for (int day = 1; day < 30; ++day) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                            DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                            LocalDate.of(2020, 9, day),\n+                            false\n+                    }\n+            );\n+        }\n \n         return testArgs;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE1ODMxMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r495158311", "bodyText": "Wouldn't need any of this if you switched to java.time as suggested above.", "author": "droazen", "createdAt": "2020-09-25T18:21:59Z", "path": "src/test/java/org/broadinstitute/hellbender/utils/UtilsUnitTest.java", "diffHunk": "@@ -978,4 +978,50 @@ public void testTestFilterCollectionByExpressions(Set<String> values, Collection\n         Set<String> actual = Utils.filterCollectionByExpressions(values, filters, exactMatch);\n         Assert.assertEquals(actual, expected);\n     }\n+\n+    @DataProvider\n+    public Object[][] provideForTestGetCalendarMonth() {\n+        return new Object[][] {\n+                {1, Calendar.JANUARY},\n+                {2, Calendar.FEBRUARY},\n+                {3, Calendar.MARCH},\n+                {4, Calendar.APRIL},\n+                {5, Calendar.MAY},\n+                {6, Calendar.JUNE},\n+                {7, Calendar.JULY},\n+                {8, Calendar.AUGUST},\n+                {9, Calendar.SEPTEMBER},\n+                {10, Calendar.OCTOBER},\n+                {11, Calendar.NOVEMBER},\n+                {12, Calendar.DECEMBER},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"provideForTestGetCalendarMonth\")\n+    public void testGetCalendarMonth(final int month, final int expected) {\n+        Assert.assertEquals(Utils.getCalendarMonth(month), expected);\n+    }\n+\n+    @DataProvider\n+    public Iterator<Object[]> provideForTestGetCalendarMonthOutOfRange() {\n+        final List<Object[]> l = new ArrayList<>();\n+\n+        // Below range:\n+        for (int i = 0; i > -10; --i ) {\n+            l.add(new Object[] {i});\n+        }\n+\n+        // Above range:\n+        for (int i = 13; i < 25; ++i ) {\n+            l.add(new Object[] {i});\n+        }\n+\n+        return l.iterator();\n+    }\n+\n+    @Test(dataProvider = \"provideForTestGetCalendarMonthOutOfRange\",\n+            expectedExceptions = IllegalArgumentException.class)\n+    public void testGetCalendarMonthOutOfRange(final int month) {\n+        Utils.getCalendarMonth(month);\n+    }", "originalCommit": "7d34cdfcb96851ba39041498bd574c7df238b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MTk2OA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r501781968", "bodyText": "Yup.  Switched to LocalDate.", "author": "jonn-smith", "createdAt": "2020-10-08T14:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE1ODMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/utils/UtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/utils/UtilsUnitTest.java\nindex b53c8ae91..46b26b080 100644\n--- a/src/test/java/org/broadinstitute/hellbender/utils/UtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/utils/UtilsUnitTest.java\n\n@@ -978,50 +978,4 @@ public final class UtilsUnitTest extends GATKBaseTest {\n         Set<String> actual = Utils.filterCollectionByExpressions(values, filters, exactMatch);\n         Assert.assertEquals(actual, expected);\n     }\n-\n-    @DataProvider\n-    public Object[][] provideForTestGetCalendarMonth() {\n-        return new Object[][] {\n-                {1, Calendar.JANUARY},\n-                {2, Calendar.FEBRUARY},\n-                {3, Calendar.MARCH},\n-                {4, Calendar.APRIL},\n-                {5, Calendar.MAY},\n-                {6, Calendar.JUNE},\n-                {7, Calendar.JULY},\n-                {8, Calendar.AUGUST},\n-                {9, Calendar.SEPTEMBER},\n-                {10, Calendar.OCTOBER},\n-                {11, Calendar.NOVEMBER},\n-                {12, Calendar.DECEMBER},\n-        };\n-    }\n-\n-    @Test(dataProvider = \"provideForTestGetCalendarMonth\")\n-    public void testGetCalendarMonth(final int month, final int expected) {\n-        Assert.assertEquals(Utils.getCalendarMonth(month), expected);\n-    }\n-\n-    @DataProvider\n-    public Iterator<Object[]> provideForTestGetCalendarMonthOutOfRange() {\n-        final List<Object[]> l = new ArrayList<>();\n-\n-        // Below range:\n-        for (int i = 0; i > -10; --i ) {\n-            l.add(new Object[] {i});\n-        }\n-\n-        // Above range:\n-        for (int i = 13; i < 25; ++i ) {\n-            l.add(new Object[] {i});\n-        }\n-\n-        return l.iterator();\n-    }\n-\n-    @Test(dataProvider = \"provideForTestGetCalendarMonthOutOfRange\",\n-            expectedExceptions = IllegalArgumentException.class)\n-    public void testGetCalendarMonthOutOfRange(final int month) {\n-        Utils.getCalendarMonth(month);\n-    }\n }\n"}}, {"oid": "f677b9915618b0b6b487e02878df937391bc4fb9", "url": "https://github.com/broadinstitute/gatk/commit/f677b9915618b0b6b487e02878df937391bc4fb9", "message": "Addressing first comment.", "committedDate": "2020-10-05T17:52:19Z", "type": "commit"}, {"oid": "b70c6db7693926c07a2c2cffa1ca3716923c01f7", "url": "https://github.com/broadinstitute/gatk/commit/b70c6db7693926c07a2c2cffa1ca3716923c01f7", "message": "Addressing the remaining comments.", "committedDate": "2020-10-08T15:47:50Z", "type": "commit"}, {"oid": "1f4df60f8b7b32f9bf242de4d93710cf849e714f", "url": "https://github.com/broadinstitute/gatk/commit/1f4df60f8b7b32f9bf242de4d93710cf849e714f", "message": "Fixing cloud tests.", "committedDate": "2020-10-08T16:46:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NDk2OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502554969", "bodyText": "LocalDate, not Calendar", "author": "droazen", "createdAt": "2020-10-09T16:49:36Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java", "diffHunk": "@@ -100,6 +115,51 @@ private DataSourceUtils() {}\n     //==================================================================================================================\n     // Public Static Methods:\n \n+    /**\n+     * Get the string representing the Min version information for funcotator as it would be written in the data sources\n+     * release files.\n+     * Max version info is specified in the following variables:\n+     *    {@link #MIN_MAJOR_VERSION_NUMBER}\n+     *    {@link #MIN_MINOR_VERSION_NUMBER}\n+     *    {@link #MIN_DATE}\n+     * @return A {@link String} representing the Min version information as it would appear in the data sources file name.\n+     */\n+    public static String getDataSourceMinVersionString() {\n+        return getDataSourceVersionString(MIN_MAJOR_VERSION_NUMBER, MIN_MINOR_VERSION_NUMBER, MIN_DATE);\n+    }\n+\n+    /**\n+     * Get the string representing the Max version information for funcotator as it would be written in the data sources\n+     * release files.\n+     * Max version info is specified in the following variables:\n+     *    {@link #MAX_MAJOR_VERSION_NUMBER}\n+     *    {@link #MAX_MINOR_VERSION_NUMBER}\n+     *    {@link #MAX_DATE}\n+     * @return A {@link String} representing the Max version information as it would appear in the data sources file name.\n+     */\n+    public static String getDataSourceMaxVersionString() {\n+        return getDataSourceVersionString(MAX_MAJOR_VERSION_NUMBER, MAX_MINOR_VERSION_NUMBER, MAX_DATE);\n+    }\n+\n+\n+    /**\n+     * Get the string representing the given version information for funcotator as it would be written in the data sources\n+     * release files.\n+     * @param major {@code int} representing the major version of the data sources to use.\n+     * @param minor {@code int} representing the minor version of the data sources to use.\n+     * @param date {@link Calendar} representing the date of the data sources to use.", "originalCommit": "1f4df60f8b7b32f9bf242de4d93710cf849e714f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3MzQxNw==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502573417", "bodyText": "Oops.  Fixed!", "author": "jonn-smith", "createdAt": "2020-10-09T17:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NDk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "82265a386c2df2ffd29fc62b42b18964360851e3", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\nindex 25c89781a..21e53ccc9 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n\n@@ -147,7 +147,7 @@ final public class DataSourceUtils {\n      * release files.\n      * @param major {@code int} representing the major version of the data sources to use.\n      * @param minor {@code int} representing the minor version of the data sources to use.\n-     * @param date {@link Calendar} representing the date of the data sources to use.\n+     * @param date {@link LocalDate} representing the date of the data sources to use.\n      * @return A {@link String} representing the given version information as it would appear in the data sources file name.\n      */\n     public static String getDataSourceVersionString(final int major, final int minor, final LocalDate date) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NTc1MA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502555750", "bodyText": "When this method is called in logDataSourcesInfo() and returns false, the UserException message thrown always states that the data source version is too old. However, in reality it might be either too old or too new.", "author": "droazen", "createdAt": "2020-10-09T16:51:01Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java", "diffHunk": "@@ -722,35 +782,37 @@ private static boolean logDataSourcesInfo(final Path dataSourcesPath) {\n         return dataSourcesPathIsAcceptable;\n     }\n \n+    /**\n+     * Checks that the version information given is within the valid range for data source versions.\n+     *\n+     * @param major int containing the major version number to be checked.\n+     * @param minor int containing the minor version number to be checked.\n+     * @param year int containing the year version number to be checked.RecQ DNA helicase WRN\n+     * @param month int containing the month version number to be checked.\n+     * @param day int containing the day version number to be checked.\n+     *\n+     * @return {@code true} iff the given version information is valid for the current data source ranges.  {@code false} otherwise.\n+     */\n     @VisibleForTesting\n     static boolean validateVersionInformation(final int major, final int minor, final int year, final int month, final int day) {", "originalCommit": "1f4df60f8b7b32f9bf242de4d93710cf849e714f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NTg5OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502575899", "bodyText": "Good point.  I'll fix the log message to be more informative.", "author": "jonn-smith", "createdAt": "2020-10-09T17:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NTc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "82265a386c2df2ffd29fc62b42b18964360851e3", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\nindex 25c89781a..21e53ccc9 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtils.java\n\n@@ -771,10 +771,12 @@ final public class DataSourceUtils {\n \n         // Warn the user if they need newer stuff.\n         if ( !dataSourcesPathIsAcceptable ) {\n-\n             String message = \"\";\n-            message = message + \"ERROR: Given data source path is too old!  Minimum required version is: \" + CURRENT_MINIMUM_DATA_SOURCE_VERSION + \" (yours: \" + version + \")\\n\";\n-            message = message + \"       You must download a newer version of the data sources from the Broad Institute FTP site: \" + DATA_SOURCES_FTP_PATH + \"\\n\";\n+            message = message + \"ERROR: Given data source path is too old or too new!  \\n\";\n+            message = message + \"       Minimum required version is: \" + CURRENT_MINIMUM_DATA_SOURCE_VERSION + \"\\n\";\n+            message = message + \"       Maximum allowed version is:  \" + CURRENT_MAXIMUM_DATA_SOURCE_VERSION + \"\\n\";\n+            message = message + \"       Yours:                       \" + version + \"\\n\";\n+            message = message + \"       You must download a compatible version of the data sources from the Broad Institute FTP site: \" + DATA_SOURCES_FTP_PATH + \"\\n\";\n             message = message + \"       or the Broad Institute Google Bucket: \" + DATA_SOURCES_BUCKET_PATH + \"\\n\";\n             throw new UserException( message );\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MTkxNw==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502561917", "bodyText": "I don't think this condition is quite right. If major == MIN_MAJOR, then minor must be >= MIN_MINOR. If major also happens to be == MAX_MAJOR (which it does when MIN_MAJOR == MAX_MAJOR), then minor also needs to be <= MAX_MINOR. So I think we want:\nminor >= DataSourceUtils.MIN_MINOR_VERSION_NUMBER && (major != DataSourceUtils.MAX_MAJOR_VERSION_NUMBER || minor <= DataSourceUtils.MAX_MINOR_VERSION_NUMBER)", "author": "droazen", "createdAt": "2020-10-09T17:02:58Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java", "diffHunk": "@@ -30,40 +34,223 @@\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n \n-        final ArrayList<Integer> baseArgs = new ArrayList<>();\n-        baseArgs.add(DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_YEAR_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_MONTH_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_DAY_RELEASED);\n+        // =============================================================\n+        // First do tests that check the major / minor version numbers:\n+        // -------------------------------------------------------------\n \n-        for ( int offset = -1 ; offset < 2; ++offset ) {\n-            for ( int i = 0; i < baseArgs.size(); ++i ) {\n+        final int MINOR_IT_MAX_VAL = 20;\n \n-                final ArrayList<Object> argList = new ArrayList<>();\n+        // major < MIN_MAJOR (minor shouldn't matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER - 1, minor, DataSourceUtils.MIN_DATE, false\n+                    }\n+            );\n+        }\n+\n+        // major == MIN_MAJOR (minor does matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, minor, DataSourceUtils.MIN_DATE,\n+                            (minor == DataSourceUtils.MIN_MINOR_VERSION_NUMBER || minor == DataSourceUtils.MAX_MINOR_VERSION_NUMBER)", "originalCommit": "1f4df60f8b7b32f9bf242de4d93710cf849e714f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMDcwNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502610705", "bodyText": "Yeah - this was tailored to the current values of the MIN_ and MAX_ minor versions.\nThese tests have been refactored as per some of your other comments, but I'll retain the new conditions.", "author": "jonn-smith", "createdAt": "2020-10-09T18:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MTkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "82265a386c2df2ffd29fc62b42b18964360851e3", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\nindex acfe62057..7a6968465 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n\n@@ -30,6 +31,55 @@ public class DataSourceUtilsUnitTest extends GATKBaseTest {\n     //==================================================================================================================\n     // Helper Methods:\n \n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     *\n+     * Calculates the expected value based on the validity of the input arguments and the valid data ranges in\n+     * {@link DataSourceUtils}.\n+     *\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date) {\n+        testArgs.add(\n+                new Object[]{\n+                        maj, min, date,\n+                        (\n+                            (maj >= DataSourceUtils.MIN_MAJOR_VERSION_NUMBER) &&\n+                            (maj <= DataSourceUtils.MAX_MAJOR_VERSION_NUMBER) &&\n+                            (min >= DataSourceUtils.MIN_MINOR_VERSION_NUMBER) &&\n+                            (min <= DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                        )\n+                        &&\n+                        (\n+                            (date.isAfter(DataSourceUtils.MIN_DATE) || date.isEqual(DataSourceUtils.MIN_DATE)) &&\n+                            (date.isBefore(DataSourceUtils.MAX_DATE) || date.isEqual(DataSourceUtils.MAX_DATE))\n+                        )\n+                }\n+        );\n+    }\n+\n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     * @param expected The expected {@code boolean} value for the test case given the input version data.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date,\n+                                    final boolean expected) {\n+        testArgs.add(new Object[]{maj, min, date, expected});\n+    }\n+\n     private List<Object[]>  createBaseTestVersionData() {\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MzY0Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502563643", "bodyText": "You can add in a test right now that would cover this case in the future, should the min and max major versions diverge. You can do this by adding a test case conditionally if (MIN_MAJOR_VERSION_NUMBER != MAX_MAJOR_VERSION_NUMBER). That way we don't have to worry about remembering to add this test case in the future.", "author": "droazen", "createdAt": "2020-10-09T17:06:18Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java", "diffHunk": "@@ -30,40 +34,223 @@\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n \n-        final ArrayList<Integer> baseArgs = new ArrayList<>();\n-        baseArgs.add(DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_YEAR_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_MONTH_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_DAY_RELEASED);\n+        // =============================================================\n+        // First do tests that check the major / minor version numbers:\n+        // -------------------------------------------------------------\n \n-        for ( int offset = -1 ; offset < 2; ++offset ) {\n-            for ( int i = 0; i < baseArgs.size(); ++i ) {\n+        final int MINOR_IT_MAX_VAL = 20;\n \n-                final ArrayList<Object> argList = new ArrayList<>();\n+        // major < MIN_MAJOR (minor shouldn't matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER - 1, minor, DataSourceUtils.MIN_DATE, false\n+                    }\n+            );\n+        }\n+\n+        // major == MIN_MAJOR (minor does matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, minor, DataSourceUtils.MIN_DATE,\n+                            (minor == DataSourceUtils.MIN_MINOR_VERSION_NUMBER || minor == DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                    }\n+            );\n+        }\n \n-                argList.addAll(baseArgs.subList(0, i));\n-                argList.add(baseArgs.get(i) + offset);\n+        // major > MIN_MAJOR and < MAX_MAJOR (minor shouldn't matter)\n+        // Can't currently test here - version numbers use integer values and right now\n+        // MIN_MAJOR_VERSION_NUMBER == MAX_MAJOR_VERSION_NUMBER\n+        // TODO: Add in test when possible.", "originalCommit": "1f4df60f8b7b32f9bf242de4d93710cf849e714f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NjQ2NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502576465", "bodyText": "Ok, cool.  Will do.", "author": "jonn-smith", "createdAt": "2020-10-09T17:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MzY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4OTA5MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502589091", "bodyText": "Note that the condition might actually need to be that MAX_MAJOR_VERSION_NUMBER - MIN_MAJOR_VERSION_NUMBER > 1, in this case", "author": "droazen", "createdAt": "2020-10-09T17:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MzY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MDIwMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502590201", "bodyText": "Yup - I actually already put that condition in \ud83d\ude1b", "author": "jonn-smith", "createdAt": "2020-10-09T17:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MzY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "82265a386c2df2ffd29fc62b42b18964360851e3", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\nindex acfe62057..7a6968465 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n\n@@ -30,6 +31,55 @@ public class DataSourceUtilsUnitTest extends GATKBaseTest {\n     //==================================================================================================================\n     // Helper Methods:\n \n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     *\n+     * Calculates the expected value based on the validity of the input arguments and the valid data ranges in\n+     * {@link DataSourceUtils}.\n+     *\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date) {\n+        testArgs.add(\n+                new Object[]{\n+                        maj, min, date,\n+                        (\n+                            (maj >= DataSourceUtils.MIN_MAJOR_VERSION_NUMBER) &&\n+                            (maj <= DataSourceUtils.MAX_MAJOR_VERSION_NUMBER) &&\n+                            (min >= DataSourceUtils.MIN_MINOR_VERSION_NUMBER) &&\n+                            (min <= DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                        )\n+                        &&\n+                        (\n+                            (date.isAfter(DataSourceUtils.MIN_DATE) || date.isEqual(DataSourceUtils.MIN_DATE)) &&\n+                            (date.isBefore(DataSourceUtils.MAX_DATE) || date.isEqual(DataSourceUtils.MAX_DATE))\n+                        )\n+                }\n+        );\n+    }\n+\n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     * @param expected The expected {@code boolean} value for the test case given the input version data.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date,\n+                                    final boolean expected) {\n+        testArgs.add(new Object[]{maj, min, date, expected});\n+    }\n+\n     private List<Object[]>  createBaseTestVersionData() {\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NDA1NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502564055", "bodyText": "I don't think this condition is right either. We know that major == MAX_MAJOR here, so minor needs to be <= MAX_MINOR. If major also happens to == MIN_MAJOR (which it does when MIN_MAJOR == MAX_MAJOR), then, then minor must also be >= MIN_MINOR. So here I think we want:\nminor <= DataSourceUtils.MAX_MINOR_VERSION_NUMBER && (major != DataSourceUtils.MIN_MAJOR_VERSION_NUMBER || minor >= DataSourceUtils.MIN_MINOR_VERSION_NUMBER)", "author": "droazen", "createdAt": "2020-10-09T17:07:07Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java", "diffHunk": "@@ -30,40 +34,223 @@\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n \n-        final ArrayList<Integer> baseArgs = new ArrayList<>();\n-        baseArgs.add(DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_YEAR_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_MONTH_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_DAY_RELEASED);\n+        // =============================================================\n+        // First do tests that check the major / minor version numbers:\n+        // -------------------------------------------------------------\n \n-        for ( int offset = -1 ; offset < 2; ++offset ) {\n-            for ( int i = 0; i < baseArgs.size(); ++i ) {\n+        final int MINOR_IT_MAX_VAL = 20;\n \n-                final ArrayList<Object> argList = new ArrayList<>();\n+        // major < MIN_MAJOR (minor shouldn't matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER - 1, minor, DataSourceUtils.MIN_DATE, false\n+                    }\n+            );\n+        }\n+\n+        // major == MIN_MAJOR (minor does matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, minor, DataSourceUtils.MIN_DATE,\n+                            (minor == DataSourceUtils.MIN_MINOR_VERSION_NUMBER || minor == DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                    }\n+            );\n+        }\n \n-                argList.addAll(baseArgs.subList(0, i));\n-                argList.add(baseArgs.get(i) + offset);\n+        // major > MIN_MAJOR and < MAX_MAJOR (minor shouldn't matter)\n+        // Can't currently test here - version numbers use integer values and right now\n+        // MIN_MAJOR_VERSION_NUMBER == MAX_MAJOR_VERSION_NUMBER\n+        // TODO: Add in test when possible.\n+\n+        // major == MAX_MAJOR (minor does matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MAX_MAJOR_VERSION_NUMBER, minor, DataSourceUtils.MAX_DATE,\n+                            (minor == DataSourceUtils.MIN_MINOR_VERSION_NUMBER || minor == DataSourceUtils.MAX_MINOR_VERSION_NUMBER)", "originalCommit": "1f4df60f8b7b32f9bf242de4d93710cf849e714f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMTE4OA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502611188", "bodyText": "Yeah - this was tailored to the current values of the MIN_ and MAX_ minor versions.\nThese tests have been refactored as per some of your other comments, but I'll retain the new conditions.", "author": "jonn-smith", "createdAt": "2020-10-09T18:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NDA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "82265a386c2df2ffd29fc62b42b18964360851e3", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\nindex acfe62057..7a6968465 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n\n@@ -30,6 +31,55 @@ public class DataSourceUtilsUnitTest extends GATKBaseTest {\n     //==================================================================================================================\n     // Helper Methods:\n \n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     *\n+     * Calculates the expected value based on the validity of the input arguments and the valid data ranges in\n+     * {@link DataSourceUtils}.\n+     *\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date) {\n+        testArgs.add(\n+                new Object[]{\n+                        maj, min, date,\n+                        (\n+                            (maj >= DataSourceUtils.MIN_MAJOR_VERSION_NUMBER) &&\n+                            (maj <= DataSourceUtils.MAX_MAJOR_VERSION_NUMBER) &&\n+                            (min >= DataSourceUtils.MIN_MINOR_VERSION_NUMBER) &&\n+                            (min <= DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                        )\n+                        &&\n+                        (\n+                            (date.isAfter(DataSourceUtils.MIN_DATE) || date.isEqual(DataSourceUtils.MIN_DATE)) &&\n+                            (date.isBefore(DataSourceUtils.MAX_DATE) || date.isEqual(DataSourceUtils.MAX_DATE))\n+                        )\n+                }\n+        );\n+    }\n+\n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     * @param expected The expected {@code boolean} value for the test case given the input version data.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date,\n+                                    final boolean expected) {\n+        testArgs.add(new Object[]{maj, min, date, expected});\n+    }\n+\n     private List<Object[]>  createBaseTestVersionData() {\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2OTc2MA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502569760", "bodyText": "When you check the minor versions, instead of iterating from 0 to 20, you should just check the boundary values 0, MIN_MINOR - 1, MIN_MINOR, MIN_MINOR + 1, MAX_MINOR - 1, MAX_MINOR, MAX_MINOR + 1. After all, you might have a minor version requirement that's > 20 one day.", "author": "droazen", "createdAt": "2020-10-09T17:19:05Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java", "diffHunk": "@@ -30,40 +34,223 @@\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n \n-        final ArrayList<Integer> baseArgs = new ArrayList<>();\n-        baseArgs.add(DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_YEAR_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_MONTH_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_DAY_RELEASED);\n+        // =============================================================\n+        // First do tests that check the major / minor version numbers:\n+        // -------------------------------------------------------------\n \n-        for ( int offset = -1 ; offset < 2; ++offset ) {\n-            for ( int i = 0; i < baseArgs.size(); ++i ) {\n+        final int MINOR_IT_MAX_VAL = 20;", "originalCommit": "1f4df60f8b7b32f9bf242de4d93710cf849e714f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMDI3Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502610276", "bodyText": "OK - Fixed!", "author": "jonn-smith", "createdAt": "2020-10-09T18:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2OTc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "82265a386c2df2ffd29fc62b42b18964360851e3", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\nindex acfe62057..7a6968465 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n\n@@ -30,6 +31,55 @@ public class DataSourceUtilsUnitTest extends GATKBaseTest {\n     //==================================================================================================================\n     // Helper Methods:\n \n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     *\n+     * Calculates the expected value based on the validity of the input arguments and the valid data ranges in\n+     * {@link DataSourceUtils}.\n+     *\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date) {\n+        testArgs.add(\n+                new Object[]{\n+                        maj, min, date,\n+                        (\n+                            (maj >= DataSourceUtils.MIN_MAJOR_VERSION_NUMBER) &&\n+                            (maj <= DataSourceUtils.MAX_MAJOR_VERSION_NUMBER) &&\n+                            (min >= DataSourceUtils.MIN_MINOR_VERSION_NUMBER) &&\n+                            (min <= DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                        )\n+                        &&\n+                        (\n+                            (date.isAfter(DataSourceUtils.MIN_DATE) || date.isEqual(DataSourceUtils.MIN_DATE)) &&\n+                            (date.isBefore(DataSourceUtils.MAX_DATE) || date.isEqual(DataSourceUtils.MAX_DATE))\n+                        )\n+                }\n+        );\n+    }\n+\n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     * @param expected The expected {@code boolean} value for the test case given the input version data.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date,\n+                                    final boolean expected) {\n+        testArgs.add(new Object[]{maj, min, date, expected});\n+    }\n+\n     private List<Object[]>  createBaseTestVersionData() {\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3MDQ3Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502570473", "bodyText": "This should be relative to one of the MIN/MAX constants, otherwise it will break in the future.", "author": "droazen", "createdAt": "2020-10-09T17:20:23Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java", "diffHunk": "@@ -30,40 +34,223 @@\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n \n-        final ArrayList<Integer> baseArgs = new ArrayList<>();\n-        baseArgs.add(DataSourceUtils.MIN_MAJOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_MINOR_VERSION_NUMBER);\n-        baseArgs.add(DataSourceUtils.MIN_YEAR_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_MONTH_RELEASED);\n-        baseArgs.add(DataSourceUtils.MIN_DAY_RELEASED);\n+        // =============================================================\n+        // First do tests that check the major / minor version numbers:\n+        // -------------------------------------------------------------\n \n-        for ( int offset = -1 ; offset < 2; ++offset ) {\n-            for ( int i = 0; i < baseArgs.size(); ++i ) {\n+        final int MINOR_IT_MAX_VAL = 20;\n \n-                final ArrayList<Object> argList = new ArrayList<>();\n+        // major < MIN_MAJOR (minor shouldn't matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER - 1, minor, DataSourceUtils.MIN_DATE, false\n+                    }\n+            );\n+        }\n+\n+        // major == MIN_MAJOR (minor does matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER, minor, DataSourceUtils.MIN_DATE,\n+                            (minor == DataSourceUtils.MIN_MINOR_VERSION_NUMBER || minor == DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                    }\n+            );\n+        }\n \n-                argList.addAll(baseArgs.subList(0, i));\n-                argList.add(baseArgs.get(i) + offset);\n+        // major > MIN_MAJOR and < MAX_MAJOR (minor shouldn't matter)\n+        // Can't currently test here - version numbers use integer values and right now\n+        // MIN_MAJOR_VERSION_NUMBER == MAX_MAJOR_VERSION_NUMBER\n+        // TODO: Add in test when possible.\n+\n+        // major == MAX_MAJOR (minor does matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MAX_MAJOR_VERSION_NUMBER, minor, DataSourceUtils.MAX_DATE,\n+                            (minor == DataSourceUtils.MIN_MINOR_VERSION_NUMBER || minor == DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                    }\n+            );\n+        }\n \n-                if ( i < baseArgs.size() - 1) {\n-                    argList.addAll(baseArgs.subList(i + 1, baseArgs.size()));\n+        // major > MAX_MAJOR (minor shouldn't matter)\n+        for (int minor = 0; minor < MINOR_IT_MAX_VAL; ++minor) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MAX_MAJOR_VERSION_NUMBER + 1, minor, DataSourceUtils.MAX_DATE, false\n+                    }\n+            );\n+        }\n+\n+        // =============================================================\n+        // Next do tests that check the dates themselves:\n+        // -------------------------------------------------------------\n+\n+        // ----------------------------------------\n+        // Dates in range:\n+        // ----------------------------------------\n+\n+        // Min version with minimally / maximally acceptable dates:\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_DATE,\n+                        true\n+                }\n+        );\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_DATE,\n+                        true\n                 }\n+        );\n \n-                argList.add(offset >= 0);\n+        // Max version with minimally / maximally acceptable dates:\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_DATE,\n+                        true\n+                }\n+        );\n+        testArgs.add(\n+                new Object[]{\n+                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_DATE,\n+                        true\n+                }\n+        );\n \n-                testArgs.add(argList.toArray());\n-            }\n+        // Year / Month inside acceptable dates with any valid day:\n+        for (int day = 1; day < 30; ++day) {\n+            testArgs.add(\n+                    new Object[]{\n+                            DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                            DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                            LocalDate.of(2020, 4, day),", "originalCommit": "1f4df60f8b7b32f9bf242de4d93710cf849e714f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4ODExOA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502588118", "bodyText": "Yeah - I didn't want to have to deal with month / year rollover when doing math.  I'll fix it now.", "author": "jonn-smith", "createdAt": "2020-10-09T17:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3MDQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "82265a386c2df2ffd29fc62b42b18964360851e3", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\nindex acfe62057..7a6968465 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n\n@@ -30,6 +31,55 @@ public class DataSourceUtilsUnitTest extends GATKBaseTest {\n     //==================================================================================================================\n     // Helper Methods:\n \n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     *\n+     * Calculates the expected value based on the validity of the input arguments and the valid data ranges in\n+     * {@link DataSourceUtils}.\n+     *\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date) {\n+        testArgs.add(\n+                new Object[]{\n+                        maj, min, date,\n+                        (\n+                            (maj >= DataSourceUtils.MIN_MAJOR_VERSION_NUMBER) &&\n+                            (maj <= DataSourceUtils.MAX_MAJOR_VERSION_NUMBER) &&\n+                            (min >= DataSourceUtils.MIN_MINOR_VERSION_NUMBER) &&\n+                            (min <= DataSourceUtils.MAX_MINOR_VERSION_NUMBER)\n+                        )\n+                        &&\n+                        (\n+                            (date.isAfter(DataSourceUtils.MIN_DATE) || date.isEqual(DataSourceUtils.MIN_DATE)) &&\n+                            (date.isBefore(DataSourceUtils.MAX_DATE) || date.isEqual(DataSourceUtils.MAX_DATE))\n+                        )\n+                }\n+        );\n+    }\n+\n+    /**\n+     * Add a test case to the given {@code testArgs} for version-based tests.\n+     * @param testArgs {@code List<Object[]>} test arguments list to which to add the test case.\n+     * @param maj {@code int} representing the major version to test.\n+     * @param min {@code int} representing the minor version to test.\n+     * @param date {@link LocalDate} represeting the date of the version to test.\n+     * @param expected The expected {@code boolean} value for the test case given the input version data.\n+     */\n+    private void addVersionTestCase(final List<Object[]> testArgs,\n+                                    final int maj,\n+                                    final int min,\n+                                    final LocalDate date,\n+                                    final boolean expected) {\n+        testArgs.add(new Object[]{maj, min, date, expected});\n+    }\n+\n     private List<Object[]>  createBaseTestVersionData() {\n \n         final ArrayList<Object[]> testArgs = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3MTE3OA==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502571178", "bodyText": "These will also break when the versions are updated -- recommend writing everything in terms of the defined constants.", "author": "droazen", "createdAt": "2020-10-09T17:21:48Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java", "diffHunk": "@@ -105,40 +297,103 @@\n \n     }\n \n+    @DataProvider\n+    private Object[][] provideForGetDataSourceVersionString() {\n+        return new Object[][] {\n+                {\n+                        DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MIN_DATE,\n+                        \"v1.6.20190124\"\n+                },\n+                {\n+                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n+                        DataSourceUtils.MAX_DATE,\n+                        \"v1.7.20200521\"", "originalCommit": "1f4df60f8b7b32f9bf242de4d93710cf849e714f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4OTYzOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502589639", "bodyText": "Actually these won't break when the versions are updated - this is just checking the string formatting of the version numbers, so it should be fine regardless as to what versions we create in the future.", "author": "jonn-smith", "createdAt": "2020-10-09T17:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3MTE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MDUyNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502590525", "bodyText": "No, it will definitely break as soon as MAX_MAJOR_VERSION_NUMBER is changed to something other than 1, etc., since you've hardcoded the string v1.7.20200521 as the expected value", "author": "droazen", "createdAt": "2020-10-09T18:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3MTE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MTA4Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6807#discussion_r502591086", "bodyText": "Ah - right.  I misunderstood.  Fixed.", "author": "jonn-smith", "createdAt": "2020-10-09T18:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3MTE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "82265a386c2df2ffd29fc62b42b18964360851e3", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\nindex acfe62057..7a6968465 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DataSourceUtilsUnitTest.java\n\n@@ -301,15 +355,15 @@ public class DataSourceUtilsUnitTest extends GATKBaseTest {\n     private Object[][] provideForGetDataSourceVersionString() {\n         return new Object[][] {\n                 {\n-                        DataSourceUtils.MIN_MAJOR_VERSION_NUMBER,\n-                        DataSourceUtils.MIN_MINOR_VERSION_NUMBER,\n-                        DataSourceUtils.MIN_DATE,\n+                        1,\n+                        6,\n+                        LocalDate.of(2020, Month.JANUARY, 24),\n                         \"v1.6.20190124\"\n                 },\n                 {\n-                        DataSourceUtils.MAX_MAJOR_VERSION_NUMBER,\n-                        DataSourceUtils.MAX_MINOR_VERSION_NUMBER,\n-                        DataSourceUtils.MAX_DATE,\n+                        1,\n+                        7,\n+                        LocalDate.of(2020, Month.MAY, 21),\n                         \"v1.7.20200521\"\n                 },\n                 {\n"}}, {"oid": "82265a386c2df2ffd29fc62b42b18964360851e3", "url": "https://github.com/broadinstitute/gatk/commit/82265a386c2df2ffd29fc62b42b18964360851e3", "message": "Addressing latest comments.", "committedDate": "2020-10-09T19:37:06Z", "type": "commit"}, {"oid": "2a1455a58f44b00fa5cd44f5a486ca0ede27941b", "url": "https://github.com/broadinstitute/gatk/commit/2a1455a58f44b00fa5cd44f5a486ca0ede27941b", "message": "Addressing comments.", "committedDate": "2020-10-09T19:54:46Z", "type": "commit"}, {"oid": "1102ea53f4986df2a61f2d7fe96c859751b4eef6", "url": "https://github.com/broadinstitute/gatk/commit/1102ea53f4986df2a61f2d7fe96c859751b4eef6", "message": "Addressing latest change.", "committedDate": "2020-10-09T20:19:01Z", "type": "commit"}, {"oid": "50172a112acfe71b5df5ba88703b19f3d666c2af", "url": "https://github.com/broadinstitute/gatk/commit/50172a112acfe71b5df5ba88703b19f3d666c2af", "message": "Addressing test failure typo.", "committedDate": "2020-10-09T20:27:26Z", "type": "commit"}]}