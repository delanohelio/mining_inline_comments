{"pr_number": 6444, "pr_title": "Make sure SelectVariants outputs variants in correct order (assuming input vcf is correctly sorted)", "pr_createdAt": "2020-02-06T22:51:11Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6444", "timeline": [{"oid": "b0b91164d24e669f04c67cc87ed8fe5b75c1e798", "url": "https://github.com/broadinstitute/gatk/commit/b0b91164d24e669f04c67cc87ed8fe5b75c1e798", "message": "fixing bug which allowed SelectVariants to output vcf with incorrectly sorted variants", "committedDate": "2020-02-06T21:11:36Z", "type": "commit"}, {"oid": "7f10680e844b7391bb57535248e192df11ea0235", "url": "https://github.com/broadinstitute/gatk/commit/7f10680e844b7391bb57535248e192df11ea0235", "message": "make SelectVariants always trim alleles when perserveAlleles is false", "committedDate": "2020-02-06T22:05:01Z", "type": "commit"}, {"oid": "623a02ea432751968c1015d9d1dce052c85156de", "url": "https://github.com/broadinstitute/gatk/commit/623a02ea432751968c1015d9d1dce052c85156de", "message": "undo change in previous commit", "committedDate": "2020-02-06T22:17:06Z", "type": "commit"}, {"oid": "07249047754e2acb9f683a022c5f760a95af7446", "url": "https://github.com/broadinstitute/gatk/commit/07249047754e2acb9f683a022c5f760a95af7446", "message": "fixing bug where --set-filtered-gt-to-nocall combined with sample selection and allele trimming causes crash", "committedDate": "2020-02-06T22:39:48Z", "type": "commit"}, {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd", "url": "https://github.com/broadinstitute/gatk/commit/99f912bff74128f84ff3bc32b1f98c8ff0148fcd", "message": "cleanup", "committedDate": "2020-02-06T22:48:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NjQ3NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376396475", "bodyText": "You can make this final by moving its constructor up to the declaration.", "author": "davidbenjamin", "createdAt": "2020-02-07T13:45:07Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -451,6 +451,8 @@\n \n     private final Map<Integer, Integer> ploidyToNumberOfAlleles = new LinkedHashMap<Integer, Integer>();\n \n+    private PriorityQueue<VariantContext> pendingVariants;", "originalCommit": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxOTYzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376519635", "bodyText": "done", "author": "kachulis", "createdAt": "2020-02-07T17:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NjQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "15555d4ff1154fd722c9f3110b3044bd32f56e96", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\nindex fa058e257..d6e32e10d 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n\n@@ -451,7 +451,7 @@ public final class SelectVariants extends VariantWalker {\n \n     private final Map<Integer, Integer> ploidyToNumberOfAlleles = new LinkedHashMap<Integer, Integer>();\n \n-    private PriorityQueue<VariantContext> pendingVariants;\n+    final private PriorityQueue<VariantContext> pendingVariants = new PriorityQueue<>(Comparator.comparingInt(VariantContext::getStart));\n \n     /**\n      * Set up the VCF writer, the sample expressions and regexs, filters inputs, and the JEXL matcher\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5ODcwOA==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376398708", "bodyText": "Moving variants to the right may seem like a non sequitur to the average reader so specify that it can occur if {@code preserveAlleles} is false.", "author": "davidbenjamin", "createdAt": "2020-02-07T13:49:36Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -533,6 +537,13 @@ public void onTraversalStart() {\n     @Override\n     public void apply(VariantContext vc, ReadsContext readsContext, ReferenceContext ref, FeatureContext featureContext) {\n \n+        /*check for pending variants to write out\n+        since variant starts will only be moved further right, we can write out a pending variant if the current variant start is after the pending variant start", "originalCommit": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMDkwOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376520909", "bodyText": "done", "author": "kachulis", "createdAt": "2020-02-07T17:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5ODcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "15555d4ff1154fd722c9f3110b3044bd32f56e96", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\nindex fa058e257..d6e32e10d 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n\n@@ -539,6 +537,7 @@ public final class SelectVariants extends VariantWalker {\n \n         /*check for pending variants to write out\n         since variant starts will only be moved further right, we can write out a pending variant if the current variant start is after the pending variant start\n+        variant record locations can move to the right due to allele trimming if preserveAlleles is false\n          */\n         while (!pendingVariants.isEmpty() && (pendingVariants.peek().getStart()<=vc.getStart() || !(pendingVariants.peek().getContig().equals(vc.getContig())))) {\n             vcfWriter.add(pendingVariants.poll());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTc4Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376405783", "bodyText": "I would just add every variant to pendingVariants.  This check is redundant with the while loop at the beginning of apply().  It's true that written as is the priority queue is usually empty, but I don't think the optimization is worth the added complexity.", "author": "davidbenjamin", "createdAt": "2020-02-07T14:04:36Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -617,11 +632,28 @@ public void apply(VariantContext vc, ReadsContext readsContext, ReferenceContext\n                     (!selectRandomFraction || Utils.getRandomGenerator().nextDouble() < fractionRandom)) {\n                 //remove annotations being dropped and write variantcontext\n                 final VariantContext variantContextToWrite = buildVariantContextWithDroppedAnnotationsRemoved(filteredGenotypeToNocall);\n-                vcfWriter.add(variantContextToWrite);\n+                if (variantContextToWrite.getStart() != vc.getStart()) {", "originalCommit": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMzEwNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376523105", "bodyText": "Yeah you're right, I was trying to avoid doing too many comparisons in the priority queue, but since it is nearly always empty this is an essentially useless optimization.", "author": "kachulis", "createdAt": "2020-02-07T17:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "15555d4ff1154fd722c9f3110b3044bd32f56e96", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\nindex fa058e257..d6e32e10d 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n\n@@ -632,19 +631,13 @@ public final class SelectVariants extends VariantWalker {\n                     (!selectRandomFraction || Utils.getRandomGenerator().nextDouble() < fractionRandom)) {\n                 //remove annotations being dropped and write variantcontext\n                 final VariantContext variantContextToWrite = buildVariantContextWithDroppedAnnotationsRemoved(filteredGenotypeToNocall);\n-                if (variantContextToWrite.getStart() != vc.getStart()) {\n-                    //if variant has shifted, need to add to priority queue it is now after a variant to follow\n-                    pendingVariants.add(variantContextToWrite);\n-                } else {\n-                    vcfWriter.add(variantContextToWrite);\n-                }\n+                pendingVariants.add(variantContextToWrite);\n             }\n         }\n     }\n \n     /**\n      * write out all remaining pending variants\n-     * @return\n      */\n     @Override\n     public Object onTraversalSuccess() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTg4Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376405887", "bodyText": "Don't need the return javadoc", "author": "davidbenjamin", "createdAt": "2020-02-07T14:04:50Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -617,11 +632,28 @@ public void apply(VariantContext vc, ReadsContext readsContext, ReferenceContext\n                     (!selectRandomFraction || Utils.getRandomGenerator().nextDouble() < fractionRandom)) {\n                 //remove annotations being dropped and write variantcontext\n                 final VariantContext variantContextToWrite = buildVariantContextWithDroppedAnnotationsRemoved(filteredGenotypeToNocall);\n-                vcfWriter.add(variantContextToWrite);\n+                if (variantContextToWrite.getStart() != vc.getStart()) {\n+                    //if variant has shifted, need to add to priority queue it is now after a variant to follow\n+                    pendingVariants.add(variantContextToWrite);\n+                } else {\n+                    vcfWriter.add(variantContextToWrite);\n+                }\n             }\n         }\n     }\n \n+    /**\n+     * write out all remaining pending variants\n+     * @return", "originalCommit": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15555d4ff1154fd722c9f3110b3044bd32f56e96", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\nindex fa058e257..d6e32e10d 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java\n\n@@ -632,19 +631,13 @@ public final class SelectVariants extends VariantWalker {\n                     (!selectRandomFraction || Utils.getRandomGenerator().nextDouble() < fractionRandom)) {\n                 //remove annotations being dropped and write variantcontext\n                 final VariantContext variantContextToWrite = buildVariantContextWithDroppedAnnotationsRemoved(filteredGenotypeToNocall);\n-                if (variantContextToWrite.getStart() != vc.getStart()) {\n-                    //if variant has shifted, need to add to priority queue it is now after a variant to follow\n-                    pendingVariants.add(variantContextToWrite);\n-                } else {\n-                    vcfWriter.add(variantContextToWrite);\n-                }\n+                pendingVariants.add(variantContextToWrite);\n             }\n         }\n     }\n \n     /**\n      * write out all remaining pending variants\n-     * @return\n      */\n     @Override\n     public Object onTraversalSuccess() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMTg4OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376411889", "bodyText": "I'm going to be opinionated here and argue against using IntegrationTestSpec.  I think the intent of these two tests would be better expressed in code:\nfinal ArgumentsBuilder args = new ArgumentsBuilder()\n   .addVcf(testFile)\n   .addOutput(output)\n   .addArgument(StandardArgumentDefinitions.SAMPLE_NAME_SHORT_NAME, \"SAMPLE_01\")\n   .addBoolean(\"preserve-alleles\", false); // this may be overkill since it's the default\n\nrunCommandLine(args);\n\nfinal List<VariantContext> vcs = VariantContextTestUtils.readEntireVCFIntoMemory(output).getRight();\n\nAssert.assertTrue(Comparators.isInOrder(vcs, Comparator.comparingInt(VariantContext::getStart)));\n\nThe virtues I see in this approach are 1) Only one test file needs to be added/maintained.  2) Doesn't require exact match and therefore less brittle.  3) Intent is explicit.", "author": "davidbenjamin", "createdAt": "2020-02-07T14:17:08Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java", "diffHunk": "@@ -85,6 +85,30 @@ public void testComplexSelection()  throws IOException {\n         spec.executeTest(\"testComplexSelection--\" + testFile, this);\n     }\n \n+    @Test\n+    public void testUntrimmedVariants() throws IOException {\n+        final String testFile = getToolTestDataDir() + \"untrimmed.vcf\";", "originalCommit": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMzQxOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376523419", "bodyText": "Well argued, I'm convinced!", "author": "kachulis", "createdAt": "2020-02-07T17:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMTg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "15555d4ff1154fd722c9f3110b3044bd32f56e96", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java\nindex e40e5d2b2..5650bae7e 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java\n\n@@ -85,28 +92,41 @@ public class SelectVariantsIntegrationTest extends CommandLineProgramTest {\n         spec.executeTest(\"testComplexSelection--\" + testFile, this);\n     }\n \n+    /**\n+     * When input variants are untrimmed, they can be trimmed by select variants, which may change their order.\n+     * This test confirms that this case is handled correctly, and the resulting variants are ouput correctly sorted.\n+     */\n     @Test\n     public void testUntrimmedVariants() throws IOException {\n-        final String testFile = getToolTestDataDir() + \"untrimmed.vcf\";\n+        final File testFile = new File(getToolTestDataDir() + \"untrimmed.vcf\");\n+        final File output = File.createTempFile(\"test_untrimmed\", \".vcf\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .addVCF(testFile)\n+                .addOutput(output)\n+                .addArgument(StandardArgumentDefinitions.SAMPLE_NAME_SHORT_NAME, \"SAMPLE_01\");\n \n-        final IntegrationTestSpec spec = new IntegrationTestSpec(\n-                baseTestString(\" -sn SAMPLE_01\", testFile),\n-                Collections.singletonList(getToolTestDataDir() + \"expected/\" + \"untrimmed.vcf\")\n-        );\n+        runCommandLine(args);\n \n-        spec.executeTest(\"testUntrimmedVariants--\" + testFile, this);\n+        final List<VariantContext> vcs = VariantContextTestUtils.readEntireVCFIntoMemory(output.getPath()).getRight();\n+\n+        Assert.assertTrue(Comparators.isInOrder(vcs, Comparator.comparingInt(VariantContext::getStart)));\n     }\n \n     @Test\n     public void testUntrimmedVariantsWithSetFilteredGtToNocall() throws IOException {\n-        final String testFile = getToolTestDataDir() + \"untrimmed.vcf\";\n+        final File testFile = new File(getToolTestDataDir() + \"untrimmed.vcf\");\n+        final File output = File.createTempFile(\"test_untrimmed\", \".vcf\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .addVCF(testFile)\n+                .addOutput(output)\n+                .addArgument(StandardArgumentDefinitions.SAMPLE_NAME_SHORT_NAME, \"SAMPLE_01\")\n+                .addArgument(\"set-filtered-gt-to-nocall\");\n \n-        final IntegrationTestSpec spec = new IntegrationTestSpec(\n-                baseTestString(\" -sn SAMPLE_01 --set-filtered-gt-to-nocall\", testFile),\n-                Collections.singletonList(getToolTestDataDir() + \"expected/\" + \"untrimmed.vcf\")\n-        );\n+        runCommandLine(args);\n+\n+        final List<VariantContext> vcs = VariantContextTestUtils.readEntireVCFIntoMemory(output.getPath()).getRight();\n \n-        spec.executeTest(\"testUntrimmedVariants--\" + testFile, this);\n+        Assert.assertTrue(Comparators.isInOrder(vcs, Comparator.comparingInt(VariantContext::getStart)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMjIxMw==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376412213", "bodyText": "This test needs some javadoc explaining the potential output ordering pitfall of the input untrimmed variants.", "author": "davidbenjamin", "createdAt": "2020-02-07T14:17:46Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java", "diffHunk": "@@ -85,6 +85,30 @@ public void testComplexSelection()  throws IOException {\n         spec.executeTest(\"testComplexSelection--\" + testFile, this);\n     }\n \n+    @Test\n+    public void testUntrimmedVariants() throws IOException {", "originalCommit": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTUyMA==", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376525520", "bodyText": "done", "author": "kachulis", "createdAt": "2020-02-07T17:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMjIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "15555d4ff1154fd722c9f3110b3044bd32f56e96", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java\nindex e40e5d2b2..5650bae7e 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java\n\n@@ -85,28 +92,41 @@ public class SelectVariantsIntegrationTest extends CommandLineProgramTest {\n         spec.executeTest(\"testComplexSelection--\" + testFile, this);\n     }\n \n+    /**\n+     * When input variants are untrimmed, they can be trimmed by select variants, which may change their order.\n+     * This test confirms that this case is handled correctly, and the resulting variants are ouput correctly sorted.\n+     */\n     @Test\n     public void testUntrimmedVariants() throws IOException {\n-        final String testFile = getToolTestDataDir() + \"untrimmed.vcf\";\n+        final File testFile = new File(getToolTestDataDir() + \"untrimmed.vcf\");\n+        final File output = File.createTempFile(\"test_untrimmed\", \".vcf\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .addVCF(testFile)\n+                .addOutput(output)\n+                .addArgument(StandardArgumentDefinitions.SAMPLE_NAME_SHORT_NAME, \"SAMPLE_01\");\n \n-        final IntegrationTestSpec spec = new IntegrationTestSpec(\n-                baseTestString(\" -sn SAMPLE_01\", testFile),\n-                Collections.singletonList(getToolTestDataDir() + \"expected/\" + \"untrimmed.vcf\")\n-        );\n+        runCommandLine(args);\n \n-        spec.executeTest(\"testUntrimmedVariants--\" + testFile, this);\n+        final List<VariantContext> vcs = VariantContextTestUtils.readEntireVCFIntoMemory(output.getPath()).getRight();\n+\n+        Assert.assertTrue(Comparators.isInOrder(vcs, Comparator.comparingInt(VariantContext::getStart)));\n     }\n \n     @Test\n     public void testUntrimmedVariantsWithSetFilteredGtToNocall() throws IOException {\n-        final String testFile = getToolTestDataDir() + \"untrimmed.vcf\";\n+        final File testFile = new File(getToolTestDataDir() + \"untrimmed.vcf\");\n+        final File output = File.createTempFile(\"test_untrimmed\", \".vcf\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .addVCF(testFile)\n+                .addOutput(output)\n+                .addArgument(StandardArgumentDefinitions.SAMPLE_NAME_SHORT_NAME, \"SAMPLE_01\")\n+                .addArgument(\"set-filtered-gt-to-nocall\");\n \n-        final IntegrationTestSpec spec = new IntegrationTestSpec(\n-                baseTestString(\" -sn SAMPLE_01 --set-filtered-gt-to-nocall\", testFile),\n-                Collections.singletonList(getToolTestDataDir() + \"expected/\" + \"untrimmed.vcf\")\n-        );\n+        runCommandLine(args);\n+\n+        final List<VariantContext> vcs = VariantContextTestUtils.readEntireVCFIntoMemory(output.getPath()).getRight();\n \n-        spec.executeTest(\"testUntrimmedVariants--\" + testFile, this);\n+        Assert.assertTrue(Comparators.isInOrder(vcs, Comparator.comparingInt(VariantContext::getStart)));\n     }\n \n     @Test\n"}}, {"oid": "15555d4ff1154fd722c9f3110b3044bd32f56e96", "url": "https://github.com/broadinstitute/gatk/commit/15555d4ff1154fd722c9f3110b3044bd32f56e96", "message": "changes from review", "committedDate": "2020-02-07T18:00:59Z", "type": "commit"}]}