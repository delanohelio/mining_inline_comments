{"pr_number": 6537, "pr_title": "Ignore specified contigs for pre-aligned BAMs in PathSeq", "pr_createdAt": "2020-04-03T18:55:03Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6537", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NTQyMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r409055421", "bodyText": "I'd like for the error to specify somehow is that the problem is the contigs specified for filtering.  Otherwise users will be validating all their input files and scratching their heads.", "author": "ldgauthier", "createdAt": "2020-04-15T18:41:47Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilter.java", "diffHunk": "@@ -170,6 +173,21 @@ private static GATKRead clearReadAlignment(final GATKRead read, final SAMFileHea\n                 });\n     }\n \n+    /**\n+     * Validate arguments\n+     */\n+    private void validateFilterArguments() {\n+        final SAMSequenceDictionary dictionary = header.getSequenceDictionary();\n+        if (filterArgs.alignedInput) {\n+            final Set<String> contigsToIgnoreSet = new HashSet<>(filterArgs.alignmentContigsToIgnore);\n+            for (final String contig : contigsToIgnoreSet) {\n+                if (dictionary.getSequence(contig) == null) {\n+                    throw new UserException.MissingContigInSequenceDictionary(contig, dictionary);", "originalCommit": "74b08a03ffbad5e7aca757c4200cbd87728f8682", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1ODYxNA==", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r419558614", "bodyText": "Done", "author": "mwalker174", "createdAt": "2020-05-04T16:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4514c2ed06b5a4a1dc228d1e492fc643570e4ddc", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilter.java b/src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilter.java\nindex f6631ca28..ae7986b9b 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilter.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilter.java\n\n@@ -182,7 +182,7 @@ public final class PSFilter implements AutoCloseable {\n             final Set<String> contigsToIgnoreSet = new HashSet<>(filterArgs.alignmentContigsToIgnore);\n             for (final String contig : contigsToIgnoreSet) {\n                 if (dictionary.getSequence(contig) == null) {\n-                    throw new UserException.MissingContigInSequenceDictionary(contig, dictionary);\n+                    throw new UserException.BadInput(\"Ignored sequence \" + contig + \" not found in input header.\");\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NjEyNg==", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r409056126", "bodyText": "Is it really called chrEBV?  Honestly I haven't looked at all 3500 names.", "author": "ldgauthier", "createdAt": "2020-04-15T18:42:58Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilterArgumentCollection.java", "diffHunk": "@@ -190,6 +193,16 @@\n             optional = true)\n     public int minIdentity = 30;\n \n+    /**\n+     * If using --is-host-aligned, ignores alignments to these contigs (can be specified multiple times). This\n+     * can be useful if the alignment is to a reference containing a microbe, such as chrEBV in hg38.", "originalCommit": "74b08a03ffbad5e7aca757c4200cbd87728f8682", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1ODg2OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r419558869", "bodyText": "Yep. I recently found out it's also in hg19 but it uses the NCBI accession", "author": "mwalker174", "createdAt": "2020-05-04T16:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NjEyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1Njc5Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r409056792", "bodyText": "I prefer Assert.assertTrue and Assert.assertFalse (below)", "author": "ldgauthier", "createdAt": "2020-04-15T18:44:08Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/spark/pathseq/HostAlignmentReadFilterTest.java", "diffHunk": "@@ -73,13 +75,50 @@ public void testUnmappedRead() {\n         Assert.assertEquals(true, test_i);\n     }\n \n+    @Test\n+    public void testIgnoredContig() {\n+        final Set<String> ignoredContigSet = Sets.newHashSet(IGNORED_CONTIG);\n+        final HostAlignmentReadFilter filter = new HostAlignmentReadFilter(MIN_IDENTITY, ignoredContigSet);\n+        final byte[] bases = new byte[100];\n+        final byte[] qual = new byte[100];\n+        Arrays.fill(bases, (byte) 'A');\n+        Arrays.fill(qual, (byte) 30);\n+\n+        // Mapped fully to ignored contig\n+        final GATKRead readA = ArtificialReadUtils.createArtificialRead(bases, qual, \"100M\");\n+        readA.setAttribute(\"NM\", 0);\n+        readA.setPosition(IGNORED_CONTIG, 1);\n+        final boolean testA = filter.test(readA);\n+        Assert.assertEquals(true, testA);", "originalCommit": "74b08a03ffbad5e7aca757c4200cbd87728f8682", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4514c2ed06b5a4a1dc228d1e492fc643570e4ddc", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/spark/pathseq/HostAlignmentReadFilterTest.java b/src/test/java/org/broadinstitute/hellbender/tools/spark/pathseq/HostAlignmentReadFilterTest.java\nindex 3c9d3bd60..921a884a4 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/spark/pathseq/HostAlignmentReadFilterTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/spark/pathseq/HostAlignmentReadFilterTest.java\n\n@@ -72,7 +72,7 @@ public final class HostAlignmentReadFilterTest {\n         final GATKRead read_in = ArtificialReadUtils.createArtificialRead(bases, qual, \"*\");\n         read_in.setIsUnmapped();\n         final boolean test_i = filter.test(read_in);\n-        Assert.assertEquals(true, test_i);\n+        Assert.assertTrue(test_i);\n     }\n \n     @Test\n"}}, {"oid": "c9a36fe6153752112b62971ca127966bd61b2780", "url": "https://github.com/broadinstitute/gatk/commit/c9a36fe6153752112b62971ca127966bd61b2780", "message": "Add ignored contigs to host read filter", "committedDate": "2020-05-04T16:22:41Z", "type": "commit"}, {"oid": "8891594718ee7304e52dc27336071e9ff9c52139", "url": "https://github.com/broadinstitute/gatk/commit/8891594718ee7304e52dc27336071e9ff9c52139", "message": "Delete unused validate function", "committedDate": "2020-05-04T16:22:41Z", "type": "commit"}, {"oid": "4514c2ed06b5a4a1dc228d1e492fc643570e4ddc", "url": "https://github.com/broadinstitute/gatk/commit/4514c2ed06b5a4a1dc228d1e492fc643570e4ddc", "message": "Address reviewer comments", "committedDate": "2020-05-04T16:22:41Z", "type": "commit"}, {"oid": "4514c2ed06b5a4a1dc228d1e492fc643570e4ddc", "url": "https://github.com/broadinstitute/gatk/commit/4514c2ed06b5a4a1dc228d1e492fc643570e4ddc", "message": "Address reviewer comments", "committedDate": "2020-05-04T16:22:41Z", "type": "forcePushed"}]}