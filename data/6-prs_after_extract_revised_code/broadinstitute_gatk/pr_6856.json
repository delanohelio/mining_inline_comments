{"pr_number": 6856, "pr_title": "Fix treatment of star alleles in use genotype posteriors for qual mode", "pr_createdAt": "2020-09-30T14:12:31Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6856", "timeline": [{"oid": "d3a988a39ed9eb84834e18f50cb4602ae1cc2363", "url": "https://github.com/broadinstitute/gatk/commit/d3a988a39ed9eb84834e18f50cb4602ae1cc2363", "message": "update changes after rebase", "committedDate": "2020-10-05T19:16:00Z", "type": "forcePushed"}, {"oid": "6ee6c36c49106a01e7675def5b31586a48762f37", "url": "https://github.com/broadinstitute/gatk/commit/6ee6c36c49106a01e7675def5b31586a48762f37", "message": "use genotype posteriors for qual spanning deletion fix", "committedDate": "2020-10-05T19:33:56Z", "type": "commit"}, {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "url": "https://github.com/broadinstitute/gatk/commit/0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "message": "update changes after rebase", "committedDate": "2020-10-05T19:33:56Z", "type": "commit"}, {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "url": "https://github.com/broadinstitute/gatk/commit/0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "message": "update changes after rebase", "committedDate": "2020-10-05T19:33:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTEyNA==", "url": "https://github.com/broadinstitute/gatk/pull/6856#discussion_r499921124", "bodyText": "This can be simplified a bit.\nAssuming you can write in posterior (I think is the case):\nfinal double[] noVarPosteriors = IntStream.rangeClosed(0, ploidy)\n                 .map(p, gcCalc.alleleCountsToIndex(0, p, spanIndelIdx, ploidy - p))\n                 .mapToDouble(i -> posteriors[i])\n                 .toArray();\nreturn QualUtils.phredSum(noVarPosteriors) - QualUtils.phredSum(posteriors);", "author": "vruano", "createdAt": "2020-10-05T23:13:40Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java", "diffHunk": "@@ -186,18 +186,41 @@ public VariantContext calculateGenotypes(final VariantContext vc, final Genotype\n         return builder.genotypes(genotypes).attributes(attributes).make();\n     }\n \n-    private double phredNoVariantPosteriorProbability(final GenotypesContext gc) {\n+    protected double phredNoVariantPosteriorProbability(final List<Allele> alleles, final GenotypesContext gc) {\n         return gc.stream()\n-                .map(gt -> VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN))\n-                //TODO reverting the following a change during refactoring, more sound but different to what it was:\n-                //        .mapToDouble(probs -> probs[0] - QualityUtils.phredSum(probs))\n-                .mapToDouble(probs -> probs[0])\n+                .mapToDouble(gt -> extractPNoAlt(alleles, gt))\n                 .filter(d -> !Double.isNaN(d))\n-                // We do not want to return 0 if empty but NaN,\n-                // so rather than simply call .sum() we have a custom reduce\n                 .reduce(Double.NaN, (a, b) -> Double.isNaN(a) ? b : (Double.isNaN(b) ? a : a + b) );\n     }\n \n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt) {\n+        final double[] gpArray = VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN);\n+        final double pNoAlt = extractPNoAlt(alleles, gt, gpArray);\n+        return pNoAlt;\n+    }\n+\n+    private static final GenotypeLikelihoodCalculators GL_CALCS = new GenotypeLikelihoodCalculators();\n+\n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt, final double[] posteriors) {\n+        if (!alleles.contains(Allele.SPAN_DEL)) {\n+            return posteriors[0] - Math.max(0, QualityUtils.phredSum(posteriors));\n+        } else {\n+            // here we need to get indices of genotypes composed of REF and * alleles\n+            final int ploidy = gt.getPloidy();\n+            final GenotypeLikelihoodCalculator glCalc = GL_CALCS.getInstance(ploidy, alleles.size());", "originalCommit": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTQxMg==", "url": "https://github.com/broadinstitute/gatk/pull/6856#discussion_r499921412", "bodyText": "I don't know why there is a need for the Math.max(0, x) but is trivial to add it to the code above I guess.", "author": "vruano", "createdAt": "2020-10-05T23:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTYxOA==", "url": "https://github.com/broadinstitute/gatk/pull/6856#discussion_r499921618", "bodyText": "Feel free to use IntRange instead of IntStream if you can get the same functionality from it.", "author": "vruano", "createdAt": "2020-10-05T23:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwOTYzNw==", "url": "https://github.com/broadinstitute/gatk/pull/6856#discussion_r500309637", "bodyText": "I don't know why there is a need for the Math.max(0, x) but is trivial to add it to the code above I guess.\n\nEvidently due to floating point error phredSum can sometimes return values < 0; see the comment, which I'd ported over from the similar code in AlleleFrequencyCalculator.", "author": "cwhelan", "createdAt": "2020-10-06T14:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "7a4685d65334668607392a3571231a051e357609", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java\nindex 72e250082..4ac2507f3 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java\n\n@@ -195,8 +196,7 @@ public abstract class GenotypingEngine<Config extends StandardCallerArgumentColl\n \n     private double extractPNoAlt(final List<Allele> alleles, final Genotype gt) {\n         final double[] gpArray = VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN);\n-        final double pNoAlt = extractPNoAlt(alleles, gt, gpArray);\n-        return pNoAlt;\n+        return extractPNoAlt(alleles, gt, gpArray);\n     }\n \n     private static final GenotypeLikelihoodCalculators GL_CALCS = new GenotypeLikelihoodCalculators();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NTEzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6856#discussion_r499975135", "bodyText": "unnecessary local variable.", "author": "vruano", "createdAt": "2020-10-06T02:43:34Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java", "diffHunk": "@@ -186,18 +186,41 @@ public VariantContext calculateGenotypes(final VariantContext vc, final Genotype\n         return builder.genotypes(genotypes).attributes(attributes).make();\n     }\n \n-    private double phredNoVariantPosteriorProbability(final GenotypesContext gc) {\n+    protected double phredNoVariantPosteriorProbability(final List<Allele> alleles, final GenotypesContext gc) {\n         return gc.stream()\n-                .map(gt -> VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN))\n-                //TODO reverting the following a change during refactoring, more sound but different to what it was:\n-                //        .mapToDouble(probs -> probs[0] - QualityUtils.phredSum(probs))\n-                .mapToDouble(probs -> probs[0])\n+                .mapToDouble(gt -> extractPNoAlt(alleles, gt))\n                 .filter(d -> !Double.isNaN(d))\n-                // We do not want to return 0 if empty but NaN,\n-                // so rather than simply call .sum() we have a custom reduce\n                 .reduce(Double.NaN, (a, b) -> Double.isNaN(a) ? b : (Double.isNaN(b) ? a : a + b) );\n     }\n \n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt) {\n+        final double[] gpArray = VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN);\n+        final double pNoAlt = extractPNoAlt(alleles, gt, gpArray);", "originalCommit": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a4685d65334668607392a3571231a051e357609", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java\nindex 72e250082..4ac2507f3 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java\n\n@@ -195,8 +196,7 @@ public abstract class GenotypingEngine<Config extends StandardCallerArgumentColl\n \n     private double extractPNoAlt(final List<Allele> alleles, final Genotype gt) {\n         final double[] gpArray = VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN);\n-        final double pNoAlt = extractPNoAlt(alleles, gt, gpArray);\n-        return pNoAlt;\n+        return extractPNoAlt(alleles, gt, gpArray);\n     }\n \n     private static final GenotypeLikelihoodCalculators GL_CALCS = new GenotypeLikelihoodCalculators();\n"}}, {"oid": "7a4685d65334668607392a3571231a051e357609", "url": "https://github.com/broadinstitute/gatk/commit/7a4685d65334668607392a3571231a051e357609", "message": "address pr comments", "committedDate": "2020-10-06T16:57:06Z", "type": "commit"}, {"oid": "b7132404c4123058a9cb7009f5baa24047491411", "url": "https://github.com/broadinstitute/gatk/commit/b7132404c4123058a9cb7009f5baa24047491411", "message": "fix typo", "committedDate": "2020-10-06T19:12:16Z", "type": "commit"}]}