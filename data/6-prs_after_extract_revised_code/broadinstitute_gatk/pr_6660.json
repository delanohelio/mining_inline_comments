{"pr_number": 6660, "pr_title": "Update for funcotator data sources", "pr_createdAt": "2020-06-16T14:13:48Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6660", "timeline": [{"oid": "c769d2193f94c5803e7b9f6d59896b93ee599763", "url": "https://github.com/broadinstitute/gatk/commit/c769d2193f94c5803e7b9f6d59896b93ee599763", "message": "Fixed issue with dbSNP source data for hg38.\n\nCode updates:\n- Now both hg19 and hg38 have the contig names translated to `chr__`\n- Added 'lncRNA' to GeneTranscriptType.\n- Added \"TAGENE\" gene tag.\n- Added the MANE_SELECT tag to FeatureTag.\n- Added the STOP_CODON_READTHROUGH tag to FeatureTag.\n- Updated the GTF versions that are parseable.\n- Fixed a parsing error with new versions of gencode and the remap\npositions (for liftover files).\n- Added test for indexing new lifted over gencode GTF.\n- Added Gencode_34 entries to MAF output map.\n- Minor changes to FuncotatorIntegrationTest.java for code syntax.\n- Pointed data source downloader at new data sources URL.\n- Minor updates to workflows to point at new data sources.\n\nScript updates:\n- Updated retrieval scripts for dbSNP and Gencode.\n- Added required field to gencode config file generation.\n- Now gencode retrieval script enforces double hash comments at\ntop of gencode GTF files.\n\nBug Fixes:\nRemoving erroneous trailing tab in MAF file output.\n\n- Fixes #6693", "committedDate": "2020-07-16T19:34:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MTg5OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r459661899", "bodyText": "What's the motivation behind this IndexFeatureFile test to index this specific gencode file? Can you add a code comment with an explanation?", "author": "droazen", "createdAt": "2020-07-23T18:56:52Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/IndexFeatureFileIntegrationTest.java", "diffHunk": "@@ -490,4 +492,19 @@ public void testEnsemblGtfIndexQuery(final SimpleInterval interval,\n             }\n         }\n     }\n+\n+    @Test\n+    public void testNewGencodeLiftoverGtfFile() {\n+        // First ensure that we can index the file:\n+        // Required Args:\n+        final ArgumentsBuilder arguments = new ArgumentsBuilder();\n+\n+        final File output = createTempFile(GENCODE_NEW_LIFTOVER_FILE.getName(), \".idx\");\n+\n+        arguments.addInput(GENCODE_NEW_LIFTOVER_FILE);\n+        arguments.addOutput(output.getAbsolutePath());\n+\n+        // Run the beast:\n+        runCommandLine(arguments);\n+    }", "originalCommit": "54ff67a5555d4b0ca9074071c8c10658edfb3a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1ODE2Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r467158162", "bodyText": "The latest gencode files for hg19 have slightly different header information and formatting\nthan previous versions (first noticed for gencode v34).  This is because they are lifting over the hg38 version to hg19.  This test is designed to ensure that such a file can still be indexed with the gencode codec.\nI'll add this info to the test.", "author": "jonn-smith", "createdAt": "2020-08-07T16:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MTg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "de266c79f528014909a296b651913c71489483a8", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/IndexFeatureFileIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/IndexFeatureFileIntegrationTest.java\nindex baa397e90..c686e4cc9 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/IndexFeatureFileIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/IndexFeatureFileIntegrationTest.java\n\n@@ -495,7 +494,12 @@ public final class IndexFeatureFileIntegrationTest extends CommandLineProgramTes\n \n     @Test\n     public void testNewGencodeLiftoverGtfFile() {\n-        // First ensure that we can index the file:\n+        // The latest gencode files for hg19 have slightly different header information and formatting\n+        // than previous versions (first noticed for gencode v34).\n+        // This is because they are lifting over the hg38 version to hg19.\n+        // This test is designed to ensure that such a file can still be indexed with the\n+        // gencode codec.\n+\n         // Required Args:\n         final ArgumentsBuilder arguments = new ArgumentsBuilder();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzAxNg==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r459663016", "bodyText": "Can you add new Funcotator tests to cover the fixes in this branch (the hg38 dbsnp contig names fix and the MAF tab fix)?", "author": "droazen", "createdAt": "2020-07-23T18:59:00Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorIntegrationTest.java", "diffHunk": "@@ -1689,7 +1691,6 @@ public void testEColiFuncotations() {\n         arguments.add(FuncotatorArgumentDefinitions.TRANSCRIPT_SELECTION_MODE_LONG_NAME, TranscriptSelectionMode.CANONICAL.toString());\n         runCommandLine(arguments);\n         assertEqualVariantFiles(outputFile, E_COLI_EXPECTED_OUT);\n-\n     }", "originalCommit": "54ff67a5555d4b0ca9074071c8c10658edfb3a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MTE2OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r467161169", "bodyText": "I'll add one in for the MAF trailing tab fix.\nI can add in a trivial test for hg38 dbsnp with the updated contig names, but I'm not sure it adds much value - I'd just be using an excerpt of that file to create funcotations.  The issue for that was really in the datasource as opposed to the code, so while adding in the test would show that the latest lifted over file works, it doesn't actually reflect the data source in the package we provide.  That is, this test would need to be updated every time we update the dbSNP data source so we have an excerpt from it here.  I think what makes more sense is to refresh the test datasource for dbSNP with the latest version - then the large scale tests can make sure that it works properly.  In fact, this should be done every time we update the data sources, but I think it's beyond the scope of this fix.\n@droazen What do you think?", "author": "jonn-smith", "createdAt": "2020-08-07T17:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3NDEwNw==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r467174107", "bodyText": "Actually, rather than adding in a test for the trailing tab thing, I'm adding a new overload for IntegrationTestSpec::assertEqualTextFiles to allow for whitespace to not be ignored.  Were it not for this, this trailing tab issue would have been found a long time ago.", "author": "jonn-smith", "createdAt": "2020-08-07T17:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzAxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxNDQzMg==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r471714432", "bodyText": "Add a comment about not ignoring trailing whitespace here.", "author": "droazen", "createdAt": "2020-08-17T19:00:58Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/mafOutput/MafOutputRendererUnitTest.java", "diffHunk": "@@ -1163,8 +1163,9 @@ public void testWrite(final List<VariantContext> variants, final List<List<Funco\n             }\n         }\n \n+        // Make sure our files are as we expect them to be:\n         try {\n-            IntegrationTestSpec.assertEqualTextFiles(outFile, expectedFile, \"#\");\n+            IntegrationTestSpec.assertEqualTextFiles(outFile, expectedFile, MafOutputRendererConstants.COMMENT_STRING, false);", "originalCommit": "9f6221ca7b4d12c77462f2c2fea1496d6e2032fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyOTcyNA==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r481129724", "bodyText": "\ud83d\udc4d", "author": "jonn-smith", "createdAt": "2020-09-01T13:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxNDQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "f910b260717c8b8a1d2da6092bff7e1aede78961", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/mafOutput/MafOutputRendererUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/mafOutput/MafOutputRendererUnitTest.java\nindex fff0d048c..a74f8418a 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/mafOutput/MafOutputRendererUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/mafOutput/MafOutputRendererUnitTest.java\n\n@@ -1163,9 +1163,8 @@ public class MafOutputRendererUnitTest extends GATKBaseTest {\n             }\n         }\n \n-        // Make sure our files are as we expect them to be:\n         try {\n-            IntegrationTestSpec.assertEqualTextFiles(outFile, expectedFile, MafOutputRendererConstants.COMMENT_STRING, false);\n+            IntegrationTestSpec.assertEqualTextFiles(outFile, expectedFile, \"#\");\n         }\n         catch (final IOException ex) {\n             throw new GATKException(\"ERROR comparing text files: \" + outFile.toURI().toString() + \" and \" + expectedFile.toURI().toString(), ex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxODU3NA==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r471718574", "bodyText": "You still need to add some kind of Funcotator test to cover the fix for dbsnp. Anything reasonable that fails without the fix and passes with it is fine, provided that it covers the actual files published in the latest datasource release. How about a cloud test (@Test(groups={\"cloud\"})) that does 4 small queries on the actual hosted dbsnp VCF from the latest Funcotator datasources in GCS: a tiny interval on each of chr1, chrM, chrX, and chrY. The test could just assert that you get a certain expected number of records from each query. You can do this trivially using a FeatureDataSource.", "author": "droazen", "createdAt": "2020-08-17T19:08:53Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorIntegrationTest.java", "diffHunk": "@@ -498,7 +498,7 @@ private ArgumentsBuilder createBaselineArgumentsForFuncotator(final String varia\n     // DO NOT ADD THIS TO ANY TEST GROUPS!", "originalCommit": "9f6221ca7b4d12c77462f2c2fea1496d6e2032fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzMDIzNg==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r481130236", "bodyText": "Sounds good to me.", "author": "jonn-smith", "createdAt": "2020-09-01T13:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxODU3NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTU5NA==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485819594", "bodyText": "These can't be final? Also, generally when something is @VisibleForTesting, the test class is in the same package and so default/package access is sufficient rather than public access.", "author": "droazen", "createdAt": "2020-09-09T18:14:02Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/funcotator/BaseFuncotatorArgumentCollection.java", "diffHunk": "@@ -22,9 +23,11 @@\n      * This variable is necessary to resolve the differences between b37 and hg19 when\n      * dealing with Homo Sapiens samples.\n      */\n-    protected static String FuncotatorReferenceVersionHg19 = \"hg19\";\n+    @VisibleForTesting\n+    public static String FuncotatorReferenceVersionHg19 = \"hg19\";\n     /** String representing the hg38 version of the homo sapiens reference. */\n-    protected static String FuncotatorReferenceVersionHg38 = \"hg38\";\n+    @VisibleForTesting\n+    public static String FuncotatorReferenceVersionHg38 = \"hg38\";", "originalCommit": "b92ecb99e79116699512e3f34daf7585145965dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMjYyNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485832625", "bodyText": "Oops.  They definitely should be final.  Should have done that when I originally implemented this.\nUnfortunately they cannot be package-private.  DbSnpIntegrationTest (org.broadinstitute.hellbender.tools.funcotator.dataSource) is not in the same package as BaseFuncotatorArgumentCollection (org.broadinstitute.hellbender.tools.funcotator) so needs the extra visibility.", "author": "jonn-smith", "createdAt": "2020-09-09T18:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "f910b260717c8b8a1d2da6092bff7e1aede78961", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/BaseFuncotatorArgumentCollection.java b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/BaseFuncotatorArgumentCollection.java\nindex 508e5595c..e4f6901a6 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/BaseFuncotatorArgumentCollection.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/BaseFuncotatorArgumentCollection.java\n\n@@ -23,11 +22,9 @@ public abstract class BaseFuncotatorArgumentCollection implements Serializable {\n      * This variable is necessary to resolve the differences between b37 and hg19 when\n      * dealing with Homo Sapiens samples.\n      */\n-    @VisibleForTesting\n-    public static String FuncotatorReferenceVersionHg19 = \"hg19\";\n+    protected static String FuncotatorReferenceVersionHg19 = \"hg19\";\n     /** String representing the hg38 version of the homo sapiens reference. */\n-    @VisibleForTesting\n-    public static String FuncotatorReferenceVersionHg38 = \"hg38\";\n+    protected static String FuncotatorReferenceVersionHg38 = \"hg38\";\n \n     @Argument(\n             shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTkxNg==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485819916", "bodyText": "Same question: can these be final and package access instead of public?", "author": "droazen", "createdAt": "2020-09-09T18:14:35Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorDataSourceDownloader.java", "diffHunk": "@@ -71,17 +71,17 @@\n     //==================================================================================================================\n     // Private Static Members:\n \n-    private static String BASE_URL = \"gs://broad-public-datasets/funcotator/funcotator_dataSources.v1.6.20190124\";\n+    private static String BASE_URL = \"gs://broad-public-datasets/funcotator/funcotator_dataSources.v1.7.20200521\";\n \n     private static String GERMLINE_GCLOUD_DATASOURCES_BASEURL     = BASE_URL + \"g\";\n     @VisibleForTesting\n     static Path   GERMLINE_GCLOUD_DATASOURCES_PATH        = IOUtils.getPath(GERMLINE_GCLOUD_DATASOURCES_BASEURL + \".tar.gz\");\n     @VisibleForTesting\n     static Path   GERMLINE_GCLOUD_DATASOURCES_SHA256_PATH = IOUtils.getPath(GERMLINE_GCLOUD_DATASOURCES_BASEURL + \".sha256\");\n \n-    private static String SOMATIC_GCLOUD_DATASOURCES_BASEURL     = BASE_URL + \"s\";\n-    @VisibleForTesting\n-    static Path   SOMATIC_GCLOUD_DATASOURCES_PATH        = IOUtils.getPath(SOMATIC_GCLOUD_DATASOURCES_BASEURL + \".tar.gz\");\n+    public static String SOMATIC_GCLOUD_DATASOURCES_BASEURL     = BASE_URL + \"s\";\n+\n+    public static Path   SOMATIC_GCLOUD_DATASOURCES_PATH        = IOUtils.getPath(SOMATIC_GCLOUD_DATASOURCES_BASEURL + \".tar.gz\");", "originalCommit": "b92ecb99e79116699512e3f34daf7585145965dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MzQwNA==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485843404", "bodyText": "A lot of fields here can be made final, but the same package issue exists here as in the above case.", "author": "jonn-smith", "createdAt": "2020-09-09T18:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "f910b260717c8b8a1d2da6092bff7e1aede78961", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorDataSourceDownloader.java b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorDataSourceDownloader.java\nindex 8de247f23..4dd3b1b69 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorDataSourceDownloader.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/funcotator/FuncotatorDataSourceDownloader.java\n\n@@ -79,9 +79,9 @@ public class FuncotatorDataSourceDownloader extends CommandLineProgram {\n     @VisibleForTesting\n     static Path   GERMLINE_GCLOUD_DATASOURCES_SHA256_PATH = IOUtils.getPath(GERMLINE_GCLOUD_DATASOURCES_BASEURL + \".sha256\");\n \n-    public static String SOMATIC_GCLOUD_DATASOURCES_BASEURL     = BASE_URL + \"s\";\n-\n-    public static Path   SOMATIC_GCLOUD_DATASOURCES_PATH        = IOUtils.getPath(SOMATIC_GCLOUD_DATASOURCES_BASEURL + \".tar.gz\");\n+    private static String SOMATIC_GCLOUD_DATASOURCES_BASEURL     = BASE_URL + \"s\";\n+    @VisibleForTesting\n+    static Path   SOMATIC_GCLOUD_DATASOURCES_PATH        = IOUtils.getPath(SOMATIC_GCLOUD_DATASOURCES_BASEURL + \".tar.gz\");\n     @VisibleForTesting\n     static Path   SOMATIC_GCLOUD_DATASOURCES_SHA256_PATH = IOUtils.getPath(SOMATIC_GCLOUD_DATASOURCES_BASEURL + \".sha256\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNjg4MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485826881", "bodyText": "Open this FeatureDataSource in a try-with-resources block to ensure that it gets closed.", "author": "droazen", "createdAt": "2020-09-09T18:27:09Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.broadinstitute.hellbender.tools.funcotator.dataSources;\n+\n+import htsjdk.samtools.util.Locatable;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.engine.FeatureDataSource;\n+import org.broadinstitute.hellbender.tools.funcotator.BaseFuncotatorArgumentCollection;\n+import org.broadinstitute.hellbender.tools.funcotator.FuncotatorDataSourceDownloader;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+/**\n+ * Class to hold integration tests for the dbSNP data source.\n+ */\n+public class DbSnpIntegrationTest extends CommandLineProgramTest {\n+\n+    private final Path DB_SNP_HG19_FILE_PATH       = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz\"\n+    );\n+    private final Path DB_SNP_HG19_INDEX_FILE_PATH = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz.tbi\"\n+    );\n+\n+    private final Path DB_SNP_HG38_FILE_PATH       = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz\"\n+    );\n+    private final Path DB_SNP_HG38_INDEX_FILE_PATH = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz.tbi\"\n+    );\n+\n+    @DataProvider\n+    private Object[][] provideFortestDbSnpDataSourceParsing() {\n+        return new Object[][] {\n+                // HG19 tests:\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chr1\", 10318704, 10318704),\n+                    \"rs746945770\",\n+                    Allele.create(\"G\", true),\n+                    Allele.create(\"A\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chrX\", 31213723, 31213723),\n+                    \"rs5972332\",\n+                    Allele.create(\"C\", true),\n+                    Allele.create(\"T\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chrY\", 8551842, 8551842),\n+                    \"rs562075277\",\n+                    Allele.create(\"G\", true),\n+                    Allele.create(\"A\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chrM\", 5005, 5005),\n+                    \"rs879008075\",\n+                    Allele.create(\"T\", true),\n+                    Allele.create(\"C\")\n+                },\n+                // HG38 tests:\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chr1\", 84349785, 84349785),\n+                    \"rs17131617\",\n+                    Allele.create(\"T\", true),\n+                    Allele.create(\"C\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chrX\", 80688070, 80688070),\n+                    \"rs3122407\",\n+                    Allele.create(\"T\", true),\n+                    Allele.create(\"C\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chrY\", 13355944, 13355944),\n+                    \"rs2032654\",\n+                    Allele.create(\"A\", true),\n+                    Allele.create(\"G\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chrM\", 5131, 5133),\n+                    \"rs199476116\",\n+                    Allele.create(\"TAA\", true),\n+                    Allele.create(\"T\")\n+                }\n+        };\n+    }\n+\n+    @Test(groups={\"cloud\"}, dataProvider = \"provideFortestDbSnpDataSourceParsing\")\n+    public void testDbSnpDataSourceParsing( final String refVersion,\n+                                            final Locatable interval,\n+                                            final String expectedID,\n+                                            final Allele expectedRefAllele,\n+                                            final Allele expectedAltAllele) {\n+        // 1 - Get the correct version of dbSNP from the funcotator data sources bucket:\n+        final Path dbSnpFile = (refVersion.equals(BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38))\n+                ? DB_SNP_HG38_FILE_PATH\n+                : DB_SNP_HG19_FILE_PATH;\n+\n+        // 2 - Create a FeatureDataSource from the dbSNP VCF:\n+        final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpFile.toUri().toString());", "originalCommit": "b92ecb99e79116699512e3f34daf7585145965dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNDI5NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485834295", "bodyText": "Yup.  Fixed!", "author": "jonn-smith", "createdAt": "2020-09-09T18:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNjg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f910b260717c8b8a1d2da6092bff7e1aede78961", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java\ndeleted file mode 100644\nindex eb75f32d8..000000000\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java\n+++ /dev/null\n\n@@ -1,171 +0,0 @@\n-package org.broadinstitute.hellbender.tools.funcotator.dataSources;\n-\n-import htsjdk.samtools.util.Locatable;\n-import htsjdk.variant.variantcontext.Allele;\n-import htsjdk.variant.variantcontext.VariantContext;\n-import org.broadinstitute.hellbender.CommandLineProgramTest;\n-import org.broadinstitute.hellbender.engine.FeatureDataSource;\n-import org.broadinstitute.hellbender.tools.funcotator.BaseFuncotatorArgumentCollection;\n-import org.broadinstitute.hellbender.tools.funcotator.FuncotatorDataSourceDownloader;\n-import org.broadinstitute.hellbender.utils.SimpleInterval;\n-import org.broadinstitute.hellbender.utils.io.IOUtils;\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.nio.file.Path;\n-import java.util.List;\n-\n-/**\n- * Class to hold integration tests for the dbSNP data source.\n- */\n-public class DbSnpIntegrationTest extends CommandLineProgramTest {\n-\n-    private final Path DB_SNP_HG19_FILE_PATH       = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz\"\n-    );\n-    private final Path DB_SNP_HG19_INDEX_FILE_PATH = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz.tbi\"\n-    );\n-\n-    private final Path DB_SNP_HG38_FILE_PATH       = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz\"\n-    );\n-    private final Path DB_SNP_HG38_INDEX_FILE_PATH = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz.tbi\"\n-    );\n-\n-    @DataProvider\n-    private Object[][] provideFortestDbSnpDataSourceParsing() {\n-        return new Object[][] {\n-                // HG19 tests:\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chr1\", 10318704, 10318704),\n-                    \"rs746945770\",\n-                    Allele.create(\"G\", true),\n-                    Allele.create(\"A\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chrX\", 31213723, 31213723),\n-                    \"rs5972332\",\n-                    Allele.create(\"C\", true),\n-                    Allele.create(\"T\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chrY\", 8551842, 8551842),\n-                    \"rs562075277\",\n-                    Allele.create(\"G\", true),\n-                    Allele.create(\"A\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chrM\", 5005, 5005),\n-                    \"rs879008075\",\n-                    Allele.create(\"T\", true),\n-                    Allele.create(\"C\")\n-                },\n-                // HG38 tests:\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chr1\", 84349785, 84349785),\n-                    \"rs17131617\",\n-                    Allele.create(\"T\", true),\n-                    Allele.create(\"C\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chrX\", 80688070, 80688070),\n-                    \"rs3122407\",\n-                    Allele.create(\"T\", true),\n-                    Allele.create(\"C\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chrY\", 13355944, 13355944),\n-                    \"rs2032654\",\n-                    Allele.create(\"A\", true),\n-                    Allele.create(\"G\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chrM\", 5131, 5133),\n-                    \"rs199476116\",\n-                    Allele.create(\"TAA\", true),\n-                    Allele.create(\"T\")\n-                }\n-        };\n-    }\n-\n-    @Test(groups={\"cloud\"}, dataProvider = \"provideFortestDbSnpDataSourceParsing\")\n-    public void testDbSnpDataSourceParsing( final String refVersion,\n-                                            final Locatable interval,\n-                                            final String expectedID,\n-                                            final Allele expectedRefAllele,\n-                                            final Allele expectedAltAllele) {\n-        // 1 - Get the correct version of dbSNP from the funcotator data sources bucket:\n-        final Path dbSnpFile = (refVersion.equals(BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38))\n-                ? DB_SNP_HG38_FILE_PATH\n-                : DB_SNP_HG19_FILE_PATH;\n-\n-        // 2 - Create a FeatureDataSource from the dbSNP VCF:\n-        final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpFile.toUri().toString());\n-\n-        // Do a dummy check here:\n-        Assert.assertNotNull(dbSnpDataSource);\n-\n-        // 3 - Attempt to read sites and features from the FeatureDataSource:\n-        final List<VariantContext> features = dbSnpDataSource.queryAndPrefetch(interval);\n-        Assert.assertEquals(features.size(), 1);\n-\n-        final VariantContext dbSnpVariant = features.get(0);\n-        Assert.assertEquals(dbSnpVariant.getContig(), interval.getContig());\n-        Assert.assertEquals(dbSnpVariant.getStart(), interval.getStart());\n-        Assert.assertEquals(dbSnpVariant.getEnd(), interval.getEnd());\n-        Assert.assertEquals(dbSnpVariant.getID(), expectedID);\n-        Assert.assertEquals(dbSnpVariant.getAlleles().size(), 2);\n-        Assert.assertEquals(dbSnpVariant.getAlleles().get(0), expectedRefAllele, \"Variant has incorrect ref allele: \" + dbSnpVariant.getAlleles().get(0)  + \" != \" + expectedRefAllele + \" [\" + interval + \" in \" + dbSnpFile + \"]\");\n-        Assert.assertEquals(dbSnpVariant.getAlleles().get(1), expectedAltAllele);\n-    }\n-\n-\n-////    @Test(groups={\"cloud\"})\n-//    @Test\n-//    public void testDbSnpDataSourceParsing() {\n-//        // 1 - Extract the dbSNP file from the current datasources for Funcotator:\n-//        logger.info(\"Creating input stream from gcloud file:\");\n-//        try (final InputStream dataSourcesInputStream = new BufferedInputStream(Files.newInputStream(DB_SNP_FILE_NAME))) {\n-//            final Path dbSnpPath = extractAndReturnDbSnpPath(dataSourcesInputStream);\n-//\n-//            // 2 - Create a FeatureDataSource from the dbSNP VCF:\n-//            final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpPath.toUri().toString());\n-//\n-//            // Do a dummy check here:\n-//            Assert.assertNotNull(dbSnpDataSource);\n-//\n-//            // 3 - Attempt to read sites and features from the FeatureDataSource that would fail with the old code:\n-//            final List<Locatable> intervalsToQuery = Arrays.asList(\n-//                    new SimpleInterval(\"chr1\", 84349784, 84349786), // rs17131617 T/C\n-//                    new SimpleInterval(\"chrX\", 80688069, 80688071), // rs3122407 T/C\n-//                    new SimpleInterval(\"chrY\", 13355943, 13355945), // rs2032654 A/G\n-//                    new SimpleInterval(\"chrM\", 5131, 5134)    // rs199476116 2-BP DEL, 5132AA\n-//            );\n-//\n-//            for (int i = 0; i < intervalsToQuery.size(); ++i) {\n-//                final Locatable interval = intervalsToQuery.get(i);\n-//                final List<VariantContext> features = dbSnpDataSource.queryAndPrefetch(interval);\n-//\n-//                Assert.assertEquals(features.size(), 1);\n-//            }\n-//        }\n-//        catch (final IOException ex) {\n-//            throw new UserException(\"Unable to open data sources from gcloud!\", ex);\n-//        }\n-//    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNzM4Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485827386", "bodyText": "New test looks good otherwise \ud83d\udc4d", "author": "droazen", "createdAt": "2020-09-09T18:27:56Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.broadinstitute.hellbender.tools.funcotator.dataSources;\n+\n+import htsjdk.samtools.util.Locatable;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.engine.FeatureDataSource;\n+import org.broadinstitute.hellbender.tools.funcotator.BaseFuncotatorArgumentCollection;\n+import org.broadinstitute.hellbender.tools.funcotator.FuncotatorDataSourceDownloader;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+/**\n+ * Class to hold integration tests for the dbSNP data source.\n+ */\n+public class DbSnpIntegrationTest extends CommandLineProgramTest {\n+\n+    private final Path DB_SNP_HG19_FILE_PATH       = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz\"\n+    );\n+    private final Path DB_SNP_HG19_INDEX_FILE_PATH = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz.tbi\"\n+    );\n+\n+    private final Path DB_SNP_HG38_FILE_PATH       = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz\"\n+    );\n+    private final Path DB_SNP_HG38_INDEX_FILE_PATH = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz.tbi\"\n+    );\n+\n+    @DataProvider\n+    private Object[][] provideFortestDbSnpDataSourceParsing() {\n+        return new Object[][] {\n+                // HG19 tests:\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chr1\", 10318704, 10318704),\n+                    \"rs746945770\",\n+                    Allele.create(\"G\", true),\n+                    Allele.create(\"A\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chrX\", 31213723, 31213723),\n+                    \"rs5972332\",\n+                    Allele.create(\"C\", true),\n+                    Allele.create(\"T\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chrY\", 8551842, 8551842),\n+                    \"rs562075277\",\n+                    Allele.create(\"G\", true),\n+                    Allele.create(\"A\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chrM\", 5005, 5005),\n+                    \"rs879008075\",\n+                    Allele.create(\"T\", true),\n+                    Allele.create(\"C\")\n+                },\n+                // HG38 tests:\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chr1\", 84349785, 84349785),\n+                    \"rs17131617\",\n+                    Allele.create(\"T\", true),\n+                    Allele.create(\"C\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chrX\", 80688070, 80688070),\n+                    \"rs3122407\",\n+                    Allele.create(\"T\", true),\n+                    Allele.create(\"C\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chrY\", 13355944, 13355944),\n+                    \"rs2032654\",\n+                    Allele.create(\"A\", true),\n+                    Allele.create(\"G\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chrM\", 5131, 5133),\n+                    \"rs199476116\",\n+                    Allele.create(\"TAA\", true),\n+                    Allele.create(\"T\")\n+                }\n+        };\n+    }\n+\n+    @Test(groups={\"cloud\"}, dataProvider = \"provideFortestDbSnpDataSourceParsing\")\n+    public void testDbSnpDataSourceParsing( final String refVersion,\n+                                            final Locatable interval,\n+                                            final String expectedID,\n+                                            final Allele expectedRefAllele,\n+                                            final Allele expectedAltAllele) {\n+        // 1 - Get the correct version of dbSNP from the funcotator data sources bucket:\n+        final Path dbSnpFile = (refVersion.equals(BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38))\n+                ? DB_SNP_HG38_FILE_PATH\n+                : DB_SNP_HG19_FILE_PATH;\n+\n+        // 2 - Create a FeatureDataSource from the dbSNP VCF:\n+        final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpFile.toUri().toString());\n+\n+        // Do a dummy check here:\n+        Assert.assertNotNull(dbSnpDataSource);\n+\n+        // 3 - Attempt to read sites and features from the FeatureDataSource:\n+        final List<VariantContext> features = dbSnpDataSource.queryAndPrefetch(interval);\n+        Assert.assertEquals(features.size(), 1);\n+\n+        final VariantContext dbSnpVariant = features.get(0);\n+        Assert.assertEquals(dbSnpVariant.getContig(), interval.getContig());\n+        Assert.assertEquals(dbSnpVariant.getStart(), interval.getStart());\n+        Assert.assertEquals(dbSnpVariant.getEnd(), interval.getEnd());\n+        Assert.assertEquals(dbSnpVariant.getID(), expectedID);\n+        Assert.assertEquals(dbSnpVariant.getAlleles().size(), 2);\n+        Assert.assertEquals(dbSnpVariant.getAlleles().get(0), expectedRefAllele, \"Variant has incorrect ref allele: \" + dbSnpVariant.getAlleles().get(0)  + \" != \" + expectedRefAllele + \" [\" + interval + \" in \" + dbSnpFile + \"]\");\n+        Assert.assertEquals(dbSnpVariant.getAlleles().get(1), expectedAltAllele);\n+    }", "originalCommit": "b92ecb99e79116699512e3f34daf7585145965dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNDM4Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485834383", "bodyText": "Cool.  Thanks!", "author": "jonn-smith", "createdAt": "2020-09-09T18:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNzM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f910b260717c8b8a1d2da6092bff7e1aede78961", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java\ndeleted file mode 100644\nindex eb75f32d8..000000000\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java\n+++ /dev/null\n\n@@ -1,171 +0,0 @@\n-package org.broadinstitute.hellbender.tools.funcotator.dataSources;\n-\n-import htsjdk.samtools.util.Locatable;\n-import htsjdk.variant.variantcontext.Allele;\n-import htsjdk.variant.variantcontext.VariantContext;\n-import org.broadinstitute.hellbender.CommandLineProgramTest;\n-import org.broadinstitute.hellbender.engine.FeatureDataSource;\n-import org.broadinstitute.hellbender.tools.funcotator.BaseFuncotatorArgumentCollection;\n-import org.broadinstitute.hellbender.tools.funcotator.FuncotatorDataSourceDownloader;\n-import org.broadinstitute.hellbender.utils.SimpleInterval;\n-import org.broadinstitute.hellbender.utils.io.IOUtils;\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.nio.file.Path;\n-import java.util.List;\n-\n-/**\n- * Class to hold integration tests for the dbSNP data source.\n- */\n-public class DbSnpIntegrationTest extends CommandLineProgramTest {\n-\n-    private final Path DB_SNP_HG19_FILE_PATH       = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz\"\n-    );\n-    private final Path DB_SNP_HG19_INDEX_FILE_PATH = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz.tbi\"\n-    );\n-\n-    private final Path DB_SNP_HG38_FILE_PATH       = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz\"\n-    );\n-    private final Path DB_SNP_HG38_INDEX_FILE_PATH = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz.tbi\"\n-    );\n-\n-    @DataProvider\n-    private Object[][] provideFortestDbSnpDataSourceParsing() {\n-        return new Object[][] {\n-                // HG19 tests:\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chr1\", 10318704, 10318704),\n-                    \"rs746945770\",\n-                    Allele.create(\"G\", true),\n-                    Allele.create(\"A\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chrX\", 31213723, 31213723),\n-                    \"rs5972332\",\n-                    Allele.create(\"C\", true),\n-                    Allele.create(\"T\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chrY\", 8551842, 8551842),\n-                    \"rs562075277\",\n-                    Allele.create(\"G\", true),\n-                    Allele.create(\"A\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chrM\", 5005, 5005),\n-                    \"rs879008075\",\n-                    Allele.create(\"T\", true),\n-                    Allele.create(\"C\")\n-                },\n-                // HG38 tests:\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chr1\", 84349785, 84349785),\n-                    \"rs17131617\",\n-                    Allele.create(\"T\", true),\n-                    Allele.create(\"C\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chrX\", 80688070, 80688070),\n-                    \"rs3122407\",\n-                    Allele.create(\"T\", true),\n-                    Allele.create(\"C\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chrY\", 13355944, 13355944),\n-                    \"rs2032654\",\n-                    Allele.create(\"A\", true),\n-                    Allele.create(\"G\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chrM\", 5131, 5133),\n-                    \"rs199476116\",\n-                    Allele.create(\"TAA\", true),\n-                    Allele.create(\"T\")\n-                }\n-        };\n-    }\n-\n-    @Test(groups={\"cloud\"}, dataProvider = \"provideFortestDbSnpDataSourceParsing\")\n-    public void testDbSnpDataSourceParsing( final String refVersion,\n-                                            final Locatable interval,\n-                                            final String expectedID,\n-                                            final Allele expectedRefAllele,\n-                                            final Allele expectedAltAllele) {\n-        // 1 - Get the correct version of dbSNP from the funcotator data sources bucket:\n-        final Path dbSnpFile = (refVersion.equals(BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38))\n-                ? DB_SNP_HG38_FILE_PATH\n-                : DB_SNP_HG19_FILE_PATH;\n-\n-        // 2 - Create a FeatureDataSource from the dbSNP VCF:\n-        final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpFile.toUri().toString());\n-\n-        // Do a dummy check here:\n-        Assert.assertNotNull(dbSnpDataSource);\n-\n-        // 3 - Attempt to read sites and features from the FeatureDataSource:\n-        final List<VariantContext> features = dbSnpDataSource.queryAndPrefetch(interval);\n-        Assert.assertEquals(features.size(), 1);\n-\n-        final VariantContext dbSnpVariant = features.get(0);\n-        Assert.assertEquals(dbSnpVariant.getContig(), interval.getContig());\n-        Assert.assertEquals(dbSnpVariant.getStart(), interval.getStart());\n-        Assert.assertEquals(dbSnpVariant.getEnd(), interval.getEnd());\n-        Assert.assertEquals(dbSnpVariant.getID(), expectedID);\n-        Assert.assertEquals(dbSnpVariant.getAlleles().size(), 2);\n-        Assert.assertEquals(dbSnpVariant.getAlleles().get(0), expectedRefAllele, \"Variant has incorrect ref allele: \" + dbSnpVariant.getAlleles().get(0)  + \" != \" + expectedRefAllele + \" [\" + interval + \" in \" + dbSnpFile + \"]\");\n-        Assert.assertEquals(dbSnpVariant.getAlleles().get(1), expectedAltAllele);\n-    }\n-\n-\n-////    @Test(groups={\"cloud\"})\n-//    @Test\n-//    public void testDbSnpDataSourceParsing() {\n-//        // 1 - Extract the dbSNP file from the current datasources for Funcotator:\n-//        logger.info(\"Creating input stream from gcloud file:\");\n-//        try (final InputStream dataSourcesInputStream = new BufferedInputStream(Files.newInputStream(DB_SNP_FILE_NAME))) {\n-//            final Path dbSnpPath = extractAndReturnDbSnpPath(dataSourcesInputStream);\n-//\n-//            // 2 - Create a FeatureDataSource from the dbSNP VCF:\n-//            final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpPath.toUri().toString());\n-//\n-//            // Do a dummy check here:\n-//            Assert.assertNotNull(dbSnpDataSource);\n-//\n-//            // 3 - Attempt to read sites and features from the FeatureDataSource that would fail with the old code:\n-//            final List<Locatable> intervalsToQuery = Arrays.asList(\n-//                    new SimpleInterval(\"chr1\", 84349784, 84349786), // rs17131617 T/C\n-//                    new SimpleInterval(\"chrX\", 80688069, 80688071), // rs3122407 T/C\n-//                    new SimpleInterval(\"chrY\", 13355943, 13355945), // rs2032654 A/G\n-//                    new SimpleInterval(\"chrM\", 5131, 5134)    // rs199476116 2-BP DEL, 5132AA\n-//            );\n-//\n-//            for (int i = 0; i < intervalsToQuery.size(); ++i) {\n-//                final Locatable interval = intervalsToQuery.get(i);\n-//                final List<VariantContext> features = dbSnpDataSource.queryAndPrefetch(interval);\n-//\n-//                Assert.assertEquals(features.size(), 1);\n-//            }\n-//        }\n-//        catch (final IOException ex) {\n-//            throw new UserException(\"Unable to open data sources from gcloud!\", ex);\n-//        }\n-//    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNzcyMw==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485827723", "bodyText": "Remove commented-out code", "author": "droazen", "createdAt": "2020-09-09T18:28:33Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.broadinstitute.hellbender.tools.funcotator.dataSources;\n+\n+import htsjdk.samtools.util.Locatable;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.engine.FeatureDataSource;\n+import org.broadinstitute.hellbender.tools.funcotator.BaseFuncotatorArgumentCollection;\n+import org.broadinstitute.hellbender.tools.funcotator.FuncotatorDataSourceDownloader;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+/**\n+ * Class to hold integration tests for the dbSNP data source.\n+ */\n+public class DbSnpIntegrationTest extends CommandLineProgramTest {\n+\n+    private final Path DB_SNP_HG19_FILE_PATH       = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz\"\n+    );\n+    private final Path DB_SNP_HG19_INDEX_FILE_PATH = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz.tbi\"\n+    );\n+\n+    private final Path DB_SNP_HG38_FILE_PATH       = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz\"\n+    );\n+    private final Path DB_SNP_HG38_INDEX_FILE_PATH = IOUtils.getPath(\n+            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n+                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz.tbi\"\n+    );\n+\n+    @DataProvider\n+    private Object[][] provideFortestDbSnpDataSourceParsing() {\n+        return new Object[][] {\n+                // HG19 tests:\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chr1\", 10318704, 10318704),\n+                    \"rs746945770\",\n+                    Allele.create(\"G\", true),\n+                    Allele.create(\"A\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chrX\", 31213723, 31213723),\n+                    \"rs5972332\",\n+                    Allele.create(\"C\", true),\n+                    Allele.create(\"T\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chrY\", 8551842, 8551842),\n+                    \"rs562075277\",\n+                    Allele.create(\"G\", true),\n+                    Allele.create(\"A\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n+                    new SimpleInterval(\"chrM\", 5005, 5005),\n+                    \"rs879008075\",\n+                    Allele.create(\"T\", true),\n+                    Allele.create(\"C\")\n+                },\n+                // HG38 tests:\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chr1\", 84349785, 84349785),\n+                    \"rs17131617\",\n+                    Allele.create(\"T\", true),\n+                    Allele.create(\"C\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chrX\", 80688070, 80688070),\n+                    \"rs3122407\",\n+                    Allele.create(\"T\", true),\n+                    Allele.create(\"C\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chrY\", 13355944, 13355944),\n+                    \"rs2032654\",\n+                    Allele.create(\"A\", true),\n+                    Allele.create(\"G\")\n+                },\n+                {\n+                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n+                    new SimpleInterval(\"chrM\", 5131, 5133),\n+                    \"rs199476116\",\n+                    Allele.create(\"TAA\", true),\n+                    Allele.create(\"T\")\n+                }\n+        };\n+    }\n+\n+    @Test(groups={\"cloud\"}, dataProvider = \"provideFortestDbSnpDataSourceParsing\")\n+    public void testDbSnpDataSourceParsing( final String refVersion,\n+                                            final Locatable interval,\n+                                            final String expectedID,\n+                                            final Allele expectedRefAllele,\n+                                            final Allele expectedAltAllele) {\n+        // 1 - Get the correct version of dbSNP from the funcotator data sources bucket:\n+        final Path dbSnpFile = (refVersion.equals(BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38))\n+                ? DB_SNP_HG38_FILE_PATH\n+                : DB_SNP_HG19_FILE_PATH;\n+\n+        // 2 - Create a FeatureDataSource from the dbSNP VCF:\n+        final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpFile.toUri().toString());\n+\n+        // Do a dummy check here:\n+        Assert.assertNotNull(dbSnpDataSource);\n+\n+        // 3 - Attempt to read sites and features from the FeatureDataSource:\n+        final List<VariantContext> features = dbSnpDataSource.queryAndPrefetch(interval);\n+        Assert.assertEquals(features.size(), 1);\n+\n+        final VariantContext dbSnpVariant = features.get(0);\n+        Assert.assertEquals(dbSnpVariant.getContig(), interval.getContig());\n+        Assert.assertEquals(dbSnpVariant.getStart(), interval.getStart());\n+        Assert.assertEquals(dbSnpVariant.getEnd(), interval.getEnd());\n+        Assert.assertEquals(dbSnpVariant.getID(), expectedID);\n+        Assert.assertEquals(dbSnpVariant.getAlleles().size(), 2);\n+        Assert.assertEquals(dbSnpVariant.getAlleles().get(0), expectedRefAllele, \"Variant has incorrect ref allele: \" + dbSnpVariant.getAlleles().get(0)  + \" != \" + expectedRefAllele + \" [\" + interval + \" in \" + dbSnpFile + \"]\");\n+        Assert.assertEquals(dbSnpVariant.getAlleles().get(1), expectedAltAllele);\n+    }\n+\n+\n+////    @Test(groups={\"cloud\"})\n+//    @Test\n+//    public void testDbSnpDataSourceParsing() {\n+//        // 1 - Extract the dbSNP file from the current datasources for Funcotator:\n+//        logger.info(\"Creating input stream from gcloud file:\");\n+//        try (final InputStream dataSourcesInputStream = new BufferedInputStream(Files.newInputStream(DB_SNP_FILE_NAME))) {\n+//            final Path dbSnpPath = extractAndReturnDbSnpPath(dataSourcesInputStream);\n+//\n+//            // 2 - Create a FeatureDataSource from the dbSNP VCF:\n+//            final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpPath.toUri().toString());\n+//\n+//            // Do a dummy check here:\n+//            Assert.assertNotNull(dbSnpDataSource);\n+//\n+//            // 3 - Attempt to read sites and features from the FeatureDataSource that would fail with the old code:\n+//            final List<Locatable> intervalsToQuery = Arrays.asList(\n+//                    new SimpleInterval(\"chr1\", 84349784, 84349786), // rs17131617 T/C\n+//                    new SimpleInterval(\"chrX\", 80688069, 80688071), // rs3122407 T/C\n+//                    new SimpleInterval(\"chrY\", 13355943, 13355945), // rs2032654 A/G\n+//                    new SimpleInterval(\"chrM\", 5131, 5134)    // rs199476116 2-BP DEL, 5132AA\n+//            );\n+//\n+//            for (int i = 0; i < intervalsToQuery.size(); ++i) {\n+//                final Locatable interval = intervalsToQuery.get(i);\n+//                final List<VariantContext> features = dbSnpDataSource.queryAndPrefetch(interval);\n+//\n+//                Assert.assertEquals(features.size(), 1);\n+//            }\n+//        }\n+//        catch (final IOException ex) {\n+//            throw new UserException(\"Unable to open data sources from gcloud!\", ex);\n+//        }\n+//    }", "originalCommit": "b92ecb99e79116699512e3f34daf7585145965dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNDY3NA==", "url": "https://github.com/broadinstitute/gatk/pull/6660#discussion_r485834674", "bodyText": "Oops.  Good catch.\nFixed!", "author": "jonn-smith", "createdAt": "2020-09-09T18:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNzcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "f910b260717c8b8a1d2da6092bff7e1aede78961", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java\ndeleted file mode 100644\nindex eb75f32d8..000000000\n--- a/src/test/java/org/broadinstitute/hellbender/tools/funcotator/dataSources/DbSnpIntegrationTest.java\n+++ /dev/null\n\n@@ -1,171 +0,0 @@\n-package org.broadinstitute.hellbender.tools.funcotator.dataSources;\n-\n-import htsjdk.samtools.util.Locatable;\n-import htsjdk.variant.variantcontext.Allele;\n-import htsjdk.variant.variantcontext.VariantContext;\n-import org.broadinstitute.hellbender.CommandLineProgramTest;\n-import org.broadinstitute.hellbender.engine.FeatureDataSource;\n-import org.broadinstitute.hellbender.tools.funcotator.BaseFuncotatorArgumentCollection;\n-import org.broadinstitute.hellbender.tools.funcotator.FuncotatorDataSourceDownloader;\n-import org.broadinstitute.hellbender.utils.SimpleInterval;\n-import org.broadinstitute.hellbender.utils.io.IOUtils;\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.nio.file.Path;\n-import java.util.List;\n-\n-/**\n- * Class to hold integration tests for the dbSNP data source.\n- */\n-public class DbSnpIntegrationTest extends CommandLineProgramTest {\n-\n-    private final Path DB_SNP_HG19_FILE_PATH       = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz\"\n-    );\n-    private final Path DB_SNP_HG19_INDEX_FILE_PATH = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg19/\" + \"hg19_All_20180423.vcf.gz.tbi\"\n-    );\n-\n-    private final Path DB_SNP_HG38_FILE_PATH       = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz\"\n-    );\n-    private final Path DB_SNP_HG38_INDEX_FILE_PATH = IOUtils.getPath(\n-            FuncotatorDataSourceDownloader.SOMATIC_GCLOUD_DATASOURCES_BASEURL + \"/\"\n-                    + \"dbsnp/hg38/\" + \"hg38_All_20180418.vcf.gz.tbi\"\n-    );\n-\n-    @DataProvider\n-    private Object[][] provideFortestDbSnpDataSourceParsing() {\n-        return new Object[][] {\n-                // HG19 tests:\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chr1\", 10318704, 10318704),\n-                    \"rs746945770\",\n-                    Allele.create(\"G\", true),\n-                    Allele.create(\"A\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chrX\", 31213723, 31213723),\n-                    \"rs5972332\",\n-                    Allele.create(\"C\", true),\n-                    Allele.create(\"T\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chrY\", 8551842, 8551842),\n-                    \"rs562075277\",\n-                    Allele.create(\"G\", true),\n-                    Allele.create(\"A\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg19,\n-                    new SimpleInterval(\"chrM\", 5005, 5005),\n-                    \"rs879008075\",\n-                    Allele.create(\"T\", true),\n-                    Allele.create(\"C\")\n-                },\n-                // HG38 tests:\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chr1\", 84349785, 84349785),\n-                    \"rs17131617\",\n-                    Allele.create(\"T\", true),\n-                    Allele.create(\"C\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chrX\", 80688070, 80688070),\n-                    \"rs3122407\",\n-                    Allele.create(\"T\", true),\n-                    Allele.create(\"C\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chrY\", 13355944, 13355944),\n-                    \"rs2032654\",\n-                    Allele.create(\"A\", true),\n-                    Allele.create(\"G\")\n-                },\n-                {\n-                    BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38,\n-                    new SimpleInterval(\"chrM\", 5131, 5133),\n-                    \"rs199476116\",\n-                    Allele.create(\"TAA\", true),\n-                    Allele.create(\"T\")\n-                }\n-        };\n-    }\n-\n-    @Test(groups={\"cloud\"}, dataProvider = \"provideFortestDbSnpDataSourceParsing\")\n-    public void testDbSnpDataSourceParsing( final String refVersion,\n-                                            final Locatable interval,\n-                                            final String expectedID,\n-                                            final Allele expectedRefAllele,\n-                                            final Allele expectedAltAllele) {\n-        // 1 - Get the correct version of dbSNP from the funcotator data sources bucket:\n-        final Path dbSnpFile = (refVersion.equals(BaseFuncotatorArgumentCollection.FuncotatorReferenceVersionHg38))\n-                ? DB_SNP_HG38_FILE_PATH\n-                : DB_SNP_HG19_FILE_PATH;\n-\n-        // 2 - Create a FeatureDataSource from the dbSNP VCF:\n-        final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpFile.toUri().toString());\n-\n-        // Do a dummy check here:\n-        Assert.assertNotNull(dbSnpDataSource);\n-\n-        // 3 - Attempt to read sites and features from the FeatureDataSource:\n-        final List<VariantContext> features = dbSnpDataSource.queryAndPrefetch(interval);\n-        Assert.assertEquals(features.size(), 1);\n-\n-        final VariantContext dbSnpVariant = features.get(0);\n-        Assert.assertEquals(dbSnpVariant.getContig(), interval.getContig());\n-        Assert.assertEquals(dbSnpVariant.getStart(), interval.getStart());\n-        Assert.assertEquals(dbSnpVariant.getEnd(), interval.getEnd());\n-        Assert.assertEquals(dbSnpVariant.getID(), expectedID);\n-        Assert.assertEquals(dbSnpVariant.getAlleles().size(), 2);\n-        Assert.assertEquals(dbSnpVariant.getAlleles().get(0), expectedRefAllele, \"Variant has incorrect ref allele: \" + dbSnpVariant.getAlleles().get(0)  + \" != \" + expectedRefAllele + \" [\" + interval + \" in \" + dbSnpFile + \"]\");\n-        Assert.assertEquals(dbSnpVariant.getAlleles().get(1), expectedAltAllele);\n-    }\n-\n-\n-////    @Test(groups={\"cloud\"})\n-//    @Test\n-//    public void testDbSnpDataSourceParsing() {\n-//        // 1 - Extract the dbSNP file from the current datasources for Funcotator:\n-//        logger.info(\"Creating input stream from gcloud file:\");\n-//        try (final InputStream dataSourcesInputStream = new BufferedInputStream(Files.newInputStream(DB_SNP_FILE_NAME))) {\n-//            final Path dbSnpPath = extractAndReturnDbSnpPath(dataSourcesInputStream);\n-//\n-//            // 2 - Create a FeatureDataSource from the dbSNP VCF:\n-//            final FeatureDataSource<VariantContext> dbSnpDataSource = new FeatureDataSource<>(dbSnpPath.toUri().toString());\n-//\n-//            // Do a dummy check here:\n-//            Assert.assertNotNull(dbSnpDataSource);\n-//\n-//            // 3 - Attempt to read sites and features from the FeatureDataSource that would fail with the old code:\n-//            final List<Locatable> intervalsToQuery = Arrays.asList(\n-//                    new SimpleInterval(\"chr1\", 84349784, 84349786), // rs17131617 T/C\n-//                    new SimpleInterval(\"chrX\", 80688069, 80688071), // rs3122407 T/C\n-//                    new SimpleInterval(\"chrY\", 13355943, 13355945), // rs2032654 A/G\n-//                    new SimpleInterval(\"chrM\", 5131, 5134)    // rs199476116 2-BP DEL, 5132AA\n-//            );\n-//\n-//            for (int i = 0; i < intervalsToQuery.size(); ++i) {\n-//                final Locatable interval = intervalsToQuery.get(i);\n-//                final List<VariantContext> features = dbSnpDataSource.queryAndPrefetch(interval);\n-//\n-//                Assert.assertEquals(features.size(), 1);\n-//            }\n-//        }\n-//        catch (final IOException ex) {\n-//            throw new UserException(\"Unable to open data sources from gcloud!\", ex);\n-//        }\n-//    }\n-}\n"}}, {"oid": "f910b260717c8b8a1d2da6092bff7e1aede78961", "url": "https://github.com/broadinstitute/gatk/commit/f910b260717c8b8a1d2da6092bff7e1aede78961", "message": "Fixed issue with dbSNP source data for hg38.\n\nCode updates:\n- Now both hg19 and hg38 have the contig names translated to `chr__`\n- Added 'lncRNA' to GeneTranscriptType.\n- Added \"TAGENE\" gene tag.\n- Added the MANE_SELECT tag to FeatureTag.\n- Added the STOP_CODON_READTHROUGH tag to FeatureTag.\n- Updated the GTF versions that are parseable.\n- Fixed a parsing error with new versions of gencode and the remap\npositions (for liftover files).\n- Added test for indexing new lifted over gencode GTF.\n- Added Gencode_34 entries to MAF output map.\n- Minor changes to FuncotatorIntegrationTest.java for code syntax.\n- Pointed data source downloader at new data sources URL.\n- Minor updates to workflows to point at new data sources.\n\nScript updates:\n- Updated retrieval scripts for dbSNP and Gencode.\n- Added required field to gencode config file generation.\n- Now gencode retrieval script enforces double hash comments at\ntop of gencode GTF files.\n\nBug Fixes:\nRemoving erroneous trailing tab in MAF file output.\n\n- Fixes #6693", "committedDate": "2020-09-10T14:53:14Z", "type": "commit"}, {"oid": "33b1e51397ab7e4400a2056acda5172bd6965be7", "url": "https://github.com/broadinstitute/gatk/commit/33b1e51397ab7e4400a2056acda5172bd6965be7", "message": "Adding missing resource file.", "committedDate": "2020-09-10T14:53:14Z", "type": "commit"}, {"oid": "de266c79f528014909a296b651913c71489483a8", "url": "https://github.com/broadinstitute/gatk/commit/de266c79f528014909a296b651913c71489483a8", "message": "Addressing code review comments.", "committedDate": "2020-09-10T14:53:15Z", "type": "commit"}, {"oid": "087c6c8e35fad15a6c8f7e62047b1ef321b4628b", "url": "https://github.com/broadinstitute/gatk/commit/087c6c8e35fad15a6c8f7e62047b1ef321b4628b", "message": "Addressing code review comments.  Need to fix test.", "committedDate": "2020-09-10T14:53:15Z", "type": "commit"}, {"oid": "6b0b144c9badf44389a0521a878b753fb9ea5d01", "url": "https://github.com/broadinstitute/gatk/commit/6b0b144c9badf44389a0521a878b753fb9ea5d01", "message": "Added tests for accessing / reading from hg38 dbSNP.", "committedDate": "2020-09-10T14:53:16Z", "type": "commit"}, {"oid": "1906b06fb57e169a43dbbc18d1248eba0bc18ca5", "url": "https://github.com/broadinstitute/gatk/commit/1906b06fb57e169a43dbbc18d1248eba0bc18ca5", "message": "Adding final tests for dbSNP.", "committedDate": "2020-09-10T14:53:16Z", "type": "commit"}, {"oid": "fe7f0c4470501f8e0437d94ee9669f997ef40e2d", "url": "https://github.com/broadinstitute/gatk/commit/fe7f0c4470501f8e0437d94ee9669f997ef40e2d", "message": "Minor test fixes.", "committedDate": "2020-09-10T14:53:17Z", "type": "commit"}, {"oid": "99711688bb1a6c7e7bfbac7a4fa3ccd1fb904386", "url": "https://github.com/broadinstitute/gatk/commit/99711688bb1a6c7e7bfbac7a4fa3ccd1fb904386", "message": "Finishing the last round of comment responses.", "committedDate": "2020-09-10T14:53:17Z", "type": "commit"}, {"oid": "be7daea9872500bec7decd7abb14abfc850a8425", "url": "https://github.com/broadinstitute/gatk/commit/be7daea9872500bec7decd7abb14abfc850a8425", "message": "Missed a comment.  Actually last commit.", "committedDate": "2020-09-10T14:53:17Z", "type": "commit"}, {"oid": "be7daea9872500bec7decd7abb14abfc850a8425", "url": "https://github.com/broadinstitute/gatk/commit/be7daea9872500bec7decd7abb14abfc850a8425", "message": "Missed a comment.  Actually last commit.", "committedDate": "2020-09-10T14:53:17Z", "type": "forcePushed"}]}