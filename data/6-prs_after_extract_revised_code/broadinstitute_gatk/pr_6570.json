{"pr_number": 6570, "pr_title": "CNN filtering should run for all-SNP VCF (#6411)", "pr_createdAt": "2020-04-24T15:47:42Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6570", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3MzgyOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6570#discussion_r416673829", "bodyText": "We often just use a set final Set uniqueAnnotations = new HashSet<>(annotationKeys); to uniquify a list, but this is fine.", "author": "cmnbroad", "createdAt": "2020-04-28T14:46:04Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java", "diffHunk": "@@ -35,7 +36,11 @@\n \n     public VariantDataManager( final List<String> annotationKeys, final VariantRecalibratorArgumentCollection VRAC ) {\n         this.data = Collections.emptyList();\n-        this.annotationKeys = new ArrayList<>( annotationKeys );\n+        final List<String> uniqueAnnotations = annotationKeys.stream().distinct().collect(Collectors.toList());", "originalCommit": "3a13ac99b278d656ba0b3a8abcd244f126571517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17e5a70699ee3fc1dac7853fcaf23614986e2e4a", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java\nindex 4e0ec9e75..c6d73b09d 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java\n\n@@ -38,7 +38,7 @@ public class VariantDataManager {\n         this.data = Collections.emptyList();\n         final List<String> uniqueAnnotations = annotationKeys.stream().distinct().collect(Collectors.toList());\n         if (annotationKeys.size() != uniqueAnnotations.size()) {\n-            logger.warn(\"Specified annotations for recalibration contain duplicates.\");\n+            logger.warn(\"Ignoring duplicate annotations for recalibration %s.\", Utils.getDuplicatedItems(annotationKeys));\n         }\n         this.annotationKeys = new ArrayList<>( uniqueAnnotations );\n         this.VRAC = VRAC;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY4MzM2Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6570#discussion_r416683363", "bodyText": "Not sure if the emptiness is deliberate, but I'm pretty certain any test that uses this data provider will not be run at all.", "author": "cmnbroad", "createdAt": "2020-04-28T14:57:43Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java", "diffHunk": "@@ -122,11 +185,18 @@ public void initializeVariantRecalTests() {\n         };\n     }\n \n+    @DataProvider(name=\"BadVarRecal\")\n+    public Object[][] BadVarRecal() {\n+        return new Object[][] {\n+\n+        };\n+    }\n+", "originalCommit": "3a13ac99b278d656ba0b3a8abcd244f126571517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17e5a70699ee3fc1dac7853fcaf23614986e2e4a", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java\nindex a8349ef15..a2dd247b8 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java\n\n@@ -185,13 +185,6 @@ public class VariantRecalibratorIntegrationTest extends CommandLineProgramTest {\n         };\n     }\n \n-    @DataProvider(name=\"BadVarRecal\")\n-    public Object[][] BadVarRecal() {\n-        return new Object[][] {\n-\n-        };\n-    }\n-\n     @DataProvider(name=\"VarRecalSNPAlternateTranches\")\n     public Object[][] getVarRecalSNPAlternateTranchesData() {\n         return new Object[][] {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY4NzAyNw==", "url": "https://github.com/broadinstitute/gatk/pull/6570#discussion_r416687027", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.warn(\"Specified annotations for recalibration contain duplicates.\");\n          \n          \n            \n                        logger.warn(\"Ignoring duplicate annotations for recalibration %s.\", Utils.getDuplicatedItems(annotationKeys));", "author": "cmnbroad", "createdAt": "2020-04-28T15:02:20Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java", "diffHunk": "@@ -35,7 +36,11 @@\n \n     public VariantDataManager( final List<String> annotationKeys, final VariantRecalibratorArgumentCollection VRAC ) {\n         this.data = Collections.emptyList();\n-        this.annotationKeys = new ArrayList<>( annotationKeys );\n+        final List<String> uniqueAnnotations = annotationKeys.stream().distinct().collect(Collectors.toList());\n+        if (annotationKeys.size() != uniqueAnnotations.size()) {\n+            logger.warn(\"Specified annotations for recalibration contain duplicates.\");", "originalCommit": "3a13ac99b278d656ba0b3a8abcd244f126571517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17e5a70699ee3fc1dac7853fcaf23614986e2e4a", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java\nindex 4e0ec9e75..c6d73b09d 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantDataManager.java\n\n@@ -38,7 +38,7 @@ public class VariantDataManager {\n         this.data = Collections.emptyList();\n         final List<String> uniqueAnnotations = annotationKeys.stream().distinct().collect(Collectors.toList());\n         if (annotationKeys.size() != uniqueAnnotations.size()) {\n-            logger.warn(\"Specified annotations for recalibration contain duplicates.\");\n+            logger.warn(\"Ignoring duplicate annotations for recalibration %s.\", Utils.getDuplicatedItems(annotationKeys));\n         }\n         this.annotationKeys = new ArrayList<>( uniqueAnnotations );\n         this.VRAC = VRAC;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY4OTM1MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6570#discussion_r416689351", "bodyText": "See comment above.", "author": "cmnbroad", "createdAt": "2020-04-28T15:05:27Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java", "diffHunk": "@@ -187,6 +257,11 @@ public void testVariantRecalibratorSNP(final String[] params, final String tranc\n         doSNPTest(params, tranchesPath, recalPath);\n     }\n \n+    @Test(dataProvider = \"BadVarRecal\", expectedExceptions = {UserException.BadInput.class})", "originalCommit": "3a13ac99b278d656ba0b3a8abcd244f126571517", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNjAyNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6570#discussion_r426826025", "bodyText": "The \"bad\" cases are covered in other more specific tests.  I'll take it out.", "author": "ldgauthier", "createdAt": "2020-05-18T18:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY4OTM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "17e5a70699ee3fc1dac7853fcaf23614986e2e4a", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java\nindex a8349ef15..a2dd247b8 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java\n\n@@ -257,11 +250,6 @@ public class VariantRecalibratorIntegrationTest extends CommandLineProgramTest {\n         doSNPTest(params, tranchesPath, recalPath);\n     }\n \n-    @Test(dataProvider = \"BadVarRecal\", expectedExceptions = {UserException.BadInput.class})\n-    public void testBadVarRecalCommand(final String[] params, final String tranchesPath, final String recalPath) throws IOException {\n-        doSNPTest(params, tranchesPath, recalPath);\n-    }\n-\n     @Test(dataProvider = \"VarRecalSNPAlternateTranches\")\n     public void testVariantRecalibratorSNPAlternateTranches(final String[] params, final String tranchesPath, final String recalPath) throws IOException {\n         // same as testVariantRecalibratorSNP but with specific tranches\n"}}, {"oid": "17e5a70699ee3fc1dac7853fcaf23614986e2e4a", "url": "https://github.com/broadinstitute/gatk/commit/17e5a70699ee3fc1dac7853fcaf23614986e2e4a", "message": "CNN filtering should run for all-SNP VCF (#6411)\nNew test for multi-input BOTH mode\nUniquify annotations as for #2221", "committedDate": "2020-05-18T18:46:35Z", "type": "commit"}, {"oid": "17e5a70699ee3fc1dac7853fcaf23614986e2e4a", "url": "https://github.com/broadinstitute/gatk/commit/17e5a70699ee3fc1dac7853fcaf23614986e2e4a", "message": "CNN filtering should run for all-SNP VCF (#6411)\nNew test for multi-input BOTH mode\nUniquify annotations as for #2221", "committedDate": "2020-05-18T18:46:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1MzE3Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6570#discussion_r451553177", "bodyText": "Minor nit - it would be nice if the common part of the command line string was factored out of these, since it takes some staring to spot the subtle differences (ie, the duplicate annotation). Up to you. No good deed goes unpunished...", "author": "cmnbroad", "createdAt": "2020-07-08T13:41:54Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibratorIntegrationTest.java", "diffHunk": "@@ -44,6 +45,64 @@\n             \"--\" + StandardArgumentDefinitions.ADD_OUTPUT_VCF_COMMANDLINE, \"false\"\n         };\n \n+    private final String[] VQSRSNPsWithAnnotationDupe =\n+            new String[] {\n+                    \"--variant\",\n+                    getLargeVQSRTestDataDir() + \"phase1.projectConsensus.chr20.1M-10M.raw.snps.vcf\",\n+                    \"-L\",\"20:1,000,000-10,000,000\",\n+                    \"--resource:known,known=true,prior=10.0\",\n+                    getLargeVQSRTestDataDir() + \"dbsnp_132_b37.leftAligned.20.1M-10M.vcf\",\n+                    \"--resource:truth_training1,truth=true,training=true,prior=15.0\",\n+                    getLargeVQSRTestDataDir() + \"sites_r27_nr.b37_fwd.20.1M-10M.vcf\",\n+                    \"--resource:truth_training2,training=true,truth=true,prior=12.0\",\n+                    getLargeVQSRTestDataDir() + \"Omni25_sites_1525_samples.b37.20.1M-10M.vcf\",\n+                    \"-an\", \"QD\", \"-an\", \"HaplotypeScore\", \"-an\", \"HRun\", \"-an\", \"HRun\",\n+                    \"--trust-all-polymorphic\", // for speed\n+                    \"-mode\", \"SNP\",\n+                    \"--\" + StandardArgumentDefinitions.ADD_OUTPUT_VCF_COMMANDLINE, \"false\"\n+            };\n+\n+    private final String[] VQSRBothParamsWithResources =\n+            new String[] {\n+                    \"--variant\",\n+                    getLargeVQSRTestDataDir() + \"phase1.projectConsensus.chr20.1M-10M.raw.snps.vcf\",\n+                    \"--variant\",\n+                    getLargeVQSRTestDataDir() + \"g94982_20_1m_10m_python_2dcnn.indels.vcf.gz\",\n+                    \"-L\",\"20:1,000,000-10,000,000\",\n+                    \"--resource:known,known=true,prior=10.0\",\n+                    getLargeVQSRTestDataDir() + \"dbsnp_132_b37.leftAligned.20.1M-10M.vcf\",\n+                    \"--resource:truth_training1,truth=true,training=true,prior=15.0\",\n+                    getLargeVQSRTestDataDir() + \"sites_r27_nr.b37_fwd.20.1M-10M.vcf\",\n+                    \"--resource:truth_training2,training=true,truth=true,prior=12.0\",\n+                    getLargeVQSRTestDataDir() + \"Omni25_sites_1525_samples.b37.20.1M-10M.vcf\",\n+                    \"-an\", \"QD\", \"-an\", \"HaplotypeScore\", \"-an\", \"HRun\",\n+                    \"--trust-all-polymorphic\", // for speed\n+                    \"-mode\", \"BOTH\",\n+                    \"--\" + StandardArgumentDefinitions.ADD_OUTPUT_VCF_COMMANDLINE, \"false\",\n+                    \"--max-gaussians\", \"6\"\n+            };\n+\n+    private final String[] VQSRBothAggregateParamsWithResources =\n+            new String[] {\n+                    \"--variant\",\n+                    getLargeVQSRTestDataDir() + \"phase1.projectConsensus.chr20.1M-10M.raw.snps.vcf\",\n+                    \"--aggregate\",\n+                    getLargeVQSRTestDataDir() + \"g94982_20_1m_10m_python_2dcnn.indels.vcf.gz\",\n+                    \"-L\",\"20:1,000,000-10,000,000\",\n+                    \"--resource:known,known=true,prior=10.0\",\n+                    getLargeVQSRTestDataDir() + \"dbsnp_132_b37.leftAligned.20.1M-10M.vcf\",\n+                    \"--resource:truth_training1,truth=true,training=true,prior=15.0\",\n+                    getLargeVQSRTestDataDir() + \"sites_r27_nr.b37_fwd.20.1M-10M.vcf\",\n+                    \"--resource:truth_training2,training=true,truth=true,prior=12.0\",\n+                    getLargeVQSRTestDataDir() + \"Omni25_sites_1525_samples.b37.20.1M-10M.vcf\",\n+                    \"-an\", \"QD\", \"-an\", \"HaplotypeScore\", \"-an\", \"HRun\",\n+                    \"--trust-all-polymorphic\", // for speed\n+                    \"-mode\", \"BOTH\",\n+                    \"--\" + StandardArgumentDefinitions.ADD_OUTPUT_VCF_COMMANDLINE, \"false\",\n+                    \" --output %s\" + \" -tranches-file %s\",\n+                    \"--max-gaussians\", \"6\"\n+            };\n+", "originalCommit": "17e5a70699ee3fc1dac7853fcaf23614986e2e4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}