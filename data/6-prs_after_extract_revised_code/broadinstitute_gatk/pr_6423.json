{"pr_number": 6423, "pr_title": "SplitIntervals has non-intuitive behavior for lists of adjacent intervals", "pr_createdAt": "2020-01-28T19:39:23Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6423", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNzEwMg==", "url": "https://github.com/broadinstitute/gatk/pull/6423#discussion_r372017102", "bodyText": "Wow, that's a dumb one on my part.", "author": "lbergelson", "createdAt": "2020-01-28T19:43:16Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java", "diffHunk": "@@ -108,13 +111,43 @@ public void testNoIntervals() {\n \n     }\n \n-    private static Stream<File> getScatteredFiles(final int scatterCount, final File outputDir, String extension) {\n-        return IntStream.range(0, scatterCount).mapToObj(n -> new File(outputDir, \"000\" + n + extension));\n+    @Test\n+    public void testAsInWGSJointCalling() {\n+        //these intervals are small and adjacent -- we want to distribute them among multiple interval lists, but the default behavior is to merge\n+        final File wgsCallingIntervals = new File(\"src/test/resources/hg38.handcurated.noCentromeres.noTelomeres.interval_list\");\n+        final int scatterCount = 100;\n+        final File outputDir = createTempDir(\"output\");\n+        final String[] args = {\n+                \"-R\", hg38Reference,\n+                \"-L\", wgsCallingIntervals.getAbsolutePath(),\n+                \"-\" + SplitIntervals.SCATTER_COUNT_SHORT_NAME, Integer.toString(scatterCount),\n+                \"--\" + SplitIntervals.SUBDIVISION_MODE_lONG_NAME, IntervalListScatterMode.BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW.toString(),\n+                \"-imr\", IntervalMergingRule.OVERLAPPING_ONLY.toString(),\n+                \"-O\", outputDir.getAbsolutePath()\n+        };\n+        runCommandLine(args);\n+        verifyScatteredFilesExist(scatterCount, outputDir, SplitIntervals.DEFAULT_EXTENSION);\n+\n+        final File outputDir2 = createTempDir(\"output2\");\n+        final String[] args2 = {\n+                \"-R\", hg38Reference,\n+                \"-L\", wgsCallingIntervals.getAbsolutePath(),\n+                \"-\" + SplitIntervals.SCATTER_COUNT_SHORT_NAME, Integer.toString(scatterCount),\n+                \"--\" + SplitIntervals.SUBDIVISION_MODE_lONG_NAME, IntervalListScatterMode.BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW.toString(),\n+                \"-O\", outputDir2.getAbsolutePath()\n+        };\n+        runCommandLine(args2);\n+        Assert.assertTrue(outputDir2.listFiles().length < scatterCount);\n+    }\n+\n+    //generates the files to look for given a scatter count, directory and extension\n+    private static Stream<File> getExpectedScatteredFiles(final int scatterCount, final File outputDir, String extension) {\n+        return IntStream.range(0, scatterCount).mapToObj(n -> new File(outputDir, formatter.format(n) + extension));\n     }\n \n     private static void verifyScatteredFilesExist(final int scatterCount, final File outputDir, String extension) {\n-        getScatteredFiles(scatterCount, outputDir, extension).forEach(f -> Assert.assertTrue(f.exists()));\n-        Assert.assertFalse(new File(outputDir, \"000\" + scatterCount + extension).exists());\n+        getExpectedScatteredFiles(scatterCount, outputDir, extension).forEach(f -> Assert.assertTrue(f.exists()));\n+        Assert.assertFalse(new File(outputDir, formatter.format(scatterCount) + extension).exists());", "originalCommit": "24104fbf126e33cbcc13d21789fe4b6c94d64ed7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27c33a3fe112310a9f3ed4e41673d8bd97ef4aae", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java\nindex 4952869f8..a279f4f22 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java\n\n@@ -114,7 +114,7 @@ public class SplitIntervalsIntegrationTest extends CommandLineProgramTest {\n     @Test\n     public void testAsInWGSJointCalling() {\n         //these intervals are small and adjacent -- we want to distribute them among multiple interval lists, but the default behavior is to merge\n-        final File wgsCallingIntervals = new File(\"src/test/resources/hg38.handcurated.noCentromeres.noTelomeres.interval_list\");\n+        final File wgsCallingIntervals = new File(publicTestDir + \"hg38.handcurated.noCentromeres.noTelomeres.interval_list\");\n         final int scatterCount = 100;\n         final File outputDir = createTempDir(\"output\");\n         final String[] args = {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMDUzOA==", "url": "https://github.com/broadinstitute/gatk/pull/6423#discussion_r372020538", "bodyText": "publicTestDir instead of hardcoding the path would be better probably", "author": "lbergelson", "createdAt": "2020-01-28T19:50:07Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java", "diffHunk": "@@ -108,13 +111,43 @@ public void testNoIntervals() {\n \n     }\n \n-    private static Stream<File> getScatteredFiles(final int scatterCount, final File outputDir, String extension) {\n-        return IntStream.range(0, scatterCount).mapToObj(n -> new File(outputDir, \"000\" + n + extension));\n+    @Test\n+    public void testAsInWGSJointCalling() {\n+        //these intervals are small and adjacent -- we want to distribute them among multiple interval lists, but the default behavior is to merge\n+        final File wgsCallingIntervals = new File(\"src/test/resources/hg38.handcurated.noCentromeres.noTelomeres.interval_list\");", "originalCommit": "24104fbf126e33cbcc13d21789fe4b6c94d64ed7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA1NjEyMw==", "url": "https://github.com/broadinstitute/gatk/pull/6423#discussion_r372056123", "bodyText": "Good call. I will do that.", "author": "ldgauthier", "createdAt": "2020-01-28T21:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMDUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "27c33a3fe112310a9f3ed4e41673d8bd97ef4aae", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java\nindex 4952869f8..a279f4f22 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java\n\n@@ -114,7 +114,7 @@ public class SplitIntervalsIntegrationTest extends CommandLineProgramTest {\n     @Test\n     public void testAsInWGSJointCalling() {\n         //these intervals are small and adjacent -- we want to distribute them among multiple interval lists, but the default behavior is to merge\n-        final File wgsCallingIntervals = new File(\"src/test/resources/hg38.handcurated.noCentromeres.noTelomeres.interval_list\");\n+        final File wgsCallingIntervals = new File(publicTestDir + \"hg38.handcurated.noCentromeres.noTelomeres.interval_list\");\n         final int scatterCount = 100;\n         final File outputDir = createTempDir(\"output\");\n         final String[] args = {\n"}}, {"oid": "27c33a3fe112310a9f3ed4e41673d8bd97ef4aae", "url": "https://github.com/broadinstitute/gatk/commit/27c33a3fe112310a9f3ed4e41673d8bd97ef4aae", "message": "SplitIntervals has non-intuitive behavior for lists of adjacent\nintervals -- clarify expected behavior with test (and update WGS joint\ncalling WDL in appropriate repos)", "committedDate": "2020-01-28T21:10:52Z", "type": "commit"}, {"oid": "27c33a3fe112310a9f3ed4e41673d8bd97ef4aae", "url": "https://github.com/broadinstitute/gatk/commit/27c33a3fe112310a9f3ed4e41673d8bd97ef4aae", "message": "SplitIntervals has non-intuitive behavior for lists of adjacent\nintervals -- clarify expected behavior with test (and update WGS joint\ncalling WDL in appropriate repos)", "committedDate": "2020-01-28T21:10:52Z", "type": "forcePushed"}]}