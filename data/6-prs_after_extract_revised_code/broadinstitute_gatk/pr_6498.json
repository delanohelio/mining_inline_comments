{"pr_number": 6498, "pr_title": "Clean leading deletions from reads realigned to best haplotypes", "pr_createdAt": "2020-03-12T05:54:23Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6498", "timeline": [{"oid": "417852849ff99694783ca8f76914a6e467fca869", "url": "https://github.com/broadinstitute/gatk/commit/417852849ff99694783ca8f76914a6e467fca869", "message": "Replaced consolidateCigar with CigarBuilder", "committedDate": "2020-03-11T18:11:32Z", "type": "commit"}, {"oid": "141c41550e6e95946d8094c44cbb6621ad8a12ec", "url": "https://github.com/broadinstitute/gatk/commit/141c41550e6e95946d8094c44cbb6621ad8a12ec", "message": "things", "committedDate": "2020-03-11T18:26:07Z", "type": "commit"}, {"oid": "c117d6383d1850fad9754218c04fa390447e269f", "url": "https://github.com/broadinstitute/gatk/commit/c117d6383d1850fad9754218c04fa390447e269f", "message": "Improved trimCigar", "committedDate": "2020-03-12T02:40:20Z", "type": "commit"}, {"oid": "f89d628d1dadca3c4f8b12652f473c76ab151ed5", "url": "https://github.com/broadinstitute/gatk/commit/f89d628d1dadca3c4f8b12652f473c76ab151ed5", "message": "moving around arg validation", "committedDate": "2020-03-12T02:45:19Z", "type": "commit"}, {"oid": "e007e9c4bd0db2714c1ffe1b98f829d94f43f728", "url": "https://github.com/broadinstitute/gatk/commit/e007e9c4bd0db2714c1ffe1b98f829d94f43f728", "message": "delete two unused methods", "committedDate": "2020-03-12T02:49:27Z", "type": "commit"}, {"oid": "1f1bdc4ae2d0c7e8ce31868cd5b91219fabb0012", "url": "https://github.com/broadinstitute/gatk/commit/1f1bdc4ae2d0c7e8ce31868cd5b91219fabb0012", "message": "got rid of cleanUpCigar which was made obsolete by CigarBuilder", "committedDate": "2020-03-12T02:52:35Z", "type": "commit"}, {"oid": "18051c7abf3caaf85d25ba503a809619758ad9c7", "url": "https://github.com/broadinstitute/gatk/commit/18051c7abf3caaf85d25ba503a809619758ad9c7", "message": "refactored logic for completely trimmed cigars", "committedDate": "2020-03-12T03:29:54Z", "type": "commit"}, {"oid": "1fb926ebcf4aa75ec3331e6ef1da95c821ec2805", "url": "https://github.com/broadinstitute/gatk/commit/1fb926ebcf4aa75ec3331e6ef1da95c821ec2805", "message": "leading insertions edge case", "committedDate": "2020-03-12T03:50:10Z", "type": "commit"}, {"oid": "6835f5cbefef7970ead8e0781ceb620b361f087e", "url": "https://github.com/broadinstitute/gatk/commit/6835f5cbefef7970ead8e0781ceb620b361f087e", "message": "accounting for removing leading deletions causing an alignment start shift", "committedDate": "2020-03-12T05:22:10Z", "type": "commit"}, {"oid": "3ee462e5a8e108b01421c10842c2443a9f7d009f", "url": "https://github.com/broadinstitute/gatk/commit/3ee462e5a8e108b01421c10842c2443a9f7d009f", "message": "fixing test cases", "committedDate": "2020-03-12T05:25:08Z", "type": "commit"}, {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a", "url": "https://github.com/broadinstitute/gatk/commit/c50b5cc0f60e4b23f6801bc932af051a4bda864a", "message": "update test files", "committedDate": "2020-03-12T05:44:41Z", "type": "commit"}, {"oid": "d81b930f28c6349f2e15de42bd77069517ba6d07", "url": "https://github.com/broadinstitute/gatk/commit/d81b930f28c6349f2e15de42bd77069517ba6d07", "message": "fixing last tests", "committedDate": "2020-03-12T14:26:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzODAyMw==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391638023", "bodyText": "What does this method do if pad size is 0? Does that mean it will add an empty cigar element into the cigar?", "author": "jamesemery", "createdAt": "2020-03-12T13:57:34Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/haplotype/Haplotype.java", "diffHunk": "@@ -176,11 +175,7 @@ public Cigar getCigar() {\n      */\n     public Cigar getConsolidatedPaddedCigar(final int padSize) {\n         Utils.validateArg( padSize >= 0, () -> \"padSize must be >= 0 but got \" + padSize);\n-        final Cigar extendedHaplotypeCigar = new Cigar(getCigar().getCigarElements());\n-        if ( padSize > 0 ) {\n-            extendedHaplotypeCigar.add(new CigarElement(padSize, CigarOperator.M));\n-        }\n-        return AlignmentUtils.consolidateCigar(extendedHaplotypeCigar);\n+        return new CigarBuilder().addAll(getCigar()).add(new CigarElement(padSize, CigarOperator.M)).make();", "originalCommit": "c50b5cc0f60e4b23f6801bc932af051a4bda864a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNzA5Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391817096", "bodyText": "The builder removes zero-length elements.", "author": "davidbenjamin", "createdAt": "2020-03-12T18:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzODAyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0MjY3Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391642677", "bodyText": "I'm not sure there is cause to eliminate this method. This is a reasonably useful utility method with associated tests that someone might want to use in the future.", "author": "jamesemery", "createdAt": "2020-03-12T14:04:15Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java", "diffHunk": "@@ -31,23 +31,6 @@\n     // cannot be instantiated\n     private AlignmentUtils() { }\n \n-    /**\n-     * Does cigar start or end with a deletion operation?\n-     *\n-     * @param cigar a non-null cigar to test\n-     * @return true if the first or last operator of cigar is a D\n-     */\n-    public static boolean startsOrEndsWithInsertionOrDeletion(final Cigar cigar) {", "originalCommit": "c50b5cc0f60e4b23f6801bc932af051a4bda864a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1OTk5Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391859992", "bodyText": "restored it", "author": "davidbenjamin", "createdAt": "2020-03-12T20:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0MjY3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2MDU1OA==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391660558", "bodyText": "Add a sentence explaining this method, particularly that it is also responsible for tabulating deletions  interspersed with matches. it might be worth making a unit test  for this.", "author": "jamesemery", "createdAt": "2020-03-12T14:30:12Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -232,12 +232,33 @@ public static Cigar calculateCigar(final byte[] refSeq, final byte[] altSeq, fin\n         final int baseEnd = paddedPath.length() - SW_PAD.length() - 1; // -1 because it's inclusive\n         nonStandard = AlignmentUtils.trimCigarByBases(alignment.getCigar(), baseStart, baseEnd);\n \n-        if ( nonStandard.getReferenceLength() != refSeq.length ) {\n-            nonStandard.add(new CigarElement(refSeq.length - nonStandard.getReferenceLength(), CigarOperator.D));\n+        // was there a deletion element in the SW alignment between the padding and the start?\n+        // if so, it was removed by cigar trimming and we must account for the shift in alignment start\n+        // otherwise, left-alignment will be wrong\n+        final int leadingDeletionsInAlignment = deletionsBeforeStart(alignment.getCigar(), baseStart);\n+\n+        if ( nonStandard.getReferenceLength() + leadingDeletionsInAlignment < refSeq.length ) {\n+            nonStandard.add(new CigarElement(refSeq.length - nonStandard.getReferenceLength() - leadingDeletionsInAlignment, CigarOperator.D));\n         }\n \n-        // finally, return the cigar with all indels left aligned\n-        return AlignmentUtils.leftAlignIndels(nonStandard, refSeq, altSeq, 0);\n+        return AlignmentUtils.leftAlignIndels(nonStandard, refSeq, altSeq, leadingDeletionsInAlignment);\n+    }\n+\n+    private static int deletionsBeforeStart(final Cigar cigar, final int start) {", "originalCommit": "c50b5cc0f60e4b23f6801bc932af051a4bda864a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzOTI2Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391839267", "bodyText": "it's gone now.", "author": "davidbenjamin", "createdAt": "2020-03-12T19:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2MDU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java b/src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java\nindex 256a3fe68..d367dfcce 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java\n\n@@ -230,35 +231,21 @@ public final class CigarUtils {\n         // cut off the padding bases\n         final int baseStart = SW_PAD.length();\n         final int baseEnd = paddedPath.length() - SW_PAD.length() - 1; // -1 because it's inclusive\n-        nonStandard = AlignmentUtils.trimCigarByBases(alignment.getCigar(), baseStart, baseEnd);\n+        final Triple<Cigar, Integer, Integer> trimmedCigarAndDeletionsRemoved = AlignmentUtils.trimCigarByBases(alignment.getCigar(), baseStart, baseEnd);\n \n-        // was there a deletion element in the SW alignment between the padding and the start?\n-        // if so, it was removed by cigar trimming and we must account for the shift in alignment start\n-        // otherwise, left-alignment will be wrong\n-        final int leadingDeletionsInAlignment = deletionsBeforeStart(alignment.getCigar(), baseStart);\n+        nonStandard = trimmedCigarAndDeletionsRemoved.getLeft();\n \n-        if ( nonStandard.getReferenceLength() + leadingDeletionsInAlignment < refSeq.length ) {\n-            nonStandard.add(new CigarElement(refSeq.length - nonStandard.getReferenceLength() - leadingDeletionsInAlignment, CigarOperator.D));\n-        }\n+        // leading deletion removed by cigar trimming shift the alignment start to the right\n+        final int trimmedLeadingDeletions = trimmedCigarAndDeletionsRemoved.getMiddle();\n \n-        return AlignmentUtils.leftAlignIndels(nonStandard, refSeq, altSeq, leadingDeletionsInAlignment);\n-    }\n+        // trailing deletions should be kept in order to left-align\n+        final int trimmedTrailingDeletions = trimmedCigarAndDeletionsRemoved.getRight();\n \n-    private static int deletionsBeforeStart(final Cigar cigar, final int start) {\n-        int position = 0;\n-        int result = 0;\n-        for (final CigarElement element : cigar) {\n-            if (element.getOperator() == CigarOperator.DELETION) {\n-                result += element.getLength();\n-            } else {\n-                position += element.getOperator().consumesReadBases() ? element.getLength() : 0;\n-                if (position > start) {\n-                    return result;\n-                }\n-            }\n+        if ( trimmedTrailingDeletions > 0  ) {\n+            nonStandard.add(new CigarElement(trimmedTrailingDeletions, CigarOperator.D));\n         }\n-        Utils.validateArg(position >= start, () -> \"start index \" + start + \" not reached in cigar \" + cigar.toString());\n-        return result;\n+\n+        return AlignmentUtils.leftAlignIndels(nonStandard, refSeq, altSeq, trimmedLeadingDeletions);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2NTE4Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391665182", "bodyText": "So the signal that there was a deletion in the padding gets recorded by returning a trailing deletion in the cigar and left aligning it?", "author": "jamesemery", "createdAt": "2020-03-12T14:36:36Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -232,12 +232,33 @@ public static Cigar calculateCigar(final byte[] refSeq, final byte[] altSeq, fin\n         final int baseEnd = paddedPath.length() - SW_PAD.length() - 1; // -1 because it's inclusive\n         nonStandard = AlignmentUtils.trimCigarByBases(alignment.getCigar(), baseStart, baseEnd);\n \n-        if ( nonStandard.getReferenceLength() != refSeq.length ) {\n-            nonStandard.add(new CigarElement(refSeq.length - nonStandard.getReferenceLength(), CigarOperator.D));\n+        // was there a deletion element in the SW alignment between the padding and the start?\n+        // if so, it was removed by cigar trimming and we must account for the shift in alignment start\n+        // otherwise, left-alignment will be wrong\n+        final int leadingDeletionsInAlignment = deletionsBeforeStart(alignment.getCigar(), baseStart);\n+\n+        if ( nonStandard.getReferenceLength() + leadingDeletionsInAlignment < refSeq.length ) {", "originalCommit": "c50b5cc0f60e4b23f6801bc932af051a4bda864a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzODE4OA==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391838188", "bodyText": "this has been improved as we discussed", "author": "davidbenjamin", "createdAt": "2020-03-12T19:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2NTE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java b/src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java\nindex 256a3fe68..d367dfcce 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java\n\n@@ -230,35 +231,21 @@ public final class CigarUtils {\n         // cut off the padding bases\n         final int baseStart = SW_PAD.length();\n         final int baseEnd = paddedPath.length() - SW_PAD.length() - 1; // -1 because it's inclusive\n-        nonStandard = AlignmentUtils.trimCigarByBases(alignment.getCigar(), baseStart, baseEnd);\n+        final Triple<Cigar, Integer, Integer> trimmedCigarAndDeletionsRemoved = AlignmentUtils.trimCigarByBases(alignment.getCigar(), baseStart, baseEnd);\n \n-        // was there a deletion element in the SW alignment between the padding and the start?\n-        // if so, it was removed by cigar trimming and we must account for the shift in alignment start\n-        // otherwise, left-alignment will be wrong\n-        final int leadingDeletionsInAlignment = deletionsBeforeStart(alignment.getCigar(), baseStart);\n+        nonStandard = trimmedCigarAndDeletionsRemoved.getLeft();\n \n-        if ( nonStandard.getReferenceLength() + leadingDeletionsInAlignment < refSeq.length ) {\n-            nonStandard.add(new CigarElement(refSeq.length - nonStandard.getReferenceLength() - leadingDeletionsInAlignment, CigarOperator.D));\n-        }\n+        // leading deletion removed by cigar trimming shift the alignment start to the right\n+        final int trimmedLeadingDeletions = trimmedCigarAndDeletionsRemoved.getMiddle();\n \n-        return AlignmentUtils.leftAlignIndels(nonStandard, refSeq, altSeq, leadingDeletionsInAlignment);\n-    }\n+        // trailing deletions should be kept in order to left-align\n+        final int trimmedTrailingDeletions = trimmedCigarAndDeletionsRemoved.getRight();\n \n-    private static int deletionsBeforeStart(final Cigar cigar, final int start) {\n-        int position = 0;\n-        int result = 0;\n-        for (final CigarElement element : cigar) {\n-            if (element.getOperator() == CigarOperator.DELETION) {\n-                result += element.getLength();\n-            } else {\n-                position += element.getOperator().consumesReadBases() ? element.getLength() : 0;\n-                if (position > start) {\n-                    return result;\n-                }\n-            }\n+        if ( trimmedTrailingDeletions > 0  ) {\n+            nonStandard.add(new CigarElement(trimmedTrailingDeletions, CigarOperator.D));\n         }\n-        Utils.validateArg(position >= start, () -> \"start index \" + start + \" not reached in cigar \" + cigar.toString());\n-        return result;\n+\n+        return AlignmentUtils.leftAlignIndels(nonStandard, refSeq, altSeq, trimmedLeadingDeletions);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3MTQyMw==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391671423", "bodyText": "So this is the big crux of the change? That we are using the cigar builder with its defensive checks for edge deletions etc?", "author": "jamesemery", "createdAt": "2020-03-12T14:45:40Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/recalibration/BaseRecalibrationEngine.java", "diffHunk": "@@ -290,7 +290,7 @@ private ReadTransformer makeReadTransform() {\n     private static GATKRead consolidateCigar( final GATKRead read ) {\n         // Always consolidate the cigar string into canonical form, collapsing zero-length / repeated cigar elements.\n         // Downstream code cannot necessarily handle non-consolidated cigar strings.\n-        read.setCigar(AlignmentUtils.consolidateCigar(read.getCigar()));\n+        read.setCigar(new CigarBuilder().addAll(read.getCigar()).make());", "originalCommit": "c50b5cc0f60e4b23f6801bc932af051a4bda864a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxODEwMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391818101", "bodyText": "Yes.", "author": "davidbenjamin", "createdAt": "2020-03-12T18:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3MTQyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3MzQ0MA==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391673440", "bodyText": "I'm not so sure this is the best behavior here... Is there any situation where a totally empty cigar makes sense? At least document this with a unit test asserting that you get an empty cigar back and not some horrible error message.", "author": "jamesemery", "createdAt": "2020-03-12T14:48:38Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java", "diffHunk": "@@ -94,7 +98,7 @@ public Cigar make() {\n         if (lastOperator == CigarOperator.DELETION) {\n             cigarElements.remove(cigarElements.size() - 1);\n         }\n-        return new Cigar(cigarElements);\n+        return new Cigar(cigarElements);    // removing flanking deletions may cause an empty cigar to be output.  We do not throw an error or return null.", "originalCommit": "c50b5cc0f60e4b23f6801bc932af051a4bda864a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0NTUwNg==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391845506", "bodyText": "I kept this for the sake of Haplotype.trim(), but I have rewritten so that building an all-deletion cigar throws an error and trimming a haplotype", "author": "davidbenjamin", "createdAt": "2020-03-12T19:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3MzQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java b/src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java\nindex 6039ad72f..620d00bbb 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java\n\n@@ -95,9 +103,12 @@ public class CigarBuilder {\n \n     public Cigar make() {\n         Utils.validate(!(section == Section.LEFT_SOFT_CLIP && cigarElements.get(0).getOperator() == CigarOperator.SOFT_CLIP), \"cigar is completely soft-clipped\");\n+        trailingDeletionBasesRemovedInMake = 0;\n         if (lastOperator == CigarOperator.DELETION) {\n+            trailingDeletionBasesRemovedInMake = cigarElements.get(cigarElements.size() - 1).getLength();\n             cigarElements.remove(cigarElements.size() - 1);\n         }\n+        Utils.validate(!cigarElements.isEmpty(), \"No cigar elements left after removing leading and trailing deletions.\");\n         return new Cigar(cigarElements);    // removing flanking deletions may cause an empty cigar to be output.  We do not throw an error or return null.\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3OTg1NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391679855", "bodyText": "On a general note this seems brittle. We are relying on the fact that we are trimming underlying garbage inside of leftAlignIndels and then using this heuristic method after the fact to detect if we might have triggered the silent cigar element deletion code and correct for it. The underlying correction code seems to delete both leading and trailing deletions and the signal is the same in both cases which could cause this value to be wrong if the cigar you fed to leftAlignIndels had a trailing un-shiftable deletion. I think I would much prefer that leftAlignIndels itself returns a Pair of cigar + how many bases were excised from the front, that way we can shove all of this thorny behavior into a unit test. Perhaps the cigar builder could have a method that returns an accounting of what it has deleted for this purpose. Either way I don't think it should be the responsibility of client code to have to guess at where the new boundary is if this shift happened.", "author": "jamesemery", "createdAt": "2020-03-12T14:57:43Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java", "diffHunk": "@@ -116,12 +99,11 @@ public static GATKRead createReadAlignedToRef(final GATKRead originalRead,\n         // this is the sub-cigar of the haplotype-to-ref alignment, with cigar elements before the read start removed.  Elements after the read end are kept.\n         final Cigar haplotypeToRef = trimCigarByBases(rightPaddedHaplotypeVsRefCigar, readToHaplotypeSWAlignment.getAlignmentOffset(), rightPaddedHaplotypeVsRefCigar.getReadLength() - 1);\n \n-        final Cigar readToRefCigarRaw = applyCigarToCigar(swCigar, haplotypeToRef);\n-        final Cigar readToRefCigarClean = cleanUpCigar(readToRefCigarRaw);\n-        final Cigar readToRefCigar = leftAlignIndels(readToRefCigarClean, refHaplotype.getBases(), originalRead.getBases(), readStartOnReferenceHaplotype);\n+        final Cigar readToRefCigar = applyCigarToCigar(swCigar, haplotypeToRef);\n+        final Cigar leftAlignedReadToRefCigar = leftAlignIndels(readToRefCigar, refHaplotype.getBases(), originalRead.getBases(), readStartOnReferenceHaplotype);\n \n         // it's possible that left-alignment shifted a deletion to the beginning of a read and removed it, shifting the first aligned base to the right\n-        final int leadingDeletions = readToRefCigarClean.getReferenceLength() - readToRefCigar.getReferenceLength();\n+        final int leadingDeletions = readToRefCigar.getReferenceLength() - leftAlignedReadToRefCigar.getReferenceLength();", "originalCommit": "c50b5cc0f60e4b23f6801bc932af051a4bda864a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzODMxMg==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391838312", "bodyText": "improved it", "author": "davidbenjamin", "createdAt": "2020-03-12T19:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3OTg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java b/src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java\nindex 41ccf4471..9ec8616b0 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java\n\n@@ -97,7 +98,7 @@ public final class AlignmentUtils {\n         // SW of read -> hap mapped through the given by hap -> ref\n \n         // this is the sub-cigar of the haplotype-to-ref alignment, with cigar elements before the read start removed.  Elements after the read end are kept.\n-        final Cigar haplotypeToRef = trimCigarByBases(rightPaddedHaplotypeVsRefCigar, readToHaplotypeSWAlignment.getAlignmentOffset(), rightPaddedHaplotypeVsRefCigar.getReadLength() - 1);\n+        final Cigar haplotypeToRef = trimCigarByBases(rightPaddedHaplotypeVsRefCigar, readToHaplotypeSWAlignment.getAlignmentOffset(), rightPaddedHaplotypeVsRefCigar.getReadLength() - 1).getLeft();\n \n         final Cigar readToRefCigar = applyCigarToCigar(swCigar, haplotypeToRef);\n         final Cigar leftAlignedReadToRefCigar = leftAlignIndels(readToRefCigar, refHaplotype.getBases(), originalRead.getBases(), readStartOnReferenceHaplotype);\n"}}, {"oid": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "url": "https://github.com/broadinstitute/gatk/commit/c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "message": "review edits", "committedDate": "2020-03-12T20:00:25Z", "type": "commit"}, {"oid": "1749a16b8c8ae0f71219471d0b01f5fb191208fe", "url": "https://github.com/broadinstitute/gatk/commit/1749a16b8c8ae0f71219471d0b01f5fb191208fe", "message": "integration test files", "committedDate": "2020-03-12T20:35:39Z", "type": "commit"}, {"oid": "5e6845ad6502b4200dcbd2e36b5b4bcb63c1e126", "url": "https://github.com/broadinstitute/gatk/commit/5e6845ad6502b4200dcbd2e36b5b4bcb63c1e126", "message": "one more unit test", "committedDate": "2020-03-13T02:59:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwODM2NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r393108365", "bodyText": "I would recommend making a static inner class to the CigarBuilder that is something the the effect of CigarAndTrimmingInformaiton that stores these things. Usually when we find ourselves using Triples its easier to make a helper class to document what all the fields are and prevent confusion.", "author": "jamesemery", "createdAt": "2020-03-16T15:26:39Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java", "diffHunk": "@@ -889,7 +910,7 @@ public static Cigar removeTrailingDeletions(final Cigar c) {\n      * @param end Where should we stop keeping bases on the reference?  The maximum value is cigar.getReferenceLength()\n      * @return a new Cigar with reference length == start - end + 1\n      */\n-    public static Cigar trimCigarByReference(final Cigar cigar, final int start, final int end) {\n+    public static Triple<Cigar, Integer, Integer> trimCigarByReference(final Cigar cigar, final int start, final int end) {", "originalCommit": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNDU5NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r393434595", "bodyText": "done", "author": "davidbenjamin", "createdAt": "2020-03-17T04:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwODM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "da40e25c852b1673ed5b35150738cc3e1c58c420", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java b/src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java\nindex 9ec8616b0..601495a68 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java\n\n@@ -910,7 +910,7 @@ public final class AlignmentUtils {\n      * @param end Where should we stop keeping bases on the reference?  The maximum value is cigar.getReferenceLength()\n      * @return a new Cigar with reference length == start - end + 1\n      */\n-    public static Triple<Cigar, Integer, Integer> trimCigarByReference(final Cigar cigar, final int start, final int end) {\n+    public static CigarBuilder.Result trimCigarByReference(final Cigar cigar, final int start, final int end) {\n         return trimCigar(cigar, start, end, true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwOTExMA==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r393109110", "bodyText": "Document these. Also I would make this return an object rather than a triple.", "author": "jamesemery", "createdAt": "2020-03-16T15:27:42Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java", "diffHunk": "@@ -123,4 +134,17 @@ private void advanceSectionAndValidateCigarOrder(CigarOperator operator) {\n             }\n         }\n     }\n+\n+    public int getLeadingDeletionBasesRemoved() {\n+        return leadingDeletionBasesRemoved;\n+    }\n+\n+    public int getTrailingDeletionBasesRemoved() {\n+        return trailingDeletionBasesRemoved + trailingDeletionBasesRemovedInMake;\n+    }\n+\n+    public Triple<Cigar, Integer, Integer> makeAndRecordDeletionsRemoved() {", "originalCommit": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNDYwNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r393434605", "bodyText": "done", "author": "davidbenjamin", "createdAt": "2020-03-17T04:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwOTExMA=="}], "type": "inlineReview", "revised_code": {"commit": "da40e25c852b1673ed5b35150738cc3e1c58c420", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java b/src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java\nindex 620d00bbb..99be27401 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java\n\n@@ -135,16 +139,56 @@ public class CigarBuilder {\n         }\n     }\n \n+    /**\n+     * Count the number of leading deletion bases that have been removed by this builder and that will not show up in any call to make().\n+     * Note that all leading deletions are removed prior to calling make().  For example, successively adding 3S2D10I7D10M would result in\n+     * the 2D and 7D elements being discarded, for a total of 9 removed deletion bases.\n+     */\n     public int getLeadingDeletionBasesRemoved() {\n         return leadingDeletionBasesRemoved;\n     }\n \n+    /**\n+     * Counts the number of trailing deletion bases that were removed in the last call to make().  These may be removed\n+     * before or during make().  For example, adding 3M and 3D does not removed the 3D because the builder does not know that 3D\n+     * is a terminal element.  If make() is then called, the builder will record the discarded 3D and this method will return 3.\n+     * Subsequently adding 3M, calling make(), and then calling this method will result in 0.\n+     */\n     public int getTrailingDeletionBasesRemoved() {\n         return trailingDeletionBasesRemoved + trailingDeletionBasesRemovedInMake;\n     }\n \n-    public Triple<Cigar, Integer, Integer> makeAndRecordDeletionsRemoved() {\n+    /**\n+     * Return a Result object containing the output of make() as well as the number of leading and trailing deletion bases\n+     * removed relative to the cigar elements that were add()ed.  This is very useful when in addition to transforming a cigar we must also\n+     * keep track of an alignment start or end.\n+     */\n+    public Result makeAndRecordDeletionsRemovedResult() {\n         final Cigar cigar = make();\n-        return Triple.of(cigar, getLeadingDeletionBasesRemoved(), getTrailingDeletionBasesRemoved());\n+        return new Result(cigar, getLeadingDeletionBasesRemoved(), getTrailingDeletionBasesRemoved());\n+    }\n+\n+    public static final class Result {\n+        private Cigar cigar;\n+        private final int leadingDeletionBasesRemoved;\n+        private final int trailingDeletionBasesRemoved;\n+\n+        public Result(final Cigar cigar, final int leadingDeletionBasesRemoved, final int trailingDeletionBasesRemoved) {\n+            this.cigar = cigar;\n+            this.leadingDeletionBasesRemoved = leadingDeletionBasesRemoved;\n+            this.trailingDeletionBasesRemoved = trailingDeletionBasesRemoved;\n+        }\n+\n+        public Cigar getCigar() {\n+            return cigar;\n+        }\n+\n+        public int getLeadingDeletionBasesRemoved() {\n+            return leadingDeletionBasesRemoved;\n+        }\n+\n+        public int getTrailingDeletionBasesRemoved() {\n+            return trailingDeletionBasesRemoved;\n+        }\n     }\n }\n\\ No newline at end of file\n"}}, {"oid": "da40e25c852b1673ed5b35150738cc3e1c58c420", "url": "https://github.com/broadinstitute/gatk/commit/da40e25c852b1673ed5b35150738cc3e1c58c420", "message": "more edits", "committedDate": "2020-03-17T04:07:35Z", "type": "commit"}]}