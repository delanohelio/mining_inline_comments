{"pr_number": 6430, "pr_title": "Ensure CalculateGenotypePosteriors resources have same sequence dictionary as input VCF", "pr_createdAt": "2020-01-31T20:05:24Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6430", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjQzNg==", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375626436", "bodyText": "Is there any reason why this check is particular to CalculateGenotypePosteriors?  It seems like it could be extracted and used with every List<FeatureInput<VariantContext>> in the GATK.", "author": "davidbenjamin", "createdAt": "2020-02-06T03:37:47Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriors.java", "diffHunk": "@@ -265,9 +267,22 @@\n \n     @Override\n     public void onTraversalStart() {\n+        //check references\n+        final SAMSequenceDictionary mainDict = getBestAvailableSequenceDictionary();", "originalCommit": "e8032449305e250e47ed722ef190c3fc39a01b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNzI4OA==", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375627288", "bodyText": "Also, do we need to be as strict as isSameDictionary()?  Maybe it's enough just to have the same sequence dictionary when subset to the contigs used for traversal.", "author": "davidbenjamin", "createdAt": "2020-02-06T03:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8560dd17020a7b34298602d5c6c88a305e09d553", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriors.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriors.java\nindex b2a39f57e..ce8d3eabe 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriors.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriors.java\n\n@@ -267,19 +268,6 @@ public final class CalculateGenotypePosteriors extends VariantWalker {\n \n     @Override\n     public void onTraversalStart() {\n-        //check references\n-        final SAMSequenceDictionary mainDict = getBestAvailableSequenceDictionary();\n-        for (final FeatureInput<VariantContext> resource : supportVariants) {\n-            if (getHeaderForFeatures(resource) instanceof VCFHeader) {\n-                final VCFHeader resourceHeader = (VCFHeader) getHeaderForFeatures(resource);\n-                if (!resourceHeader.getSequenceDictionary().isSameDictionary(mainDict)) {\n-                    throw new UserException.BadInput(\"Resource \" + resource.getFeaturePath() + \" should have a sequence dictionary matching the input VCF \" + drivingVariantFile);\n-                }\n-            } else {\n-                throw new IllegalArgumentException(\"Resource \" + resource.getFeaturePath() + \" should be a VCF file.\");\n-            }\n-        }\n-\n         vcfWriter = createVCFWriter(out);\n \n         final SampleDB sampleDB = initializeSampleDB();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjY3OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375626679", "bodyText": "Use CalculateGenotypePosteriors.SUPPORTING_CALLSETS_LONG_NAME", "author": "davidbenjamin", "createdAt": "2020-02-06T03:39:20Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java", "diffHunk": "@@ -184,4 +184,17 @@ public void testBadInputFilesAreRejectedWithReasonableError(String badFile) thro\n \n         runCommandLine(args);\n     }\n+\n+    @Test(expectedExceptions = UserException.BadInput.class)\n+    public void testMismatchedReferences(){\n+        final File out = createTempFile(\"out\", \".vcf.gz\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(out)\n+                .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20 and 21\n+                .addArgument(\"supporting-callsets\", toolsTestDir + \"/walkers/GnarlyGenotyper/sample1.vcf\");  //contigs chr21 and chr21", "originalCommit": "e8032449305e250e47ed722ef190c3fc39a01b05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8560dd17020a7b34298602d5c6c88a305e09d553", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java\nindex 4b490d943..989e9eb0f 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java\n\n@@ -185,15 +185,14 @@ public final class CalculateGenotypePosteriorsIntegrationTest extends CommandLin\n         runCommandLine(args);\n     }\n \n-    @Test(expectedExceptions = UserException.BadInput.class)\n+    @Test(expectedExceptions = UserException.IncompatibleSequenceDictionaries.class)\n     public void testMismatchedReferences(){\n         final File out = createTempFile(\"out\", \".vcf.gz\");\n \n-        final ArgumentsBuilder args = new ArgumentsBuilder();\n-        args.addOutput(out)\n-                .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20 and 21\n-                .addArgument(\"supporting-callsets\", toolsTestDir + \"/walkers/GnarlyGenotyper/sample1.vcf\");  //contigs chr21 and chr21\n-        //variants might not overlap, but it shouldn't matter -- we should fail fast\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+            .addOutput(out)\n+            .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20, b37 ref\n+            .addArgument(CalculateGenotypePosteriors.SUPPORTING_CALLSETS_SHORT_NAME, toolsTestDir + \"/walkers/GnarlyGenotyper/sample1.vcf\");  //contig chr20, hg38 ref\n \n         runCommandLine(args);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjc3OA==", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375626778", "bodyText": "The comment suggests the the file name is only half-true.", "author": "davidbenjamin", "createdAt": "2020-02-06T03:40:01Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java", "diffHunk": "@@ -184,4 +184,17 @@ public void testBadInputFilesAreRejectedWithReasonableError(String badFile) thro\n \n         runCommandLine(args);\n     }\n+\n+    @Test(expectedExceptions = UserException.BadInput.class)\n+    public void testMismatchedReferences(){\n+        final File out = createTempFile(\"out\", \".vcf.gz\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(out)\n+                .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20 and 21", "originalCommit": "e8032449305e250e47ed722ef190c3fc39a01b05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8560dd17020a7b34298602d5c6c88a305e09d553", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java\nindex 4b490d943..989e9eb0f 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java\n\n@@ -185,15 +185,14 @@ public final class CalculateGenotypePosteriorsIntegrationTest extends CommandLin\n         runCommandLine(args);\n     }\n \n-    @Test(expectedExceptions = UserException.BadInput.class)\n+    @Test(expectedExceptions = UserException.IncompatibleSequenceDictionaries.class)\n     public void testMismatchedReferences(){\n         final File out = createTempFile(\"out\", \".vcf.gz\");\n \n-        final ArgumentsBuilder args = new ArgumentsBuilder();\n-        args.addOutput(out)\n-                .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20 and 21\n-                .addArgument(\"supporting-callsets\", toolsTestDir + \"/walkers/GnarlyGenotyper/sample1.vcf\");  //contigs chr21 and chr21\n-        //variants might not overlap, but it shouldn't matter -- we should fail fast\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+            .addOutput(out)\n+            .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20, b37 ref\n+            .addArgument(CalculateGenotypePosteriors.SUPPORTING_CALLSETS_SHORT_NAME, toolsTestDir + \"/walkers/GnarlyGenotyper/sample1.vcf\");  //contig chr20, hg38 ref\n \n         runCommandLine(args);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNzMyNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375627325", "bodyText": "chain this to the constructor: new ArgumentsBuilder().addOutput(out). . .", "author": "davidbenjamin", "createdAt": "2020-02-06T03:42:58Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java", "diffHunk": "@@ -184,4 +184,17 @@ public void testBadInputFilesAreRejectedWithReasonableError(String badFile) thro\n \n         runCommandLine(args);\n     }\n+\n+    @Test(expectedExceptions = UserException.BadInput.class)\n+    public void testMismatchedReferences(){\n+        final File out = createTempFile(\"out\", \".vcf.gz\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(out)", "originalCommit": "e8032449305e250e47ed722ef190c3fc39a01b05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8560dd17020a7b34298602d5c6c88a305e09d553", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java\nindex 4b490d943..989e9eb0f 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java\n\n@@ -185,15 +185,14 @@ public final class CalculateGenotypePosteriorsIntegrationTest extends CommandLin\n         runCommandLine(args);\n     }\n \n-    @Test(expectedExceptions = UserException.BadInput.class)\n+    @Test(expectedExceptions = UserException.IncompatibleSequenceDictionaries.class)\n     public void testMismatchedReferences(){\n         final File out = createTempFile(\"out\", \".vcf.gz\");\n \n-        final ArgumentsBuilder args = new ArgumentsBuilder();\n-        args.addOutput(out)\n-                .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20 and 21\n-                .addArgument(\"supporting-callsets\", toolsTestDir + \"/walkers/GnarlyGenotyper/sample1.vcf\");  //contigs chr21 and chr21\n-        //variants might not overlap, but it shouldn't matter -- we should fail fast\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+            .addOutput(out)\n+            .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20, b37 ref\n+            .addArgument(CalculateGenotypePosteriors.SUPPORTING_CALLSETS_SHORT_NAME, toolsTestDir + \"/walkers/GnarlyGenotyper/sample1.vcf\");  //contig chr20, hg38 ref\n \n         runCommandLine(args);\n     }\n"}}, {"oid": "8560dd17020a7b34298602d5c6c88a305e09d553", "url": "https://github.com/broadinstitute/gatk/commit/8560dd17020a7b34298602d5c6c88a305e09d553", "message": "Ensure CalculateGenotypePosteriors resources have same sequence\ndictionary as input", "committedDate": "2020-10-29T15:28:18Z", "type": "commit"}, {"oid": "2fb7749911245c6f076e758508826dbd1fc349e7", "url": "https://github.com/broadinstitute/gatk/commit/2fb7749911245c6f076e758508826dbd1fc349e7", "message": "Update ArgBuilder method name", "committedDate": "2020-10-29T15:30:12Z", "type": "commit"}, {"oid": "2fb7749911245c6f076e758508826dbd1fc349e7", "url": "https://github.com/broadinstitute/gatk/commit/2fb7749911245c6f076e758508826dbd1fc349e7", "message": "Update ArgBuilder method name", "committedDate": "2020-10-29T15:30:12Z", "type": "forcePushed"}, {"oid": "ddafafe1629c92cbbb5fb7267490e4864cc4bd45", "url": "https://github.com/broadinstitute/gatk/commit/ddafafe1629c92cbbb5fb7267490e4864cc4bd45", "message": "Fix tests that don't validate", "committedDate": "2020-11-19T15:05:42Z", "type": "commit"}, {"oid": "82b378adc6d3f5852a6baf49655cba66cce1c507", "url": "https://github.com/broadinstitute/gatk/commit/82b378adc6d3f5852a6baf49655cba66cce1c507", "message": "Whitespace betrayal", "committedDate": "2020-11-19T19:29:21Z", "type": "commit"}, {"oid": "4aaee60bcc47f16ab76cfe53dfbb3c594416893d", "url": "https://github.com/broadinstitute/gatk/commit/4aaee60bcc47f16ab76cfe53dfbb3c594416893d", "message": "Turn of seq dict validation in test to force replacement", "committedDate": "2020-11-19T21:55:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMDMzNg==", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r527230336", "bodyText": "@cmnbroad the changes I made here are catching a contig length mismatch in these tests.  Given that the subsequent test, where the input VCF has no lengths defined in the dictionary, requires turning off validation, I thought that might be acceptable here, but I wanted to check with you as test author.", "author": "ldgauthier", "createdAt": "2020-11-19T21:59:36Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java", "diffHunk": "@@ -36,9 +36,9 @@\n                 // can't handle CRAM - see https://github.com/samtools/htsjdk/issues/731\n                 new Object[]{ new File(testDir, \"variantsNoDict.vcf\"), new File(testDir, \"exampleBAM.bam\"), null, null, false, false},\n                 // already has a dictionary - but force a replace\n-                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, false},\n+                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, true},", "originalCommit": "4aaee60bcc47f16ab76cfe53dfbb3c594416893d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczNDc0MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r528734741", "bodyText": "@ldgauthier Seems fine. It looks like this same test case is duplicated on the next line though and can be removed while you're in there since its redundant.", "author": "cmnbroad", "createdAt": "2020-11-23T14:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMDMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMzU1Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r533623553", "bodyText": "@cmnbroad I hate to delete a test.  Should I add one where we overwrite a valid dictionary with a (matching) valid dictionary?  That seems like what that original test was intending to do, although that's not particularly interesting behavior.", "author": "ldgauthier", "createdAt": "2020-12-01T18:17:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMDMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMzEzOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r533723139", "bodyText": "@ldgauthier Sure - it seems easy enough to add that. I was mostly just saying that we don't need to have the exact same test case appear in the list twice, which is what we had before, and still have now.", "author": "cmnbroad", "createdAt": "2020-12-01T21:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMDMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "b966c5898bb12ef0e11ccc9da205d09f0ec6085f", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java\nindex 0bb537e58..6952c5f05 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java\n\n@@ -35,10 +35,8 @@ public class UpdateVCFSequenceDictionaryIntegrationTest extends CommandLineProgr\n                 new Object[]{ new File(testDir, \"variantsNoDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, false, false},\n                 // can't handle CRAM - see https://github.com/samtools/htsjdk/issues/731\n                 new Object[]{ new File(testDir, \"variantsNoDict.vcf\"), new File(testDir, \"exampleBAM.bam\"), null, null, false, false},\n-                // already has a dictionary - but force a replace\n-                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, true},\n-                // already has a dictionary - but force a replace\n-                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, true},\n+                // already has a dictionary - but force a replace; validation passes because vcf dictionary is subset of .dict\n+                new Object[]{ new File(testDir, \"variantsWithSubsetDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, false},\n                 // can force a replace with an invalid sequence dictionary if also disable sequence validation\n                 new Object[]{ new File(testDir, \"variantsWithDictBadContigLength.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, true}\n         };\n"}}, {"oid": "b966c5898bb12ef0e11ccc9da205d09f0ec6085f", "url": "https://github.com/broadinstitute/gatk/commit/b966c5898bb12ef0e11ccc9da205d09f0ec6085f", "message": "Add/modify test to overwrite valid dictionary with a different valid\ndictionary", "committedDate": "2020-12-02T18:31:20Z", "type": "commit"}, {"oid": "eafdd59d13cb38e678cfd56f416af3e0969fd8e7", "url": "https://github.com/broadinstitute/gatk/commit/eafdd59d13cb38e678cfd56f416af3e0969fd8e7", "message": "Every.  Single.  Time.", "committedDate": "2020-12-03T16:06:16Z", "type": "commit"}]}