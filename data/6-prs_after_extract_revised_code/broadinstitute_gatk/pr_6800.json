{"pr_number": 6800, "pr_title": "Updated WDL generation, upgrade to Barclay 4.0.", "pr_createdAt": "2020-09-08T15:16:41Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6800", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTY3MA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485041670", "bodyText": "Fix indentation here", "author": "droazen", "createdAt": "2020-09-08T16:15:54Z", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java", "diffHunk": "@@ -223,12 +223,12 @@ public Object instanceMain(final String[] argv) {\n         return null;\n     }\n \n-    /**\n-     * Parse arguments and initialize any values annotated with {@link Argument}\n-     * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n-     * @throws CommandLineException if command line validation fails\n-     */\n-    protected final boolean parseArgs(final String[] argv) {\n+        /**\n+         * Parse arguments and initialize any values annotated with {@link Argument}\n+         * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n+         * @throws CommandLineException if command line validation fails\n+         */\n+        protected boolean parseArgs(final String[] argv) {", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTk0OA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485041948", "bodyText": "Also, I assume you removed final because you actually had to override this method?", "author": "droazen", "createdAt": "2020-09-08T16:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDQxOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485124419", "bodyText": "Yes, but I wound up not needing to do so. Restored the final and indentation fixed.", "author": "cmnbroad", "createdAt": "2020-09-08T18:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java b/src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java\nindex 4f0fdcb61..8d29d3146 100644\n--- a/src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java\n+++ b/src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java\n\n@@ -223,12 +223,12 @@ public abstract class CommandLineProgram implements CommandLinePluginProvider {\n         return null;\n     }\n \n-        /**\n-         * Parse arguments and initialize any values annotated with {@link Argument}\n-         * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n-         * @throws CommandLineException if command line validation fails\n-         */\n-        protected boolean parseArgs(final String[] argv) {\n+    /**\n+     * Parse arguments and initialize any values annotated with {@link Argument}\n+     * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n+     * @throws CommandLineException if command line validation fails\n+     */\n+    protected final boolean parseArgs(final String[] argv) {\n \n         final boolean ret = getCommandLineParser().parseArguments(System.err, argv);\n         commandLine = getCommandLineParser().getCommandLine();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MjYyMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485042621", "bodyText": "Will the Picard command-line validation recognize both legacy and POSIX syntax?", "author": "droazen", "createdAt": "2020-09-08T16:17:27Z", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/PicardCommandLineProgramExecutor.java", "diffHunk": "@@ -17,6 +20,15 @@ public PicardCommandLineProgramExecutor(final picard.cmdline.CommandLineProgram\n         this.picardCommandLineProgram = picardCommandLineProgram;\n     }\n \n+    /**\n+     * Validate command line arguments.\n+     * @return true if program args are valid, otherwise false\n+     * @throws CommandLineException if command line argument validation fails\n+     */\n+    protected boolean validateArgs(final String[] argv) {\n+        return picardCommandLineProgram.getCommandLineParser().parseArguments(System.out, argv);", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyOTYzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485129635", "bodyText": "No, but only because we never use the legacy parser in gatk. There was a PR a few weeks ago that changed that, but those changes were abandoned.", "author": "cmnbroad", "createdAt": "2020-09-08T18:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MjYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/cmdline/PicardCommandLineProgramExecutor.java b/src/main/java/org/broadinstitute/hellbender/cmdline/PicardCommandLineProgramExecutor.java\nindex 89b820914..4a84b45e2 100644\n--- a/src/main/java/org/broadinstitute/hellbender/cmdline/PicardCommandLineProgramExecutor.java\n+++ b/src/main/java/org/broadinstitute/hellbender/cmdline/PicardCommandLineProgramExecutor.java\n\n@@ -20,15 +17,6 @@ public class PicardCommandLineProgramExecutor extends CommandLineProgram {\n         this.picardCommandLineProgram = picardCommandLineProgram;\n     }\n \n-    /**\n-     * Validate command line arguments.\n-     * @return true if program args are valid, otherwise false\n-     * @throws CommandLineException if command line argument validation fails\n-     */\n-    protected boolean validateArgs(final String[] argv) {\n-        return picardCommandLineProgram.getCommandLineParser().parseArguments(System.out, argv);\n-    }\n-\n     /**\n      * Entry point for Picard tools that are called from GATK.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0NDE2MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485044161", "bodyText": "The annotations look a lot better than before!", "author": "droazen", "createdAt": "2020-09-08T16:19:59Z", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/OptionalReferenceInputArgumentCollection.java", "diffHunk": "@@ -11,8 +11,8 @@\n public final class OptionalReferenceInputArgumentCollection extends ReferenceInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n \n-    @WorkflowResource(input=true, output=false, companionResources = {\"referenceDictionary\", \"referenceIndex\"})\n     @Argument(fullName = StandardArgumentDefinitions.REFERENCE_LONG_NAME, shortName = StandardArgumentDefinitions.REFERENCE_SHORT_NAME, doc = \"Reference sequence\", optional = true)\n+    @WorkflowInput(requiredCompanions = { StandardArgumentDefinitions.REFERENCE_INDEX_COMPANION, StandardArgumentDefinitions.REFERENCE_DICTIONARY_COMPANION})", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2Mzk1NA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485163954", "bodyText": "Yeah, they do.", "author": "cmnbroad", "createdAt": "2020-09-08T20:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0NDE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/OptionalReferenceInputArgumentCollection.java b/src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/OptionalReferenceInputArgumentCollection.java\nindex a6c4145fe..7cf4a607d 100644\n--- a/src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/OptionalReferenceInputArgumentCollection.java\n+++ b/src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/OptionalReferenceInputArgumentCollection.java\n\n@@ -11,8 +11,8 @@ import org.broadinstitute.hellbender.engine.GATKPath;\n public final class OptionalReferenceInputArgumentCollection extends ReferenceInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n \n+    @WorkflowResource(input=true, output=false, companionResources = {\"referenceDictionary\", \"referenceIndex\"})\n     @Argument(fullName = StandardArgumentDefinitions.REFERENCE_LONG_NAME, shortName = StandardArgumentDefinitions.REFERENCE_SHORT_NAME, doc = \"Reference sequence\", optional = true)\n-    @WorkflowInput(requiredCompanions = { StandardArgumentDefinitions.REFERENCE_INDEX_COMPANION, StandardArgumentDefinitions.REFERENCE_DICTIONARY_COMPANION})\n     private GATKPath referenceInputPathSpecifier;\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MDgzMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485050831", "bodyText": "It might be better to have these \"companion\" constants grouped into a separate section in this file, with a comment explaining that these are not argument names, but string constants used in the Workflow annotations.", "author": "droazen", "createdAt": "2020-09-08T16:30:55Z", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/StandardArgumentDefinitions.java", "diffHunk": "@@ -9,8 +9,12 @@\n     private StandardArgumentDefinitions(){}\n \n     public static final String INPUT_LONG_NAME = \"input\";\n+    public static final String INPUT_INDEX_COMPANION = INPUT_LONG_NAME + \"Index\";\n     public static final String OUTPUT_LONG_NAME = \"output\";\n+    public static final String OUTPUT_INDEX_COMPANION = OUTPUT_LONG_NAME + \"Index\";\n     public static final String REFERENCE_LONG_NAME = \"reference\";\n+    public static final String REFERENCE_INDEX_COMPANION = REFERENCE_LONG_NAME + \"Index\";\n+    public static final String REFERENCE_DICTIONARY_COMPANION = REFERENCE_LONG_NAME + \"Dictionary\";", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjM2OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485166369", "bodyText": "Done.", "author": "cmnbroad", "createdAt": "2020-09-08T20:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MDgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/cmdline/StandardArgumentDefinitions.java b/src/main/java/org/broadinstitute/hellbender/cmdline/StandardArgumentDefinitions.java\nindex 3802a30c2..e8310551a 100644\n--- a/src/main/java/org/broadinstitute/hellbender/cmdline/StandardArgumentDefinitions.java\n+++ b/src/main/java/org/broadinstitute/hellbender/cmdline/StandardArgumentDefinitions.java\n\n@@ -9,12 +9,8 @@ public final class StandardArgumentDefinitions {\n     private StandardArgumentDefinitions(){}\n \n     public static final String INPUT_LONG_NAME = \"input\";\n-    public static final String INPUT_INDEX_COMPANION = INPUT_LONG_NAME + \"Index\";\n     public static final String OUTPUT_LONG_NAME = \"output\";\n-    public static final String OUTPUT_INDEX_COMPANION = OUTPUT_LONG_NAME + \"Index\";\n     public static final String REFERENCE_LONG_NAME = \"reference\";\n-    public static final String REFERENCE_INDEX_COMPANION = REFERENCE_LONG_NAME + \"Index\";\n-    public static final String REFERENCE_DICTIONARY_COMPANION = REFERENCE_LONG_NAME + \"Dictionary\";\n     public static final String VARIANT_LONG_NAME = \"variant\";\n     public static final String FEATURE_LONG_NAME = \"feature\";\n     public static final String INTERVALS_LONG_NAME = \"intervals\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2ODI1Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485068257", "bodyText": "Leave some space between the serialVersionUID and this annotation for readability. Also, you should pick a canonical ordering for @Argument and WorkflowInput and stick to it consistently. Above you had @Argument coming first, but here you have WorkflowInput first.", "author": "droazen", "createdAt": "2020-09-08T17:01:05Z", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/RequiredReadInputArgumentCollection.java", "diffHunk": "@@ -13,6 +14,7 @@\n  */\n public final class RequiredReadInputArgumentCollection extends ReadInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n+    @WorkflowInput(optionalCompanions = StandardArgumentDefinitions.INPUT_INDEX_COMPANION)", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3MDcyMA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485170720", "bodyText": "Done. I did try to use the same ordering everywhere but I guess I missed this one - I don't see any others.", "author": "cmnbroad", "createdAt": "2020-09-08T20:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2ODI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/RequiredReadInputArgumentCollection.java b/src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/RequiredReadInputArgumentCollection.java\nindex 7d95d3085..385bb413c 100644\n--- a/src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/RequiredReadInputArgumentCollection.java\n+++ b/src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/RequiredReadInputArgumentCollection.java\n\n@@ -14,8 +14,9 @@ import java.util.List;\n  */\n public final class RequiredReadInputArgumentCollection extends ReadInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n-    @WorkflowInput(optionalCompanions = StandardArgumentDefinitions.INPUT_INDEX_COMPANION)\n+\n     @Argument(fullName = StandardArgumentDefinitions.INPUT_LONG_NAME, shortName = StandardArgumentDefinitions.INPUT_SHORT_NAME, doc = \"BAM/SAM/CRAM file containing reads\", optional = false, common = true)\n+    @WorkflowInput(optionalCompanions = StandardArgumentDefinitions.INPUT_INDEX_COMPANION)\n     public List<GATKPath> readFilesNames;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjU4OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485072589", "bodyText": "What did we end up going with for the default memory usage?", "author": "droazen", "createdAt": "2020-09-08T17:08:46Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/AddOriginalAlignmentTags.java", "diffHunk": "@@ -19,10 +21,12 @@\n         programGroup = ReadDataManipulationProgramGroup.class\n )\n @ExperimentalFeature\n+@WorkflowProperties", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMTYzMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485131631", "bodyText": "Its 4G (IIRC, I had previously incorrectly said that it was 1G, but it was and still is 4G). We still might want to find away to customize that for Picard.", "author": "cmnbroad", "createdAt": "2020-09-08T18:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/AddOriginalAlignmentTags.java b/src/main/java/org/broadinstitute/hellbender/tools/AddOriginalAlignmentTags.java\nindex f2f5b127d..9809421a9 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/AddOriginalAlignmentTags.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/AddOriginalAlignmentTags.java\n\n@@ -21,12 +19,10 @@ import picard.cmdline.programgroups.ReadDataManipulationProgramGroup;\n         programGroup = ReadDataManipulationProgramGroup.class\n )\n @ExperimentalFeature\n-@WorkflowProperties\n public class AddOriginalAlignmentTags extends ReadWalker {\n     @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n             doc=\"Write output to this file\")\n-    @WorkflowOutput(optionalCompanions = {StandardArgumentDefinitions.OUTPUT_INDEX_COMPANION})\n     public GATKPath output;\n     private SAMFileGATKReadWriter outputWriter;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDgxMA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485074810", "bodyText": "An output directory with multiple files is ok here?", "author": "droazen", "createdAt": "2020-09-08T17:12:47Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/SplitReads.java", "diffHunk": "@@ -77,6 +80,7 @@\n             fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             doc = \"The directory to output SAM/BAM/CRAM files.\"\n     )\n+    @WorkflowOutput\n     public GATKPath OUTPUT_DIRECTORY;", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMTk4MA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485131980", "bodyText": "Yes, I manually tested this on one of the tools to make sure it works - I think it was this one.", "author": "cmnbroad", "createdAt": "2020-09-08T18:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/SplitReads.java b/src/main/java/org/broadinstitute/hellbender/tools/SplitReads.java\nindex b224f6743..eebed2981 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/SplitReads.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/SplitReads.java\n\n@@ -80,7 +77,6 @@ public final class SplitReads extends ReadWalker {\n             fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             doc = \"The directory to output SAM/BAM/CRAM files.\"\n     )\n-    @WorkflowOutput\n     public GATKPath OUTPUT_DIRECTORY;\n \n     @Argument(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODA0Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485078046", "bodyText": "If you had an optional input to a tool, how would you express that in the current framework?", "author": "droazen", "createdAt": "2020-09-08T17:18:50Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/ApplyBQSR.java", "diffHunk": "@@ -84,6 +89,7 @@\n      * created on the same input data.\n      */\n     @Argument(fullName=StandardArgumentDefinitions.BQSR_TABLE_LONG_NAME, shortName=StandardArgumentDefinitions.BQSR_TABLE_SHORT_NAME, doc=\"Input recalibration table for BQSR\")\n+    @WorkflowInput", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNDkyNA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485134924", "bodyText": "The \"optional-ness\" of the WDL arg for the input is derived from the @Argument optional attribute. The \"optional-ness\" of the inputs companions is based on the combination of the two attributes (@Argument and companion), with the only special handling/override case being for a required companion on an optional arg, where the @Argument attribute overrides the companion attribute and results in the companion arg being optional.", "author": "cmnbroad", "createdAt": "2020-09-08T19:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/ApplyBQSR.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/ApplyBQSR.java\nindex a1b852f43..04c55fbaa 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/ApplyBQSR.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/ApplyBQSR.java\n\n@@ -89,7 +84,6 @@ public final class ApplyBQSR extends ReadWalker{\n      * created on the same input data.\n      */\n     @Argument(fullName=StandardArgumentDefinitions.BQSR_TABLE_LONG_NAME, shortName=StandardArgumentDefinitions.BQSR_TABLE_SHORT_NAME, doc=\"Input recalibration table for BQSR\")\n-    @WorkflowInput\n     public File BQSR_RECAL_FILE;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODQ4OA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485078488", "bodyText": "@WorkflowInput works ok with fields of a Collection type? Is this covered by tests?", "author": "droazen", "createdAt": "2020-09-08T17:19:37Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "diffHunk": "@@ -104,6 +108,7 @@\n      * reflected those sites skipped by the -XL argument.\n      */\n     @Argument(fullName = KNOWN_SITES_ARG_FULL_NAME, doc = \"One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.\", optional = false)\n+    @WorkflowInput\n     private List<FeatureInput<Feature>> knownSites;", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNzAwMg==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485137002", "bodyText": "Yes. The TestWDLTool has several args that are collections, including File and other types. And the generated test data that is used to validate the WDL for actual tools always generates two values for any collection arg.", "author": "cmnbroad", "createdAt": "2020-09-08T19:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java\nindex 123f834c1..8100e5bef 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java\n\n@@ -108,7 +104,6 @@ public final class BaseRecalibrator extends ReadWalker {\n      * reflected those sites skipped by the -XL argument.\n      */\n     @Argument(fullName = KNOWN_SITES_ARG_FULL_NAME, doc = \"One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.\", optional = false)\n-    @WorkflowInput\n     private List<FeatureInput<Feature>> knownSites;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTI1MA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485079250", "bodyText": "\"Output file\" -> \"Output BAM file\"", "author": "droazen", "createdAt": "2020-09-08T17:20:51Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/consensus/DownsampleByDuplicateSet.java", "diffHunk": "@@ -55,9 +52,16 @@\n  * --fraction-to-keep 0.95 \\\n  * -O umiGrouped_0.95.bam\n  **/\n+@CommandLineProgramProperties(\n+        summary = \"Discard a set fraction of duplicate sets from a UMI-grouped bam\",\n+        oneLineSummary = \"Discard a set fraction of duplicate sets from a UMI-grouped bam\",\n+        programGroup = ReadDataManipulationProgramGroup.class\n+)\n @BetaFeature\n+@WorkflowProperties\n public class DownsampleByDuplicateSet extends DuplicateSetWalker {\n-    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"\")\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"Output file\")", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4NTYyMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485585621", "bodyText": "Done.", "author": "cmnbroad", "createdAt": "2020-09-09T12:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/consensus/DownsampleByDuplicateSet.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/consensus/DownsampleByDuplicateSet.java\nindex fbd9f5dc6..558ae198b 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/consensus/DownsampleByDuplicateSet.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/consensus/DownsampleByDuplicateSet.java\n\n@@ -60,7 +60,7 @@ import java.util.Random;\n @BetaFeature\n @WorkflowProperties\n public class DownsampleByDuplicateSet extends DuplicateSetWalker {\n-    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"Output file\")\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"Output BAM file\")\n     @WorkflowOutput(optionalCompanions = {StandardArgumentDefinitions.OUTPUT_INDEX_COMPANION})\n     public GATKPath outputBam;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MjA4MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485082081", "bodyText": "final?", "author": "droazen", "createdAt": "2020-09-08T17:25:49Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -32,6 +34,8 @@\n     // This must be kept in sync with the value used in build.gradle, where the file is created\n     private final static String dummyWDLTestFileName = \"dummyWDLTestFile\";\n \n+    private static String WDL_TEST_VALUE_PROPERTY = \"testValue\";", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4NDE1NA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485584154", "bodyText": "Done.", "author": "cmnbroad", "createdAt": "2020-09-09T12:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MjA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\nindex 762daa4e1..5d3aeeb8c 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n\n@@ -34,7 +34,7 @@ public class GATKWDLWorkUnitHandler extends WDLWorkUnitHandler {\n     // This must be kept in sync with the value used in build.gradle, where the file is created\n     private final static String dummyWDLTestFileName = \"dummyWDLTestFile\";\n \n-    private static String WDL_TEST_VALUE_PROPERTY = \"testValue\";\n+    private final static String WDL_TEST_VALUE_PROPERTY = \"testValue\";\n \n     // Map of Java argument types that the WDL generator knows how to convert to a WDL type, along with the\n     // corresponding string substitution that needs to be run on the (Barclay-generated) string that describes\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MzIzMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485083231", "bodyText": "Are you guaranteed that there's always at least one element here?", "author": "droazen", "createdAt": "2020-09-08T17:27:49Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NDEwOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485864109", "bodyText": "Yes, this code block is inside a guard that checks that there actually are positional args.", "author": "cmnbroad", "createdAt": "2020-09-09T19:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MzIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\nindex 762daa4e1..ea66daa31 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n\n@@ -143,126 +135,42 @@ public class GATKWDLWorkUnitHandler extends WDLWorkUnitHandler {\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n+        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n-            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n-                    testValueAsJSON(\n-                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n-                            clp.getPositionalArgumentDefinition(),\n-                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n-                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n+            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n+            final String argType = (String) positionalArgs.get(\"type\");\n+            positionalArgs.put(\"testValue\",\n+                    getInputValueForTest(\n+                            argType,\n+                            (String) positionalArgs.get(\"defaultValue\"))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs.\n-     *\n-     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n-     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n-     *\n-     * @param longName the long name for this arg\n-     * @param argDef the ArgumentDefinition for this arg\n+     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n+     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n+     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultWDLValue the default value for the argument for which an input value is required\n+     * @param defaultValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String testValueAsJSON(\n-            final String longName,\n-            final ArgumentDefinition argDef,\n-            final String wdlType,\n-            final String defaultWDLValue) {\n-        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n-        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n-        final boolean isRequired =\n-                (argumentAnnotation != null && !argumentAnnotation.optional())\n-                || positionalAnnotation != null;\n-        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;\n-\n-        // Hack to resolve the mutex argument in GATKSparkTool; otherwise all spark tools will fail since all\n-        // mutex args will have a value\n-        if (longName.equals(GATKSparkTool.OUTPUT_SHARD_DIR_LONG_NAME)) {\n-            return \"null\";\n-        }\n-\n-        // first check the wdl type; for File we always want to use the name of the dummy file that is created by\n-        // the test process that is used to ensure localization is handled correctly\n+    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n         if (wdlType.equals(\"File\")) {\n-            if (isRequired) {\n-                return \"\\\"\" + dummyWDLTestFile + \"\\\"\";\n-            } else {\n-                return \"null\";\n-            }\n+            return \"\\\"\" + ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName + \"\\\"\";\n         } else if (wdlType.equals(\"Array[File]\")) {\n-            return String.format(\"[\\\"%s\\\", \\\"%s\\\"]\", dummyWDLTestFile, dummyWDLTestFile);\n-        }\n-\n-        // for other (non-File) types, use the default value and arg def to synthesize a value\n-        if (defaultWDLValue.equals(\"null\") || defaultWDLValue.equals(\"\\\"\\\"\") || defaultWDLValue.equals(\"[]\")) {\n-            if (isRequired) {\n-                if (wdlType.startsWith(\"Array\")) {\n-                    // we use two values to accommodate tools that take positional args, such as CompareSams that\n-                    // require more than one arg\n-                    return String.format(\"[\\\"%s\\\", \\\"%s\\\"]\", getDefaultValueForType(argDef), getDefaultValueForType(argDef));\n-                } else {\n-                    return \"\\\"\" + getDefaultValueForType(argDef) + \"\\\"\";\n-                }\n-            } else {\n-                return \"null\";\n-            }\n-        } else if (defaultWDLValue.startsWith(\"[\")) {\n-            // for required arrays, we need to provide SOME value in the array\n-            if (isRequired) {\n-                return defaultWDLValue;\n-            } else {\n-                return \"null\";\n-            }\n-        } else if (wdlType.equals(\"Float\")) {\n-            if (defaultWDLValue.equals(\"Infinity\") || defaultWDLValue.equals(\"Nan\")) {\n-                // JSON does not recognize \"Infinity\" or \"Nan\" as valid float values (!), so we\n-                // need to treat them as String values\n-                return \"\\\"\" + defaultWDLValue + \"\\\"\";\n-            }\n-        }\n-        return defaultWDLValue;\n-    }\n-\n-    /**\n-     * Return a value that will satisfy the constructor for argDef's underlying class.\n-     * @param argDef\n-     * @return a value that will satisfy the constructor for argDef's underlying class.\n-     */\n-    protected String getDefaultValueForType(final ArgumentDefinition argDef) {\n-        final Class<?> clazz = argDef.getUnderlyingFieldClass();\n-        if (clazz.isEnum()) {\n-            // any enum constant for this enum will do\n-            return argDef.getUnderlyingFieldClass().getEnumConstants()[0].toString();\n+            return \"[\\\"\" + ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName + \"\\\"]\";\n+        } else if (defaultValue.equals(\"null\")) {\n+            return \"\\\"\\\"\";\n+        } else if (defaultValue.equals(\"\\\"\\\"\")) {\n+            return defaultValue;\n+        } else if (defaultValue.equals(\"[]\")) {\n+            return defaultValue;\n+        } else if (defaultValue.startsWith(\"Array\")) {\n+            return defaultValue;\n         } else {\n-            // get a value that is formatted appropriately by calling toString() on the value\n-            // on the underlying object if its not null, otherwise return a synthetic string\n-            // suitable for the underlying type\n-            final Object fieldDefaultValue = argDef.getArgumentValue();\n-            if (fieldDefaultValue != null && !fieldDefaultValue.toString().equals(\"[]\")) {\n-                return fieldDefaultValue.toString();\n-            } else if (clazz.isAssignableFrom(Boolean.class) ||\n-                    clazz.isAssignableFrom(boolean.class)) {\n-                return \"true\";\n-            } else if (clazz.isAssignableFrom(Float.class) ||\n-                    clazz.isAssignableFrom(float.class) ||\n-                    clazz.isAssignableFrom(Double.class) ||\n-                    clazz.isAssignableFrom(double.class)) {\n-                return \"0.0\";\n-            } else if (clazz.isAssignableFrom(Integer.class) ||\n-                    clazz.isAssignableFrom(int.class) ||\n-                    clazz.isAssignableFrom(Long.class) ||\n-                    clazz.isAssignableFrom(long.class)) {\n-                return \"1\";\n-            } else {\n-                // give up and return a String with a synthetic value\n-                return \"syntheticTestValue\";\n-            }\n+            return \"\\\"\" + defaultValue + \"\\\"\";\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NDQzMA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485084430", "bodyText": "Is this file cleaned up on JVM exit?", "author": "droazen", "createdAt": "2020-09-08T17:29:55Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTM4Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485855382", "bodyText": "Done.", "author": "cmnbroad", "createdAt": "2020-09-09T19:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NDQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\nindex 762daa4e1..ea66daa31 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n\n@@ -143,126 +135,42 @@ public class GATKWDLWorkUnitHandler extends WDLWorkUnitHandler {\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n+        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n-            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n-                    testValueAsJSON(\n-                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n-                            clp.getPositionalArgumentDefinition(),\n-                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n-                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n+            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n+            final String argType = (String) positionalArgs.get(\"type\");\n+            positionalArgs.put(\"testValue\",\n+                    getInputValueForTest(\n+                            argType,\n+                            (String) positionalArgs.get(\"defaultValue\"))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs.\n-     *\n-     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n-     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n-     *\n-     * @param longName the long name for this arg\n-     * @param argDef the ArgumentDefinition for this arg\n+     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n+     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n+     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultWDLValue the default value for the argument for which an input value is required\n+     * @param defaultValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String testValueAsJSON(\n-            final String longName,\n-            final ArgumentDefinition argDef,\n-            final String wdlType,\n-            final String defaultWDLValue) {\n-        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n-        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n-        final boolean isRequired =\n-                (argumentAnnotation != null && !argumentAnnotation.optional())\n-                || positionalAnnotation != null;\n-        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;\n-\n-        // Hack to resolve the mutex argument in GATKSparkTool; otherwise all spark tools will fail since all\n-        // mutex args will have a value\n-        if (longName.equals(GATKSparkTool.OUTPUT_SHARD_DIR_LONG_NAME)) {\n-            return \"null\";\n-        }\n-\n-        // first check the wdl type; for File we always want to use the name of the dummy file that is created by\n-        // the test process that is used to ensure localization is handled correctly\n+    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n         if (wdlType.equals(\"File\")) {\n-            if (isRequired) {\n-                return \"\\\"\" + dummyWDLTestFile + \"\\\"\";\n-            } else {\n-                return \"null\";\n-            }\n+            return \"\\\"\" + ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName + \"\\\"\";\n         } else if (wdlType.equals(\"Array[File]\")) {\n-            return String.format(\"[\\\"%s\\\", \\\"%s\\\"]\", dummyWDLTestFile, dummyWDLTestFile);\n-        }\n-\n-        // for other (non-File) types, use the default value and arg def to synthesize a value\n-        if (defaultWDLValue.equals(\"null\") || defaultWDLValue.equals(\"\\\"\\\"\") || defaultWDLValue.equals(\"[]\")) {\n-            if (isRequired) {\n-                if (wdlType.startsWith(\"Array\")) {\n-                    // we use two values to accommodate tools that take positional args, such as CompareSams that\n-                    // require more than one arg\n-                    return String.format(\"[\\\"%s\\\", \\\"%s\\\"]\", getDefaultValueForType(argDef), getDefaultValueForType(argDef));\n-                } else {\n-                    return \"\\\"\" + getDefaultValueForType(argDef) + \"\\\"\";\n-                }\n-            } else {\n-                return \"null\";\n-            }\n-        } else if (defaultWDLValue.startsWith(\"[\")) {\n-            // for required arrays, we need to provide SOME value in the array\n-            if (isRequired) {\n-                return defaultWDLValue;\n-            } else {\n-                return \"null\";\n-            }\n-        } else if (wdlType.equals(\"Float\")) {\n-            if (defaultWDLValue.equals(\"Infinity\") || defaultWDLValue.equals(\"Nan\")) {\n-                // JSON does not recognize \"Infinity\" or \"Nan\" as valid float values (!), so we\n-                // need to treat them as String values\n-                return \"\\\"\" + defaultWDLValue + \"\\\"\";\n-            }\n-        }\n-        return defaultWDLValue;\n-    }\n-\n-    /**\n-     * Return a value that will satisfy the constructor for argDef's underlying class.\n-     * @param argDef\n-     * @return a value that will satisfy the constructor for argDef's underlying class.\n-     */\n-    protected String getDefaultValueForType(final ArgumentDefinition argDef) {\n-        final Class<?> clazz = argDef.getUnderlyingFieldClass();\n-        if (clazz.isEnum()) {\n-            // any enum constant for this enum will do\n-            return argDef.getUnderlyingFieldClass().getEnumConstants()[0].toString();\n+            return \"[\\\"\" + ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName + \"\\\"]\";\n+        } else if (defaultValue.equals(\"null\")) {\n+            return \"\\\"\\\"\";\n+        } else if (defaultValue.equals(\"\\\"\\\"\")) {\n+            return defaultValue;\n+        } else if (defaultValue.equals(\"[]\")) {\n+            return defaultValue;\n+        } else if (defaultValue.startsWith(\"Array\")) {\n+            return defaultValue;\n         } else {\n-            // get a value that is formatted appropriately by calling toString() on the value\n-            // on the underlying object if its not null, otherwise return a synthetic string\n-            // suitable for the underlying type\n-            final Object fieldDefaultValue = argDef.getArgumentValue();\n-            if (fieldDefaultValue != null && !fieldDefaultValue.toString().equals(\"[]\")) {\n-                return fieldDefaultValue.toString();\n-            } else if (clazz.isAssignableFrom(Boolean.class) ||\n-                    clazz.isAssignableFrom(boolean.class)) {\n-                return \"true\";\n-            } else if (clazz.isAssignableFrom(Float.class) ||\n-                    clazz.isAssignableFrom(float.class) ||\n-                    clazz.isAssignableFrom(Double.class) ||\n-                    clazz.isAssignableFrom(double.class)) {\n-                return \"0.0\";\n-            } else if (clazz.isAssignableFrom(Integer.class) ||\n-                    clazz.isAssignableFrom(int.class) ||\n-                    clazz.isAssignableFrom(Long.class) ||\n-                    clazz.isAssignableFrom(long.class)) {\n-                return \"1\";\n-            } else {\n-                // give up and return a String with a synthetic value\n-                return \"syntheticTestValue\";\n-            }\n+            return \"\\\"\" + defaultValue + \"\\\"\";\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTQxOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485085419", "bodyText": "Is it possible to use our createTempFile() method that automatically sets the file to be deleted on exit, and writes to the temp dir instead of the build dir?", "author": "droazen", "createdAt": "2020-09-08T17:31:41Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     *\n+     * @param longName the long name for this arg\n+     * @param argDef the ArgumentDefinition for this arg\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultValue the default value for the argument for which an input value is required\n+     * @param defaultWDLValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n+    protected String testValueAsJSON(\n+            final String longName,\n+            final ArgumentDefinition argDef,\n+            final String wdlType,\n+            final String defaultWDLValue) {\n+        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n+        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n+        final boolean isRequired =\n+                (argumentAnnotation != null && !argumentAnnotation.optional())\n+                || positionalAnnotation != null;\n+        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxMDA0Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485710043", "bodyText": "I updated build.gradle to clean up the outputs (including the cromwell output folders, as well as the dummy test file). Dynamically creating a temporary output directory would complicate things a bit because both (this) Java code and gradle validation code need to agree on the name. It could be done, but I've tested the cleanup I added and it seems to work. See what you think.  I expect the validation will mostly only be run on travis anyway.", "author": "cmnbroad", "createdAt": "2020-09-09T15:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\nindex 762daa4e1..ea66daa31 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n\n@@ -143,126 +135,42 @@ public class GATKWDLWorkUnitHandler extends WDLWorkUnitHandler {\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n+        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n-            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n-                    testValueAsJSON(\n-                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n-                            clp.getPositionalArgumentDefinition(),\n-                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n-                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n+            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n+            final String argType = (String) positionalArgs.get(\"type\");\n+            positionalArgs.put(\"testValue\",\n+                    getInputValueForTest(\n+                            argType,\n+                            (String) positionalArgs.get(\"defaultValue\"))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs.\n-     *\n-     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n-     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n-     *\n-     * @param longName the long name for this arg\n-     * @param argDef the ArgumentDefinition for this arg\n+     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n+     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n+     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultWDLValue the default value for the argument for which an input value is required\n+     * @param defaultValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String testValueAsJSON(\n-            final String longName,\n-            final ArgumentDefinition argDef,\n-            final String wdlType,\n-            final String defaultWDLValue) {\n-        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n-        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n-        final boolean isRequired =\n-                (argumentAnnotation != null && !argumentAnnotation.optional())\n-                || positionalAnnotation != null;\n-        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;\n-\n-        // Hack to resolve the mutex argument in GATKSparkTool; otherwise all spark tools will fail since all\n-        // mutex args will have a value\n-        if (longName.equals(GATKSparkTool.OUTPUT_SHARD_DIR_LONG_NAME)) {\n-            return \"null\";\n-        }\n-\n-        // first check the wdl type; for File we always want to use the name of the dummy file that is created by\n-        // the test process that is used to ensure localization is handled correctly\n+    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n         if (wdlType.equals(\"File\")) {\n-            if (isRequired) {\n-                return \"\\\"\" + dummyWDLTestFile + \"\\\"\";\n-            } else {\n-                return \"null\";\n-            }\n+            return \"\\\"\" + ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName + \"\\\"\";\n         } else if (wdlType.equals(\"Array[File]\")) {\n-            return String.format(\"[\\\"%s\\\", \\\"%s\\\"]\", dummyWDLTestFile, dummyWDLTestFile);\n-        }\n-\n-        // for other (non-File) types, use the default value and arg def to synthesize a value\n-        if (defaultWDLValue.equals(\"null\") || defaultWDLValue.equals(\"\\\"\\\"\") || defaultWDLValue.equals(\"[]\")) {\n-            if (isRequired) {\n-                if (wdlType.startsWith(\"Array\")) {\n-                    // we use two values to accommodate tools that take positional args, such as CompareSams that\n-                    // require more than one arg\n-                    return String.format(\"[\\\"%s\\\", \\\"%s\\\"]\", getDefaultValueForType(argDef), getDefaultValueForType(argDef));\n-                } else {\n-                    return \"\\\"\" + getDefaultValueForType(argDef) + \"\\\"\";\n-                }\n-            } else {\n-                return \"null\";\n-            }\n-        } else if (defaultWDLValue.startsWith(\"[\")) {\n-            // for required arrays, we need to provide SOME value in the array\n-            if (isRequired) {\n-                return defaultWDLValue;\n-            } else {\n-                return \"null\";\n-            }\n-        } else if (wdlType.equals(\"Float\")) {\n-            if (defaultWDLValue.equals(\"Infinity\") || defaultWDLValue.equals(\"Nan\")) {\n-                // JSON does not recognize \"Infinity\" or \"Nan\" as valid float values (!), so we\n-                // need to treat them as String values\n-                return \"\\\"\" + defaultWDLValue + \"\\\"\";\n-            }\n-        }\n-        return defaultWDLValue;\n-    }\n-\n-    /**\n-     * Return a value that will satisfy the constructor for argDef's underlying class.\n-     * @param argDef\n-     * @return a value that will satisfy the constructor for argDef's underlying class.\n-     */\n-    protected String getDefaultValueForType(final ArgumentDefinition argDef) {\n-        final Class<?> clazz = argDef.getUnderlyingFieldClass();\n-        if (clazz.isEnum()) {\n-            // any enum constant for this enum will do\n-            return argDef.getUnderlyingFieldClass().getEnumConstants()[0].toString();\n+            return \"[\\\"\" + ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName + \"\\\"]\";\n+        } else if (defaultValue.equals(\"null\")) {\n+            return \"\\\"\\\"\";\n+        } else if (defaultValue.equals(\"\\\"\\\"\")) {\n+            return defaultValue;\n+        } else if (defaultValue.equals(\"[]\")) {\n+            return defaultValue;\n+        } else if (defaultValue.startsWith(\"Array\")) {\n+            return defaultValue;\n         } else {\n-            // get a value that is formatted appropriately by calling toString() on the value\n-            // on the underlying object if its not null, otherwise return a synthetic string\n-            // suitable for the underlying type\n-            final Object fieldDefaultValue = argDef.getArgumentValue();\n-            if (fieldDefaultValue != null && !fieldDefaultValue.toString().equals(\"[]\")) {\n-                return fieldDefaultValue.toString();\n-            } else if (clazz.isAssignableFrom(Boolean.class) ||\n-                    clazz.isAssignableFrom(boolean.class)) {\n-                return \"true\";\n-            } else if (clazz.isAssignableFrom(Float.class) ||\n-                    clazz.isAssignableFrom(float.class) ||\n-                    clazz.isAssignableFrom(Double.class) ||\n-                    clazz.isAssignableFrom(double.class)) {\n-                return \"0.0\";\n-            } else if (clazz.isAssignableFrom(Integer.class) ||\n-                    clazz.isAssignableFrom(int.class) ||\n-                    clazz.isAssignableFrom(Long.class) ||\n-                    clazz.isAssignableFrom(long.class)) {\n-                return \"1\";\n-            } else {\n-                // give up and return a String with a synthetic value\n-                return \"syntheticTestValue\";\n-            }\n+            return \"\\\"\" + defaultValue + \"\\\"\";\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTkzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485085935", "bodyText": "Can you explain more precisely what the problem is here, and how we can avoid triggering it in other tools?", "author": "droazen", "createdAt": "2020-09-08T17:32:41Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     *\n+     * @param longName the long name for this arg\n+     * @param argDef the ArgumentDefinition for this arg\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultValue the default value for the argument for which an input value is required\n+     * @param defaultWDLValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n+    protected String testValueAsJSON(\n+            final String longName,\n+            final ArgumentDefinition argDef,\n+            final String wdlType,\n+            final String defaultWDLValue) {\n+        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n+        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n+        final boolean isRequired =\n+                (argumentAnnotation != null && !argumentAnnotation.optional())\n+                || positionalAnnotation != null;\n+        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;\n+\n+        // Hack to resolve the mutex argument in GATKSparkTool; otherwise all spark tools will fail since all\n+        // mutex args will have a value", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2ODQ5Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485868492", "bodyText": "This is strictly to accommodate a limitation in the automated tests, specifically the test-value generation code, not something fundamental about the actual WDL or the tools. The test data generation code isn't mutex-arg-aware, so it will generate and populate test values for all of the args in a mutex group, which will fail when run. This line of code is a special case to accommodate the one mutex arg that is in all Spark tools to allow those WDLs to run. There should be a more general-purpose solution though. Ticket to resolve this is #6805.", "author": "cmnbroad", "createdAt": "2020-09-09T19:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\nindex 762daa4e1..ea66daa31 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n\n@@ -143,126 +135,42 @@ public class GATKWDLWorkUnitHandler extends WDLWorkUnitHandler {\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n+        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n-            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n-                    testValueAsJSON(\n-                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n-                            clp.getPositionalArgumentDefinition(),\n-                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n-                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n+            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n+            final String argType = (String) positionalArgs.get(\"type\");\n+            positionalArgs.put(\"testValue\",\n+                    getInputValueForTest(\n+                            argType,\n+                            (String) positionalArgs.get(\"defaultValue\"))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs.\n-     *\n-     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n-     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n-     *\n-     * @param longName the long name for this arg\n-     * @param argDef the ArgumentDefinition for this arg\n+     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n+     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n+     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultWDLValue the default value for the argument for which an input value is required\n+     * @param defaultValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String testValueAsJSON(\n-            final String longName,\n-            final ArgumentDefinition argDef,\n-            final String wdlType,\n-            final String defaultWDLValue) {\n-        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n-        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n-        final boolean isRequired =\n-                (argumentAnnotation != null && !argumentAnnotation.optional())\n-                || positionalAnnotation != null;\n-        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;\n-\n-        // Hack to resolve the mutex argument in GATKSparkTool; otherwise all spark tools will fail since all\n-        // mutex args will have a value\n-        if (longName.equals(GATKSparkTool.OUTPUT_SHARD_DIR_LONG_NAME)) {\n-            return \"null\";\n-        }\n-\n-        // first check the wdl type; for File we always want to use the name of the dummy file that is created by\n-        // the test process that is used to ensure localization is handled correctly\n+    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n         if (wdlType.equals(\"File\")) {\n-            if (isRequired) {\n-                return \"\\\"\" + dummyWDLTestFile + \"\\\"\";\n-            } else {\n-                return \"null\";\n-            }\n+            return \"\\\"\" + ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName + \"\\\"\";\n         } else if (wdlType.equals(\"Array[File]\")) {\n-            return String.format(\"[\\\"%s\\\", \\\"%s\\\"]\", dummyWDLTestFile, dummyWDLTestFile);\n-        }\n-\n-        // for other (non-File) types, use the default value and arg def to synthesize a value\n-        if (defaultWDLValue.equals(\"null\") || defaultWDLValue.equals(\"\\\"\\\"\") || defaultWDLValue.equals(\"[]\")) {\n-            if (isRequired) {\n-                if (wdlType.startsWith(\"Array\")) {\n-                    // we use two values to accommodate tools that take positional args, such as CompareSams that\n-                    // require more than one arg\n-                    return String.format(\"[\\\"%s\\\", \\\"%s\\\"]\", getDefaultValueForType(argDef), getDefaultValueForType(argDef));\n-                } else {\n-                    return \"\\\"\" + getDefaultValueForType(argDef) + \"\\\"\";\n-                }\n-            } else {\n-                return \"null\";\n-            }\n-        } else if (defaultWDLValue.startsWith(\"[\")) {\n-            // for required arrays, we need to provide SOME value in the array\n-            if (isRequired) {\n-                return defaultWDLValue;\n-            } else {\n-                return \"null\";\n-            }\n-        } else if (wdlType.equals(\"Float\")) {\n-            if (defaultWDLValue.equals(\"Infinity\") || defaultWDLValue.equals(\"Nan\")) {\n-                // JSON does not recognize \"Infinity\" or \"Nan\" as valid float values (!), so we\n-                // need to treat them as String values\n-                return \"\\\"\" + defaultWDLValue + \"\\\"\";\n-            }\n-        }\n-        return defaultWDLValue;\n-    }\n-\n-    /**\n-     * Return a value that will satisfy the constructor for argDef's underlying class.\n-     * @param argDef\n-     * @return a value that will satisfy the constructor for argDef's underlying class.\n-     */\n-    protected String getDefaultValueForType(final ArgumentDefinition argDef) {\n-        final Class<?> clazz = argDef.getUnderlyingFieldClass();\n-        if (clazz.isEnum()) {\n-            // any enum constant for this enum will do\n-            return argDef.getUnderlyingFieldClass().getEnumConstants()[0].toString();\n+            return \"[\\\"\" + ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName + \"\\\"]\";\n+        } else if (defaultValue.equals(\"null\")) {\n+            return \"\\\"\\\"\";\n+        } else if (defaultValue.equals(\"\\\"\\\"\")) {\n+            return defaultValue;\n+        } else if (defaultValue.equals(\"[]\")) {\n+            return defaultValue;\n+        } else if (defaultValue.startsWith(\"Array\")) {\n+            return defaultValue;\n         } else {\n-            // get a value that is formatted appropriately by calling toString() on the value\n-            // on the underlying object if its not null, otherwise return a synthetic string\n-            // suitable for the underlying type\n-            final Object fieldDefaultValue = argDef.getArgumentValue();\n-            if (fieldDefaultValue != null && !fieldDefaultValue.toString().equals(\"[]\")) {\n-                return fieldDefaultValue.toString();\n-            } else if (clazz.isAssignableFrom(Boolean.class) ||\n-                    clazz.isAssignableFrom(boolean.class)) {\n-                return \"true\";\n-            } else if (clazz.isAssignableFrom(Float.class) ||\n-                    clazz.isAssignableFrom(float.class) ||\n-                    clazz.isAssignableFrom(Double.class) ||\n-                    clazz.isAssignableFrom(double.class)) {\n-                return \"0.0\";\n-            } else if (clazz.isAssignableFrom(Integer.class) ||\n-                    clazz.isAssignableFrom(int.class) ||\n-                    clazz.isAssignableFrom(Long.class) ||\n-                    clazz.isAssignableFrom(long.class)) {\n-                return \"1\";\n-            } else {\n-                // give up and return a String with a synthetic value\n-                return \"syntheticTestValue\";\n-            }\n+            return \"\\\"\" + defaultValue + \"\\\"\";\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4ODg1NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485088855", "bodyText": "How did this test work before with no space between -R and the reference file?", "author": "droazen", "createdAt": "2020-09-08T17:38:06Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/rnaseq/SplitNCigarReadsIntegrationTest.java", "diffHunk": "@@ -59,7 +59,7 @@ public void testSplitsFixNDN() throws Exception {\n     @Test //regression test for https://github.com/broadinstitute/gatk/pull/1853\n     public void testSplitsOfUnpairedAndUnmappedReads() throws Exception {\n         IntegrationTestSpec spec = new IntegrationTestSpec(\n-                \"-R\" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +\n+                \"-R \" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MDY5MA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485160690", "bodyText": "The jopt parser's option clustering code accepted -Rhuman_g1k_v37.20.21.fasta as -R human_g1k_v37.20.21.fasta, but only because it couldn't peel off any more options (a different reference file might have failed). But we disabled option clustering in Barclay 4.0 because it could manifest weird errors, so this will no longer succeed.", "author": "cmnbroad", "createdAt": "2020-09-08T19:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4ODg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "052483961336c82975ebf7f974c1b948664b48bf", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/rnaseq/SplitNCigarReadsIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/rnaseq/SplitNCigarReadsIntegrationTest.java\nindex 162620fb3..00d0be0c5 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/rnaseq/SplitNCigarReadsIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/rnaseq/SplitNCigarReadsIntegrationTest.java\n\n@@ -59,7 +59,7 @@ public final class SplitNCigarReadsIntegrationTest extends CommandLineProgramTes\n     @Test //regression test for https://github.com/broadinstitute/gatk/pull/1853\n     public void testSplitsOfUnpairedAndUnmappedReads() throws Exception {\n         IntegrationTestSpec spec = new IntegrationTestSpec(\n-                \"-R \" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +\n+                \"-R\" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +\n                         \"-skip-mq-transform\", //this is TopHat data so a 255 does actually mean the MQ is unavailable\n                 Arrays.asList(largeFileTestDir + \"expected.K-562.splitNCigarReads.chr20.bam\"));\n         spec.executeTest(\"regression test for unmapped and unpaired reads\", this);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDY4MA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485090680", "bodyText": "Can you include at least one @WorkflowInput / @WorkflowOutput in this test class that does not have any companion files?", "author": "droazen", "createdAt": "2020-09-08T17:41:29Z", "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.PositionalArguments;\n+import org.broadinstitute.barclay.argparser.WorkflowProperties;\n+import org.broadinstitute.barclay.argparser.WorkflowInput;\n+import org.broadinstitute.barclay.argparser.WorkflowOutput;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.TestProgramGroup;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+/**\n+ * NOTE: this file needs to live in a separate package from the doc tests, otherwise all of the docs tests\n+ * will pick it up as a command line program, which will change the outputs.\n+ *\n+ * CommandLineProgram test tool for testing WDL generation. Contains various combinations of\n+ * commandline argument and workflow input/outputs with companion resources:\n+ *\n+ *  scalar/array\n+ *  file/non-file\n+ *  required/optional\n+ */\n+@CommandLineProgramProperties(\n+        summary = TestWDLTool.SUMMARY,\n+        oneLineSummary = TestWDLTool.ONE_LINE_SUMMARY,\n+        programGroup = TestProgramGroup.class)\n+@WorkflowProperties(memory =\"8G\")\n+@DocumentedFeature(groupName = TestWDLTool.GROUP_NAME)\n+public class TestWDLTool {\n+\n+    public static final String SUMMARY = \"WDL Test Tool\";\n+    public static final String ONE_LINE_SUMMARY = \"WDL Test Tool to test WDL Generation\";\n+    public static final String GROUP_NAME = \"WDL feature group name\";\n+\n+    @PositionalArguments(doc = \"Positional args doc\")\n+    @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n+    public List<File> positionalListFileInput;\n+\n+    // required Files\n+    @Argument(fullName = \"requiredScalarFileInput\",\n+            shortName = \"requiredScalarFileInput\",\n+            doc = \"requiredScalarFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInput;\n+\n+    @Argument(fullName = \"requiredListFileInput\",\n+            shortName = \"requiredListFileInput\",\n+            doc = \"requiredListFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0OTEzNg==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485849136", "bodyText": "Done.", "author": "cmnbroad", "createdAt": "2020-09-09T19:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java b/src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java\nindex d10617c3b..54cc90fac 100644\n--- a/src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java\n+++ b/src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java\n\n@@ -39,64 +39,203 @@ public class TestWDLTool {\n     @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n     public List<File> positionalListFileInput;\n \n-    // required Files\n-    @Argument(fullName = \"requiredScalarFileInput\",\n-            shortName = \"requiredScalarFileInput\",\n-            doc = \"requiredScalarFileInput doc\",\n+    // required input Files\n+\n+    @Argument(fullName = \"requiredScalarFileInputNoCompanions\",\n+            shortName = \"requiredScalarFileInputNoCompanions\",\n+            doc = \"requiredScalarFileInputNoCompanions doc\",\n+            optional = false)\n+    @WorkflowInput\n+    public File requiredScalarFileInputNoCompanions;\n+\n+    @Argument(fullName = \"requiredScalarFileInputRequiredCompanions\",\n+            shortName = \"requiredScalarFileInputRequiredCompanions\",\n+            doc = \"requiredScalarFileInputRequiredCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputRequiredCompanionsDictionary\", \"requiredScalarFileInputRequiredCompanionsIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInputRequiredCompanions;\n+\n+    @Argument(fullName = \"requiredScalarFileInputOptionalCompanions\",\n+            shortName = \"requiredScalarFileInputOptionalCompanions\",\n+            doc = \"requiredScalarFileInputOptionalCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(optionalCompanions={\"requiredScalarFileInputOptionalCompanionsDictionary\", \"requiredScalarFileInputOptionalCompanionsIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInputOptionalCompanions;\n+\n+    @Argument(fullName = \"requiredListFileInputNoCompanions\",\n+            shortName = \"requiredListFileInputNoCompanions\",\n+            doc = \"requiredListFileInputNoCompanions doc\",\n+            optional = false)\n+    @WorkflowInput\n+    public List<File> requiredListFileInputNoCompanions;\n+\n+    @Argument(fullName = \"requiredListFileInputRequiredCompanions\",\n+            shortName = \"requiredListFileInputRequiredCompanions\",\n+            doc = \"requiredListFileInputRequiredCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputRequiredCompanionsDictionary\", \"requiredListFileInputRequiredCompanionsIndex\"}, localizationOptional = true)\n+    public List<File> requiredListFileInputRequiredCompanions;\n+\n+    @Argument(fullName = \"requiredListFileInputOptionalCompanions\",\n+            shortName = \"requiredListFileInputOptionalCompanions\",\n+            doc = \"requiredListFileInputOptionalCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(optionalCompanions={\"requiredListFileInputOptionalCompanionsDictionary\", \"requiredListFileInputOptionalCompanionsIndex\"}, localizationOptional = true)\n+    public List<File> requiredListFileInputOptionalCompanions;\n+\n+    @Argument(fullName = \"requiredListFileInputMixedCompanions\",\n+            shortName = \"requiredListFileInputMixedCompanions\",\n+            doc = \"requiredListFileInputMixedCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(\n+            requiredCompanions = {\"requiredListFileInputMixedCompanionsRequired\"},\n+            optionalCompanions = {\"requiredListFileInputMixedCompanionsOptional\"})\n+    public List<File> requiredListFileInputMixedCompanions;\n+\n+    // required output Files\n+\n+    @Argument(fullName = \"requiredScalarFileOutputNoCompanions\",\n+            shortName = \"requiredScalarFileOutputNoCompanions\",\n+            doc = \"requiredScalarFileOutputNoCompanions doc\",\n+            optional = false)\n+    @WorkflowOutput\n+    public File requiredScalarFileOutputNoCompanions;\n+\n+    @Argument(fullName = \"requiredScalarFileOutputRequiredCompanions\",\n+            shortName = \"requiredScalarFileOutputRequiredCompanions\",\n+            doc = \"requiredScalarFileOutputRequiredCompanions doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredScalarFileOutputRequiredCompanionsDictionary\", \"requiredScalarFileOutputRequiredCompanionsIndex\"})\n+    public File requiredScalarFileOutputRequiredCompanions;\n+\n+    @Argument(fullName = \"requiredScalarFileOutputOptionalCompanions\",\n+            shortName = \"requiredScalarFileOutputOptionalCompanions\",\n+            doc = \"requiredScalarFileOutputOptionalCompanions doc\",\n             optional = false)\n-    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n-    public File requiredScalarFileInput;\n+    @WorkflowOutput(optionalCompanions={\"requiredScalarFileOutputOptionalCompanionsDictionary\", \"requiredScalarFileOutputOptionalCompanionsIndex\"})\n+    public File requiredScalarFileOutputOptionalCompanions;\n \n-    @Argument(fullName = \"requiredListFileInput\",\n-            shortName = \"requiredListFileInput\",\n-            doc = \"requiredListFileInput doc\",\n+    @Argument(fullName = \"requiredListFileOutputNoCompanions\",\n+            shortName = \"requiredListFileOutputNoCompanions\",\n+            doc = \"requiredListFileOutputNoCompanions doc\",\n             optional = false)\n-    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)\n-    public List<File> requiredListFileInput;\n+    @WorkflowOutput\n+    public List<File> requiredListFileOutputNoCompanions;\n \n-    @Argument(fullName = \"requiredScalarFileOutput\",\n-            shortName = \"requiredScalarFileOutput\",\n-            doc = \"requiredScalarFileOutput doc\",\n+    @Argument(fullName = \"requiredListFileOutputRequiredCompanions\",\n+            shortName = \"requiredListFileOutputRequiredCompanions\",\n+            doc = \"requiredListFileOutputRequiredCompanions doc\",\n             optional = false)\n-    @WorkflowOutput(requiredCompanions={\"requiredScalarFileOutputDictionary\", \"requiredScalarFileOutputIndex\"})\n-    public File requiredScalarFileOutput;\n+    @WorkflowOutput(requiredCompanions={\"requiredListFileOutputRequiredCompanionsDictionary\", \"requiredListFileOutputRequiredCompanionsIndex\"})\n+    public List<File> requiredListFileOutputRequiredCompanions;\n \n-    @Argument(fullName = \"requiredListFileOutput\",\n-            shortName = \"requiredListFileOutput\",\n-            doc = \"requiredListFileOutput doc\",\n+    @Argument(fullName = \"requiredListFileOutputOptionalCompanions\",\n+            shortName = \"requiredListFileOutputOptionalCompanions\",\n+            doc = \"requiredListFileOutputOptionalCompanions doc\",\n             optional = false)\n-    @WorkflowOutput(requiredCompanions={\"requiredListFileOutputDictionary\", \"requiredListFileOutputIndex\"})\n-    public List<File> requiredListFileOutput;\n+    @WorkflowOutput(optionalCompanions={\"requiredListFileOutputOptionalCompanionsDictionary\", \"requiredListFileOutputOptionalCompanionsIndex\"})\n+    public List<File> requiredListFileOutputOptionalCompanions;\n \n+    @Argument(fullName = \"requiredListFileOutputMixedCompanions\",\n+            shortName = \"requiredListFileOutputMixedCompanions\",\n+            doc = \"requiredListFileOutputMixedCompanions doc\",\n+            optional = false)\n+    @WorkflowOutput(\n+            requiredCompanions = {\"requiredListFileOutputMixedCompanionsRequired\"},\n+            optionalCompanions = {\"requiredListFileOutputMixedCompanionsOptional\"})\n+    public List<File> requiredListFileOutputMixedCompanions;\n+\n+    // optional input Files\n+\n+    @Argument(fullName = \"optionalScalarFileInputNoCompanions\",\n+            shortName = \"optionalScalarFileInputNoCompanions\",\n+            doc = \"optionalScalarFileInputNoCompanions doc\",\n+            optional = true)\n+    @WorkflowInput\n+    public File optionalScalarFileInputNoCompanions;\n+\n+    @Argument(fullName = \"optionalScalarFileInputOptionalCompanions\",\n+            shortName = \"optionalScalarFileInputOptionalCompanions\",\n+            doc = \"optionalScalarFileInputOptionalCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(optionalCompanions={\"optionalScalarFileInputOptionalCompanionsDictionary\", \"optionalScalarFileInputOptionalCompanionsIndex\"})\n+    public File optionalScalarFileInputOptionalCompanions;\n+\n+    @Argument(fullName = \"optionalScalarFileInputRequiredCompanions\",\n+            shortName = \"optionalScalarFileInputRequiredCompanions\",\n+            doc = \"optionalScalarFileInputRequiredCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalScalarFileInputRequiredCompanionsDictionary\", \"optionalScalarFileInputRequiredCompanionsIndex\"})\n+    public File optionalScalarFileInputRequiredCompanions;\n+\n+    @Argument(fullName = \"optionalListFileInputNoCompanions\",\n+            shortName = \"optionalListFileInputNoCompanions\",\n+            doc = \"optionalListFileInputNoCompanions doc\",\n+            optional = true)\n+    @WorkflowInput\n+    public List<File> optionalListFileInputNoCompanions;\n+\n+    @Argument(fullName = \"optionalListFileInputRequiredCompanions\",\n+            shortName = \"optionalListFileInputRequiredCompanions\",\n+            doc = \"optionalListFileInputRequiredCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalListFileInputRequiredCompanionsDictionary\", \"optionalListFileInputRequiredCompanionsIndex\"})\n+    public List<File> optionalListFileInputRequiredCompanions;\n+\n+    @Argument(fullName = \"optionalListFileInputOptionalCompanions\",\n+            shortName = \"optionalListFileInputOptionalCompanions\",\n+            doc = \"optionalListFileInputOptionalCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(optionalCompanions={\"optionalListFileInputOptionalCompanionsDictionary\", \"optionalListFileInputOptionalCompanionsIndex\"})\n+    public List<File> optionalListFileInputOptionalCompanions;\n+\n+    @Argument(fullName = \"optionalListFileInputMixedCompanions\",\n+            shortName = \"optionalListFileInputMixedCompanions\",\n+            doc = \"optionalListFileInputMixedCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(\n+            requiredCompanions = {\"optionalListFileInputMixedCompanionsRequired\"},\n+            optionalCompanions = {\"optionalListFileInputMixedCompanionsOptional\"})\n+    public List<File> optionalListFileInputMixedCompanions;\n+\n+    // optional output Files\n+\n+    @Argument(fullName = \"optionalScalarFileOutputNoCompanions\",\n+            shortName = \"optionalScalarFileOutputNoCompanions\",\n+            doc = \"optionalScalarFileOutputNoCompanions doc\",\n+            optional = true)\n+    @WorkflowOutput\n+    public File optionalScalarFileOutputNoCompanions;\n \n-    // optional Files\n-    @Argument(fullName = \"optionalScalarFileInput\",\n-            shortName = \"optionalScalarFileInput\",\n-            doc = \"optionalScalarFileInput doc\",\n+    @Argument(fullName = \"optionalScalarFileOutputRequiredCompanions\",\n+            shortName = \"optionalScalarFileOutputRequiredCompanions\",\n+            doc = \"optionalScalarFileOutputRequiredCompanions doc\",\n             optional = true)\n-    @WorkflowInput(requiredCompanions={\"optionalScalarFileInputDictionary\", \"optionalScalarFileInputIndex\"})\n-    public File optionalScalarFileInput;\n+    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputRequiredCompanionsDictionary\", \"optionalScalarFileOutputRequiredCompanionsIndex\"})\n+    public File optionalScalarFileOutputRequiredCompanions;\n \n-    @Argument(fullName = \"optionalListFileInput\",\n-            shortName = \"optionalListFileInput\",\n-            doc = \"optionalListFileInput doc\",\n+    @Argument(fullName = \"optionalScalarFileOutputOptionalCompanions\",\n+            shortName = \"optionalScalarFileOutputOptionalCompanions\",\n+            doc = \"optionalScalarFileOutputOptionalCompanions doc\",\n             optional = true)\n-    @WorkflowInput(requiredCompanions={\"optionalListFileInputDictionary\", \"optionalListFileInputIndex\"})\n-    public List<File> optionalListFileInput;\n+    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputOptionalCompanionsDictionary\", \"optionalScalarFileOutputOptionalCompanionsIndex\"})\n+    public File optionalScalarFileOutputOptionalCompanions;\n \n-    @Argument(fullName = \"optionaldScalarFileOutput\",\n-            shortName = \"optionalScalarFileOutput\",\n-            doc = \"optionalScalarFileOutput doc\",\n+    @Argument(fullName = \"optionalListFileOutputRequiredCompanions\",\n+            shortName = \"optionalListFileOutputRequiredCompanions\",\n+            doc = \"optionalListFileOutputRequiredCompanions doc\",\n             optional = true)\n-    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputDictionary\", \"optionalScalarFileOutputIndex\"})\n-    public File optionalScalarFileOutput;\n+    @WorkflowOutput(requiredCompanions={\"optionalListFileOutputRequiredCompanionsDictionary\", \"optionalListFileOutputRequiredCompanionsIndex\"})\n+    public List<File> optionalListFileOutputRequiredCompanions;\n \n-    @Argument(fullName = \"optionaldListFileOutput\",\n-            shortName = \"optionalListFileOutput\",\n-            doc = \"optionalListFileOutput doc\",\n+    @Argument(fullName = \"optionalListFileOutputMixedCompanions\",\n+            shortName = \"optionalListFileOutputMixedCompanions\",\n+            doc = \"optionalListFileOutputMixedCompanions doc\",\n             optional = true)\n-    @WorkflowOutput(requiredCompanions={\"optionalListFileOutputDictionary\", \"optionalListFileOutputIndex\"})\n-    public List<File> optionalListFileOutput;\n+    @WorkflowOutput(\n+            requiredCompanions = {\"optionalListFileOutputMixedCompanionsRequired\"},\n+            optionalCompanions = {\"optionalListFileOutputMixedCompanionsOptional\"})\n+    public List<File> optionalListFileOutputMixedCompanions;\n \n     // non-File types\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDk0Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485090947", "bodyText": "No test coverage for optionalCompanions?", "author": "droazen", "createdAt": "2020-09-08T17:41:54Z", "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.PositionalArguments;\n+import org.broadinstitute.barclay.argparser.WorkflowProperties;\n+import org.broadinstitute.barclay.argparser.WorkflowInput;\n+import org.broadinstitute.barclay.argparser.WorkflowOutput;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.TestProgramGroup;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+/**\n+ * NOTE: this file needs to live in a separate package from the doc tests, otherwise all of the docs tests\n+ * will pick it up as a command line program, which will change the outputs.\n+ *\n+ * CommandLineProgram test tool for testing WDL generation. Contains various combinations of\n+ * commandline argument and workflow input/outputs with companion resources:\n+ *\n+ *  scalar/array\n+ *  file/non-file\n+ *  required/optional\n+ */\n+@CommandLineProgramProperties(\n+        summary = TestWDLTool.SUMMARY,\n+        oneLineSummary = TestWDLTool.ONE_LINE_SUMMARY,\n+        programGroup = TestProgramGroup.class)\n+@WorkflowProperties(memory =\"8G\")\n+@DocumentedFeature(groupName = TestWDLTool.GROUP_NAME)\n+public class TestWDLTool {\n+\n+    public static final String SUMMARY = \"WDL Test Tool\";\n+    public static final String ONE_LINE_SUMMARY = \"WDL Test Tool to test WDL Generation\";\n+    public static final String GROUP_NAME = \"WDL feature group name\";\n+\n+    @PositionalArguments(doc = \"Positional args doc\")\n+    @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n+    public List<File> positionalListFileInput;\n+\n+    // required Files\n+    @Argument(fullName = \"requiredScalarFileInput\",\n+            shortName = \"requiredScalarFileInput\",\n+            doc = \"requiredScalarFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInput;\n+\n+    @Argument(fullName = \"requiredListFileInput\",\n+            shortName = \"requiredListFileInput\",\n+            doc = \"requiredListFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)\n+    public List<File> requiredListFileInput;\n+\n+    @Argument(fullName = \"requiredScalarFileOutput\",\n+            shortName = \"requiredScalarFileOutput\",\n+            doc = \"requiredScalarFileOutput doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredScalarFileOutputDictionary\", \"requiredScalarFileOutputIndex\"})\n+    public File requiredScalarFileOutput;\n+\n+    @Argument(fullName = \"requiredListFileOutput\",\n+            shortName = \"requiredListFileOutput\",\n+            doc = \"requiredListFileOutput doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredListFileOutputDictionary\", \"requiredListFileOutputIndex\"})\n+    public List<File> requiredListFileOutput;\n+\n+\n+    // optional Files\n+    @Argument(fullName = \"optionalScalarFileInput\",\n+            shortName = \"optionalScalarFileInput\",\n+            doc = \"optionalScalarFileInput doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalScalarFileInputDictionary\", \"optionalScalarFileInputIndex\"})\n+    public File optionalScalarFileInput;\n+\n+    @Argument(fullName = \"optionalListFileInput\",\n+            shortName = \"optionalListFileInput\",\n+            doc = \"optionalListFileInput doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalListFileInputDictionary\", \"optionalListFileInputIndex\"})\n+    public List<File> optionalListFileInput;\n+\n+    @Argument(fullName = \"optionaldScalarFileOutput\",\n+            shortName = \"optionalScalarFileOutput\",\n+            doc = \"optionalScalarFileOutput doc\",\n+            optional = true)\n+    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputDictionary\", \"optionalScalarFileOutputIndex\"})\n+    public File optionalScalarFileOutput;\n+\n+    @Argument(fullName = \"optionaldListFileOutput\",\n+            shortName = \"optionalListFileOutput\",\n+            doc = \"optionalListFileOutput doc\",\n+            optional = true)\n+    @WorkflowOutput(requiredCompanions={\"optionalListFileOutputDictionary\", \"optionalListFileOutputIndex\"})", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0OTQ1OA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485849458", "bodyText": "Oh wow - done. I also added some mixed companions cases.", "author": "cmnbroad", "createdAt": "2020-09-09T19:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java b/src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java\nindex d10617c3b..54cc90fac 100644\n--- a/src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java\n+++ b/src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java\n\n@@ -39,64 +39,203 @@ public class TestWDLTool {\n     @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n     public List<File> positionalListFileInput;\n \n-    // required Files\n-    @Argument(fullName = \"requiredScalarFileInput\",\n-            shortName = \"requiredScalarFileInput\",\n-            doc = \"requiredScalarFileInput doc\",\n+    // required input Files\n+\n+    @Argument(fullName = \"requiredScalarFileInputNoCompanions\",\n+            shortName = \"requiredScalarFileInputNoCompanions\",\n+            doc = \"requiredScalarFileInputNoCompanions doc\",\n+            optional = false)\n+    @WorkflowInput\n+    public File requiredScalarFileInputNoCompanions;\n+\n+    @Argument(fullName = \"requiredScalarFileInputRequiredCompanions\",\n+            shortName = \"requiredScalarFileInputRequiredCompanions\",\n+            doc = \"requiredScalarFileInputRequiredCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputRequiredCompanionsDictionary\", \"requiredScalarFileInputRequiredCompanionsIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInputRequiredCompanions;\n+\n+    @Argument(fullName = \"requiredScalarFileInputOptionalCompanions\",\n+            shortName = \"requiredScalarFileInputOptionalCompanions\",\n+            doc = \"requiredScalarFileInputOptionalCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(optionalCompanions={\"requiredScalarFileInputOptionalCompanionsDictionary\", \"requiredScalarFileInputOptionalCompanionsIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInputOptionalCompanions;\n+\n+    @Argument(fullName = \"requiredListFileInputNoCompanions\",\n+            shortName = \"requiredListFileInputNoCompanions\",\n+            doc = \"requiredListFileInputNoCompanions doc\",\n+            optional = false)\n+    @WorkflowInput\n+    public List<File> requiredListFileInputNoCompanions;\n+\n+    @Argument(fullName = \"requiredListFileInputRequiredCompanions\",\n+            shortName = \"requiredListFileInputRequiredCompanions\",\n+            doc = \"requiredListFileInputRequiredCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputRequiredCompanionsDictionary\", \"requiredListFileInputRequiredCompanionsIndex\"}, localizationOptional = true)\n+    public List<File> requiredListFileInputRequiredCompanions;\n+\n+    @Argument(fullName = \"requiredListFileInputOptionalCompanions\",\n+            shortName = \"requiredListFileInputOptionalCompanions\",\n+            doc = \"requiredListFileInputOptionalCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(optionalCompanions={\"requiredListFileInputOptionalCompanionsDictionary\", \"requiredListFileInputOptionalCompanionsIndex\"}, localizationOptional = true)\n+    public List<File> requiredListFileInputOptionalCompanions;\n+\n+    @Argument(fullName = \"requiredListFileInputMixedCompanions\",\n+            shortName = \"requiredListFileInputMixedCompanions\",\n+            doc = \"requiredListFileInputMixedCompanions doc\",\n+            optional = false)\n+    @WorkflowInput(\n+            requiredCompanions = {\"requiredListFileInputMixedCompanionsRequired\"},\n+            optionalCompanions = {\"requiredListFileInputMixedCompanionsOptional\"})\n+    public List<File> requiredListFileInputMixedCompanions;\n+\n+    // required output Files\n+\n+    @Argument(fullName = \"requiredScalarFileOutputNoCompanions\",\n+            shortName = \"requiredScalarFileOutputNoCompanions\",\n+            doc = \"requiredScalarFileOutputNoCompanions doc\",\n+            optional = false)\n+    @WorkflowOutput\n+    public File requiredScalarFileOutputNoCompanions;\n+\n+    @Argument(fullName = \"requiredScalarFileOutputRequiredCompanions\",\n+            shortName = \"requiredScalarFileOutputRequiredCompanions\",\n+            doc = \"requiredScalarFileOutputRequiredCompanions doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredScalarFileOutputRequiredCompanionsDictionary\", \"requiredScalarFileOutputRequiredCompanionsIndex\"})\n+    public File requiredScalarFileOutputRequiredCompanions;\n+\n+    @Argument(fullName = \"requiredScalarFileOutputOptionalCompanions\",\n+            shortName = \"requiredScalarFileOutputOptionalCompanions\",\n+            doc = \"requiredScalarFileOutputOptionalCompanions doc\",\n             optional = false)\n-    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n-    public File requiredScalarFileInput;\n+    @WorkflowOutput(optionalCompanions={\"requiredScalarFileOutputOptionalCompanionsDictionary\", \"requiredScalarFileOutputOptionalCompanionsIndex\"})\n+    public File requiredScalarFileOutputOptionalCompanions;\n \n-    @Argument(fullName = \"requiredListFileInput\",\n-            shortName = \"requiredListFileInput\",\n-            doc = \"requiredListFileInput doc\",\n+    @Argument(fullName = \"requiredListFileOutputNoCompanions\",\n+            shortName = \"requiredListFileOutputNoCompanions\",\n+            doc = \"requiredListFileOutputNoCompanions doc\",\n             optional = false)\n-    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)\n-    public List<File> requiredListFileInput;\n+    @WorkflowOutput\n+    public List<File> requiredListFileOutputNoCompanions;\n \n-    @Argument(fullName = \"requiredScalarFileOutput\",\n-            shortName = \"requiredScalarFileOutput\",\n-            doc = \"requiredScalarFileOutput doc\",\n+    @Argument(fullName = \"requiredListFileOutputRequiredCompanions\",\n+            shortName = \"requiredListFileOutputRequiredCompanions\",\n+            doc = \"requiredListFileOutputRequiredCompanions doc\",\n             optional = false)\n-    @WorkflowOutput(requiredCompanions={\"requiredScalarFileOutputDictionary\", \"requiredScalarFileOutputIndex\"})\n-    public File requiredScalarFileOutput;\n+    @WorkflowOutput(requiredCompanions={\"requiredListFileOutputRequiredCompanionsDictionary\", \"requiredListFileOutputRequiredCompanionsIndex\"})\n+    public List<File> requiredListFileOutputRequiredCompanions;\n \n-    @Argument(fullName = \"requiredListFileOutput\",\n-            shortName = \"requiredListFileOutput\",\n-            doc = \"requiredListFileOutput doc\",\n+    @Argument(fullName = \"requiredListFileOutputOptionalCompanions\",\n+            shortName = \"requiredListFileOutputOptionalCompanions\",\n+            doc = \"requiredListFileOutputOptionalCompanions doc\",\n             optional = false)\n-    @WorkflowOutput(requiredCompanions={\"requiredListFileOutputDictionary\", \"requiredListFileOutputIndex\"})\n-    public List<File> requiredListFileOutput;\n+    @WorkflowOutput(optionalCompanions={\"requiredListFileOutputOptionalCompanionsDictionary\", \"requiredListFileOutputOptionalCompanionsIndex\"})\n+    public List<File> requiredListFileOutputOptionalCompanions;\n \n+    @Argument(fullName = \"requiredListFileOutputMixedCompanions\",\n+            shortName = \"requiredListFileOutputMixedCompanions\",\n+            doc = \"requiredListFileOutputMixedCompanions doc\",\n+            optional = false)\n+    @WorkflowOutput(\n+            requiredCompanions = {\"requiredListFileOutputMixedCompanionsRequired\"},\n+            optionalCompanions = {\"requiredListFileOutputMixedCompanionsOptional\"})\n+    public List<File> requiredListFileOutputMixedCompanions;\n+\n+    // optional input Files\n+\n+    @Argument(fullName = \"optionalScalarFileInputNoCompanions\",\n+            shortName = \"optionalScalarFileInputNoCompanions\",\n+            doc = \"optionalScalarFileInputNoCompanions doc\",\n+            optional = true)\n+    @WorkflowInput\n+    public File optionalScalarFileInputNoCompanions;\n+\n+    @Argument(fullName = \"optionalScalarFileInputOptionalCompanions\",\n+            shortName = \"optionalScalarFileInputOptionalCompanions\",\n+            doc = \"optionalScalarFileInputOptionalCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(optionalCompanions={\"optionalScalarFileInputOptionalCompanionsDictionary\", \"optionalScalarFileInputOptionalCompanionsIndex\"})\n+    public File optionalScalarFileInputOptionalCompanions;\n+\n+    @Argument(fullName = \"optionalScalarFileInputRequiredCompanions\",\n+            shortName = \"optionalScalarFileInputRequiredCompanions\",\n+            doc = \"optionalScalarFileInputRequiredCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalScalarFileInputRequiredCompanionsDictionary\", \"optionalScalarFileInputRequiredCompanionsIndex\"})\n+    public File optionalScalarFileInputRequiredCompanions;\n+\n+    @Argument(fullName = \"optionalListFileInputNoCompanions\",\n+            shortName = \"optionalListFileInputNoCompanions\",\n+            doc = \"optionalListFileInputNoCompanions doc\",\n+            optional = true)\n+    @WorkflowInput\n+    public List<File> optionalListFileInputNoCompanions;\n+\n+    @Argument(fullName = \"optionalListFileInputRequiredCompanions\",\n+            shortName = \"optionalListFileInputRequiredCompanions\",\n+            doc = \"optionalListFileInputRequiredCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalListFileInputRequiredCompanionsDictionary\", \"optionalListFileInputRequiredCompanionsIndex\"})\n+    public List<File> optionalListFileInputRequiredCompanions;\n+\n+    @Argument(fullName = \"optionalListFileInputOptionalCompanions\",\n+            shortName = \"optionalListFileInputOptionalCompanions\",\n+            doc = \"optionalListFileInputOptionalCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(optionalCompanions={\"optionalListFileInputOptionalCompanionsDictionary\", \"optionalListFileInputOptionalCompanionsIndex\"})\n+    public List<File> optionalListFileInputOptionalCompanions;\n+\n+    @Argument(fullName = \"optionalListFileInputMixedCompanions\",\n+            shortName = \"optionalListFileInputMixedCompanions\",\n+            doc = \"optionalListFileInputMixedCompanions doc\",\n+            optional = true)\n+    @WorkflowInput(\n+            requiredCompanions = {\"optionalListFileInputMixedCompanionsRequired\"},\n+            optionalCompanions = {\"optionalListFileInputMixedCompanionsOptional\"})\n+    public List<File> optionalListFileInputMixedCompanions;\n+\n+    // optional output Files\n+\n+    @Argument(fullName = \"optionalScalarFileOutputNoCompanions\",\n+            shortName = \"optionalScalarFileOutputNoCompanions\",\n+            doc = \"optionalScalarFileOutputNoCompanions doc\",\n+            optional = true)\n+    @WorkflowOutput\n+    public File optionalScalarFileOutputNoCompanions;\n \n-    // optional Files\n-    @Argument(fullName = \"optionalScalarFileInput\",\n-            shortName = \"optionalScalarFileInput\",\n-            doc = \"optionalScalarFileInput doc\",\n+    @Argument(fullName = \"optionalScalarFileOutputRequiredCompanions\",\n+            shortName = \"optionalScalarFileOutputRequiredCompanions\",\n+            doc = \"optionalScalarFileOutputRequiredCompanions doc\",\n             optional = true)\n-    @WorkflowInput(requiredCompanions={\"optionalScalarFileInputDictionary\", \"optionalScalarFileInputIndex\"})\n-    public File optionalScalarFileInput;\n+    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputRequiredCompanionsDictionary\", \"optionalScalarFileOutputRequiredCompanionsIndex\"})\n+    public File optionalScalarFileOutputRequiredCompanions;\n \n-    @Argument(fullName = \"optionalListFileInput\",\n-            shortName = \"optionalListFileInput\",\n-            doc = \"optionalListFileInput doc\",\n+    @Argument(fullName = \"optionalScalarFileOutputOptionalCompanions\",\n+            shortName = \"optionalScalarFileOutputOptionalCompanions\",\n+            doc = \"optionalScalarFileOutputOptionalCompanions doc\",\n             optional = true)\n-    @WorkflowInput(requiredCompanions={\"optionalListFileInputDictionary\", \"optionalListFileInputIndex\"})\n-    public List<File> optionalListFileInput;\n+    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputOptionalCompanionsDictionary\", \"optionalScalarFileOutputOptionalCompanionsIndex\"})\n+    public File optionalScalarFileOutputOptionalCompanions;\n \n-    @Argument(fullName = \"optionaldScalarFileOutput\",\n-            shortName = \"optionalScalarFileOutput\",\n-            doc = \"optionalScalarFileOutput doc\",\n+    @Argument(fullName = \"optionalListFileOutputRequiredCompanions\",\n+            shortName = \"optionalListFileOutputRequiredCompanions\",\n+            doc = \"optionalListFileOutputRequiredCompanions doc\",\n             optional = true)\n-    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputDictionary\", \"optionalScalarFileOutputIndex\"})\n-    public File optionalScalarFileOutput;\n+    @WorkflowOutput(requiredCompanions={\"optionalListFileOutputRequiredCompanionsDictionary\", \"optionalListFileOutputRequiredCompanionsIndex\"})\n+    public List<File> optionalListFileOutputRequiredCompanions;\n \n-    @Argument(fullName = \"optionaldListFileOutput\",\n-            shortName = \"optionalListFileOutput\",\n-            doc = \"optionalListFileOutput doc\",\n+    @Argument(fullName = \"optionalListFileOutputMixedCompanions\",\n+            shortName = \"optionalListFileOutputMixedCompanions\",\n+            doc = \"optionalListFileOutputMixedCompanions doc\",\n             optional = true)\n-    @WorkflowOutput(requiredCompanions={\"optionalListFileOutputDictionary\", \"optionalListFileOutputIndex\"})\n-    public List<File> optionalListFileOutput;\n+    @WorkflowOutput(\n+            requiredCompanions = {\"optionalListFileOutputMixedCompanionsRequired\"},\n+            optionalCompanions = {\"optionalListFileOutputMixedCompanionsOptional\"})\n+    public List<File> optionalListFileOutputMixedCompanions;\n \n     // non-File types\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MjMwMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485092301", "bodyText": "private?", "author": "droazen", "createdAt": "2020-09-08T17:44:22Z", "path": "src/test/java/org/broadinstitute/hellbender/utils/help/WDLGenerationIntegrationTest.java", "diffHunk": "@@ -32,21 +38,92 @@\n         );\n     }\n \n+    @Test\n+    public void wdlGenSmokeTest() throws IOException, ParseException {\n+        final File wdlTestTargetDir = createTempDir(\"wdlgentest\");\n+        doWDLGenTest(wdlGenTestPackages, \"src/main/java\", wdlTestTargetDir);\n+\n+        // load and parse every generated JSON file to make sure they're valid JSON\n+        final File[] jsonFiles = wdlTestTargetDir.listFiles((File dir, String name) -> name.endsWith(\".json\"));\n+        for (final File f : jsonFiles) {\n+            assertValidJSONFile(f);\n+        }\n+    }\n+\n+    // This test uses a test tool with all combinations of input/output, list/scalar, across all types, including\n+    // companions, to ensure that the various templates use the template maps correctly.\n+    @Test\n+    public void wdlGenTemplateTest() throws IOException, ParseException {\n+        final File expectedResultsDir = new File(\"src/test/resources/org/broadinstitute/hellbender/utils/wdltest/\");\n+        final File wdlTestTargetDir = createTempDir(\"wdlgentemplatetest\");\n+\n+        doWDLGenTest(\n+                Collections.singletonList(\"org.broadinstitute.hellbender.utils.help\"),\n+                \"src/test/java\",\n+                wdlTestTargetDir);\n+\n+        // index\n+        final String indexHTML = \"index.html\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, indexHTML),\n+                new File(wdlTestTargetDir, indexHTML));\n+\n+        // wdls\n+        final String defaultWDL = \"TestWDLTool.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, defaultWDL),\n+                new File(wdlTestTargetDir, defaultWDL));\n+\n+        final String allArgsWDL = \"TestWDLToolAllArgs.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsWDL),\n+                new File(wdlTestTargetDir, allArgsWDL));\n+\n+        final String allArgsTestWDL = \"TestWDLToolAllArgsTest.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsTestWDL),\n+                new File(wdlTestTargetDir, allArgsTestWDL));\n+\n+        // jsons\n+        final String defaultWDLInputs = \"TestWDLToolInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, defaultWDLInputs),\n+                new File(wdlTestTargetDir, defaultWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, defaultWDLInputs));\n+\n+        final String allArgsWDLInputs = \"TestWDLToolAllArgsInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsWDLInputs),\n+                new File(wdlTestTargetDir, allArgsWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, allArgsWDLInputs));\n+\n+        final String allArgsTestWDLInputs = \"TestWDLToolAllArgsTestInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsTestWDLInputs),\n+                new File(wdlTestTargetDir, allArgsTestWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, allArgsTestWDLInputs));\n+    }\n+\n+    private void assertValidJSONFile(final File targetFile) throws IOException, ParseException {\n+        try (FileReader fileReader = new FileReader(targetFile)) {\n+            new JSONParser().parse(fileReader);\n+        }\n+    }\n+\n     // suppress deprecation warning on Java 11 since we're using deprecated javadoc APIs\n     @SuppressWarnings({\"deprecation\",\"removal\"})\n-    @Test\n-    public static void wdlGenSmokeTest() {\n-        final File wdlTestTarget = createTempDir(\"wdlgentest\");\n+    public void doWDLGenTest(List<String> testPackages, final String sourcePath, final File wdlTestTargetDir) {", "originalCommit": "1195d6ef5363532d69c67faea3e49ee691892452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MzQ4OA==", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485163488", "bodyText": "Done, all.", "author": "cmnbroad", "createdAt": "2020-09-08T19:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MjMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/utils/help/WDLGenerationIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/utils/help/WDLGenerationIntegrationTest.java\nindex 114cf26b1..ba588f89f 100644\n--- a/src/test/java/org/broadinstitute/hellbender/utils/help/WDLGenerationIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/utils/help/WDLGenerationIntegrationTest.java\n\n@@ -39,7 +39,7 @@ public class WDLGenerationIntegrationTest extends CommandLineProgramTest {\n     }\n \n     @Test\n-    public void wdlGenSmokeTest() throws IOException, ParseException {\n+    private void wdlGenSmokeTest() throws IOException, ParseException {\n         final File wdlTestTargetDir = createTempDir(\"wdlgentest\");\n         doWDLGenTest(wdlGenTestPackages, \"src/main/java\", wdlTestTargetDir);\n \n"}}, {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "url": "https://github.com/broadinstitute/gatk/commit/4bfbc9f05ad60fde5c036797984f3804dd8c1230", "message": "Rename expected test output files.", "committedDate": "2020-09-09T21:17:13Z", "type": "forcePushed"}, {"oid": "cc1f6183527db46da13b2fb60d1565334845e400", "url": "https://github.com/broadinstitute/gatk/commit/cc1f6183527db46da13b2fb60d1565334845e400", "message": "Final code review comments for build.gradle.", "committedDate": "2020-09-21T12:17:36Z", "type": "forcePushed"}, {"oid": "052483961336c82975ebf7f974c1b948664b48bf", "url": "https://github.com/broadinstitute/gatk/commit/052483961336c82975ebf7f974c1b948664b48bf", "message": "Enable cromwell execution test to run locally.", "committedDate": "2020-09-21T12:17:35Z", "type": "commit"}, {"oid": "7cf7640426343a27dae1dfd354dfab30a5ee8461", "url": "https://github.com/broadinstitute/gatk/commit/7cf7640426343a27dae1dfd354dfab30a5ee8461", "message": "Enable command line validation mode for PicardCommandLineProgramExecutor.", "committedDate": "2020-09-21T12:17:35Z", "type": "commit"}, {"oid": "cd384747953841e2cf1325b49d1c4800d6ed0c74", "url": "https://github.com/broadinstitute/gatk/commit/cd384747953841e2cf1325b49d1c4800d6ed0c74", "message": "Generate better execution test values.", "committedDate": "2020-09-21T12:17:35Z", "type": "commit"}, {"oid": "32add548b3f4e491d2b510c806e009321eef2019", "url": "https://github.com/broadinstitute/gatk/commit/32add548b3f4e491d2b510c806e009321eef2019", "message": "TEMP: Force WDL generation for all GATK/Picard tools.", "committedDate": "2020-09-21T12:17:35Z", "type": "commit"}, {"oid": "266fae3e2210ce64db02334048027fbb91a0d1d2", "url": "https://github.com/broadinstitute/gatk/commit/266fae3e2210ce64db02334048027fbb91a0d1d2", "message": "Use Barclay support for required runtime properties and companion outputs.", "committedDate": "2020-09-21T12:17:35Z", "type": "commit"}, {"oid": "88d3def522df26dce4aa17a819b755a7c5d604b0", "url": "https://github.com/broadinstitute/gatk/commit/88d3def522df26dce4aa17a819b755a7c5d604b0", "message": "Use ammended summary for companions.", "committedDate": "2020-09-21T12:17:35Z", "type": "commit"}, {"oid": "2316736605325fe11a930f92ccb6269d35b6f11d", "url": "https://github.com/broadinstitute/gatk/commit/2316736605325fe11a930f92ccb6269d35b6f11d", "message": "Add a WDL test tool to ensure the GATK templates are correct.", "committedDate": "2020-09-21T12:17:35Z", "type": "commit"}, {"oid": "924b733286e741f8e63ae79c7d2b636ae554e95f", "url": "https://github.com/broadinstitute/gatk/commit/924b733286e741f8e63ae79c7d2b636ae554e95f", "message": "Update templates.", "committedDate": "2020-09-21T12:17:35Z", "type": "commit"}, {"oid": "9cf8e47e80b5160e44e69488cfebe1f608052006", "url": "https://github.com/broadinstitute/gatk/commit/9cf8e47e80b5160e44e69488cfebe1f608052006", "message": "Properly quote inital values and test values.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "18b60300a71650d5eb0084add3857ebe28fc56f7", "url": "https://github.com/broadinstitute/gatk/commit/18b60300a71650d5eb0084add3857ebe28fc56f7", "message": "Code update.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "71d461a82cab461c7cd3840ae32b74fcdc0c5e57", "url": "https://github.com/broadinstitute/gatk/commit/71d461a82cab461c7cd3840ae32b74fcdc0c5e57", "message": "Move quoting code to Barclay.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "8f4a6e4ca1b5f8f49c80c63f51626cafdc593ce9", "url": "https://github.com/broadinstitute/gatk/commit/8f4a6e4ca1b5f8f49c80c63f51626cafdc593ce9", "message": "Update doc for companions in expected WDL test outputs.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "c51edd8cd0eca42174e3d06ad16b59b988873408", "url": "https://github.com/broadinstitute/gatk/commit/c51edd8cd0eca42174e3d06ad16b59b988873408", "message": "Use requiredOutputs in default template.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "d60f84e5a9be43d316da138431229cab759e7fed", "url": "https://github.com/broadinstitute/gatk/commit/d60f84e5a9be43d316da138431229cab759e7fed", "message": "Use requiredCompanions in templates.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "ac32f4583589c5521546c4fb5b10d896ba23c517", "url": "https://github.com/broadinstitute/gatk/commit/ac32f4583589c5521546c4fb5b10d896ba23c517", "message": "Update templates for optional companions.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "a1a7dd814efb0f986b1549a2f0c1abf934dbaf5d", "url": "https://github.com/broadinstitute/gatk/commit/a1a7dd814efb0f986b1549a2f0c1abf934dbaf5d", "message": "Generate valid required array test values.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "6d93f15b17b163d0e6052c99378656ccd427bec1", "url": "https://github.com/broadinstitute/gatk/commit/6d93f15b17b163d0e6052c99378656ccd427bec1", "message": "Update expected outputs for Barclay change for null optional array values.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "768e13b961c2f581e66e6eb9c36eaacc221bfe92", "url": "https://github.com/broadinstitute/gatk/commit/768e13b961c2f581e66e6eb9c36eaacc221bfe92", "message": "Update templates and expected outputs for Barclay change for optional outputs.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "0e8ebf1c2e486fdd9464a5d14b0d87bdde69fb47", "url": "https://github.com/broadinstitute/gatk/commit/0e8ebf1c2e486fdd9464a5d14b0d87bdde69fb47", "message": "Change RuntimeProperties to WorkflowProperties and CPU defaults to 2.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "724f017c6db1b4ccee561b128a2257eddecd9865", "url": "https://github.com/broadinstitute/gatk/commit/724f017c6db1b4ccee561b128a2257eddecd9865", "message": "Use string constants from Barclay.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "315cf6732627df40d6073e18462363a4b9da991a", "url": "https://github.com/broadinstitute/gatk/commit/315cf6732627df40d6073e18462363a4b9da991a", "message": "Fix whitespace in templates.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "d389a2d50e22405d7aaa4c4faf283dffcde88976", "url": "https://github.com/broadinstitute/gatk/commit/d389a2d50e22405d7aaa4c4faf283dffcde88976", "message": "Add localization optional and normalize positionalArgs name.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "4f5d00b60d45b23405129a2440e8ba482c255368", "url": "https://github.com/broadinstitute/gatk/commit/4f5d00b60d45b23405129a2440e8ba482c255368", "message": "Remove unnecessary expression placeholders to enable optional outputs.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "644e236e576a813a23a67cc952493db1f5ed99cd", "url": "https://github.com/broadinstitute/gatk/commit/644e236e576a813a23a67cc952493db1f5ed99cd", "message": "Add param_meta section and update test outputs.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "9eb63a3e2aff2d43ce8c3bc2460d4efc6b646586", "url": "https://github.com/broadinstitute/gatk/commit/9eb63a3e2aff2d43ce8c3bc2460d4efc6b646586", "message": "Remove quotes and newlines in summary string to allow use in param_meta.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "56477d6a82fbb57e077fdae05dea7f537c05375b", "url": "https://github.com/broadinstitute/gatk/commit/56477d6a82fbb57e077fdae05dea7f537c05375b", "message": "Use gatk as app name in template updates ported from Barclay.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "62bd3eb2bf966d613dd2995d8f1da0bc561d3eb9", "url": "https://github.com/broadinstitute/gatk/commit/62bd3eb2bf966d613dd2995d8f1da0bc561d3eb9", "message": "Update optional args template to include companions as outputs.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "0a2241e181e079519c7eb50593fda080ecd1445f", "url": "https://github.com/broadinstitute/gatk/commit/0a2241e181e079519c7eb50593fda080ecd1445f", "message": "Update method name to reflect Barclay change.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "2f671b9fd371429abf5b6509ca3b1a95ee3c7d3d", "url": "https://github.com/broadinstitute/gatk/commit/2f671b9fd371429abf5b6509ca3b1a95ee3c7d3d", "message": "Suppress remove warning for Java 11 build.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "04ca7108a90360f41fc3be8f1f968a3e5365e8b5", "url": "https://github.com/broadinstitute/gatk/commit/04ca7108a90360f41fc3be8f1f968a3e5365e8b5", "message": "Remove extraneous debugging code.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "29640d218a9f8c18899067f85b9fd1b34832c280", "url": "https://github.com/broadinstitute/gatk/commit/29640d218a9f8c18899067f85b9fd1b34832c280", "message": "Update expected WDL output.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "8d2b477a0e8d8463353b14755784ba94d7ddfe75", "url": "https://github.com/broadinstitute/gatk/commit/8d2b477a0e8d8463353b14755784ba94d7ddfe75", "message": "Upgrade to Barclay 4.0.0 and update test to reflect Barclay's disabling of jopt option clustering.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "5c6d826d40dbc5514eedf273150b0f4807d495d1", "url": "https://github.com/broadinstitute/gatk/commit/5c6d826d40dbc5514eedf273150b0f4807d495d1", "message": "Revert \"TEMP: Force WDL generation for all GATK/Picard tools.\"\n\nThis reverts commit 97700017604fb74d56833a537d780db37855c3ed.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "08fbdc2f51e5bfef1f696d20a96ad2a070955683", "url": "https://github.com/broadinstitute/gatk/commit/08fbdc2f51e5bfef1f696d20a96ad2a070955683", "message": "Annotate some tools for WDL gen.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "0c03060b411e5deccc7a4ef42fc81a7d4fc05fd1", "url": "https://github.com/broadinstitute/gatk/commit/0c03060b411e5deccc7a4ef42fc81a7d4fc05fd1", "message": "Miscelleaneous code review comments.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "b82f52f7aedb2eb882efca55462cb4335e04f649", "url": "https://github.com/broadinstitute/gatk/commit/b82f52f7aedb2eb882efca55462cb4335e04f649", "message": "Clean up temporary files resulting from WDL validation task.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "fcc350109726c1e9f5d6dcc5c9417f9ec1c11862", "url": "https://github.com/broadinstitute/gatk/commit/fcc350109726c1e9f5d6dcc5c9417f9ec1c11862", "message": "Update README.md.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "e470f3a915554813a3da8f857f24b95c49e46c5b", "url": "https://github.com/broadinstitute/gatk/commit/e470f3a915554813a3da8f857f24b95c49e46c5b", "message": "Fix WDL test dummy version number.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "eedcf083c119af33cb1c9de792779bdaf298b509", "url": "https://github.com/broadinstitute/gatk/commit/eedcf083c119af33cb1c9de792779bdaf298b509", "message": "Add optional-companion and no-companion WDL test cases , and normalize existing test case naming convention.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "ab1964beee8b6f7a3ea396b28052b40717ced20b", "url": "https://github.com/broadinstitute/gatk/commit/ab1964beee8b6f7a3ea396b28052b40717ced20b", "message": "Add mixed companion test cases.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "928e37999a4df1722e322f9a4bc4965dce07f899", "url": "https://github.com/broadinstitute/gatk/commit/928e37999a4df1722e322f9a4bc4965dce07f899", "message": "Rename expected test output files.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}, {"oid": "cc1f6183527db46da13b2fb60d1565334845e400", "url": "https://github.com/broadinstitute/gatk/commit/cc1f6183527db46da13b2fb60d1565334845e400", "message": "Final code review comments for build.gradle.", "committedDate": "2020-09-21T12:17:36Z", "type": "commit"}]}