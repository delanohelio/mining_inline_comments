{"pr_number": 6633, "pr_title": "Extracting a new ReadsDataSource interface", "pr_createdAt": "2020-06-02T21:29:03Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6633", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxNjE4NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434716185", "bodyText": "This message should still say ReadsDataSource, as the actual implementation in use by the engine may vary in the future.", "author": "droazen", "createdAt": "2020-06-03T16:55:01Z", "path": "src/main/java/org/broadinstitute/hellbender/engine/WalkerBase.java", "diffHunk": "@@ -46,7 +45,7 @@ final protected ReferenceDataSource directlyAccessEngineReferenceDataSource() {\n      */\n     @Override\n     final protected ReadsDataSource directlyAccessEngineReadsDataSource() {\n-        throw new GATKException(\"Should never directly access the engine ReadsDataSource in walker tool classes \" +\n+        throw new GATKException(\"Should never directly access the engine ReadsPathDataSource in walker tool classes \" +", "originalCommit": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMjU5Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434732596", "bodyText": "Good catch, missed that one.", "author": "lbergelson", "createdAt": "2020-06-03T17:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxNjE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6188e392227ddb251d7d1caa687767f184f6e2e9", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/engine/WalkerBase.java b/src/main/java/org/broadinstitute/hellbender/engine/WalkerBase.java\nindex 95e7fb98f..08bc21abd 100644\n--- a/src/main/java/org/broadinstitute/hellbender/engine/WalkerBase.java\n+++ b/src/main/java/org/broadinstitute/hellbender/engine/WalkerBase.java\n\n@@ -44,8 +44,8 @@ public abstract class WalkerBase extends GATKTool {\n      * directly accessing the engine datasources, since walker tools should get their data via {@code apply()} instead.\n      */\n     @Override\n-    final protected ReadsDataSource directlyAccessEngineReadsDataSource() {\n-        throw new GATKException(\"Should never directly access the engine ReadsPathDataSource in walker tool classes \" +\n+    final protected ReadsDataSourceInterface directlyAccessEngineReadsDataSource() {\n+        throw new GATKException(\"Should never directly access the engine ReadsDataSourceInterface in walker tool classes \" +\n                 \"outside of the engine package. Walker tools should get their data via apply() instead.\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODY3NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434718675", "bodyText": "Use the interface as the declared type wherever possible, here and below, except in cases such as ReadsPathDataSourceUnitTest where we genuinely want to restrict the implementation. This will help test whether your interface has captured sufficient functionality to be usable in practice.", "author": "droazen", "createdAt": "2020-06-03T16:58:49Z", "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionIteratorUnitTest.java", "diffHunk": "@@ -54,7 +54,7 @@\n      */\n     @Test(dataProvider = \"testCorrectRegionsHaveCorrectReadsAndSizeData\")\n     public void testRegionsHaveCorrectReadsAndSize( final String reads, final String reference, final List<SimpleInterval> shardIntervals, final int minRegionSize, final int maxRegionSize, final int assemblyRegionPadding ) throws IOException {\n-        try (final ReadsDataSource readsSource = new ReadsDataSource(IOUtils.getPath(reads));\n+        try (final ReadsPathDataSource readsSource = new ReadsPathDataSource(IOUtils.getPath(reads));", "originalCommit": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMzIyNg==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434733226", "bodyText": "I opted to leave the type the same in the tests, but I'm happy change to the interface.", "author": "lbergelson", "createdAt": "2020-06-03T17:24:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNzU1OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r435517559", "bodyText": "chagned", "author": "lbergelson", "createdAt": "2020-06-04T20:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6188e392227ddb251d7d1caa687767f184f6e2e9", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionIteratorUnitTest.java b/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionIteratorUnitTest.java\nindex d8151086e..9ee35b3eb 100644\n--- a/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionIteratorUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionIteratorUnitTest.java\n\n@@ -54,7 +54,7 @@ public class AssemblyRegionIteratorUnitTest extends GATKBaseTest {\n      */\n     @Test(dataProvider = \"testCorrectRegionsHaveCorrectReadsAndSizeData\")\n     public void testRegionsHaveCorrectReadsAndSize( final String reads, final String reference, final List<SimpleInterval> shardIntervals, final int minRegionSize, final int maxRegionSize, final int assemblyRegionPadding ) throws IOException {\n-        try (final ReadsPathDataSource readsSource = new ReadsPathDataSource(IOUtils.getPath(reads));\n+        try (final ReadsDataSourceInterface readsSource = new ReadsPathDataSource(IOUtils.getPath(reads));\n              final ReferenceDataSource refSource = ReferenceDataSource.of(IOUtils.getPath(reference));\n              final ReferenceSequenceFile referenceReader = new CachingIndexedFastaSequenceFile(IOUtils.getPath(b37_reference_20_21));\n         ) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzAzOA==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434723038", "bodyText": "You have introduced your famous (unbalanced parens ) in the ReadsPathDataSource constructors -- can you fix this?", "author": "droazen", "createdAt": "2020-06-03T17:06:19Z", "path": "src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package org.broadinstitute.hellbender.engine;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.samtools.MergingSamRecordIterator;\n+import htsjdk.samtools.SAMException;\n+import htsjdk.samtools.SAMFileHeader;\n+import htsjdk.samtools.SAMRecord;\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SamFileHeaderMerger;\n+import htsjdk.samtools.SamInputResource;\n+import htsjdk.samtools.SamReader;\n+import htsjdk.samtools.SamReaderFactory;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.broadinstitute.hellbender.exceptions.GATKException;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.IntervalUtils;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.gcs.BucketUtils;\n+import org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator;\n+import org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator;\n+import org.broadinstitute.hellbender.utils.read.GATKRead;\n+import org.broadinstitute.hellbender.utils.read.ReadConstants;\n+\n+import java.io.IOException;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Manages traversals and queries over sources of reads which are accessible via {@link Path}s\n+ * (for now, SAM/BAM/CRAM files only).\n+ *\n+ * Two basic operations are available:\n+ *\n+ * -Iteration over all reads, optionally restricted to reads that overlap a set of intervals\n+ * -Targeted queries by one interval at a time\n+ */\n+public final class ReadsPathDataSource implements ReadsDataSource {\n+    private static final Logger logger = LogManager.getLogger(ReadsPathDataSource.class);\n+\n+    /**\n+     * Mapping from SamReaders to iterators over the reads from each reader. Only one\n+     * iterator can be open from a given reader at a time (this is a restriction\n+     * in htsjdk). Iterator is set to null for a reader if no iteration is currently\n+     * active on that reader.\n+     */\n+    private final Map<SamReader, CloseableIterator<SAMRecord>> readers;\n+\n+    /**\n+     * Hang onto the input files so that we can print useful errors about them\n+     */\n+    private final Map<SamReader, Path> backingPaths;\n+\n+    /**\n+     * Only reads that overlap these intervals (and unmapped reads, if {@link #traverseUnmapped} is set) will be returned\n+     * during a full iteration. Null if iteration is unbounded.\n+     *\n+     * Individual queries are unaffected by these intervals -- only traversals initiated via {@link #iterator} are affected.\n+     */\n+    private List<SimpleInterval> intervalsForTraversal;\n+\n+    /**\n+     * If true, restrict traversals to unmapped reads (and reads overlapping any {@link #intervalsForTraversal}, if set).\n+     * False if iteration is unbounded or bounded only by our {@link #intervalsForTraversal}.\n+     *\n+     * Note that this setting covers only unmapped reads that have no position -- unmapped reads that are assigned the\n+     * position of their mates will be returned by queries overlapping that position.\n+     *\n+     * Individual queries are unaffected by this setting  -- only traversals initiated via {@link #iterator} are affected.\n+     */\n+    private boolean traverseUnmapped;\n+\n+    /**\n+     * Used to create a merged Sam header when we're dealing with multiple readers. Null if we only have a single reader.\n+     */\n+    private final SamFileHeaderMerger headerMerger;\n+\n+    /**\n+     * Are indices available for all files?\n+     */\n+    private boolean indicesAvailable;\n+\n+    /**\n+     * Initialize this data source with a single SAM/BAM file and validation stringency SILENT.\n+     *\n+     * @param samFile SAM/BAM file, not null.\n+     */\n+    public ReadsPathDataSource(final Path samFile ) {", "originalCommit": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMzI5Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434733293", "bodyText": "aaah", "author": "lbergelson", "createdAt": "2020-06-03T17:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNjk5Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r435516997", "bodyText": "fixed", "author": "lbergelson", "createdAt": "2020-06-04T20:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "6188e392227ddb251d7d1caa687767f184f6e2e9", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java b/src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java\nindex cf59f6b87..de7cac5d8 100644\n--- a/src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java\n+++ b/src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java\n\n@@ -47,7 +47,7 @@ import java.util.stream.Collectors;\n  * -Iteration over all reads, optionally restricted to reads that overlap a set of intervals\n  * -Targeted queries by one interval at a time\n  */\n-public final class ReadsPathDataSource implements ReadsDataSource {\n+public final class ReadsPathDataSource implements ReadsDataSourceInterface {\n     private static final Logger logger = LogManager.getLogger(ReadsPathDataSource.class);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNDM5Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434724396", "bodyText": "The way you've structured this PR causes the commit history for ReadsDataSource to be lost/obfuscated (I checked just now in an IDE), which we should avoid if possible. I think we can help git understand what's happening by using a different name for the interface in this PR, merge it, then open a second PR to rename the interface to ReadsDataSource.", "author": "droazen", "createdAt": "2020-06-03T17:08:45Z", "path": "src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package org.broadinstitute.hellbender.engine;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.samtools.MergingSamRecordIterator;\n+import htsjdk.samtools.SAMException;\n+import htsjdk.samtools.SAMFileHeader;\n+import htsjdk.samtools.SAMRecord;\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SamFileHeaderMerger;\n+import htsjdk.samtools.SamInputResource;\n+import htsjdk.samtools.SamReader;\n+import htsjdk.samtools.SamReaderFactory;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.broadinstitute.hellbender.exceptions.GATKException;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.IntervalUtils;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.gcs.BucketUtils;\n+import org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator;\n+import org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator;\n+import org.broadinstitute.hellbender.utils.read.GATKRead;\n+import org.broadinstitute.hellbender.utils.read.ReadConstants;\n+\n+import java.io.IOException;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Manages traversals and queries over sources of reads which are accessible via {@link Path}s\n+ * (for now, SAM/BAM/CRAM files only).\n+ *\n+ * Two basic operations are available:\n+ *\n+ * -Iteration over all reads, optionally restricted to reads that overlap a set of intervals\n+ * -Targeted queries by one interval at a time\n+ */\n+public final class ReadsPathDataSource implements ReadsDataSource {", "originalCommit": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMzg3Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434733873", "bodyText": "Yeah, it's a bit weird, git initially understood that it was a rename, but then it passed some % change threshold and it got confused.  I can do it in 2 steps if you want or just 2 commits.", "author": "lbergelson", "createdAt": "2020-06-03T17:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNDM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNjI3Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434736273", "bodyText": "I think it has to be two PRs unfortunately, as with two commits I think it'd just get confused again after the squash. If you keep the rename of ReadsDataSource -> ReadsPathDataSource in this PR, but name the interface something like ReadsDataSourceInterface temporarily git should be able to follow the changes (but you should test this). If it works, we can do a second PR to rename the interface after this is merged.", "author": "droazen", "createdAt": "2020-06-03T17:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNDM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2MzE3Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434763172", "bodyText": "We can just not squash them on merge.", "author": "lbergelson", "createdAt": "2020-06-03T18:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNDM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6188e392227ddb251d7d1caa687767f184f6e2e9", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java b/src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java\nindex cf59f6b87..de7cac5d8 100644\n--- a/src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java\n+++ b/src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java\n\n@@ -47,7 +47,7 @@ import java.util.stream.Collectors;\n  * -Iteration over all reads, optionally restricted to reads that overlap a set of intervals\n  * -Targeted queries by one interval at a time\n  */\n-public final class ReadsPathDataSource implements ReadsDataSource {\n+public final class ReadsPathDataSource implements ReadsDataSourceInterface {\n     private static final Logger logger = LogManager.getLogger(ReadsPathDataSource.class);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMDU3Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434730576", "bodyText": "There are a few additional methods that I think belong in the interface: traversalIsBounded(), and indicesAvailable() (though we may want to rename the latter to something like isQueryableByInterval())", "author": "droazen", "createdAt": "2020-06-03T17:19:38Z", "path": "src/main/java/org/broadinstitute/hellbender/engine/ReadsDataSource.java", "diffHunk": "@@ -1,278 +1,44 @@\n package org.broadinstitute.hellbender.engine;\n \n-import com.google.common.annotations.VisibleForTesting;\n-import htsjdk.samtools.MergingSamRecordIterator;\n-import htsjdk.samtools.SAMException;\n import htsjdk.samtools.SAMFileHeader;\n-import htsjdk.samtools.SAMRecord;\n import htsjdk.samtools.SAMSequenceDictionary;\n-import htsjdk.samtools.SamFileHeaderMerger;\n-import htsjdk.samtools.SamInputResource;\n-import htsjdk.samtools.SamReader;\n-import htsjdk.samtools.SamReaderFactory;\n-import htsjdk.samtools.util.CloseableIterator;\n-import htsjdk.samtools.util.IOUtil;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.broadinstitute.hellbender.exceptions.GATKException;\n-import org.broadinstitute.hellbender.exceptions.UserException;\n-import org.broadinstitute.hellbender.utils.IntervalUtils;\n import org.broadinstitute.hellbender.utils.SimpleInterval;\n-import org.broadinstitute.hellbender.utils.Utils;\n-import org.broadinstitute.hellbender.utils.gcs.BucketUtils;\n-import org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator;\n-import org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator;\n import org.broadinstitute.hellbender.utils.read.GATKRead;\n-import org.broadinstitute.hellbender.utils.read.ReadConstants;\n \n-import java.io.IOException;\n-import java.nio.channels.SeekableByteChannel;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Iterator;\n-import java.util.LinkedHashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n \n /**\n- * Manages traversals and queries over sources of reads (for now, SAM/BAM/CRAM files only).\n+ *\n+ * An interface for managing traversals over sources of reads.\n  *\n  * Two basic operations are available:\n  *\n  * -Iteration over all reads, optionally restricted to reads that overlap a set of intervals\n  * -Targeted queries by one interval at a time\n  */\n-public final class ReadsDataSource implements GATKDataSource<GATKRead>, AutoCloseable {\n-    protected static final Logger logger = LogManager.getLogger(ReadsDataSource.class);\n-\n-    /**\n-     * Mapping from SamReaders to iterators over the reads from each reader. Only one\n-     * iterator can be open from a given reader at a time (this is a restriction\n-     * in htsjdk). Iterator is set to null for a reader if no iteration is currently\n-     * active on that reader.\n-     */\n-    private final Map<SamReader, CloseableIterator<SAMRecord>> readers;\n-\n-    /**\n-     * Hang onto the input files so that we can print useful errors about them\n-     */\n-    private final Map<SamReader, Path> backingPaths;\n-\n-    /**\n-     * Only reads that overlap these intervals (and unmapped reads, if {@link #traverseUnmapped} is set) will be returned\n-     * during a full iteration. Null if iteration is unbounded.\n-     *\n-     * Individual queries are unaffected by these intervals -- only traversals initiated via {@link #iterator} are affected.\n-     */\n-    private List<SimpleInterval> intervalsForTraversal;\n-\n-    /**\n-     * If true, restrict traversals to unmapped reads (and reads overlapping any {@link #intervalsForTraversal}, if set).\n-     * False if iteration is unbounded or bounded only by our {@link #intervalsForTraversal}.\n-     *\n-     * Note that this setting covers only unmapped reads that have no position -- unmapped reads that are assigned the\n-     * position of their mates will be returned by queries overlapping that position.\n-     *\n-     * Individual queries are unaffected by this setting  -- only traversals initiated via {@link #iterator} are affected.\n-     */\n-    private boolean traverseUnmapped;\n-\n-    /**\n-     * Used to create a merged Sam header when we're dealing with multiple readers. Null if we only have a single reader.\n-     */\n-    private final SamFileHeaderMerger headerMerger;\n-\n-    /**\n-     * Are indices available for all files?\n-     */\n-    private boolean indicesAvailable;\n-\n-    /**\n-     * Initialize this data source with a single SAM/BAM file and validation stringency SILENT.\n-     *\n-     * @param samFile SAM/BAM file, not null.\n-     */\n-    public ReadsDataSource( final Path samFile ) {\n-        this(samFile != null ? Arrays.asList(samFile) : null, (SamReaderFactory)null);\n-    }\n-\n-    /**\n-     * Initialize this data source with multiple SAM/BAM files and validation stringency SILENT.\n-     *\n-     * @param samFiles SAM/BAM files, not null.\n-     */\n-    public ReadsDataSource( final List<Path> samFiles ) {\n-        this(samFiles, (SamReaderFactory)null);\n-    }\n-\n-    /**\n-     * Initialize this data source with a single SAM/BAM file and a custom SamReaderFactory\n-     *\n-     * @param samPath path to SAM/BAM file, not null.\n-     * @param customSamReaderFactory SamReaderFactory to use, if null a default factory with no reference and validation\n-     *                               stringency SILENT is used.\n-     */\n-    public ReadsDataSource( final Path samPath, SamReaderFactory customSamReaderFactory ) {\n-        this(samPath != null ? Arrays.asList(samPath) : null, customSamReaderFactory);\n-    }\n-\n-    /**\n-     * Initialize this data source with multiple SAM/BAM files and a custom SamReaderFactory\n-     *\n-     * @param samPaths path to SAM/BAM file, not null.\n-     * @param customSamReaderFactory SamReaderFactory to use, if null a default factory with no reference and validation\n-     *                               stringency SILENT is used.\n-     */\n-    public ReadsDataSource( final List<Path> samPaths, SamReaderFactory customSamReaderFactory ) {\n-        this(samPaths, null, customSamReaderFactory, 0, 0);\n-    }\n-\n-    /**\n-     * Initialize this data source with multiple SAM/BAM/CRAM files, and explicit indices for those files.\n-     *\n-     * @param samPaths paths to SAM/BAM/CRAM files, not null\n-     * @param samIndices indices for all of the SAM/BAM/CRAM files, in the same order as samPaths. May be null,\n-     *                   in which case index paths are inferred automatically.\n-     */\n-    public ReadsDataSource( final List<Path> samPaths, final List<Path> samIndices ) {\n-        this(samPaths, samIndices, null, 0, 0);\n-    }\n-\n-    /**\n-     * Initialize this data source with multiple SAM/BAM/CRAM files, explicit indices for those files,\n-     * and a custom SamReaderFactory.\n-     *\n-     * @param samPaths paths to SAM/BAM/CRAM files, not null\n-     * @param samIndices indices for all of the SAM/BAM/CRAM files, in the same order as samPaths. May be null,\n-     *                   in which case index paths are inferred automatically.\n-     * @param customSamReaderFactory SamReaderFactory to use, if null a default factory with no reference and validation\n-     *                               stringency SILENT is used.\n-     */\n-    public ReadsDataSource( final List<Path> samPaths, final List<Path> samIndices,\n-        SamReaderFactory customSamReaderFactory) {\n-        this(samPaths, samIndices, customSamReaderFactory, 0, 0);\n-    }\n+public interface ReadsDataSource extends GATKDataSource<GATKRead>, AutoCloseable {", "originalCommit": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNDczMg==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434734732", "bodyText": "Neither of those are used outside of the class and it's unit tests so I left them out.  We could add an isQueryable.", "author": "lbergelson", "createdAt": "2020-06-03T17:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMDU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNjk4MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434736981", "bodyText": "They complement the existing interface methods like setTraversalBounds(), query() (which throws if ! indicesAvailable()), which is why I think they belong up in the interface.", "author": "droazen", "createdAt": "2020-06-03T17:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMDU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNTQ0MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r435515441", "bodyText": "I pulled up traversalIsBounded and added a new isQueryableByInterval", "author": "lbergelson", "createdAt": "2020-06-04T19:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMDU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6188e392227ddb251d7d1caa687767f184f6e2e9", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/engine/ReadsDataSource.java b/src/main/java/org/broadinstitute/hellbender/engine/ReadsDataSourceInterface.java\nsimilarity index 83%\nrename from src/main/java/org/broadinstitute/hellbender/engine/ReadsDataSource.java\nrename to src/main/java/org/broadinstitute/hellbender/engine/ReadsDataSourceInterface.java\nindex e740e2d32..9956f7f67 100644\n--- a/src/main/java/org/broadinstitute/hellbender/engine/ReadsDataSource.java\n+++ b/src/main/java/org/broadinstitute/hellbender/engine/ReadsDataSourceInterface.java\n\n@@ -17,7 +17,7 @@ import java.util.List;\n  * -Iteration over all reads, optionally restricted to reads that overlap a set of intervals\n  * -Targeted queries by one interval at a time\n  */\n-public interface ReadsDataSource extends GATKDataSource<GATKRead>, AutoCloseable {\n+public interface ReadsDataSourceInterface extends GATKDataSource<GATKRead>, AutoCloseable {\n \n     /**\n      * Restricts a traversal of this data source via {@link #iterator} to only return reads that overlap the given intervals,\n"}}, {"oid": "6188e392227ddb251d7d1caa687767f184f6e2e9", "url": "https://github.com/broadinstitute/gatk/commit/6188e392227ddb251d7d1caa687767f184f6e2e9", "message": "Extracting a new ReadsDataSource interface\n\n* Extracting a new interface from the existing class ReadsDataSource\n   * the new interface is called ReadsDataSource\n   * ReadsDataSource has been renamed to ReadsPathDataSource\n* This is to support the introduction of a new ReadsDataSource implementation using Htsget", "committedDate": "2020-06-04T20:10:04Z", "type": "forcePushed"}, {"oid": "717a40cc4aaf2797c37386e0b00a589177c0f201", "url": "https://github.com/broadinstitute/gatk/commit/717a40cc4aaf2797c37386e0b00a589177c0f201", "message": "Extracting a new ReadsDataSource interface\n\n* Extracting a new interface from the existing class ReadsDataSource\n   * the new interface is called ReadsDataSource\n   * ReadsDataSource has been renamed to ReadsPathDataSource\n* This is to support the introduction of a new ReadsDataSource implementation using Htsget", "committedDate": "2020-06-10T15:44:51Z", "type": "commit"}, {"oid": "5430d46ebbc6ab6a1075370f47b83b4c3834a236", "url": "https://github.com/broadinstitute/gatk/commit/5430d46ebbc6ab6a1075370f47b83b4c3834a236", "message": "rename ReadsDataSourceInterface -> ReadsDataSource", "committedDate": "2020-06-10T15:45:50Z", "type": "commit"}, {"oid": "5430d46ebbc6ab6a1075370f47b83b4c3834a236", "url": "https://github.com/broadinstitute/gatk/commit/5430d46ebbc6ab6a1075370f47b83b4c3834a236", "message": "rename ReadsDataSourceInterface -> ReadsDataSource", "committedDate": "2020-06-10T15:45:50Z", "type": "forcePushed"}]}