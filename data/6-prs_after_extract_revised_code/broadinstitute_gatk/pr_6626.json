{"pr_number": 6626, "pr_title": "More flexible matching of dbSNP variants", "pr_createdAt": "2020-05-29T22:02:14Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6626", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzMjM5OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r434832399", "bodyText": "Hmm... splitVariantContextToBiallelics() claims that under some circumstances it results in variants getting pushed forwards on the genome. This is all fine and well but it leaves a hole here where there could be a variant in the input (or the DBSNP) that gets moved and would otherwise match with the next variant in the other file. Not that the old code could handle this case any better... This is a very niche circumstance and probably doesn't warrant worrying about. I do think we should probably document this fact in a comment somewhere.", "author": "jamesemery", "createdAt": "2020-06-03T20:24:38Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java", "diffHunk": "@@ -156,26 +158,39 @@ public VariantContext annotateOverlap(final List<VariantContext> overlapTestVCs,\n     private static String getRsID(final List<VariantContext> rsIDSourceVCs, final VariantContext vcToAnnotate) {\n         Utils.nonNull(rsIDSourceVCs, \"rsIDSourceVCs cannot be null\");\n         Utils.nonNull(vcToAnnotate, \"vcToAnnotate cannot be null\");\n+        final List<String> rsids = new ArrayList<>();\n \n-        for ( final VariantContext vcComp : rsIDSourceVCs ) {\n-            if ( vcComp.isFiltered() ) {\n+        final List<VariantContext> vcAnnotateList = GATKVariantContextUtils.splitVariantContextToBiallelics(vcToAnnotate, true,\n+                GenotypeAssignmentMethod.SET_TO_NO_CALL_NO_ANNOTATIONS, true);\n+\n+        for ( final VariantContext vcCompSource : rsIDSourceVCs ) {\n+            if ( vcCompSource.isFiltered() ) {\n                 continue; // don't process any failed VCs\n             }\n \n-            if ( ! vcComp.getContig().equals(vcToAnnotate.getContig()) || vcComp.getStart() != vcToAnnotate.getStart() ) {\n-                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcComp + \" doesn't start at the same position as vcToAnnotate \" + vcToAnnotate);\n+            if (!vcCompSource.getContig().equals(vcToAnnotate.getContig())) {\n+                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcCompSource + \" is not on same chromosome as vcToAnnotate \" + vcToAnnotate);", "originalCommit": "904afa90cd05689fcf7911840aa5392dffc06d34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4NjY2MA==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r435386660", "bodyText": "I agree that there are still cases that this solution will not catch, but I think they are related to left alignment of indels or MNP vs multiple SNP/ complex snp/indel combination issues, not the allele movement that occurs in splitVariantContextToBiallelics.  Since there is no reference passed to splitVariantContextToBiallelics() beyond what is stored in the reference allele of the variant context, the alleles that are returned by this method cannot overlap any reference bases that were not overlapped by the original alleles.  So I think any match that would be found if the splitting and trimming were performed before grabbing the overlaps will also be found by this code.\nBut I agree with the general point, so I have added a comment that in rare cases we may fail add annotations to a variant that \"should\" have been added.", "author": "kachulis", "createdAt": "2020-06-04T16:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzMjM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0817dea74de62b078dc192420432720215ac4b18", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java\nindex e40c6f2d8..9cd8b1609 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java\n\n@@ -160,33 +159,22 @@ public final class VariantOverlapAnnotator {\n         Utils.nonNull(vcToAnnotate, \"vcToAnnotate cannot be null\");\n         final List<String> rsids = new ArrayList<>();\n \n-        final List<VariantContext> vcAnnotateList = GATKVariantContextUtils.splitVariantContextToBiallelics(vcToAnnotate, true,\n-                GenotypeAssignmentMethod.SET_TO_NO_CALL_NO_ANNOTATIONS, true);\n-\n-        for ( final VariantContext vcCompSource : rsIDSourceVCs ) {\n-            if ( vcCompSource.isFiltered() ) {\n+        for ( final VariantContext vcComp : rsIDSourceVCs ) {\n+            if ( vcComp.isFiltered() ) {\n                 continue; // don't process any failed VCs\n             }\n \n-            if (!vcCompSource.getContig().equals(vcToAnnotate.getContig())) {\n-                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcCompSource + \" is not on same chromosome as vcToAnnotate \" + vcToAnnotate);\n+            if ( ! vcComp.getContig().equals(vcToAnnotate.getContig()) || vcComp.getStart() != vcToAnnotate.getStart() ) {\n+                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcComp + \" doesn't start at the same position as vcToAnnotate \" + vcToAnnotate);\n             }\n \n-            final List<VariantContext> vcCompList = GATKVariantContextUtils.splitVariantContextToBiallelics(vcCompSource, true,\n-                    GenotypeAssignmentMethod.SET_TO_NO_CALL_NO_ANNOTATIONS, true);\n-            boolean addThisID = false;\n-            for (final VariantContext vcComp : vcCompList) {\n-                for (final VariantContext vcToAnnotateBi : vcAnnotateList) {\n-                    if (vcComp.getStart() == vcToAnnotateBi.getStart() && vcToAnnotateBi.getReference().equals(vcComp.getReference()) && vcComp.getAlternateAlleles().equals(vcToAnnotateBi.getAlternateAlleles())) {\n-                        addThisID = true;\n+            if ( vcToAnnotate.getReference().equals(vcComp.getReference()) ) {\n+                for ( final Allele allele : vcToAnnotate.getAlternateAlleles() ) {\n+                    if ( vcComp.getAlternateAlleles().contains(allele) ) {\n+                        rsids.add(vcComp.getID());\n                         break;\n                     }\n                 }\n-\n-                if (addThisID) {\n-                    rsids.add(vcCompSource.getID());\n-                    break;\n-                }\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDI2NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r434834265", "bodyText": "Wait a minute.... is vcToAnnotateBi.getAlternateAlleles() really adequate here? This means that two deletions of different lengths are exactly the same as far as our DBSNP annotations are concerned? That doesn't seem right...", "author": "jamesemery", "createdAt": "2020-06-03T20:28:07Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java", "diffHunk": "@@ -156,26 +158,39 @@ public VariantContext annotateOverlap(final List<VariantContext> overlapTestVCs,\n     private static String getRsID(final List<VariantContext> rsIDSourceVCs, final VariantContext vcToAnnotate) {\n         Utils.nonNull(rsIDSourceVCs, \"rsIDSourceVCs cannot be null\");\n         Utils.nonNull(vcToAnnotate, \"vcToAnnotate cannot be null\");\n+        final List<String> rsids = new ArrayList<>();\n \n-        for ( final VariantContext vcComp : rsIDSourceVCs ) {\n-            if ( vcComp.isFiltered() ) {\n+        final List<VariantContext> vcAnnotateList = GATKVariantContextUtils.splitVariantContextToBiallelics(vcToAnnotate, true,\n+                GenotypeAssignmentMethod.SET_TO_NO_CALL_NO_ANNOTATIONS, true);\n+\n+        for ( final VariantContext vcCompSource : rsIDSourceVCs ) {\n+            if ( vcCompSource.isFiltered() ) {\n                 continue; // don't process any failed VCs\n             }\n \n-            if ( ! vcComp.getContig().equals(vcToAnnotate.getContig()) || vcComp.getStart() != vcToAnnotate.getStart() ) {\n-                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcComp + \" doesn't start at the same position as vcToAnnotate \" + vcToAnnotate);\n+            if (!vcCompSource.getContig().equals(vcToAnnotate.getContig())) {\n+                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcCompSource + \" is not on same chromosome as vcToAnnotate \" + vcToAnnotate);\n             }\n \n-            if ( vcToAnnotate.getReference().equals(vcComp.getReference()) ) {\n-                for ( final Allele allele : vcToAnnotate.getAlternateAlleles() ) {\n-                    if ( vcComp.getAlternateAlleles().contains(allele) ) {\n-                        return vcComp.getID();\n+            final List<VariantContext> vcCompList = GATKVariantContextUtils.splitVariantContextToBiallelics(vcCompSource, true,\n+                    GenotypeAssignmentMethod.SET_TO_NO_CALL_NO_ANNOTATIONS, true);\n+            boolean addThisID = false;\n+            for (final VariantContext vcComp : vcCompList) {\n+                for (final VariantContext vcToAnnotateBi : vcAnnotateList) {\n+                    if (vcComp.getStart() == vcToAnnotateBi.getStart() && vcToAnnotateBi.getReference().equals(vcComp.getReference()) && vcComp.getAlternateAlleles().equals(vcToAnnotateBi.getAlternateAlleles())) {", "originalCommit": "904afa90cd05689fcf7911840aa5392dffc06d34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNjM1Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r434836353", "bodyText": "But it would care about insertions being an exact match?", "author": "jamesemery", "createdAt": "2020-06-03T20:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3Nzc1MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r434877751", "bodyText": "The reference allele is also checked, so deletions of different lengths shouldn't be considered a match.  I will add tests to confirm this though.", "author": "kachulis", "createdAt": "2020-06-03T21:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0817dea74de62b078dc192420432720215ac4b18", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java\nindex e40c6f2d8..9cd8b1609 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java\n\n@@ -160,33 +159,22 @@ public final class VariantOverlapAnnotator {\n         Utils.nonNull(vcToAnnotate, \"vcToAnnotate cannot be null\");\n         final List<String> rsids = new ArrayList<>();\n \n-        final List<VariantContext> vcAnnotateList = GATKVariantContextUtils.splitVariantContextToBiallelics(vcToAnnotate, true,\n-                GenotypeAssignmentMethod.SET_TO_NO_CALL_NO_ANNOTATIONS, true);\n-\n-        for ( final VariantContext vcCompSource : rsIDSourceVCs ) {\n-            if ( vcCompSource.isFiltered() ) {\n+        for ( final VariantContext vcComp : rsIDSourceVCs ) {\n+            if ( vcComp.isFiltered() ) {\n                 continue; // don't process any failed VCs\n             }\n \n-            if (!vcCompSource.getContig().equals(vcToAnnotate.getContig())) {\n-                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcCompSource + \" is not on same chromosome as vcToAnnotate \" + vcToAnnotate);\n+            if ( ! vcComp.getContig().equals(vcToAnnotate.getContig()) || vcComp.getStart() != vcToAnnotate.getStart() ) {\n+                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcComp + \" doesn't start at the same position as vcToAnnotate \" + vcToAnnotate);\n             }\n \n-            final List<VariantContext> vcCompList = GATKVariantContextUtils.splitVariantContextToBiallelics(vcCompSource, true,\n-                    GenotypeAssignmentMethod.SET_TO_NO_CALL_NO_ANNOTATIONS, true);\n-            boolean addThisID = false;\n-            for (final VariantContext vcComp : vcCompList) {\n-                for (final VariantContext vcToAnnotateBi : vcAnnotateList) {\n-                    if (vcComp.getStart() == vcToAnnotateBi.getStart() && vcToAnnotateBi.getReference().equals(vcComp.getReference()) && vcComp.getAlternateAlleles().equals(vcToAnnotateBi.getAlternateAlleles())) {\n-                        addThisID = true;\n+            if ( vcToAnnotate.getReference().equals(vcComp.getReference()) ) {\n+                for ( final Allele allele : vcToAnnotate.getAlternateAlleles() ) {\n+                    if ( vcComp.getAlternateAlleles().contains(allele) ) {\n+                        rsids.add(vcComp.getID());\n                         break;\n                     }\n                 }\n-\n-                if (addThisID) {\n-                    rsids.add(vcCompSource.getID());\n-                    break;\n-                }\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTIyNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r434835225", "bodyText": "Can you add a test with a DBSNP annotation with a particular length deletion and a variant that is also a deletion but with a different length to the annotation deletion? I have a hunch it will end up adding the annotation erroneously.", "author": "jamesemery", "createdAt": "2020-06-03T20:30:00Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotatorUnitTest.java", "diffHunk": "@@ -91,6 +91,29 @@ public void testCreateWithSpecialNames() {\n         tests.add(new Object[]{callNoIDAC, Arrays.asList(dbSNP_AC_AG), \"rsID1;rsID3\", true});\n         tests.add(new Object[]{callNoIDAT, Arrays.asList(dbSNP_AC_AG), VCFConstants.EMPTY_ID_FIELD, false});\n \n+        //multiple rsid which match multiallelic site\n+        final VariantContext callNoIDT_C_TAC = makeVC(\"call\", VCFConstants.EMPTY_ID_FIELD, Arrays.asList(\"T\", \"C\", \"TAC\"));\n+\n+        final VariantContext dbSNP_T_TAC_TATAC = makeVC(\"DBSNP\", \"rsID1\", Arrays.asList(\"T\", \"TAC\", \"TATAC\"));\n+        final VariantContext dbSNP_T_C = makeVC(\"DBSNP\", \"rsID2\", Arrays.asList(\"T\", \"C\"));\n+\n+        tests.add(new Object[]{callNoIDT_C_TAC, Arrays.asList(dbSNP_T_TAC_TATAC, dbSNP_T_C), \"rsID1;rsID2\", true});\n+        tests.add(new Object[]{callNoIDT_C_TAC, Arrays.asList(dbSNP_T_C,dbSNP_T_TAC_TATAC), \"rsID2;rsID1\", true});\n+\n+        //mixed multiallelic in dbsnp\n+        final VariantContext callNOID_T_TTCC = makeVC(\"call\", VCFConstants.EMPTY_ID_FIELD, Arrays.asList(\"T\", \"TTCC\"));\n+\n+        final VariantContext dbSNP_complex_mixed_site = makeVC(\"DBSNP\", \"rsID1\", Arrays.asList(\"TTCCTCCTCCTCCTCCTCC\", \"T\", \"TTCCTCCTCCTCCTCCTCCTCC\"));\n+\n+        tests.add(new Object[]{callNOID_T_TTCC, Arrays.asList(dbSNP_complex_mixed_site), \"rsID1\", true});\n+", "originalCommit": "904afa90cd05689fcf7911840aa5392dffc06d34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNjY3Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r434836672", "bodyText": "Also test for insertions of various lengths.", "author": "jamesemery", "createdAt": "2020-06-03T20:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMDIwMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r435400201", "bodyText": "added tests for both, they seem to be behaving correctly.", "author": "kachulis", "createdAt": "2020-06-04T16:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0817dea74de62b078dc192420432720215ac4b18", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotatorUnitTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotatorUnitTest.java\nindex 845b370e0..c63e2e716 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotatorUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotatorUnitTest.java\n\n@@ -91,29 +91,6 @@ public final class VariantOverlapAnnotatorUnitTest extends GATKBaseTest {\n         tests.add(new Object[]{callNoIDAC, Arrays.asList(dbSNP_AC_AG), \"rsID1;rsID3\", true});\n         tests.add(new Object[]{callNoIDAT, Arrays.asList(dbSNP_AC_AG), VCFConstants.EMPTY_ID_FIELD, false});\n \n-        //multiple rsid which match multiallelic site\n-        final VariantContext callNoIDT_C_TAC = makeVC(\"call\", VCFConstants.EMPTY_ID_FIELD, Arrays.asList(\"T\", \"C\", \"TAC\"));\n-\n-        final VariantContext dbSNP_T_TAC_TATAC = makeVC(\"DBSNP\", \"rsID1\", Arrays.asList(\"T\", \"TAC\", \"TATAC\"));\n-        final VariantContext dbSNP_T_C = makeVC(\"DBSNP\", \"rsID2\", Arrays.asList(\"T\", \"C\"));\n-\n-        tests.add(new Object[]{callNoIDT_C_TAC, Arrays.asList(dbSNP_T_TAC_TATAC, dbSNP_T_C), \"rsID1;rsID2\", true});\n-        tests.add(new Object[]{callNoIDT_C_TAC, Arrays.asList(dbSNP_T_C,dbSNP_T_TAC_TATAC), \"rsID2;rsID1\", true});\n-\n-        //mixed multiallelic in dbsnp\n-        final VariantContext callNOID_T_TTCC = makeVC(\"call\", VCFConstants.EMPTY_ID_FIELD, Arrays.asList(\"T\", \"TTCC\"));\n-\n-        final VariantContext dbSNP_complex_mixed_site = makeVC(\"DBSNP\", \"rsID1\", Arrays.asList(\"TTCCTCCTCCTCCTCCTCC\", \"T\", \"TTCCTCCTCCTCCTCCTCCTCC\"));\n-\n-        tests.add(new Object[]{callNOID_T_TTCC, Arrays.asList(dbSNP_complex_mixed_site), \"rsID1\", true});\n-\n-        //mixed multialleleic in call\n-        final VariantContext callNOID_complex_mixed_site = makeVC(\"call\", VCFConstants.EMPTY_ID_FIELD, Arrays.asList(\"TTCCTCCTCCTCCTCCTCC\", \"T\", \"TTCCTCCTCCTCCTCCTCCTCC\"));\n-\n-        final VariantContext dbSNP_T_TTCC = makeVC(\"DBSNP\", \"rsID1\", Arrays.asList(\"T\", \"TTCC\"));\n-\n-        tests.add(new Object[]{callNOID_complex_mixed_site, Arrays.asList(dbSNP_T_TTCC), \"rsID1\", true});\n-\n         final VariantContext dbSNP_AC_FAIL = new VariantContextBuilder(makeVC(\"DBSNP\", \"rsID1\", Arrays.asList(\"A\", \"C\"))).filter(\"FAIL\").make();\n         tests.add(new Object[]{callNoIDAC, Arrays.asList(dbSNP_AC_FAIL), VCFConstants.EMPTY_ID_FIELD, false});\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNzEzNw==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r434837137", "bodyText": "Update the @return line of the comments.", "author": "jamesemery", "createdAt": "2020-06-03T20:33:55Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java", "diffHunk": "@@ -156,26 +158,39 @@ public VariantContext annotateOverlap(final List<VariantContext> overlapTestVCs,\n     private static String getRsID(final List<VariantContext> rsIDSourceVCs, final VariantContext vcToAnnotate) {\n         Utils.nonNull(rsIDSourceVCs, \"rsIDSourceVCs cannot be null\");\n         Utils.nonNull(vcToAnnotate, \"vcToAnnotate cannot be null\");\n+        final List<String> rsids = new ArrayList<>();", "originalCommit": "904afa90cd05689fcf7911840aa5392dffc06d34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMTEwOA==", "url": "https://github.com/broadinstitute/gatk/pull/6626#discussion_r435401108", "bodyText": "done", "author": "kachulis", "createdAt": "2020-06-04T16:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNzEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "0817dea74de62b078dc192420432720215ac4b18", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java\nindex e40c6f2d8..9cd8b1609 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/VariantOverlapAnnotator.java\n\n@@ -160,33 +159,22 @@ public final class VariantOverlapAnnotator {\n         Utils.nonNull(vcToAnnotate, \"vcToAnnotate cannot be null\");\n         final List<String> rsids = new ArrayList<>();\n \n-        final List<VariantContext> vcAnnotateList = GATKVariantContextUtils.splitVariantContextToBiallelics(vcToAnnotate, true,\n-                GenotypeAssignmentMethod.SET_TO_NO_CALL_NO_ANNOTATIONS, true);\n-\n-        for ( final VariantContext vcCompSource : rsIDSourceVCs ) {\n-            if ( vcCompSource.isFiltered() ) {\n+        for ( final VariantContext vcComp : rsIDSourceVCs ) {\n+            if ( vcComp.isFiltered() ) {\n                 continue; // don't process any failed VCs\n             }\n \n-            if (!vcCompSource.getContig().equals(vcToAnnotate.getContig())) {\n-                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcCompSource + \" is not on same chromosome as vcToAnnotate \" + vcToAnnotate);\n+            if ( ! vcComp.getContig().equals(vcToAnnotate.getContig()) || vcComp.getStart() != vcToAnnotate.getStart() ) {\n+                throw new IllegalArgumentException(\"source rsID VariantContext \" + vcComp + \" doesn't start at the same position as vcToAnnotate \" + vcToAnnotate);\n             }\n \n-            final List<VariantContext> vcCompList = GATKVariantContextUtils.splitVariantContextToBiallelics(vcCompSource, true,\n-                    GenotypeAssignmentMethod.SET_TO_NO_CALL_NO_ANNOTATIONS, true);\n-            boolean addThisID = false;\n-            for (final VariantContext vcComp : vcCompList) {\n-                for (final VariantContext vcToAnnotateBi : vcAnnotateList) {\n-                    if (vcComp.getStart() == vcToAnnotateBi.getStart() && vcToAnnotateBi.getReference().equals(vcComp.getReference()) && vcComp.getAlternateAlleles().equals(vcToAnnotateBi.getAlternateAlleles())) {\n-                        addThisID = true;\n+            if ( vcToAnnotate.getReference().equals(vcComp.getReference()) ) {\n+                for ( final Allele allele : vcToAnnotate.getAlternateAlleles() ) {\n+                    if ( vcComp.getAlternateAlleles().contains(allele) ) {\n+                        rsids.add(vcComp.getID());\n                         break;\n                     }\n                 }\n-\n-                if (addThisID) {\n-                    rsids.add(vcCompSource.getID());\n-                    break;\n-                }\n             }\n         }\n \n"}}, {"oid": "0817dea74de62b078dc192420432720215ac4b18", "url": "https://github.com/broadinstitute/gatk/commit/0817dea74de62b078dc192420432720215ac4b18", "message": "multiple dbsnp annotations", "committedDate": "2020-06-04T21:02:42Z", "type": "commit"}, {"oid": "52aaac69e18e4dd4b35f33dc9c25d6285cce2bbe", "url": "https://github.com/broadinstitute/gatk/commit/52aaac69e18e4dd4b35f33dc9c25d6285cce2bbe", "message": "more flexible dbsnp matching", "committedDate": "2020-06-04T21:02:42Z", "type": "commit"}, {"oid": "1f0b73a1bae4533df20ba81d1c110489c3f24e69", "url": "https://github.com/broadinstitute/gatk/commit/1f0b73a1bae4533df20ba81d1c110489c3f24e69", "message": "review response", "committedDate": "2020-06-04T21:02:42Z", "type": "commit"}, {"oid": "3a7b57afe795387781e371f05a1470f197aa397c", "url": "https://github.com/broadinstitute/gatk/commit/3a7b57afe795387781e371f05a1470f197aa397c", "message": "updating rsids in expected output to make tests pass", "committedDate": "2020-06-04T21:09:54Z", "type": "commit"}, {"oid": "3a7b57afe795387781e371f05a1470f197aa397c", "url": "https://github.com/broadinstitute/gatk/commit/3a7b57afe795387781e371f05a1470f197aa397c", "message": "updating rsids in expected output to make tests pass", "committedDate": "2020-06-04T21:09:54Z", "type": "forcePushed"}]}