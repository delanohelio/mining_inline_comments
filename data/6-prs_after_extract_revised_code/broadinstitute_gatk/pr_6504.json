{"pr_number": 6504, "pr_title": "WDL generation.", "pr_createdAt": "2020-03-16T14:02:24Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6504", "timeline": [{"oid": "e36a24345745b632e0c9540dc7dbab4127e97ae3", "url": "https://github.com/broadinstitute/gatk/commit/e36a24345745b632e0c9540dc7dbab4127e97ae3", "message": "Upgrade barclay.", "committedDate": "2020-03-24T14:40:38Z", "type": "forcePushed"}, {"oid": "c46d36293a8b26a3e3ad6d325a9cba5a6133f904", "url": "https://github.com/broadinstitute/gatk/commit/c46d36293a8b26a3e3ad6d325a9cba5a6133f904", "message": "Update Barclay version.", "committedDate": "2020-04-28T22:33:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MjE5MA==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r423942190", "bodyText": "I was looking for something like this.  This is great!", "author": "jonn-smith", "createdAt": "2020-05-12T18:22:38Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/PrintReads.java", "diffHunk": "@@ -83,17 +85,20 @@\n         programGroup = ReadDataManipulationProgramGroup.class\n )\n @DocumentedFeature\n+@RuntimeProperties(memoryRequirements = \"1GB\")", "originalCommit": "c46d36293a8b26a3e3ad6d325a9cba5a6133f904", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b64e20ef8985d3424e1701ddf521517f4476157a", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/PrintReads.java b/src/main/java/org/broadinstitute/hellbender/tools/PrintReads.java\nindex 87f2b3279..74a32a1ea 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/PrintReads.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/PrintReads.java\n\n@@ -85,20 +85,19 @@ import org.broadinstitute.hellbender.utils.read.SAMFileGATKReadWriter;\n         programGroup = ReadDataManipulationProgramGroup.class\n )\n @DocumentedFeature\n-@RuntimeProperties(memoryRequirements = \"1GB\")\n+@RuntimeProperties(memory = \"1GB\")\n public final class PrintReads extends ReadWalker {\n \n-    @WorkflowResource(input=false, output=true, companionResources={StandardArgumentDefinitions.OUTPUT_LONG_NAME + \"companionIndex\"})\n+    @WorkflowResource(input=false, output=true, companionResources={StandardArgumentDefinitions.OUTPUT_LONG_NAME + \"CompanionIndex\"})\n     @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n             doc=\"Write output to this file\")\n-    public GATKPathSpecifier output;\n-\n+    public GATKPath output;\n     private SAMFileGATKReadWriter outputWriter;\n \n     @Override\n     public void onTraversalStart() {\n-        outputWriter = createSAMWriter(output.toPath(), true);\n+        outputWriter = createSAMWriter(output, true);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MjU5Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r423942593", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Given a ArgumentDefinition for an argument known to be of type FeatureInput (or a Collection thereof), retrieves the type\n          \n          \n            \n                 * Given an ArgumentDefinition for an argument known to be of type FeatureInput (or a Collection thereof), retrieves the type", "author": "jonn-smith", "createdAt": "2020-05-12T18:23:16Z", "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureManager.java", "diffHunk": "@@ -248,29 +247,29 @@ void addToFeatureSources(final int featureQueryLookahead, final FeatureInput<? e\n     }\n \n     /**\n-     * Given a Field known to be of type FeatureInput (or a Collection thereof), retrieves the type\n+     * Given a ArgumentDefinition for an argument known to be of type FeatureInput (or a Collection thereof), retrieves the type", "originalCommit": "c46d36293a8b26a3e3ad6d325a9cba5a6133f904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwNDQ4NA==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r444504484", "bodyText": "This commit is from another branch that was required for the new Barclay version, but thats been merged into master now and this is rebased on that, so this commit is gone.", "author": "cmnbroad", "createdAt": "2020-06-23T20:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MjU5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0Mjk1Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r423942952", "bodyText": "Can this be removed since it's commented out?", "author": "jonn-smith", "createdAt": "2020-05-12T18:23:54Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKHelpDocWorkUnitHandler.java", "diffHunk": "@@ -58,4 +64,27 @@ protected void addCustomBindings(final DocWorkUnit currentWorkUnit) {\n         }\n     }\n \n+//    @Override", "originalCommit": "c46d36293a8b26a3e3ad6d325a9cba5a6133f904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwNDU2Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r444504567", "bodyText": "Yeah, done.", "author": "cmnbroad", "createdAt": "2020-06-23T20:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0Mjk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b64e20ef8985d3424e1701ddf521517f4476157a", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKHelpDocWorkUnitHandler.java b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKHelpDocWorkUnitHandler.java\nindex 521026306..9abfe8b35 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKHelpDocWorkUnitHandler.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKHelpDocWorkUnitHandler.java\n\n@@ -64,27 +66,75 @@ public class GATKHelpDocWorkUnitHandler extends DefaultDocWorkUnitHandler {\n         }\n     }\n \n-//    @Override\n-//    protected String processNamedArgument(\n-//            final Map<String, Object> argBindings,\n-//            final NamedArgumentDefinition argDef,\n-//            final String fieldCommentText) {\n-//        final String argKind = super.processNamedArgument(argBindings, argDef, fieldCommentText);\n-//        // TODO: this fix requires an updated version of Barclay\n-//        // for the --read-filters and --annotations arguments, we need to artificially present the default\n-//        // values that are programmatically set by tools as if they were \"default\" values for the corresponding\n-//        // descriptor arguments so they show up in the doc\n-//        System.out.println(\"Argdef: \" + argDef.getLongName());\n-//        if (argDef.getLongName().equals(ReadFilterArgumentDefinitions.READ_FILTER_LONG_NAME) ||\n-//                 argDef.getLongName().equals(StandardArgumentDefinitions.ANNOTATION_LONG_NAME)) {\n-//            // add the default instances as default values for --disable-read-filter\n-//            System.out.println(\"descriptor owned: \" + argDef.getLongName());\n-//            argBindings.put(\"defaultValue\",\n-//                            argDef.getDescriptorForControllingPlugin().getDefaultInstances()\n-//                                    .stream()\n-//                                    .map(rf -> rf.getClass().getSimpleName())\n-//                                    .collect(Collectors.joining(\",\")));\n-//        }\n-//        return argKind;\n-//    }\n+    @Override\n+    protected void addDefaultPlugins(\n+            final DocWorkUnit currentWorkUnit,\n+            final List<? extends CommandLinePluginDescriptor<?>> pluginDescriptors) {\n+        super.addDefaultPlugins(currentWorkUnit, pluginDescriptors);\n+\n+        final String readFilterDescriptorName = new GATKReadFilterPluginDescriptor(\n+                Collections.emptyList()).getDisplayName();\n+        final String annotationDescriptorName = new GATKAnnotationPluginDescriptor(\n+                Collections.emptyList(),\n+                Collections.emptyList()).getDisplayName();\n+\n+        // for the --read-filters and --annotations arguments, we need to artificially present the default\n+        // plugin values that are programmatically set by tools as if they were \"default\" values for the corresponding\n+        // arguments so they show up in the doc for each tool\n+        pluginDescriptors.forEach(\n+                descriptor -> {\n+                    if (descriptor.getDisplayName().equals(readFilterDescriptorName)) {\n+                        propagatePluginDefaults(\n+                                currentWorkUnit,\n+                                readFilterDescriptorName,\n+                                ReadFilterArgumentDefinitions.READ_FILTER_LONG_NAME);\n+                    } else if (descriptor.getDisplayName().equals(annotationDescriptorName)) {\n+                        propagatePluginDefaults(\n+                                currentWorkUnit,\n+                                annotationDescriptorName,\n+                                StandardArgumentDefinitions.ANNOTATION_LONG_NAME);\n+                    }\n+                });\n+\n+    }\n+\n+    // add the default instances for plugin \"descriptorName\" as default values for \"targetArgumentName\"\n+    @SuppressWarnings(\"unchecked\")\n+    private void propagatePluginDefaults(\n+            final DocWorkUnit currentWorkUnit,\n+            final String descriptorName,\n+            final String targetArgumentName) {\n+        final List<String> defaultReadFilterNames = new ArrayList<>();\n+\n+        final HashSet<HashMap<String, Object>> defaultsForPlugins =\n+                (HashSet<HashMap<String, Object>>) currentWorkUnit.getProperty(descriptorName);\n+        if (defaultsForPlugins != null) {\n+            for (final HashMap<String, Object> pluginMap : defaultsForPlugins) {\n+                defaultReadFilterNames.add((String) pluginMap.get(\"name\"));\n+            }\n+        }\n+        final Map<String, List<Map<String, Object>>> argsMap =\n+                (Map<String, List<Map<String, Object>>>) currentWorkUnit.getProperty(\"arguments\");\n+        final List<Map<String, Object>> readFilterArgList =\n+                argsMap.get(\"all\").stream().filter(\n+                        m -> m.containsKey(\"name\") && m.get(\"name\").equals(\"--\" + targetArgumentName)\n+                ).collect(Collectors.toList());\n+        if (readFilterArgList.size() != 1) {\n+            throw new IllegalStateException(String.format(\"Can't find argument %s for descriptor %s in %s\",\n+                    targetArgumentName,\n+                    descriptorName,\n+                    currentWorkUnit.getClazz()));\n+        }\n+        final Map<String, Object> readFilterArg = readFilterArgList.get(0);\n+        final String oldDefaultValue = (String) readFilterArg.get(\"defaultValue\");\n+        if (oldDefaultValue != null &&\n+                oldDefaultValue.length() != 0 && !oldDefaultValue.equals(\"\") && !oldDefaultValue.equals(\"[]\")) {\n+            throw new IllegalStateException(String.format(\"%s argument property for argument %s for descriptor %s in %s is already populated\",\n+                    \"defaultValue\",\n+                    targetArgumentName,\n+                    currentWorkUnit.getClazz()));\n+        }\n+        readFilterArg.put(\"defaultValue\", defaultReadFilterNames.stream().collect(Collectors.joining(\", \")));\n+    }\n+\n }\n"}}, {"oid": "b64e20ef8985d3424e1701ddf521517f4476157a", "url": "https://github.com/broadinstitute/gatk/commit/b64e20ef8985d3424e1701ddf521517f4476157a", "message": "Temporarily do only womtool validation for WDL gen using Barclay pre-relase.", "committedDate": "2020-06-16T15:16:20Z", "type": "forcePushed"}, {"oid": "42e249378e79ba95db1c25b0175b292cbe47e7f2", "url": "https://github.com/broadinstitute/gatk/commit/42e249378e79ba95db1c25b0175b292cbe47e7f2", "message": "Fix WDL validation command and travis script, and suppress Java 11 removal warnings.", "committedDate": "2020-06-16T17:26:59Z", "type": "forcePushed"}, {"oid": "8e3560ebdc09a4e3628ec1a2298987bf54cdd71c", "url": "https://github.com/broadinstitute/gatk/commit/8e3560ebdc09a4e3628ec1a2298987bf54cdd71c", "message": "Update wdlGen folder def.", "committedDate": "2020-06-20T15:08:40Z", "type": "forcePushed"}, {"oid": "4c576e4203ee20bc49609200c82556e303f92065", "url": "https://github.com/broadinstitute/gatk/commit/4c576e4203ee20bc49609200c82556e303f92065", "message": "Temp commit with WDL/JSON outputs (one pair each of default, all args, test case).", "committedDate": "2020-06-22T13:12:32Z", "type": "forcePushed"}, {"oid": "b0920f09e07f1bc81f29210c877f6a4b3f4b9d5c", "url": "https://github.com/broadinstitute/gatk/commit/b0920f09e07f1bc81f29210c877f6a4b3f4b9d5c", "message": "Use a better companion index name in PrintReads.", "committedDate": "2020-06-23T14:05:47Z", "type": "forcePushed"}, {"oid": "4b3c42b637c7f1839225ee2d6e45049d9b2da09e", "url": "https://github.com/broadinstitute/gatk/commit/4b3c42b637c7f1839225ee2d6e45049d9b2da09e", "message": "Use a better companion index name in PrintReads.", "committedDate": "2020-06-23T16:29:14Z", "type": "forcePushed"}, {"oid": "3329cc6a62673abc75ffeddbb7eac46019fa8032", "url": "https://github.com/broadinstitute/gatk/commit/3329cc6a62673abc75ffeddbb7eac46019fa8032", "message": "Create the input test file in the right place on Travis.", "committedDate": "2020-06-23T18:56:00Z", "type": "forcePushed"}, {"oid": "45b362c50be1e0a53ef06b2e545fca1c172e0a00", "url": "https://github.com/broadinstitute/gatk/commit/45b362c50be1e0a53ef06b2e545fca1c172e0a00", "message": "Create the input test file in the right place on Travis.", "committedDate": "2020-06-23T20:09:53Z", "type": "forcePushed"}, {"oid": "70e1bbd906b9eb063a06a6108460c9458e3d5fa5", "url": "https://github.com/broadinstitute/gatk/commit/70e1bbd906b9eb063a06a6108460c9458e3d5fa5", "message": "Create the input test file in the right place on Travis.", "committedDate": "2020-06-23T20:50:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMzc5MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r447713791", "bodyText": "It might be worth adding in some documentation / naming the class to indicate that it really only validates the command line arguments for a given tool.", "author": "jonn-smith", "createdAt": "2020-06-30T14:10:55Z", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgramValidator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.broadinstitute.hellbender.cmdline;\n+\n+import org.broadinstitute.hellbender.exceptions.GATKException;\n+\n+/**\n+ * Adapter shim for use within GATK to run tools in command line validation mode. Note that this\n+ * class does not have it's own CommandLineProgramProperties annotation, and isn't intended to be\n+ * run directly from the command line.", "originalCommit": "70e1bbd906b9eb063a06a6108460c9458e3d5fa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NTI4NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r447995285", "bodyText": "Done.", "author": "cmnbroad", "createdAt": "2020-06-30T21:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMzc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6550649c31d90cf3b81484fd64ca0d14b83faa02", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgramValidator.java b/src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineArgumentValidator.java\nsimilarity index 56%\nrename from src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgramValidator.java\nrename to src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineArgumentValidator.java\nindex 398999942..4dde659a3 100644\n--- a/src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgramValidator.java\n+++ b/src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineArgumentValidator.java\n\n@@ -3,21 +3,23 @@ package org.broadinstitute.hellbender.cmdline;\n import org.broadinstitute.hellbender.exceptions.GATKException;\n \n /**\n- * Adapter shim for use within GATK to run tools in command line validation mode. Note that this\n- * class does not have it's own CommandLineProgramProperties annotation, and isn't intended to be\n- * run directly from the command line.\n+ * Adapter shim/alternate GATK entry point for use by GATK tests to run tools in command line argument\n+ * validation mode. This class does not actually tools, it only validates that the command line arguments\n+ * are legal for a given invocation.\n+ *\n+ * Note that this class does not have it's own CommandLineProgramProperties annotation.\n  */\n-public class CommandLineProgramValidator extends CommandLineProgram {\n+public class CommandLineArgumentValidator extends CommandLineProgram {\n \n-    // Our target command line program, to which we forward subsequent calls.\n+    // Our target command line program, to which we delegate arg parsing calls.\n     final private CommandLineProgram targetCommandLineProgram;\n \n-    public CommandLineProgramValidator(final CommandLineProgram targetCommandLineProgram) {\n+    public CommandLineArgumentValidator(final CommandLineProgram targetCommandLineProgram) {\n         this.targetCommandLineProgram = targetCommandLineProgram;\n     }\n \n     /**\n-     * Entry point to run command line validation only.\n+     * Entry point to run command line argument validation only.\n      */\n     @Override\n     public Object instanceMain(final String[] argv) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNjEyNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r447726125", "bodyText": "javadoc needs updating here", "author": "jonn-smith", "createdAt": "2020-06-30T14:26:43Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLDoclet.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+import org.apache.commons.io.FilenameUtils;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.RuntimeProperties;\n+import org.broadinstitute.barclay.help.*;\n+\n+import java.io.*;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Custom Barclay-based Javadoc Doclet used for generating tool WDL.\n+ *\n+ * NOTE: Methods in this class are intended to be called by Gradle/Javadoc only, and should not be called\n+ * by methods that are used by the GATK runtime. This class has a dependency on com.sun.javadoc classes,\n+ * which may not be present since they're not provided as part of the normal GATK runtime classpath.\n+ */\n+@SuppressWarnings(\"removal\")\n+public class GATKWDLDoclet extends WDLDoclet {\n+\n+    // emit an index file with links to all of the .wdl files\n+    private final static String GATK_FREEMARKER_INDEX_TEMPLATE_NAME = \"wdlIndexTemplate.html.ftl\";\n+\n+    // the directory where the wdlgen build is running\n+    public final static String OPT_BUILD_DIR = \"-build-dir\";\n+    private String buildDir;\n+\n+    /**\n+     * Validates the given options against options supported by this doclet.\n+     *\n+     * @param option Option to validate.\n+     * @return Number of potential parameters; 0 if not supported.\n+     */\n+    public static int optionLength(final String option) {\n+        // Any arguments used for the doclet need to be recognized here. Many javadoc plugins (ie. gradle)\n+        // automatically add some such as \"-doctitle\", \"-windowtitle\", which we ignore.\n+        if (option.equals(OPT_BUILD_DIR)) {\n+            return 2;\n+        }\n+        return WDLDoclet.optionLength(option);\n+    }\n+\n+    @Override\n+    protected boolean parseOption(final String[] option) {\n+        if (option[0].equals(OPT_BUILD_DIR)) {\n+            buildDir = option[1];\n+            return true;\n+        } else {\n+            return super.parseOption(option);\n+        }\n+    }\n+\n+    /**\n+     * Create a WDL doclet and generate the FreeMarker templates properties.\n+     * @param rootDoc\n+     * @throws IOException\n+     */\n+    public static boolean start(final com.sun.javadoc.RootDoc rootDoc) throws IOException {\n+        return new GATKWDLDoclet().startProcessDocs(rootDoc);\n+    }\n+\n+    /**\n+     * @return the location where the build is running; used in the cromwell validation tests to generate a dummy\n+     * input file to satisfy cromwell file localization\n+     */\n+    public String getBuildDir() { return buildDir; }\n+\n+    /**\n+     * Return the name of the freemarker template to be used for the index generated by Barclay.\n+     * For WDL gen, we create an index file that links to each of the generated WDL files.\n+     * Must reside in the folder passed to the Barclay Javadc Doclet via the \"-settings-dir\" parameter.\n+     * @return name of freemarker index template\n+     */\n+    @Override\n+    public String getIndexTemplateName() {\n+        return GATK_FREEMARKER_INDEX_TEMPLATE_NAME;\n+    }\n+\n+    /**\n+     * @return Create and return a DocWorkUnit-derived object to handle documentation\n+     * for the target feature(s) represented by documentedFeature.\n+     *\n+     * @param documentedFeature DocumentedFeature annotation for the target feature\n+     * @param classDoc javadoc classDoc for the target feature\n+     * @param clazz class of the target feature\n+     * @return DocWorkUnit to be used for this feature\n+     */\n+    @Override\n+    protected DocWorkUnit createWorkUnit(\n+            final DocumentedFeature documentedFeature,\n+            final com.sun.javadoc.ClassDoc classDoc,\n+            final Class<?> clazz)\n+    {\n+        return includeInDocs(documentedFeature, classDoc, clazz) ?\n+                // for WDL we don't need to customize the work unit, only the handler, so just use the\n+                // Barclay default WorkUnit class\n+                new DocWorkUnit(\n+                    new GATKWDLWorkUnitHandler(this),\n+                    documentedFeature,\n+                    classDoc,\n+                    clazz) :\n+                null;\n+    }\n+\n+    @Override\n+    protected void processWorkUnitTemplate(\n+            final Configuration cfg,\n+            final DocWorkUnit workUnit,\n+            final List<Map<String, String>> indexByGroupMaps,\n+            final List<Map<String, String>> featureMaps)\n+    {\n+        final String defaultWDLOutputFileName = workUnit.getTargetFileName();\n+        final String defaultJSONOutputFileName = workUnit.getJSONFileName();\n+\n+        // generate the default WDL and input JSON, which expose only required args\n+        exportWorkUnitTemplate(\n+                cfg,\n+                workUnit,\n+                workUnit.getTemplateName(),\n+                new File(getDestinationDir(), defaultWDLOutputFileName));\n+        exportWorkUnitTemplate(\n+                cfg,\n+                workUnit,\n+                \"wdlJSONTemplate.json.ftl\",\n+                new File(getDestinationDir(), defaultJSONOutputFileName));\n+\n+        // generate a second pair of files containing ALL arguments\n+        exportWorkUnitTemplate(\n+                cfg,\n+                workUnit,\n+                \"wdlToolTemplateAllArgs.wdl.ftl\",\n+                new File(getDestinationDir(),\n+                        String.format(\"%sAllArgs.%s\",\n+                                FilenameUtils.getBaseName(defaultWDLOutputFileName),\n+                                FilenameUtils.getExtension(defaultWDLOutputFileName)))\n+        );\n+        exportWorkUnitTemplate(\n+                cfg,\n+                workUnit,\n+                \"wdlJSONTemplateAllArgs.json.ftl\",\n+                new File(getDestinationDir(),\n+                        String.format(\"%sAllArgsInputs.json\",\n+                                FilenameUtils.getBaseName(defaultWDLOutputFileName)))\n+        );\n+\n+        // Finally, we need to emit a test WDL and JSON pair for use by the cromwell execution test (which\n+        // runs GATK in command line evaluation only mode). The JSON file is primed with dummy values for any\n+        // required args. The test WDL specifies no docker image, and has no runtime outputs, since in\n+        // command line validation mode no outputs are produced, so otherwise cromwell will fail attempting to\n+        // de-localize them.\n+        exportWorkUnitTemplate(\n+                cfg,\n+                workUnit,\n+                \"wdlToolTemplateAllArgsTest.wdl.ftl\",\n+                new File(getDestinationDir(),\n+                        String.format(\"%sAllArgsTest.%s\",\n+                                FilenameUtils.getBaseName(defaultWDLOutputFileName),\n+                                FilenameUtils.getExtension(defaultWDLOutputFileName)))\n+        );\n+        exportWorkUnitTemplate(\n+                cfg,\n+                workUnit,\n+                \"wdlJSONTemplateAllArgsTest.json.ftl\",\n+                new File(getDestinationDir(),\n+                        String.format(\"%sAllArgsTestInputs.json\",\n+                                FilenameUtils.getBaseName(defaultWDLOutputFileName)))\n+        );\n+    }\n+\n+    /**\n+     * Export the generated files from templates for a single work unit.\n+     *\n+     * @param cfg freemarker config\n+     * @param workUnit the WorkUnit being processed\n+     * @param wdlTemplateName name of the template to use\n+     * @param wdlOutputPath output file\n+     */\n+    protected final void exportWorkUnitTemplate(\n+            final Configuration cfg,\n+            final DocWorkUnit workUnit,\n+            final String wdlTemplateName,\n+            final File wdlOutputPath) {\n+        try {\n+            // Merge data-model with wdl template\n+            final Template wdlTemplate = cfg.getTemplate(wdlTemplateName);\n+            try (final Writer out = new OutputStreamWriter(new FileOutputStream(wdlOutputPath))) {\n+                wdlTemplate.process(workUnit.getRootMap(), out);\n+            }\n+        } catch (IOException e) {\n+            throw new DocException(\"IOException during documentation creation\", e);\n+        } catch (TemplateException e) {\n+            throw new DocException(\"TemplateException during documentation creation\", e);\n+        }\n+    }\n+\n+    /**\n+     * Adds a super-category so that we can custom-order the categories in the doc index\n+     *\n+     * @param docWorkUnit", "originalCommit": "70e1bbd906b9eb063a06a6108460c9458e3d5fa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NTMyOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r447995329", "bodyText": "Done.", "author": "cmnbroad", "createdAt": "2020-06-30T21:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNjEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6550649c31d90cf3b81484fd64ca0d14b83faa02", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLDoclet.java b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLDoclet.java\nindex 7fab27009..81781c3a9 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLDoclet.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLDoclet.java\n\n@@ -4,8 +4,6 @@ import freemarker.template.Configuration;\n import freemarker.template.Template;\n import freemarker.template.TemplateException;\n import org.apache.commons.io.FilenameUtils;\n-import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n-import org.broadinstitute.barclay.argparser.RuntimeProperties;\n import org.broadinstitute.barclay.help.*;\n \n import java.io.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMDI4OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r447730289", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Add the named argument {@code argDed}to the property map if applicable.\n          \n          \n            \n                 * Add the named argument {@code argDed} to the property map if applicable.", "author": "jonn-smith", "createdAt": "2020-06-30T14:31:54Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -0,0 +1,261 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import htsjdk.samtools.util.Iso8601Date;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import org.broadinstitute.barclay.argparser.*;\n+import org.broadinstitute.barclay.help.DocWorkUnit;\n+import org.broadinstitute.barclay.help.HelpDoclet;\n+import org.broadinstitute.barclay.help.WDLWorkUnitHandler;\n+import org.broadinstitute.hellbender.engine.FeatureInput;\n+import org.broadinstitute.hellbender.engine.GATKPath;\n+import org.broadinstitute.hellbender.exceptions.GATKException;\n+import picard.illumina.parser.ReadStructure;\n+\n+import java.util.*;\n+\n+// Note: WDL Gen doesn't handle arguments that accept tagged argument values\n+\n+/**\n+ * The GATK WDL work unit handler. Its main task is to convert the types for all arguments for a given work\n+ * unit (tool) from Java types to WDL-compatible types by updating the freemarker map with the transformed types.\n+ *\n+ * NOTE: Methods in this class are intended to be called by Gradle/Javadoc only, and should not be called\n+ * by methods that are used by the GATK runtime, as this class assumes a dependency on com.sun.javadoc classes\n+ * which may not be present.\n+ */\n+public class GATKWDLWorkUnitHandler extends WDLWorkUnitHandler {\n+\n+    private final static String GATK_FREEMARKER_TEMPLATE_NAME = \"wdlToolTemplate.wdl.ftl\";\n+\n+    // This must be kept in sync with the value used in build.gradle, where the file is created\n+    private final static String dummyWDLTestFileName = \"dummyWDLTestFile\";\n+\n+    // Map of Java argument types that the WDL generator knows how to convert to a WDL type, along with the\n+    // corresponding string substitution that needs to be run on the (Barclay-generated) string that describes\n+    // the type. From a purely string perspective, some of these transforms are no-ops in that no actual\n+    // conversion is required because the type names are identical in Java and WDL (i.e, File->File or\n+    // String->String), but they're included here for completeness, and to document the allowed type transitions.\n+    private final static Map<Class<?>, ImmutablePair<String, String>> javaToWDLTypeMap =\n+            new HashMap<Class<?>, ImmutablePair<String, String>>() {\n+                private static final long serialVersionUID = 1L;\n+                {\n+                    // GATK-specific File Types\n+                    put(GATKPath.class, new ImmutablePair<>(GATKPath.class.getSimpleName(), \"File\"));\n+                    // FeatureInputs require special handling to account for the generic type param(s)\n+                    put(FeatureInput.class, new ImmutablePair<>(FeatureInput.class.getSimpleName(), \"File\"));\n+\n+                    put(Iso8601Date.class, new ImmutablePair<>(Iso8601Date.class.getSimpleName(), \"String\"));\n+                    put(Date.class, new ImmutablePair<>(Date.class.getSimpleName(), \"String\"));\n+                    put(ReadStructure.class, new ImmutablePair<>(ReadStructure.class.getSimpleName(), \"String\"));\n+                }\n+        };\n+\n+    public GATKWDLWorkUnitHandler(final HelpDoclet doclet) {\n+        super(doclet);\n+    }\n+\n+    /**\n+     * @param workUnit the DocWorkUnit object being processed\n+     * @return the name of a the freemarker template to be used for the class being documented.\n+     * Must reside in the folder passed to the Barclay Doclet via the \"-settings-dir\" parameter to\n+     * Javadoc.\n+     */\n+    @Override\n+    public String getTemplateName(final DocWorkUnit workUnit) { return GATK_FREEMARKER_TEMPLATE_NAME; }\n+\n+    /**\n+     * Return the flat filename (no paths) that the handler would like the Doclet to\n+     * write out the documentation for workUnit.\n+     * @param workUnit\n+     * @return the name of the destination file to which documentation output will be written\n+     */\n+    @Override\n+    public String getDestinationFilename(final DocWorkUnit workUnit) {\n+        return workUnit.getClazz().getSimpleName() + \".wdl\";\n+    }\n+\n+    /**\n+     * Returns the JSON output file name.\n+     */\n+    @Override\n+    public String getJSONFilename(final DocWorkUnit workUnit) {\n+        return workUnit.getClazz().getSimpleName() + \"Inputs.json\";\n+    }\n+\n+    /**\n+     * Add the named argument {@code argDed}to the property map if applicable.", "originalCommit": "70e1bbd906b9eb063a06a6108460c9458e3d5fa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NTQxNw==", "url": "https://github.com/broadinstitute/gatk/pull/6504#discussion_r447995417", "bodyText": "Updated.", "author": "cmnbroad", "createdAt": "2020-06-30T21:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMDI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6550649c31d90cf3b81484fd64ca0d14b83faa02", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\nindex ea1588224..bb056f351 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java\n\n@@ -85,7 +85,7 @@ public class GATKWDLWorkUnitHandler extends WDLWorkUnitHandler {\n     }\n \n     /**\n-     * Add the named argument {@code argDed}to the property map if applicable.\n+     * Add the named argument {@code argDef}to the property map if applicable.\n      * @param currentWorkUnit current work unit\n      * @param args the freemarker arg map\n      * @param argDef the arg to add\n"}}, {"oid": "6550649c31d90cf3b81484fd64ca0d14b83faa02", "url": "https://github.com/broadinstitute/gatk/commit/6550649c31d90cf3b81484fd64ca0d14b83faa02", "message": "WDL generation.", "committedDate": "2020-06-30T17:22:15Z", "type": "forcePushed"}, {"oid": "6550649c31d90cf3b81484fd64ca0d14b83faa02", "url": "https://github.com/broadinstitute/gatk/commit/6550649c31d90cf3b81484fd64ca0d14b83faa02", "message": "WDL generation.", "committedDate": "2020-06-30T17:22:15Z", "type": "commit"}, {"oid": "62b7d5eb0e67302a0b47d0a0881b84a7067d26d2", "url": "https://github.com/broadinstitute/gatk/commit/62b7d5eb0e67302a0b47d0a0881b84a7067d26d2", "message": "Fix a template reference issue discvoered while testing with annotations on a separate branch.", "committedDate": "2020-06-30T19:14:18Z", "type": "commit"}]}