{"pr_number": 6959, "pr_title": "Sharded VCF output option", "pr_createdAt": "2020-11-14T00:49:18Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6959", "timeline": [{"oid": "e0c1a8074bdaf303efff53efe28345db6b55a214", "url": "https://github.com/broadinstitute/gatk/commit/e0c1a8074bdaf303efff53efe28345db6b55a214", "message": "Add sharding vcf output option to GATKTool", "committedDate": "2020-11-14T00:54:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNDYxMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527234611", "bodyText": "I know we can't predict how many shards there will be, but it would be nice to zero pad this to four digits so the shards (almost) always sort nicely.", "author": "ldgauthier", "createdAt": "2020-11-19T22:07:44Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.broadinstitute.hellbender.utils.variant.writers;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.FileExtensions;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import org.broadinstitute.hellbender.utils.variant.GATKVariantContextUtils;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Variant writer tha splits output to multiple VCFs given the maximum records per file. Before using {@link #add},\n+ * the header should be set using either {@link #setHeader} or {@link #writeHeader}, which may only be called once\n+ * and will determine whether headers are written to all shards.\n+ *\n+ * @author Mark Walker &lt;markw@broadinstitute.org&gt;\n+ */\n+public class ShardingVCFWriter implements VariantContextWriter {\n+\n+    public static final String SHARD_INDEX_PREFIX = \".shard_\";\n+    public static final String SHARD_INDEX_SUFFIX = FileExtensions.COMPRESSED_VCF;\n+\n+    private VariantContextWriter writer;\n+    private VCFHeader header;\n+    private final int maxVariantsPerShard;\n+    private final Path basePath;\n+    private final SAMSequenceDictionary dictionary;\n+    private final boolean createMD5;\n+    private final Options[] options;\n+\n+    /** Current shard  */\n+    private int shardIndex;\n+    /** Number of records written to current shard  */\n+    private int shardSize;\n+     /** Whether to write header, or null if header is undefined */\n+    private Boolean enableWriteHeader;\n+\n+    /**\n+     * Create a new sharding VCF writer\n+     *\n+     * @param basePath              base path of the output VCFs. The shard designation and file extension will be added.\n+     * @param maxVariantsPerShard   max number of records per file (last shard may have less)\n+     * @param dictionary            sequence dictionary for this writer\n+     * @param createMD5             enable MD5 file creation\n+     * @param options               vcf writer options\n+     */\n+    public ShardingVCFWriter(final Path basePath,\n+                             final int maxVariantsPerShard,\n+                             final SAMSequenceDictionary dictionary,\n+                             final boolean createMD5,\n+                             final Options... options) {\n+        Utils.nonNull(basePath);\n+        Utils.validateArg(maxVariantsPerShard > 0, \"maxVariantsPerShard must be positive\");\n+        this.basePath = IOUtils.removeExtension(basePath, FileExtensions.VCF_LIST);\n+        this.maxVariantsPerShard = maxVariantsPerShard;\n+        this.dictionary = dictionary;\n+        this.createMD5 = createMD5;\n+        this.options = options;\n+\n+        // Initialize first shard\n+        this.shardIndex = 0;\n+        this.shardSize = 0;\n+        this.writer = createNewWriter();\n+    }\n+\n+    /**\n+     * Initializes a new sharded file.\n+     */\n+    protected void createNextShard() {\n+        writer.close();\n+        shardIndex++;\n+        shardSize = 0;\n+        writer = createNewWriter();\n+        Utils.nonNull(header, \"Attempted to create new shard before header has been set\");\n+        initializeShardHeader();\n+    }\n+\n+    /**\n+     * Initializes shard header depending on which header function (set or write) was used\n+     */\n+    protected void initializeShardHeader() {\n+        if (enableWriteHeader != null) {\n+            if (enableWriteHeader.booleanValue()) {\n+                writer.writeHeader(header);\n+            } else {\n+                writer.setHeader(header);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates a writer for a new shard\n+     *\n+     * @return the new writer\n+     */\n+    protected VariantContextWriter createNewWriter() {\n+        final Path outPath = Paths.get(basePath + SHARD_INDEX_PREFIX + shardIndex + SHARD_INDEX_SUFFIX);", "originalCommit": "e0c1a8074bdaf303efff53efe28345db6b55a214", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM4Mzc1Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527383753", "bodyText": "Done (went to 5 zeros)", "author": "mwalker174", "createdAt": "2020-11-20T04:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNDYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "eaa208d3bc630fae78c9ea9654471095648fd2de", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java b/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java\nindex 94226f3b8..9ed2bb969 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java\n\n@@ -99,7 +99,7 @@ public class ShardingVCFWriter implements VariantContextWriter {\n      * @return the new writer\n      */\n     protected VariantContextWriter createNewWriter() {\n-        final Path outPath = Paths.get(basePath + SHARD_INDEX_PREFIX + shardIndex + SHARD_INDEX_SUFFIX);\n+        final Path outPath = Paths.get(getShardFilename(basePath, shardIndex));\n         return GATKVariantContextUtils.createVCFWriter(\n                 outPath,\n                 dictionary,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNTc5Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527235797", "bodyText": "Is this going to index as well?", "author": "ldgauthier", "createdAt": "2020-11-19T22:10:06Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.broadinstitute.hellbender.utils.variant.writers;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.FileExtensions;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import org.broadinstitute.hellbender.utils.variant.GATKVariantContextUtils;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Variant writer tha splits output to multiple VCFs given the maximum records per file. Before using {@link #add},\n+ * the header should be set using either {@link #setHeader} or {@link #writeHeader}, which may only be called once\n+ * and will determine whether headers are written to all shards.\n+ *\n+ * @author Mark Walker &lt;markw@broadinstitute.org&gt;\n+ */\n+public class ShardingVCFWriter implements VariantContextWriter {", "originalCommit": "e0c1a8074bdaf303efff53efe28345db6b55a214", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM3NTI3MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527375271", "bodyText": "Yes, that is specified through the options parameter", "author": "mwalker174", "createdAt": "2020-11-20T03:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNTc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "eaa208d3bc630fae78c9ea9654471095648fd2de", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java b/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java\nindex 94226f3b8..9ed2bb969 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java\n\n@@ -99,7 +99,7 @@ public class ShardingVCFWriter implements VariantContextWriter {\n      * @return the new writer\n      */\n     protected VariantContextWriter createNewWriter() {\n-        final Path outPath = Paths.get(basePath + SHARD_INDEX_PREFIX + shardIndex + SHARD_INDEX_SUFFIX);\n+        final Path outPath = Paths.get(getShardFilename(basePath, shardIndex));\n         return GATKVariantContextUtils.createVCFWriter(\n                 outPath,\n                 dictionary,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNjI4OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527236289", "bodyText": "11 doesn't jive with the 10 and 2 below", "author": "ldgauthier", "createdAt": "2020-11-19T22:11:04Z", "path": "src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java", "diffHunk": "@@ -64,4 +67,25 @@ public void testBrokenReferenceDictionaryErrorMessage() throws IOException {\n \n         runCommandLine(Arrays.asList(args), Mutect2.class.getSimpleName());\n     }\n+\n+    @Test\n+    public void testSharding() {\n+        final String outDir = createTempDir(\"GTShardedOutput\").getAbsolutePath();\n+        final String fileBase = \"test\";\n+        final String out = Paths.get(outDir, fileBase + FileExtensions.COMPRESSED_VCF).toString();\n+        final String[] args = new String[] {\n+                \"-V\",  TEST_DIRECTORY + \"example_variants_withSequenceDict.vcf\",\n+                \"-R\", hg19MiniReference,\n+                \"--\" + StandardArgumentDefinitions.MAX_VARIANTS_PER_SHARD_LONG_NAME, \"10\",\n+                \"-O\", out};\n+        runCommandLine(Arrays.asList(args), SelectVariants.class.getSimpleName());\n+\n+        // 11 total records in the test input should create 2 vcf shards with 10 and 1 records", "originalCommit": "e0c1a8074bdaf303efff53efe28345db6b55a214", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM4NzA3NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527387075", "bodyText": "Fixed", "author": "mwalker174", "createdAt": "2020-11-20T04:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNjI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eaa208d3bc630fae78c9ea9654471095648fd2de", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java\nindex 897792c70..74a50f525 100644\n--- a/src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java\n\n@@ -81,8 +81,9 @@ public class GatkToolIntegrationTest extends CommandLineProgramTest {\n         runCommandLine(Arrays.asList(args), SelectVariants.class.getSimpleName());\n \n         // 11 total records in the test input should create 2 vcf shards with 10 and 1 records\n-        final String firstShard = Paths.get(outDir, fileBase + ShardingVCFWriter.SHARD_INDEX_PREFIX + \"0\" + ShardingVCFWriter.SHARD_INDEX_SUFFIX).toString();\n-        final String secondShard = Paths.get(outDir, fileBase + ShardingVCFWriter.SHARD_INDEX_PREFIX + \"1\" + ShardingVCFWriter.SHARD_INDEX_SUFFIX).toString();\n+        final Path basePath = Paths.get(outDir, fileBase).toAbsolutePath();\n+        final String firstShard = ShardingVCFWriter.getShardFilename(basePath, 0);\n+        final String secondShard = ShardingVCFWriter.getShardFilename(basePath, 1);\n         final Pair<VCFHeader, List<VariantContext>> firstResults = VariantContextTestUtils.readEntireVCFIntoMemory(firstShard);\n         final Pair<VCFHeader, List<VariantContext>> secondResults = VariantContextTestUtils.readEntireVCFIntoMemory(secondShard);\n         Assert.assertEquals(firstResults.getValue().size(), 10, \"First shard has wrong number of records\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNjQ5OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527236499", "bodyText": "Having experienced a lot of pain from lack of indexes, let's check for those too.", "author": "ldgauthier", "createdAt": "2020-11-19T22:11:29Z", "path": "src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java", "diffHunk": "@@ -64,4 +67,25 @@ public void testBrokenReferenceDictionaryErrorMessage() throws IOException {\n \n         runCommandLine(Arrays.asList(args), Mutect2.class.getSimpleName());\n     }\n+\n+    @Test\n+    public void testSharding() {\n+        final String outDir = createTempDir(\"GTShardedOutput\").getAbsolutePath();\n+        final String fileBase = \"test\";\n+        final String out = Paths.get(outDir, fileBase + FileExtensions.COMPRESSED_VCF).toString();\n+        final String[] args = new String[] {\n+                \"-V\",  TEST_DIRECTORY + \"example_variants_withSequenceDict.vcf\",\n+                \"-R\", hg19MiniReference,\n+                \"--\" + StandardArgumentDefinitions.MAX_VARIANTS_PER_SHARD_LONG_NAME, \"10\",\n+                \"-O\", out};\n+        runCommandLine(Arrays.asList(args), SelectVariants.class.getSimpleName());\n+\n+        // 11 total records in the test input should create 2 vcf shards with 10 and 1 records\n+        final String firstShard = Paths.get(outDir, fileBase + ShardingVCFWriter.SHARD_INDEX_PREFIX + \"0\" + ShardingVCFWriter.SHARD_INDEX_SUFFIX).toString();\n+        final String secondShard = Paths.get(outDir, fileBase + ShardingVCFWriter.SHARD_INDEX_PREFIX + \"1\" + ShardingVCFWriter.SHARD_INDEX_SUFFIX).toString();\n+        final Pair<VCFHeader, List<VariantContext>> firstResults = VariantContextTestUtils.readEntireVCFIntoMemory(firstShard);\n+        final Pair<VCFHeader, List<VariantContext>> secondResults = VariantContextTestUtils.readEntireVCFIntoMemory(secondShard);\n+        Assert.assertEquals(firstResults.getValue().size(), 10, \"First shard has wrong number of records\");\n+        Assert.assertEquals(secondResults.getValue().size(), 2, \"Second shard has wrong number of records\");", "originalCommit": "e0c1a8074bdaf303efff53efe28345db6b55a214", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MDg5MA==", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527390890", "bodyText": "Done", "author": "mwalker174", "createdAt": "2020-11-20T04:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNjQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eaa208d3bc630fae78c9ea9654471095648fd2de", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java\nindex 897792c70..74a50f525 100644\n--- a/src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java\n\n@@ -81,8 +81,9 @@ public class GatkToolIntegrationTest extends CommandLineProgramTest {\n         runCommandLine(Arrays.asList(args), SelectVariants.class.getSimpleName());\n \n         // 11 total records in the test input should create 2 vcf shards with 10 and 1 records\n-        final String firstShard = Paths.get(outDir, fileBase + ShardingVCFWriter.SHARD_INDEX_PREFIX + \"0\" + ShardingVCFWriter.SHARD_INDEX_SUFFIX).toString();\n-        final String secondShard = Paths.get(outDir, fileBase + ShardingVCFWriter.SHARD_INDEX_PREFIX + \"1\" + ShardingVCFWriter.SHARD_INDEX_SUFFIX).toString();\n+        final Path basePath = Paths.get(outDir, fileBase).toAbsolutePath();\n+        final String firstShard = ShardingVCFWriter.getShardFilename(basePath, 0);\n+        final String secondShard = ShardingVCFWriter.getShardFilename(basePath, 1);\n         final Pair<VCFHeader, List<VariantContext>> firstResults = VariantContextTestUtils.readEntireVCFIntoMemory(firstShard);\n         final Pair<VCFHeader, List<VariantContext>> secondResults = VariantContextTestUtils.readEntireVCFIntoMemory(secondShard);\n         Assert.assertEquals(firstResults.getValue().size(), 10, \"First shard has wrong number of records\");\n"}}, {"oid": "1eed48b421528ff01dbc3cfac23e39518bada888", "url": "https://github.com/broadinstitute/gatk/commit/1eed48b421528ff01dbc3cfac23e39518bada888", "message": "Add sharding vcf output option to GATKTool", "committedDate": "2020-12-02T18:56:05Z", "type": "commit"}, {"oid": "eaa208d3bc630fae78c9ea9654471095648fd2de", "url": "https://github.com/broadinstitute/gatk/commit/eaa208d3bc630fae78c9ea9654471095648fd2de", "message": "Pad filename shard index with zeros", "committedDate": "2020-12-02T18:56:08Z", "type": "commit"}, {"oid": "06e4e43e82662fb638f718ff59a857739dcbcd6d", "url": "https://github.com/broadinstitute/gatk/commit/06e4e43e82662fb638f718ff59a857739dcbcd6d", "message": "Fix comment and add index file checks in GatkToolIntegrationTest", "committedDate": "2020-12-02T18:56:08Z", "type": "commit"}, {"oid": "06e4e43e82662fb638f718ff59a857739dcbcd6d", "url": "https://github.com/broadinstitute/gatk/commit/06e4e43e82662fb638f718ff59a857739dcbcd6d", "message": "Fix comment and add index file checks in GatkToolIntegrationTest", "committedDate": "2020-12-02T18:56:08Z", "type": "forcePushed"}]}