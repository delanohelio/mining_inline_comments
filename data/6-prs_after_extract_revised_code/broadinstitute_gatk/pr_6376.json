{"pr_number": 6376, "pr_title": "Yf fix GenotypeAlleleCount's toString", "pr_createdAt": "2020-01-15T14:00:48Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6376", "timeline": [{"oid": "940bf41a104fbcfa4ab3499626c17829b20e4fdc", "url": "https://github.com/broadinstitute/gatk/commit/940bf41a104fbcfa4ab3499626c17829b20e4fdc", "message": "added test for toString and fixed implementation (useful for debuging...)", "committedDate": "2020-01-15T13:54:31Z", "type": "commit"}, {"oid": "dfea6f489852e36a449ac339d549af037084d476", "url": "https://github.com/broadinstitute/gatk/commit/dfea6f489852e36a449ac339d549af037084d476", "message": "fixing linting suggestions", "committedDate": "2020-01-15T13:56:39Z", "type": "commit"}, {"oid": "5545dbfb18114eb05cda82beddf295d873b894fd", "url": "https://github.com/broadinstitute/gatk/commit/5545dbfb18114eb05cda82beddf295d873b894fd", "message": "formatting lines", "committedDate": "2020-01-15T13:56:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NDYyMw==", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368374623", "bodyText": "Can you avoid the multiplication * 2 at each iteration? Don't know if the VM will optimize this out. I wonder whether you could compare against sortedAlleleCounts.length but need to see the rest of the code to confirm.... too lazy\nIf you change this loop consider to skip the +2 increment on i and simple increase as it is need to access the index and count:\nfor (int i = 0; i < stop; ) {\n    int index = sortedAlleleCounts[i++];\n    int count = sortedAlleleCounts[i++];\n    ....\n}", "author": "vruano", "createdAt": "2020-01-20T05:27:55Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java", "diffHunk": "@@ -371,13 +371,12 @@ public String toUnphasedGenotypeString() {\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(distinctAlleleCount * 3);\n-        for (int i = 0; i < distinctAlleleCount; i += 2) {\n+        for (int i = 0; i < distinctAlleleCount * 2; i += 2) {", "originalCommit": "5545dbfb18114eb05cda82beddf295d873b894fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebebe1ebbb97fbd1968184a23ceb830f15858c56", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java\nindex 15073eea9..aa485933d 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java\n\n@@ -371,11 +372,12 @@ public final class GenotypeAlleleCounts implements Comparable<GenotypeAlleleCoun\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(distinctAlleleCount * 3);\n-        for (int i = 0; i < distinctAlleleCount * 2; i += 2) {\n-            final int alleleIndex = sortedAlleleCounts[i];\n-            final int alleleCount = sortedAlleleCounts[i + 1];\n+        final int upperBound = distinctAlleleCount * 2;\n+        for (int i = 0; i < upperBound;) {\n+            final int alleleIndex = sortedAlleleCounts[i++];\n+            final int alleleCount = sortedAlleleCounts[i++];\n             for (int j = 0; j < alleleCount; j++) {\n-                sb.append(alleleIndex).append('/');\n+                sb.append(alleleIndex).append(Genotype.UNPHASED_ALLELE_SEPARATOR);\n             }\n         }\n         sb.setLength(sb.length() - 1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NTEyMw==", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368375123", "bodyText": "Since counts is guaranteed not to be 0, then the string composition could be  rather:\nsb.append(index);\nfor (int j = 1; j < count; j++) {\n    sb.append('/').append(index);\n}\nreturn sb.toString();", "author": "vruano", "createdAt": "2020-01-20T05:30:37Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java", "diffHunk": "@@ -371,13 +371,12 @@ public String toUnphasedGenotypeString() {\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(distinctAlleleCount * 3);\n-        for (int i = 0; i < distinctAlleleCount; i += 2) {\n+        for (int i = 0; i < distinctAlleleCount * 2; i += 2) {\n             final int alleleIndex = sortedAlleleCounts[i];\n             final int alleleCount = sortedAlleleCounts[i + 1];\n             for (int j = 0; j < alleleCount; j++) {", "originalCommit": "5545dbfb18114eb05cda82beddf295d873b894fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMzE2OA==", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368613168", "bodyText": "no, you need to add a / after every allele, not only the alleles with counts >1. think about 0/1, whose sortedAlleleCounts array is (0,1,1,1)....", "author": "yfarjoun", "createdAt": "2020-01-20T15:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY4NTMwMg==", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368685302", "bodyText": "index is 0 and 1, count is 1 and 1. ... (index=0, count=1) ... then (index=1, count=1). count is always 1 or larger or that is my understanding....\nat least in the example that you are giving count for both alleles (0 and 1) is 1 (the second number of the pair. (0, 1, 1, 1) is decomposed into (0, 1) and (1, 1)", "author": "vruano", "createdAt": "2020-01-20T18:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY4NTg0Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368685847", "bodyText": "In any case you could leave the code as it is... just noticed this optimization opportunity near your change so I suggested the edit but it has no concern with fix, so.", "author": "vruano", "createdAt": "2020-01-20T18:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NTEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "ebebe1ebbb97fbd1968184a23ceb830f15858c56", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java\nindex 15073eea9..aa485933d 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java\n\n@@ -371,11 +372,12 @@ public final class GenotypeAlleleCounts implements Comparable<GenotypeAlleleCoun\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(distinctAlleleCount * 3);\n-        for (int i = 0; i < distinctAlleleCount * 2; i += 2) {\n-            final int alleleIndex = sortedAlleleCounts[i];\n-            final int alleleCount = sortedAlleleCounts[i + 1];\n+        final int upperBound = distinctAlleleCount * 2;\n+        for (int i = 0; i < upperBound;) {\n+            final int alleleIndex = sortedAlleleCounts[i++];\n+            final int alleleCount = sortedAlleleCounts[i++];\n             for (int j = 0; j < alleleCount; j++) {\n-                sb.append(alleleIndex).append('/');\n+                sb.append(alleleIndex).append(Genotype.UNPHASED_ALLELE_SEPARATOR);\n             }\n         }\n         sb.setLength(sb.length() - 1);\n"}}, {"oid": "ebebe1ebbb97fbd1968184a23ceb830f15858c56", "url": "https://github.com/broadinstitute/gatk/commit/ebebe1ebbb97fbd1968184a23ceb830f15858c56", "message": "- responded to review suggestions\n- made tests more explicit\n- added some more tests", "committedDate": "2020-01-20T15:56:21Z", "type": "commit"}, {"oid": "a9f06b4b21a70a09124b294c2a1add98ec111156", "url": "https://github.com/broadinstitute/gatk/commit/a9f06b4b21a70a09124b294c2a1add98ec111156", "message": "- agreed with IntelliJ suggestions.", "committedDate": "2020-01-20T15:57:43Z", "type": "commit"}]}