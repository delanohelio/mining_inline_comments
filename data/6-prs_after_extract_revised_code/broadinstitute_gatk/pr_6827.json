{"pr_number": 6827, "pr_title": "ah update array extract tool", "pr_createdAt": "2020-09-16T16:08:20Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6827", "timeline": [{"oid": "8853098507a98907a03e3d8ecd9fa319e4e6fd7f", "url": "https://github.com/broadinstitute/gatk/commit/8853098507a98907a03e3d8ecd9fa319e4e6fd7f", "message": "remove compressed data, change GT to single char", "committedDate": "2020-09-16T16:07:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2NjgyOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6827#discussion_r490466829", "bodyText": "Can you say in the doc here what is excluded since it's not that many fields (NORMX, NORMY, LLR, and BAF)", "author": "meganshand", "createdAt": "2020-09-17T18:24:02Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohort.java", "diffHunk": "@@ -98,6 +98,12 @@\n     )\n     private String cohortTable = null;\n \n+    @Argument(\n+            fullName = \"gt-only\",\n+            doc = \"If true, only get the genotype info\",", "originalCommit": "8853098507a98907a03e3d8ecd9fa319e4e6fd7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30bab6dba69d61b9cb39d8e6a4c84d283d7feea2", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohort.java b/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohort.java\nindex 02cb94655..8bd0d03f0 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohort.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohort.java\n\n@@ -100,7 +100,7 @@ public class ArrayExtractCohort extends GATKTool {\n \n     @Argument(\n             fullName = \"gt-only\",\n-            doc = \"If true, only get the genotype info\",\n+            doc = \"If true, only get the genotype info. Otherwise include NORMX, NORMY, BAF, and LRR\",\n             optional = true)\n     private boolean gtDataOnly = false;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3Mzg4Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6827#discussion_r490473882", "bodyText": "Do you need this default here?", "author": "meganshand", "createdAt": "2020-09-17T18:36:43Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java", "diffHunk": "@@ -266,9 +274,108 @@ private VariantContext createVariantContextFromSampleRecord(final ProbeInfo prob\n         builder.chr(contig);\n         builder.start(startPosition);\n         builder.id(probeInfo.name);\n-        \n+\n+        final List<Allele> alleles = createAllelesFromProbeInfo(probeInfo);\n+\n+        builder.alleles(alleles);\n+        builder.stop(startPosition + alleles.get(0).length() - 1);\n+\n+        List<Allele> genotypeAlleles = new ArrayList<Allele>();\n+\n+        Object gtObj = sampleRecord.get(RawArrayFieldEnum.GT_encoded.name());\n+        GT_encoding gt;\n+        if (gtObj == null) {\n+            gt = RawArrayTsvCreator.value_to_drop;\n+        } else {\n+            gt = GT_encoding.getGTEncodingFromValue(gtObj.toString());\n+        }\n+\n+        switch (gt) {\n+            case HOM_REF:\n+                genotypeAlleles.add(alleles.get(0));\n+                genotypeAlleles.add(alleles.get(0));\n+                break;\n+            case HET0_1:\n+                genotypeAlleles.add(alleles.get(0));\n+                genotypeAlleles.add(alleles.get(1));\n+                break;\n+            case HOM_VAR:\n+                genotypeAlleles.add(alleles.get(1));\n+                genotypeAlleles.add(alleles.get(1));\n+                break;\n+            case HET1_2:\n+                genotypeAlleles.add(alleles.get(1));\n+                genotypeAlleles.add(alleles.get(2));\n+                break;\n+            case HOM_ALT2:\n+                genotypeAlleles.add(alleles.get(2));\n+                genotypeAlleles.add(alleles.get(2));\n+                break;\n+            case MISSING:\n+            default:", "originalCommit": "8853098507a98907a03e3d8ecd9fa319e4e6fd7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30bab6dba69d61b9cb39d8e6a4c84d283d7feea2", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java b/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java\nindex 1dd44d767..48365d5bb 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java\n\n@@ -312,7 +312,6 @@ public class ArrayExtractCohortEngine {\n                 genotypeAlleles.add(alleles.get(2));\n                 break;\n             case MISSING:\n-            default:\n                 genotypeAlleles.add(Allele.NO_CALL);\n                 genotypeAlleles.add(Allele.NO_CALL);\n                 break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3Nzk1OA==", "url": "https://github.com/broadinstitute/gatk/pull/6827#discussion_r490477958", "bodyText": "Is the diff just being weird or should the code below be deleted since it was moved to createAllelesFromProbeInfo?", "author": "meganshand", "createdAt": "2020-09-17T18:44:03Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java", "diffHunk": "@@ -266,9 +274,108 @@ private VariantContext createVariantContextFromSampleRecord(final ProbeInfo prob\n         builder.chr(contig);\n         builder.start(startPosition);\n         builder.id(probeInfo.name);\n-        \n+\n+        final List<Allele> alleles = createAllelesFromProbeInfo(probeInfo);\n+\n+        builder.alleles(alleles);\n+        builder.stop(startPosition + alleles.get(0).length() - 1);\n+\n+        List<Allele> genotypeAlleles = new ArrayList<Allele>();\n+\n+        Object gtObj = sampleRecord.get(RawArrayFieldEnum.GT_encoded.name());\n+        GT_encoding gt;\n+        if (gtObj == null) {\n+            gt = RawArrayTsvCreator.value_to_drop;\n+        } else {\n+            gt = GT_encoding.getGTEncodingFromValue(gtObj.toString());\n+        }\n+\n+        switch (gt) {\n+            case HOM_REF:\n+                genotypeAlleles.add(alleles.get(0));\n+                genotypeAlleles.add(alleles.get(0));\n+                break;\n+            case HET0_1:\n+                genotypeAlleles.add(alleles.get(0));\n+                genotypeAlleles.add(alleles.get(1));\n+                break;\n+            case HOM_VAR:\n+                genotypeAlleles.add(alleles.get(1));\n+                genotypeAlleles.add(alleles.get(1));\n+                break;\n+            case HET1_2:\n+                genotypeAlleles.add(alleles.get(1));\n+                genotypeAlleles.add(alleles.get(2));\n+                break;\n+            case HOM_ALT2:\n+                genotypeAlleles.add(alleles.get(2));\n+                genotypeAlleles.add(alleles.get(2));\n+                break;\n+            case MISSING:\n+            default:\n+                genotypeAlleles.add(Allele.NO_CALL);\n+                genotypeAlleles.add(Allele.NO_CALL);\n+                break;\n+        }\n+\n+        genotypeBuilder.alleles(genotypeAlleles);\n+\n+        if (!gtDataOnly) {\n+            genotypeBuilder.attribute(RawArrayTsvCreator.NORMX, formatFloatForVcf(getNullableFloatFromDouble(sampleRecord.get(RawArrayFieldEnum.NORMX.name()))));\n+            genotypeBuilder.attribute(RawArrayTsvCreator.NORMY, formatFloatForVcf(getNullableFloatFromDouble(sampleRecord.get(RawArrayFieldEnum.NORMY.name()))));\n+            genotypeBuilder.attribute(RawArrayTsvCreator.BAF, formatFloatForVcf(getNullableFloatFromDouble(sampleRecord.get(RawArrayFieldEnum.BAF.name()))));\n+            genotypeBuilder.attribute(RawArrayTsvCreator.LRR, formatFloatForVcf(getNullableFloatFromDouble(sampleRecord.get(RawArrayFieldEnum.LRR.name()))));\n+        }\n+\n+        genotypeBuilder.name(sample);\n+\n+        builder.genotypes(genotypeBuilder.make());\n+\n+        try {\n+            VariantContext vc = builder.make();\n+            return vc;\n+        } catch (Exception e) {\n+            System.out.println(\"Error: \"+ e.getMessage() + \" processing \" + sampleRecord + \" PI: \" + probeInfo.alleleA + \"/\" +probeInfo.alleleB + \" with ga \" + genotypeAlleles + \" and alleles \" + alleles);\n+            throw e;\n+        }\n+\n+    }\n+\n+    List<Allele> createAllelesFromProbeInfo(final ProbeInfo probeInfo) {\n         final List<Allele> alleles = new ArrayList<>();\n-        Allele ref = Allele.create(probeInfo.ref, true);        \n+        Allele ref = Allele.create(probeInfo.ref, true);\n+        alleles.add(ref);\n+\n+        Allele alleleA = Allele.create(probeInfo.alleleA, false);\n+        Allele alleleB = Allele.create(probeInfo.alleleB, false);\n+\n+        boolean alleleAisRef = probeInfo.ref.equals(probeInfo.alleleA);\n+        boolean alleleBisRef = probeInfo.ref.equals(probeInfo.alleleB);\n+\n+        if (alleleAisRef) {\n+            alleleA = ref;\n+        } else {\n+            alleles.add(alleleA);\n+        }\n+\n+        if (alleleBisRef) {\n+            alleleB = ref;\n+        } else {\n+            alleles.add(alleleB);\n+        }\n+        return alleles;\n+    }\n+\n+        private VariantContext createVariantContextFromSampleRecordLegacyGT(final ProbeInfo probeInfo, final GenericRecord sampleRecord, final Set<String> columnNames, final String contig, final long startPosition, final String sample) {\n+        final VariantContextBuilder builder = new VariantContextBuilder();\n+        final GenotypeBuilder genotypeBuilder = new GenotypeBuilder();\n+\n+        builder.chr(contig);\n+        builder.start(startPosition);\n+        builder.id(probeInfo.name);\n+\n+        List<Allele> alleles = createAllelesFromProbeInfo(probeInfo);\n+        Allele ref = Allele.create(probeInfo.ref, true);", "originalCommit": "8853098507a98907a03e3d8ecd9fa319e4e6fd7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTcwNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6827#discussion_r490551705", "bodyText": "oh, i need to change createAlleles... back to just new ArrayList.\nthis version of the methods need to know alleleA and alleleB so there is some duplicate code while we are supporting the legacy mode.", "author": "ahaessly", "createdAt": "2020-09-17T20:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3Nzk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "30bab6dba69d61b9cb39d8e6a4c84d283d7feea2", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java b/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java\nindex 1dd44d767..48365d5bb 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java\n\n@@ -312,7 +312,6 @@ public class ArrayExtractCohortEngine {\n                 genotypeAlleles.add(alleles.get(2));\n                 break;\n             case MISSING:\n-            default:\n                 genotypeAlleles.add(Allele.NO_CALL);\n                 genotypeAlleles.add(Allele.NO_CALL);\n                 break;\n"}}, {"oid": "30bab6dba69d61b9cb39d8e6a4c84d283d7feea2", "url": "https://github.com/broadinstitute/gatk/commit/30bab6dba69d61b9cb39d8e6a4c84d283d7feea2", "message": "updated from PR feedback", "committedDate": "2020-09-17T20:50:32Z", "type": "commit"}]}