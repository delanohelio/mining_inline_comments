{"pr_number": 6757, "pr_title": "Enable re-reblocking with no PLs", "pr_createdAt": "2020-08-18T18:02:05Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6757", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNjI3MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513126271", "bodyText": "END= annotation is not exclusive of hom-ref blocks, right? I guess within the context this method is used it is though. Perhaps can you add a comment indicating so.", "author": "vruano", "createdAt": "2020-10-28T01:29:01Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -256,7 +266,7 @@ private VariantContext regenotypeVC(final VariantContext originalVC) {\n     }\n \n     private boolean isHomRefBlock(final VariantContext result) {\n-        return result.getLog10PError() == VariantContext.NO_LOG10_PERROR;\n+        return result.hasAttribute(VCFConstants.END_KEY);", "originalCommit": "613525738733233e46f44532ad3be73ec4ff3560", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd1398afdb703df59efbfc13d5b4096210480fc", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\nindex 3e986eb8f..ff5173d78 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\n\n@@ -266,7 +266,7 @@ public final class ReblockGVCF extends VariantWalker {\n     }\n \n     private boolean isHomRefBlock(final VariantContext result) {\n-        return result.hasAttribute(VCFConstants.END_KEY);\n+        return result.getAlternateAlleles().contains(Allele.NON_REF_ALLELE) && result.hasAttribute(VCFConstants.END_KEY);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyODU1MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513128551", "bodyText": "Shouldn't hasGQ be called before any getGQ?  Shouldn't it even fail if not?\nPerhaps you could force rgpThreshold to be 0 or greater in that case the == 0 is unnecessary. Fail if it is no in [0.0 ... MAX_VALUE] (so negatives, NaN and Infinities would fail).\nAlso based on the description of rgpThreshold sounds like these comparisons should < rather than <=. Perhaps the doc of the argument should be changed.", "author": "vruano", "createdAt": "2020-10-28T01:37:23Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -272,10 +282,34 @@ private boolean isHomRefCall(final VariantContext result) {\n \n     private VariantContext filterHomRefBlock(final VariantContext result) {\n         final Genotype genotype = result.getGenotype(0);\n-        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0)) {\n+        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0 || !genotype.hasGQ())) {", "originalCommit": "613525738733233e46f44532ad3be73ec4ff3560", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd1398afdb703df59efbfc13d5b4096210480fc", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\nindex 3e986eb8f..ff5173d78 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\n\n@@ -282,18 +282,17 @@ public final class ReblockGVCF extends VariantWalker {\n \n     private VariantContext filterHomRefBlock(final VariantContext result) {\n         final Genotype genotype = result.getGenotype(0);\n-        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0 || !genotype.hasGQ())) {\n+        if (dropLowQuals && (!genotype.hasGQ() || genotype.getGQ() < rgqThreshold || genotype.getGQ() == 0)) {\n             return null;\n         }\n         else if (genotype.isCalled() && genotype.isHomRef()) {\n             if (!genotype.hasPL()) {\n                 if (genotype.hasGQ()) {\n                     logger.warn(\"PL is missing for hom ref genotype at at least one position for sample \" + genotype.getSampleName() + \": \" + result.getContig() + \":\" + result.getStart() +\n-                            \".\");\n+                            \".  Using GQ to determine quality.\");\n                     final int gq = genotype.getGQ();\n                     final GenotypeBuilder gBuilder = new GenotypeBuilder(genotype);\n                     final VariantContextBuilder vcBuilder = new VariantContextBuilder(result);\n-                    //vcBuilder.genotypes(gBuilder.GQ(gq).PL(new int[]{0,gq,2*gq}).make());\n                     vcBuilder.genotypes(gBuilder.GQ(gq).make());\n                     return vcBuilder.make();\n                 } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyOTQwOA==", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513129408", "bodyText": "Perhaps the warning message should say that we are using GQ in leu.", "author": "vruano", "createdAt": "2020-10-28T01:40:52Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -272,10 +282,34 @@ private boolean isHomRefCall(final VariantContext result) {\n \n     private VariantContext filterHomRefBlock(final VariantContext result) {\n         final Genotype genotype = result.getGenotype(0);\n-        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0)) {\n+        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0 || !genotype.hasGQ())) {\n             return null;\n         }\n         else if (genotype.isCalled() && genotype.isHomRef()) {\n+            if (!genotype.hasPL()) {\n+                if (genotype.hasGQ()) {\n+                    logger.warn(\"PL is missing for hom ref genotype at at least one position for sample \" + genotype.getSampleName() + \": \" + result.getContig() + \":\" + result.getStart() +", "originalCommit": "613525738733233e46f44532ad3be73ec4ff3560", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd1398afdb703df59efbfc13d5b4096210480fc", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\nindex 3e986eb8f..ff5173d78 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\n\n@@ -282,18 +282,17 @@ public final class ReblockGVCF extends VariantWalker {\n \n     private VariantContext filterHomRefBlock(final VariantContext result) {\n         final Genotype genotype = result.getGenotype(0);\n-        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0 || !genotype.hasGQ())) {\n+        if (dropLowQuals && (!genotype.hasGQ() || genotype.getGQ() < rgqThreshold || genotype.getGQ() == 0)) {\n             return null;\n         }\n         else if (genotype.isCalled() && genotype.isHomRef()) {\n             if (!genotype.hasPL()) {\n                 if (genotype.hasGQ()) {\n                     logger.warn(\"PL is missing for hom ref genotype at at least one position for sample \" + genotype.getSampleName() + \": \" + result.getContig() + \":\" + result.getStart() +\n-                            \".\");\n+                            \".  Using GQ to determine quality.\");\n                     final int gq = genotype.getGQ();\n                     final GenotypeBuilder gBuilder = new GenotypeBuilder(genotype);\n                     final VariantContextBuilder vcBuilder = new VariantContextBuilder(result);\n-                    //vcBuilder.genotypes(gBuilder.GQ(gq).PL(new int[]{0,gq,2*gq}).make());\n                     vcBuilder.genotypes(gBuilder.GQ(gq).make());\n                     return vcBuilder.make();\n                 } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzMTgyMg==", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513131822", "bodyText": "Should this be an error instead of a warning?\nActually it really should as below there is code that clearly depends on it being a diploid and even may result in exception if not. Error makes more sense.", "author": "vruano", "createdAt": "2020-10-28T01:49:57Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -190,7 +198,9 @@ public void onTraversalStart() {\n         }\n         vcfWriter.writeHeader(new VCFHeader(headerLines, inputHeader.getGenotypeSamples()));\n \n-        logger.info(\"Notice that the -ploidy parameter is ignored in \" + getClass().getSimpleName() + \" tool as this is tool assumes a diploid sample\");\n+        if (genotypeArgs.samplePloidy != PLOIDY_TWO) {", "originalCommit": "613525738733233e46f44532ad3be73ec4ff3560", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd1398afdb703df59efbfc13d5b4096210480fc", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\nindex 3e986eb8f..ff5173d78 100644\n--- a/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\n+++ b/src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java\n\n@@ -199,7 +199,7 @@ public final class ReblockGVCF extends VariantWalker {\n         vcfWriter.writeHeader(new VCFHeader(headerLines, inputHeader.getGenotypeSamples()));\n \n         if (genotypeArgs.samplePloidy != PLOIDY_TWO) {\n-            logger.warn(\"The -ploidy parameter is ignored in \" + getClass().getSimpleName() + \" tool as this is tool assumes a diploid sample\");\n+            throw new UserException.BadInput(\"The -ploidy parameter is ignored in \" + getClass().getSimpleName() + \" tool as this is tool assumes a diploid sample\");\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTE3Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513139172", "bodyText": "I would compact the two last elses as minGQ = minGQ == -1 ? genotype.getGQ() : Math.min(...);", "author": "vruano", "createdAt": "2020-10-28T02:17:04Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlock.java", "diffHunk": "@@ -124,6 +128,15 @@ public void add(final int pos, final int newEnd, final Genotype genotype) {\n                 }\n             }\n         }\n+        if (minPPs != null) {\n+            minGQ = GATKVariantContextUtils.calculateGQFromPLs(minPPs);\n+        } else if (minPLs != null) {\n+            minGQ = GATKVariantContextUtils.calculateGQFromPLs(minPLs);\n+        } else if (minGQ == -1) {\n+            minGQ = genotype.getGQ();", "originalCommit": "613525738733233e46f44532ad3be73ec4ff3560", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd1398afdb703df59efbfc13d5b4096210480fc", "chunk": "diff --git a/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlock.java b/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlock.java\nindex 60042a330..02c7127ec 100644\n--- a/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlock.java\n+++ b/src/main/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlock.java\n\n@@ -132,10 +132,8 @@ final class HomRefBlock extends GVCFBlock {\n             minGQ = GATKVariantContextUtils.calculateGQFromPLs(minPPs);\n         } else if (minPLs != null) {\n             minGQ = GATKVariantContextUtils.calculateGQFromPLs(minPLs);\n-        } else if (minGQ == -1) {\n-            minGQ = genotype.getGQ();\n         } else {\n-            minGQ = Math.min(minGQ, genotype.getGQ());\n+            minGQ = minGQ == -1 ? genotype.getGQ() : Math.min(minGQ, genotype.getGQ());\n         }\n \n         end = newEnd;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTcxNg==", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513139716", "bodyText": "This test seems a bit weak.... can you do a more through test e.g. the unaffected blocks should be in the same order and unchanged... etc.", "author": "vruano", "createdAt": "2020-10-28T02:19:14Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFIntegrationTest.java", "diffHunk": "@@ -185,4 +185,19 @@ public void testMQHeadersAreUpdated() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testReReblocking() {\n+        final File input = new File(getToolTestDataDir() + \"alreadyReblocked.chr22snippet.vcf\");\n+        final File output = createTempFile(\"rereblockedgvcf\", \".vcf\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.add(\"V\", input)\n+                .addOutput(output);\n+        runCommandLine(args);\n+\n+        Pair<VCFHeader, List<VariantContext>> inputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(input.getAbsolutePath());\n+        Pair<VCFHeader, List<VariantContext>> outputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(output.getAbsolutePath());\n+\n+        Assert.assertTrue(inputVCs.getRight().size() > outputVCs.getRight().size());", "originalCommit": "613525738733233e46f44532ad3be73ec4ff3560", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd1398afdb703df59efbfc13d5b4096210480fc", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFIntegrationTest.java\nindex 91d0b90fd..4d5c288ca 100644\n--- a/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFIntegrationTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFIntegrationTest.java\n\n@@ -195,9 +194,23 @@ public class ReblockGVCFIntegrationTest extends CommandLineProgramTest {\n                 .addOutput(output);\n         runCommandLine(args);\n \n-        Pair<VCFHeader, List<VariantContext>> inputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(input.getAbsolutePath());\n-        Pair<VCFHeader, List<VariantContext>> outputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(output.getAbsolutePath());\n-\n-        Assert.assertTrue(inputVCs.getRight().size() > outputVCs.getRight().size());\n+        final List<VariantContext> inputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(input.getAbsolutePath()).getRight();\n+        final List<VariantContext> outputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(output.getAbsolutePath()).getRight();\n+\n+        Assert.assertTrue(inputVCs.size() > outputVCs.size());\n+        Assert.assertTrue(outputVCs.size() == 19);\n+        //hom ref blocks change, but variants stay the same\n+        Assert.assertEquals(inputVCs.stream().filter(vc -> !vc.getGenotype(0).isHomRef()).count(), outputVCs.stream().filter(vc -> !vc.getGenotype(0).isHomRef()).count());\n+        List<String> inGenotypes= inputVCs.stream().filter(vc -> !vc.getGenotype(0).isHomRef()).map(vc -> vc.getGenotype(0)).map(Genotype::toString).collect(Collectors.toList());\n+        List<String> outGenotypes = outputVCs.stream().filter(vc -> !vc.getGenotype(0).isHomRef()).map(vc -> vc.getGenotype(0)).map(Genotype::toString).collect(Collectors.toList());\n+        Assert.assertTrue(inGenotypes.containsAll(outGenotypes)); //will check ref and alt alleles as part of genotype string representation\n+        Assert.assertTrue(outputVCs.get(18).isVariant());\n+\n+        //all ref blocks have MIN_DP\n+        Assert.assertEquals(outputVCs.stream().filter(vc -> vc.getGenotype(0).hasExtendedAttribute(GATKVCFConstants.MIN_DP_FORMAT_KEY)).count(), outputVCs.size() - outGenotypes.size());\n+        //all variants have GQ\n+        Assert.assertEquals(outputVCs.stream().filter(vc -> vc.getGenotype(0).hasGQ()).count(), outputVCs.size());\n+        //we didn't ask to drop GQ0s, but they might get merged together\n+        Assert.assertEquals(inputVCs.stream().anyMatch(vc -> vc.getGenotype(0).getGQ() == 0), outputVCs.stream().anyMatch(vc -> vc.getGenotype(0).getGQ() == 0));\n     }\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MDY3Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513140676", "bodyText": "Looks a bit weak of a test. Anything else that can be tested", "author": "vruano", "createdAt": "2020-10-28T02:22:56Z", "path": "src/test/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlockUnitTest.java", "diffHunk": "@@ -110,6 +110,22 @@ public void testCantAddDifferentNumbersOfPls(){\n         band.add(vc.getStart() + 1, getValidGenotypeBuilder().PL(new int[] {1,2,4,5,6}).make() );\n     }\n \n+    @Test\n+    public void testNoPLs() {\n+        //add VC with no PLs to block with PLs\n+        final VariantContext vc = getVariantContext();\n+        final GVCFBlock band = getHomRefBlock(getVariantContext());\n+        band.add(vc.getStart(), getValidGenotypeBuilder().make() );\n+        band.add(vc.getStart() + 1, getValidGenotypeBuilder().noPL().make());\n+        Assert.assertTrue(band.getSize() == 2);", "originalCommit": "613525738733233e46f44532ad3be73ec4ff3560", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcd1398afdb703df59efbfc13d5b4096210480fc", "chunk": "diff --git a/src/test/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlockUnitTest.java b/src/test/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlockUnitTest.java\nindex 6f5728f02..7268dc1c0 100644\n--- a/src/test/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlockUnitTest.java\n+++ b/src/test/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlockUnitTest.java\n\n@@ -114,20 +114,33 @@ public class HomRefBlockUnitTest extends GATKBaseTest {\n     public void testNoPLs() {\n         //add VC with no PLs to block with PLs\n         final VariantContext vc = getVariantContext();\n-        final GVCFBlock band = getHomRefBlock(getVariantContext());\n+        final HomRefBlock band = getHomRefBlock(getVariantContext());\n+        Assert.assertNull(band.getMinPLs());\n+        Assert.assertEquals(band.getMinGQ(), -1);\n         band.add(vc.getStart(), getValidGenotypeBuilder().make() );\n+        Assert.assertNotNull(band.getMinPLs());\n+        Assert.assertEquals(band.getMinPLs()[1], getPLArray()[1]);\n+        Assert.assertEquals(band.getMinGQ(), getPLArray()[1]);\n         band.add(vc.getStart() + 1, getValidGenotypeBuilder().noPL().make());\n-        Assert.assertTrue(band.getSize() == 2);\n-\n-        //add VC with on PLs to block with no PLs\n-        final GVCFBlock band2 = getHomRefBlock(getVariantContext());\n+        Assert.assertEquals(band.getSize(), 2);\n+        Assert.assertEquals(band.getMinPLs()[1], getPLArray()[1]);\n+        Assert.assertEquals(band.getMinGQ(), getPLArray()[1]);\n+\n+        //add VC with no PLs to block with no PLs\n+        final HomRefBlock band2 = getHomRefBlock(getVariantContext());\n+        Assert.assertNull(band2.getMinPLs());\n+        Assert.assertEquals(band2.getMinGQ(), -1);\n         band2.add(vc.getStart(), getValidGenotypeBuilder().noPL().make() );\n+        Assert.assertEquals(band2.getMinGQ(), getPLArray()[1]);\n+        Assert.assertNull(band2.getMinPLs());\n         band2.add(vc.getStart() + 1, getValidGenotypeBuilder().noPL().make());\n+        Assert.assertNull(band2.getMinPLs());\n+        Assert.assertEquals(band2.getMinGQ(), getPLArray()[1]);\n         Assert.assertTrue(band2.getSize() == 2);\n     }\n \n     private static int[] getPLArray() {\n-        return new int[]{0,10,100};\n+        return new int[]{0,15,100};\n     }\n \n     private static void assertValues(final GVCFBlock band, final int minDP, final int medianDP) {\n"}}, {"oid": "dcd1398afdb703df59efbfc13d5b4096210480fc", "url": "https://github.com/broadinstitute/gatk/commit/dcd1398afdb703df59efbfc13d5b4096210480fc", "message": "Address review comments; more tests", "committedDate": "2020-11-19T16:26:57Z", "type": "forcePushed"}, {"oid": "5be3d05e22702dd721f0697e7fe0593e42fe55db", "url": "https://github.com/broadinstitute/gatk/commit/5be3d05e22702dd721f0697e7fe0593e42fe55db", "message": "Enable re-reblocking with no PLs", "committedDate": "2020-11-30T19:14:38Z", "type": "commit"}, {"oid": "84303f2f41d500f83a87220653a6588fafc390c9", "url": "https://github.com/broadinstitute/gatk/commit/84303f2f41d500f83a87220653a6588fafc390c9", "message": "Fix unit tests too", "committedDate": "2020-11-30T19:14:41Z", "type": "commit"}, {"oid": "e91ca7d6bcc9ceba221b27c4ae925405dd636e8f", "url": "https://github.com/broadinstitute/gatk/commit/e91ca7d6bcc9ceba221b27c4ae925405dd636e8f", "message": "Address review comments; more tests", "committedDate": "2020-11-30T19:14:41Z", "type": "commit"}, {"oid": "6d30f93f036b4aaa418dcf54f524a1caf91fbc51", "url": "https://github.com/broadinstitute/gatk/commit/6d30f93f036b4aaa418dcf54f524a1caf91fbc51", "message": "I built test data with bad PLs", "committedDate": "2020-11-30T19:14:41Z", "type": "commit"}, {"oid": "6d30f93f036b4aaa418dcf54f524a1caf91fbc51", "url": "https://github.com/broadinstitute/gatk/commit/6d30f93f036b4aaa418dcf54f524a1caf91fbc51", "message": "I built test data with bad PLs", "committedDate": "2020-11-30T19:14:41Z", "type": "forcePushed"}, {"oid": "e9fcb6ccac64c6c6b5b47478c95b2e0a1ad29335", "url": "https://github.com/broadinstitute/gatk/commit/e9fcb6ccac64c6c6b5b47478c95b2e0a1ad29335", "message": "Maybe a sleep will fix the sporadic CNV WDL test failures", "committedDate": "2020-12-01T14:43:41Z", "type": "commit"}]}