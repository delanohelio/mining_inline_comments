{"pr_number": 2632, "pr_title": "[RESTEASY-2781] Clients running in a resource method throw safer WebA\u2026", "pr_createdAt": "2020-12-15T19:45:58Z", "pr_url": "https://github.com/resteasy/resteasy/pull/2632", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MzIzOQ==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r543773239", "bodyText": "This looks different from how we did it in the 3.x branches.", "author": "jamezp", "createdAt": "2020-12-15T23:54:04Z", "path": "resteasy-client-microprofile-base/src/main/java/org/jboss/resteasy/microprofile/client/DefaultResponseExceptionMapper.java", "diffHunk": "@@ -13,12 +18,15 @@ public Throwable toThrowable(Response response) {\n         try {\n             response.bufferEntity();\n         } catch (Exception ignored) {}\n-        return new WebApplicationException(\"Unknown error, status code \" + response.getStatus(), response);\n+        return WebApplicationExceptionWrapper.wrap(new WebApplicationException(\"Unknown error, status code \" + response.getStatus(), response));\n     }\n \n     @Override\n     public boolean handles(int status, MultivaluedMap headers) {\n-        return status >= 400;\n+       final Config config = ConfigProvider.getConfig();\n+       final boolean originalBehavior = config.getOptionalValue(ResteasyContextParameters.RESTEASY_ORIGINAL_WEBAPPLICATIONEXCEPTION_BEHAVIOR, boolean.class).orElse(false);\n+       final boolean serverSide = ResteasyDeployment.onServer();\n+       return status >= (originalBehavior || !serverSide ? 400 : 300);", "originalCommit": "4d71f60cdca3227665f6a24219de2a60cfd9a318", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxMzU2OA==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r543813568", "bodyText": "I realized as I was releasing 3.11.3.Final that I had changed the test to include 3xx statuses, which makes sense, I think, since the same leakage problem applies. There was a deadline for 3.11.3.Final and I didn't have time to change that, but I did it for 3.14.0.Final. So asking for the original behavior affects this class too.", "author": "ronsigal", "createdAt": "2020-12-16T01:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MzIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwNDk5OA==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r544404998", "bodyText": "Okay. Maybe not a huge deal, but that's going to be different for EAP 7.3 and EAP 7.4 then. I'll have to back-port that fix to the 3.12 and 3.13 PR's I guess too.", "author": "jamezp", "createdAt": "2020-12-16T15:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MzIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1OTQxNQ==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r544459415", "bodyText": "Yeah, my bad.", "author": "ronsigal", "createdAt": "2020-12-16T16:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MzIzOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3NDEyNg==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r543774126", "bodyText": "Should this just be in the implementation and not the API?", "author": "jamezp", "createdAt": "2020-12-15T23:56:19Z", "path": "resteasy-client-api/src/main/java/org/jboss/resteasy/client/exception/WebApplicationExceptionWrapper.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ *\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.resteasy.client.exception;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.ClientErrorException;\n+import javax.ws.rs.ForbiddenException;\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.NotAcceptableException;\n+import javax.ws.rs.NotAllowedException;\n+import javax.ws.rs.NotAuthorizedException;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.NotSupportedException;\n+import javax.ws.rs.RedirectionException;\n+import javax.ws.rs.ServerErrorException;\n+import javax.ws.rs.ServiceUnavailableException;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.jboss.resteasy.spi.ResteasyDeployment;\n+\n+/**\n+ * An interface which allows a {@link WebApplicationException} to be unwrapped.\n+ *\n+ * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>\n+ */\n+public interface WebApplicationExceptionWrapper<T extends WebApplicationException> {", "originalCommit": "4d71f60cdca3227665f6a24219de2a60cfd9a318", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNDUzOQ==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r543814539", "bodyText": "Hmmm. The new Exceptions depend on it:\npublic class ResteasyBadRequestException extends BadRequestException implements WebApplicationExceptionWrapper<BadRequestException> {", "author": "ronsigal", "createdAt": "2020-12-16T01:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3NDEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNTIzNg==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r543815236", "bodyText": "Maybe there's a better way ...", "author": "ronsigal", "createdAt": "2020-12-16T01:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3NDEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwNzUyMA==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r544407520", "bodyText": "Well the more I think about it the example I'd done originally should work too. I forgot in general that the RESTEasy 4.x is not backwards compatible with 3.x. I should have designed this a little better because it does seem weird to have this in the API. It makes the API know too much about the implementation.", "author": "jamezp", "createdAt": "2020-12-16T15:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3NDEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxNzY1OQ==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r544517659", "bodyText": "the example I'd done originally should work too\n\nWhat example is that?", "author": "ronsigal", "createdAt": "2020-12-16T18:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3NDEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NDQ5OQ==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r544574499", "bodyText": "jamezp@2a19fc5", "author": "jamezp", "createdAt": "2020-12-16T19:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3NDEyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyNjQ2OA==", "url": "https://github.com/resteasy/resteasy/pull/2632#discussion_r545926468", "bodyText": "Thinking about this, would this take into account context parameters from a web.xml?", "author": "jamezp", "createdAt": "2020-12-18T15:56:17Z", "path": "resteasy-client-api/src/main/java/org/jboss/resteasy/client/exception/WebApplicationExceptionWrapper.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ *\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.resteasy.client.exception;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.ClientErrorException;\n+import javax.ws.rs.ForbiddenException;\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.NotAcceptableException;\n+import javax.ws.rs.NotAllowedException;\n+import javax.ws.rs.NotAuthorizedException;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.NotSupportedException;\n+import javax.ws.rs.RedirectionException;\n+import javax.ws.rs.ServerErrorException;\n+import javax.ws.rs.ServiceUnavailableException;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.jboss.resteasy.spi.ResteasyDeployment;\n+\n+/**\n+ * An interface which allows a {@link WebApplicationException} to be unwrapped.\n+ *\n+ * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>\n+ */\n+public interface WebApplicationExceptionWrapper<T extends WebApplicationException> {\n+\n+    /**\n+     * If the {@code resteasy.original.webapplicationexception.behavior} is set to {@code true} or the request is\n+     * determined to not be a server side request, then the {@link WebApplicationException} passed in will be returned.\n+     * If the property is not set to {@code true} and this is a server side request then the exception is wrapped and\n+     * the response is {@linkplain #sanitize(Response) sanitized}.\n+     *\n+     * @param e the exception to possibly wrapped\n+     *\n+     * @return the wrapped exception or the original exception if the exception has already been wrapped the the\n+     * wrapping feature is turned off\n+     */\n+    static WebApplicationException wrap(final WebApplicationException e) {\n+        final Config config = ConfigProvider.getConfig();\n+        final boolean originalBehavior = config.getOptionalValue(\"resteasy.original.webapplicationexception.behavior\", boolean.class).orElse(false);", "originalCommit": "4d71f60cdca3227665f6a24219de2a60cfd9a318", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5357be639b9b08f3e5b30f6bd111d47169bdc523", "url": "https://github.com/resteasy/resteasy/commit/5357be639b9b08f3e5b30f6bd111d47169bdc523", "message": "[RESTEASY-2781] Clients running in a resource method throw safer WebApplicationException\n\n[RESTEASY-2781] Removed smallrye reference from resteasy-client-api POM.", "committedDate": "2020-12-23T21:26:15Z", "type": "commit"}, {"oid": "5357be639b9b08f3e5b30f6bd111d47169bdc523", "url": "https://github.com/resteasy/resteasy/commit/5357be639b9b08f3e5b30f6bd111d47169bdc523", "message": "[RESTEASY-2781] Clients running in a resource method throw safer WebApplicationException\n\n[RESTEASY-2781] Removed smallrye reference from resteasy-client-api POM.", "committedDate": "2020-12-23T21:26:15Z", "type": "forcePushed"}]}