{"pr_number": 2221, "pr_title": "Gh 2220 add function hook", "pr_createdAt": "2020-01-09T14:21:25Z", "pr_url": "https://github.com/gchq/Gaffer/pull/2221", "timeline": [{"oid": "e7acf62bd29df62baa16d42fad040c92ea8336b5", "url": "https://github.com/gchq/Gaffer/commit/e7acf62bd29df62baa16d42fad040c92ea8336b5", "message": "gh-2220 added hook and tests. Working with blacklist", "committedDate": "2020-01-07T16:02:49Z", "type": "commit"}, {"oid": "1ce693da3e009adb0746818b4c98577c75085e19", "url": "https://github.com/gchq/Gaffer/commit/1ce693da3e009adb0746818b4c98577c75085e19", "message": "gh-2220 using whitelist and blacklist and added further tests", "committedDate": "2020-01-08T13:32:14Z", "type": "commit"}, {"oid": "96d3012ce964551e2887603f21dd681d56140b41", "url": "https://github.com/gchq/Gaffer/commit/96d3012ce964551e2887603f21dd681d56140b41", "message": "gh-2220 added the function authoriser as a default graph hook", "committedDate": "2020-01-08T16:43:30Z", "type": "commit"}, {"oid": "2e52112fe6c2d4c3e16623512284157c90196fa7", "url": "https://github.com/gchq/Gaffer/commit/2e52112fe6c2d4c3e16623512284157c90196fa7", "message": "gh-2220 added null checks", "committedDate": "2020-01-08T17:03:48Z", "type": "commit"}, {"oid": "50bb9ac07a372b166e125ebeff95e8905c88febc", "url": "https://github.com/gchq/Gaffer/commit/50bb9ac07a372b166e125ebeff95e8905c88febc", "message": "gh-2220 all tests in graph are passing", "committedDate": "2020-01-09T12:58:40Z", "type": "commit"}, {"oid": "ab4b0ca08dbd8e97d608817b9989db2990fa2a0c", "url": "https://github.com/gchq/Gaffer/commit/ab4b0ca08dbd8e97d608817b9989db2990fa2a0c", "message": "gh-2220 added whitelist patterns", "committedDate": "2020-01-09T14:04:22Z", "type": "commit"}, {"oid": "5153aa8818f28db22c114380de8ce2d28cc0243b", "url": "https://github.com/gchq/Gaffer/commit/5153aa8818f28db22c114380de8ce2d28cc0243b", "message": "gh-2220 minor refactor and javadoc", "committedDate": "2020-01-09T14:17:57Z", "type": "commit"}, {"oid": "d869738d9d6355031d6a5f27e18dbeb2c6ec885b", "url": "https://github.com/gchq/Gaffer/commit/d869738d9d6355031d6a5f27e18dbeb2c6ec885b", "message": "gh-2220 fixed external tests", "committedDate": "2020-01-09T15:37:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4ODM5Ng==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r364788396", "bodyText": "Isn't clear from the comment that it's also possible to whitelist", "author": "ss130257", "createdAt": "2020-01-09T15:05:35Z", "path": "core/graph/src/main/java/uk/gov/gchq/gaffer/graph/hook/FunctionAuthoriser.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.graph.hook;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.commonutil.exception.UnauthorisedException;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.gaffer.operation.OperationChain;\n+import uk.gov.gchq.gaffer.store.Context;\n+import uk.gov.gchq.koryphe.impl.predicate.And;\n+import uk.gov.gchq.koryphe.impl.predicate.Not;\n+import uk.gov.gchq.koryphe.impl.predicate.Or;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The FunctionAuthoriser is a {@link GraphHook} which stops a user running\n+ * Functions which have been banned. The Authoriser can be configured with a\n+ * list of unauthorised function classes, or a list of patterns to check against.\n+ * <p>\n+ * It should be noted that using the unauthorisedFunctions list will be more\n+ * efficient than using any of the patterns.", "originalCommit": "5153aa8818f28db22c114380de8ce2d28cc0243b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgxMzM1MQ==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r364813351", "bodyText": "I don't think you tested a function being allowed when it IS in the whitelist", "author": "ss130257", "createdAt": "2020-01-09T15:47:08Z", "path": "core/graph/src/test/java/uk/gov/gchq/gaffer/graph/hook/FunctionAuthoriserTest.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*", "originalCommit": "5153aa8818f28db22c114380de8ce2d28cc0243b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgxODE3Ng==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r364818176", "bodyText": "Should you add authorisedFunctionPatterns here as well?", "author": "ss130257", "createdAt": "2020-01-09T15:55:20Z", "path": "core/graph/src/main/java/uk/gov/gchq/gaffer/graph/hook/FunctionAuthoriser.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.graph.hook;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.commonutil.exception.UnauthorisedException;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.gaffer.operation.OperationChain;\n+import uk.gov.gchq.gaffer.store.Context;\n+import uk.gov.gchq.koryphe.impl.predicate.And;\n+import uk.gov.gchq.koryphe.impl.predicate.Not;\n+import uk.gov.gchq.koryphe.impl.predicate.Or;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The FunctionAuthoriser is a {@link GraphHook} which stops a user running\n+ * Functions which have been banned. The Authoriser can be configured with a\n+ * list of unauthorised function classes, or a list of patterns to check against.\n+ * <p>\n+ * It should be noted that using the unauthorisedFunctions list will be more\n+ * efficient than using any of the patterns.\n+ */\n+@JsonPropertyOrder(value = {\"unauthorisedFunctions\", \"unauthorisedFunctionPatterns\"})", "originalCommit": "5153aa8818f28db22c114380de8ce2d28cc0243b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0MTUxOA==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r364841518", "bodyText": "Matching of the \"class\":\" string feels a bit fragile to me. You may want to consider creating a TreeModel from the Json string and traversing the tree of JsonNode objects checking for \"class\" fields.", "author": "ss130257", "createdAt": "2020-01-09T16:36:55Z", "path": "core/graph/src/main/java/uk/gov/gchq/gaffer/graph/hook/FunctionAuthoriser.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.graph.hook;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.commonutil.exception.UnauthorisedException;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.gaffer.operation.OperationChain;\n+import uk.gov.gchq.gaffer.store.Context;\n+import uk.gov.gchq.koryphe.impl.predicate.And;\n+import uk.gov.gchq.koryphe.impl.predicate.Not;\n+import uk.gov.gchq.koryphe.impl.predicate.Or;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The FunctionAuthoriser is a {@link GraphHook} which stops a user running\n+ * Functions which have been banned. The Authoriser can be configured with a\n+ * list of unauthorised function classes, or a list of patterns to check against.\n+ * <p>\n+ * It should be noted that using the unauthorisedFunctions list will be more\n+ * efficient than using any of the patterns.\n+ */\n+@JsonPropertyOrder(value = {\"unauthorisedFunctions\", \"unauthorisedFunctionPatterns\"})\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class FunctionAuthoriser implements GraphHook {\n+\n+    private static final String ERROR_MESSAGE_PREFIX = \"Operation chain contained an unauthorised function: \";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FunctionAuthoriser.class);\n+    private List<Class<? extends Function>> unauthorisedFunctions = new ArrayList<>();\n+    private List<Pattern> authorisedFunctionPatterns = new ArrayList<>();\n+    private List<Pattern> unauthorisedFunctionPatterns = new ArrayList<>();\n+\n+    public FunctionAuthoriser() {\n+    }\n+\n+    public FunctionAuthoriser(final List<Class<? extends Function>> unauthorisedFunctions, final List<Pattern> unauthorisedFunctionPatterns, final List<Pattern> authorisedFunctionPatterns) {\n+        this.setUnauthorisedFunctions(unauthorisedFunctions);\n+        this.setAuthorisedFunctionPatterns(authorisedFunctionPatterns);\n+        this.setUnauthorisedFunctionPatterns(unauthorisedFunctionPatterns);\n+    }\n+\n+    @Override\n+    public void preExecute(final OperationChain<?> opChain, final Context context) {\n+        String chainString;\n+        try {\n+            chainString = new String(JSONSerialiser.serialise(opChain));\n+        } catch (final SerialisationException e) {\n+            // This should never happen in real life as operation chains should\n+            // always be json serialisable. However this could happen if using a\n+            // mock in testing. To account for this, it will be logged.\n+            LOGGER.warn(\"Failed to serialise operation chain: \" + opChain);\n+            return;\n+        }\n+\n+        if (unauthorisedFunctions != null) {\n+            checkNoBlacklistedFunctionsArePresent(chainString);\n+        }\n+        if (authorisedFunctionPatterns != null || unauthorisedFunctionPatterns != null) {\n+            checkAllFunctionsUsedAppearInPatterns(chainString);\n+        }\n+    }\n+\n+    private List<Predicate> convertPatternsToPredicates(final List<Pattern> patterns) {\n+        return patterns.stream()\n+                .map(Pattern::asPredicate)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void checkAllFunctionsUsedAppearInPatterns(final String chainString) {\n+        boolean noWhitelistPatterns = (authorisedFunctionPatterns == null || authorisedFunctionPatterns.isEmpty());\n+        boolean noBlacklistPatterns = (unauthorisedFunctionPatterns == null || unauthorisedFunctionPatterns.isEmpty());\n+\n+        Predicate<String> isAuthorised = createAuthorisationFunction(noBlacklistPatterns, noWhitelistPatterns);\n+", "originalCommit": "5153aa8818f28db22c114380de8ce2d28cc0243b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4ODk3MA==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365788970", "bodyText": "Rather than going to String then to JsonNode, you might be able to use the valueToTree method on ObjectMapper. Just had a quick look at it and it should work. You would need to expose this in the Gaffer JSONSerialiser class.", "author": "p013570", "createdAt": "2020-01-13T12:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0MTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwMzY3OA==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365803678", "bodyText": "Would this get around the issue of being reliant on things being serialised as \"class\" fields?", "author": "d47853", "createdAt": "2020-01-13T13:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0MTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyODM3Nw==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365828377", "bodyText": "From what I can tell, this would only provide a small performance benefit if you don't make use of the more efficient blacklisting capability (Since the blacklisting capability requires it to be a string anyway).", "author": "d47853", "createdAt": "2020-01-13T14:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0MTUxOA=="}], "type": "inlineReview"}, {"oid": "3067b2d42aab0a93be5b0a66a33115ab2b84af0a", "url": "https://github.com/gchq/Gaffer/commit/3067b2d42aab0a93be5b0a66a33115ab2b84af0a", "message": "gh-2220 added tests, updated javadoc and added field to jsonPropertyOrder", "committedDate": "2020-01-13T09:23:06Z", "type": "commit"}, {"oid": "9f612e13fa031934dcc13b1691affd1724cecd36", "url": "https://github.com/gchq/Gaffer/commit/9f612e13fa031934dcc13b1691affd1724cecd36", "message": "gh-2220 using jsonnode and iterating", "committedDate": "2020-01-13T09:45:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4MzE4NQ==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365783185", "bodyText": "Perhaps create a default black list and store that in another class, otherwise this list here could get rather big and messy.", "author": "p013570", "createdAt": "2020-01-13T12:42:08Z", "path": "core/graph/src/main/java/uk/gov/gchq/gaffer/graph/Graph.java", "diffHunk": "@@ -995,6 +1000,11 @@ private void updateGraphHooks(final GraphConfig config) {\n                     config.getHooks().add(0, new NamedOperationResolver());\n                 }\n             }\n+            if (!hasFunctionAuthoriserHook && !config.isSkipDefaultSecurityHooks()) {\n+                config.getHooks().add(new FunctionAuthoriser.Builder()\n+                        .unauthorisedFunctions(Lists.newArrayList(CreateObject.class))", "originalCommit": "9f612e13fa031934dcc13b1691affd1724cecd36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4NDMxOA==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365784318", "bodyText": "I'm not sure about this.", "author": "p013570", "createdAt": "2020-01-13T12:45:14Z", "path": "core/graph/src/main/java/uk/gov/gchq/gaffer/graph/GraphConfig.java", "diffHunk": "@@ -64,6 +65,9 @@\n     private String description;\n     private List<GraphHook> hooks = new ArrayList<>();\n \n+    @JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+    private boolean skipDefaultSecurityHooks = false;", "originalCommit": "9f612e13fa031934dcc13b1691affd1724cecd36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5NzE2OQ==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365797169", "bodyText": "This makes sure that any existing graph config which doesn't have the field set will have the value set to false. Is there something I overlooked?", "author": "d47853", "createdAt": "2020-01-13T13:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4NDMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0OTM3OQ==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r366249379", "bodyText": "I am just not sure whether having a boolean to toggle security hooks on/off is the best way of doing it. Although I can't quickly think of a better way. For example, OperationAuthoriser and OperationChainLimiter are also security related hooks.", "author": "p013570", "createdAt": "2020-01-14T10:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4NDMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4NTIxMw==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365785213", "bodyText": "If we are adding this FunctionAuthoriser by default for every Gaffer system, we should make sure it is efficient and doesn't error.", "author": "p013570", "createdAt": "2020-01-13T12:47:37Z", "path": "core/graph/src/main/java/uk/gov/gchq/gaffer/graph/Graph.java", "diffHunk": "@@ -995,6 +1000,11 @@ private void updateGraphHooks(final GraphConfig config) {\n                     config.getHooks().add(0, new NamedOperationResolver());\n                 }\n             }\n+            if (!hasFunctionAuthoriserHook && !config.isSkipDefaultSecurityHooks()) {", "originalCommit": "9f612e13fa031934dcc13b1691affd1724cecd36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4NjAzNA==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365786034", "bodyText": "Just wondering if it might be simpler to just call these white and black lists? As you refer to white and black lists in other parts of the code.", "author": "p013570", "createdAt": "2020-01-13T12:49:36Z", "path": "core/graph/src/main/java/uk/gov/gchq/gaffer/graph/hook/FunctionAuthoriser.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2019 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.graph.hook;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.commonutil.exception.UnauthorisedException;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.gaffer.operation.OperationChain;\n+import uk.gov.gchq.gaffer.store.Context;\n+import uk.gov.gchq.koryphe.impl.predicate.And;\n+import uk.gov.gchq.koryphe.impl.predicate.Not;\n+import uk.gov.gchq.koryphe.impl.predicate.Or;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The FunctionAuthoriser is a {@link GraphHook} which stops a user running\n+ * Functions which have been banned. The Authoriser can be configured with a\n+ * list of unauthorised function classes or patterns, or a list of authorised\n+ * patterns to check against.\n+ * <p>\n+ * It should be noted that using the unauthorisedFunctions list will be more\n+ * efficient than using any of the patterns.\n+ */\n+@JsonPropertyOrder(value = {\"unauthorisedFunctions\", \"unauthorisedFunctionPatterns\", \"authorisedFunctionPatterns\"})\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class FunctionAuthoriser implements GraphHook {\n+\n+    private static final String ERROR_MESSAGE_PREFIX = \"Operation chain contained an unauthorised function: \";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FunctionAuthoriser.class);\n+    private List<Class<? extends Function>> unauthorisedFunctions = new ArrayList<>();\n+    private List<Pattern> authorisedFunctionPatterns = new ArrayList<>();", "originalCommit": "9f612e13fa031934dcc13b1691affd1724cecd36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5OTU5Ng==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365799596", "bodyText": "I agree it's probably better to be consistent, although when creating this in JSON, it makes it more understandable in my opinion - especially given that there are two blacklists.", "author": "d47853", "createdAt": "2020-01-13T13:21:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4NjAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MDA5NQ==", "url": "https://github.com/gchq/Gaffer/pull/2221#discussion_r365790095", "bodyText": "The downside of using this mechanism, is you are assuming that all Functions will be serialised with a 'class' field. They should be, but if they are wrapped in some custom object and the JsonSubType annotation changes it, then it could be serialised differently.", "author": "p013570", "createdAt": "2020-01-13T12:59:20Z", "path": "core/graph/src/main/java/uk/gov/gchq/gaffer/graph/hook/FunctionAuthoriser.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2019 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.graph.hook;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.commonutil.exception.UnauthorisedException;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.gaffer.operation.OperationChain;\n+import uk.gov.gchq.gaffer.store.Context;\n+import uk.gov.gchq.koryphe.impl.predicate.And;\n+import uk.gov.gchq.koryphe.impl.predicate.Not;\n+import uk.gov.gchq.koryphe.impl.predicate.Or;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The FunctionAuthoriser is a {@link GraphHook} which stops a user running\n+ * Functions which have been banned. The Authoriser can be configured with a\n+ * list of unauthorised function classes or patterns, or a list of authorised\n+ * patterns to check against.\n+ * <p>\n+ * It should be noted that using the unauthorisedFunctions list will be more\n+ * efficient than using any of the patterns.\n+ */\n+@JsonPropertyOrder(value = {\"unauthorisedFunctions\", \"unauthorisedFunctionPatterns\", \"authorisedFunctionPatterns\"})\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class FunctionAuthoriser implements GraphHook {\n+\n+    private static final String ERROR_MESSAGE_PREFIX = \"Operation chain contained an unauthorised function: \";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FunctionAuthoriser.class);\n+    private List<Class<? extends Function>> unauthorisedFunctions = new ArrayList<>();\n+    private List<Pattern> authorisedFunctionPatterns = new ArrayList<>();\n+    private List<Pattern> unauthorisedFunctionPatterns = new ArrayList<>();\n+\n+    public FunctionAuthoriser() {\n+    }\n+\n+    public FunctionAuthoriser(final List<Class<? extends Function>> unauthorisedFunctions, final List<Pattern> unauthorisedFunctionPatterns, final List<Pattern> authorisedFunctionPatterns) {\n+        this.setUnauthorisedFunctions(unauthorisedFunctions);\n+        this.setAuthorisedFunctionPatterns(authorisedFunctionPatterns);\n+        this.setUnauthorisedFunctionPatterns(unauthorisedFunctionPatterns);\n+    }\n+\n+    @Override\n+    public void preExecute(final OperationChain<?> opChain, final Context context) {\n+        String chainString;\n+        try {\n+            chainString = new String(JSONSerialiser.serialise(opChain));\n+        } catch (final SerialisationException e) {\n+            // This should never happen in real life as operation chains should\n+            // always be json serialisable. However this could happen if using a\n+            // mock in testing. To account for this, it will be logged.\n+            LOGGER.warn(\"Failed to serialise operation chain: \" + opChain);\n+            return;\n+        }\n+\n+        if (unauthorisedFunctions != null) {\n+            checkNoBlacklistedFunctionsArePresent(chainString);\n+        }\n+        if (authorisedFunctionPatterns != null || unauthorisedFunctionPatterns != null) {\n+            checkAllFunctionsUsedAppearInCorrectPatterns(chainString);\n+        }\n+    }\n+\n+    private List<Predicate> convertPatternsToPredicates(final List<Pattern> patterns) {\n+        return patterns.stream()\n+                .map(Pattern::asPredicate)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void checkAllFunctionsUsedAppearInCorrectPatterns(final String chainString) {\n+        boolean noWhitelistPatterns = (authorisedFunctionPatterns == null || authorisedFunctionPatterns.isEmpty());\n+        boolean noBlacklistPatterns = (unauthorisedFunctionPatterns == null || unauthorisedFunctionPatterns.isEmpty());\n+\n+        Predicate<String> isAuthorised = createAuthorisationFunction(noBlacklistPatterns, noWhitelistPatterns);\n+\n+        final JsonNode node;\n+        try {\n+            node = JSONSerialiser.getJsonNodeFromString(chainString);\n+        } catch (final SerialisationException e) {\n+            // This should never happen as the string is derived from a\n+            // serialised object. Therefore throw an exception here.\n+            throw new RuntimeException(\"Failed to convert serialised operation\" +\n+                    \" chain into a JsonNode\", e);\n+        }\n+\n+        List<String> classNames = node.findValuesAsText(\"class\");", "originalCommit": "9f612e13fa031934dcc13b1691affd1724cecd36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a0d2d200736a0f31bc54bd25d59fe307c9cefb9", "url": "https://github.com/gchq/Gaffer/commit/4a0d2d200736a0f31bc54bd25d59fe307c9cefb9", "message": "gh-2220 moved list of blacklisted functions into util class", "committedDate": "2020-01-13T14:52:32Z", "type": "commit"}, {"oid": "ab0cce34a841769905c433ea04c55316d5ea4527", "url": "https://github.com/gchq/Gaffer/commit/ab0cce34a841769905c433ea04c55316d5ea4527", "message": "gh-2220 simplified hook", "committedDate": "2020-01-14T14:37:59Z", "type": "commit"}, {"oid": "862602e9a8c6eb50d71cb75ac72263c9ee753644", "url": "https://github.com/gchq/Gaffer/commit/862602e9a8c6eb50d71cb75ac72263c9ee753644", "message": "gh-2220 added tests", "committedDate": "2020-01-14T14:57:36Z", "type": "commit"}, {"oid": "6a6e1dd5b657f5c748c6caec4c59e14ff479453e", "url": "https://github.com/gchq/Gaffer/commit/6a6e1dd5b657f5c748c6caec4c59e14ff479453e", "message": "gh-2220 renamed methods", "committedDate": "2020-01-14T15:05:29Z", "type": "commit"}, {"oid": "5ca9c7ec721a5a0fcb0f03c8944b262d57148fdf", "url": "https://github.com/gchq/Gaffer/commit/5ca9c7ec721a5a0fcb0f03c8944b262d57148fdf", "message": "gh-2220 moved input reset into finally block", "committedDate": "2020-01-14T16:30:24Z", "type": "commit"}, {"oid": "63ee7c989ae6a982f3347ef1180daacacf209808", "url": "https://github.com/gchq/Gaffer/commit/63ee7c989ae6a982f3347ef1180daacacf209808", "message": "gh-2220 fixed potentially massive error message", "committedDate": "2020-01-14T16:36:11Z", "type": "commit"}, {"oid": "2b21cf02d157b792a5cfce9292c6364d5cf8d862", "url": "https://github.com/gchq/Gaffer/commit/2b21cf02d157b792a5cfce9292c6364d5cf8d862", "message": "gh-2220 refactored graph", "committedDate": "2020-01-15T10:08:30Z", "type": "commit"}, {"oid": "cd05396a6c81d9359b9b7efe4c96a12d8b3d99e9", "url": "https://github.com/gchq/Gaffer/commit/cd05396a6c81d9359b9b7efe4c96a12d8b3d99e9", "message": "gh-2220 updated copyright and added entry in docs", "committedDate": "2020-01-15T12:57:27Z", "type": "commit"}, {"oid": "5063fe0e1110ca763648c4c25a0c629079d3a6f5", "url": "https://github.com/gchq/Gaffer/commit/5063fe0e1110ca763648c4c25a0c629079d3a6f5", "message": "gh-2220 made FunctionAuthoriserTest implement GraphHookTest", "committedDate": "2020-01-15T13:05:42Z", "type": "commit"}, {"oid": "dd01df7ffc59911a053086038116c36f6edd8ce5", "url": "https://github.com/gchq/Gaffer/commit/dd01df7ffc59911a053086038116c36f6edd8ce5", "message": "gh-2220 updated docs", "committedDate": "2020-01-15T13:30:12Z", "type": "commit"}]}