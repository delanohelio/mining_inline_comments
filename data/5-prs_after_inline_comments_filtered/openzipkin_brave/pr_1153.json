{"pr_number": 1153, "pr_title": "Updates from feedback on #1142", "pr_createdAt": "2020-04-12T08:01:22Z", "pr_url": "https://github.com/openzipkin/brave/pull/1153", "timeline": [{"oid": "7260cfc8075d91e346f2960995771365afc4ba24", "url": "https://github.com/openzipkin/brave/commit/7260cfc8075d91e346f2960995771365afc4ba24", "message": "Updates from feedback on #1142", "committedDate": "2020-04-12T08:01:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2Mjc5OA==", "url": "https://github.com/openzipkin/brave/pull/1153#discussion_r407162798", "bodyText": "personally I think this is a lot simpler if empty coerces to null. A lot less to explain, no chance of accidental mutable empty types, easier tests.. do you see what I mean @anuraaga ?", "author": "codefromthecrypt", "createdAt": "2020-04-12T08:02:14Z", "path": "brave/src/main/java/brave/internal/baggage/BaggageHandler.java", "diffHunk": "@@ -56,12 +56,18 @@\n   S newState(BaggageField field, String value);\n \n   /**\n-   * Updates a state object to handle a field value change.\n+   * Updates a state object to include a value change.\n+   *\n+   * <p>When the value is {@code null} and the input only includes the given field, either {@code", "originalCommit": "7260cfc8075d91e346f2960995771365afc4ba24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MzI2OA==", "url": "https://github.com/openzipkin/brave/pull/1153#discussion_r407163268", "bodyText": "normal baggage S will be string, so this has to be nullable, lack of annotation before was a mistake!", "author": "codefromthecrypt", "createdAt": "2020-04-12T08:06:38Z", "path": "brave/src/main/java/brave/internal/baggage/BaggageHandler.java", "diffHunk": "@@ -56,12 +56,18 @@\n   S newState(BaggageField field, String value);\n \n   /**\n-   * Updates a state object to handle a field value change.\n+   * Updates a state object to include a value change.\n+   *\n+   * <p>When the value is {@code null} and the input only includes the given field, either {@code\n+   * null} or an appropriate empty sentinel value should be returned.\n+   *\n+   * <p>When {@code null} is returned, the next non-null update results in a call to {@link\n+   * #newState}. Otherwise, the empty state object will become the next input parameter here.\n    *\n    * @see BaggageField#updateValue(TraceContext, String)\n    * @see BaggageField#updateValue(TraceContextOrSamplingFlags, String)\n    */\n-  S mergeState(S state, BaggageField field, @Nullable String value);\n+  @Nullable S updateState(S state, BaggageField field, @Nullable String value);", "originalCommit": "7260cfc8075d91e346f2960995771365afc4ba24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}