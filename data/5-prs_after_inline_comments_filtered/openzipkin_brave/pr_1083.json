{"pr_number": 1083, "pr_title": "Allows client instrumentation to avoid thread local scoping", "pr_createdAt": "2020-02-14T22:38:19Z", "pr_url": "https://github.com/openzipkin/brave/pull/1083", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NjY4Nw==", "url": "https://github.com/openzipkin/brave/pull/1083#discussion_r379676687", "bodyText": "TODO: comment that we are using interceptor only in this case", "author": "codefromthecrypt", "createdAt": "2020-02-14T22:39:39Z", "path": "instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingInterceptor.java", "diffHunk": "@@ -52,7 +55,14 @@ public static Interceptor create(HttpTracing httpTracing) {\n   @Override public Response intercept(Chain chain) throws IOException {\n     HttpClientRequest request = new HttpClientRequest(chain.request());\n \n-    Span span = handler.handleSend(request);\n+    Span span;\n+    TraceContext parent = chain.request().tag(TraceContext.class);\n+    if (parent != null) {\n+      span = handler.handleSend(request, parent != NULL_SENTINEL ? parent : null);\n+    } else {\n+      span = handler.handleSend(request);", "originalCommit": "63591c98c0170747b7e00a08716115b65b975709", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "63591c98c0170747b7e00a08716115b65b975709", "url": "https://github.com/openzipkin/brave/commit/63591c98c0170747b7e00a08716115b65b975709", "message": "Allows client instrumentation to avoid thread local scoping\n\nFixes #1082", "committedDate": "2020-02-14T22:40:35Z", "type": "commit"}, {"oid": "31a3230f4c727f564efeca375df3e22bbdd67fe9", "url": "https://github.com/openzipkin/brave/commit/31a3230f4c727f564efeca375df3e22bbdd67fe9", "message": "finishing", "committedDate": "2020-02-15T00:51:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNDQyMQ==", "url": "https://github.com/openzipkin/brave/pull/1083#discussion_r379704421", "bodyText": "note: we only need this because the interceptor can be used two different ways and we can't distinguish based on null alone. This is a conscious alternative to allocating another wrapper.", "author": "codefromthecrypt", "createdAt": "2020-02-15T01:02:28Z", "path": "instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingCallFactory.java", "diffHunk": "@@ -33,6 +29,12 @@\n // NOTE: this is not an interceptor because the current span can get lost when there's a backlog.\n // This will be completely different after https://github.com/square/okhttp/issues/270\n public final class TracingCallFactory implements Call.Factory {\n+  /**\n+   * To save overhead, we use a null sentinel when there's no parent. This helps avoid looking at\n+   * the current trace context when there was no span in scope at invocation time.\n+   */\n+  static final TraceContext NULL_SENTINEL = TraceContext.newBuilder()", "originalCommit": "f735200046d061210edab51cc154dbb2022b1e95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f735200046d061210edab51cc154dbb2022b1e95", "url": "https://github.com/openzipkin/brave/commit/f735200046d061210edab51cc154dbb2022b1e95", "message": "me english good", "committedDate": "2020-02-15T01:04:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDM5Ng==", "url": "https://github.com/openzipkin/brave/pull/1083#discussion_r379714396", "bodyText": "Remove such as", "author": "anuraaga", "createdAt": "2020-02-15T03:30:27Z", "path": "brave/src/main/java/brave/Tracer.java", "diffHunk": "@@ -543,13 +543,28 @@ public ScopedSpan startScopedSpan(String name) {\n    * @since 5.8\n    */\n   public <T> Span nextSpan(SamplerFunction<T> samplerFunction, T arg) {\n-    return _toSpan(nextContext(samplerFunction, arg));\n+    return _toSpan(nextContext(samplerFunction, arg, currentTraceContext.get()));\n   }\n \n-  <T> TraceContext nextContext(SamplerFunction<T> samplerFunction, T arg) {\n+  /**\n+   * Like {@link #nextSpan(SamplerFunction, Object)} except this controls the parent context\n+   * explicitly. This is useful when an invocation context is propagated manually, such as commonly", "originalCommit": "f735200046d061210edab51cc154dbb2022b1e95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDQ2MA==", "url": "https://github.com/openzipkin/brave/pull/1083#discussion_r379714460", "bodyText": "parent of the new span, or {@code null} if it should have no parent", "author": "anuraaga", "createdAt": "2020-02-15T03:31:37Z", "path": "brave/src/main/java/brave/Tracer.java", "diffHunk": "@@ -543,13 +543,28 @@ public ScopedSpan startScopedSpan(String name) {\n    * @since 5.8\n    */\n   public <T> Span nextSpan(SamplerFunction<T> samplerFunction, T arg) {\n-    return _toSpan(nextContext(samplerFunction, arg));\n+    return _toSpan(nextContext(samplerFunction, arg, currentTraceContext.get()));\n   }\n \n-  <T> TraceContext nextContext(SamplerFunction<T> samplerFunction, T arg) {\n+  /**\n+   * Like {@link #nextSpan(SamplerFunction, Object)} except this controls the parent context\n+   * explicitly. This is useful when an invocation context is propagated manually, such as commonly\n+   * the case with asynchronous client frameworks.\n+   *\n+   * @param samplerFunction invoked if there's no {@link CurrentTraceContext#get() current trace}\n+   * @param arg parameter to {@link SamplerFunction#trySample(Object)}\n+   * @param parent the potentially null parent to use for this span", "originalCommit": "f735200046d061210edab51cc154dbb2022b1e95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "185d97b45e2669a2c046eb54bf02c1bf960036af", "url": "https://github.com/openzipkin/brave/commit/185d97b45e2669a2c046eb54bf02c1bf960036af", "message": "review feedback", "committedDate": "2020-02-15T03:59:36Z", "type": "commit"}]}