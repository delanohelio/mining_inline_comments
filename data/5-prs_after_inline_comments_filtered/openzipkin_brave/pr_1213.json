{"pr_number": 1213, "pr_title": "Demonstrates how SpanHandler can now set root baggage", "pr_createdAt": "2020-05-14T09:57:41Z", "pr_url": "https://github.com/openzipkin/brave/pull/1213", "timeline": [{"oid": "0c5e762d2c39f06bad89638ca2165437b725c4f2", "url": "https://github.com/openzipkin/brave/commit/0c5e762d2c39f06bad89638ca2165437b725c4f2", "message": "Demonstrates how SpanHandler can now set root tags\n\nThis is something we couldn't do before without depending on HTTP. With\nSpanHandler, we can now set default baggage even based on root by heuristically\nlooking to see if the value was formerly set. (you can't depend on lack of\nparent ID as some formats remove this).\n\nhttps://gitter.im/spring-cloud/spring-cloud-sleuth?at=5ebaa80f7c04b92f535b5844", "committedDate": "2020-05-14T09:57:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNzExNA==", "url": "https://github.com/openzipkin/brave/pull/1213#discussion_r425017114", "bodyText": "this is only to make the value change for the two traces :P", "author": "codefromthecrypt", "createdAt": "2020-05-14T09:58:41Z", "path": "brave/src/test/java/brave/features/propagation/SetOnceBaggageTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.features.propagation;\n+\n+import brave.Tags;\n+import brave.Tracer;\n+import brave.Tracing;\n+import brave.baggage.BaggageField;\n+import brave.baggage.BaggagePropagationConfig.SingleBaggageField;\n+import brave.handler.MutableSpan;\n+import brave.handler.SpanHandler;\n+import brave.internal.Nullable;\n+import brave.propagation.B3Propagation;\n+import brave.propagation.Propagation;\n+import brave.propagation.TraceContext;\n+import brave.test.TestSpanHandler;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import static brave.baggage.BaggagePropagation.newFactoryBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * This shows how to compute a value for Baggage only once per trace, by checking its value existed\n+ * first. Notably, this is at the lowest abstraction: {@link SpanHandler} has no reliance on HTTP or\n+ * otherwise.\n+ */\n+public class SetOnceBaggageTest {\n+  static final BaggageField EPOCH_SECONDS = BaggageField.create(\"epoch_seconds\");\n+\n+  static final class RootOnlyBaggage extends SpanHandler {\n+    @Override\n+    public boolean begin(TraceContext context, MutableSpan span, @Nullable TraceContext parent) {\n+      if (EPOCH_SECONDS.getValue(context) == null) { // only set at the first span\n+        long epochSeconds = System.currentTimeMillis() / 1000;\n+        sleepSlightlyOverASecond();", "originalCommit": "0c5e762d2c39f06bad89638ca2165437b725c4f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}