{"pr_number": 1221, "pr_title": "Adds javadocs on how to interpret MutableSpan.error", "pr_createdAt": "2020-05-19T02:49:57Z", "pr_url": "https://github.com/openzipkin/brave/pull/1221", "timeline": [{"oid": "29348f0e9a67328c0cdfd8daa4683193378e8323", "url": "https://github.com/openzipkin/brave/commit/29348f0e9a67328c0cdfd8daa4683193378e8323", "message": "Adds javadocs on how to interpret MutableSpan.error", "committedDate": "2020-05-19T02:50:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NjkxOQ==", "url": "https://github.com/openzipkin/brave/pull/1221#discussion_r427066919", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <h3>MutableSpan.error() vs MutableSpan.tag(\"error)</h3>\n          \n          \n            \n             * <h3>MutableSpan.error() vs MutableSpan.tag(\"error\")</h3>", "author": "codefromthecrypt", "createdAt": "2020-05-19T06:48:19Z", "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -46,6 +46,45 @@\n  * <p>In other words, this type is not thread safe. If you need to mutate this span in a different\n  * thread, use the {@linkplain #MutableSpan(MutableSpan) copy constructor}.\n  *\n+ * <h3>MutableSpan.error() vs MutableSpan.tag(\"error)</h3>", "originalCommit": "29348f0e9a67328c0cdfd8daa4683193378e8323", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "43f052a648748489df59fa874f65adb50a1887d6", "url": "https://github.com/openzipkin/brave/commit/43f052a648748489df59fa874f65adb50a1887d6", "message": "typo", "committedDate": "2020-05-19T06:48:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2ODMxOA==", "url": "https://github.com/openzipkin/brave/pull/1221#discussion_r427068318", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   <li>{@code MutableSpan.error() -> MutableSpan.tags[\"exception\"]} to match metrics dimension</li>\n          \n          \n            \n             *   <li>{@code MutableSpan.error() -> MutableSpan.tag(\"exception\", normalized)} to match metrics dimension</li>", "author": "codefromthecrypt", "createdAt": "2020-05-19T06:51:37Z", "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -46,6 +46,45 @@\n  * <p>In other words, this type is not thread safe. If you need to mutate this span in a different\n  * thread, use the {@linkplain #MutableSpan(MutableSpan) copy constructor}.\n  *\n+ * <h3>MutableSpan.error() vs MutableSpan.tag(\"error\")</h3>\n+ * If {@link #tag(String)} returns a result for \"error\", it was from a layered api, instrumentation or the user.\n+ * {@link #error()} is usually an uncaught exception and does not imply there's a tag \"error\".\n+ *\n+ * <p>Here are examples of a span with {@link #error()}, but no \"error\" tag:\n+ * <ul>\n+ *   <li>{@code brave.Span.error(new OutOfMemoryError()) -> MutableSpan.error(new OutOfMemoryError())}</li>\n+ *   <li>{@code brave.Span.error(new RpcException()) -> MutableSpan.error(new RpcException())}</li>\n+ *   <li>{@code brave.Span.error(new NullPointerException()) -> MutableSpan.error(new NullPointerException())}</li>\n+ * </ul>\n+ *\n+ * <p>The above are examples of exceptions that users typically do not process, so are unlikely to\n+ * parse into an \"error\" tag. The opposite is also true as not all errors are derived from\n+ * {@link Throwable}. Particularly, RPC frameworks often do not use exceptions as error signals.\n+ *\n+ * <p>Here are examples of a span with an \"error\" tag, but no {@link #error()}:\n+ * <ul>\n+ *   <li>{@code io.opentracing.Span.tag(ERROR, true) -> MutableSpan.tag(\"error\", \"true\")}</li>\n+ *   <li>{@code brave.SpanCustomizer.tag(\"error\", \"\") -> MutableSpan.tag(\"error\", \"\")}</li>\n+ *   <li>{@code brave.Span.tag(\"error\", \"CANCELLED\") -> MutableSpan.tag(\"error\", \"CANCELLED\")}</li>\n+ * </ul>\n+\n+ * <p>The above examples are using in-band apis in Brave. {@link SpanHandler} is after the fact.\n+ * Since there is no default \"error\" tag, span handlers here can tell the difference between\n+ * explicitly set error messages, and what's needed by their format. For example, those only looking\n+ * at Zipkin clones may forget that {@link #error()} exists for custom formats including metrics!\n+ *\n+ * <p>Here are examples of {@link SpanHandler#end(TraceContext, MutableSpan, SpanHandler.Cause)}\n+ * implementations that process errors:\n+ * <ul>\n+ *   <li>{@code MutableSpan.tag(\"error\", \"\")} to redact the error message from Zipkin</li>\n+ *   <li>{@code MutableSpan.error() -> MutableSpan.tags[\"exception\"]} to match metrics dimension</li>", "originalCommit": "43f052a648748489df59fa874f65adb50a1887d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fde858e96a9828e7171cfe0fbe359f0c90913ccb", "url": "https://github.com/openzipkin/brave/commit/fde858e96a9828e7171cfe0fbe359f0c90913ccb", "message": "format", "committedDate": "2020-05-19T06:51:45Z", "type": "commit"}]}