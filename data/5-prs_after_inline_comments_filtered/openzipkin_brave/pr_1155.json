{"pr_number": 1155, "pr_title": "Starts making zipkin2.Span optional for external reporting", "pr_createdAt": "2020-04-13T05:42:10Z", "pr_url": "https://github.com/openzipkin/brave/pull/1155", "timeline": [{"oid": "8dc8ae2a8666bc4b5e42effd9deef2477c682c3e", "url": "https://github.com/openzipkin/brave/commit/8dc8ae2a8666bc4b5e42effd9deef2477c682c3e", "message": "Starts making zipkin2.Span optional for external reporting\n\nThis migrates data formerly handled only by the zipkin reporter into\n`MutableSpan`. To complete decoupling will take future pull requests\nthat add trace IDs to `MutableSpan` and make the logging reporter use\n`MutableSpan` by default instead of zipkin types.", "committedDate": "2020-04-13T05:41:37Z", "type": "commit"}, {"oid": "2da404e54578034ced74650a2818d015d321cdc3", "url": "https://github.com/openzipkin/brave/commit/2da404e54578034ced74650a2818d015d321cdc3", "message": "drift", "committedDate": "2020-04-13T05:49:10Z", "type": "commit"}, {"oid": "a870c0aa8b65e9daf6497797bc27b085304f0c1e", "url": "https://github.com/openzipkin/brave/commit/a870c0aa8b65e9daf6497797bc27b085304f0c1e", "message": "license", "committedDate": "2020-04-13T05:49:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMjY4Mg==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407332682", "bodyText": "Should this import be gone too?", "author": "anuraaga", "createdAt": "2020-04-13T06:02:50Z", "path": "brave/src/main/java/brave/Tracing.java", "diffHunk": "@@ -34,10 +35,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import zipkin2.reporter.AsyncReporter;\n import zipkin2.reporter.Reporter;", "originalCommit": "a870c0aa8b65e9daf6497797bc27b085304f0c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMzIwOA==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407333208", "bodyText": "That being said, I think it's still fairly standard to import even from optional dependencies.", "author": "anuraaga", "createdAt": "2020-04-13T06:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMjY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0MjEwMQ==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407342101", "bodyText": "no worries I'll revert it. this was accidental as I was trying to find where everything was called.", "author": "codefromthecrypt", "createdAt": "2020-04-13T06:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMjY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMzA2Mg==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407333062", "bodyText": "Maybe an <a> tag linking to the module or something. Currently, it's hard to know this is a maven artifact.", "author": "anuraaga", "createdAt": "2020-04-13T06:04:21Z", "path": "brave/src/main/java/brave/Tracing.java", "diffHunk": "@@ -210,11 +208,9 @@ public Builder endpoint(zipkin2.Endpoint endpoint) {\n     }\n \n     /**\n-     * Controls how spans are reported. Defaults to logging, but often an {@link AsyncReporter}\n-     * which batches spans before sending to Zipkin.\n-     *\n-     * The {@link AsyncReporter} includes a {@link Sender}, which is a driver for transports like\n-     * http, kafka and scribe.\n+     * Controls how {@linkplain TraceContext#sampled() remote sampled} spans report to a {@code\n+     * io.zipkin.reporter2:zipkin-reporter} destination. This input is usually a {@link", "originalCommit": "a870c0aa8b65e9daf6497797bc27b085304f0c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0MjM2Nw==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407342367", "bodyText": "good idea", "author": "codefromthecrypt", "createdAt": "2020-04-13T06:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMzA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNTMwMA==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407335300", "bodyText": "Think you still need to compare the values in case of hash collision", "author": "anuraaga", "createdAt": "2020-04-13T06:13:51Z", "path": "brave/src/main/java/brave/internal/handler/MutableSpanConverter.java", "diffHunk": "@@ -65,38 +76,30 @@ void convert(MutableSpan span, Span.Builder result) {\n         .build());\n     }\n \n-    String errorTag = span.tag(\"error\");\n-    if (errorTag == null && span.error() != null) {\n-      errorParser.error(span.error(), span);\n-    }\n-\n     span.forEachTag(Consumer.INSTANCE, result);\n     span.forEachAnnotation(Consumer.INSTANCE, result);\n     if (span.shared()) result.shared(true);\n+    if (span.debug()) result.debug(true);\n   }\n \n   // avoid re-allocating an endpoint when we have the same data\n-  void addLocalEndpoint(String serviceName, @Nullable String ip, int port, Span.Builder span) {\n-    if (serviceName == null) serviceName = localServiceName;\n-    if (ip == null) ip = localIp;\n-    if (port <= 0) port = localPort;\n-    if (localServiceName.equals(serviceName)\n-      && (localIp == null ? ip == null : localIp.equals(ip))\n-      && localPort == port) {\n-      span.localEndpoint(localEndpoint);\n+  void addLocalEndpoint(@Nullable String serviceName, @Nullable String ip, int port, Builder span) {\n+    if (serviceName != null) serviceName = serviceName.toLowerCase(Locale.ROOT);\n+    if (hashEndpointParameters(serviceName, ip, port) == defaultEndpointHashCode) {", "originalCommit": "a870c0aa8b65e9daf6497797bc27b085304f0c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNjc4OQ==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407336789", "bodyText": "fair enough :)", "author": "codefromthecrypt", "createdAt": "2020-04-13T06:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNTMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0MDM3Ng==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407340376", "bodyText": "I didn't think about this. luckily somewhere I have a string that has a different value with same hashcode.. /me digs", "author": "codefromthecrypt", "createdAt": "2020-04-13T06:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNTMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM1MzU3OQ==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407353579", "bodyText": "thanks for the tip on gitter https://dzone.com/articles/what-is-wrong-with-hashcode-in-javalangstring", "author": "codefromthecrypt", "createdAt": "2020-04-13T07:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNTMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNTUzNg==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407335536", "bodyText": "Possibly was due to refactoring - suggest putting Span back here", "author": "anuraaga", "createdAt": "2020-04-13T06:14:43Z", "path": "brave/src/main/java/brave/internal/handler/MutableSpanConverter.java", "diffHunk": "@@ -65,38 +76,30 @@ void convert(MutableSpan span, Span.Builder result) {\n         .build());\n     }\n \n-    String errorTag = span.tag(\"error\");\n-    if (errorTag == null && span.error() != null) {\n-      errorParser.error(span.error(), span);\n-    }\n-\n     span.forEachTag(Consumer.INSTANCE, result);\n     span.forEachAnnotation(Consumer.INSTANCE, result);\n     if (span.shared()) result.shared(true);\n+    if (span.debug()) result.debug(true);\n   }\n \n   // avoid re-allocating an endpoint when we have the same data\n-  void addLocalEndpoint(String serviceName, @Nullable String ip, int port, Span.Builder span) {\n-    if (serviceName == null) serviceName = localServiceName;\n-    if (ip == null) ip = localIp;\n-    if (port <= 0) port = localPort;\n-    if (localServiceName.equals(serviceName)\n-      && (localIp == null ? ip == null : localIp.equals(ip))\n-      && localPort == port) {\n-      span.localEndpoint(localEndpoint);\n+  void addLocalEndpoint(@Nullable String serviceName, @Nullable String ip, int port, Builder span) {\n+    if (serviceName != null) serviceName = serviceName.toLowerCase(Locale.ROOT);\n+    if (hashEndpointParameters(serviceName, ip, port) == defaultEndpointHashCode) {\n+      span.localEndpoint(defaultEndpoint);\n     } else {\n       span.localEndpoint(Endpoint.newBuilder().serviceName(serviceName).ip(ip).port(port).build());\n     }\n   }\n \n-  enum Consumer implements TagConsumer<Span.Builder>, AnnotationConsumer<Span.Builder> {\n+  enum Consumer implements TagConsumer<Builder>, AnnotationConsumer<Builder> {", "originalCommit": "a870c0aa8b65e9daf6497797bc27b085304f0c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0MzExMA==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407343110", "bodyText": "it was line wrap, but yeah ok.", "author": "codefromthecrypt", "createdAt": "2020-04-13T06:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNTUzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNjA5NA==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407336094", "bodyText": "If not mistaken, this has been added mainly to support defaultSpan. Since defaultSpan only has three fields specified, it seems like it might be a net-loss to copy all these other default fields when creating a span.", "author": "anuraaga", "createdAt": "2020-04-13T06:16:50Z", "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -74,113 +83,204 @@\n   ArrayList<Object> annotations;\n   Throwable error;\n \n+  /** @since 5.4 */\n   public MutableSpan() {\n-    // this cheats because it will not need to grow unless there are more than 5 tags\n-    tags = new ArrayList<>();\n-    // lazy initialize annotations\n-  }\n-\n-  /** Returns true if there was no data added. Usually this indicates an instrumentation bug. */\n-  public boolean isEmpty() {\n-    return kind == null\n-      && !shared\n-      && startTimestamp == 0L\n-      && finishTimestamp == 0L\n-      && name == null\n-      && localServiceName == null\n-      && localIp == null\n-      && remoteServiceName == null\n-      && remoteIp == null\n-      && localPort == 0\n-      && remotePort == 0\n-      && tags.isEmpty()\n-      && annotations == null\n-      && error == null;\n-  }\n-\n-  /** Returns the {@link brave.Span#name(String) span name} or null */\n+  }\n+\n+  /** @since 5.12 */\n+  public MutableSpan(MutableSpan toCopy) {", "originalCommit": "a870c0aa8b65e9daf6497797bc27b085304f0c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0MzY1MA==", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407343650", "bodyText": "not exactly but close. empty is checked, so we have to cycle through all state anyway. seems higher leverage to implement equals vs do maintenance on 3 fields that we expect to be the comparison state, yet could drift later for any reason (ex if we implement default tags with MutableSpan later)", "author": "codefromthecrypt", "createdAt": "2020-04-13T06:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNjA5NA=="}], "type": "inlineReview"}, {"oid": "d8a55f14aadcce28380c688fb76781ec861ca430", "url": "https://github.com/openzipkin/brave/commit/d8a55f14aadcce28380c688fb76781ec861ca430", "message": "everything except collission on hashCode", "committedDate": "2020-04-13T07:05:07Z", "type": "commit"}, {"oid": "98296196236648b9f2dc937bb7fa09632cf351f7", "url": "https://github.com/openzipkin/brave/commit/98296196236648b9f2dc937bb7fa09632cf351f7", "message": "clash of the hash codes", "committedDate": "2020-04-13T07:18:15Z", "type": "commit"}, {"oid": "d4b486a2a984e1710148eff7db9a08c2f9648c7d", "url": "https://github.com/openzipkin/brave/commit/d4b486a2a984e1710148eff7db9a08c2f9648c7d", "message": "imported", "committedDate": "2020-04-13T07:21:51Z", "type": "commit"}, {"oid": "1960e1b3e1a6c43d15a4e91f4a3dfcf33f52d418", "url": "https://github.com/openzipkin/brave/commit/1960e1b3e1a6c43d15a4e91f4a3dfcf33f52d418", "message": "finito", "committedDate": "2020-04-13T07:49:42Z", "type": "commit"}, {"oid": "6a3379474f5eee92b66efde07ba51e35e7ef4994", "url": "https://github.com/openzipkin/brave/commit/6a3379474f5eee92b66efde07ba51e35e7ef4994", "message": "remembering why I preferred hashCode (eventhough it isn't bulletproof) :P", "committedDate": "2020-04-13T08:01:16Z", "type": "commit"}, {"oid": "11a096168b576efb64f77c1c04ed53521256ae89", "url": "https://github.com/openzipkin/brave/commit/11a096168b576efb64f77c1c04ed53521256ae89", "message": "polish", "committedDate": "2020-04-13T08:07:17Z", "type": "commit"}]}