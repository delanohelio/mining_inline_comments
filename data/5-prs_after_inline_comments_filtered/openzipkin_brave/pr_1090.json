{"pr_number": 1090, "pr_title": "Adds Mongo instrumentation", "pr_createdAt": "2020-02-21T22:30:09Z", "pr_url": "https://github.com/openzipkin/brave/pull/1090", "timeline": [{"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138", "url": "https://github.com/openzipkin/brave/commit/dfddc3ea398b09bc01db87a706aebb33303fa138", "message": "Add Mongo instrumentation. Fixes #818.", "committedDate": "2020-02-21T22:29:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzQxOA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382863418", "bodyText": "please rename the package to brave.mongodb", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:21:42Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzU2Nw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382863567", "bodyText": "all public types final with a package-private constructor", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:22:28Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzY4Mw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382863683", "bodyText": "remove the private modifier as we do this conventionally as we don't support mixed code in the package, it also helps reduce the size of bytecode and clutter reading.", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:23:10Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mzc4Nw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382863787", "bodyText": "remove protected as we don't support inheritance in our instrumentation. Things are configured via composition usually.", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:23:49Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDA4OQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864089", "bodyText": "our policy is to not escalate the java version needed by the underlying driver. Please revert use of java 8 apis. anyway null checking should happen before here.", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:25:28Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDIxMA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864210", "bodyText": "defaults should be moved to the builder.. just assign things here. this makes it easier to change from a diff pov later", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:26:08Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDMzMA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864330", "bodyText": "remove final keywords on locals as we don't do this unless it is remarkable. since this is how we usually look at locals the opposite is distracting.", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:26:50Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDQwMw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864403", "bodyText": "change to brave.internal.Nullable", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:27:12Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDQ3NA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864474", "bodyText": "double-check this cannot be null", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:27:33Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDU3MA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864570", "bodyText": "make sure the api is always returning non-null references. otherwise guard.", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:28:15Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDYyMQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864621", "bodyText": "use simple if statments, they are faster, smaller bytecode and also <java 8 compatible", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:28:40Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDcxNg==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864716", "bodyText": "use same line early exits here and everywhere", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:29:06Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDgxNQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864815", "bodyText": "anything that can be static method should be static method", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:29:44Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDg2Nw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864867", "bodyText": "remove privates", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:30:06Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NTgyNA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382865824", "bodyText": "move the builder to the top of the file and start like this so as to force the tracer to never be null. Also, we conventionally accept Tracing as that prevents later api breaks when we need other components from there (such as current trace context)\npublic final class MongoDBTracing {\n  public static MongoDBTracing create(Tracing tracing) {\n    return newBuilder(tracing).build();\n  }\n\n  public static Builder newBuilder(Tracing tracing) {\n    return newBuilder(tracing);\n  }\n\n  public static Builder newBuilder(Tracing tracing) {\n    return new Builder(tracing);\n  }\n\n  public static final class Builder {\n    final Tracing tracing;\n// other fields non-final as mutable\n    Builder(Tracing tracing) {\n      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n      this.tracing = tracing;\n--snip--\n  \n  MongoDBTracing(Builder builder) { // note this is package private\n    this.whatINeed = builder...\n--snip--\n\n  public CommandListener commandListener() {\n    return new MongoDBCommandListener(this); // this type can be package private\n  }", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:35:58Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;\n+    private int maxAbbreviatedCommandLength = 100;\n+\n+    /**\n+     * Sets the {@link Tracer} to use. Required.\n+     */\n+    public Builder tracer(final Tracer tracer) {", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjA4NA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382866084", "bodyText": "doing like this allows us a possibility to work with multiple versions, which may have multiple types.. In MySQL we use the single type for all because it has to be instantiated statically, which I believe is different here.", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NTgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjM0Nw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382866347", "bodyText": "this is unusual as we don't do this in any other of our features.. maybe a slight optimization to do that here and now in the first version. I understand that the mongodb.command would be long but so would the sql command, and someone can change data policy on all tags more flexibly with a finishedspanhandler..", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:39:24Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;\n+    private int maxAbbreviatedCommandLength = 100;\n+\n+    /**\n+     * Sets the {@link Tracer} to use. Required.\n+     */\n+    public Builder tracer(final Tracer tracer) {\n+      this.tracer = tracer;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets how many characters of the Mongo command to report in the \"mongo.command\" tag. Defaults to 100.", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzM1Ng==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893356", "bodyText": "Not sure but mongo may benefit from this default since SQL in the vast majority of usage will log prepared statements like (INSERT blah VALUES (?)) so while they can get gnarly, it's still sort of a fixed size. If the BsonDocument contains the entire payload of write operations, it's much easier to become ridiculously sized.", "author": "anuraaga", "createdAt": "2020-02-22T07:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzM4NA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893384", "bodyText": "That being said, 100 seems too small as a default.", "author": "anuraaga", "createdAt": "2020-02-22T07:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4NDE4Nw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384084187", "bodyText": "I tend to agree with @anuraaga here that Mongo is different from SQL here because Mongo commands can contain documents which can be very large (megabytes even), so it probably makes sense to set up sane defaults here.\nIf somebody wants to, they can set the limit to Integer.MAX_VALUE in the builder and then do their own processing in a FinishedSpanHandler, but I don't think that we have to make this the easy path.\nI'll raise the default limit to 1000 characters.\n@adriancole are you okay with keeping the truncation by default, or would you still prefer removing the truncation logic from here?", "author": "csabakos", "createdAt": "2020-02-25T19:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5Mjk5MQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384192991", "bodyText": "I'm ok with it, just maybe say something in the docs like \"set to a very large number ex Integer.MAX_INT\" to disable truncation", "author": "codefromthecrypt", "createdAt": "2020-02-25T23:36:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382866739", "bodyText": "we don't use any tag like db.type elsewhere (ex mysql) so I don't think we'd do that here.\nalso we need to check the tags are like existing mongo instrumentation people in zipkin use. please ask the people on the referring issue as this type of default policy is something to consider carefully. particularly the tag names ex mongo vs mongodb.\n@kojilin @huydx do you use mongo at LINE?", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:42:09Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDIyMA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382870220", "bodyText": "ps it may not be obvious why we never add \"db.type\" or \"rpc.type\" etc. main thing is every tag adds expense, indexing load and size.\nAlso, since there is no abstraction here, ex \"db.name\", you can easily find tag associated by searching for the concrete tag also added. ex in zipkin presence of tag is a valid search ex just \"mongodb.database\". if this convention was taken from another library, someone can also change the policy to backfill \"db.name\" for looking for the other tag. Later, we can add a parser here which would allow policy overrides to be easier also, but for now, I think least count of most usable tags is how to start.", "author": "codefromthecrypt", "createdAt": "2020-02-22T01:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDY2Mw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382870663", "bodyText": "ps while it isn't as usual for tags to match on name between metrics and tracing, names can be correlated. Brave is frequently used with micrometer, so you can look at what they tag https://github.com/micrometer-metrics/micrometer/blob/master/micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsCommandListener.java#L62", "author": "codefromthecrypt", "createdAt": "2020-02-22T01:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3OTU5MA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382879590", "bodyText": "Yes, we are using MongoDB. IMHO, databaseName usually provide enough information. or like MySQL's code, mongodb-$databasename?\nI have a question when we try to build a similar thing, sometimes we found MongoDB  is not using the same thread as client caller. It means the span may not belong to parent correctly.  Or recent MongoDB driver doesn't have this problem? But maybe ok because of it only happens occasionally.", "author": "kojilin", "createdAt": "2020-02-22T02:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzE2NQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r383063165", "bodyText": "@adriancole do we have other instrumentation where the chance of losing the parent span is built in? This seems like we need a huge disclaimer.", "author": "anuraaga", "createdAt": "2020-02-24T01:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTUwMA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r383065500", "bodyText": "specifically on this parent-attribution thing, we either wrap to stash the invocation context (ex CurrentTraceContext.wrap()) or we use a property bag given by the framework https://github.com/openzipkin/brave/blob/master/instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingCallFactory.java#L62", "author": "codefromthecrypt", "createdAt": "2020-02-24T02:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NTE3Ng==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384055176", "bodyText": "I have a question when we try to build a similar thing, sometimes we found MongoDB is not using the same thread as client caller. It means the span may not belong to parent correctly. Or recent MongoDB driver doesn't have this problem? But maybe ok because of it only happens occasionally.\n\n@kojilin\nFor the synchronous/legacy client, I believe the answer is that only some maintenance tasks are done on a thread other than the caller's thread:\n\nCursor cleaning\nConnection pool maintenance\n\nSo I think it's okay that spans from those threads are not attached to any parent span.\n\nThe reactive/async client on the other hand uses threads for its async completion handlers (so onCommandStarted and onCommandSucceeded/Failed may get called from background threads and also not necessarily from the same thread) but I believe that it is possible to set a custom StreamFactoryFactory on the MongoClientSettings.Builder which can in theory propagate the tracing context correctly between those handlers.\n(It's likely that I will punt on supporting the reactive/async client in this first version to try to keep the scope/complexity at bay.)", "author": "csabakos", "createdAt": "2020-02-25T18:47:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MzMyMw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384193323", "bodyText": "great research. in the code comments, please highlight the cursor and connection pool links and/or have unit tests if that's something easy to do.", "author": "codefromthecrypt", "createdAt": "2020-02-25T23:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjkyOA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382866928", "bodyText": "this is a bomb waiting to happen. unbounded maps can make OOM when there's a bug that causes the hooks not to fire. Consider what we use in MySQL if there's no explicit property across start and finish.. ThreadLocalSpan", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:43:22Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODU1OQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382878559", "bodyText": "The Mongo driver doesn't guarantee that the command listener methods will be called from the same thread, therefore I couldn't use ThreadLocalSpan. I'll leave a comment to that effect.\nAlso the CommandListener interface doesn't provide a mechanism for associating data with a command from start to finish... so I think a Map is pretty much the only option.", "author": "csabakos", "createdAt": "2020-02-22T02:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4Nzc4NQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382887785", "bodyText": "please do put a comment but we still need to make this better before merge as the map you are using is unbounded (can grow infinitely). In worst case we need to make a bounded version of the map, or use weak references.\nalso can you please cite the code in mongodb-driver itself that is hopping threads?\n@kojilin how are you handling this, btw.", "author": "codefromthecrypt", "createdAt": "2020-02-22T05:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA1NzMwOQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r383057309", "bodyText": "Currently, we are not using a command listener but just wrap the client code and delegate to the client.", "author": "kojilin", "createdAt": "2020-02-24T00:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MjQwMA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r383062400", "bodyText": "I see.. yeah this approach would prevent leaks", "author": "codefromthecrypt", "createdAt": "2020-02-24T01:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MDczNg==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384090736", "bodyText": "also can you please cite the code in mongodb-driver itself that is hopping threads?\n\n@adriancole Please see this comment about threading. The gist of it is that I believe that we could get away with ThreadLocalSpan for the synchronous/legacy driver, although there is no guarantee that Mongo won't change the threading model in the future as I couldn't find any documented guarantees.\nBut ThreadLocalSpan is likely insufficient for the reactive/async driver as that one calls the methods from whatever IO event loop thread the callback happens to run on.\nAll flavors (sync/async) of the driver use the same CommandLister interface.\nI could use ThreadLocalSpan for now and document that the reactive/async version is not supported. Later on I or somebody else can come back and add support for reactive in a separate pull request.\nDoes that sound good?", "author": "csabakos", "createdAt": "2020-02-25T19:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5NDM1Nw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384194357", "bodyText": "by synchronous/legacy, you mean the 3.x series?\nIn the case of the reactive/async, make a failing test with a TODO perhaps? It is ok to not address cases immediately, but it helps a lot to make a failing test with @Ignore. I do it all the time.. ex https://github.com/spring-cloud/spring-cloud-sleuth/blob/2.2.x/spring-cloud-sleuth-core/src/test/java/org/springframework/cloud/sleuth/instrument/web/client/ReactorNettyHttpClientBraveTests.java#L97", "author": "codefromthecrypt", "createdAt": "2020-02-25T23:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NzE5NQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382867195", "bodyText": "if we test with system managed resource, travis should start it and set the variables needed.. you can look for our mysql stuff for example. We don't want any tests that aren't actually run in CI", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:44:54Z", "path": "instrumentation/mongo/src/test/java/brave/mongo/ITTraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class ITTraceMongoCommandListener {\n+  private static final String A_COLLECTION_NAME = \"myCollection\"; // collection doesn't have to exist\n+  private static final String INVALID_COLLECTION_NAME = \"?.$\";\n+\n+  private final List<Span> spans = new CopyOnWriteArrayList<>();\n+\n+  private final Tracing tracing = tracingBuilder(Sampler.ALWAYS_SAMPLE).build();\n+  private MongoClient mongoClient;\n+  private MongoDatabase database;\n+\n+  @Before public void init() {\n+    final String databaseName = System.getenv(\"MONGODB_DB\");", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3OTk0Nw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382879947", "bodyText": "Can you point me to where MySQL is configured? I saw the environment variables in the MySQL tests but I don't see where those are set up, or how MySQL is being requested on Travis.\nI could also attempt to use https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo to start a MongoDB from the test itself.", "author": "csabakos", "createdAt": "2020-02-22T02:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NzE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4NzgzNg==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382887836", "bodyText": "maybe best to just use testcontainers instead. it should be easy to validate this is working in travis. We use testcontainers in many projects (zipkin, zipkin-reporter)\nhttps://github.com/testcontainers/testcontainers-java/tree/master/examples/mongodb-container/src/test/java/org/testcontainers/containers", "author": "codefromthecrypt", "createdAt": "2020-02-22T05:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NzE5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NzM3NQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382867375", "bodyText": "if there is a chance for different thread start/finish (maybe? if so it should be mentioned in comments in the main code). Anyway, if there is, please use conventions we use elsewhere. I think you'll notice we tend to use blocking queue if something is async as that's more reliable. have a look at other code like kafka ITHttp etc.", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:46:07Z", "path": "instrumentation/mongo/src/test/java/brave/mongo/ITTraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class ITTraceMongoCommandListener {\n+  private static final String A_COLLECTION_NAME = \"myCollection\"; // collection doesn't have to exist\n+  private static final String INVALID_COLLECTION_NAME = \"?.$\";\n+\n+  private final List<Span> spans = new CopyOnWriteArrayList<>();", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NzQ2NA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382867464", "bodyText": "in unit tests we don't mark final anywhere or private as it clutters and protection isn't important", "author": "codefromthecrypt", "createdAt": "2020-02-22T00:46:32Z", "path": "instrumentation/mongo/src/test/java/brave/mongo/ITTraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class ITTraceMongoCommandListener {\n+  private static final String A_COLLECTION_NAME = \"myCollection\"; // collection doesn't have to exist\n+  private static final String INVALID_COLLECTION_NAME = \"?.$\";\n+\n+  private final List<Span> spans = new CopyOnWriteArrayList<>();\n+\n+  private final Tracing tracing = tracingBuilder(Sampler.ALWAYS_SAMPLE).build();", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDgyNA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382870824", "bodyText": "odd to call this operation when mongo calls it command", "author": "codefromthecrypt", "createdAt": "2020-02-22T01:11:18Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "43a76c968227d10381bcee0146e83722330a62f5", "url": "https://github.com/openzipkin/brave/commit/43a76c968227d10381bcee0146e83722330a62f5", "message": "Rename package to mongodb.", "committedDate": "2020-02-22T02:00:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3OTEzNg==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382879136", "bodyText": "If we have databaseName for remoteServiceName, do we need this?", "author": "kojilin", "createdAt": "2020-02-22T02:41:38Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzIxOA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893218", "bodyText": "Using the first value to get the collection name seems to rely on implementation details. The vast majority of commands seem to have a field with commandName: collection. I found one, getMore, which has a field collection: collection. How about trying both?\nBsonValue value = command.get(commandName);\nif (value != null && value.isString()) {\n  return value.asString().getValue().trim();\n}\nvalue = command.get(\"collection\");\nif (value != null && value.isString()) {\n  // Actually we should add a static helper that coorces BsonValue into a String or null\n}", "author": "anuraaga", "createdAt": "2020-02-22T07:14:04Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzgxOA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893818", "bodyText": "Actually, I also found addShard, and presumably similar commands, which don't operate on collections, and can have values with quite crazy cardinality as it's a comma-separated list <replica_set>/<hostname><:port>,<hostname><:port>, .... In either the current or my proposed scheme, I think this will end up written as the collection tag.\nOur builder probably should accept a whitelist of commands to have the collection annotated with a default conservative, widely used set, I think just the top three categories, aggregation, geospatial, query and write here:\nhttps://docs.mongodb.com/manual/reference/command/#aggregation-commands", "author": "anuraaga", "createdAt": "2020-02-22T07:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzQ2Ng==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893466", "bodyText": "Better to validate and not accept negative values (have no real meaning and more likely a user bug) instead of using Math.max above.", "author": "anuraaga", "createdAt": "2020-02-22T07:18:53Z", "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;\n+    private int maxAbbreviatedCommandLength = 100;\n+\n+    /**\n+     * Sets the {@link Tracer} to use. Required.\n+     */\n+    public Builder tracer(final Tracer tracer) {\n+      this.tracer = tracer;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets how many characters of the Mongo command to report in the \"mongo.command\" tag. Defaults to 100.\n+     * If non-positive, command reporting will be disabled.\n+     */\n+    public Builder maxAbbreviatedCommandLength(final int maxAbbreviatedCommandLength) {", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzY4NA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893684", "bodyText": "Can you add tests for\n\nCommand which does not follow command: collection convention, e.g. getMore\nCommand which does not operate on a collection, e.g. addShard\nWrite command with a large payload", "author": "anuraaga", "createdAt": "2020-02-22T07:23:23Z", "path": "instrumentation/mongo/src/test/java/brave/mongo/ITTraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class ITTraceMongoCommandListener {", "originalCommit": "dfddc3ea398b09bc01db87a706aebb33303fa138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "02b886de820bdb1f664a60f28cbe807b65e1ac80", "url": "https://github.com/openzipkin/brave/commit/02b886de820bdb1f664a60f28cbe807b65e1ac80", "message": "Improvements following code review comments.", "committedDate": "2020-02-27T02:28:32Z", "type": "commit"}, {"oid": "7a830afa5900669f59247e471243ce3214fa08a9", "url": "https://github.com/openzipkin/brave/commit/7a830afa5900669f59247e471243ce3214fa08a9", "message": "Merge branch 'master' into add-mongo-instrumentation", "committedDate": "2020-02-27T02:44:17Z", "type": "commit"}, {"oid": "3af61108ba26a953a40e446577f845537376d3fb", "url": "https://github.com/openzipkin/brave/commit/3af61108ba26a953a40e446577f845537376d3fb", "message": "Small documentation improvement.", "committedDate": "2020-02-27T02:46:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg4OTIwOQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384889209", "bodyText": "Copy into a new set too, the user will still be able to modify the set through the builder.", "author": "anuraaga", "createdAt": "2020-02-27T03:00:01Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    final Set<String> commandsWithCollectionName = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+      \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+      \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));\n+    int maxAbbreviatedCommandLength = 1000;\n+\n+    Builder(Tracing tracing) {\n+      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n+      this.tracing = tracing;\n+    }\n+\n+    Builder(MongoDBTracing mongoDBTracing) {\n+      this(mongoDBTracing.tracing);\n+      maxAbbreviatedCommandLength(mongoDBTracing.maxAbbreviatedCommandLength);\n+      clearCommandsWithCollectionName();\n+      addAllCommandsWithCollectionName(mongoDBTracing.commandsWithCollectionName);\n+    }\n+\n+    /**\n+     * Sets how many characters of the MongoDB command to report in the \"mongodb.command\" tag. Defaults to 1000.\n+     *\n+     * If zero, command reporting will be disabled. The command name will still be reported as \"mongodb.command.name\".\n+     *\n+     * Set it to a large number (ex. {@link Integer#MAX_VALUE}) to disable truncation.\n+     */\n+    public Builder maxAbbreviatedCommandLength(int maxAbbreviatedCommandLength) {\n+      if (maxAbbreviatedCommandLength < 0) throw new IllegalArgumentException(\"maxAbbreviatedCommandLength < 0\");\n+      this.maxAbbreviatedCommandLength = maxAbbreviatedCommandLength;\n+      return this;\n+    }\n+\n+    /**\n+     * Clear the allow-list of command names for which tracing will attempt to extract the collection/view name from\n+     * the argument.\n+     */\n+    public Builder clearCommandsWithCollectionName() {\n+      commandsWithCollectionName.clear();\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a MongoDB command name to the allow-list, indicating that if the command's argument is a string, the\n+     * argument contains the collection/view name. Tracing will only attempt to extract the collection/view name\n+     * argument from allow-listed commands.\n+     *\n+     * The default allow-list is a set of commonly used commands ({@link #commandsWithCollectionName}) that operate on\n+     * collections/views.\n+     *\n+     * @param commandName command name to add to the allow-list\n+     */\n+    public Builder addCommandWithCollectionName(String commandName) {\n+      commandsWithCollectionName.add(commandName);\n+      return this;\n+    }\n+\n+    /**\n+     * Same as {@link #addCommandWithCollectionName(String)} but for a collection of command names.\n+     */\n+    public Builder addAllCommandsWithCollectionName(Collection<String> commandNames) {\n+      commandsWithCollectionName.addAll(commandNames);\n+      return this;\n+    }\n+\n+    public MongoDBTracing build() {\n+      return new MongoDBTracing(this);\n+    }\n+  }\n+\n+  final Tracing tracing;\n+  final int maxAbbreviatedCommandLength;\n+  final Set<String> commandsWithCollectionName;\n+\n+  MongoDBTracing(Builder builder) {\n+    tracing = builder.tracing;\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    commandsWithCollectionName = Collections.unmodifiableSet(builder.commandsWithCollectionName);", "originalCommit": "3af61108ba26a953a40e446577f845537376d3fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDA1Mw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384890053", "bodyText": "Just return commandName if collection is null. I'm not sure but don't expect the JVM to optimize the stringbuilder away for this pattern.", "author": "anuraaga", "createdAt": "2020-02-27T03:03:33Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Span;\n+import brave.internal.Nullable;\n+import brave.propagation.ThreadLocalSpan;\n+import com.mongodb.MongoException;\n+import com.mongodb.MongoSocketException;\n+import com.mongodb.connection.ConnectionDescription;\n+import com.mongodb.connection.ConnectionId;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Set;\n+\n+/**\n+ * A MongoDB command listener that will report via Brave how long each command takes and other information about the\n+ * commands.\n+ *\n+ * Implementation notes regarding the <b>synchronous</b> MongoDB clients ({@link com.mongodb.MongoClient} and\n+ * {@link com.mongodb.client.MongoClient}):\n+ * <p>It is sufficient to use {@link ThreadLocalSpan} because every command starts and ends on the same thread.</p>\n+ * <p>Most commands are executed in the thread where the {@code MongoClient} methods are called from, so (assuming that\n+ * the tracing context is correctly propagated to that thread) all spans should have the correct parent.</p>\n+ * <p>There are two exceptions to the above rule. Some maintenance operations are done on background threads:\n+ * <a href=\"https://github.com/mongodb/mongo-java-driver/blob/67c9f738ae44bc15befb822644e7266634c7dcf5/driver-legacy/src/main/com/mongodb/MongoClient.java#L802\">cursor cleaning</a>\n+ * and\n+ * <a href=\"https://github.com/mongodb/mongo-java-driver/blob/67c9f738ae44bc15befb822644e7266634c7dcf5/driver-core/src/main/com/mongodb/internal/connection/DefaultConnectionPool.java#L95\">connection pool maintenance</a>.\n+ * The spans resulting from these maintenance operations will not have a parent span.</p>\n+ *\n+ * Implementation notes regarding the <b>asynchronous</b> MongoDB clients ({@code com.mongodb.async.MongoClient} and\n+ * {@code com.mongodb.reactivestreams.client.MongoClient}:\n+ * <p>Support for asynchronous clients is <b>unimplemented</b>.</p>\n+ * <p>The asynchronous clients use threads for the async completion handlers (meaning that\n+ * {@link #commandStarted(CommandStartedEvent)}} and {@link #commandSucceeded(CommandSucceededEvent)}/\n+ * {@link #commandFailed(CommandFailedEvent)}} may get called from background threads and also not necessarily from the\n+ * same thread).</p>\n+ * <p>It should be possible to set a custom {@link com.mongodb.connection.StreamFactoryFactory} on the {@link\n+ * com.mongodb.MongoClientSettings.Builder} which can propagate the tracing context correctly between those handlers,\n+ * but this is <b>unimplemented</b> and it is unknown if this would be sufficient.</p>\n+ */\n+final class TraceMongoCommandListener implements CommandListener {\n+  final Set<String> commandsWithCollectionName;\n+  final int maxAbbreviatedCommandLength;\n+  final ThreadLocalSpan threadLocalSpan;\n+  final JsonWriterSettings jsonWriterSettings;\n+\n+  TraceMongoCommandListener(MongoDBTracing mongoDBTracing) {\n+    this(mongoDBTracing, ThreadLocalSpan.create(mongoDBTracing.tracing.tracer()));\n+  }\n+\n+  TraceMongoCommandListener(MongoDBTracing mongoDBTracing, ThreadLocalSpan threadLocalSpan) {\n+    commandsWithCollectionName = mongoDBTracing.commandsWithCollectionName;\n+    maxAbbreviatedCommandLength = mongoDBTracing.maxAbbreviatedCommandLength;\n+    this.threadLocalSpan = threadLocalSpan;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(maxAbbreviatedCommandLength)\n+      .build();\n+  }\n+\n+  /**\n+   * Uses {@link ThreadLocalSpan} as there's no attribute namespace shared between callbacks, but\n+   * all callbacks happen on the same thread.\n+   */\n+  @Override public void commandStarted(CommandStartedEvent event) {\n+    Span span = threadLocalSpan.next();\n+    if (span == null || span.isNoop()) return;\n+\n+    String commandName = event.getCommandName();\n+    String databaseName = event.getDatabaseName();\n+    BsonDocument command = event.getCommand();\n+    String collectionName = getCollectionName(command, commandName);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(\"mongodb-\" + databaseName)\n+      .tag(\"mongodb.command.name\", commandName);\n+\n+    String abbreviatedCommand = getAbbreviatedCommand(command);\n+    if (abbreviatedCommand != null) {\n+      span.tag(\"mongodb.command\", abbreviatedCommand);\n+    }\n+\n+    if (collectionName != null) {\n+      span.tag(\"mongodb.collection\", collectionName);\n+    }\n+\n+    ConnectionDescription connectionDescription = event.getConnectionDescription();\n+    if (connectionDescription != null) {\n+      ConnectionId connectionId = connectionDescription.getConnectionId();\n+      if (connectionId != null) {\n+        span.tag(\"mongodb.cluster.id\", connectionId.getServerId().getClusterId().getValue());\n+      }\n+\n+      try {\n+        InetSocketAddress socketAddress = connectionDescription.getServerAddress().getSocketAddress();\n+        span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+      } catch (MongoSocketException ignored) {\n+\n+      }\n+    }\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(CommandSucceededEvent event) {\n+    Span span = threadLocalSpan.remove();\n+    if (span == null) return;\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(CommandFailedEvent event) {\n+    Span span = threadLocalSpan.remove();\n+    if (span == null) return;\n+    Throwable throwable = event.getThrowable();\n+    span.error(throwable == null ? new MongoException(\"Command failed but no throwable was reported\") : throwable);\n+    span.finish();\n+  }\n+\n+  @Nullable String getCollectionName(BsonDocument command, String commandName) {\n+    if (commandsWithCollectionName.contains(commandName)) {\n+      String collectionName = getNonEmptyBsonString(command.get(commandName));\n+      if (collectionName != null) {\n+        return collectionName;\n+      }\n+    }\n+    // Some other commands, like getMore, have a field like {\"collection\": collectionName}.\n+    return getNonEmptyBsonString(command.get(\"collection\"));\n+  }\n+\n+  /**\n+   * @return trimmed string from {@code bsonValue} or null if the trimmed string was empty or the value wasn't a string\n+   */\n+  @Nullable static String getNonEmptyBsonString(BsonValue bsonValue) {\n+    if (bsonValue == null || !bsonValue.isString()) return null;\n+    String stringValue = bsonValue.asString().getValue().trim();\n+    return stringValue.isEmpty() ? null : stringValue;\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the MongoDB protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  @Nullable String getAbbreviatedCommand(BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) return null;\n+    String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? null : abbreviatedCommand;\n+  }\n+\n+  static String getSpanName(String commandName, @Nullable String collectionName) {\n+    return commandName + (collectionName == null ? \"\" : (\" \" + collectionName));", "originalCommit": "3af61108ba26a953a40e446577f845537376d3fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDYwNQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384890605", "bodyText": "Thanks for the test coverage", "author": "anuraaga", "createdAt": "2020-02-27T03:06:12Z", "path": "instrumentation/mongodb/src/test/java/brave/mongodb/ITMongoDBTracing.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoCommandException;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoCursor;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.bson.BsonDocument;\n+import org.bson.BsonString;\n+import org.bson.Document;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+\n+public class ITMongoDBTracing extends ITMongoDBTracingBase {\n+  MongoClient mongoClient;\n+  MongoDatabase database;\n+\n+  @Before public void init() {\n+    CommandListener listener = MongoDBTracing.newBuilder(tracing)\n+      .maxAbbreviatedCommandLength(8)\n+      .build()\n+      .commandListener();\n+    MongoClientSettings settings = mongoClientSettingsBuilder()\n+      .addCommandListener(listener)\n+      .build();\n+    mongoClient = MongoClients.create(settings);\n+    database = mongoClient.getDatabase(DATABASE_NAME);\n+\n+    spans.clear();\n+  }\n+\n+  @After public void close() {\n+    Tracing.current().close();\n+    if (mongoClient != null) mongoClient.close();\n+  }\n+\n+  @Test public void makesChildOfCurrentSpan() {\n+    ScopedSpan parent = tracing.tracer().startScopedSpan(\"test\");\n+    try {\n+      executeFind(COLLECTION_NAME);\n+    } finally {\n+      parent.finish();\n+    }\n+\n+    assertThat(spans)\n+      .hasSize(2);\n+  }\n+\n+  @Test public void reportsClientKind() {\n+    executeFind(COLLECTION_NAME);\n+\n+    assertThat(spans)\n+      .extracting(Span::kind)\n+      .containsExactly(Span.Kind.CLIENT);\n+  }\n+\n+  @Test\n+  public void defaultSpanNameIsCommandNameAndCollectionName() {\n+    MongoCursor<?> mongoCursor = database.getCollection(COLLECTION_NAME).find().batchSize(1).iterator();\n+\n+    assertThat(mongoCursor.hasNext()).isTrue(); // id=1\n+    mongoCursor.next();\n+    assertThat(mongoCursor.hasNext()).isTrue(); // id=2\n+    mongoCursor.next();\n+\n+    // getMore\n+    assertThat(spans)\n+      .extracting(Span::name)\n+      .containsExactly(\n+        \"find \" + COLLECTION_NAME.toLowerCase(), // extracted from {\"find\": \"myCollection\"}\n+        \"getmore \" + COLLECTION_NAME.toLowerCase() // extracted from {\"getMore\": <cursorId>, \"collection\": \"myCollection\"}\n+      );\n+  }\n+\n+  /** This intercepts all commands, not just queries. This ensures commands without a collection name work */\n+  @Test\n+  public void defaultSpanNameIsCommandName_notStringArgument() {\n+    database.listCollections().first();\n+\n+    assertThat(spans)\n+      .extracting(Span::name)\n+      .containsExactly(\"listcollections\");\n+  }\n+\n+  @Test\n+  public void defaultSpanNameIsCommandName_nonCollectionCommand() {", "originalCommit": "3af61108ba26a953a40e446577f845537376d3fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MTQ0OQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384891449", "bodyText": "A bit overkill but you may want to add a test that uses the builder after building and show it doesn't mutate the built object.", "author": "anuraaga", "createdAt": "2020-02-27T03:09:58Z", "path": "instrumentation/mongodb/src/test/java/brave/mongodb/MongoDBTracingTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracer;\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+import org.assertj.core.api.InstanceOfAssertFactories;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MongoDBTracingTest {", "originalCommit": "3af61108ba26a953a40e446577f845537376d3fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5", "url": "https://github.com/openzipkin/brave/commit/a2d42be4eadc25a39b8ecaac8e8e582529aecba5", "message": "More improvements following review.", "committedDate": "2020-02-27T06:19:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNTI1Mg==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384935252", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public final static class Builder {\n          \n          \n            \n              public static final class Builder {", "author": "anuraaga", "createdAt": "2020-02-27T06:32:05Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {", "originalCommit": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNTgzMA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384935830", "bodyText": "While not a huge performance concern, let's go ahead and make a constant for the default commands\npublic static final class Builder {\n  // See https:// ...\n  static final List<String> DEFAULT_COMMANDS_WITH_COLLECTION_NAME = Arrays.asList(...);\n\n  final Set<String> commandsWithCollectionName = new HashSet<>();\n\n  Builder(Tracing tracing) {\n    commandsWithCollectionName.addAll(DEFAULT_COMMANDS_WITH_COLLECTION_NAME);\n  }\n\n  Builder(MongoDbTracing t) {\n    commandsWithCollectionName.addAll(t.commandsWithCollectionName);\n  }", "author": "anuraaga", "createdAt": "2020-02-27T06:34:01Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    final Set<String> commandsWithCollectionName = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",", "originalCommit": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjA2Mg==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384936062", "bodyText": "I'd just set maxAbbreviatedCommandLength = t.maxAbbreviated... since we never need to validate values from a built object.", "author": "anuraaga", "createdAt": "2020-02-27T06:34:43Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    final Set<String> commandsWithCollectionName = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+      \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+      \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));\n+    int maxAbbreviatedCommandLength = 1000;\n+\n+    Builder(Tracing tracing) {\n+      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n+      this.tracing = tracing;\n+    }\n+\n+    Builder(MongoDBTracing mongoDBTracing) {\n+      this(mongoDBTracing.tracing);\n+      maxAbbreviatedCommandLength(mongoDBTracing.maxAbbreviatedCommandLength);", "originalCommit": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjY3NA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384936674", "bodyText": "Let's add To replace the list completely, don't forget to call clearCommands... first.", "author": "anuraaga", "createdAt": "2020-02-27T06:36:46Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    final Set<String> commandsWithCollectionName = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+      \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+      \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));\n+    int maxAbbreviatedCommandLength = 1000;\n+\n+    Builder(Tracing tracing) {\n+      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n+      this.tracing = tracing;\n+    }\n+\n+    Builder(MongoDBTracing mongoDBTracing) {\n+      this(mongoDBTracing.tracing);\n+      maxAbbreviatedCommandLength(mongoDBTracing.maxAbbreviatedCommandLength);\n+      clearCommandsWithCollectionName();\n+      addAllCommandsWithCollectionName(mongoDBTracing.commandsWithCollectionName);\n+    }\n+\n+    /**\n+     * Sets how many characters of the MongoDB command to report in the \"mongodb.command\" tag. Defaults to 1000.\n+     *\n+     * If zero, command reporting will be disabled. The command name will still be reported as \"mongodb.command.name\".\n+     *\n+     * Set it to a large number (ex. {@link Integer#MAX_VALUE}) to disable truncation.\n+     */\n+    public Builder maxAbbreviatedCommandLength(int maxAbbreviatedCommandLength) {\n+      if (maxAbbreviatedCommandLength < 0) throw new IllegalArgumentException(\"maxAbbreviatedCommandLength < 0\");\n+      this.maxAbbreviatedCommandLength = maxAbbreviatedCommandLength;\n+      return this;\n+    }\n+\n+    /**\n+     * Clear the allow-list of command names for which tracing will attempt to extract the collection/view name from\n+     * the argument.\n+     */\n+    public Builder clearCommandsWithCollectionName() {\n+      commandsWithCollectionName.clear();\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a MongoDB command name to the allow-list, indicating that if the command's argument is a string, the\n+     * argument contains the collection/view name. Tracing will only attempt to extract the collection/view name\n+     * argument from allow-listed commands.\n+     *\n+     * The default allow-list is a set of commonly used commands ({@link #commandsWithCollectionName}) that operate on", "originalCommit": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51", "url": "https://github.com/openzipkin/brave/commit/d4a0f1d43a26363ad372071b39e029078c1bdc51", "message": "Small performance and documentation tweaks. Fixed version number in POM.", "committedDate": "2020-02-27T15:37:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDE3Mg==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385434172", "bodyText": "this seems pretty special case, why would a user change this? typically the impl is responsible for knowing the driver.\ndepending on this answer, more review to follow :)", "author": "codefromthecrypt", "createdAt": "2020-02-27T23:43:11Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public static final class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    static final List<String> DEFAULT_COMMANDS_WITH_COLLECTION_NAME = Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+      \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+      \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\");\n+    final Set<String> commandsWithCollectionName = new HashSet<>();\n+    int maxAbbreviatedCommandLength = 1000;\n+\n+    Builder(Tracing tracing) {\n+      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n+      this.tracing = tracing;\n+      commandsWithCollectionName.addAll(DEFAULT_COMMANDS_WITH_COLLECTION_NAME);\n+    }\n+\n+    Builder(MongoDBTracing mongoDBTracing) {\n+      tracing = mongoDBTracing.tracing;\n+      maxAbbreviatedCommandLength = mongoDBTracing.maxAbbreviatedCommandLength;\n+      commandsWithCollectionName.addAll(mongoDBTracing.commandsWithCollectionName);\n+    }\n+\n+    /**\n+     * Sets how many characters of the MongoDB command to report in the \"mongodb.command\" tag. Defaults to 1000.\n+     *\n+     * If zero, command reporting will be disabled. The command name will still be reported as \"mongodb.command.name\".\n+     *\n+     * Set it to a large number (ex. {@link Integer#MAX_VALUE}) to disable truncation.\n+     */\n+    public Builder maxAbbreviatedCommandLength(int maxAbbreviatedCommandLength) {\n+      if (maxAbbreviatedCommandLength < 0) throw new IllegalArgumentException(\"maxAbbreviatedCommandLength < 0\");\n+      this.maxAbbreviatedCommandLength = maxAbbreviatedCommandLength;\n+      return this;\n+    }\n+\n+    /**\n+     * Clear the allow-list of command names for which tracing will attempt to extract the collection/view name from\n+     * the argument.\n+     */\n+    public Builder clearCommandsWithCollectionName() {\n+      commandsWithCollectionName.clear();\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a MongoDB command name to the allow-list, indicating that if the command's argument is a string, the\n+     * argument contains the collection/view name. Tracing will only attempt to extract the collection/view name\n+     * argument from allow-listed commands.\n+     *\n+     * The default allow-list is a set of commonly used commands ({@link #DEFAULT_COMMANDS_WITH_COLLECTION_NAME}) that\n+     * operate on collections/views.\n+     *\n+     * To replace the list completely, don't forget to call {@link #clearCommandsWithCollectionName()} first.\n+     *\n+     * @param commandName command name to add to the allow-list\n+     */\n+    public Builder addCommandWithCollectionName(String commandName) {", "originalCommit": "d4a0f1d43a26363ad372071b39e029078c1bdc51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3OTIyMQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r387279221", "bodyText": "The idea is that in case I missed something in the default list, or if new commands get added in a newer version of MongoDB, then the user could easily add the missing commands here.", "author": "csabakos", "createdAt": "2020-03-03T20:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2OTE3NA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r387369174", "bodyText": "I understand where you are going but this would be very unique as we don't do this anywhere else. We have had maintenance like this in redis before, but in general it is better to have people update the main codebase. This tension helps keep the code correct and people updating patches (vs 100 different people guessing what the missing commands were). Any first version of anything should expect to have some maintenance while things settle. Let's leave this out?", "author": "codefromthecrypt", "createdAt": "2020-03-04T00:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NzAyOA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r387447028", "bodyText": "I think I originally suggested the customization for @csabakos exact reasoning but also agree with @adriancole. So I'm fine with removing it :)", "author": "anuraaga", "createdAt": "2020-03-04T04:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDQ2Mg==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385434462", "bodyText": "move this stuff to RATIONALE.md as it is easier to read. you can make a comment to look at that if you like", "author": "codefromthecrypt", "createdAt": "2020-02-27T23:44:06Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Span;\n+import brave.internal.Nullable;\n+import brave.propagation.ThreadLocalSpan;\n+import com.mongodb.MongoException;\n+import com.mongodb.MongoSocketException;\n+import com.mongodb.connection.ConnectionDescription;\n+import com.mongodb.connection.ConnectionId;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Set;\n+\n+/**\n+ * A MongoDB command listener that will report via Brave how long each command takes and other information about the\n+ * commands.\n+ *\n+ * Implementation notes regarding the <b>synchronous</b> MongoDB clients ({@link com.mongodb.MongoClient} and", "originalCommit": "d4a0f1d43a26363ad372071b39e029078c1bdc51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDgwMQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385434801", "bodyText": "you can add the strict scope decorator", "author": "codefromthecrypt", "createdAt": "2020-02-27T23:45:06Z", "path": "instrumentation/mongodb/src/test/java/brave/mongodb/ITMongoDBTracingBase.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.testcontainers.containers.GenericContainer;\n+import zipkin2.Span;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+public class ITMongoDBTracingBase {\n+  static String DATABASE_NAME = \"myDatabase\";\n+  static String COLLECTION_NAME = \"myCollection\";\n+  static String INVALID_COLLECTION_NAME = \"?.$\";\n+\n+  static int MONGODB_PORT = 27017;\n+\n+  BlockingQueue<Span> spans = new LinkedBlockingQueue<>();\n+  Tracing tracing = tracingBuilder(Sampler.ALWAYS_SAMPLE).build();\n+\n+  @ClassRule\n+  public static GenericContainer<?> mongo = new GenericContainer<>(\"mongo:4.0\")\n+    .withExposedPorts(MONGODB_PORT);\n+\n+  @BeforeClass public static void initClass() {\n+    MongoClient mongoClient = MongoClients.create(mongoClientSettingsBuilder().build());\n+    MongoDatabase database = mongoClient.getDatabase(DATABASE_NAME);\n+    MongoCollection<Document> collection = database.getCollection(COLLECTION_NAME);\n+    Document document1 = new Document(\"id\", 1);\n+    Document document2 = new Document(\"id\", 2);\n+    collection.insertMany(Arrays.asList(document1, document2));\n+  }\n+\n+  Tracing.Builder tracingBuilder(Sampler sampler) {\n+    return Tracing.newBuilder()\n+      .spanReporter(spans::add)\n+      .currentTraceContext(ThreadLocalCurrentTraceContext.create())", "originalCommit": "d4a0f1d43a26363ad372071b39e029078c1bdc51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNTAzNQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385435035", "bodyText": "if you can, be more specific.. ex what type needs to changed to do this.. add a TODO?", "author": "codefromthecrypt", "createdAt": "2020-02-27T23:45:44Z", "path": "instrumentation/mongodb/src/test/java/brave/mongodb/ITMongoDBTracingReactive.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.reactivestreams.client.MongoClient;\n+import com.mongodb.reactivestreams.client.MongoClients;\n+import com.mongodb.reactivestreams.client.MongoDatabase;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Ignore(\"makesChildOfCurrentSpan() fails because support for reactive MongoDB tracing is unimplemented\")", "originalCommit": "d4a0f1d43a26363ad372071b39e029078c1bdc51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2NDQyNQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r396164425", "bodyText": "add the issue number? I think you raised one.", "author": "codefromthecrypt", "createdAt": "2020-03-23T00:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNTAzNQ=="}], "type": "inlineReview"}, {"oid": "be2c3cac59cb418a9011d240cd00d57157575320", "url": "https://github.com/openzipkin/brave/commit/be2c3cac59cb418a9011d240cd00d57157575320", "message": "Prefer underscores to dots and other minor improvements.", "committedDate": "2020-03-03T18:02:14Z", "type": "commit"}, {"oid": "24b9c9b99953bc9b10bbd3d594811bbe115fc02f", "url": "https://github.com/openzipkin/brave/commit/24b9c9b99953bc9b10bbd3d594811bbe115fc02f", "message": "Remove mongodb.command tagging.", "committedDate": "2020-03-03T19:51:05Z", "type": "commit"}, {"oid": "2469216845b5fb59c6dd7db24e60d91e39c10d1e", "url": "https://github.com/openzipkin/brave/commit/2469216845b5fb59c6dd7db24e60d91e39c10d1e", "message": "Update tag names in README.", "committedDate": "2020-03-03T20:36:44Z", "type": "commit"}, {"oid": "bf592ac75bc59de64350ff1612affba3e2663b72", "url": "https://github.com/openzipkin/brave/commit/bf592ac75bc59de64350ff1612affba3e2663b72", "message": "Document tag naming convention in RATIONALE.md and rename command_name to just command accordingly.", "committedDate": "2020-03-04T04:23:15Z", "type": "commit"}, {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824", "url": "https://github.com/openzipkin/brave/commit/cc754307fb1fcb4ef6783be6aad11baee34f8824", "message": "Remove commandsWithCollectionName from builder.", "committedDate": "2020-03-04T05:03:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDkxNg==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r389204916", "bodyText": "reconsider if this should be \"mongodb.command_name\" as it gets out of the way of \"mongodb.command\" if folks later add the full command as a property..", "author": "codefromthecrypt", "createdAt": "2020-03-07T00:30:56Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Span;\n+import brave.internal.Nullable;\n+import brave.propagation.ThreadLocalSpan;\n+import com.mongodb.MongoException;\n+import com.mongodb.MongoSocketException;\n+import com.mongodb.connection.ConnectionDescription;\n+import com.mongodb.connection.ConnectionId;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A MongoDB command listener that will report via Brave how long each command takes and other information about the\n+ * commands.\n+ *\n+ * See <a href=\"https://github.com/openzipkin/brave/blob/master/instrumentation/mongodb/RATIONALE.md\">RATIONALE.md</a>\n+ * for implementation notes.\n+ */\n+final class TraceMongoCommandListener implements CommandListener {\n+  // See https://docs.mongodb.com/manual/reference/command for the command reference\n+  static final Set<String> COMMANDS_WITH_COLLECTION_NAME = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+    \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+    \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));\n+\n+  final ThreadLocalSpan threadLocalSpan;\n+\n+  TraceMongoCommandListener(MongoDBTracing mongoDBTracing) {\n+    this(ThreadLocalSpan.create(mongoDBTracing.tracing.tracer()));\n+  }\n+\n+  TraceMongoCommandListener(ThreadLocalSpan threadLocalSpan) {\n+    this.threadLocalSpan = threadLocalSpan;\n+  }\n+\n+  /**\n+   * Uses {@link ThreadLocalSpan} as there's no attribute namespace shared between callbacks, but\n+   * all callbacks happen on the same thread.\n+   */\n+  @Override public void commandStarted(CommandStartedEvent event) {\n+    Span span = threadLocalSpan.next();\n+    if (span == null || span.isNoop()) return;\n+\n+    String commandName = event.getCommandName();\n+    String databaseName = event.getDatabaseName();\n+    BsonDocument command = event.getCommand();\n+    String collectionName = getCollectionName(command, commandName);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(\"mongodb-\" + databaseName)\n+      .tag(\"mongodb.command\", commandName);", "originalCommit": "cc754307fb1fcb4ef6783be6aad11baee34f8824", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NzU3Nw==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r391087577", "bodyText": "I changed it to \"command\" to align with MongoMetricsCommandListener. I figured there is value in being consistent there, and if we bring back the full command in the future, we can call that \"full_command\" or something like that.", "author": "csabakos", "createdAt": "2020-03-11T16:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDkxNg=="}], "type": "inlineReview"}, {"oid": "fec6089659cbe8e0007e1d2136d4c4368a404bec", "url": "https://github.com/openzipkin/brave/commit/fec6089659cbe8e0007e1d2136d4c4368a404bec", "message": "One more round of improvements.", "committedDate": "2020-03-11T16:11:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MzkyOQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r396163929", "bodyText": "we can remove this and the ctor that accepts MongoDBtracing as we don't have this for other builders. (consistency)", "author": "codefromthecrypt", "createdAt": "2020-03-23T00:06:31Z", "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ *\n+ * As of now, this instrumentation can only be used with the synchronous MongoDB driver. Do not use it with the\n+ * asynchronous or reactive drivers as tracing data will be incorrect.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {", "originalCommit": "fec6089659cbe8e0007e1d2136d4c4368a404bec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2NTI3MQ==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r396165271", "bodyText": "not handling onError could lead to hard to debug things later. Can you refactor to use AssertableCallback once #1120 is merged?", "author": "codefromthecrypt", "createdAt": "2020-03-23T00:19:13Z", "path": "instrumentation/mongodb/src/test/java/brave/mongodb/ITMongoDBTracingReactive.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.reactivestreams.client.MongoClient;\n+import com.mongodb.reactivestreams.client.MongoClients;\n+import com.mongodb.reactivestreams.client.MongoDatabase;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+// TODO: Add support for Reactive tracing. See the notes in RATIONALE.md.\n+@Ignore(\"makesChildOfCurrentSpan() fails because support for reactive MongoDB tracing is unimplemented\")\n+public class ITMongoDBTracingReactive extends ITMongoDBTracingBase {\n+  MongoClient mongoClient;\n+  MongoDatabase database;\n+\n+  @Before public void init() {\n+    CommandListener listener = MongoDBTracing.newBuilder(tracing)\n+      .build()\n+      .commandListener();\n+    MongoClientSettings settings = mongoClientSettingsBuilder()\n+      .addCommandListener(listener)\n+      .build();\n+    mongoClient = MongoClients.create(settings);\n+    database = mongoClient.getDatabase(\"testDatabase\");\n+\n+    spans.clear();\n+  }\n+\n+  @After public void close() {\n+    Tracing.current().close();\n+    if (mongoClient != null) mongoClient.close();\n+  }\n+\n+  @Test public void makesChildOfCurrentSpan() throws InterruptedException {\n+    ScopedSpan parent = tracing.tracer().startScopedSpan(\"test\");\n+    try {\n+      blockUntilComplete(database.getCollection(COLLECTION_NAME).find().first());\n+    } finally {\n+      parent.finish();\n+    }\n+\n+    assertThat(spans)\n+      .hasSize(2);\n+  }\n+\n+  static void blockUntilComplete(Publisher<?> publisher) throws InterruptedException {\n+    CountDownLatch countDownLatch = new CountDownLatch(1);\n+\n+    publisher.subscribe(new Subscriber<Object>() {\n+      @Override public void onSubscribe(Subscription subscription) {\n+        subscription.request(Long.MAX_VALUE);\n+      }\n+\n+      @Override public void onNext(Object o) {\n+\n+      }\n+\n+      @Override public void onError(Throwable throwable) {\n+", "originalCommit": "fec6089659cbe8e0007e1d2136d4c4368a404bec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzMDY0NA==", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r398330644", "bodyText": "removed as reactive unsupported anyway", "author": "codefromthecrypt", "createdAt": "2020-03-26T05:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2NTI3MQ=="}], "type": "inlineReview"}]}