{"pr_number": 580, "pr_title": "Proper config interpolation using timestamps", "pr_createdAt": "2020-10-29T03:53:47Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/580", "timeline": [{"oid": "7e48c6936f79cbc420f0cca7d10c98b43fab89af", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7e48c6936f79cbc420f0cca7d10c98b43fab89af", "message": "Proper config interpolation using timestamps", "committedDate": "2020-10-29T03:55:42Z", "type": "forcePushed"}, {"oid": "f54d9a5451d37a8fa015076df44e39f467676001", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f54d9a5451d37a8fa015076df44e39f467676001", "message": "Proper config interpolation using timestamps", "committedDate": "2020-10-29T03:59:36Z", "type": "forcePushed"}, {"oid": "8b1cb61a5380bf1739e371d539775f116c2cd3f3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8b1cb61a5380bf1739e371d539775f116c2cd3f3", "message": "Proper config interpolation using timestamps", "committedDate": "2020-10-29T04:05:17Z", "type": "forcePushed"}, {"oid": "80f3784c3c51434423f361ff5209836732692de7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/80f3784c3c51434423f361ff5209836732692de7", "message": "Proper config interpolation using timestamps", "committedDate": "2020-10-29T05:39:35Z", "type": "forcePushed"}, {"oid": "37a66bcd39e52803e020b6d48fb2b6e5d07e53b2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/37a66bcd39e52803e020b6d48fb2b6e5d07e53b2", "message": "Proper config interpolation using timestamps", "committedDate": "2020-10-29T16:21:00Z", "type": "forcePushed"}, {"oid": "e2bcba17e37d963a98a6be515dd94710486618a3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e2bcba17e37d963a98a6be515dd94710486618a3", "message": "Proper config interpolation using timestamps", "committedDate": "2020-10-29T16:46:15Z", "type": "forcePushed"}, {"oid": "47b15300c6da1756c43f5da8ca0ea75e8492335e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/47b15300c6da1756c43f5da8ca0ea75e8492335e", "message": "Add test case for resolving with different timestamps", "committedDate": "2020-10-29T18:23:33Z", "type": "forcePushed"}, {"oid": "fb6bb5ad89f142037cf63c1a69031d6a429b9bbf", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb6bb5ad89f142037cf63c1a69031d6a429b9bbf", "message": "Simplify RESET behavior", "committedDate": "2020-10-29T19:00:32Z", "type": "forcePushed"}, {"oid": "61b952e412874e0e3be1b78f8e4f398520bfab8e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/61b952e412874e0e3be1b78f8e4f398520bfab8e", "message": "Proper config interpolation using timestamps", "committedDate": "2020-10-29T20:01:49Z", "type": "commit"}, {"oid": "791bbe4f046b12f85277399b6a93232757ab09bb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/791bbe4f046b12f85277399b6a93232757ab09bb", "message": "Revert \"handle config update when default value is specified in the using Parameters: (#578)\"\n\nThis reverts commit 19958f5b58c11bbb668114aacccea8656d062ddd.", "committedDate": "2020-10-29T20:01:50Z", "type": "commit"}, {"oid": "041f82b0dccefb5be06207ea05e15ecbc9ab72f2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/041f82b0dccefb5be06207ea05e15ecbc9ab72f2", "message": "Add test case for resolving with different timestamps", "committedDate": "2020-10-29T20:01:50Z", "type": "commit"}, {"oid": "c4a24ba85932d0df49f07bbc9a4821436ec191a3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c4a24ba85932d0df49f07bbc9a4821436ec191a3", "message": "Simplify RESET behavior", "committedDate": "2020-10-29T20:01:50Z", "type": "commit"}, {"oid": "c4a24ba85932d0df49f07bbc9a4821436ec191a3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c4a24ba85932d0df49f07bbc9a4821436ec191a3", "message": "Simplify RESET behavior", "committedDate": "2020-10-29T20:01:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjM0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/580#discussion_r514572345", "bodyText": "Configuration is labelled as Deprecated.  What the reason of adding this if block?", "author": "fengwang666", "createdAt": "2020-10-29T21:15:34Z", "path": "src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java", "diffHunk": "@@ -251,6 +251,12 @@ public KernelConfigResolver(ComponentStore componentStore, Kernel kernel, Nucleu\n             DeploymentPackageConfiguration packageConfiguration = optionalDeploymentPackageConfig.get();\n             optionalConfigUpdate = Optional.ofNullable(packageConfiguration.getConfigurationUpdateOperation());\n \n+            if (!optionalConfigUpdate.isPresent() && packageConfiguration.getConfiguration() != null) {", "originalCommit": "c4a24ba85932d0df49f07bbc9a4821436ec191a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3Mjg5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/580#discussion_r514572898", "bodyText": "It makes it work with the old-style CLI which uses --params instead of --update-config. We haven't switched over yet. This is required for compatibility.", "author": "MikeDombo", "createdAt": "2020-10-29T21:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MTQ4OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/580#discussion_r514591489", "bodyText": "Is there any side effect of merge the configuration here? For example, can a subscriber to a config key be triggered here?", "author": "fengwang666", "createdAt": "2020-10-29T21:57:16Z", "path": "src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java", "diffHunk": "@@ -275,140 +281,101 @@ public KernelConfigResolver(ComponentStore componentStore, Kernel kernel, Nucleu\n      *\n      * @param configurationUpdateOperation nullable component configuration update operation.\n      * @param componentRecipe              component recipe containing default configuration.\n+     * @param document                     deployment document\n      * @return resolved configuration for this component. non null.\n      */\n     private Map<String, Object> resolveConfigurationToApply(\n-            @Nullable ConfigurationUpdateOperation configurationUpdateOperation, ComponentRecipe componentRecipe) {\n+            @Nullable ConfigurationUpdateOperation configurationUpdateOperation, ComponentRecipe componentRecipe,\n+            DeploymentDocument document) {\n \n         // try read the running service config\n-        Map<String, Object> currentRunningConfig = null;\n-\n-        Topics serviceTopics = kernel.findServiceTopic(componentRecipe.getComponentName());\n-        if (serviceTopics != null) {\n-            Topics configuration = serviceTopics.findTopics(CONFIGURATION_CONFIG_KEY);\n-            if (configuration != null) {\n-                currentRunningConfig = configuration.toPOJO();\n+        try (Context context = new Context()) {\n+            Configuration currentRunningConfig = new Configuration(context);\n+\n+            // Copy from running config (if any)\n+            Topics serviceTopics = kernel.findServiceTopic(componentRecipe.getComponentName());\n+            if (serviceTopics != null) {\n+                Topics configuration = serviceTopics.findTopics(CONFIGURATION_CONFIG_KEY);\n+                if (configuration != null) {\n+                    currentRunningConfig.copyFrom(configuration);\n+                }\n             }\n-        }\n-\n-        // get default config\n-        JsonNode defaultConfig = Optional.ofNullable(componentRecipe.getComponentConfiguration())\n-                .map(ComponentConfiguration::getDefaultConfiguration)\n-                .orElse(MAPPER.createObjectNode()); // init null to be empty default config\n \n-        // no update\n-        if (configurationUpdateOperation == null) {\n-            if (currentRunningConfig == null) {\n-                // no update nor running config, so it should return return the default config.\n-                return MAPPER.convertValue(defaultConfig, Map.class);\n-            } else {\n-                // no update but there is running config, so it should return running config as is.\n-                return currentRunningConfig;\n+            // Remove keys which want to be reset to their default value\n+            if (configurationUpdateOperation != null) {\n+                removeKeysFromConfigWhichAreReset(currentRunningConfig, configurationUpdateOperation.getPathsToReset());\n             }\n-        }\n-\n-        // perform RESET and then MERGE in order\n-        Map<String, Object> resolvedConfig;\n-\n-        resolvedConfig = reset(currentRunningConfig, defaultConfig, configurationUpdateOperation.getPathsToReset());\n \n-        resolvedConfig = deepMerge(resolvedConfig, configurationUpdateOperation.getValueToMerge());\n+            // Merge in the defaults with timestamp 1 so that they don't overwrite any pre-existing values\n+            JsonNode defaultConfig = Optional.ofNullable(componentRecipe.getComponentConfiguration())\n+                    .map(ComponentConfiguration::getDefaultConfiguration)\n+                    .orElse(MAPPER.createObjectNode()); // init null to be empty default config\n+            // Merge in the defaults from the recipe using timestamp 1 to denote a default\n+            currentRunningConfig.mergeMap(1, MAPPER.convertValue(defaultConfig, Map.class));\n+            currentRunningConfig.context.runOnPublishQueueAndWait(() -> {});\n+\n+            // Merge in the requested config updates\n+            if (configurationUpdateOperation != null && configurationUpdateOperation.getValueToMerge() != null) {\n+                currentRunningConfig.mergeMap(document.getTimestamp(), configurationUpdateOperation.getValueToMerge());\n+            }", "originalCommit": "c4a24ba85932d0df49f07bbc9a4821436ec191a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MTg3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/580#discussion_r514591874", "bodyText": "No, no subscribers because this is an entirely new config object", "author": "MikeDombo", "createdAt": "2020-10-29T21:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MTQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MjQ0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/580#discussion_r514592443", "bodyText": "And I create a new temporary Context so that the events which are triggered aren't on the main publish thread.", "author": "MikeDombo", "createdAt": "2020-10-29T21:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MTQ4OQ=="}], "type": "inlineReview"}]}