{"pr_number": 397, "pr_title": "Major update for adapting to the new Recipe format and cloud changes", "pr_createdAt": "2020-08-27T17:13:18Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397", "timeline": [{"oid": "ba7fa04e9b368ba636cf8909c7dfd51158f9ae05", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ba7fa04e9b368ba636cf8909c7dfd51158f9ae05", "message": "Add logic for resolving current platform and findBestMatch platform\n\nfindBestMatch functions will be moved to the common model between local and cloud.", "committedDate": "2020-08-26T04:59:06Z", "type": "commit"}, {"oid": "607eb21570db4f0c7d1537cd2e7ce32b29b58048", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/607eb21570db4f0c7d1537cd2e7ce32b29b58048", "message": "merged shirley's change so that we can do real testing", "committedDate": "2020-08-26T17:22:06Z", "type": "commit"}, {"oid": "8f9885d87136783a26daea5d93d901b1ff524a0f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8f9885d87136783a26daea5d93d901b1ff524a0f", "message": "integ tests working", "committedDate": "2020-08-27T16:06:52Z", "type": "commit"}, {"oid": "d8576f275e0e484ed0ba7c6baf8efc37febc74a0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d8576f275e0e484ed0ba7c6baf8efc37febc74a0", "message": "Testing in beta", "committedDate": "2020-08-28T05:39:22Z", "type": "commit"}, {"oid": "907ef9c3c12815d5a6e49ff81e72f00e8a46369f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/907ef9c3c12815d5a6e49ff81e72f00e8a46369f", "message": "Update SDK", "committedDate": "2020-08-28T06:22:45Z", "type": "commit"}, {"oid": "756a2d7abbfd9edd96baab17755ef0971ddf1303", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/756a2d7abbfd9edd96baab17755ef0971ddf1303", "message": "merge complete", "committedDate": "2020-08-28T06:33:33Z", "type": "commit"}, {"oid": "3d92f796d26cf719bc4ccbe0322e57a3f8fb8a9f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3d92f796d26cf719bc4ccbe0322e57a3f8fb8a9f", "message": "save", "committedDate": "2020-08-28T06:42:59Z", "type": "commit"}, {"oid": "8282a31ef9631f03c3fcb121a125b2b6bb4f464b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8282a31ef9631f03c3fcb121a125b2b6bb4f464b", "message": "merge complete", "committedDate": "2020-08-28T06:46:56Z", "type": "commit"}, {"oid": "6cde27d9baaffae0a15ed041e3e6de0ecb087d93", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6cde27d9baaffae0a15ed041e3e6de0ecb087d93", "message": "E2E not working. Cloud's FindComponentVersionsByPlatform returns empty Result", "committedDate": "2020-08-28T08:21:28Z", "type": "commit"}, {"oid": "5661d27d5cd2c575b62c739e99664168549f9367", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5661d27d5cd2c575b62c739e99664168549f9367", "message": "E2E passing on local", "committedDate": "2020-08-28T09:15:51Z", "type": "commit"}, {"oid": "0feb0937748af1805fafd5bcdc47aedbb8d80827", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0feb0937748af1805fafd5bcdc47aedbb8d80827", "message": "Add README", "committedDate": "2020-08-28T09:24:51Z", "type": "commit"}, {"oid": "78005f1c9ee0351c6d1bab5938b09cc5957abe43", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/78005f1c9ee0351c6d1bab5938b09cc5957abe43", "message": "Fix E2E", "committedDate": "2020-08-28T09:26:36Z", "type": "commit"}, {"oid": "3c26d5e9635b9f51535a4221645348c11684c00d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3c26d5e9635b9f51535a4221645348c11684c00d", "message": "type", "committedDate": "2020-08-28T09:36:05Z", "type": "commit"}, {"oid": "ce79e8ea7ec275f958b176f565a8744bac670316", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ce79e8ea7ec275f958b176f565a8744bac670316", "message": "Fix flaky E2E", "committedDate": "2020-08-28T16:45:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNDc3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479424771", "bodyText": "What's this for?", "author": "MikeDombo", "createdAt": "2020-08-28T16:55:06Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/ComponentParameter.java", "diffHunk": "@@ -20,6 +21,10 @@\n \n     ParameterType type;\n \n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public static class ComponentParameterBuilder {", "originalCommit": "ce79e8ea7ec275f958b176f565a8744bac670316", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNTYzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479435634", "bodyText": "Builder class for deserializing recipe, the model is defined in common package, and I believe Ethan is using that model definition already. These model definitions are waiting for cleaning up.", "author": "wikimonkey", "createdAt": "2020-08-28T17:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNDc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNTM0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479425343", "bodyText": "won't this be looking for artifactUri in JSON? Isn't it just uri?", "author": "MikeDombo", "createdAt": "2020-08-28T16:56:09Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -3,34 +3,23 @@\n \n package com.aws.iot.evergreen.packagemanager.models;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n-import lombok.Getter;\n-import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.Value;\n \n import java.net.URI;\n \n-@Getter\n-@AllArgsConstructor\n-@NoArgsConstructor\n+@Value\n @Builder\n+@AllArgsConstructor\n public class ComponentArtifact {\n \n-    @JsonProperty(\"Uri\")\n-    private URI artifactUri;\n-\n-    @JsonProperty(\"Checksum\")\n-    private String checksum;\n+    @NonNull URI artifactUri;", "originalCommit": "ce79e8ea7ec275f958b176f565a8744bac670316", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNjMyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479436327", "bodyText": "This is kernel its own component model, it's not directly mapping to recipe file, so field name shouldn't matter.", "author": "wikimonkey", "createdAt": "2020-08-28T17:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNTM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNTkzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479425939", "bodyText": "Set it to HARD by default", "author": "MikeDombo", "createdAt": "2020-08-28T16:57:14Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/RecipeDependencyProperties.java", "diffHunk": "@@ -5,28 +5,24 @@\n \n package com.aws.iot.evergreen.packagemanager.models;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import lombok.AllArgsConstructor;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n+import lombok.Value;\n \n-@Getter\n+@Value\n @AllArgsConstructor\n-@EqualsAndHashCode\n-@JsonSerialize\n public class RecipeDependencyProperties {\n-    @JsonProperty(\"VersionRequirements\")\n-    String versionRequirements;\n-    @JsonProperty(\"DependencyType\")\n-    String dependencyType;\n+    String versionRequirements; // TODO Make it strongly typed with Semver.Requirement\n+    String dependencyType;  //TODO Make it enum\n \n     /**\n      * RecipeDependencyProperties constructor.\n      *\n      * @param versionRequirements dependency version constraints\n      */\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    // dependencyType could be null now. TODO not allow null after changing to enum\n     public RecipeDependencyProperties(String versionRequirements) {\n         this.versionRequirements = versionRequirements;\n+        this.dependencyType = null;", "originalCommit": "ce79e8ea7ec275f958b176f565a8744bac670316", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0NDM1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479444351", "bodyText": "temporarily hard coded", "author": "wikimonkey", "createdAt": "2020-08-28T17:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNTkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNjQ2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479426465", "bodyText": "no *", "author": "MikeDombo", "createdAt": "2020-08-28T16:58:17Z", "path": "src/test/java/com/aws/iot/evergreen/config/PlatformResolverTest.java", "diffHunk": "@@ -14,11 +14,9 @@\n import java.io.InputStream;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.*;", "originalCommit": "ce79e8ea7ec275f958b176f565a8744bac670316", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0NDM5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479444396", "bodyText": "fixed", "author": "wikimonkey", "createdAt": "2020-08-28T17:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNjQ2NQ=="}], "type": "inlineReview"}, {"oid": "dc55a6cf23841b1971caa1b410f238dcfe45eb93", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dc55a6cf23841b1971caa1b410f238dcfe45eb93", "message": "set default to dependency type", "committedDate": "2020-08-28T17:32:48Z", "type": "commit"}, {"oid": "aec9b35137f6de58d43be280c3d7b89ac34bf77b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/aec9b35137f6de58d43be280c3d7b89ac34bf77b", "message": "fix checkstyle", "committedDate": "2020-08-28T17:38:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2MzQ0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479463442", "bodyText": "why remove GAMMA ?", "author": "fahadmohammed01", "createdAt": "2020-08-28T18:15:34Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -99,7 +98,7 @@\n  */\n @ExtendWith(EGExtension.class)\n public class BaseE2ETestCase implements AutoCloseable {\n-    protected static final String FCS_GAMMA_ENDPOINT = \"https://bp5p2uvbx6.execute-api.us-east-1.amazonaws.com/Gamma\";\n+    private static final String FCS_ENDPOINT = \"https://bp5p2uvbx6.execute-api.us-east-1.amazonaws.com/Gamma\";", "originalCommit": "aec9b35137f6de58d43be280c3d7b89ac34bf77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2NDMwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479464305", "bodyText": "because this change is tested against cloud beta. Once it's pushed in, and cloud pushed changes to Gamma, we will switch back.", "author": "wikimonkey", "createdAt": "2020-08-28T18:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2MzQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MTg3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479471875", "bodyText": "the url still has gamma in it, so is it not talking to gamma?", "author": "fahadmohammed01", "createdAt": "2020-08-28T18:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2MzQ0Mg=="}], "type": "inlineReview"}, {"oid": "a4b1f91f100aa9ee962a75bbf87aa4b71c35c85f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a4b1f91f100aa9ee962a75bbf87aa4b71c35c85f", "message": "fix unit tests", "committedDate": "2020-08-28T18:15:51Z", "type": "commit"}, {"oid": "8ab1aa5a4345dddd223dd7cbe9febbe8d82ed2d6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8ab1aa5a4345dddd223dd7cbe9febbe8d82ed2d6", "message": "fix unit tests", "committedDate": "2020-08-28T18:47:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2MzIzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479463232", "bodyText": "Nice!", "author": "ShirleyZheng92", "createdAt": "2020-08-28T18:15:05Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/SerializerFactory.java", "diffHunk": "@@ -16,7 +16,8 @@\n public final class SerializerFactory {\n     private static final ObjectMapper RECIPE_SERIALIZER =\n             new ObjectMapper(new YAMLFactory()).enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)\n-                    .setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+                                               .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS)", "originalCommit": "aec9b35137f6de58d43be280c3d7b89ac34bf77b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2NTg0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479465848", "bodyText": "Will this become an Enum? If so can you add a todo?", "author": "ShirleyZheng92", "createdAt": "2020-08-28T18:20:47Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "diffHunk": "@@ -3,202 +3,43 @@\n \n package com.aws.iot.evergreen.packagemanager.models;\n \n-import com.aws.iot.evergreen.config.PlatformResolver;\n-import com.aws.iot.evergreen.util.SerializerFactory;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.type.TypeReference;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.vdurmont.semver4j.Semver;\n-import com.vdurmont.semver4j.SemverException;\n-import lombok.AccessLevel;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.NoArgsConstructor;\n+import lombok.Value;\n \n-import java.io.IOException;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n-@Getter\n-@NoArgsConstructor(force = true, access = AccessLevel.PRIVATE)\n-@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+@Value\n @Builder\n @AllArgsConstructor\n public class PackageRecipe {\n-    private static final String DEPENDENCY_VERSION_REQUIREMENTS_KEY = \"versionrequirements\";\n-    private static final String DEPENDENCY_TYPE_KEY = \"dependencytype\";\n \n-    // TODO: Will be used for schema versioning in the future\n-    private final RecipeTemplateVersion recipeTemplateVersion;\n+    RecipeTemplateVersion recipeTemplateVersion;\n \n-    @EqualsAndHashCode.Include\n-    private final String componentName;\n+    String componentName;\n \n-    private final String componentType;\n+    Semver version;\n \n-    @EqualsAndHashCode.Include\n-    private Semver version;\n+    String description;\n \n-    private final String description;\n+    String publisher;\n \n-    private final String publisher;\n+    // The following fields are the platform specific and has already been resolved when loading from the recipe file\n+    @Builder.Default\n+    Set<PackageParameter> packageParameters = Collections.emptySet();\n \n-    private final Set<PackageParameter> packageParameters;\n+    @Builder.Default\n+    Map<String, Object> lifecycle = Collections.emptyMap();\n \n-    private final List<String> platforms;\n+    @Builder.Default\n+    List<ComponentArtifact> artifacts = Collections.emptyList();\n \n-    private final Map<String, Object> lifecycle;\n+    @Builder.Default\n+    Map<String, RecipeDependencyProperties> dependencies = Collections.emptyMap();\n \n-    private final List<ComponentArtifact> artifacts;\n-\n-    private final Map<String, RecipeDependencyProperties> dependencies;\n-\n-    /**\n-     * Constructor for Jackson to deserialize.\n-     *\n-     * @param recipeTemplateVersion Template version found in the Recipe file\n-     * @param componentName         Name of the component\n-     * @param version               Version of the package\n-     * @param description           Description metadata\n-     * @param publisher             Name of the publisher\n-     * @param packageParameters     Parameters included in the recipe\n-     * @param platforms             Platforms supported by the recipe\n-     * @param lifecycle             Lifecycle definitions\n-     * @param artifacts             Artifact definitions\n-     * @param dependencies          List of dependencies\n-     * @param componentType         Type of component to be created\n-     * @throws SemverException if the semver fails to be created\n-     */\n-    @Deprecated\n-    @JsonCreator\n-    @SuppressWarnings(\"PMD.ExcessiveParameterList\")\n-    public PackageRecipe(@JsonProperty(\"RecipeTemplateVersion\") RecipeTemplateVersion recipeTemplateVersion,\n-                         @JsonProperty(\"ComponentName\") String componentName, @JsonProperty(\"Version\") Semver version,\n-                         @JsonProperty(\"Description\") String description, @JsonProperty(\"Publisher\") String publisher,\n-                         @JsonProperty(\"Parameters\") Set<PackageParameter> packageParameters,\n-                         @JsonProperty(\"Platforms\") List<String> platforms, @JsonProperty(\"Lifecycle\") @JsonDeserialize(\n-            using = MapFieldDeserializer.class) Map<String, Object> lifecycle,\n-                         @JsonProperty(\"Artifacts\") @JsonDeserialize(\n-                                 using = ArtifactDeserializer.class) List<ComponentArtifact> artifacts,\n-                         @JsonProperty(\"Dependencies\") @JsonDeserialize(\n-                                 using = DependencyMapDeserializer.class)\n-                                     Map<String, RecipeDependencyProperties> dependencies,\n-                         @JsonProperty(\"ComponentType\") String componentType) {\n-\n-        this.recipeTemplateVersion = recipeTemplateVersion;\n-        this.componentName = componentName;\n-        //TODO: Figure out how to do this in deserialize (only option so far seems to be custom deserializer)\n-        //TODO: Validate SemverType.STRICT before creating this\n-        this.version = new Semver(version.toString(), Semver.SemverType.NPM);\n-        this.description = description;\n-        this.publisher = publisher;\n-        this.platforms = platforms;\n-        this.packageParameters = packageParameters == null ? Collections.emptySet() : packageParameters;\n-        this.lifecycle = lifecycle == null ? Collections.emptyMap() : lifecycle;\n-        this.artifacts = artifacts == null ? Collections.emptyList() : artifacts;\n-        this.dependencies = dependencies == null ? Collections.emptyMap() : dependencies;\n-        this.componentType = componentType;\n-    }\n-\n-    @JsonSerialize(using = SemverSerializer.class)\n-    public Semver getVersion() {\n-        return version;\n-    }\n-\n-    @Deprecated\n-    private static class ArtifactDeserializer extends JsonDeserializer<List<ComponentArtifact>> {\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        public List<ComponentArtifact> deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n-                throws IOException {\n-\n-\n-            Map<String, List<ComponentArtifact>> artifacts = SerializerFactory\n-                                                .getRecipeSerializer()\n-                                                .convertValue(\n-                                                        jsonParser.readValueAsTree(),\n-                                                        new TypeReference<Map<String, List<ComponentArtifact>>>() {});\n-\n-            Map<Object, Object> map = new HashMap<>(artifacts);\n-\n-            return (List<ComponentArtifact>) PlatformResolver.resolvePlatform(map);\n-        }\n-    }\n-\n-    @Deprecated\n-    private static class MapFieldDeserializer extends JsonDeserializer<Map<String, Object>> {\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        public Map<String, Object> deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n-                throws IOException {\n-            Map<Object, Object> map =\n-                    SerializerFactory.getRecipeSerializer().convertValue(jsonParser.readValueAsTree(), Map.class);\n-\n-            return (Map<String, Object>) PlatformResolver.resolvePlatform(map);\n-        }\n-    }\n-\n-    @Deprecated\n-    private static class DependencyMapDeserializer extends JsonDeserializer<Map<String, RecipeDependencyProperties>> {\n-        @Override\n-        public Map<String, RecipeDependencyProperties> deserialize(JsonParser p, DeserializationContext ctxt)\n-                throws IOException {\n-            Object resolved = PlatformResolver.resolvePlatform(\n-                    SerializerFactory.getRecipeSerializer().convertValue(p.readValueAsTree(), Map.class));\n-            if (resolved == null) {\n-                return Collections.emptyMap();\n-            }\n-            if (!(resolved instanceof Map)) {\n-                throw new IOException(String.format(\"Illegal dependency syntax in package recipe. Dependencies \"\n-                        + \"after platform resolution should be a map, but actually: %s\", resolved));\n-            }\n-\n-            Map<String, RecipeDependencyProperties> dependencyPropertiesMap = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : ((Map<String, Object>) resolved).entrySet()) {\n-                String name = entry.getKey();\n-                Object value = entry.getValue();\n-                if (!(value instanceof Map)) {\n-                    throw new IOException(String.format(\"Illegal dependency syntax in package recipe. Dependency %s \"\n-                            + \"should have a property map, but actually: %s\", name, entry.getValue()));\n-                }\n-                Map<String, String> propMap = (Map<String, String>) value;\n-                String versionRequirements = \"*\";\n-                String dependencyType = \"\";\n-                for (Map.Entry<String, String> e : propMap.entrySet()) {\n-                    if (e.getValue() == null) {\n-                        continue;\n-                    }\n-                    String k = e.getKey();\n-                    switch (k.toLowerCase()) {\n-                        case DEPENDENCY_VERSION_REQUIREMENTS_KEY:\n-                            versionRequirements = e.getValue();\n-                            break;\n-                        case DEPENDENCY_TYPE_KEY:\n-                            dependencyType = e.getValue();\n-                            break;\n-                        default:\n-                            throw new IOException(String.format(\"Illegal dependency syntax in package recipe. \"\n-                                    + \"Dependency %s has unknown keyword: %s\", name, k));\n-                    }\n-                }\n-\n-                if (dependencyType.isEmpty()) {\n-                    dependencyPropertiesMap.put(name, new RecipeDependencyProperties(versionRequirements));\n-                    continue;\n-                }\n-                dependencyPropertiesMap.put(name, new RecipeDependencyProperties(versionRequirements, dependencyType));\n-            }\n-            return dependencyPropertiesMap;\n-        }\n-    }\n+    String componentType;", "originalCommit": "aec9b35137f6de58d43be280c3d7b89ac34bf77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4MDIwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479480201", "bodyText": "It should, even using SPI.", "author": "wikimonkey", "createdAt": "2020-08-28T18:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2NTg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTAxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479479010", "bodyText": "Will this break unit test?", "author": "ShirleyZheng92", "createdAt": "2020-08-28T18:50:16Z", "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -176,7 +176,7 @@ private static Architecture getArchInfo() {\n      * @param recipeList a list of recipe input\n      * @return closest recipe\n      */\n-    public Optional<PlatformSpecificManifest> findBestMatch(List<PlatformSpecificManifest> recipeList) {\n+    public static Optional<PlatformSpecificManifest> findBestMatch(List<PlatformSpecificManifest> recipeList) {", "originalCommit": "8ab1aa5a4345dddd223dd7cbe9febbe8d82ed2d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4MDM0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/397#discussion_r479480345", "bodyText": "no, unit tests are all passed now.", "author": "wikimonkey", "createdAt": "2020-08-28T18:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTAxMA=="}], "type": "inlineReview"}]}