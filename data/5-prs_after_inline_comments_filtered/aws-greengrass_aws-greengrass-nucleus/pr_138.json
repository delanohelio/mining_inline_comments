{"pr_number": 138, "pr_title": "E2E test for removing services through deployment", "pr_createdAt": "2020-03-26T16:33:59Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398810948", "bodyText": "Is SomeService package definition available locally?", "author": "fahadmohammed01", "createdAt": "2020-03-26T18:47:17Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +105,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(", "originalCommit": "47f715e81192a8589e1cb0705bcce921b2cb3467", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMjk2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398822965", "bodyText": "Added that to the diff", "author": "shaguptashaikh", "createdAt": "2020-03-26T19:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjUxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398812511", "bodyText": "why is kernel.launch in injectKernelPackageManagementDependencies()?", "author": "fahadmohammed01", "createdAt": "2020-03-26T18:49:41Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +105,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);\n+        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertThrows(ServiceLoadException.class, () -> {\n+            EvergreenService.locate(kernel.context, \"SomeService\").getState();\n+        });\n+        kernel.shutdownNow();\n+\n+        // Make sure that IoT Job was marked as successful\n+        assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                DescribeJobExecutionRequest.builder().jobId(jobId2).thingName(thing.thingName).build()).execution()\n+                .status());\n+        assertEquals(JobStatus.COMPLETED,\n+                Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId2).build()).job().status());\n+    }\n+\n+    private Utils.ThingInfo setupIotResourcesAndInjectIntoKernel() throws IOException {\n+        Utils.downloadRootCAToFile(new File(rootCaFilePath));\n+        Utils.ThingInfo thing = Utils.createThing();\n+        try (CommitableFile cf = CommitableFile.of(new File(privateKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certificateFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, \"DeploymentService\");\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).setValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_MQTT_CLIENT_ENDPOINT).setValue(thing.endpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).setValue(privateKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).setValue(certificateFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).setValue(rootCaFilePath);\n+        return thing;\n+    }\n+\n+    private void injectKernelPackageManagementDependencies() {\n+        kernel.context.getv(DependencyResolver.class)\n+                .put(new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel));\n+        kernel.launch();", "originalCommit": "47f715e81192a8589e1cb0705bcce921b2cb3467", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMjc4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398822787", "bodyText": "Moved to the individual tests", "author": "shaguptashaikh", "createdAt": "2020-03-26T19:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjUxMQ=="}], "type": "inlineReview"}, {"oid": "662016af2089221c9bcb4f1543bead71f254edc2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/662016af2089221c9bcb4f1543bead71f254edc2", "message": "E2E test for removing services through deployment", "committedDate": "2020-03-26T19:04:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyOTQ0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398829449", "bodyText": "Can we move this under @afterall", "author": "fahadmohammed01", "createdAt": "2020-03-26T19:16:47Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +106,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+        kernel.launch();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);\n+        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertThrows(ServiceLoadException.class, () -> {\n+            EvergreenService.locate(kernel.context, \"SomeService\").getState();\n+        });\n+        kernel.shutdownNow();", "originalCommit": "662016af2089221c9bcb4f1543bead71f254edc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMzExMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399413110", "bodyText": "Moved all cleanup related code", "author": "shaguptashaikh", "createdAt": "2020-03-27T17:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyOTQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMDI3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398830277", "bodyText": "move this to a @BeforeAll ?", "author": "fahadmohammed01", "createdAt": "2020-03-26T19:18:06Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +106,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+        kernel.launch();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);\n+        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertThrows(ServiceLoadException.class, () -> {\n+            EvergreenService.locate(kernel.context, \"SomeService\").getState();\n+        });\n+        kernel.shutdownNow();\n+\n+        // Make sure that IoT Job was marked as successful\n+        assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                DescribeJobExecutionRequest.builder().jobId(jobId2).thingName(thing.thingName).build()).execution()\n+                .status());\n+        assertEquals(JobStatus.COMPLETED,\n+                Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId2).build()).job().status());\n+    }\n+\n+    private Utils.ThingInfo setupIotResourcesAndInjectIntoKernel() throws IOException {\n+        Utils.downloadRootCAToFile(new File(rootCaFilePath));\n+        Utils.ThingInfo thing = Utils.createThing();\n+        try (CommitableFile cf = CommitableFile.of(new File(privateKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certificateFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());", "originalCommit": "662016af2089221c9bcb4f1543bead71f254edc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMjk3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399412978", "bodyText": "Moved all setup related code", "author": "shaguptashaikh", "createdAt": "2020-03-27T17:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMDI3Nw=="}], "type": "inlineReview"}, {"oid": "294d1dfe190e0510355071ed865ca0657c6d8a5d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/294d1dfe190e0510355071ed865ca0657c6d8a5d", "message": "E2E test for removing services through deployment", "committedDate": "2020-03-27T17:02:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDYxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399434617", "bodyText": "this assert is backwards, it should be (expected, actual)", "author": "MikeDombo", "createdAt": "2020-03-27T17:40:26Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +109,68 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);", "originalCommit": "294d1dfe190e0510355071ed865ca0657c6d8a5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0MDM0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399440345", "bodyText": "Addressed", "author": "shaguptashaikh", "createdAt": "2020-03-27T17:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDYxNw=="}], "type": "inlineReview"}, {"oid": "b3ee0b5f876aa7cf5a9b2843a6a6f39a4c9491ed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b3ee0b5f876aa7cf5a9b2843a6a6f39a4c9491ed", "message": "E2E test for removing services through deployment", "committedDate": "2020-03-27T17:46:48Z", "type": "commit"}, {"oid": "b3ee0b5f876aa7cf5a9b2843a6a6f39a4c9491ed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b3ee0b5f876aa7cf5a9b2843a6a6f39a4c9491ed", "message": "E2E test for removing services through deployment", "committedDate": "2020-03-27T17:46:48Z", "type": "forcePushed"}, {"oid": "2f41153f7bc088510dc7fd2cf9091db0e962bec3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2f41153f7bc088510dc7fd2cf9091db0e962bec3", "message": "Merge branch 'master' into remove-service-e2e", "committedDate": "2020-03-27T17:55:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MjAxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399462016", "bodyText": "Even better!", "author": "leaf94", "createdAt": "2020-03-27T18:28:13Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -53,16 +56,25 @@\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n \n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+\n     @BeforeAll\n-    static void beforeAll() {\n+    static void beforeAll() throws IOException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n         rootCaFilePath = tempRootDir.resolve(\"rootCA.pem\").toString();\n         privateKeyFilePath = tempRootDir.resolve(\"privKey.key\").toString();\n         certificateFilePath = tempRootDir.resolve(\"thingCert.crt\").toString();\n+\n+        kernel = new Kernel().parseArgs(\"-i\", DeploymentE2ETest.class.getResource(\"blank_config.yaml\").toString());\n+        setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();", "originalCommit": "2f41153f7bc088510dc7fd2cf9091db0e962bec3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}