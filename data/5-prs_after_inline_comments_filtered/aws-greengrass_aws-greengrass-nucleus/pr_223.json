{"pr_number": 223, "pr_title": "Dynamic config changes in deployments", "pr_createdAt": "2020-05-05T03:57:36Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223", "timeline": [{"oid": "a077a93668fe2b72e198cc86362fc028b36470b6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a077a93668fe2b72e198cc86362fc028b36470b6", "message": "Dynamic config changes in deployments", "committedDate": "2020-05-05T03:58:25Z", "type": "forcePushed"}, {"oid": "5f6aeb6b949f0493079831b123de3ba6b8b694e1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5f6aeb6b949f0493079831b123de3ba6b8b694e1", "message": "Dynamic config changes in deployments", "committedDate": "2020-05-05T04:01:21Z", "type": "forcePushed"}, {"oid": "040d6edd5f5a3cd40fd777e14b419236b5b3845b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/040d6edd5f5a3cd40fd777e14b419236b5b3845b", "message": "Dynamic config changes in deployments", "committedDate": "2020-05-05T16:54:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3MjQ1Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420272452", "bodyText": "childOf(\"Dependencies\") is already handled in EvergreenService.initDependenciesTopic() .\nGenericExternalService should only handle lifecycle scripts change.\nc.subscribe((what, child) -> {\n  if (child.childOf(VERSION_CONFIG_KEY)) {\n    requestReinstall();\n  }\n  if (!child.childOf(\"lifecycle\")) {\n    return;\n  }\n  if (child.childOf(\"shutdown\")) {\n    return;\n  }\n  if (child.childOf(\"install\")) {\n    requestReinstall();\n    return; \n  }\n  requestRestart();\n}", "author": "ShirleyZheng92", "createdAt": "2020-05-05T17:12:23Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -75,8 +75,11 @@ public GenericExternalService(Topics c) {\n                 requestReinstall();\n                 return;\n             }\n-            // By default for any change, just restart the service\n-            requestRestart();\n+\n+            // Restart service for changes to the lifecycle config or if dependencies changed\n+            if (child.childOf(\"lifecycle\") || child.childOf(\"dependencies\")) {", "originalCommit": "040d6edd5f5a3cd40fd777e14b419236b5b3845b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3NzU3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420277578", "bodyText": "Thanks, changing it shortly", "author": "shaguptashaikh", "createdAt": "2020-05-05T17:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3MjQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3NDI4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420274288", "bodyText": "why we need a for loop here? can we simplify it to\nresolvedServiceConfig.put(CUSTOM_CONFIG_NAMESPACE, interpolate(packageRecipe.getCustomConfig(), resolvedParams);", "author": "ShirleyZheng92", "createdAt": "2020-05-05T17:15:07Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -92,6 +92,12 @@\n         for (Map.Entry<String, Object> configKVPair : packageRecipe.getLifecycle().entrySet()) {\n             resolvedLifecycleConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n         }\n+        resolvedServiceConfig.put(EvergreenService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC, resolvedLifecycleConfig);\n+\n+        for (Map.Entry<String, Object> configKVPair : packageRecipe.getCustomConfig().entrySet()) {\n+            resolvedCustomConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }", "originalCommit": "040d6edd5f5a3cd40fd777e14b419236b5b3845b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4MzA0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420283044", "bodyText": "It's because there can be any number of keys under the custom key, and we are not restricting the structure of the custom config so it can have any number and nesting levels of child keys", "author": "shaguptashaikh", "createdAt": "2020-05-05T17:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3NDI4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3NTM3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420275375", "bodyText": "mismatch in @JsonProperty and field name customConfig ?", "author": "ShirleyZheng92", "createdAt": "2020-05-05T17:16:54Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "diffHunk": "@@ -88,7 +80,8 @@ public PackageRecipe(@JsonProperty(\"RecipeTemplateVersion\") RecipeTemplateVersio\n                          @JsonProperty(\"Artifacts\") List<String> artifacts,\n                          @JsonProperty(\"Dependencies\") @JsonDeserialize(\n                                  using = MapFieldDeserializer.class) Map<String, String> dependencies,\n-                         @JsonProperty(\"Requires\") List<String> requires) {\n+                         @JsonProperty(\"Lifecycle\") @JsonDeserialize(\n+                                 using = MapFieldDeserializer.class) Map<String, Object> customConfig) {", "originalCommit": "040d6edd5f5a3cd40fd777e14b419236b5b3845b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4MzIzOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420283238", "bodyText": "That's why the tests fail, changing this", "author": "shaguptashaikh", "createdAt": "2020-05-05T17:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3NTM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3ODA4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420278083", "bodyText": "don't change this. This test is purposefully changing setenv. Change your implementation to work with this test.", "author": "MikeDombo", "createdAt": "2020-05-05T17:21:13Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -123,18 +124,17 @@ void GIVEN_kernel_running_single_service_WHEN_merge_changes_service_THEN_service\n         deploymentConfigMerger.mergeInNewConfig(testDeploymentDocument(), new HashMap<Object, Object>() {{\n             put(SERVICES_NAMESPACE_TOPIC, new HashMap<Object, Object>() {{\n                 put(\"main\", new HashMap<Object, Object>() {{\n-                    put(\"setenv\", new HashMap<Object, Object>() {{\n-                        put(\"HELLO\", \"redefined\");\n+                    put(\"lifecycle\", new HashMap<Object, Object>() {{", "originalCommit": "040d6edd5f5a3cd40fd777e14b419236b5b3845b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4MTEwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420281109", "bodyText": "Can you explain this better? I can keep the setenv change but it still won't restart the service because now we're switching to not restarting except for lifecycle, dependencies and version keys", "author": "shaguptashaikh", "createdAt": "2020-05-05T17:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3ODA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4MjM2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420282368", "bodyText": "Maybe add a version field and change that then. The point is that this customer changed the environment variables and not the lifecycle.", "author": "MikeDombo", "createdAt": "2020-05-05T17:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3ODA4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3ODM0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420278347", "bodyText": "when future complete, the deployment already finished. You don't need a countDownlatch for serviceWithCustomConfigRestarted, boolean should be enough", "author": "ShirleyZheng92", "createdAt": "2020-05-05T17:21:43Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -466,6 +466,47 @@ void GIVEN_a_running_service_is_not_disruptable_WHEN_deployed_THEN_deployment_wa\n         }\n     }\n \n+    @Test\n+    void GIVEN_a_running_service_has_custom_config_WHEN_deployed_THEN_service_does_not_restart() throws Throwable {\n+        // GIVEN\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_custom_config.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch mainRunning = new CountDownLatch(1);\n+        kernel.getMain().getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n+            if (t.getOnce().equals(State.RUNNING)) {\n+                mainRunning.countDown();\n+            }\n+        });\n+\n+        // wait for main to finish\n+        assertTrue(mainRunning.await(10, TimeUnit.SECONDS));\n+\n+        CountDownLatch serviceWithCustomConfigRestarted = new CountDownLatch(1);\n+\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"service_with_custom_config\") && newState.equals(State.INSTALLED)) {\n+                serviceWithCustomConfigRestarted.countDown();\n+            }\n+        });\n+\n+        Map<Object, Object> kernelConfig = new HashMap<>(kernel.getConfig().toPOJO());\n+        Map<String, Map> servicesConfig = (Map<String, Map>) kernelConfig.get(SERVICES_NAMESPACE_TOPIC);\n+        Map<String, Object> serviceWithCustomConfigDef = (Map<String, Object>) servicesConfig.get(\"service_with_custom_config\");\n+        Map<String, Object> customConfig = (Map<String, Object>) serviceWithCustomConfigDef.get(CUSTOM_CONFIG_NAMESPACE);\n+        customConfig.put(\"my_custom_key\", \"my_custom_changed_value\");\n+\n+        Future<DeploymentResult> future =\n+                deploymentConfigMerger.mergeInNewConfig(testDeploymentDocument(), kernelConfig);\n+\n+        future.get(20, TimeUnit.SECONDS);\n+\n+        // Service won't see any change in state\n+        assertFalse(serviceWithCustomConfigRestarted.await(60, TimeUnit.SECONDS));", "originalCommit": "040d6edd5f5a3cd40fd777e14b419236b5b3845b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3ODcyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420278722", "bodyText": "this test will take 60 seconds no matter what. Can we have a better way that doesn't take 1 minute?", "author": "MikeDombo", "createdAt": "2020-05-05T17:22:20Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -466,6 +466,47 @@ void GIVEN_a_running_service_is_not_disruptable_WHEN_deployed_THEN_deployment_wa\n         }\n     }\n \n+    @Test\n+    void GIVEN_a_running_service_has_custom_config_WHEN_deployed_THEN_service_does_not_restart() throws Throwable {\n+        // GIVEN\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_custom_config.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch mainRunning = new CountDownLatch(1);\n+        kernel.getMain().getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n+            if (t.getOnce().equals(State.RUNNING)) {\n+                mainRunning.countDown();\n+            }\n+        });\n+\n+        // wait for main to finish\n+        assertTrue(mainRunning.await(10, TimeUnit.SECONDS));\n+\n+        CountDownLatch serviceWithCustomConfigRestarted = new CountDownLatch(1);\n+\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"service_with_custom_config\") && newState.equals(State.INSTALLED)) {\n+                serviceWithCustomConfigRestarted.countDown();\n+            }\n+        });\n+\n+        Map<Object, Object> kernelConfig = new HashMap<>(kernel.getConfig().toPOJO());\n+        Map<String, Map> servicesConfig = (Map<String, Map>) kernelConfig.get(SERVICES_NAMESPACE_TOPIC);\n+        Map<String, Object> serviceWithCustomConfigDef = (Map<String, Object>) servicesConfig.get(\"service_with_custom_config\");\n+        Map<String, Object> customConfig = (Map<String, Object>) serviceWithCustomConfigDef.get(CUSTOM_CONFIG_NAMESPACE);\n+        customConfig.put(\"my_custom_key\", \"my_custom_changed_value\");\n+\n+        Future<DeploymentResult> future =\n+                deploymentConfigMerger.mergeInNewConfig(testDeploymentDocument(), kernelConfig);\n+\n+        future.get(20, TimeUnit.SECONDS);\n+\n+        // Service won't see any change in state\n+        assertFalse(serviceWithCustomConfigRestarted.await(60, TimeUnit.SECONDS));", "originalCommit": "040d6edd5f5a3cd40fd777e14b419236b5b3845b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNTY4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420315687", "bodyText": "I kept it long because I'm testing that the service did not restart, and so I wanted this test to wait enough before concluding that that state change didn't happen. Any suggestions?", "author": "shaguptashaikh", "createdAt": "2020-05-05T18:22:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3ODcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjcyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420316725", "bodyText": "Maybe when deployment is finished then we don't need additional waiting like in Shirley's comment", "author": "shaguptashaikh", "createdAt": "2020-05-05T18:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3ODcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMzM2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420333365", "bodyText": "Maybe make this more of a unit/integration test on GenericExternalService. You can then control the config, make changes, and use a mock/spy to ensure that requestRestart/reinstall is not called. That should be quicker and I think is at the right level of abstraction since this logic only applied to GenericExternalService and not all EvergreenServices.", "author": "MikeDombo", "createdAt": "2020-05-05T18:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3ODcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3ODI2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420478265", "bodyText": "Add similar tests for updating version and other stuff to make sure that it does do the restart/reinstall?\nNot blocking this PR.", "author": "MikeDombo", "createdAt": "2020-05-06T00:05:00Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -64,4 +70,35 @@ void GIVEN_service_with_timeout_WHEN_timeout_expires_THEN_move_service_to_errore\n         assertTrue(ServicesAErroredLatch.await(5, TimeUnit.SECONDS));\n         assertTrue(ServicesBErroredLatch.await(5, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_service_with_dynamically_loaded_config_WHEN_dynamic_config_changes_THEN_service_does_not_restart()", "originalCommit": "6c4a81d044272522b5a287eac634784cff563c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMTQwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r421201408", "bodyText": "Added", "author": "shaguptashaikh", "createdAt": "2020-05-07T02:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3ODI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3ODYwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420478608", "bodyText": "Please make sure all references in code to \"setenv\" are updated to this const. (I haven't looked through your changes yet, but please do ensure they're all changed.)", "author": "MikeDombo", "createdAt": "2020-05-06T00:06:22Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -40,6 +40,8 @@\n     public static final String SERVICES_NAMESPACE_TOPIC = \"services\";\n     public static final String SERVICE_LIFECYCLE_NAMESPACE_TOPIC = \"lifecycle\";\n     public static final String SERVICE_NAME_KEY = \"serviceName\";\n+    public static final String CUSTOM_CONFIG_NAMESPACE = \"custom\";\n+    public static final String SETENV_CONFIG_NAMESPACE = \"setenv\";", "originalCommit": "6c4a81d044272522b5a287eac634784cff563c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMTM1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r421201359", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-05-07T02:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3ODYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3OTAzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420479037", "bodyText": "Yes, they definitely should be.", "author": "MikeDombo", "createdAt": "2020-05-06T00:07:56Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -92,6 +93,15 @@\n         for (Map.Entry<String, Object> configKVPair : packageRecipe.getLifecycle().entrySet()) {\n             resolvedLifecycleConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n         }\n+        resolvedServiceConfig.put(EvergreenService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC, resolvedLifecycleConfig);\n+\n+        for (Map.Entry<String, Object> configKVPair : packageRecipe.getCustomConfig().entrySet()) {\n+            resolvedCustomConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+        resolvedServiceConfig.put(CUSTOM_CONFIG_NAMESPACE, resolvedCustomConfig);\n+\n+        // TODO : Should environment variables be configurable using package parameters?", "originalCommit": "6c4a81d044272522b5a287eac634784cff563c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMTMzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r421201333", "bodyText": "Changed", "author": "shaguptashaikh", "createdAt": "2020-05-07T02:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3OTAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjkwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r420486905", "bodyText": "instead of sleeping here, if you run a callback on the publish thread then you can be assured that your config change is done with all of its callbacks and perform the verify at that point. But be aware that any assertions you put into the publish thread won't work; you'll need another way of failing the test if they fail, such as a future or countdownlatch.", "author": "MikeDombo", "createdAt": "2020-05-06T00:36:39Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -64,4 +70,35 @@ void GIVEN_service_with_timeout_WHEN_timeout_expires_THEN_move_service_to_errore\n         assertTrue(ServicesAErroredLatch.await(5, TimeUnit.SECONDS));\n         assertTrue(ServicesBErroredLatch.await(5, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_service_with_dynamically_loaded_config_WHEN_dynamic_config_changes_THEN_service_does_not_restart()\n+            throws Exception {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_dynamic_config.yaml\").toString());\n+        CountDownLatch mainRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"main\") && newState.equals(State.RUNNING)) {\n+                mainRunning.countDown();\n+            }\n+        });\n+        kernel.launch();\n+\n+        assertTrue(mainRunning.await(5, TimeUnit.SECONDS));\n+\n+        GenericExternalService service = spy((GenericExternalService) kernel.locate(\"service_with_dynamic_config\"));\n+        assertEquals(State.RUNNING, service.getState());\n+\n+        Topics serviceConfig = service.getServiceConfig();\n+\n+        serviceConfig.find(\"custom\", \"my_custom_key\").withValue(\"my_custom_initial_value\");\n+\n+        // Wait for the published topic update to be processed\n+        Thread.sleep(100);", "originalCommit": "6c4a81d044272522b5a287eac634784cff563c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMTI3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r421201277", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-05-07T02:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjkwNQ=="}], "type": "inlineReview"}, {"oid": "fedcc13b83256221208eb354ef82db801facc572", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fedcc13b83256221208eb354ef82db801facc572", "message": "Dynamic config changes in deployments", "committedDate": "2020-05-07T02:21:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTIzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r421211236", "bodyText": "Not needed in this PR, but do we interpolate for everything? ie. Can I reference package parameters in my run: or install: or any other lifecycle? I think we ought to if we don't so that customers can pass in data through command line args instead of only environment variables.", "author": "MikeDombo", "createdAt": "2020-05-07T03:02:33Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -78,20 +80,27 @@\n         PackageRecipe packageRecipe = packageStore.getPackageRecipe(packageIdentifier);\n \n         Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n-        Map<Object, Object> resolvedLifecycleConfig = new HashMap<>();\n-\n-        resolvedServiceConfig.put(EvergreenService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC, resolvedLifecycleConfig);\n-\n-        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n-        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n-        // keys while per current package recipe format it's the entire config for that package\n-        // These inconsistencies need to be addressed\n \n         // Interpolate parameters\n+        Map<Object, Object> resolvedLifecycleConfig = new HashMap<>();\n         Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, packageRecipe);\n         for (Map.Entry<String, Object> configKVPair : packageRecipe.getLifecycle().entrySet()) {\n             resolvedLifecycleConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n         }\n+        resolvedServiceConfig.put(EvergreenService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC, resolvedLifecycleConfig);\n+\n+        Map<Object, Object> resolvedCustomConfig = new HashMap<>();\n+        for (Map.Entry<String, Object> configKVPair : packageRecipe.getCustomConfig().entrySet()) {\n+            resolvedCustomConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+        resolvedServiceConfig.put(CUSTOM_CONFIG_NAMESPACE, resolvedCustomConfig);\n+\n+        Map<String, String> resolvedSetEnvConfig = new HashMap<>();\n+        for (Map.Entry<String, String> configKVPair : packageRecipe.getEnvironmentVariables().entrySet()) {\n+            resolvedSetEnvConfig.put(configKVPair.getKey(), (String) interpolate(configKVPair.getValue(),", "originalCommit": "fedcc13b83256221208eb354ef82db801facc572", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzODU0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r421638540", "bodyText": "All parts of recipe that become the service's config, are configurable through parameters today, that includes run: and install: and other lifecycle commands.", "author": "shaguptashaikh", "createdAt": "2020-05-07T16:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0MTcxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/223#discussion_r421641716", "bodyText": "OK, good, I didn't realize. What if you just have the interpolation run once on all the data is in the final map? That way you don't need this specific handling that you needed to add here for environment variables; it would just automatically apply to the whole config that will be merged.", "author": "MikeDombo", "createdAt": "2020-05-07T16:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTIzNg=="}], "type": "inlineReview"}, {"oid": "28cf6124ddeee0571bff0d10abbefb122170fcb8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/28cf6124ddeee0571bff0d10abbefb122170fcb8", "message": "Dynamic config changes in deployments", "committedDate": "2020-05-07T16:29:40Z", "type": "commit"}, {"oid": "28cf6124ddeee0571bff0d10abbefb122170fcb8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/28cf6124ddeee0571bff0d10abbefb122170fcb8", "message": "Dynamic config changes in deployments", "committedDate": "2020-05-07T16:29:40Z", "type": "forcePushed"}]}