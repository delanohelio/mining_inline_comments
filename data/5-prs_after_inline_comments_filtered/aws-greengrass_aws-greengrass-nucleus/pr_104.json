{"pr_number": 104, "pr_title": "Update state change listener", "pr_createdAt": "2020-03-09T20:11:10Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/104", "timeline": [{"oid": "842475edaf3895e4dbc699b8a45cd65acb7fbf32", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/842475edaf3895e4dbc699b8a45cd65acb7fbf32", "message": "Expand the GlobalStateChangeListener::globalServiceStateChanged to have both old and new; Switch tests to use newState from event instead of getState()", "committedDate": "2020-03-09T19:49:46Z", "type": "commit"}, {"oid": "f7407e7123f1b80350c44f846893b82f73595a1b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f7407e7123f1b80350c44f846893b82f73595a1b", "message": "more", "committedDate": "2020-03-09T20:03:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNTEzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/104#discussion_r389935136", "bodyText": "Ideally with this change we should only need to check for \"RUNNING\" since it should first go to running before finished.", "author": "MikeDombo", "createdAt": "2020-03-09T20:13:46Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/ServiceConfigMergingTest.java", "diffHunk": "@@ -161,21 +160,20 @@ void GIVEN_kernel_running_single_service_WHEN_merge_change_adding_nested_depende\n         CountDownLatch newServiceStarted = new CountDownLatch(1);\n \n         // Check that new_service2 starts, then new_service, and then main gets restarted\n-        kernel.context.addGlobalStateChangeListener((service, prevState) -> {\n-            if (service.getName().equals(\"new_service2\") && service.getState().equals(State.RUNNING)) {\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"new_service2\") && newState.equals(State.RUNNING)) {\n                 newService2Started.countDown();\n             }\n             if (newService2Started.getCount() == 0) {\n-                if (service.getName().equals(\"new_service\") && service.getState().equals(State.RUNNING)) {\n+                if (service.getName().equals(\"new_service\") && newState.equals(State.RUNNING)) {\n                     newServiceStarted.countDown();\n                 }\n             }\n             // Only count main as started if its dependency (new_service) has already been started\n-            // TODO change to use new state from event instead of getState()\n             if (newServiceStarted.getCount() == 0) {\n                 if (service.getName().equals(\"main\")\n-                        && (service.getState().equals(State.RUNNING) || service.getState().equals(State.FINISHED))\n-                        && prevState.equals(State.INSTALLED)) {\n+                        && (newState.equals(State.RUNNING) || newState.equals(State.FINISHED))", "originalCommit": "f7407e7123f1b80350c44f846893b82f73595a1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMzMxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/104#discussion_r390023319", "bodyText": "Correct! Thanks for catching this. Forgot to change it...", "author": "leaf94", "createdAt": "2020-03-09T23:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNTEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNTQzOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/104#discussion_r389935438", "bodyText": "Excellent!", "author": "MikeDombo", "createdAt": "2020-03-09T20:14:20Z", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -44,10 +44,10 @@\n \n     private static final Logger log = LogManager.getLogger(LifecycleIPCAgent.class);\n \n-    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, oldState, newState) -> {\n         Map<ConnectionContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n         if (callbacks != null) {\n-            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+            callbacks.values().forEach(x -> x.accept(oldState, newState));", "originalCommit": "f7407e7123f1b80350c44f846893b82f73595a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c0f867ddf5874c01874acf0c67b6d2f5abbc2767", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c0f867ddf5874c01874acf0c67b6d2f5abbc2767", "message": "pr comment", "committedDate": "2020-03-10T02:00:55Z", "type": "commit"}]}