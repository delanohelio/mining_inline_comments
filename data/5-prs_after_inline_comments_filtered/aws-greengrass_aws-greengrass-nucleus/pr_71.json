{"pr_number": 71, "pr_title": "package manager API definition", "pr_createdAt": "2020-02-22T00:30:09Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NTMyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r382865324", "bodyText": "The D in MetaData should be lowercase.", "author": "MikeDombo", "createdAt": "2020-02-22T00:32:51Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/PackageManager.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.aws.iot.evergreen.packagemanagement;\n+\n+import com.aws.iot.evergreen.packagemanagement.model.PackageMetaData;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageVersionConflictException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Future;\n+\n+public class PackageManager {\n+\n+    /*\n+     * Given a set of proposed package dependency trees,\n+     * figure out packages need to be refreshed by dependency resolution\n+     */\n+    public Set<PackageMetaData> resolvePendingRefreshPackages(Set<PackageMetaData> proposedPackages) throws PackageVersionConflictException {\n+        return Collections.emptySet();\n+    }\n+\n+    /*\n+     * Given a set of pending refresh packages, download the package recipes and artifacts in background\n+     */\n+    public Future<Set<PackageMetaData>> downloadPackages(Set<PackageMetaData> pendingRefreshPackages) {\n+        return null;\n+    }\n+\n+    /*\n+     * Given a set of target packages, return their resolved dependency trees and recipe data initialized\n+     */\n+    public Map<PackageMetaData, Package> loadPackages(Set<PackageMetaData> proposedPackages) {", "originalCommit": "bb7c7ea0d517e5647dcad5d23a77e0bf282ae9eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NTY3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r382865678", "bodyText": "Thank you. Will update", "author": "wikimonkey", "createdAt": "2020-02-22T00:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NTMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NTQ4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r382865486", "bodyText": "Why do we need this? SemVer already gives us a way to parse version ranges.", "author": "MikeDombo", "createdAt": "2020-02-22T00:33:56Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/VersionConstraint.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.vdurmont.semver4j.Semver;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+@Value\n+public class VersionConstraint {", "originalCommit": "ca00c7da7696bde370d736ee9c242c6d7c1a7143", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODAzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r382868036", "bodyText": "Synced offline, as we choose to use NPM style, so we don't need to build ourselves. Good to simplify.", "author": "wikimonkey", "createdAt": "2020-02-22T00:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NTQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjYwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r382872602", "bodyText": "Don't bring in extra dependencies like this, we already have this utility: https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/iot/evergreen/util/Utils.java#L73.", "author": "MikeDombo", "createdAt": "2020-02-22T01:27:16Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.vdurmont.semver4j.Semver;\n+import java.util.Collections;\n+import java.util.Set;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+import org.apache.commons.lang3.StringUtils;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageMetadata {\n+\n+    @EqualsAndHashCode.Include\n+    String name;\n+\n+    @EqualsAndHashCode.Include\n+    Semver version;\n+\n+    Set<String> versionConstraints;\n+\n+    Set<PackageMetadata> dependsOn;\n+\n+\n+    public PackageMetadata(String name, String version, Set<String> versionConstraints,\n+                           Set<PackageMetadata> dependsOn) {\n+        if (StringUtils.isBlank(name)) {\n+            throw new NullPointerException(\"package name can't be blank\");\n+        }\n+        if (StringUtils.isBlank(version)) {", "originalCommit": "65c0f42eddc4fa96b215d4ada5f32299c1d9e201", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Njg2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r382876861", "bodyText": "The Utils comes with kernel. I assume package management and DA will be moved into its own repository one day. So do we also want to have a common package for utils?\nI am advocate of being judicious on introducing dependencies. But I feel apache commons is pretty standard to adopt.", "author": "wikimonkey", "createdAt": "2020-02-22T02:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4NTE0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383385140", "bodyText": "I agree with Michael here. It's not worth adding 498KB to the binary for one method. Also package management and DA don't not necessarily need to be separate repos", "author": "fengwang666", "createdAt": "2020-02-24T16:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4ODQ0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383388442", "bodyText": "Didn't we decide that all our code is staying in one repo? And if not, for the foreseeable future at least this stuff will be built with Kernel, so I'd recommend just using the utils that we already have.", "author": "MikeDombo", "createdAt": "2020-02-24T16:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMTE0Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383431146", "bodyText": "This is a valid reason to say \"if it will split to different repo, split now\". I heard we will have kernel (lifecycle management) open source in day 1, but not necessarily for DA and PM. So if we don't split them, can we have partial code open source in one repo?", "author": "wikimonkey", "createdAt": "2020-02-24T18:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1NzM4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383457384", "bodyText": "Agree to use Utils comes with kernel. Just be ware of the troubles brought by cross references if we choose to split to different repo eventually.", "author": "wikimonkey", "createdAt": "2020-02-24T19:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjYwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r382872609", "bodyText": "No runtime exceptions.", "author": "MikeDombo", "createdAt": "2020-02-22T01:27:23Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.vdurmont.semver4j.Semver;\n+import java.util.Collections;\n+import java.util.Set;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+import org.apache.commons.lang3.StringUtils;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageMetadata {\n+\n+    @EqualsAndHashCode.Include\n+    String name;\n+\n+    @EqualsAndHashCode.Include\n+    Semver version;\n+\n+    Set<String> versionConstraints;\n+\n+    Set<PackageMetadata> dependsOn;\n+\n+\n+    public PackageMetadata(String name, String version, Set<String> versionConstraints,\n+                           Set<PackageMetadata> dependsOn) {\n+        if (StringUtils.isBlank(name)) {\n+            throw new NullPointerException(\"package name can't be blank\");", "originalCommit": "65c0f42eddc4fa96b215d4ada5f32299c1d9e201", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3NzMxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r382877312", "bodyText": "I don't agree. I understand advocating on checked exception is to actively handle the error shouldn't stop the application. But there are errors that just can't proceed with it, in such cases runtime exception is appropriate. Also you can't avoid runtime exception, your lib may throw it, lombok generates code throw it.\nBut in this case, IllegalArgumentException is more appropriate. I forgot to update it.", "author": "wikimonkey", "createdAt": "2020-02-22T02:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwOTEyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383409120", "bodyText": "What's the reason of including dependencies in PackageMetadata?", "author": "fengwang666", "createdAt": "2020-02-24T17:33:00Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.vdurmont.semver4j.Semver;\n+import java.util.Collections;\n+import java.util.Set;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+import org.apache.commons.lang3.StringUtils;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageMetadata {\n+\n+    @EqualsAndHashCode.Include\n+    String name;\n+\n+    @EqualsAndHashCode.Include\n+    Semver version;\n+\n+    String versionConstraint;\n+\n+    Set<PackageMetadata> dependsOn;", "originalCommit": "6986538670ee98919514de5148e5694cf2861440", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyODQzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383428434", "bodyText": "This model is supposed to be the data container coming from deployment. The packages form a dependency tree.", "author": "wikimonkey", "createdAt": "2020-02-24T18:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwOTEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMDEyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383410122", "bodyText": "Why is this needed? What's the intend usage of this field?", "author": "fengwang666", "createdAt": "2020-02-24T17:35:10Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageRegistryEntry.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.vdurmont.semver4j.Semver;\n+import java.util.HashSet;\n+import java.util.Set;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageRegistryEntry {\n+\n+    @EqualsAndHashCode.Include\n+    String name;\n+\n+    @EqualsAndHashCode.Include\n+    Semver version;\n+\n+    Set<Reference> dependBy;", "originalCommit": "6986538670ee98919514de5148e5694cf2861440", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyODQwNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383428404", "bodyText": "This is package registry entry. It's flatten as individual row structure. Each package has its 'dependOn' and 'dependBy'. Especially 'dependeBy' section is used in dependency resolution to check if constraint is still met with registered dependent package(s).", "author": "wikimonkey", "createdAt": "2020-02-24T18:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMDEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwODIxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384008214", "bodyText": "Why use Reference? It looks like it should just point to a Package, PackageMetadata, or PackageRegistryEntry. What am I missing?", "author": "MikeDombo", "createdAt": "2020-02-25T17:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMDEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMTA2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383411068", "bodyText": "It seems this four annotations can be replaced by @value annotation.", "author": "fengwang666", "createdAt": "2020-02-24T17:37:04Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageRegistryEntry.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.vdurmont.semver4j.Semver;\n+import java.util.HashSet;\n+import java.util.Set;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageRegistryEntry {\n+\n+    @EqualsAndHashCode.Include\n+    String name;\n+\n+    @EqualsAndHashCode.Include\n+    Semver version;\n+\n+    Set<Reference> dependBy;\n+\n+    Set<Reference> dependOn;\n+\n+    public PackageRegistryEntry(String name, String version) {\n+        this.name = name;\n+        this.version = new Semver(version, Semver.SemverType.NPM);\n+        this.dependBy = new HashSet<>();\n+        this.dependOn = new HashSet<>();\n+    }\n+\n+    @Getter\n+    @ToString\n+    @FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+    @EqualsAndHashCode", "originalCommit": "6986538670ee98919514de5148e5694cf2861440", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyOTQwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383429402", "bodyText": "Yes, except I don't want the @AllArgsConstructor that @value also incorporates. I want it to have only one constructor which takes version as string, but initialize to semver with NPM type.", "author": "wikimonkey", "createdAt": "2020-02-24T18:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMTA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMzUxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383533519", "bodyText": "From https://projectlombok.org/features/Value\n\"any explicit constructor, no matter the arguments list, implies lombok will not generate a constructor\"\nYou should be fine using @value :)", "author": "chaurah", "createdAt": "2020-02-24T21:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMTA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjY2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383412669", "bodyText": "Is the proposedPackage the top level packages or all the packages? If it's the latter, then it seems it's redundant because PackageMetadata already contains dependencies.", "author": "fengwang666", "createdAt": "2020-02-24T17:40:10Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/PackageManager.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.aws.iot.evergreen.packagemanagement;\n+\n+import com.aws.iot.evergreen.packagemanagement.model.Package;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageMetadata;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageRegistryEntry;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageVersionConflictException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Future;\n+\n+public class PackageManager {\n+\n+    /*\n+     * Given a set of proposed package dependency trees.\n+     * Return the local resolved dependency tress in the future\n+     */\n+    public Future<Map<PackageMetadata, Package>> resolvePackages(Set<PackageMetadata> proposedPackage) {", "originalCommit": "6986538670ee98919514de5148e5694cf2861440", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyOTkzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383429936", "bodyText": "proposedPackages are target package dependency trees. It's essentially a proposed tree.", "author": "wikimonkey", "createdAt": "2020-02-24T18:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjkzOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383412938", "bodyText": "What's the intended use case of this method?", "author": "fengwang666", "createdAt": "2020-02-24T17:40:47Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/PackageManager.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.aws.iot.evergreen.packagemanagement;\n+\n+import com.aws.iot.evergreen.packagemanagement.model.Package;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageMetadata;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageRegistryEntry;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageVersionConflictException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Future;\n+\n+public class PackageManager {\n+\n+    /*\n+     * Given a set of proposed package dependency trees.\n+     * Return the local resolved dependency tress in the future\n+     */\n+    public Future<Map<PackageMetadata, Package>> resolvePackages(Set<PackageMetadata> proposedPackage) {\n+        return null;\n+    }\n+\n+    /*\n+     * Given a set of proposed package dependency trees,\n+     * figure out new package dependencies.\n+     */\n+    private Set<PackageRegistryEntry> resolveNewPackagesDependencies(Set<PackageMetadata> proposedPackages) throws PackageVersionConflictException {\n+        return Collections.emptySet();\n+    }", "originalCommit": "6986538670ee98919514de5148e5694cf2861440", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMTA3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383431070", "bodyText": "private method, internally first figure out the new dependency trees based on proposed trees and existing packages on device. The return type is a set of pending update registry entry, it includes packages need to download and/or package dependencies need to be updated.", "author": "wikimonkey", "createdAt": "2020-02-24T18:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMzY1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383523659", "bodyText": "This should be Json serializable. Add corresponding annotations for JsonProperties and JsonInclude\nHere is what I think the name will be in the Json coming from cloud - https://quip-amazon.com/WQHjAZhdhngl/E2E-Demo#KBI9CA3DCl9. I would keep the names of the member variables in the class corresponding to that.", "author": "abanthiy", "createdAt": "2020-02-24T21:25:59Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.vdurmont.semver4j.Semver;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageMetadata {", "originalCommit": "1cf2a902690511af59d6ab69a987d3661a813302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzNjY1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383536659", "bodyText": "I leave to the caller to decide how to construct the model instances. If you want to do deserialization. Make it compatible with your deserializer.", "author": "wikimonkey", "createdAt": "2020-02-24T21:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMzY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMzk3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383523971", "bodyText": "Is this Json Serializable from string? If not then getter method needs to be defined", "author": "abanthiy", "createdAt": "2020-02-24T21:26:32Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.vdurmont.semver4j.Semver;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageMetadata {\n+\n+    @EqualsAndHashCode.Include\n+    String name;\n+\n+    @EqualsAndHashCode.Include\n+    Semver version;", "originalCommit": "1cf2a902690511af59d6ab69a987d3661a813302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzNzEyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383537123", "bodyText": "It has getter method. You see I write a customized constructor which takes string version. You probably can make it work with your deserializer.", "author": "wikimonkey", "createdAt": "2020-02-24T21:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTY3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384005678", "bodyText": "@wikimonkey Please make sure it works with Jackson since that is what we're using. We don't write the deserialization logic, Jackson takes care of it for us.", "author": "MikeDombo", "createdAt": "2020-02-25T17:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMzk3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNDY1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383524658", "bodyText": "Is this true?. It is possible that either of these two are not sent in the deployment configuration.", "author": "abanthiy", "createdAt": "2020-02-24T21:27:52Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.vdurmont.semver4j.Semver;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageMetadata {\n+\n+    @EqualsAndHashCode.Include\n+    String name;\n+\n+    @EqualsAndHashCode.Include\n+    Semver version;\n+\n+    String versionConstraint;\n+\n+    Set<PackageMetadata> dependsOn;\n+\n+    public PackageMetadata(String name, String version, String versionConstraint, Set<PackageMetadata> dependsOn) {\n+        if (Utils.isEmpty(name)) {\n+            throw new IllegalArgumentException(\"package name can't be empty\");\n+        }\n+        if (Utils.isEmpty(version)) {\n+            throw new IllegalArgumentException(\"package version can't be empty\");\n+        }\n+        if (Utils.isEmpty(versionConstraint)) {\n+            throw new IllegalArgumentException(\"package version constraint can't be empty\");\n+        }", "originalCommit": "1cf2a902690511af59d6ab69a987d3661a813302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzNTcyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383535721", "bodyText": "Not possible. That's why I explicitly do a sanity check that throw unchecked exception.", "author": "wikimonkey", "createdAt": "2020-02-24T21:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNDY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNTEzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383525139", "bodyText": "Should we name this resolved version? As this is coming as resolved version from the cloud?", "author": "abanthiy", "createdAt": "2020-02-24T21:28:47Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.vdurmont.semver4j.Semver;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageMetadata {\n+\n+    @EqualsAndHashCode.Include\n+    String name;\n+\n+    @EqualsAndHashCode.Include\n+    Semver version;", "originalCommit": "1cf2a902690511af59d6ab69a987d3661a813302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzNTE0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383535140", "bodyText": "This is resolved version from cloud, but not the resolved version locally. I think name is ok as long as we know its meaning, not confusing with final resolved version.", "author": "wikimonkey", "createdAt": "2020-02-24T21:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNTEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDA0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383530041", "bodyText": "I think this should be included in the Equals method. Two dependencies of same package with different version constraints can exist.", "author": "abanthiy", "createdAt": "2020-02-24T21:39:02Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.vdurmont.semver4j.Semver;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageMetadata {\n+\n+    @EqualsAndHashCode.Include\n+    String name;\n+\n+    @EqualsAndHashCode.Include\n+    Semver version;\n+\n+    String versionConstraint;", "originalCommit": "1cf2a902690511af59d6ab69a987d3661a813302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MDgwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383540803", "bodyText": "Yes. Although package manager doesn't use this model's equality in dependency resolution, I will add it to equality to make logical sense.", "author": "wikimonkey", "createdAt": "2020-02-24T22:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNjExNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384006115", "bodyText": "What is the version constraint? Isn't the constraint already included in the semver?", "author": "MikeDombo", "createdAt": "2020-02-25T17:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDU3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383530579", "bodyText": "proposedPackage -> proposedPackages", "author": "abanthiy", "createdAt": "2020-02-24T21:40:11Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/PackageManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.aws.iot.evergreen.packagemanagement;\n+\n+import com.aws.iot.evergreen.packagemanagement.model.Package;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageMetadata;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageRegistryEntry;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageVersionConflictException;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Future;\n+\n+public class PackageManager {\n+\n+    /*\n+     * Given a set of proposed package dependency trees.\n+     * Return the local resolved dependency tress in the future\n+     */\n+    public Future<Map<PackageMetadata, Package>> resolvePackages(Set<PackageMetadata> proposedPackage) {", "originalCommit": "1cf2a902690511af59d6ab69a987d3661a813302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMzI1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383533251", "bodyText": "Will change", "author": "wikimonkey", "createdAt": "2020-02-24T21:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMjQ2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383532460", "bodyText": "Need to add another member called parameters, for accepting parameters for the package", "author": "abanthiy", "createdAt": "2020-02-24T21:43:58Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+@Getter\n+@ToString\n+@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+public class PackageMetadata {", "originalCommit": "f807925a82899e6a3d6087cffcde79700d4ec915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMzE0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r383533149", "bodyText": "True. Can the folks work on the part add the necessary fields?", "author": "wikimonkey", "createdAt": "2020-02-24T21:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMjQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNDYwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384004608", "bodyText": "Will this contain the real implementations, or is this expected to be an interface or maybe an abstract class?", "author": "MikeDombo", "createdAt": "2020-02-25T17:04:52Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/PackageManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.aws.iot.evergreen.packagemanagement;\n+\n+import com.aws.iot.evergreen.packagemanagement.model.Package;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageMetadata;\n+//import com.aws.iot.evergreen.packagemanagement.model.PackageRegistryEntry;\n+//import com.aws.iot.evergreen.packagemanagement.model.PackageVersionConflictException;\n+//\n+//import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Future;\n+\n+public class PackageManager {", "originalCommit": "a19b50e8c5d068c5514dc460e8ffc4787b63bd44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NDE0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384054140", "bodyText": "real implementation", "author": "wikimonkey", "createdAt": "2020-02-25T18:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNDYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNDcyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384004720", "bodyText": "If we don't need these imports, let's remove them.", "author": "MikeDombo", "createdAt": "2020-02-25T17:05:03Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/PackageManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.aws.iot.evergreen.packagemanagement;\n+\n+import com.aws.iot.evergreen.packagemanagement.model.Package;\n+import com.aws.iot.evergreen.packagemanagement.model.PackageMetadata;\n+//import com.aws.iot.evergreen.packagemanagement.model.PackageRegistryEntry;", "originalCommit": "a19b50e8c5d068c5514dc460e8ffc4787b63bd44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NjE1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384066153", "bodyText": "I put a few private methods for placeholders, findbugs doesn't like no used private methods. So I comment them out. They will be used in the next PR.", "author": "wikimonkey", "createdAt": "2020-02-25T19:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNDcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNjg4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384006883", "bodyText": "Rename this to match PackageMetadataTest since you renamed PackageMetadata.", "author": "MikeDombo", "createdAt": "2020-02-25T17:08:28Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetaDataTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNot.not;\n+\n+class PackageMetaDataTest {", "originalCommit": "a19b50e8c5d068c5514dc460e8ffc4787b63bd44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNzY1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384007651", "bodyText": "this should be metadata here as well, with no underscore.\nAdditionally, the Given should be all caps like the other keywords: GIVEN_package_metadata_WHEN....", "author": "MikeDombo", "createdAt": "2020-02-25T17:09:40Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetaDataTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNot.not;\n+\n+class PackageMetaDataTest {\n+\n+    @Test\n+    void Given_package_meta_data_WHEN_equality_is_called_THEN_decide_if_they_are_equal() {", "originalCommit": "a19b50e8c5d068c5514dc460e8ffc4787b63bd44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NjM4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384076385", "bodyText": "I will update all the naming.", "author": "wikimonkey", "createdAt": "2020-02-25T19:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNzY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5OTE2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384099167", "bodyText": "We probably shouldn't be using experimental features", "author": "chaurah", "createdAt": "2020-02-25T20:10:06Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanagement/model/PackageMetadata.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.aws.iot.evergreen.packagemanagement.model;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+import lombok.experimental.FieldDefaults;", "originalCommit": "eb2ce26d7a62cb6b60c984717b7e8897d5d7722c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMDEwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/71#discussion_r384100108", "bodyText": "I can update it later.", "author": "wikimonkey", "createdAt": "2020-02-25T20:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5OTE2Nw=="}], "type": "inlineReview"}, {"oid": "0f4ee13cc216fd6e50823d636367841fd942a90f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0f4ee13cc216fd6e50823d636367841fd942a90f", "message": "package manager API definition", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "c6f2742e1c64278a659ec3fea3fb4f2a3d00e4d6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c6f2742e1c64278a659ec3fea3fb4f2a3d00e4d6", "message": "add comments", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "71f83c1d72cb2a4d88da5ad4005ee85ad1f048b4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/71f83c1d72cb2a4d88da5ad4005ee85ad1f048b4", "message": "change per comments", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "dd104029a9d929c85eab2abdedb6fe1c28833f7d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dd104029a9d929c85eab2abdedb6fe1c28833f7d", "message": "remove unused import", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "4e9c4ce1c9ea62080f53b933d72efbb169cc4915", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4e9c4ce1c9ea62080f53b933d72efbb169cc4915", "message": "change exception type", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "521b5ea54c1a373a152cc980a81c044bf6f93370", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/521b5ea54c1a373a152cc980a81c044bf6f93370", "message": "add version constraint", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "43d4afd3e641050df8a59fb77aaeda8023336156", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/43d4afd3e641050df8a59fb77aaeda8023336156", "message": "consolidate to one public API", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "a090f5403cd6a3a7c302c0f44b2cd5dc7d5ac061", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a090f5403cd6a3a7c302c0f44b2cd5dc7d5ac061", "message": "switch to use internal utils; reformat", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "a954637d8c3bcf5f2546beff24f47f0ae921e11f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a954637d8c3bcf5f2546beff24f47f0ae921e11f", "message": "fix format", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "f2cdbac9a8f31de5b3f1eeb6aab045ba7094a491", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f2cdbac9a8f31de5b3f1eeb6aab045ba7094a491", "message": "more format fix", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "91e56776e28ecca8a4164f000f4595e16baf5f3a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/91e56776e28ecca8a4164f000f4595e16baf5f3a", "message": "make findbug happy by uncomment private method now", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "206a0357a36ce262ee1f753fb50148c3e1e474a7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/206a0357a36ce262ee1f753fb50148c3e1e474a7", "message": "per comments", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "2819977afcafaf802558a18a286d1fbb1a308ffa", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2819977afcafaf802558a18a286d1fbb1a308ffa", "message": "correct naming", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "8127423b8e8fdd7a07e3a925623e7712f0e53cd5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8127423b8e8fdd7a07e3a925623e7712f0e53cd5", "message": "fix format", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "7f247123759bf4759628377804d19c6fb604f2e3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7f247123759bf4759628377804d19c6fb604f2e3", "message": "fix comment format", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "56d16e410dffbd92d3038fb164eadfbdc7a424f0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/56d16e410dffbd92d3038fb164eadfbdc7a424f0", "message": "delete comments", "committedDate": "2020-02-25T20:53:20Z", "type": "commit"}, {"oid": "56d16e410dffbd92d3038fb164eadfbdc7a424f0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/56d16e410dffbd92d3038fb164eadfbdc7a424f0", "message": "delete comments", "committedDate": "2020-02-25T20:53:20Z", "type": "forcePushed"}]}