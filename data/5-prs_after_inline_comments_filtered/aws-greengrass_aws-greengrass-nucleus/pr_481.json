{"pr_number": 481, "pr_title": "Add FSS integration tests. Remove E2E test for FSS.", "pr_createdAt": "2020-09-28T04:58:20Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/481", "timeline": [{"oid": "c05e97aeffe9ed4105348905f6822551b0c0dfc7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c05e97aeffe9ed4105348905f6822551b0c0dfc7", "message": "Add IoT jobs deployment integ test. Remove E2E test for FSS.", "committedDate": "2020-09-28T15:03:35Z", "type": "forcePushed"}, {"oid": "32035ed214fdad024ff02c164e55f78e125ab99f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32035ed214fdad024ff02c164e55f78e125ab99f", "message": "Add FSS integration tests. Remove E2E test for FSS.", "committedDate": "2020-09-28T15:11:07Z", "type": "commit"}, {"oid": "32035ed214fdad024ff02c164e55f78e125ab99f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32035ed214fdad024ff02c164e55f78e125ab99f", "message": "Add FSS integration tests. Remove E2E test for FSS.", "committedDate": "2020-09-28T15:11:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNTY3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/481#discussion_r496135670", "bodyText": "remove public", "author": "MikeDombo", "createdAt": "2020-09-28T18:00:40Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/IotJobsFleetStatusServiceTest.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.status;\n+\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicy;\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicyAction;\n+import com.amazonaws.services.evergreen.model.ConfigurationValidationPolicy;\n+import com.aws.greengrass.componentmanager.exceptions.PackageDownloadException;\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.deployment.DeploymentService;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n+import com.aws.greengrass.deployment.IotJobsHelper;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FailureHandlingPolicy;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.deployment.model.PackageInfo;\n+import com.aws.greengrass.integrationtests.BaseITCase;\n+import com.aws.greengrass.lifecyclemanager.GreengrassService;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.logging.impl.GreengrassLogMessage;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.logging.impl.Slf4jLogAdapter;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.PublishRequest;\n+import com.aws.greengrass.status.FleetStatusDetails;\n+import com.aws.greengrass.status.FleetStatusService;\n+import com.aws.greengrass.status.OverallStatus;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.slf4j.event.Level;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.greengrass.util.Utils.copyFolderRecursively;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({GGExtension.class, MockitoExtension.class})\n+public class IotJobsFleetStatusServiceTest extends BaseITCase {", "originalCommit": "32035ed214fdad024ff02c164e55f78e125ab99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNTc3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/481#discussion_r496135773", "bodyText": "remove public everywhere", "author": "MikeDombo", "createdAt": "2020-09-28T18:00:51Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/IotJobsFleetStatusServiceTest.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.status;\n+\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicy;\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicyAction;\n+import com.amazonaws.services.evergreen.model.ConfigurationValidationPolicy;\n+import com.aws.greengrass.componentmanager.exceptions.PackageDownloadException;\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.deployment.DeploymentService;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n+import com.aws.greengrass.deployment.IotJobsHelper;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FailureHandlingPolicy;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.deployment.model.PackageInfo;\n+import com.aws.greengrass.integrationtests.BaseITCase;\n+import com.aws.greengrass.lifecyclemanager.GreengrassService;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.logging.impl.GreengrassLogMessage;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.logging.impl.Slf4jLogAdapter;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.PublishRequest;\n+import com.aws.greengrass.status.FleetStatusDetails;\n+import com.aws.greengrass.status.FleetStatusService;\n+import com.aws.greengrass.status.OverallStatus;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.slf4j.event.Level;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.greengrass.util.Utils.copyFolderRecursively;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({GGExtension.class, MockitoExtension.class})\n+public class IotJobsFleetStatusServiceTest extends BaseITCase {\n+    private static final String MOCK_FLEET_CONFIG_ARN =\n+            \"arn:aws:greengrass:us-east-1:12345678910:configuration:thinggroup/group1:1\";\n+    private static final String TEST_JOB_ID_1 = \"TEST_JOB_1\";\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static DeviceConfiguration deviceConfiguration;\n+    private static DeploymentService deploymentService;\n+    private static Kernel kernel;\n+    private Consumer<GreengrassLogMessage> logListener;\n+\n+    @TempDir\n+    static Path rootDir;\n+    @Mock\n+    private MqttClient mqttClient;\n+    @Mock\n+    private IotJobsClient mockIotJobsClient;\n+    @Captor\n+    private ArgumentCaptor<PublishRequest> captor;\n+\n+    @Captor\n+    private ArgumentCaptor<Consumer<UpdateJobExecutionResponse>> jobsAcceptedHandlerCaptor;\n+\n+    @BeforeEach\n+    public void setupKernel() throws IOException, URISyntaxException, DeviceConfigurationException,", "originalCommit": "32035ed214fdad024ff02c164e55f78e125ab99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNTg4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/481#discussion_r496135885", "bodyText": "is this absolutely required?", "author": "MikeDombo", "createdAt": "2020-09-28T18:01:04Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/IotJobsFleetStatusServiceTest.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.status;\n+\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicy;\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicyAction;\n+import com.amazonaws.services.evergreen.model.ConfigurationValidationPolicy;\n+import com.aws.greengrass.componentmanager.exceptions.PackageDownloadException;\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.deployment.DeploymentService;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n+import com.aws.greengrass.deployment.IotJobsHelper;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FailureHandlingPolicy;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.deployment.model.PackageInfo;\n+import com.aws.greengrass.integrationtests.BaseITCase;\n+import com.aws.greengrass.lifecyclemanager.GreengrassService;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.logging.impl.GreengrassLogMessage;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.logging.impl.Slf4jLogAdapter;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.PublishRequest;\n+import com.aws.greengrass.status.FleetStatusDetails;\n+import com.aws.greengrass.status.FleetStatusService;\n+import com.aws.greengrass.status.OverallStatus;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.slf4j.event.Level;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.greengrass.util.Utils.copyFolderRecursively;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({GGExtension.class, MockitoExtension.class})\n+public class IotJobsFleetStatusServiceTest extends BaseITCase {\n+    private static final String MOCK_FLEET_CONFIG_ARN =\n+            \"arn:aws:greengrass:us-east-1:12345678910:configuration:thinggroup/group1:1\";\n+    private static final String TEST_JOB_ID_1 = \"TEST_JOB_1\";\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static DeviceConfiguration deviceConfiguration;\n+    private static DeploymentService deploymentService;\n+    private static Kernel kernel;\n+    private Consumer<GreengrassLogMessage> logListener;\n+\n+    @TempDir\n+    static Path rootDir;\n+    @Mock\n+    private MqttClient mqttClient;\n+    @Mock\n+    private IotJobsClient mockIotJobsClient;\n+    @Captor\n+    private ArgumentCaptor<PublishRequest> captor;\n+\n+    @Captor\n+    private ArgumentCaptor<Consumer<UpdateJobExecutionResponse>> jobsAcceptedHandlerCaptor;\n+\n+    @BeforeEach\n+    public void setupKernel() throws IOException, URISyntaxException, DeviceConfigurationException,\n+            InterruptedException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        CountDownLatch fssRunning = new CountDownLatch(1);\n+        CountDownLatch deploymentServiceRunning = new CountDownLatch(1);\n+        LogManager.getConfig().setLevel(Level.DEBUG);", "originalCommit": "32035ed214fdad024ff02c164e55f78e125ab99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNjEyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/481#discussion_r496136125", "bodyText": "If it is, at least reset it at the end of the test", "author": "MikeDombo", "createdAt": "2020-09-28T18:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNjg0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/481#discussion_r496136843", "bodyText": "these names can break very easily if you're not mocking them. Use consts where possible", "author": "MikeDombo", "createdAt": "2020-09-28T18:02:46Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/IotJobsFleetStatusServiceTest.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.status;\n+\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicy;\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicyAction;\n+import com.amazonaws.services.evergreen.model.ConfigurationValidationPolicy;\n+import com.aws.greengrass.componentmanager.exceptions.PackageDownloadException;\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.deployment.DeploymentService;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n+import com.aws.greengrass.deployment.IotJobsHelper;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FailureHandlingPolicy;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.deployment.model.PackageInfo;\n+import com.aws.greengrass.integrationtests.BaseITCase;\n+import com.aws.greengrass.lifecyclemanager.GreengrassService;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.logging.impl.GreengrassLogMessage;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.logging.impl.Slf4jLogAdapter;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.PublishRequest;\n+import com.aws.greengrass.status.FleetStatusDetails;\n+import com.aws.greengrass.status.FleetStatusService;\n+import com.aws.greengrass.status.OverallStatus;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.slf4j.event.Level;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.greengrass.util.Utils.copyFolderRecursively;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({GGExtension.class, MockitoExtension.class})\n+public class IotJobsFleetStatusServiceTest extends BaseITCase {\n+    private static final String MOCK_FLEET_CONFIG_ARN =\n+            \"arn:aws:greengrass:us-east-1:12345678910:configuration:thinggroup/group1:1\";\n+    private static final String TEST_JOB_ID_1 = \"TEST_JOB_1\";\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static DeviceConfiguration deviceConfiguration;\n+    private static DeploymentService deploymentService;\n+    private static Kernel kernel;\n+    private Consumer<GreengrassLogMessage> logListener;\n+\n+    @TempDir\n+    static Path rootDir;\n+    @Mock\n+    private MqttClient mqttClient;\n+    @Mock\n+    private IotJobsClient mockIotJobsClient;\n+    @Captor\n+    private ArgumentCaptor<PublishRequest> captor;\n+\n+    @Captor\n+    private ArgumentCaptor<Consumer<UpdateJobExecutionResponse>> jobsAcceptedHandlerCaptor;\n+\n+    @BeforeEach\n+    public void setupKernel() throws IOException, URISyntaxException, DeviceConfigurationException,\n+            InterruptedException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        CountDownLatch fssRunning = new CountDownLatch(1);\n+        CountDownLatch deploymentServiceRunning = new CountDownLatch(1);\n+        LogManager.getConfig().setLevel(Level.DEBUG);\n+        CompletableFuture cf = new CompletableFuture();\n+        cf.complete(null);\n+        when(mockIotJobsClient.PublishUpdateJobExecution(any(UpdateJobExecutionRequest.class),\n+                any(QualityOfService.class))).thenAnswer(invocationOnMock -> {\n+                    verify(mockIotJobsClient, atLeastOnce()).SubscribeToUpdateJobExecutionAccepted(any(),\n+                            eq(QualityOfService.AT_LEAST_ONCE), jobsAcceptedHandlerCaptor.capture());\n+                    Consumer<UpdateJobExecutionResponse> jobResponseConsumer = jobsAcceptedHandlerCaptor.getValue();\n+                    UpdateJobExecutionResponse mockJobExecutionResponse = mock(UpdateJobExecutionResponse.class);\n+                    jobResponseConsumer.accept(mockJobExecutionResponse);\n+                    return cf;\n+                });\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", IotJobsFleetStatusServiceTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(MqttClient.class, mqttClient);\n+        kernel.getContext().put(IotJobsClient.class, mockIotJobsClient);\n+\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(FleetStatusService.FLEET_STATUS_SERVICE_TOPICS)\n+                    && newState.equals(State.RUNNING)) {\n+                fssRunning.countDown();\n+            }\n+            if (service.getName().equals(DeploymentService.DEPLOYMENT_SERVICE_TOPICS)\n+                    && newState.equals(State.RUNNING)) {\n+                deploymentServiceRunning.countDown();\n+                deploymentService = (DeploymentService) service;\n+                IotJobsHelper iotJobsHelper = deploymentService.getContext().get(IotJobsHelper.class);\n+                iotJobsHelper.setIotJobsClient(mockIotJobsClient);\n+            }\n+        });\n+        // set required instances from context\n+        deviceConfiguration = new DeviceConfiguration(kernel, \"ThingName\", \"dataEndpoint\", \"credEndpoint\",\n+                \"privKeyFilePath\", \"certFilePath\", \"caFilePath\", \"awsRegion\");\n+        kernel.getContext().put(DeviceConfiguration.class, deviceConfiguration);\n+        // pre-load contents to package store\n+        Path localStoreContentPath =\n+                Paths.get(IotJobsFleetStatusServiceTest.class.getResource(\"local_store_content\").toURI());\n+        copyFolderRecursively(localStoreContentPath, kernel.getComponentStorePath(), REPLACE_EXISTING);\n+        kernel.launch();\n+        assertTrue(fssRunning.await(10, TimeUnit.SECONDS));\n+        assertTrue(deploymentServiceRunning.await(10, TimeUnit.SECONDS));\n+    }\n+\n+    @BeforeEach\n+    void beforeEach(ExtensionContext context) {\n+        ignoreExceptionOfType(context, PackageDownloadException.class);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_jobs_deployment_WHEN_deployment_finishes_THEN_status_is_uploaded_to_cloud() throws Exception {\n+        ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n+                GreengrassService.class.getName());\n+        assertNotNull(deviceConfiguration.getThingName());\n+        CountDownLatch fssPublishLatch = new CountDownLatch(1);\n+        logListener = eslm -> {\n+            if (eslm.getEventType() != null && eslm.getEventType().equals(\"fss-status-update-published\")\n+                    && eslm.getMessage().equals(\"Status update published to FSS\")) {\n+                fssPublishLatch.countDown();\n+            }\n+        };\n+        Slf4jLogAdapter.addGlobalListener(logListener);\n+\n+        offerSampleIoTJobsDeployment();\n+        assertTrue(fssPublishLatch.await(60, TimeUnit.SECONDS));\n+        verify(mqttClient, atLeastOnce()).publish(captor.capture());\n+\n+        List<PublishRequest> prs = captor.getAllValues();\n+        Set<String> componentNamesToCheck = new HashSet<String>(){{", "originalCommit": "32035ed214fdad024ff02c164e55f78e125ab99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNzA0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/481#discussion_r496137044", "bodyText": "remove", "author": "MikeDombo", "createdAt": "2020-09-28T18:03:09Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/IotJobsFleetStatusServiceTest.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.status;\n+\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicy;\n+import com.amazonaws.services.evergreen.model.ComponentUpdatePolicyAction;\n+import com.amazonaws.services.evergreen.model.ConfigurationValidationPolicy;\n+import com.aws.greengrass.componentmanager.exceptions.PackageDownloadException;\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.deployment.DeploymentService;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n+import com.aws.greengrass.deployment.IotJobsHelper;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FailureHandlingPolicy;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.deployment.model.PackageInfo;\n+import com.aws.greengrass.integrationtests.BaseITCase;\n+import com.aws.greengrass.lifecyclemanager.GreengrassService;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.logging.impl.GreengrassLogMessage;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.logging.impl.Slf4jLogAdapter;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.PublishRequest;\n+import com.aws.greengrass.status.FleetStatusDetails;\n+import com.aws.greengrass.status.FleetStatusService;\n+import com.aws.greengrass.status.OverallStatus;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.slf4j.event.Level;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.greengrass.util.Utils.copyFolderRecursively;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({GGExtension.class, MockitoExtension.class})\n+public class IotJobsFleetStatusServiceTest extends BaseITCase {\n+    private static final String MOCK_FLEET_CONFIG_ARN =\n+            \"arn:aws:greengrass:us-east-1:12345678910:configuration:thinggroup/group1:1\";\n+    private static final String TEST_JOB_ID_1 = \"TEST_JOB_1\";\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static DeviceConfiguration deviceConfiguration;\n+    private static DeploymentService deploymentService;\n+    private static Kernel kernel;\n+    private Consumer<GreengrassLogMessage> logListener;\n+\n+    @TempDir\n+    static Path rootDir;\n+    @Mock\n+    private MqttClient mqttClient;\n+    @Mock\n+    private IotJobsClient mockIotJobsClient;\n+    @Captor\n+    private ArgumentCaptor<PublishRequest> captor;\n+\n+    @Captor\n+    private ArgumentCaptor<Consumer<UpdateJobExecutionResponse>> jobsAcceptedHandlerCaptor;\n+\n+    @BeforeEach\n+    public void setupKernel() throws IOException, URISyntaxException, DeviceConfigurationException,\n+            InterruptedException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        CountDownLatch fssRunning = new CountDownLatch(1);\n+        CountDownLatch deploymentServiceRunning = new CountDownLatch(1);\n+        LogManager.getConfig().setLevel(Level.DEBUG);\n+        CompletableFuture cf = new CompletableFuture();\n+        cf.complete(null);\n+        when(mockIotJobsClient.PublishUpdateJobExecution(any(UpdateJobExecutionRequest.class),\n+                any(QualityOfService.class))).thenAnswer(invocationOnMock -> {\n+                    verify(mockIotJobsClient, atLeastOnce()).SubscribeToUpdateJobExecutionAccepted(any(),\n+                            eq(QualityOfService.AT_LEAST_ONCE), jobsAcceptedHandlerCaptor.capture());\n+                    Consumer<UpdateJobExecutionResponse> jobResponseConsumer = jobsAcceptedHandlerCaptor.getValue();\n+                    UpdateJobExecutionResponse mockJobExecutionResponse = mock(UpdateJobExecutionResponse.class);\n+                    jobResponseConsumer.accept(mockJobExecutionResponse);\n+                    return cf;\n+                });\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", IotJobsFleetStatusServiceTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(MqttClient.class, mqttClient);\n+        kernel.getContext().put(IotJobsClient.class, mockIotJobsClient);\n+\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(FleetStatusService.FLEET_STATUS_SERVICE_TOPICS)\n+                    && newState.equals(State.RUNNING)) {\n+                fssRunning.countDown();\n+            }\n+            if (service.getName().equals(DeploymentService.DEPLOYMENT_SERVICE_TOPICS)\n+                    && newState.equals(State.RUNNING)) {\n+                deploymentServiceRunning.countDown();\n+                deploymentService = (DeploymentService) service;\n+                IotJobsHelper iotJobsHelper = deploymentService.getContext().get(IotJobsHelper.class);\n+                iotJobsHelper.setIotJobsClient(mockIotJobsClient);\n+            }\n+        });\n+        // set required instances from context\n+        deviceConfiguration = new DeviceConfiguration(kernel, \"ThingName\", \"dataEndpoint\", \"credEndpoint\",\n+                \"privKeyFilePath\", \"certFilePath\", \"caFilePath\", \"awsRegion\");\n+        kernel.getContext().put(DeviceConfiguration.class, deviceConfiguration);\n+        // pre-load contents to package store\n+        Path localStoreContentPath =\n+                Paths.get(IotJobsFleetStatusServiceTest.class.getResource(\"local_store_content\").toURI());\n+        copyFolderRecursively(localStoreContentPath, kernel.getComponentStorePath(), REPLACE_EXISTING);\n+        kernel.launch();\n+        assertTrue(fssRunning.await(10, TimeUnit.SECONDS));\n+        assertTrue(deploymentServiceRunning.await(10, TimeUnit.SECONDS));\n+    }\n+\n+    @BeforeEach\n+    void beforeEach(ExtensionContext context) {\n+        ignoreExceptionOfType(context, PackageDownloadException.class);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_jobs_deployment_WHEN_deployment_finishes_THEN_status_is_uploaded_to_cloud() throws Exception {\n+        ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n+                GreengrassService.class.getName());\n+        assertNotNull(deviceConfiguration.getThingName());\n+        CountDownLatch fssPublishLatch = new CountDownLatch(1);\n+        logListener = eslm -> {\n+            if (eslm.getEventType() != null && eslm.getEventType().equals(\"fss-status-update-published\")\n+                    && eslm.getMessage().equals(\"Status update published to FSS\")) {\n+                fssPublishLatch.countDown();\n+            }\n+        };\n+        Slf4jLogAdapter.addGlobalListener(logListener);\n+\n+        offerSampleIoTJobsDeployment();\n+        assertTrue(fssPublishLatch.await(60, TimeUnit.SECONDS));\n+        verify(mqttClient, atLeastOnce()).publish(captor.capture());\n+\n+        List<PublishRequest> prs = captor.getAllValues();\n+        Set<String> componentNamesToCheck = new HashSet<String>(){{\n+            add(\"CustomerApp\");\n+            add(\"Mosquitto\");\n+            add(\"SafeSystemUpdate\");\n+            add(\"DeploymentService\");\n+            add(\"FleetStatusService\");\n+            add(\"main\");\n+            add(\"aws.greengrass.ipc.cli\");\n+            add(\"TelemetryAgent\");\n+        }};\n+        for (PublishRequest pr : prs) {\n+            try {\n+                FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(pr.getPayload(),\n+                        FleetStatusDetails.class);\n+                assertEquals(\"ThingName\", fleetStatusDetails.getThing());\n+                assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.getOverallStatus());\n+                assertEquals(0, fleetStatusDetails.getSequenceNumber());\n+                assertNotNull(fleetStatusDetails.getComponentStatusDetails());\n+                assertEquals(componentNamesToCheck.size(), fleetStatusDetails.getComponentStatusDetails().size());\n+                fleetStatusDetails.getComponentStatusDetails().forEach(componentStatusDetails -> {\n+                    componentNamesToCheck.remove(componentStatusDetails.getComponentName());\n+                    if (componentStatusDetails.getComponentName().equals(\"CustomerApp\")) {\n+                        assertEquals(\"1.0.0\", componentStatusDetails.getVersion());\n+                        assertEquals(1, componentStatusDetails.getFleetConfigArns().size());\n+                        assertEquals(MOCK_FLEET_CONFIG_ARN, componentStatusDetails.getFleetConfigArns().get(0));\n+                        assertEquals(State.FINISHED, componentStatusDetails.getState());\n+                    } else if (componentStatusDetails.getComponentName().equals(\"Mosquitto\")) {\n+                        assertEquals(\"1.0.0\", componentStatusDetails.getVersion());\n+                        assertEquals(1, componentStatusDetails.getFleetConfigArns().size());\n+                        assertEquals(MOCK_FLEET_CONFIG_ARN, componentStatusDetails.getFleetConfigArns().get(0));\n+                        assertEquals(State.RUNNING, componentStatusDetails.getState());\n+                    }\n+                });\n+            } catch (UnrecognizedPropertyException ignored) { }\n+        }\n+        assertEquals(0, componentNamesToCheck.size());\n+    }\n+\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")", "originalCommit": "32035ed214fdad024ff02c164e55f78e125ab99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNzQ4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/481#discussion_r496137481", "bodyText": "remove public", "author": "MikeDombo", "createdAt": "2020-09-28T18:04:00Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.status;\n+\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.deployment.DeploymentService;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.integrationtests.BaseITCase;\n+import com.aws.greengrass.lifecyclemanager.GreengrassService;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.logging.impl.GreengrassLogMessage;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.logging.impl.Slf4jLogAdapter;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.PublishRequest;\n+import com.aws.greengrass.status.FleetStatusDetails;\n+import com.aws.greengrass.status.FleetStatusService;\n+import com.aws.greengrass.status.OverallStatus;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.slf4j.event.Level;\n+\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith({GGExtension.class, MockitoExtension.class})\n+public class PeriodicFleetStatusServiceTest extends BaseITCase {", "originalCommit": "32035ed214fdad024ff02c164e55f78e125ab99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNzU0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/481#discussion_r496137543", "bodyText": "same", "author": "MikeDombo", "createdAt": "2020-09-28T18:04:06Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.status;\n+\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.deployment.DeploymentService;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.integrationtests.BaseITCase;\n+import com.aws.greengrass.lifecyclemanager.GreengrassService;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.logging.impl.GreengrassLogMessage;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.logging.impl.Slf4jLogAdapter;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.PublishRequest;\n+import com.aws.greengrass.status.FleetStatusDetails;\n+import com.aws.greengrass.status.FleetStatusService;\n+import com.aws.greengrass.status.OverallStatus;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.slf4j.event.Level;\n+\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith({GGExtension.class, MockitoExtension.class})\n+public class PeriodicFleetStatusServiceTest extends BaseITCase {\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static DeviceConfiguration deviceConfiguration;\n+    private static Kernel kernel;\n+    private Consumer<GreengrassLogMessage> logListener;\n+\n+    @TempDir\n+    static Path rootDir;\n+    @Mock\n+    private MqttClient mqttClient;\n+    @Captor\n+    private ArgumentCaptor<PublishRequest> captor;\n+\n+    @BeforeEach\n+    public void setupKernel() throws DeviceConfigurationException, InterruptedException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        CountDownLatch fssRunning = new CountDownLatch(1);\n+        CountDownLatch deploymentServiceRunning = new CountDownLatch(1);\n+        LogManager.getConfig().setLevel(Level.DEBUG);", "originalCommit": "32035ed214fdad024ff02c164e55f78e125ab99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bc55d09c1e80b87edb82ba89f240a293db2725dc", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bc55d09c1e80b87edb82ba89f240a293db2725dc", "message": "Merge branch 'master' into addIntegTestsForFss", "committedDate": "2020-09-28T18:15:34Z", "type": "commit"}, {"oid": "481faa6c92d93d9a206696f6bdcb7d30557e125f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/481faa6c92d93d9a206696f6bdcb7d30557e125f", "message": "Address PR comments.", "committedDate": "2020-09-28T18:22:32Z", "type": "commit"}]}