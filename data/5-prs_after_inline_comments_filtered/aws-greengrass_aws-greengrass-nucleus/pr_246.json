{"pr_number": 246, "pr_title": "Migrate to new PMS client, add E2E tests", "pr_createdAt": "2020-05-18T17:22:12Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NDMzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r426784333", "bodyText": "Given our expected customer use case, I don't think that the default client will ever work because we don't expect customers to be setting the AWS environment variables. Can you just remove the default and then add our own values from the config store to L50?", "author": "MikeDombo", "createdAt": "2020-05-18T17:26:59Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -35,21 +35,21 @@ public GreengrassPackageServiceClientFactory(\n         if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n             // Initialize default client, client builder determines endpoint configuration\n             // Will try to use default credential provider and environment region configuration\n-            logger.atInfo(\"initialize-pms-client\")\n+            logger.atInfo(\"initialize-cms-client\")\n                   .addKeyValue(\"service-endpoint\", \"default\")\n                   .addKeyValue(\"service-region\", \"default\")\n                   .log();\n-            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+            this.cmsClient = AWSGreengrassComponentManagementClientBuilder.defaultClient();", "originalCommit": "967eda08ae5903214cea3b9495487d9dfc7d67d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NjQ4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r426786485", "bodyText": "Yes, going to standardize on region config always being present in context, preferably from config.yaml as we discussed.", "author": "chaurah", "createdAt": "2020-05-18T17:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NDMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NTA4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r426785082", "bodyText": "How is artifact name defined in the recipe? Right now the artifacts is just a list, should it become a map with names?", "author": "MikeDombo", "createdAt": "2020-05-18T17:28:20Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -70,17 +70,20 @@ HttpURLConnection connect(URL url) throws IOException {\n         return (HttpURLConnection) url.openConnection();\n     }\n \n-    String getArtifactDownloadURL(String packageArn, String artifactName) throws PackageDownloadException {\n-        GetArtifactRequest getArtifactRequest = new GetArtifactRequest().withArtifactName(artifactName)\n-                                                                        .withPackageARN(packageArn);\n+    String getArtifactDownloadURL(PackageIdentifier packageIdentifier, String artifactName)", "originalCommit": "967eda08ae5903214cea3b9495487d9dfc7d67d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4ODg5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r426788897", "bodyText": "Based on the way the recipe is defined, if it's a greengrass:(something) entry in the list, the something is artifact name.\nNot entirely happy with that format to be honest but we can iterate on that later on as well.\nEg: Monitoring service test package", "author": "chaurah", "createdAt": "2020-05-18T17:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NTA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MDIxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r426790211", "bodyText": "OK, that doesn't make sense to me; the \"greengrass\" part of that isn't the \"name\" of the artifact, but the protocol/type used to download it. There should be the possibility to have multiple artifacts including multiple artifacts with \"greengrass:\".", "author": "MikeDombo", "createdAt": "2020-05-18T17:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NTA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MjE3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r426792173", "bodyText": "Nevermind, you mean that the stuff after the \"greengrass:\" is the artifact name. That makes sense.", "author": "MikeDombo", "createdAt": "2020-05-18T17:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NTA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwMDAzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r426800039", "bodyText": "I typed greengrass:something with the something in < brackets, got formatted out it seems :P fixing the comment above", "author": "chaurah", "createdAt": "2020-05-18T17:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NTA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3OTQwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r428179406", "bodyText": "\ud83d\ude02", "author": "leaf94", "createdAt": "2020-05-20T17:18:31Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -19,7 +19,7 @@\n \n     private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n \n-    private final AWSGreengrassPackageManagement pmsClient;\n+    private final AWSGreengrassComponentManagement cmsClient;", "originalCommit": "967eda08ae5903214cea3b9495487d9dfc7d67d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4f2f6aa61674569654d9a0a69a5912617fdbacf9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4f2f6aa61674569654d9a0a69a5912617fdbacf9", "message": "Migrate to new PMS client, add E2E tests", "committedDate": "2020-05-22T15:24:18Z", "type": "forcePushed"}, {"oid": "1976130640de7a8d4d763c517f31cf717e532709", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1976130640de7a8d4d763c517f31cf717e532709", "message": "Migrate to new PMS client, add E2E tests", "committedDate": "2020-05-22T16:22:29Z", "type": "forcePushed"}, {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "message": "Migrate to new PMS client, add E2E tests", "committedDate": "2020-05-22T16:32:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NzEwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357100", "bodyText": "this can error out, so maybe use try finally to make sure that both the kernel and component are cleaned no matter what.", "author": "MikeDombo", "createdAt": "2020-05-22T16:58:30Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerIntegrationTest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        kernel.shutdown();", "originalCommit": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NzUwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357507", "bodyText": "do they only have east right now? Our tests are running in west.", "author": "MikeDombo", "createdAt": "2020-05-22T16:59:24Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");", "originalCommit": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NzM0Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431267346", "bodyText": "Only us-east-1 for beta. For v1, we're linked to IoT for data plane and they only have beta in us-east-1. Not sure what we're doing for v2 in terms of other beta regions.", "author": "chaurah", "createdAt": "2020-05-27T16:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NzUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NzY1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357653", "bodyText": "if order doesn't matter, then remove the @Order", "author": "MikeDombo", "createdAt": "2020-05-22T16:59:48Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerIntegrationTest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        kernel.shutdown();\n+        DeleteComponentRequest deleteComponentRequest\n+                = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                                              .withComponentVersion(\"1.0.0\");\n+        DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+        assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+    }\n+\n+    @Test\n+    @Order(1)", "originalCommit": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1Nzg2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357868", "bodyText": "you can use hamcrest's file matcher for file existing: https://www.baeldung.com/hamcrest-file-matchers", "author": "MikeDombo", "createdAt": "2020-05-22T17:00:20Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerIntegrationTest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        kernel.shutdown();\n+        DeleteComponentRequest deleteComponentRequest\n+                = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                                              .withComponentVersion(\"1.0.0\");\n+        DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+        assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        PackageIdentifier pkgIdt\n+                = new PackageIdentifier(\"KernelIntegTest\", new Semver(\"1.0.0\", SemverType.NPM));\n+        List<PackageIdentifier> pkgList = new ArrayList<>();\n+        pkgList.add(pkgIdt);\n+        Future<Void> testFuture = packageManager.preparePackages(pkgList);\n+        testFuture.get();//10, TimeUnit.SECONDS);\n+\n+        assertTrue(Files.exists(packageStorePath));\n+        assertTrue(Files.exists(packageStorePath.resolve(RECIPE_DIRECTORY)));\n+        assertTrue(Files.exists(packageStorePath.resolve(ARTIFACT_DIRECTORY)));\n+\n+        assertTrue(Files.exists(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"KernelIntegTest-1.0.0.yaml\")));\n+\n+        assertTrue(Files.exists(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\")));\n+        assertTrue(Files.exists(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\")));\n+\n+        assertTrue(Files.exists(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\")", "originalCommit": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1Nzk3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357973", "bodyText": "always have a timeout.", "author": "MikeDombo", "createdAt": "2020-05-22T17:00:35Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerIntegrationTest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        kernel.shutdown();\n+        DeleteComponentRequest deleteComponentRequest\n+                = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                                              .withComponentVersion(\"1.0.0\");\n+        DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+        assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        PackageIdentifier pkgIdt\n+                = new PackageIdentifier(\"KernelIntegTest\", new Semver(\"1.0.0\", SemverType.NPM));\n+        List<PackageIdentifier> pkgList = new ArrayList<>();\n+        pkgList.add(pkgIdt);\n+        Future<Void> testFuture = packageManager.preparePackages(pkgList);\n+        testFuture.get();//10, TimeUnit.SECONDS);", "originalCommit": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDE5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429360193", "bodyText": "this seems odd. Why doesn't the metadata from the cloud include the declared dependencies and version requirements?", "author": "MikeDombo", "createdAt": "2020-05-22T17:05:53Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -29,22 +38,40 @@\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement) {\n+        ListComponentsRequest listComponentsRequest =\n+                new ListComponentsRequest().withComponentName(packageName)\n+                                           .withComponentVersionConstraint(versionRequirement.toString());\n+        ListComponentsResult listComponentsResult = evgPmsClient.listComponents(listComponentsRequest);\n+        List<ComponentSelectedMetadata> componentSelectedMetadataList = listComponentsResult.getComponents();\n+        return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+            PackageIdentifier packageIdentifier\n+                    = new PackageIdentifier(componentMetadata.getComponentName(),\n+                                            new Semver(componentMetadata.getComponentVersion()),\n+                                            componentMetadata.getComponentARN());\n+            // Dependencies map is unused as of now, there's no point in requesting dependencies for\n+            // ALL package versions at this step, will be filled in later by package manager", "originalCommit": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDQ0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429360445", "bodyText": "this seems error prone, given that the map is always empty. Perhaps you should change the return value to just be the package identifier?", "author": "MikeDombo", "createdAt": "2020-05-22T17:06:32Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -29,22 +38,40 @@\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement) {\n+        ListComponentsRequest listComponentsRequest =\n+                new ListComponentsRequest().withComponentName(packageName)\n+                                           .withComponentVersionConstraint(versionRequirement.toString());\n+        ListComponentsResult listComponentsResult = evgPmsClient.listComponents(listComponentsRequest);\n+        List<ComponentSelectedMetadata> componentSelectedMetadataList = listComponentsResult.getComponents();\n+        return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+            PackageIdentifier packageIdentifier\n+                    = new PackageIdentifier(componentMetadata.getComponentName(),\n+                                            new Semver(componentMetadata.getComponentVersion()),\n+                                            componentMetadata.getComponentARN());\n+            // Dependencies map is unused as of now, there's no point in requesting dependencies for\n+            // ALL package versions at this step, will be filled in later by package manager\n+            return new PackageMetadata(packageIdentifier, Collections.emptyMap());", "originalCommit": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MTAwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429371005", "bodyText": "Agree. Since we are just getting a list of PackageIdentifiers.", "author": "leaf94", "createdAt": "2020-05-22T17:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNDM3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429404375", "bodyText": "I tried to go through and change it, but the DependencyResolver does use the map, so I don't think we can just remove it. Seems like the cloud should give us more info.", "author": "MikeDombo", "createdAt": "2020-05-22T18:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5NTQ2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429395461", "bodyText": "We have a method in the platform resolver to resolve the platform. You don't need to do this yourself.", "author": "MikeDombo", "createdAt": "2020-05-22T18:28:38Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -136,15 +138,13 @@ private void preparePackage(PackageIdentifier packageIdentifier)\n         logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n         try {\n             PackageRecipe pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n-            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n-                try {\n-                    return new URI(artifactStr);\n-                } catch (URISyntaxException e) {\n-                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n-                    logger.atError().setCause(e).log(message);\n-                    throw new RuntimeException(message, e);\n-                }\n-            }).collect(Collectors.toList());\n+\n+            final Set<String> resolvedPlatforms = PlatformResolver.RANKS.get().keySet();", "originalCommit": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a0b1c84a184b1aabb6332841e78aed4b45b204e2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a0b1c84a184b1aabb6332841e78aed4b45b204e2", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents", "committedDate": "2020-05-22T19:23:21Z", "type": "forcePushed"}, {"oid": "77c49475ee99270e289a43e44f0e3bb7ace53e51", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/77c49475ee99270e289a43e44f0e3bb7ace53e51", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents", "committedDate": "2020-05-22T19:38:57Z", "type": "forcePushed"}, {"oid": "28f1426aa5136efbe3d19a4a7650aee29cda48e4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/28f1426aa5136efbe3d19a4a7650aee29cda48e4", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents", "committedDate": "2020-05-22T19:41:15Z", "type": "forcePushed"}, {"oid": "28f1426aa5136efbe3d19a4a7650aee29cda48e4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/28f1426aa5136efbe3d19a4a7650aee29cda48e4", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents", "committedDate": "2020-05-22T19:41:15Z", "type": "forcePushed"}, {"oid": "4913fcea7e5f524d9434a93dff1b6d526e49d740", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4913fcea7e5f524d9434a93dff1b6d526e49d740", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents", "committedDate": "2020-05-23T04:30:03Z", "type": "forcePushed"}, {"oid": "8277bc33f05ac96a1149e59a586dcfe72e3b5c0f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8277bc33f05ac96a1149e59a586dcfe72e3b5c0f", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents", "committedDate": "2020-05-26T23:18:19Z", "type": "forcePushed"}, {"oid": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cd62b2b3e3d6e70eaf3222e61fe583bf97055c77", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents", "committedDate": "2020-05-26T23:22:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2MTg5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r430761891", "bodyText": "It's generally not good practice to both log stack trace & throw the error", "author": "ShirleyZheng92", "createdAt": "2020-05-26T23:28:27Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,92 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement) {\n+        FindComponentVersionsByPlatformRequest findComponentRequest =\n+                new FindComponentVersionsByPlatformRequest().withComponentName(packageName)\n+                        .withVersionConstraint(versionRequirement.toString())\n+                        .withPlatform(PlatformResolver.getPlatform());\n+        FindComponentVersionsByPlatformResult findComponentResult =\n+                evgPmsClient.findComponentVersionsByPlatform(findComponentRequest);\n+        List<ResolvedComponent> componentSelectedMetadataList = findComponentResult.getComponents();\n+\n+        return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+            PackageIdentifier packageIdentifier = new PackageIdentifier(componentMetadata.getComponentName(),\n+                    new Semver(componentMetadata.getComponentVersion()), componentMetadata.getComponentARN());\n+            return new PackageMetadata(packageIdentifier, componentMetadata.getDependencies().stream().collect(\n+                    Collectors.toMap(ComponentNameVersion::getComponentName,\n+                            ComponentNameVersion::getComponentVersionConstraint)));\n+        }).collect(Collectors.toList());\n     }\n \n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n             throws PackageDownloadException, PackageLoadingException {\n-        GetPackageRequest getPackageRequest =\n-                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n-                                       .withType(RecipeFormatType.YAML);\n+        GetComponentRequest getComponentRequest =\n+                new GetComponentRequest().withComponentName(packageIdentifier.getName())\n+                        .withComponentVersion(packageIdentifier.getVersion().toString())\n+                        .withType(RecipeFormatType.YAML);\n \n-        GetPackageResult getPackageResult;\n+        GetComponentResult getPackageResult;\n         try {\n-            getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            getPackageResult = evgPmsClient.getComponent(getComponentRequest);\n         } catch (AmazonClientException e) {\n             // TODO: This should be expanded to handle various types of retryable/non-retryable exceptions\n-            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n-                                            packageIdentifier.getArn());\n+            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT, packageIdentifier.getArn());\n             logger.atError(\"download-package-from-greengrass-repo\", e)\n-                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n-                  .addKeyValue(\"errorMessage\", errorMsg)\n-                  .log();\n+                    .addKeyValue(\"packageIdentifier\", packageIdentifier).addKeyValue(\"errorMessage\", errorMsg).log();\n             throw new PackageDownloadException(errorMsg, e);\n         }\n \n         try {\n             ByteBuffer recipeBuf = getPackageResult.getRecipe();\n-            return RECIPE_SERIALIZER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n-                                               PackageRecipe.class);\n+            return RECIPE_SERIALIZER.readValue(new ByteBufferBackedInputStream(recipeBuf), PackageRecipe.class);\n         } catch (IOException e) {\n-            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n-                                            packageIdentifier.getArn());\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT, packageIdentifier.getArn());\n             logger.atError(\"download-package-from-greengrass-repo\", e)", "originalCommit": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MDIwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431270203", "bodyText": "The exception is the auto-generated exception from the SDK, I felt it's best to have the required information up front on which package download failed.", "author": "chaurah", "createdAt": "2020-05-27T16:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2MTg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDk4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431920980", "bodyText": "We're not losing anything because you are wrapping the original error, so no information is lost.", "author": "MikeDombo", "createdAt": "2020-05-28T15:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2MTg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2Mjc3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r430762775", "bodyText": "General question, will we support any format other than yaml when downloading a pkg recipe?", "author": "ShirleyZheng92", "createdAt": "2020-05-26T23:31:30Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,92 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement) {\n+        FindComponentVersionsByPlatformRequest findComponentRequest =\n+                new FindComponentVersionsByPlatformRequest().withComponentName(packageName)\n+                        .withVersionConstraint(versionRequirement.toString())\n+                        .withPlatform(PlatformResolver.getPlatform());\n+        FindComponentVersionsByPlatformResult findComponentResult =\n+                evgPmsClient.findComponentVersionsByPlatform(findComponentRequest);\n+        List<ResolvedComponent> componentSelectedMetadataList = findComponentResult.getComponents();\n+\n+        return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+            PackageIdentifier packageIdentifier = new PackageIdentifier(componentMetadata.getComponentName(),\n+                    new Semver(componentMetadata.getComponentVersion()), componentMetadata.getComponentARN());\n+            return new PackageMetadata(packageIdentifier, componentMetadata.getDependencies().stream().collect(\n+                    Collectors.toMap(ComponentNameVersion::getComponentName,\n+                            ComponentNameVersion::getComponentVersionConstraint)));\n+        }).collect(Collectors.toList());\n     }\n \n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)", "originalCommit": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MTM4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431271382", "bodyText": "Currently the service APIs support YAML and JSON. But the api allows us to specify which format we want. Basically the service can return in any supported format we want. Didn't seem to make any sense to have multiple paths based on format on the kernel side if the service already handles this so I went with YAML for all requests.", "author": "chaurah", "createdAt": "2020-05-27T16:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2Mjc3NQ=="}], "type": "inlineReview"}, {"oid": "8635bf8bf01652a6cca8734b86e0a30d81df3ba2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8635bf8bf01652a6cca8734b86e0a30d81df3ba2", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents", "committedDate": "2020-05-27T16:06:35Z", "type": "forcePushed"}, {"oid": "d28d73e8ba49f9e431c7b9a99242e107859be13f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d28d73e8ba49f9e431c7b9a99242e107859be13f", "message": "Update region configuration using DeviceConfiguration class", "committedDate": "2020-05-27T17:40:29Z", "type": "forcePushed"}, {"oid": "4975c4767a57ba029cc220e8f14bd42fa60979cf", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4975c4767a57ba029cc220e8f14bd42fa60979cf", "message": "Update region configuration using DeviceConfiguration class", "committedDate": "2020-05-27T21:01:16Z", "type": "forcePushed"}, {"oid": "4409ee185cb797b866223aa9bdb8e8e52d026670", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4409ee185cb797b866223aa9bdb8e8e52d026670", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-27T21:24:46Z", "type": "forcePushed"}, {"oid": "221ff248499b603a1d22462fc35422fbfea2d100", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/221ff248499b603a1d22462fc35422fbfea2d100", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-27T22:18:35Z", "type": "forcePushed"}, {"oid": "25f97ad867bab4430d2a96d8e9a18856642b32d5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/25f97ad867bab4430d2a96d8e9a18856642b32d5", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-27T22:48:08Z", "type": "forcePushed"}, {"oid": "fb6d70d3e5e12b6c52427682949d5cfc160e786a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb6d70d3e5e12b6c52427682949d5cfc160e786a", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-27T23:23:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTAyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431501024", "bodyText": "I made a few changes to e2e tests. Could you move this method to BaseE2ETestCase? DeviceConfiguration should already be updated", "author": "hui-yang", "createdAt": "2020-05-27T23:34:17Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -317,6 +317,16 @@ public static void updateKernelConfigWithIotConfiguration(Kernel kernel, Utils.T\n         config.getIotCredentialEndpoint().withValue(thing.credEndpoint);\n     }\n \n+    // Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+    public static void updateKernelConfigWithComponentManagementServiceConfiguration(Kernel kernel)", "originalCommit": "fb6d70d3e5e12b6c52427682949d5cfc160e786a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMzM4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431503388", "bodyText": "Just rebased against those changes. I think this should move to a Utils class under integrationtests/utils since it's also used in integration tests. Thoughts?", "author": "chaurah", "createdAt": "2020-05-27T23:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwODU0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431508549", "bodyText": "I overlooked that. It makes more sense to keep it here then.", "author": "hui-yang", "createdAt": "2020-05-27T23:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTAyNA=="}], "type": "inlineReview"}, {"oid": "0d7bb22982b7a75b0f60745d6bfdf63a08fbfdda", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0d7bb22982b7a75b0f60745d6bfdf63a08fbfdda", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-28T14:02:42Z", "type": "forcePushed"}, {"oid": "b8a91db3db232ac258bcc54b4235ebb47c1daf25", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b8a91db3db232ac258bcc54b4235ebb47c1daf25", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-28T14:48:34Z", "type": "forcePushed"}, {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/62d7cbfc18f74007d3335e7c98eb50dd3a263754", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-28T14:52:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxODI2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431918264", "bodyText": "What's the plan with the commented out stuff?", "author": "MikeDombo", "createdAt": "2020-05-28T15:17:26Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.packagemanager;\n+\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import com.aws.iot.evergreen.integrationtests.e2e.BaseE2ETestCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.io.FileMatchers.anExistingDirectory;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@ExtendWith(EGExtension.class)\n+@Tag(\"E2E\")\n+class PackageManagerE2ETest extends BaseE2ETestCase {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerE2ETest.class.getResource(\"onlyMain.yaml\").toString());\n+        Utils.updateKernelConfigWithComponentManagementServiceConfiguration(kernel);\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =", "originalCommit": "62d7cbfc18f74007d3335e7c98eb50dd3a263754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNjMyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431926320", "bodyText": "Not in plan for M1 at the moment. We'll revisit this when service adds code to the delete API, it's just a stub at the moment that always returns 200", "author": "chaurah", "createdAt": "2020-05-28T15:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxODI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMDc5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432000791", "bodyText": "It's good we have already thought about the future... But I also recall what Feng mentioned before about this - Let's not have big chunk of commented code in the code base since it will confuse others... Since we are going to add code incrementally, I'd say it's perfectly fine to add them just in time when we can do it.\nNo need to remove this since we already have it but just in the future...", "author": "leaf94", "createdAt": "2020-05-28T17:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxODI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMTkwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432531908", "bodyText": "I know that, this was a specific case of me creating a test package that is being validated in the test case. In case the service side decides to wipe out their DB for example, or they set up a new prod endpoint, people need to be able to recreate the package. It'll be hard if they have to guess at how things were working before basically.", "author": "chaurah", "createdAt": "2020-05-29T14:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxODI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTA4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431919087", "bodyText": "Need more testing than just this. Should also be testing that dependency resolution works because that causes the new cms also.", "author": "MikeDombo", "createdAt": "2020-05-28T15:18:34Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.packagemanager;\n+\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import com.aws.iot.evergreen.integrationtests.e2e.BaseE2ETestCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.io.FileMatchers.anExistingDirectory;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@ExtendWith(EGExtension.class)\n+@Tag(\"E2E\")\n+class PackageManagerE2ETest extends BaseE2ETestCase {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerE2ETest.class.getResource(\"onlyMain.yaml\").toString());\n+        Utils.updateKernelConfigWithComponentManagementServiceConfiguration(kernel);\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerE2ETest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        try {\n+            kernel.shutdown();\n+        } finally {\n+            DeleteComponentRequest deleteComponentRequest\n+                    = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                    .withComponentVersion(\"1.0.0\");\n+            DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+            assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_package_identifier_WHEN_request_package_from_cms_service_THEN_package_downloaded_with_artifacts()", "originalCommit": "62d7cbfc18f74007d3335e7c98eb50dd3a263754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMjAwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432532008", "bodyText": "Added a test case for that as well", "author": "chaurah", "createdAt": "2020-05-29T14:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDI5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431920298", "bodyText": "Agree with earlier comments we should not both log and throw.", "author": "MikeDombo", "createdAt": "2020-05-28T15:20:19Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,106 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)\n+            throws PackageDownloadException {\n+        FindComponentVersionsByPlatformRequest findComponentRequest =\n+                new FindComponentVersionsByPlatformRequest().withComponentName(packageName)\n+                        .withVersionConstraint(versionRequirement.toString())\n+                        .withPlatform(PlatformResolver.getPlatform());\n+\n+        try {\n+            FindComponentVersionsByPlatformResult findComponentResult =\n+                    evgPmsClient.findComponentVersionsByPlatform(findComponentRequest);\n+\n+            List<ResolvedComponent> componentSelectedMetadataList = findComponentResult.getComponents();\n+\n+            return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+                PackageIdentifier packageIdentifier\n+                        = new PackageIdentifier(componentMetadata.getComponentName(),\n+                                                new Semver(componentMetadata.getComponentVersion()),\n+                                                componentMetadata.getComponentARN());\n+                return new PackageMetadata(packageIdentifier, componentMetadata.getDependencies().stream().collect(\n+                        Collectors.toMap(ComponentNameVersion::getComponentName,\n+                                         ComponentNameVersion::getComponentVersionConstraint)));\n+            }).collect(Collectors.toList());\n+        } catch (AmazonClientException e) {\n+            // TODO: This should be expanded to handle various types of retryable/non-retryable exceptions\n+            logger.atError(\"download-package-from-greengrass-repo\", e)", "originalCommit": "62d7cbfc18f74007d3335e7c98eb50dd3a263754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNzQzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431927437", "bodyText": "Updating", "author": "chaurah", "createdAt": "2020-05-28T15:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMTY0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432001643", "bodyText": "nit: since you renamed, probably change the this.pvgPmsClient as well...", "author": "leaf94", "createdAt": "2020-05-28T17:24:15Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,106 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();", "originalCommit": "62d7cbfc18f74007d3335e7c98eb50dd3a263754", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMjU0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432002543", "bodyText": "If the SDK doesn't log automatically, log the request and response since we will need them for debugging issues with CMS interactions.", "author": "leaf94", "createdAt": "2020-05-28T17:25:40Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,106 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)\n+            throws PackageDownloadException {\n+        FindComponentVersionsByPlatformRequest findComponentRequest =\n+                new FindComponentVersionsByPlatformRequest().withComponentName(packageName)\n+                        .withVersionConstraint(versionRequirement.toString())\n+                        .withPlatform(PlatformResolver.getPlatform());\n+\n+        try {\n+            FindComponentVersionsByPlatformResult findComponentResult =\n+                    evgPmsClient.findComponentVersionsByPlatform(findComponentRequest);", "originalCommit": "62d7cbfc18f74007d3335e7c98eb50dd3a263754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNjAzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432016031", "bodyText": "Automatically logged :)", "author": "chaurah", "createdAt": "2020-05-28T17:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMjU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4MTE3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432181174", "bodyText": "Question. Is this package \"KernelIntegTest\" actually downloaded from CMS?", "author": "hui-yang", "createdAt": "2020-05-28T23:38:23Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.packagemanager;\n+\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import com.aws.iot.evergreen.integrationtests.e2e.BaseE2ETestCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.io.FileMatchers.anExistingDirectory;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@ExtendWith(EGExtension.class)\n+@Tag(\"E2E\")\n+class PackageManagerE2ETest extends BaseE2ETestCase {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerE2ETest.class.getResource(\"onlyMain.yaml\").toString());\n+        Utils.updateKernelConfigWithComponentManagementServiceConfiguration(kernel);\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerE2ETest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        try {\n+            kernel.shutdown();\n+        } finally {\n+            DeleteComponentRequest deleteComponentRequest\n+                    = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                    .withComponentVersion(\"1.0.0\");\n+            DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+            assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_package_identifier_WHEN_request_package_from_cms_service_THEN_package_downloaded_with_artifacts()\n+            throws Exception {\n+        PackageIdentifier pkgIdt\n+                = new PackageIdentifier(\"KernelIntegTest\", new Semver(\"1.0.0\", SemverType.NPM));\n+        List<PackageIdentifier> pkgList = new ArrayList<>();\n+        pkgList.add(pkgIdt);\n+        Future<Void> testFuture = packageManager.preparePackages(pkgList);", "originalCommit": "62d7cbfc18f74007d3335e7c98eb50dd3a263754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMjM2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432532366", "bodyText": "yes, the package is coming from CMS.", "author": "chaurah", "createdAt": "2020-05-29T14:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4MTE3NA=="}], "type": "inlineReview"}, {"oid": "15efc7135d998a15b3443ffeb57fa506c2414324", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/15efc7135d998a15b3443ffeb57fa506c2414324", "message": "Migrate to new PMS client, add E2E tests", "committedDate": "2020-05-29T13:32:18Z", "type": "commit"}, {"oid": "0b651abf5073c784d498850ce9ab7e6d31c3cea4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0b651abf5073c784d498850ce9ab7e6d31c3cea4", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents", "committedDate": "2020-05-29T13:32:18Z", "type": "commit"}, {"oid": "a96b93e804588717dcd8b0485b57f72e4abf0c8a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a96b93e804588717dcd8b0485b57f72e4abf0c8a", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-29T14:29:07Z", "type": "forcePushed"}, {"oid": "420dd2078451959cc6b75abea67d06fe49a31a02", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/420dd2078451959cc6b75abea67d06fe49a31a02", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-29T15:21:24Z", "type": "forcePushed"}, {"oid": "711ce43c1c018d9ebd789310b65dfe1486ae1a5e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/711ce43c1c018d9ebd789310b65dfe1486ae1a5e", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-29T16:23:50Z", "type": "forcePushed"}, {"oid": "479df77bb20336ca2e21013f7d26352b2b96ab5d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/479df77bb20336ca2e21013f7d26352b2b96ab5d", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-29T16:47:36Z", "type": "commit"}, {"oid": "479df77bb20336ca2e21013f7d26352b2b96ab5d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/479df77bb20336ca2e21013f7d26352b2b96ab5d", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests", "committedDate": "2020-05-29T16:47:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0Mjc2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432642764", "bodyText": "We only need to set region in one of these methods right? Or is this intentional?", "author": "hui-yang", "createdAt": "2020-05-29T17:47:07Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -60,7 +60,9 @@ private void launchKernel(String configFile) throws IOException, InterruptedExce\n         kernel = new Kernel()\n                 .parseArgs(\"-i\", DeploymentE2ETest.class.getResource(configFile).toString(), \"-r\", tempRootDir\n                         .toAbsolutePath().toString());\n+\n         deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, BETA_REGION.toString());\n+        deviceProvisioningHelper.updateKernelConfigWithCMSConfiguration(kernel, BETA_REGION.toString());", "originalCommit": "479df77bb20336ca2e21013f7d26352b2b96ab5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NTk4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432645987", "bodyText": "Intentional, I would have had to refactor the provisioning helper, it doesn't store the current region at the moment. Didn't want to further increase the size of this PR.", "author": "chaurah", "createdAt": "2020-05-29T17:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0Mjc2NA=="}], "type": "inlineReview"}, {"oid": "c4c7d300af0b7eae33ded960ae28e3f1bd787afa", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c4c7d300af0b7eae33ded960ae28e3f1bd787afa", "message": "Merge branch 'master' into pms-e2e-test", "committedDate": "2020-05-29T17:49:20Z", "type": "commit"}, {"oid": "8d54738375d688f8c2b610a6047edb714694686a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8d54738375d688f8c2b610a6047edb714694686a", "message": "Merge branch 'master' into pms-e2e-test", "committedDate": "2020-05-29T19:24:00Z", "type": "commit"}]}