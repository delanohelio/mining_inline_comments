{"pr_number": 540, "pr_title": "Cleanup websocket proxy, add timeout to event loop shutdown future to\u2026", "pr_createdAt": "2020-10-16T23:22:34Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MTY0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506761649", "bodyText": "Do you think it's worth giving a hint about the potential permissions required? Maybe link to the same app?", "author": "philcali", "createdAt": "2020-10-16T23:29:25Z", "path": "src/main/java/com/aws/greengrass/iot/IotConnectionManager.java", "diffHunk": "@@ -102,11 +102,13 @@ public void close() {\n         resolver.close();\n         eventLoopGroup.close();\n         try {\n-            eventLoopGroup.getShutdownCompleteFuture().get();\n+            eventLoopGroup.getShutdownCompleteFuture().get(2, TimeUnit.SECONDS);\n         } catch (InterruptedException e) {\n             Thread.currentThread().interrupt();\n         } catch (ExecutionException e) {\n             LOGGER.atError().log(\"Error shutting down event loop\", e);\n+        } catch (TimeoutException e) {\n+            LOGGER.atError().log(\"Timed out shutting down event loop\", e);", "originalCommit": "10ce33dca572c18ee608479a63adedfe32da61e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MTk3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506761978", "bodyText": "This isn't caused by permissions, it happens even when the connection is successful", "author": "MikeDombo", "createdAt": "2020-10-16T23:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MjgzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506762832", "bodyText": "I see. I was looking at the log, and my eyeballs jammed the two traces together. I really shouldn't be working right now.", "author": "philcali", "createdAt": "2020-10-16T23:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MTY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MjUzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506762539", "bodyText": "Extract 2 to a constant. Also, why 2 seconds? How long should it take?", "author": "fengwang666", "createdAt": "2020-10-16T23:33:32Z", "path": "src/main/java/com/aws/greengrass/iot/IotConnectionManager.java", "diffHunk": "@@ -102,11 +102,13 @@ public void close() {\n         resolver.close();\n         eventLoopGroup.close();\n         try {\n-            eventLoopGroup.getShutdownCompleteFuture().get();\n+            eventLoopGroup.getShutdownCompleteFuture().get(2, TimeUnit.SECONDS);", "originalCommit": "10ce33dca572c18ee608479a63adedfe32da61e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MzA2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506763065", "bodyText": "Just a random choice so we don't block forever. It should be very quick, but if we don't wait any time at all then it sometimes prints a scary looking stacktrace even though it is benign.", "author": "MikeDombo", "createdAt": "2020-10-16T23:36:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MjUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MzA1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506763058", "bodyText": "Maybe I miss something here, aren't we suppose to use the certificate? Why are we using TES Role?", "author": "fengwang666", "createdAt": "2020-10-16T23:36:01Z", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -139,32 +139,31 @@ public MqttClient(Kernel kernel, DeviceConfiguration deviceConfiguration, Execut\n                         Coerce.toString(deviceConfiguration.getRootCAFilePath()));\n \n                 try (ClientTlsContext x509TlsContext = new ClientTlsContext(x509TlsOptions)) {\n-                    this.credentialsProvider = new X509CredentialsProvider.X509CredentialsProviderBuilder()\n-                            .withClientBootstrap(clientBootstrap)\n-                            .withTlsContext(x509TlsContext)\n-                            .withEndpoint(Coerce.toString(deviceConfiguration.getIotCredentialEndpoint()))\n-                            .withRoleAlias(tesRoleAlias)\n-                            .withThingName(Coerce.toString(deviceConfiguration.getThingName()))\n-                            .withProxyOptions(httpProxyOptions)\n-                            .build();\n+                    this.credentialsProvider =\n+                            new X509CredentialsProvider.X509CredentialsProviderBuilder()\n+                                    .withClientBootstrap(clientBootstrap).withTlsContext(x509TlsContext)\n+                                    .withEndpoint(Coerce.toString(deviceConfiguration.getIotCredentialEndpoint()))\n+                                    .withRoleAlias(tesRoleAlias)", "originalCommit": "10ce33dca572c18ee608479a63adedfe32da61e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MzIwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506763208", "bodyText": "We use the certificate to talk to TES to get creds which we then use with websockets to talk to IoT Core. The SDK doesn't support proxy for non-websocket connections, so we must use TES creds.", "author": "MikeDombo", "createdAt": "2020-10-16T23:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MzA1OA=="}], "type": "inlineReview"}, {"oid": "fe01e3cfa0105cabc2f977cf8d804b2c7965abde", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe01e3cfa0105cabc2f977cf8d804b2c7965abde", "message": "Cleanup websocket proxy, add timeout to event loop shutdown future to prevent hanging", "committedDate": "2020-10-16T23:45:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NTE3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506765178", "bodyText": "Beautiful", "author": "philcali", "createdAt": "2020-10-16T23:47:43Z", "path": "src/main/java/com/aws/greengrass/mqttclient/AwsIotMqttClient.java", "diffHunk": "@@ -150,25 +146,32 @@ void reconnect() throws TimeoutException, ExecutionException, InterruptedExcepti\n         // Always use the builder provider here so that the builder is updated with whatever\n         // the latest device config is\n         try (AwsIotMqttConnectionBuilder builder = builderProvider.get()) {\n-            if (credentialsProvider != null) {\n-                builder.withWebsocketCredentialsProvider(credentialsProvider);\n-            }\n             builder.withConnectionEventCallbacks(connectionEventCallback);\n             builder.withClientId(clientId);\n \n             connection = builder.build();\n             // Set message handler for this connection to be our global message handler in MqttClient.\n             // The handler will then send out the message to all subscribers after appropriate filtering.\n             connection.onMessage(messageHandler);\n-            logger.atDebug().log(\"Connecting to AWS IoT Core\");\n+            logger.atInfo().log(\"Connecting to AWS IoT Core\");\n             return connection.connect().thenApply((sessionPresent) -> {\n                 currentlyConnected.set(true);\n-                logger.atDebug().kv(\"sessionPresent\", sessionPresent).log(\"Successfully connected to AWS IoT Core\");\n+                logger.atInfo().kv(\"sessionPresent\", sessionPresent).log(\"Successfully connected to AWS IoT Core\");\n \n                 if (!sessionPresent) {\n                     resubscribe();\n                 }\n                 return sessionPresent;\n+            }).whenComplete((session, error) -> {\n+                if (error != null) {\n+                    logger.atError().log(\"Unable to connect to AWS IoT Core\", error);\n+                    if (ProxyUtils.getProxyConfiguration() != null) {\n+                        logger.atInfo().log(\"You are using a proxy which uses a websocket connection and \"\n+                                + \"TokenExchangeService credentials. Verify that the IAM role which the IoT Role \"\n+                                + \"Alias is aliasing has a policy which allows for iot:Connect, iot:Subscribe, \"\n+                                + \"iot:Publish, iot:Receive, iot:GetThingShadow, and iot:UpdateThingShadow.\");", "originalCommit": "fe01e3cfa0105cabc2f977cf8d804b2c7965abde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NTQzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506765432", "bodyText": "removed shadow ones because I don't think they're actually needed. I think when using mqtt to access the shadow those permissions shouldn't come into play. Do you know @fengwa-aws?", "author": "MikeDombo", "createdAt": "2020-10-16T23:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NTE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2ODcyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506768720", "bodyText": "We probably don't need them. They look like for HTTP.", "author": "fengwang666", "createdAt": "2020-10-17T00:10:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NTE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MDUzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/540#discussion_r506770532", "bodyText": "Is there anyway that we can include the role alias name in this message?\nYou could make this message slightly clearer if you did:\n\nVerify that the IAM role configured for IoT Role Alias \"foo\" has a policy that allows iot:Connect, etc...\n\nAccording to the AWS docs - it is the dataplane REST API that uses iot:GetThingShadow and iot:UpdateThingShadow\nThey are not mentioned in the MQTT section because you can restrict access by the normal IoT publish and subscribe policy actions.", "author": "rbattle", "createdAt": "2020-10-17T00:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NTE3OA=="}], "type": "inlineReview"}, {"oid": "73040b0fedfa5fd35533e53f4dc3e50d9140fcf1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/73040b0fedfa5fd35533e53f4dc3e50d9140fcf1", "message": "Cleanup websocket proxy, add timeout to event loop shutdown future to prevent hanging", "committedDate": "2020-10-16T23:48:45Z", "type": "commit"}, {"oid": "73040b0fedfa5fd35533e53f4dc3e50d9140fcf1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/73040b0fedfa5fd35533e53f4dc3e50d9140fcf1", "message": "Cleanup websocket proxy, add timeout to event loop shutdown future to prevent hanging", "committedDate": "2020-10-16T23:48:45Z", "type": "forcePushed"}]}