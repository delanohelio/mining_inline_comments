{"pr_number": 577, "pr_title": "Always cleanup EventLoopGroup even if an exception occurs during construction", "pr_createdAt": "2020-10-28T16:48:53Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577", "timeline": [{"oid": "e5bd4411c31491fce5a88495be0a2076dc55ed08", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e5bd4411c31491fce5a88495be0a2076dc55ed08", "message": "use lsof in benchmark", "committedDate": "2020-10-28T16:55:54Z", "type": "forcePushed"}, {"oid": "29a004ca80857f531648971d260e051304293269", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/29a004ca80857f531648971d260e051304293269", "message": "use lsof in benchmark", "committedDate": "2020-10-28T18:46:32Z", "type": "forcePushed"}, {"oid": "3345bbf872951ba47acd7a61ef987d52692816e8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3345bbf872951ba47acd7a61ef987d52692816e8", "message": "use lsof in benchmark", "committedDate": "2020-10-28T18:58:15Z", "type": "forcePushed"}, {"oid": "f9f14a505132c83d1ca9d2fc78702f844aaef538", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f9f14a505132c83d1ca9d2fc78702f844aaef538", "message": "use lsof in benchmark", "committedDate": "2020-10-28T19:08:18Z", "type": "forcePushed"}, {"oid": "681300f96389bfaff71d05d22d57d917ec071b83", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/681300f96389bfaff71d05d22d57d917ec071b83", "message": "use lsof in benchmark", "committedDate": "2020-10-28T19:17:44Z", "type": "forcePushed"}, {"oid": "102af657d6e00d61a587c06840936a68bb7d6681", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/102af657d6e00d61a587c06840936a68bb7d6681", "message": "use lsof in benchmark", "committedDate": "2020-10-28T19:24:11Z", "type": "forcePushed"}, {"oid": "c33872a6b43d71b81fd002d1865e3d1885b34039", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c33872a6b43d71b81fd002d1865e3d1885b34039", "message": "Ensure that EventLoopGroup is always closed if some exception occurs", "committedDate": "2020-10-28T19:36:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxMjgxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513712810", "bodyText": "More specific exception we can use?", "author": "philcali", "createdAt": "2020-10-28T19:40:29Z", "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -87,65 +87,71 @@\n         this.config = config;\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     @Override\n     public void startup() {\n-        greengrassCoreIPCService.getAllOperations().forEach(operation -> {\n-            greengrassCoreIPCService.setOperationHandler(operation,\n+        try {\n+            greengrassCoreIPCService.getAllOperations().forEach(operation ->\n+                    greengrassCoreIPCService.setOperationHandler(operation,\n                     (context) -> new DebugLoggingOperationHandler(GreengrassCoreIPCServiceModel.getInstance()\n-                            .getOperationModelContext(operation), context));\n-        });\n-        greengrassCoreIPCService.setAuthenticationHandler(\n-                (List<Header> headers, byte[] bytes) -> ipcAuthenticationHandler(bytes));\n-        greengrassCoreIPCService.setAuthorizationHandler(\n-                authenticationData -> ipcAuthorizationHandler(authenticationData));\n-\n-        socketOptions = new SocketOptions();\n-        socketOptions.connectTimeoutMs = 3000;\n-        socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n-        socketOptions.type = SocketOptions.SocketType.STREAM;\n-        eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n-                .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-\n-        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n-            try {\n-                logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n-            } catch (IOException e) {\n-                logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n+                            .getOperationModelContext(operation), context)));\n+            greengrassCoreIPCService.setAuthenticationHandler((List<Header> headers, byte[] bytes) ->\n+                    ipcAuthenticationHandler(bytes));\n+            greengrassCoreIPCService.setAuthorizationHandler(authenticationData ->\n+                    ipcAuthorizationHandler(authenticationData));\n+\n+            socketOptions = new SocketOptions();\n+            socketOptions.connectTimeoutMs = 3000;\n+            socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n+            socketOptions.type = SocketOptions.SocketType.STREAM;\n+            eventLoopGroup = new EventLoopGroup(1);\n+            ipcServerSocketAbsolutePath =\n+                    kernel.getNucleusPaths().rootPath().resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n+\n+            if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n+                try {\n+                    logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n+                    Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n+                } catch (IOException e) {\n+                    logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n+                }\n             }\n-        }\n \n-        Topic kernelUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH);\n-        kernelUri.withValue(ipcServerSocketAbsolutePath);\n-        Topic kernelRelativeUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE,\n-                NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n-        kernelRelativeUri.withValue(ipcServerSocketAbsolutePath);\n+            Topic kernelUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH);\n+            kernelUri.withValue(ipcServerSocketAbsolutePath);\n+            Topic kernelRelativeUri =\n+                    config.getRoot().lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n+            kernelRelativeUri.withValue(ipcServerSocketAbsolutePath);\n \n-        boolean symLinkCreated = false;\n+            boolean symLinkCreated = false;\n \n-        try {\n-            // Usually we do not want to write outside of kernel root. Because of socket path length limitations we\n-            // will create a symlink only if needed\n-            if (ipcServerSocketAbsolutePath.length() > UDS_SOCKET_PATH_MAX_LEN) {\n-                Files.createSymbolicLink(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), kernel.getNucleusPaths().rootPath());\n-                kernelRelativeUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE,\n-                        NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n-                kernelRelativeUri.withValue(IPC_SERVER_DOMAIN_SOCKET_RELATIVE_FILENAME);\n-                symLinkCreated = true;\n+            try {\n+                // Usually we do not want to write outside of kernel root. Because of socket path length limitations we\n+                // will create a symlink only if needed\n+                if (ipcServerSocketAbsolutePath.length() > UDS_SOCKET_PATH_MAX_LEN) {\n+                    Files.createSymbolicLink(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), kernel.getNucleusPaths().rootPath());\n+                    kernelRelativeUri = config.getRoot()\n+                            .lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n+                    kernelRelativeUri.withValue(IPC_SERVER_DOMAIN_SOCKET_RELATIVE_FILENAME);\n+                    symLinkCreated = true;\n+                }\n+\n+            } catch (IOException e) {\n+                logger.atError().setCause(e).log(\"Cannot setup symlinks for the ipc server socket path\");\n             }\n \n-        } catch (IOException e) {\n-            logger.atError().setCause(e).log(\"Cannot setup symlinks for the ipc server socket path\");\n+            // For domain sockets:\n+            // 1. Port number is ignored. IpcServer does not accept a null value so we are using a default value.\n+            // 2. The hostname parameter expects the socket filepath\n+            ipcServer = new IpcServer(eventLoopGroup, socketOptions, null,\n+                    symLinkCreated ? IPC_SERVER_DOMAIN_SOCKET_FILENAME_SYMLINK : ipcServerSocketAbsolutePath,\n+                    DEFAULT_PORT_NUMBER, greengrassCoreIPCService);\n+            ipcServer.runServer();\n+        } catch (RuntimeException e) {", "originalCommit": "c33872a6b43d71b81fd002d1865e3d1885b34039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxNjY0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513716645", "bodyText": "I don't want to be specific, since it could be anything and I want to be sure that we always close the ELG no matter what.", "author": "MikeDombo", "createdAt": "2020-10-28T19:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxMjgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMzQyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513733422", "bodyText": "Why not just catch Throwable?", "author": "fengwang666", "createdAt": "2020-10-28T20:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxMjgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNDY3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513734671", "bodyText": "I can't rethrow throwable without declaring it. RuntimeException should be fine", "author": "MikeDombo", "createdAt": "2020-10-28T20:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxMjgxMA=="}], "type": "inlineReview"}, {"oid": "282f3f261d010c9af63cc903a067d3fa2b53b2b8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/282f3f261d010c9af63cc903a067d3fa2b53b2b8", "message": "Ensure that EventLoopGroup is always closed if some exception occurs", "committedDate": "2020-10-28T19:49:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyMDYzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513720635", "bodyText": "Shouldn't the order of closure be reverse?", "author": "abanthiy", "createdAt": "2020-10-28T19:54:21Z", "path": "src/main/java/com/aws/greengrass/iot/IotConnectionManager.java", "diffHunk": "@@ -49,11 +49,21 @@\n      * @param deviceConfiguration Device configuration helper getting cert and keys for mTLS\n      */\n     @Inject\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public IotConnectionManager(final DeviceConfiguration deviceConfiguration) {\n         eventLoopGroup = new EventLoopGroup(1);\n         resolver = new HostResolver(eventLoopGroup);\n         clientBootstrap = new ClientBootstrap(eventLoopGroup, resolver);\n-        this.connManager = initConnectionManager(deviceConfiguration);\n+        try {\n+            this.connManager = initConnectionManager(deviceConfiguration);\n+        } catch (RuntimeException e) {\n+            // If we couldn't initialize the connection manager, then make sure to shutdown\n+            // everything which was started up\n+            eventLoopGroup.close();\n+            resolver.close();\n+            clientBootstrap.close();", "originalCommit": "282f3f261d010c9af63cc903a067d3fa2b53b2b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyMTEzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513721135", "bodyText": "Updated", "author": "MikeDombo", "createdAt": "2020-10-28T19:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyMDYzNQ=="}], "type": "inlineReview"}, {"oid": "0de94431055b8f4f7e0c60f14dd9ec4b8230f2d0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0de94431055b8f4f7e0c60f14dd9ec4b8230f2d0", "message": "Ensure that EventLoopGroup is always closed if some exception occurs", "committedDate": "2020-10-28T19:54:59Z", "type": "forcePushed"}, {"oid": "e207aad7db6891778c419da492f6a93e5d7dcd58", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e207aad7db6891778c419da492f6a93e5d7dcd58", "message": "Ensure that EventLoopGroup is always closed if some exception occurs", "committedDate": "2020-10-28T20:15:59Z", "type": "commit"}, {"oid": "e207aad7db6891778c419da492f6a93e5d7dcd58", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e207aad7db6891778c419da492f6a93e5d7dcd58", "message": "Ensure that EventLoopGroup is always closed if some exception occurs", "committedDate": "2020-10-28T20:15:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNTQ4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513735480", "bodyText": "try-with-resources on these three Autocloseable objects will cleanly close everything", "author": "DavidOgunsAWS", "createdAt": "2020-10-28T20:21:09Z", "path": "src/main/java/com/aws/greengrass/iot/IotConnectionManager.java", "diffHunk": "@@ -49,11 +49,21 @@\n      * @param deviceConfiguration Device configuration helper getting cert and keys for mTLS\n      */\n     @Inject\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public IotConnectionManager(final DeviceConfiguration deviceConfiguration) {\n         eventLoopGroup = new EventLoopGroup(1);\n         resolver = new HostResolver(eventLoopGroup);\n         clientBootstrap = new ClientBootstrap(eventLoopGroup, resolver);\n-        this.connManager = initConnectionManager(deviceConfiguration);\n+        try {\n+            this.connManager = initConnectionManager(deviceConfiguration);\n+        } catch (RuntimeException e) {\n+            // If we couldn't initialize the connection manager, then make sure to shutdown\n+            // everything which was started up\n+            clientBootstrap.close();\n+            resolver.close();\n+            eventLoopGroup.close();", "originalCommit": "e207aad7db6891778c419da492f6a93e5d7dcd58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNzM0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513737345", "bodyText": "We can't do that because they need to stay open for the life of this object. We can't just close them in the constructor.", "author": "MikeDombo", "createdAt": "2020-10-28T20:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNTQ4MA=="}], "type": "inlineReview"}]}