{"pr_number": 300, "pr_title": "Download artifacts from S3", "pr_createdAt": "2020-07-09T16:31:31Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300", "timeline": [{"oid": "fe6cdcdc33d08434d9770a8624d30ec4c4303772", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe6cdcdc33d08434d9770a8624d30ec4c4303772", "message": "Download component artifacts from S3 buckets in customer account", "committedDate": "2020-07-09T18:47:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNTk4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r452535982", "bodyText": "I'd prefer roleAlias is retrieved in CredentialRequestHandler constructor", "author": "ShirleyZheng92", "createdAt": "2020-07-09T23:03:43Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.tes.IotCloudHelper;\n+import com.aws.iot.evergreen.tes.IotConnectionManager;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final CredentialRequestHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     * @param iotCloudHelper iotCloudHelper\n+     * @param iotConnectionManager iotConnectionManager\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel, IotCloudHelper iotCloudHelper,\n+                        IotConnectionManager iotConnectionManager) {\n+        this.s3Client = clientFactory.getS3Client();\n+        // TODO : Move IOT_ROLE_ALIAS to DeviceConfiguration and get this info from there\n+        String iotRoleAlias = (String) kernel.getConfig()\n+                .lookup(EvergreenService.SERVICES_NAMESPACE_TOPIC, TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS,\n+                        TokenExchangeService.IOT_ROLE_ALIAS_TOPIC).getOnce();\n+        this.credentialRequestHandler =\n+                new CredentialRequestHandler(iotRoleAlias, iotCloudHelper, iotConnectionManager);", "originalCommit": "fe6cdcdc33d08434d9770a8624d30ec4c4303772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NjE1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r452966154", "bodyText": "Yeah that was irksome, it is done in CredentialRequestHandler's constructor now", "author": "shaguptashaikh", "createdAt": "2020-07-10T17:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNTk4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNjQ1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r452536455", "bodyText": "Is this defined by S3 or evergreen?", "author": "ShirleyZheng92", "createdAt": "2020-07-09T23:05:15Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.tes.IotCloudHelper;\n+import com.aws.iot.evergreen.tes.IotConnectionManager;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final CredentialRequestHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     * @param iotCloudHelper iotCloudHelper\n+     * @param iotConnectionManager iotConnectionManager\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel, IotCloudHelper iotCloudHelper,\n+                        IotConnectionManager iotConnectionManager) {\n+        this.s3Client = clientFactory.getS3Client();\n+        // TODO : Move IOT_ROLE_ALIAS to DeviceConfiguration and get this info from there\n+        String iotRoleAlias = (String) kernel.getConfig()\n+                .lookup(EvergreenService.SERVICES_NAMESPACE_TOPIC, TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS,\n+                        TokenExchangeService.IOT_ROLE_ALIAS_TOPIC).getOnce();\n+        this.credentialRequestHandler =\n+                new CredentialRequestHandler(iotRoleAlias, iotCloudHelper, iotConnectionManager);\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactURI()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactURI().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactURI(),\n+                            \"Invalid artifact URI\"));\n+        }\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        try {\n+            // Get artifact from S3\n+            GetObjectRequest getObjectRequest = GetObjectRequest.builder().overrideConfiguration(\n+                    AwsRequestOverrideConfiguration.builder()\n+                            .credentialsProvider(credentialRequestHandler.getAwsCredentialsProvider()).build())\n+                    .bucket(bucket).key(key).build();\n+            byte[] response = s3Client.getObjectAsBytes(getObjectRequest).asByteArray();\n+\n+            // Perform integrity check\n+            // Recipe has Base64 encoded checksum and the hashing algorithm used\n+            // in the format -> <algorithm>checksum<checksum>", "originalCommit": "fe6cdcdc33d08434d9770a8624d30ec4c4303772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NTM0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r452965341", "bodyText": "By Evergreen, we are not using S3s built in integrity check support because that uses MD5 and we wanted to avoid using MD5. Instead this was the simplest way to keep the algorithm also dynamic so that in future when we want to start using a newer algorithm both cloud and device can do that seamlessly", "author": "shaguptashaikh", "createdAt": "2020-07-10T17:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNjQ1NQ=="}], "type": "inlineReview"}, {"oid": "f1167bf51e06b522f7b201c54cfdc75a451a45ba", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f1167bf51e06b522f7b201c54cfdc75a451a45ba", "message": "Fix and add tests", "committedDate": "2020-07-10T17:01:27Z", "type": "forcePushed"}, {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "message": "Fix and add tests", "committedDate": "2020-07-10T18:39:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NDY3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453754673", "bodyText": "It's not just checksum, should we add extra field to include algorithm?", "author": "wikimonkey", "createdAt": "2020-07-13T15:55:49Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Getter;\n+\n+import java.net.URI;\n+\n+@Getter\n+public class ComponentArtifact {\n+    private URI artifactUri;\n+    private String checksum;", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzU1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457537553", "bodyText": "Changed it, although I feel it's unnecessarily long recipe key, let me know if you can think of a better name", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NDY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NjEzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453756137", "bodyText": "For the greengrass component, we need to add similar integrity check. This constructor might not be necessary.", "author": "wikimonkey", "createdAt": "2020-07-13T15:57:55Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Getter;\n+\n+import java.net.URI;\n+\n+@Getter\n+public class ComponentArtifact {\n+    private URI artifactUri;\n+    private String checksum;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param artifactUri artifactUri\n+     * @param checksum checksum\n+     */\n+    @JsonCreator\n+    public ComponentArtifact(@JsonProperty(\"uri\") URI artifactUri,\n+                             @JsonProperty(\"checksum\") String checksum) {\n+        this.artifactUri = artifactUri;\n+        this.checksum = checksum;\n+    }\n+\n+    /**\n+     * Constructor for component artifacts where checksum is not needed.\n+     *\n+     * @param artifactUri artifactURI\n+     */\n+    public ComponentArtifact(URI artifactUri) {", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzY4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457537684", "bodyText": "Okay, I removed this one", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NjEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1ODIyOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453758229", "bodyText": "Do we have URI validation error defined? If not, should we have one? It's kind of client exception. Probably should distinguished from internal error.", "author": "wikimonkey", "createdAt": "2020-07-13T16:01:07Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactUri().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzg4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457537888", "bodyText": "Added a new exception for invalid URI", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1ODIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MDExNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453760114", "bodyText": "Recommend to break the function to subroutines (for example, retrieve credential, get object, validate integrity), handle specific exception for each subroutines.", "author": "wikimonkey", "createdAt": "2020-07-13T16:04:03Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactUri().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                            \"Invalid artifact URI\"));\n+        }\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        try {", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzk3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457537976", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MDExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2Mjc2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453762767", "bodyText": "Why is a JsonNode instead of a modeled type?", "author": "wikimonkey", "createdAt": "2020-07-13T16:08:14Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -95,4 +129,14 @@ public void handle(final HttpExchange exchange) throws IOException {\n             throw new AWSIotException(e);\n         }\n     }\n+\n+    private JsonNode deserializeCredentials(final String credentials) throws AWSIotException {", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODc2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457538764", "bodyText": "This gets modeled into either AWSCredentials or just a byte[] in two of the consumers that call this method anyway, modeling it here wouldn't be of much help", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2Mjc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MDY1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462480658", "bodyText": "TES now has caching, so it should have a method to get the credentials without doing all of what you've added.", "author": "MikeDombo", "createdAt": "2020-07-29T17:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2Mjc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNzUwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454517507", "bodyText": "Curious, are we following 'camelCase' or 'CamelCase' naming convention for json field?", "author": "ShirleyZheng92", "createdAt": "2020-07-14T17:20:50Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Getter;\n+\n+import java.net.URI;\n+\n+@Getter\n+public class ComponentArtifact {\n+    private URI artifactUri;\n+    private String checksum;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param artifactUri artifactUri\n+     * @param checksum checksum\n+     */\n+    @JsonCreator\n+    public ComponentArtifact(@JsonProperty(\"uri\") URI artifactUri,\n+                             @JsonProperty(\"checksum\") String checksum) {", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTExMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457539110", "bodyText": "CamelCase, checksum is one word though and it has been changed now", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNzUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNjM0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454526340", "bodyText": "does saveToPath have separate directory for each package? Or all package's artifact is saved under same dir?", "author": "ShirleyZheng92", "createdAt": "2020-07-14T17:34:58Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactUri().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                            \"Invalid artifact URI\"));\n+        }\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        try {\n+            // Get artifact from S3\n+            CredentialRequestHandler credentialRequestHandler = kernel.getContext().get(CredentialRequestHandler.class);\n+            GetObjectRequest getObjectRequest = GetObjectRequest.builder().overrideConfiguration(\n+                    AwsRequestOverrideConfiguration.builder()\n+                            .credentialsProvider(credentialRequestHandler.getAwsCredentialsProvider()).build())\n+                    .bucket(bucket).key(key).build();\n+            byte[] response = s3Client.getObjectAsBytes(getObjectRequest).asByteArray();\n+\n+            // Perform integrity check\n+            // Recipe has Base64 encoded checksum and the hashing algorithm used\n+            // in the format -> <algorithm>checksum<checksum>\n+            String decoded =\n+                    new String(Base64.getDecoder().decode(artifact.getChecksum().getBytes(StandardCharsets.UTF_8)),\n+                            StandardCharsets.UTF_8);\n+            String[] checksumWithAlgorithm = decoded.split(\"checksum\");\n+            String algorithm = checksumWithAlgorithm[0];\n+            String checksum = checksumWithAlgorithm[1];\n+            String digest = new String(MessageDigest.getInstance(algorithm).digest(response), StandardCharsets.UTF_8);\n+            if (!digest.equals(checksum)) {\n+                // Handle failure in integrity check\n+                throw new PackageDownloadException(\n+                        String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                                packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                                \"Integrity check for downloaded artifact failed\"));\n+            }\n+            logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log(\"Passed integrity check\");\n+\n+            // Save file to store\n+            Files.write(saveToPath.resolve(extractFileName(key)), response, StandardOpenOption.CREATE,", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMjc2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454532762", "bodyText": "Nvm I checked it's the package specific path. I saw the package Identifier is passed into the function and assumed that this function will resolve dir to download", "author": "ShirleyZheng92", "createdAt": "2020-07-14T17:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNjM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNjg2Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454526863", "bodyText": "Are you returning credentialProvider even with AWSIotException?", "author": "ShirleyZheng92", "createdAt": "2020-07-14T17:35:47Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -80,10 +90,34 @@ public void handle(final HttpExchange exchange) throws IOException {\n         return response;\n     }\n \n+    /**\n+     * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     *\n+     * @return Credential provider compatible with the AWS SDK for credentials recieved from cloud.\n+     */\n+    public AwsCredentialsProvider getAwsCredentialsProvider() {\n+        StaticCredentialsProvider awsCredentialsProvider = null;\n+\n+        LOGGER.debug(\"Got request for credentials\");\n+        // TODO: Add cache\n+        try {\n+            final JsonNode credentials = deserializeCredentials(iotCloudHelper\n+                    .sendHttpRequest(iotConnectionManager, iotCredentialsPath, IOT_CREDENTIALS_HTTP_VERB));\n+            awsCredentialsProvider = StaticCredentialsProvider.create(AwsSessionCredentials\n+                    .create(credentials.get(ACCESS_KEY_UPSTREAM_STR).asText(),\n+                            credentials.get(SECRET_ACCESS_UPSTREAM_STR).asText(),\n+                            credentials.get(SESSION_TOKEN_UPSTREAM_STR).asText()));\n+        } catch (AWSIotException e) {\n+            // TODO: Generate 4xx, 5xx responses for all error scnearios\n+            LOGGER.error(\"Encountered error while fetching credentials\", e);\n+        }\n+        return awsCredentialsProvider;", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNzI2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454527264", "bodyText": "NIT: don't log and throw the exception at the same time", "author": "ShirleyZheng92", "createdAt": "2020-07-14T17:36:21Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -95,4 +129,14 @@ public void handle(final HttpExchange exchange) throws IOException {\n             throw new AWSIotException(e);\n         }\n     }\n+\n+    private JsonNode deserializeCredentials(final String credentials) throws AWSIotException {\n+        try {\n+            // TODO: Validate if lowercase lookup can make this simpler\n+            return OBJECT_MAPPER.readTree(credentials).get(CREDENTIALS_UPSTREAM_STR);\n+        } catch (JsonProcessingException e) {\n+            LOGGER.error(\"Received malformed credential input\", e);\n+            throw new AWSIotException(e);", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMDAyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454530022", "bodyText": "NIT: make \"eg-e2e-tests-component-artifacts-test\" a variable", "author": "ShirleyZheng92", "createdAt": "2020-07-14T17:40:34Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -127,4 +143,89 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            // Validate artifact was downloaded and integrity check passed\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"AppWithS3Artifacts-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"AppWithS3Artifacts\").resolve(\"1.0.0\")\n+                    .resolve(\"artifact.txt\").toFile(), anExistingFile());\n+        }\n+    }\n+\n+    private void createComponentLocallyWithS3Artifacts() throws Exception {\n+        // Create artifact object in S3\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(\"Sample artifact content\"),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+\n+        try {\n+            s3Client.createBucket(\n+                    CreateBucketRequest.builder().bucket(\"eg-e2e-tests-component-artifacts-test\").build());", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMzQ0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454533448", "bodyText": "Can this be in aftereach?", "author": "ShirleyZheng92", "createdAt": "2020-07-14T17:46:12Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/S3DownloaderTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.CloseResource\")\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class S3DownloaderTest {\n+\n+    private static final String VALID_ARTIFACT_URI = \"s3://eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String INVALID_ARTIFACT_URI = \"s3/eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String VALID_ARTIFACT_CHECKSUM =\n+            \"U0hBLTI1NmNoZWNrc3VtOxzvv73vv701ECM4MO+/vWBpJO+/vWXvv70sYu+/vQA8Au+/vSXvv70zR++/vWDvv70S77+9\";\n+    private static final String VALID_ARTIFACT_CONTENT = \"Sample artifact content\";\n+    private static final String TEST_COMPONENT_NAME = \"ComponentWithS3Artifacts\";\n+    private static final String TEST_COMPONENT_VERSION = \"1.0.0\";\n+    private static final String TEST_SCOPE = \"private\";\n+\n+    @Mock\n+    private S3Client s3Client;\n+\n+    @Mock\n+    private S3SdkClientFactory s3SdkClientFactory;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private S3Downloader s3Downloader;\n+\n+    @BeforeEach\n+    void setup() {\n+        when(s3SdkClientFactory.getS3Client()).thenReturn(s3Client);\n+        s3Downloader = new S3Downloader(s3SdkClientFactory, kernel);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_download_to_path_THEN_succeed() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = new String(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)),\n+                StandardCharsets.UTF_8);\n+        String checksumWithAlgorithm = \"SHA-256checksum\" + checksum;\n+        String encoded = Base64.getEncoder().encodeToString(checksumWithAlgorithm.getBytes(StandardCharsets.UTF_8));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(CredentialRequestHandler.class)).thenReturn(mock(CredentialRequestHandler.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), encoded), saveToPath);\n+        byte[] downloadedFile = Files.readAllBytes(saveToPath.resolve(\"artifact.txt\"));\n+        assertThat(\"Content of downloaded file should be same as the artifact content\",\n+                Arrays.equals(Files.readAllBytes(artifactFilePath), downloadedFile));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_uri_THEN_fail() throws Exception {\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(INVALID_ARTIFACT_URI), \"somechecksum\"), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_checksum_THEN_fail() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksumWithAlgorithm = \"SHA-256checksumRandomString\";\n+        String encoded = Base64.getEncoder().encodeToString(checksumWithAlgorithm.getBytes(StandardCharsets.UTF_8));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(CredentialRequestHandler.class)).thenReturn(mock(CredentialRequestHandler.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), encoded), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_algorithm_THEN_fail() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = new String(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)),\n+                StandardCharsets.UTF_8);\n+        String checksumWithAlgorithm = \"RandomAlgorithmchecksum\" + checksum;\n+        String encoded = Base64.getEncoder().encodeToString(checksumWithAlgorithm.getBytes(StandardCharsets.UTF_8));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(CredentialRequestHandler.class)).thenReturn(mock(CredentialRequestHandler.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), encoded), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_error_in_getting_from_s3_THEN_fail() throws Exception {\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(CredentialRequestHandler.class)).thenReturn(mock(CredentialRequestHandler.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenThrow(S3Exception.class);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), VALID_ARTIFACT_CHECKSUM), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+        mockContext.close();", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MTIzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457541236", "bodyText": "No, in one of the tests it becomes unreachable and throws UnnecessaryStubbingException", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMzQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NDYyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455564627", "bodyText": "let's make sure these are always random, otherwise we will run into concurrent run issues. A random suffix would be fine", "author": "MikeDombo", "createdAt": "2020-07-16T07:24:56Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -58,9 +71,15 @@\n     protected static final String CMS_BETA_ENDPOINT = \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta\";\n     protected static final Region BETA_REGION = Region.US_EAST_1;\n     protected static final String THING_GROUP_TARGET_TYPE = \"thinggroup\";\n+    private static final String TES_ROLE_NAME = \"E2ETestsTesRole\";\n+    protected static final String TES_ROLE_ALIAS_NAME = \"E2ETestsTesRoleAlias\";\n+    private static final String TES_ROLE_POLICY_NAME = \"E2ETestsTesRolePolicy\";", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NTAxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455565016", "bodyText": "Zhaoyan has similar code added, probably should use her's", "author": "MikeDombo", "createdAt": "2020-07-16T07:25:37Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -227,12 +252,39 @@ protected void cleanup() {\n         createdIotJobIds.clear();\n     }\n \n+    protected void setupTesRoleAndAlias() {", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NTk2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455565967", "bodyText": "we'll probably want this kind of thing in a utility", "author": "MikeDombo", "createdAt": "2020-07-16T07:27:26Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -127,4 +143,89 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            // Validate artifact was downloaded and integrity check passed\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"AppWithS3Artifacts-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"AppWithS3Artifacts\").resolve(\"1.0.0\")\n+                    .resolve(\"artifact.txt\").toFile(), anExistingFile());\n+        }\n+    }\n+\n+    private void createComponentLocallyWithS3Artifacts() throws Exception {\n+        // Create artifact object in S3\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(\"Sample artifact content\"),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+\n+        try {\n+            s3Client.createBucket(\n+                    CreateBucketRequest.builder().bucket(\"eg-e2e-tests-component-artifacts-test\").build());\n+        } catch (BucketAlreadyExistsException | BucketAlreadyOwnedByYouException e) {\n+            // No-op if bucket exists\n+        }\n+        s3Client.putObject(PutObjectRequest.builder().bucket(\"eg-e2e-tests-component-artifacts-test\")\n+                        .key(\"AppWithS3Artifacts/artifact\" + \".txt\").build(),\n+                RequestBody.fromBytes(Files.readAllBytes(artifactFilePath)));\n+\n+        // Calculate checksum\n+        String checksum = new String(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)),\n+                StandardCharsets.UTF_8);\n+        String checksumWithAlgorithm = \"SHA-256checksum\" + checksum;\n+        String encoded = Base64.getEncoder().encodeToString(checksumWithAlgorithm.getBytes(StandardCharsets.UTF_8));", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MjEwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457542101", "bodyText": "This is temporary until cloud adds the checksum calculation logic and recipe model so it's better in this one place which will be easier to clean up", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NTk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NjI2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455566260", "bodyText": "this is not cross platform. Use @TempDir to get a temp dir and then create the file in itt", "author": "MikeDombo", "createdAt": "2020-07-16T07:27:58Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -127,4 +143,89 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            // Validate artifact was downloaded and integrity check passed\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"AppWithS3Artifacts-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"AppWithS3Artifacts\").resolve(\"1.0.0\")\n+                    .resolve(\"artifact.txt\").toFile(), anExistingFile());\n+        }\n+    }\n+\n+    private void createComponentLocallyWithS3Artifacts() throws Exception {\n+        // Create artifact object in S3\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(\"Sample artifact content\"),", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODAxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455568014", "bodyText": "why not just have TES implement this interface?", "author": "MikeDombo", "createdAt": "2020-07-16T07:30:59Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -80,10 +90,34 @@ public void handle(final HttpExchange exchange) throws IOException {\n         return response;\n     }\n \n+    /**\n+     * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     *\n+     * @return Credential provider compatible with the AWS SDK for credentials recieved from cloud.\n+     */\n+    public AwsCredentialsProvider getAwsCredentialsProvider() {", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODk1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455568959", "bodyText": "Injecting the kernel to get the context to get TES doesn't seem right at all. Why not just inject TES in the constructor?", "author": "MikeDombo", "createdAt": "2020-07-16T07:32:48Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactUri().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                            \"Invalid artifact URI\"));\n+        }\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        try {\n+            // Get artifact from S3\n+            CredentialRequestHandler credentialRequestHandler = kernel.getContext().get(CredentialRequestHandler.class);", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NDQ1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457544457", "bodyText": "That's what I had tried but the injecting this needs DeviceConfiguration settings present in order to establish a connection with IoT cloud. That causes all integ tests that need a package manager instance to fail since the injection happens all the way upto DeploymentService and they don't have that step to do the device configuration settings. This way, you get an instance on demand and can do the settings only in the places you need them", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NjMzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457546336", "bodyText": "Why not mock out DeviceConfiguration in integ, then?", "author": "MikeDombo", "createdAt": "2020-07-20T16:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyMjc5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457622793", "bodyText": "Since in most of our integ tests we create an instance of kernel and launch in each test case so this will need refactoring in almost all integ tests, since kernel also tries to startup deployment service every time. I agree that that is a better approach but given the size of this PR already I will most likely do that in a follow up PR", "author": "shaguptashaikh", "createdAt": "2020-07-20T18:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2OTY2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455569662", "bodyText": "I don't like how this flips responsibility. Why not just use TES (even if it isn't running as a service), to get the credentials. Let TES call the functions in this class and provide the credentials through the AwsCredentialsProvider  interface,", "author": "MikeDombo", "createdAt": "2020-07-16T07:34:06Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -37,16 +43,20 @@\n     private final IotCloudHelper iotCloudHelper;\n \n     private final IotConnectionManager iotConnectionManager;\n+    private final String iotRoleAlias;\n \n     /**\n      * Constructor.\n-     * @param iotRoleAlias Iot role alias configured by the customer in AWS account.\n      * @param cloudHelper {@link IotCloudHelper} for making http requests to cloud.\n      * @param connectionManager {@link IotConnectionManager} underlying connection manager for cloud.\n+     * @param kernel kernel instance\n      */\n-    public CredentialRequestHandler(final String iotRoleAlias,\n-                                    final IotCloudHelper cloudHelper,\n-                                    final IotConnectionManager connectionManager) {\n+    @Inject\n+    public CredentialRequestHandler(final IotCloudHelper cloudHelper,\n+                                    final IotConnectionManager connectionManager, final Kernel kernel) {\n+        Topics tokenExchangeServiceTopics = kernel.findServiceTopic(TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        iotRoleAlias = (String) tokenExchangeServiceTopics.lookup(TokenExchangeService.IOT_ROLE_ALIAS_TOPIC).getOnce();", "originalCommit": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NzA1MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457547050", "bodyText": "I don't agree that it's 'flipping responsibility'. If you want to use TES you must have an instance of credential request handler at all times. Adding this to the TES interface means you also need one additional object for TES. The original author exposed a method to get creds directly for the kernel on this CredentialRequestHandler class so I used that object to get creds without http server.\nAnyway, after rebasing on multiple changes to TES it was easier for me to use TES instead so I've added this method to TES now", "author": "shaguptashaikh", "createdAt": "2020-07-20T16:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2OTY2Mg=="}], "type": "inlineReview"}, {"oid": "0577d37727b265be33fca6f6425d5268e5ee50f4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0577d37727b265be33fca6f6425d5268e5ee50f4", "message": "Rebase and address comments", "committedDate": "2020-07-20T16:24:08Z", "type": "forcePushed"}, {"oid": "f27bfdae51edb02a000fca815c4b5453a79d57d5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f27bfdae51edb02a000fca815c4b5453a79d57d5", "message": "Rebase and address comments", "committedDate": "2020-07-20T16:31:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MDQ1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457550457", "bodyText": "what about when the role alias changes? Should this go inside the subscribe call?", "author": "MikeDombo", "createdAt": "2020-07-20T16:46:09Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -54,7 +54,9 @@ public TokenExchangeService(Topics topics,\n                 .subscribe((why, newv) ->\n                         iotRoleAlias = Coerce.toString(newv));\n \n-        this.iotConnectionManager = iotConnectionManager;\n+        validateConfig();\n+        this.credentialRequestHandler = new CredentialRequestHandler(iotRoleAlias, new IotCloudHelper(),", "originalCommit": "f27bfdae51edb02a000fca815c4b5453a79d57d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyMDg5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457620897", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-07-20T18:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MDQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MDg2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457550861", "bodyText": "you could have TES implement the interface, then you can just pass TES into the AWS client and it will simply work.", "author": "MikeDombo", "createdAt": "2020-07-20T16:46:50Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -102,4 +101,8 @@ private void validateConfig() {\n             throw new IllegalArgumentException(String.format(TES_CONFIG_ERROR_STR, IOT_ROLE_ALIAS_TOPIC));\n         }\n     }\n+\n+    public AwsCredentialsProvider getAwsCredentialsProvider() {", "originalCommit": "f27bfdae51edb02a000fca815c4b5453a79d57d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyMTAwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457621009", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-07-20T18:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MDg2MQ=="}], "type": "inlineReview"}, {"oid": "d8720a66283e9c9d076808eab0c862d38890c641", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d8720a66283e9c9d076808eab0c862d38890c641", "message": "Rebase and address comments", "committedDate": "2020-07-20T18:45:15Z", "type": "forcePushed"}, {"oid": "01fd191060ea5984485f775be67a697acae38393", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/01fd191060ea5984485f775be67a697acae38393", "message": "Rebase and address comments", "committedDate": "2020-07-20T18:49:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3MzcwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457573700", "bodyText": "NIT: we can just have one UUID for the test run, and remove it afterwards.", "author": "ShirleyZheng92", "createdAt": "2020-07-20T17:26:31Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -58,9 +72,15 @@\n     protected static final String FCS_BETA_ENDPOINT = \"https://aqzw8qdn5l.execute-api.us-east-1.amazonaws.com/Beta\";\n     protected static final Region BETA_REGION = Region.US_EAST_1;\n     protected static final String THING_GROUP_TARGET_TYPE = \"thinggroup\";\n+    private static final String TES_ROLE_NAME = \"E2ETestsTesRole\" + UUID.randomUUID().toString();\n+    protected static final String TES_ROLE_ALIAS_NAME = \"E2ETestsTesRoleAlias\" + UUID.randomUUID().toString();\n+    private static final String TES_ROLE_POLICY_NAME = \"E2ETestsTesRolePolicy\" + UUID.randomUUID().toString();", "originalCommit": "f27bfdae51edb02a000fca815c4b5453a79d57d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MzQxOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457643418", "bodyText": "I think the listener on role alias topic update in L51 doesn't change this credentialRequestHandler here. Either the IoTConnectionManager need to perform the listen-and-update or you update the server impl here", "author": "ShirleyZheng92", "createdAt": "2020-07-20T19:32:20Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -65,10 +64,7 @@ public void startup() {\n                 .addKeyValue(IOT_ROLE_ALIAS_TOPIC, iotRoleAlias).log(\"Starting Token Server at port {}\", port);\n         reportState(State.RUNNING);\n         try {\n-            validateConfig();\n-            IotCloudHelper cloudHelper = new IotCloudHelper();\n-            server = new HttpServerImpl(port,\n-                    new CredentialRequestHandler(iotRoleAlias, cloudHelper, iotConnectionManager));\n+            server = new HttpServerImpl(port, credentialRequestHandler);", "originalCommit": "01fd191060ea5984485f775be67a697acae38393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4MDcxOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457680718", "bodyText": "Yes, although this has always been like this, currently change in role alias and even port only takes effect when the service starts up again. It will be better for TES to either restart itself or restart the http server on every change, I can't take up this added scope in this PR though, I'll create a bug for it", "author": "shaguptashaikh", "createdAt": "2020-07-20T20:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MzQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MzkyNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457643926", "bodyText": "NIT: I feel it's actually simpler in code to create an actual Configuration and Topic object", "author": "ShirleyZheng92", "createdAt": "2020-07-20T19:33:21Z", "path": "src/test/java/com/aws/iot/evergreen/tes/TokenExchangeServiceTest.java", "diffHunk": "@@ -45,28 +43,42 @@ public void setup() {\n         // initialize Evergreen service specific mocks\n         serviceFullName = \"TokenExchangeService\";\n         initializeMockedConfig();\n-        when(stateTopic.getOnce()).thenReturn(State.INSTALLED);\n     }\n \n     @ParameterizedTest\n     @ValueSource(ints = {0, 3000})\n     public void GIVEN_token_exchange_service_WHEN_started_THEN_correct_env_set(int port) throws Exception {\n-        Topic mockTopic = mock(Topic.class);\n-        when(mockTopic.dflt(anyInt())).thenReturn(mockTopic);\n-        when(mockTopic.subscribe(any())).thenAnswer((a) -> {\n-            ((Subscriber) a.getArgument(0)).published(WhatHappened.initialized, mockTopic);\n+        when(stateTopic.getOnce()).thenReturn(State.INSTALLED);", "originalCommit": "01fd191060ea5984485f775be67a697acae38393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4MjI0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457682247", "bodyText": "This was moved from before start to here, TES seems like it's actively undergoing lots of changes so I imagine all of the improvements will be made as part of that, for tracking on our side, I can list down these points and we can decide how that can be closed", "author": "shaguptashaikh", "createdAt": "2020-07-20T20:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MzkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NDQ1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457644457", "bodyText": "Does this return response even on AwsIOTException?", "author": "ShirleyZheng92", "createdAt": "2020-07-20T19:34:25Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -82,18 +84,48 @@ public void handle(final HttpExchange exchange) throws IOException {\n         return response;\n     }", "originalCommit": "01fd191060ea5984485f775be67a697acae38393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NTU2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457675564", "bodyText": "Yes, it appears that it was left for a follow up that the TODO describes, for properly handling various types of errors", "author": "shaguptashaikh", "createdAt": "2020-07-20T20:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NDQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NjU1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457676555", "bodyText": "inject context instead of kernel?", "author": "MikeDombo", "createdAt": "2020-07-20T20:36:35Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException, InvalidArtifactUriException {\n+\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        // Parse artifact path\n+        Matcher s3PathMatcher = getS3PathMatcherForURI(artifact.getArtifactUri(), packageIdentifier);\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        // Get artifact from S3\n+        byte[] artifactObject = getObject(bucket, key, artifact, packageIdentifier);\n+\n+        // Perform integrity check\n+        performIntegrityCheck(artifactObject, artifact, packageIdentifier);\n+\n+        // Save file to store\n+        Files.write(saveToPath.resolve(extractFileName(key)), artifactObject, StandardOpenOption.CREATE,\n+                StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n+    }\n+\n+    private byte[] getObject(String bucket, String key, ComponentArtifact artifact,\n+                             PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException {\n+        try {\n+            TokenExchangeService tokenExchangeService = kernel.getContext().get(TokenExchangeService.class);", "originalCommit": "01fd191060ea5984485f775be67a697acae38393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTAyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462479024", "bodyText": "Why not inject TES in the constructor? You're already injecting some stuff.", "author": "MikeDombo", "createdAt": "2020-07-29T17:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NjU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwODgyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462508822", "bodyText": "This was discussed earlier, I will need a follow up PR for addressing that #300 (comment)", "author": "shaguptashaikh", "createdAt": "2020-07-29T18:40:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NjU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NzQ5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457677490", "bodyText": "Need to synchronize around this/when using the request handler. Maybe use an AtomicReference.", "author": "MikeDombo", "createdAt": "2020-07-20T20:38:25Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -32,29 +34,26 @@\n     private int port;\n     private String iotRoleAlias;\n     private HttpServerImpl server;\n-\n-    private final IotConnectionManager iotConnectionManager;\n+    private CredentialRequestHandler credentialRequestHandler;\n \n     /**\n      * Constructor.\n      * @param topics the configuration coming from kernel\n      * @param iotConnectionManager {@link IotConnectionManager}\n      */\n     @Inject\n-    public TokenExchangeService(Topics topics,\n-                                IotConnectionManager iotConnectionManager) {\n+    public TokenExchangeService(Topics topics, IotConnectionManager iotConnectionManager) {\n         super(topics);\n         // TODO: Add support for other params like role Aliases\n-        topics.lookup(PARAMETERS_CONFIG_KEY, PORT_TOPIC)\n-                .dflt(DEFAULT_PORT)\n-                .subscribe((why, newv) ->\n-                        port = Coerce.toInt(newv));\n-\n-        topics.lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC)\n-                .subscribe((why, newv) ->\n-                        iotRoleAlias = Coerce.toString(newv));\n+        topics.lookup(PARAMETERS_CONFIG_KEY, PORT_TOPIC).dflt(DEFAULT_PORT)\n+                .subscribe((why, newv) -> port = Coerce.toInt(newv));\n \n-        this.iotConnectionManager = iotConnectionManager;\n+        topics.lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC).subscribe((why, newv) -> {\n+            iotRoleAlias = Coerce.toString(newv);\n+            validateConfig();\n+            this.credentialRequestHandler =\n+                    new CredentialRequestHandler(iotRoleAlias, new IotCloudHelper(), iotConnectionManager);", "originalCommit": "01fd191060ea5984485f775be67a697acae38393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5MDE4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457690187", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-07-20T21:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NzQ5MA=="}], "type": "inlineReview"}, {"oid": "77b0df94b267fdf990c31f6e7f16168314ee0e8c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/77b0df94b267fdf990c31f6e7f16168314ee0e8c", "message": "Rebase and address comments", "committedDate": "2020-07-20T21:01:11Z", "type": "forcePushed"}, {"oid": "a806b11550906a78b0de5786901995bf62780838", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a806b11550906a78b0de5786901995bf62780838", "message": "Rebase and address comments", "committedDate": "2020-07-20T23:57:07Z", "type": "forcePushed"}, {"oid": "62024407bf8fff6df82a053760c0fd2be2015ee8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/62024407bf8fff6df82a053760c0fd2be2015ee8", "message": "Rebase and address comments", "committedDate": "2020-07-20T23:57:53Z", "type": "forcePushed"}, {"oid": "4ba80f68c001bfe1d90fdef75850e8130bf397fd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4ba80f68c001bfe1d90fdef75850e8130bf397fd", "message": "Fixes after rebasing, optimizing download", "committedDate": "2020-07-29T14:49:30Z", "type": "forcePushed"}, {"oid": "ccc3f1f543f30cbdb8fe826b5ec34e29c43c83a7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ccc3f1f543f30cbdb8fe826b5ec34e29c43c83a7", "message": "Fixes after rebasing, optimizing download", "committedDate": "2020-07-29T16:09:59Z", "type": "forcePushed"}, {"oid": "cbd347188a1a36d10c727c4869c5e8ecdbf77f9a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cbd347188a1a36d10c727c4869c5e8ecdbf77f9a", "message": "Fixes after rebasing, optimizing download", "committedDate": "2020-07-29T17:21:20Z", "type": "forcePushed"}, {"oid": "0ff6f336192512defd6498f6105841049d517c0a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0ff6f336192512defd6498f6105841049d517c0a", "message": "Fixes after rebasing, optimizing download", "committedDate": "2020-07-29T17:25:43Z", "type": "forcePushed"}, {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e8a69adb6c0e337146047be126e3bfeb7d1877e", "message": "Fixes after rebasing, optimizing download", "committedDate": "2020-07-29T17:46:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MjY1Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462472656", "bodyText": "put in finally. There's an assertion right above this which could fail and cause it not to clean up.", "author": "MikeDombo", "createdAt": "2020-07-29T17:39:12Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -132,6 +154,7 @@ static void afterAll() {\n                     component.getName(), component.getVersion().toString());\n             assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n         }\n+        cleanUpTesRoleAndAlias();", "originalCommit": "0ff6f336192512defd6498f6105841049d517c0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MzcxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462473712", "bodyText": "should this package have a UUID to make it unique?", "author": "MikeDombo", "createdAt": "2020-07-29T17:40:56Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -129,4 +150,90 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(kernelIntegTestPkgName).resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");", "originalCommit": "0ff6f336192512defd6498f6105841049d517c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNTMzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462605335", "bodyText": "I don't think this actually creates a component in cloud", "author": "ShirleyZheng92", "createdAt": "2020-07-29T21:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MzcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NDQ4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462474486", "bodyText": "why make a new context? You can get the existing context from kernel.getContext()", "author": "MikeDombo", "createdAt": "2020-07-29T17:42:04Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -129,4 +150,90 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(kernelIntegTestPkgName).resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {", "originalCommit": "0ff6f336192512defd6498f6105841049d517c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwODE0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462508145", "bodyText": "I just  borrowed if from existing tests, not sure if there was a specific reason to do it this way to get a list of root packages", "author": "shaguptashaikh", "createdAt": "2020-07-29T18:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NDQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NjMzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462476335", "bodyText": "We need to delete the bucket", "author": "MikeDombo", "createdAt": "2020-07-29T17:45:02Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -129,4 +150,90 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(kernelIntegTestPkgName).resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            // Validate artifact was downloaded and integrity check passed\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"AppWithS3Artifacts-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"AppWithS3Artifacts\").resolve(\"1.0.0\")\n+                    .resolve(\"artifact.txt\").toFile(), anExistingFile());\n+        }\n+    }\n+\n+    // TODO : Remove when Component Management Service supports adding checksum to recipes\n+    private void createComponentLocallyWithS3Artifacts() throws Exception {\n+        // Create artifact object in S3\n+        Path artifactFilePath =\n+                Files.write(tempDir.resolve(\"artifact.txt\"), Collections.singletonList(\"Sample artifact content\"),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String bucketName = \"eg-e2e-component-artifacts-test\" + UUID.randomUUID().toString();", "originalCommit": "0ff6f336192512defd6498f6105841049d517c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NDQ2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462544464", "bodyText": "Why not just leave the bucket?", "author": "ShirleyZheng92", "createdAt": "2020-07-29T19:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NjMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NjkxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462476911", "bodyText": "looks like maybe a mixed up merge? I think I've seen this change before in someone else's PR.", "author": "MikeDombo", "createdAt": "2020-07-29T17:45:57Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java", "diffHunk": "@@ -36,29 +38,39 @@\n \n @Tag(\"E2E\")\n class TESTest extends BaseITCase {\n-    private Kernel kernel;\n-    private ThingInfo thingInfo;\n-    private DeviceProvisioningHelper deviceProvisioningHelper;\n-    private String roleId;\n-    private String roleName;\n-    private String roleAliasName;\n+    private static Kernel kernel;\n+    private static ThingInfo thingInfo;\n+    private static DeviceProvisioningHelper deviceProvisioningHelper;\n+    private static String roleId;\n+    private static String roleName;\n+    private static String roleAliasName;\n     private static final String AWS_REGION = \"us-east-1\";\n     private static final String TES_ROLE_NAME = \"e2etest-TES_INTEG_ROLE\";\n     private static final String TES_ROLE_ALIAS_NAME = \"e2etest-TES_INTEG_ROLE_ALIAS\";\n \n-    @BeforeEach\n-    void setupKernel() throws IOException, DeviceConfigurationException {\n+    @BeforeAll\n+    static void setupKernel() throws Exception {\n         kernel = new Kernel();\n         kernel.parseArgs(\"-i\", TESTest.class.getResource(\"tesExample.yaml\").toString());\n-        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n         roleId = UUID.randomUUID().toString();\n         roleName = TES_ROLE_NAME + roleId;\n         roleAliasName = TES_ROLE_ALIAS_NAME + roleId;\n         provision(kernel);\n+\n+        CountDownLatch tesRunning = new CountDownLatch(1);", "originalCommit": "0ff6f336192512defd6498f6105841049d517c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMzEyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462513124", "bodyText": "I've only moved the kernel setup to BeforeAll instead of doing that in all tests individually, other than that there'e no change", "author": "shaguptashaikh", "createdAt": "2020-07-29T18:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NzgxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462477817", "bodyText": "just use @AllArgsConstructor and @NoArgsConstructor, no need for the manual constructor.", "author": "MikeDombo", "createdAt": "2020-07-29T17:47:24Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Getter;\n+\n+import java.net.URI;\n+\n+@Getter\n+public class ComponentArtifact {", "originalCommit": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3ODcwNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462478704", "bodyText": "This seems a bit sketchy, doesn't the S3 client have some way to take a s3:// URL and parse it itself, instead of us parsing it?", "author": "MikeDombo", "createdAt": "2020-07-29T17:48:45Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException, InvalidArtifactUriException {\n+\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        // Parse artifact path\n+        Matcher s3PathMatcher = getS3PathMatcherForURI(artifact.getArtifactUri(), packageIdentifier);\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);", "originalCommit": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwNzY5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462507699", "bodyText": "The SDK that we are using does not have a provision for that, we also need to get bucket and key name so that the file path uses the key name", "author": "shaguptashaikh", "createdAt": "2020-07-29T18:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3ODcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTY5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462479691", "bodyText": "if it passed the check, I don't think we need an info level log.", "author": "MikeDombo", "createdAt": "2020-07-29T17:50:23Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException, InvalidArtifactUriException {\n+\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        // Parse artifact path\n+        Matcher s3PathMatcher = getS3PathMatcherForURI(artifact.getArtifactUri(), packageIdentifier);\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        // Get artifact from S3\n+        // TODO : Calculating hash for integrity check nees the whole object in memory,\n+        //  However it could be an issue in the case of large files, need to evaluate if\n+        //  there's a way to get around this\n+        byte[] artifactObject = getObject(bucket, key, artifact, packageIdentifier);\n+\n+        // Perform integrity check\n+        performIntegrityCheck(artifactObject, artifact, packageIdentifier);\n+\n+        // Save file to store\n+        Files.write(saveToPath.resolve(extractFileName(key)), artifactObject, StandardOpenOption.CREATE,\n+                StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n+    }\n+\n+    private byte[] getObject(String bucket, String key, ComponentArtifact artifact,\n+                             PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException {\n+        try {\n+            TokenExchangeService tokenExchangeService = kernel.getContext().get(TokenExchangeService.class);\n+            GetObjectRequest getObjectRequest = GetObjectRequest.builder().overrideConfiguration(\n+                    AwsRequestOverrideConfiguration.builder()\n+                            .credentialsProvider(tokenExchangeService).build())\n+                    .bucket(bucket).key(key).build();\n+            return s3Client.getObjectAsBytes(getObjectRequest).asByteArray();\n+        } catch (S3Exception e) {\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                            \"Failed to get artifact object from S3\"), e);\n+        }\n+    }\n+\n+    private Matcher getS3PathMatcherForURI(URI artifactURI, PackageIdentifier packageIdentifier)\n+            throws InvalidArtifactUriException {\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifactURI.toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new InvalidArtifactUriException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifactURI, \"Invalid artifact URI\"));\n+        }\n+        return s3PathMatcher;\n+    }\n+\n+    private void performIntegrityCheck(byte[] artifactObject, ComponentArtifact artifact,\n+                                       PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        try {\n+            String digest = Base64.getEncoder()\n+                    .encodeToString(MessageDigest.getInstance(artifact.getAlgorithm()).digest(artifactObject));\n+            if (!digest.equals(artifact.getChecksum())) {\n+                // Handle failure in integrity check\n+                throw new PackageDownloadException(\n+                        String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                                packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                                \"Integrity check for downloaded artifact failed\"));\n+            }\n+            logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)", "originalCommit": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NjAyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462656023", "bodyText": "[nit]", "author": "MikeDombo", "createdAt": "2020-07-29T23:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMzk5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r463833999", "bodyText": "Still here.", "author": "MikeDombo", "createdAt": "2020-07-31T20:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0NTgxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r463845817", "bodyText": "I thought I fixed it, finally actually did it now", "author": "shaguptashaikh", "createdAt": "2020-07-31T21:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MTY5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462481690", "bodyText": "don't hard code paths. Use a @TempDir. This won't work on windows.", "author": "MikeDombo", "createdAt": "2020-07-29T17:53:48Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/S3DownloaderTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.CloseResource\")\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class S3DownloaderTest {\n+\n+    private static final String VALID_ARTIFACT_URI = \"s3://eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String INVALID_ARTIFACT_URI = \"s3/eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String VALID_ARTIFACT_CHECKSUM = \"StbR1g+686nCVhEJERUYNWhBqXskG6b3n9CG8vVekgM=\";\n+    private static final String VALID_ALGORITHM = \"SHA-256\";\n+    private static final String VALID_ARTIFACT_CONTENT = \"Sample artifact content\";\n+    private static final String TEST_COMPONENT_NAME = \"ComponentWithS3Artifacts\";\n+    private static final String TEST_COMPONENT_VERSION = \"1.0.0\";\n+    private static final String TEST_SCOPE = \"private\";\n+\n+    @Mock\n+    private S3Client s3Client;\n+\n+    @Mock\n+    private S3SdkClientFactory s3SdkClientFactory;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private S3Downloader s3Downloader;\n+\n+    @BeforeEach\n+    void setup() {\n+        when(s3SdkClientFactory.getS3Client()).thenReturn(s3Client);\n+        s3Downloader = new S3Downloader(s3SdkClientFactory, kernel);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_download_to_path_THEN_succeed() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),", "originalCommit": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MjAxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462482013", "bodyText": "these need to be in an @After or finally, otherwise if the test fails, it won't be cleaned up.", "author": "MikeDombo", "createdAt": "2020-07-29T17:54:21Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/S3DownloaderTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.CloseResource\")\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class S3DownloaderTest {\n+\n+    private static final String VALID_ARTIFACT_URI = \"s3://eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String INVALID_ARTIFACT_URI = \"s3/eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String VALID_ARTIFACT_CHECKSUM = \"StbR1g+686nCVhEJERUYNWhBqXskG6b3n9CG8vVekgM=\";\n+    private static final String VALID_ALGORITHM = \"SHA-256\";\n+    private static final String VALID_ARTIFACT_CONTENT = \"Sample artifact content\";\n+    private static final String TEST_COMPONENT_NAME = \"ComponentWithS3Artifacts\";\n+    private static final String TEST_COMPONENT_VERSION = \"1.0.0\";\n+    private static final String TEST_SCOPE = \"private\";\n+\n+    @Mock\n+    private S3Client s3Client;\n+\n+    @Mock\n+    private S3SdkClientFactory s3SdkClientFactory;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private S3Downloader s3Downloader;\n+\n+    @BeforeEach\n+    void setup() {\n+        when(s3SdkClientFactory.getS3Client()).thenReturn(s3Client);\n+        s3Downloader = new S3Downloader(s3SdkClientFactory, kernel);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_download_to_path_THEN_succeed() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = Base64.getEncoder()\n+                .encodeToString(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(TokenExchangeService.class)).thenReturn(mock(TokenExchangeService.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), checksum, VALID_ALGORITHM), saveToPath);\n+        byte[] downloadedFile = Files.readAllBytes(saveToPath.resolve(\"artifact.txt\"));\n+        assertThat(\"Content of downloaded file should be same as the artifact content\",\n+                Arrays.equals(Files.readAllBytes(artifactFilePath), downloadedFile));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();", "originalCommit": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NTEyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462545123", "bodyText": "Why have sleep here?", "author": "ShirleyZheng92", "createdAt": "2020-07-29T19:45:28Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java", "diffHunk": "@@ -36,29 +38,39 @@\n \n @Tag(\"E2E\")\n class TESTest extends BaseITCase {\n-    private Kernel kernel;\n-    private ThingInfo thingInfo;\n-    private DeviceProvisioningHelper deviceProvisioningHelper;\n-    private String roleId;\n-    private String roleName;\n-    private String roleAliasName;\n+    private static Kernel kernel;\n+    private static ThingInfo thingInfo;\n+    private static DeviceProvisioningHelper deviceProvisioningHelper;\n+    private static String roleId;\n+    private static String roleName;\n+    private static String roleAliasName;\n     private static final String AWS_REGION = \"us-east-1\";\n     private static final String TES_ROLE_NAME = \"e2etest-TES_INTEG_ROLE\";\n     private static final String TES_ROLE_ALIAS_NAME = \"e2etest-TES_INTEG_ROLE_ALIAS\";\n \n-    @BeforeEach\n-    void setupKernel() throws IOException, DeviceConfigurationException {\n+    @BeforeAll\n+    static void setupKernel() throws Exception {\n         kernel = new Kernel();\n         kernel.parseArgs(\"-i\", TESTest.class.getResource(\"tesExample.yaml\").toString());\n-        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n         roleId = UUID.randomUUID().toString();\n         roleName = TES_ROLE_NAME + roleId;\n         roleAliasName = TES_ROLE_ALIAS_NAME + roleId;\n         provision(kernel);\n+\n+        CountDownLatch tesRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(TOKEN_EXCHANGE_SERVICE_TOPICS) && newState.equals(State.RUNNING)) {\n+                tesRunning.countDown();\n+            }\n+        });\n+        kernel.launch();\n+        assertTrue(tesRunning.await(5, TimeUnit.SECONDS));\n+        Thread.sleep(5000);", "originalCommit": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNjYxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462626613", "bodyText": "Not sure, this code was moved from individual tests to here, didn't get a chance to fix it, if it can be fixed that is", "author": "shaguptashaikh", "createdAt": "2020-07-29T22:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NTEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2ODA4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462568087", "bodyText": "why not read bytes from VALID_ARTIFACT_CONTENT directly?", "author": "ShirleyZheng92", "createdAt": "2020-07-29T20:27:45Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/S3DownloaderTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.CloseResource\")\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class S3DownloaderTest {\n+\n+    private static final String VALID_ARTIFACT_URI = \"s3://eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String INVALID_ARTIFACT_URI = \"s3/eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String VALID_ARTIFACT_CHECKSUM = \"StbR1g+686nCVhEJERUYNWhBqXskG6b3n9CG8vVekgM=\";\n+    private static final String VALID_ALGORITHM = \"SHA-256\";\n+    private static final String VALID_ARTIFACT_CONTENT = \"Sample artifact content\";\n+    private static final String TEST_COMPONENT_NAME = \"ComponentWithS3Artifacts\";\n+    private static final String TEST_COMPONENT_VERSION = \"1.0.0\";\n+    private static final String TEST_SCOPE = \"private\";\n+\n+    @Mock\n+    private S3Client s3Client;\n+\n+    @Mock\n+    private S3SdkClientFactory s3SdkClientFactory;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private S3Downloader s3Downloader;\n+\n+    @BeforeEach\n+    void setup() {\n+        when(s3SdkClientFactory.getS3Client()).thenReturn(s3Client);\n+        s3Downloader = new S3Downloader(s3SdkClientFactory, kernel);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_download_to_path_THEN_succeed() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = Base64.getEncoder()\n+                .encodeToString(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(TokenExchangeService.class)).thenReturn(mock(TokenExchangeService.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), checksum, VALID_ALGORITHM), saveToPath);\n+        byte[] downloadedFile = Files.readAllBytes(saveToPath.resolve(\"artifact.txt\"));\n+        assertThat(\"Content of downloaded file should be same as the artifact content\",\n+                Arrays.equals(Files.readAllBytes(artifactFilePath), downloadedFile));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_uri_THEN_fail() throws Exception {\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        assertThrows(InvalidArtifactUriException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(INVALID_ARTIFACT_URI), \"somechecksum\", VALID_ALGORITHM), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_checksum_THEN_fail() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = Base64.getEncoder().encodeToString(\"WrongChecksum\".getBytes(StandardCharsets.UTF_8));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(TokenExchangeService.class)).thenReturn(mock(TokenExchangeService.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), checksum, VALID_ALGORITHM), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_algorithm_THEN_fail() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);", "originalCommit": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MzI5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462643296", "bodyText": "Checksum for just the content vs checksum for it saved as file comes out to be different for some reason", "author": "shaguptashaikh", "createdAt": "2020-07-29T23:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2ODA4Nw=="}], "type": "inlineReview"}, {"oid": "ab7a42ce11e4e067ec0c8b1cc9ba08fbe61ee809", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ab7a42ce11e4e067ec0c8b1cc9ba08fbe61ee809", "message": "Address comments", "committedDate": "2020-07-29T23:16:02Z", "type": "forcePushed"}, {"oid": "f3cb8494b3280e4c573dc491d0627faafa9a8c42", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f3cb8494b3280e4c573dc491d0627faafa9a8c42", "message": "Address comments", "committedDate": "2020-07-29T23:52:24Z", "type": "forcePushed"}, {"oid": "70f8e0a561baf7f5d6a70bcc4b3997e05c049266", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/70f8e0a561baf7f5d6a70bcc4b3997e05c049266", "message": "Address comments", "committedDate": "2020-07-30T00:06:39Z", "type": "forcePushed"}, {"oid": "33e785f363e2c8b45f54078ff34a5c913ab21665", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/33e785f363e2c8b45f54078ff34a5c913ab21665", "message": "Fixes after cloud changes", "committedDate": "2020-07-31T02:19:11Z", "type": "forcePushed"}, {"oid": "e2124e50c3f2c8fa8a129f930514164bbe314552", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e2124e50c3f2c8fa8a129f930514164bbe314552", "message": "Minor enhancements", "committedDate": "2020-07-31T06:24:35Z", "type": "forcePushed"}, {"oid": "43b4fd816339a8af5f5bdf0de54ed9afb50e6442", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/43b4fd816339a8af5f5bdf0de54ed9afb50e6442", "message": "Minor enhancements", "committedDate": "2020-07-31T20:03:33Z", "type": "forcePushed"}, {"oid": "002f22cd109dbe7097e9edd53061b7a9233f8ce3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/002f22cd109dbe7097e9edd53061b7a9233f8ce3", "message": "Minor enhancements", "committedDate": "2020-07-31T21:10:47Z", "type": "forcePushed"}, {"oid": "b8f2b149f8774cc83ab3448027cfc6cede2bb038", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b8f2b149f8774cc83ab3448027cfc6cede2bb038", "message": "Download component artifacts from S3 buckets in customer account", "committedDate": "2020-07-31T23:06:10Z", "type": "commit"}, {"oid": "464dd10f225bc6cce756b22c6eeeb68fffd48d84", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/464dd10f225bc6cce756b22c6eeeb68fffd48d84", "message": "Fixes after rebasing, optimizing download", "committedDate": "2020-07-31T23:06:10Z", "type": "commit"}, {"oid": "69d5d54802093e8d891f4e746e5b32b6060fad28", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/69d5d54802093e8d891f4e746e5b32b6060fad28", "message": "Address comments", "committedDate": "2020-07-31T23:06:10Z", "type": "commit"}, {"oid": "a7db5e7408e2ae03020ebc5b8db785b665291c3f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a7db5e7408e2ae03020ebc5b8db785b665291c3f", "message": "Minor enhancements", "committedDate": "2020-07-31T23:06:10Z", "type": "commit"}, {"oid": "22639f78072288479997adb87c73c88b66255a31", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/22639f78072288479997adb87c73c88b66255a31", "message": "[e2e test]Handle changed exception for component immutability the new gamma endpoint throws", "committedDate": "2020-07-31T23:06:10Z", "type": "commit"}, {"oid": "017854a86a051e47e820b41405d766d842fbbcef", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/017854a86a051e47e820b41405d766d842fbbcef", "message": "Fixes after rebasing against latest TES changes", "committedDate": "2020-07-31T23:31:57Z", "type": "commit"}, {"oid": "017854a86a051e47e820b41405d766d842fbbcef", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/017854a86a051e47e820b41405d766d842fbbcef", "message": "Fixes after rebasing against latest TES changes", "committedDate": "2020-07-31T23:31:57Z", "type": "forcePushed"}]}