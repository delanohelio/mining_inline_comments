{"pr_number": 688, "pr_title": "Re-created pull request for platform search Nucleus changes", "pr_createdAt": "2020-11-16T17:49:18Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688", "timeline": [{"oid": "233a97ebf83b6c294073dbbc09a8c6aa6e3f304e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/233a97ebf83b6c294073dbbc09a8c6aa6e3f304e", "message": "Rollup of platform search changes", "committedDate": "2020-11-16T20:59:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyODY5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524528695", "bodyText": "NIT: space. (This is probably from my commit... )", "author": "ShirleyZheng92", "createdAt": "2020-11-16T19:45:40Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -50,15 +50,20 @@\n     public static final String ARTIFACTS_DECOMPRESSED_DIRECTORY = \"artifacts-unarchived\";\n     public static final String RECIPE_FILE_NAME_FORMAT = \"%s-%s.yaml\";\n     private final NucleusPaths nucleusPaths;\n+    private final PlatformResolver platformResolver;\n+    private final RecipeLoader recipeLoader;\n \n     /**\n      * Constructor. It will initialize recipe, artifact and artifact decompressed directory.\n-     *\n-     * @param nucleusPaths path library\n+     *  @param nucleusPaths path library", "originalCommit": "f7804bb9a8225d841f6e760f5825c3832bbe2e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2NDYxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524664615", "bodyText": ":) fixed.", "author": "JamieHunter", "createdAt": "2020-11-16T22:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyODY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzMTMyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524531322", "bodyText": "NIT: rename to platformOverrideConfig", "author": "ShirleyZheng92", "createdAt": "2020-11-16T19:50:26Z", "path": "src/test/java/com/aws/greengrass/config/PlatformResolverTest.java", "diffHunk": "@@ -5,18 +5,57 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n+import java.util.Map;\n \n-@ExtendWith(GGExtension.class)\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({GGExtension.class, MockitoExtension.class})\n class PlatformResolverTest {\n \n+    private static final ObjectMapper MAPPER = new YAMLMapper();\n+\n     @Test\n     void testCurrentPlatform() throws Exception {\n         // GG_NEEDS_REVIEW: TODO: move to UAT\n-        System.out.println(PlatformResolver.CURRENT_PLATFORM);\n+        PlatformResolver platformResolver = new PlatformResolver(null);\n+        System.out.println(platformResolver.getCurrentPlatform());\n     }\n \n+    @Test\n+    void WHEN_platform_override_THEN_override_should_take_place() throws Exception {\n+        String systemConfig = \"---\\n\"", "originalCommit": "f7804bb9a8225d841f6e760f5825c3832bbe2e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3NTg3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524675874", "bodyText": "done", "author": "JamieHunter", "createdAt": "2020-11-16T22:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzMTMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzNzMyOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524537329", "bodyText": "should we use getCurrentPlatform() instead of DETECTED_PLATFORM ?", "author": "ShirleyZheng92", "createdAt": "2020-11-16T20:00:58Z", "path": "src/main/java/com/aws/greengrass/config/PlatformResolver.java", "diffHunk": "@@ -184,8 +224,8 @@ private static Architecture getArchInfo() {\n      * @param recipeList a list of recipe input\n      * @return closest recipe\n      */\n-    public static Optional<PlatformSpecificManifest> findBestMatch(List<PlatformSpecificManifest> recipeList) {\n-        return PlatformHelper.findBestMatch(CURRENT_PLATFORM, recipeList);\n+    public Optional<PlatformSpecificManifest> findBestMatch(List<PlatformSpecificManifest> recipeList) {\n+        return PlatformHelper.findBestMatch(DETECTED_PLATFORM.get(), recipeList);", "originalCommit": "f7804bb9a8225d841f6e760f5825c3832bbe2e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY2NzMxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524667316", "bodyText": "Yes.", "author": "JamieHunter", "createdAt": "2020-11-16T22:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzNzMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5NTU4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524595587", "bodyText": "Will this break existing integ tests? eg. src/integrationtests/resources/com/aws/greengrass/integrationtests/lifecyclemanager/config.yaml", "author": "ShirleyZheng92", "createdAt": "2020-11-16T21:20:34Z", "path": "src/main/java/com/aws/greengrass/config/Configuration.java", "diffHunk": "@@ -135,19 +135,15 @@ public void mergeMap(long timestamp, Map<String, Object> map) {\n     }\n \n     /**\n-     * Merges a Map into this configuration. The merge will resolve platform.\n+     * Merges a Map into this configuration.\n      *\n      * @param map           map to merge\n      * @param updateBehavior the updateBehavior of each node to be merged in\n      */\n     public void updateMap(Map<String, Object> map, UpdateBehaviorTree updateBehavior) {\n-        Object resolvedPlatformMap = PlatformResolver.resolvePlatform(map);\n-        if (!(resolvedPlatformMap instanceof Map)) {\n-            throw new IllegalArgumentException(\"Invalid config after resolving platform: \" + resolvedPlatformMap);\n-        }", "originalCommit": "233a97ebf83b6c294073dbbc09a8c6aa6e3f304e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MDcxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524670713", "bodyText": "Apparently :(", "author": "JamieHunter", "createdAt": "2020-11-16T22:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5NTU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5ODcwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524598708", "bodyText": "NIT: maybe just append ALL to selectors before doing filter?", "author": "ShirleyZheng92", "createdAt": "2020-11-16T21:23:24Z", "path": "src/main/java/com/aws/greengrass/config/PlatformResolver.java", "diffHunk": "@@ -251,4 +292,66 @@ private static Object resolvePlatform(Map<String, Integer> ranks, Map<String, Ob\n         */\n     }\n \n+    /**\n+     * Filters lifecycle (or any other section). Input set of allowed platform keywords, and selectors\n+     * that are being applied in priority order. Configuration is not assumed to be deep.\n+     *\n+     * @param source     Source configuration (e.g. lifecycle section)\n+     * @param keywords   Set of platform keywords that are filtered. Assumed to contain ALL keyword\n+     * @param selectors  Set of selectors in priority order. ALL keyword is optional.\n+     * @return filtered config\n+     */\n+    public static Object filterPlatform(Map<String, Object> source, Set<String> keywords,\n+                                         List<String> selectors) {\n+\n+        Stream<Map.Entry<String,Object>> filtered;\n+        if (source.keySet().stream().anyMatch(k -> keywords.contains(k))) {\n+            // Selectors are provided in priority order with highest priority selector first.\n+            // Find the first selector (if any) that has a match at this level of the multi-level map.\n+            Optional<Object> selected =\n+                    selectors.stream().map(s -> source.get(s))\n+                            .filter(s -> s != null)\n+                            .findFirst();\n+            if (!selected.isPresent()) {\n+                // consider ALL keyword (this may not be in list of selectors).\n+                // Note, do not confuse this with set of keywords which does include \"ALL\".\n+                selected = Optional.ofNullable(source.get(ALL_KEYWORD));\n+            }", "originalCommit": "233a97ebf83b6c294073dbbc09a8c6aa6e3f304e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MTU5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524671590", "bodyText": "That mutates an input parameter - and I would prefer this than copy/append.", "author": "JamieHunter", "createdAt": "2020-11-16T22:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5ODcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwMDQ5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524600492", "bodyText": "Wow this is doing more than I expected. It means user can mix selector keywords and normal keys in one level.", "author": "ShirleyZheng92", "createdAt": "2020-11-16T21:24:57Z", "path": "src/main/java/com/aws/greengrass/config/PlatformResolver.java", "diffHunk": "@@ -251,4 +292,66 @@ private static Object resolvePlatform(Map<String, Integer> ranks, Map<String, Ob\n         */\n     }\n \n+    /**\n+     * Filters lifecycle (or any other section). Input set of allowed platform keywords, and selectors\n+     * that are being applied in priority order. Configuration is not assumed to be deep.\n+     *\n+     * @param source     Source configuration (e.g. lifecycle section)\n+     * @param keywords   Set of platform keywords that are filtered. Assumed to contain ALL keyword\n+     * @param selectors  Set of selectors in priority order. ALL keyword is optional.\n+     * @return filtered config\n+     */\n+    public static Object filterPlatform(Map<String, Object> source, Set<String> keywords,\n+                                         List<String> selectors) {\n+\n+        Stream<Map.Entry<String,Object>> filtered;\n+        if (source.keySet().stream().anyMatch(k -> keywords.contains(k))) {\n+            // Selectors are provided in priority order with highest priority selector first.\n+            // Find the first selector (if any) that has a match at this level of the multi-level map.\n+            Optional<Object> selected =\n+                    selectors.stream().map(s -> source.get(s))\n+                            .filter(s -> s != null)\n+                            .findFirst();\n+            if (!selected.isPresent()) {\n+                // consider ALL keyword (this may not be in list of selectors).\n+                // Note, do not confuse this with set of keywords which does include \"ALL\".\n+                selected = Optional.ofNullable(source.get(ALL_KEYWORD));\n+            }\n+            if (selected.isPresent()) {\n+                // recursively apply, allowing more specific or overlapping keywords\n+                // All other keys (lower priority or default) are effectively erased.\n+                return filterPlatformIfMap(selected.get(), keywords, selectors);\n+            }\n+            // desired selector not found. Assumed keys at this level may consist of selectors or\n+            // default keys. Remove selectors (using the inclusive keyword list) leaving just the\n+            // default keys.\n+            // This is done by filtering the working set for next stage.\n+            filtered = source.entrySet().stream().filter(e -> !keywords.contains(e.getKey()));", "originalCommit": "233a97ebf83b6c294073dbbc09a8c6aa6e3f304e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MzIxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524673215", "bodyText": "Yes... I think you'll find that's also true of the original algorithm James wrote. I will double-check.", "author": "JamieHunter", "createdAt": "2020-11-16T22:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwMDQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1MDg5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524850897", "bodyText": "Changed to be more sane.", "author": "JamieHunter", "createdAt": "2020-11-17T02:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwMDQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNDg4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524604886", "bodyText": "If selected.isPresent() and there are also regular keys, this means the regular keys will be ignored.\nI think we need to tell user clearly about this behavior, otherwise user might misunderstand that the behavior is merging selected part with the regular keys.", "author": "ShirleyZheng92", "createdAt": "2020-11-16T21:28:50Z", "path": "src/main/java/com/aws/greengrass/config/PlatformResolver.java", "diffHunk": "@@ -251,4 +292,66 @@ private static Object resolvePlatform(Map<String, Integer> ranks, Map<String, Ob\n         */\n     }\n \n+    /**\n+     * Filters lifecycle (or any other section). Input set of allowed platform keywords, and selectors\n+     * that are being applied in priority order. Configuration is not assumed to be deep.\n+     *\n+     * @param source     Source configuration (e.g. lifecycle section)\n+     * @param keywords   Set of platform keywords that are filtered. Assumed to contain ALL keyword\n+     * @param selectors  Set of selectors in priority order. ALL keyword is optional.\n+     * @return filtered config\n+     */\n+    public static Object filterPlatform(Map<String, Object> source, Set<String> keywords,\n+                                         List<String> selectors) {\n+\n+        Stream<Map.Entry<String,Object>> filtered;\n+        if (source.keySet().stream().anyMatch(k -> keywords.contains(k))) {\n+            // Selectors are provided in priority order with highest priority selector first.\n+            // Find the first selector (if any) that has a match at this level of the multi-level map.\n+            Optional<Object> selected =\n+                    selectors.stream().map(s -> source.get(s))\n+                            .filter(s -> s != null)\n+                            .findFirst();\n+            if (!selected.isPresent()) {\n+                // consider ALL keyword (this may not be in list of selectors).\n+                // Note, do not confuse this with set of keywords which does include \"ALL\".\n+                selected = Optional.ofNullable(source.get(ALL_KEYWORD));\n+            }\n+            if (selected.isPresent()) {\n+                // recursively apply, allowing more specific or overlapping keywords\n+                // All other keys (lower priority or default) are effectively erased.\n+                return filterPlatformIfMap(selected.get(), keywords, selectors);", "originalCommit": "233a97ebf83b6c294073dbbc09a8c6aa6e3f304e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3NTQ0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524675441", "bodyText": "Some logging here might be useful.", "author": "JamieHunter", "createdAt": "2020-11-16T22:23:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNDg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1MDc1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524850755", "bodyText": "I changed how this works to be more sane - hopefully :)", "author": "JamieHunter", "createdAt": "2020-11-17T02:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNDg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYxMzA0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r524613043", "bodyText": "Much cleaner !", "author": "ShirleyZheng92", "createdAt": "2020-11-16T21:35:50Z", "path": "src/main/java/com/aws/greengrass/config/Topics.java", "diffHunk": "@@ -259,30 +259,18 @@ public void updateFromMap(Map<String, Object> map, @NonNull UpdateBehaviorTree m\n         });\n \n         childrenToRemove.forEach(childName -> {\n-            UpdateBehaviorTree childMergeBehavior = mergeBehavior.getBehavior(childName.toString());\n-\n-            // remove the existing child if its merge behavior is not present and root merge behavior is REPLACE\n-            if (childMergeBehavior == null\n-                    && mergeBehavior.getDefaultBehavior() == UpdateBehaviorTree.UpdateBehavior.REPLACE) {\n-                remove(children.get(childName));\n-                return;\n-            }\n+            UpdateBehaviorTree childMergeBehavior = mergeBehavior.getChildBehavior(childName.toString());", "originalCommit": "233a97ebf83b6c294073dbbc09a8c6aa6e3f304e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c738112ee601244ab2b510d3ca0262a5ce74cb77", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c738112ee601244ab2b510d3ca0262a5ce74cb77", "message": "Platform search changes\nCo-authored by Xueli Zheng", "committedDate": "2020-11-17T02:42:37Z", "type": "forcePushed"}, {"oid": "9fa93daac5bdc50ef6426ee7083a19097691c242", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9fa93daac5bdc50ef6426ee7083a19097691c242", "message": "Platform search changes\nCo-authored by Xueli Zheng", "committedDate": "2020-11-17T02:58:36Z", "type": "forcePushed"}, {"oid": "53e1c10b1c284677c6ed268b9c3334495bedad8f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/53e1c10b1c284677c6ed268b9c3334495bedad8f", "message": "Platform search changes\nCo-authored by Xueli Zheng", "committedDate": "2020-11-17T04:24:45Z", "type": "commit"}, {"oid": "53e1c10b1c284677c6ed268b9c3334495bedad8f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/53e1c10b1c284677c6ed268b9c3334495bedad8f", "message": "Platform search changes\nCo-authored by Xueli Zheng", "committedDate": "2020-11-17T04:24:45Z", "type": "forcePushed"}, {"oid": "f865cdb3c31bff1db1d24698b09cdab940331952", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f865cdb3c31bff1db1d24698b09cdab940331952", "message": "Use old-style OS/Architecture parameters", "committedDate": "2020-11-17T07:05:28Z", "type": "forcePushed"}, {"oid": "aca41e02fdcd80ac031442043de8ee7032870230", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/aca41e02fdcd80ac031442043de8ee7032870230", "message": "Use old-style OS/Architecture parameters", "committedDate": "2020-11-17T07:19:50Z", "type": "commit"}, {"oid": "aca41e02fdcd80ac031442043de8ee7032870230", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/aca41e02fdcd80ac031442043de8ee7032870230", "message": "Use old-style OS/Architecture parameters", "committedDate": "2020-11-17T07:19:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3OTA1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r525379058", "bodyText": "uncomment", "author": "ShirleyZheng92", "createdAt": "2020-11-17T18:10:35Z", "path": "src/test/java/com/aws/greengrass/componentmanager/ComponentServiceHelperTest.java", "diffHunk": "@@ -142,6 +144,12 @@ void GIVEN_component_version_requirements_WHEN_resolve_component_version_THEN_se\n         //assertThat(request.getDeploymentConfigurationId(), is(DEPLOYMENT_CONFIGURATION_ID));\n         assertThat(request.getDeploymentConfigurationId(), notNullValue());\n         assertThat(request.getPlatform(), notNullValue());\n+        // assertThat(request.getPlatform().getAttributes(), notNullValue());\n+        // Map<String, String> attributes = request.getPlatform().getAttributes();\n+        // assertThat(attributes, hasKey(PlatformResolver.OS_KEY));\n+        // assertThat(attributes, hasKey(PlatformResolver.ARCHITECTURE_KEY));\n+        // assertThat(request.getPlatform().getOs(), nullValue());\n+        // assertThat(request.getPlatform().getArchitecture(), nullValue());", "originalCommit": "aca41e02fdcd80ac031442043de8ee7032870230", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3OTM3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/688#discussion_r525379373", "bodyText": "remove", "author": "ShirleyZheng92", "createdAt": "2020-11-17T18:11:05Z", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentServiceHelper.java", "diffHunk": "@@ -71,9 +74,10 @@ ComponentContent resolveComponentVersion(String componentName, Semver localCandi\n             Map<String, Requirement> versionRequirements, String deploymentConfigurationId)\n             throws NoAvailableComponentVersionException, ComponentVersionNegotiationException {\n \n-        // TODO: [P41215526]: Use osVersion and osFlavor for resolving component version once they are supported\n-        ComponentPlatform platform = new ComponentPlatform().withOs(PlatformResolver.CURRENT_PLATFORM.getOs().getName())\n-                .withArchitecture(PlatformResolver.CURRENT_PLATFORM.getArchitecture().getName());\n+        //ComponentPlatform platform = new ComponentPlatform().withAttributes(platformResolver.getCurrentPlatform());", "originalCommit": "aca41e02fdcd80ac031442043de8ee7032870230", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}