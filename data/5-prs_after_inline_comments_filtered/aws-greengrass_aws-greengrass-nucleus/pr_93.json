{"pr_number": 93, "pr_title": "First code cleanup of GenericExternalService", "pr_createdAt": "2020-03-03T21:31:49Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwODgxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387308811", "bodyText": "Should this make sure that the current script is stopped or we kill it if not?", "author": "MikeDombo", "createdAt": "2020-03-03T21:38:24Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -149,40 +153,34 @@ protected RunStatus run(Topic t, String cmd, IntConsumer background, Topics conf\n         final ShellRunner shellRunner = context.get(ShellRunner.class);\n         final EZTemplates templateEngine = context.get(EZTemplates.class);\n         cmd = templateEngine.rewrite(cmd).toString();\n-        setStatus(cmd);\n-        if (background == null) {\n-            setStatus(null);\n-        }\n         Exec exec = shellRunner.setup(t.getFullName(), cmd, this);\n-        currentScript = exec;\n-        if (exec != null) { // there's something to run\n-            addEnv(exec, t.parent);\n-            logger.atDebug().setEventType(\"generic-service-run\").log();\n-            RunStatus ret = shellRunner.successful(exec, cmd, background) ? RunStatus.OK : RunStatus.Errored;\n-            if (background == null) {\n-                currentScript = null;\n-            }\n-            return ret;\n-        } else {\n+        if (exec == null) {\n             return RunStatus.NothingDone;\n         }\n+        currentScript = exec;", "originalCommit": "83d3f30ab7ff345cbb31027b629eeb2a3c4a9d33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxOTE4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387319185", "bodyText": "Updated", "author": "ShirleyZheng92", "createdAt": "2020-03-03T21:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwODgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxOTg0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387319848", "bodyText": "Added a new variable 'runScript' . there could be 2 scripts running at the same time (\"run\" and \"shutdown\"), therefore currentScript doesn't cancel the previous one.", "author": "ShirleyZheng92", "createdAt": "2020-03-03T22:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMwODgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNDM0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387314340", "bodyText": "Do we really want to block forever here? That is the opposite of the original implementation. Just want to make sure that the result of this change was considered.", "author": "MikeDombo", "createdAt": "2020-03-03T21:49:14Z", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -314,9 +314,13 @@ private void exec() {\n             stdoutc.start();\n             if (whenDone == null) {\n                 try {\n-                    if (!process.waitFor(timeout, timeunit)) {\n-                        (stderr != null ? stderr : stdout).accept(\"\\n[TIMEOUT]\\n\");\n-                        process.destroyForcibly();\n+                    if (timeout < 0) {\n+                        process.waitFor();", "originalCommit": "83d3f30ab7ff345cbb31027b629eeb2a3c4a9d33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxODY4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387318680", "bodyText": "EvergreenService calling backingTask.cancel() will interrupt this and cause process.destroyForcibly().", "author": "ShirleyZheng92", "createdAt": "2020-03-03T21:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNDM0MA=="}], "type": "inlineReview"}, {"oid": "051945eb3569f2b9d5faa427be771c6e04445b31", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/051945eb3569f2b9d5faa427be771c6e04445b31", "message": "First code cleanup of GenericExternalService\n\nThis PR cleans up config parsing logic, so that config parsing logic is\ncentralized in EvergreenService and GenericExternalService.\n1. Clean up 'status' field in EvergreenService. Subclass of EvergreenService should track its status separately.\n1. Remove logic of parsing timeout from config in ShellRunner. Timingout logic is handled in EvergreenService lifecycle part.\n1. Fix shutdown behavior of GenericExternalService. running process is killed after shutdown is called.", "committedDate": "2020-03-03T21:56:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4OTI2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387889262", "bodyText": "Can we add a note here how currentScript and runScript should be used respectively?", "author": "hui-yang", "createdAt": "2020-03-04T19:36:29Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -27,6 +27,7 @@\n     private static final Pattern skipcmd = Pattern.compile(\"(exists|onpath) +(.+)\");\n     private boolean inShutdown;\n     private Exec currentScript;\n+    private Exec runScript;", "originalCommit": "051945eb3569f2b9d5faa427be771c6e04445b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNjc4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387926781", "bodyText": "currentScript is the Exec that's under run now. runScript is the script defined in \"startup\" or \"run\" block.\nwhen service is installing, currentScript = \"install\" block , runScript = null;\nwhen service is running , currentScript = runScript = \"run\"/\"startup\" block\nwhen service is shutting down, currentScript = \"shutdown\" block, runscript = \"run\"/\"startup\" block , both can be running\nI'll add a note", "author": "ShirleyZheng92", "createdAt": "2020-03-04T20:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4OTI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NDQ3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387894479", "bodyText": "Correct me if I'm wrong, serviceErrored(); will keep track of the error and try to recover later, while direct reportState() will not.", "author": "hui-yang", "createdAt": "2020-03-04T19:46:02Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -149,40 +157,34 @@ protected RunStatus run(Topic t, String cmd, IntConsumer background, Topics conf\n         final ShellRunner shellRunner = context.get(ShellRunner.class);\n         final EZTemplates templateEngine = context.get(EZTemplates.class);\n         cmd = templateEngine.rewrite(cmd).toString();\n-        setStatus(cmd);\n-        if (background == null) {\n-            setStatus(null);\n-        }\n         Exec exec = shellRunner.setup(t.getFullName(), cmd, this);\n-        currentScript = exec;\n-        if (exec != null) { // there's something to run\n-            addEnv(exec, t.parent);\n-            logger.atDebug().setEventType(\"generic-service-run\").log();\n-            RunStatus ret = shellRunner.successful(exec, cmd, background) ? RunStatus.OK : RunStatus.Errored;\n-            if (background == null) {\n-                currentScript = null;\n-            }\n-            return ret;\n-        } else {\n+        if (exec == null) {\n             return RunStatus.NothingDone;\n         }\n+        currentScript = exec;\n+        addEnv(exec, t.parent);\n+        logger.atDebug().setEventType(\"generic-service-run\").log();\n+        RunStatus ret = shellRunner.successful(exec, cmd, background) ? RunStatus.OK : RunStatus.Errored;\n+        if (background == null) {\n+            currentScript = null;\n+        }\n+        return ret;\n     }\n \n     protected RunStatus run(Topics t, IntConsumer background) {\n-        if (!shouldSkip(t)) {\n-            Node script = t.getChild(\"script\");\n-            if (script instanceof Topic) {\n-                return run((Topic) script, background, t);\n-            } else {\n-                logger.atError().setEventType(\"generic-service-invalid-config\")\n-                        .addKeyValue(\"configNode\", t.getFullName()).log(\"Missing script\");\n-                serviceErrored();", "originalCommit": "051945eb3569f2b9d5faa427be771c6e04445b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNTEwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387925105", "bodyText": "serviceErrored(throwable t) does what you said, which keeps track and log error.\nserviceError() is same as reportState(Error) .\nBoth will trigger error recovery.", "author": "ShirleyZheng92", "createdAt": "2020-03-04T20:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NDQ3OQ=="}], "type": "inlineReview"}, {"oid": "07591e05326346e00c8ab67c4f8158275af571a7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/07591e05326346e00c8ab67c4f8158275af571a7", "message": "First code cleanup of GenericExternalService\n\nThis PR cleans up config parsing logic, so that config parsing logic is\ncentralized in EvergreenService and GenericExternalService.\n1. Clean up 'status' field in EvergreenService. Subclass of EvergreenService should track its status separately.\n1. Remove logic of parsing timeout from config in ShellRunner. Timingout logic is handled in EvergreenService lifecycle part.\n1. Fix shutdown behavior of GenericExternalService. running process is killed after shutdown is called.", "committedDate": "2020-03-04T21:52:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNjUzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387426536", "bodyText": "Can the current script be not the exec for run due to race conditions ? example: run called and shutdown was called before this assignment happened.", "author": "fahadmohammed01", "createdAt": "2020-03-04T03:07:24Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -99,9 +96,14 @@ public void startup() {\n                         logger.atError().setEventType(\"generic-service-errored\").addKeyValue(\"exitCode\", exit).log();\n                     }\n                 }\n-            }) == RunStatus.NothingDone) {\n-                logger.atInfo().setEventType(\"generic-service-finished\").log(\"Nothing done\");\n+            });\n+            runScript = currentScript;", "originalCommit": "051945eb3569f2b9d5faa427be771c6e04445b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4MjY0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387982643", "bodyText": "Yes that's possible. currentScript points to \"shutdown\", runScript points to \"run\" , and both are under execution. The reason I created two variables is to handle this situation. The intention is we want 'shutdown' to run first to gracefully shutdown the service, before we try to kill the running process .", "author": "ShirleyZheng92", "createdAt": "2020-03-04T22:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNjUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NjEwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387986100", "bodyText": "Can if return the exec instead of the current approach with currentScript. I think that would make the code a bit more readable and avoids the race conditions", "author": "fahadmohammed01", "createdAt": "2020-03-04T23:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNjUzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MjgwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387972806", "bodyText": "This is used in the httpserver and cli, might want to update that", "author": "fahadmohammed01", "createdAt": "2020-03-04T22:27:59Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -62,7 +62,6 @@\n     private Future backingTask;\n     private Periodicity periodicityInformation;\n     private State prevState = State.NEW;\n-    private String status;", "originalCommit": "07591e05326346e00c8ab67c4f8158275af571a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5NDY4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387994686", "bodyText": "Ok. The reason I removed this is it's confusing against 'State' variable", "author": "ShirleyZheng92", "createdAt": "2020-03-04T23:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MjgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NTQwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387975406", "bodyText": "Can a race condition cause this currentScript to change between L165 and L170", "author": "fahadmohammed01", "createdAt": "2020-03-04T22:34:02Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -149,40 +158,34 @@ protected RunStatus run(Topic t, String cmd, IntConsumer background, Topics conf\n         final ShellRunner shellRunner = context.get(ShellRunner.class);\n         final EZTemplates templateEngine = context.get(EZTemplates.class);\n         cmd = templateEngine.rewrite(cmd).toString();\n-        setStatus(cmd);\n-        if (background == null) {\n-            setStatus(null);\n-        }\n         Exec exec = shellRunner.setup(t.getFullName(), cmd, this);\n-        currentScript = exec;\n-        if (exec != null) { // there's something to run\n-            addEnv(exec, t.parent);\n-            logger.atDebug().setEventType(\"generic-service-run\").log();\n-            RunStatus ret = shellRunner.successful(exec, cmd, background) ? RunStatus.OK : RunStatus.Errored;\n-            if (background == null) {\n-                currentScript = null;\n-            }\n-            return ret;\n-        } else {\n+        if (exec == null) {\n             return RunStatus.NothingDone;\n         }\n+        currentScript = exec;\n+        addEnv(exec, t.parent);\n+        logger.atDebug().setEventType(\"generic-service-run\").log();\n+        RunStatus ret = shellRunner.successful(exec, cmd, background) ? RunStatus.OK : RunStatus.Errored;\n+        if (background == null) {\n+            currentScript = null;", "originalCommit": "07591e05326346e00c8ab67c4f8158275af571a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NzE1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/93#discussion_r387987158", "bodyText": "Not in this implementation. currentScript = null only happens in background == null, in this case is install() and shutdown() . These methods are blocking in the lifecycle thread. I updated the PR to make sure that runScript tracks the running Exec before reportState(Running).\nHowever I agree the run() method here isn't thread safe.", "author": "ShirleyZheng92", "createdAt": "2020-03-04T23:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NTQwNg=="}], "type": "inlineReview"}, {"oid": "eae17805a88afe2c4c2216d91221ad3ff88a1590", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eae17805a88afe2c4c2216d91221ad3ff88a1590", "message": "In GenericExternalService, reportState(Running) after start the running script.", "committedDate": "2020-03-05T18:50:40Z", "type": "forcePushed"}, {"oid": "fb700f1ee8dea5e3684f464f5c13a0d03b263d63", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb700f1ee8dea5e3684f464f5c13a0d03b263d63", "message": "First code cleanup of GenericExternalService\n\nThis PR cleans up config parsing logic, so that config parsing logic is\ncentralized in EvergreenService and GenericExternalService.\n1. Clean up 'status' field in EvergreenService. Subclass of EvergreenService should track its status separately.\n1. Remove logic of parsing timeout from config in ShellRunner. Timingout logic is handled in EvergreenService lifecycle part.\n1. Fix shutdown behavior of GenericExternalService. running process is killed after shutdown is called.", "committedDate": "2020-03-05T20:30:58Z", "type": "commit"}, {"oid": "afc56accf7853176c75ec3426c957cc73b602956", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/afc56accf7853176c75ec3426c957cc73b602956", "message": "In GenericExternalService, reportState(Running) after start the running script.", "committedDate": "2020-03-05T20:30:59Z", "type": "commit"}, {"oid": "afc56accf7853176c75ec3426c957cc73b602956", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/afc56accf7853176c75ec3426c957cc73b602956", "message": "In GenericExternalService, reportState(Running) after start the running script.", "committedDate": "2020-03-05T20:30:59Z", "type": "forcePushed"}]}