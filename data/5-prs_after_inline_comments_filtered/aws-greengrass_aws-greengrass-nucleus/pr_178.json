{"pr_number": 178, "pr_title": "Add deployment e2e test under intermittent mqtt connection and multiple deployments", "pr_createdAt": "2020-04-14T02:10:40Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0Mzg5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r407843890", "bodyText": "443 isn't really MQTT, but more commonly HTTPS.", "author": "MikeDombo", "createdAt": "2020-04-14T03:25:05Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/NetworkUtils.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public abstract class NetworkUtils {\n+    protected final List<String> MQTT_PORTS = Arrays.asList(\"8883\", \"443\");", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNTA0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r408315043", "bodyText": "Based on the SDK, either port can be possibly used https://github.com/aws/aws-iot-device-sdk-java-v2/blob/28a82838a64ef61ca5235f0bb5b7824d8157bf87/sdk/src/main/java/software/amazon/awssdk/iot/AwsIotMqttConnectionBuilder.java#L65-L72 We don't hardcode the port in Deployment Service", "author": "hui-yang", "createdAt": "2020-04-14T17:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0Mzg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NDc2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409244767", "bodyText": "These are server ports, modify the name to indicate that. 443 is used in MQTT over websockets. Usually those are meant to be used when we need MQTT from browsers. We should not be using this but since we are not specifying the port, and choice of port depends if the platform has ALPN enabled or not, I would still keep it.", "author": "abanthiy", "createdAt": "2020-04-16T02:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0Mzg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDE1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r407844155", "bodyText": "Why not make this agnostic to the ports? Pass the ports in as varargs. Since the other methods are specific to what ports are enabled/disabled.", "author": "MikeDombo", "createdAt": "2020-04-14T03:26:11Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/NetworkUtilsLinux.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.util.Exec;\n+import lombok.AllArgsConstructor;\n+\n+@AllArgsConstructor\n+public class NetworkUtilsLinux extends NetworkUtils {\n+    private static final String enableOption = \"--insert\";\n+    private static final String disableOption = \"--delete\";\n+    private static final String commandFormat= \"sudo iptables %s OUTPUT -p tcp --dport %s -j REJECT && \" +\n+            \"sudo iptables %s INPUT -p tcp --sport %s -j REJECT\";\n+\n+    @Override\n+    public void disconnectMqtt() throws InterruptedException {\n+        modifyPolicy(enableOption, \"connection-loss\");\n+    }\n+\n+    @Override\n+    public void recoverMqtt() throws InterruptedException {\n+        modifyPolicy(disableOption, \"connection-recover\");\n+    }\n+\n+    private void modifyPolicy(String option, String eventName) throws InterruptedException {\n+        for (String port : MQTT_PORTS) {", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDM5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r407844392", "bodyText": "This is taking down the entire network, not the specific ports, right? Do we have a better option on mac to limit specific ports?", "author": "MikeDombo", "createdAt": "2020-04-14T03:27:16Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/NetworkUtilsMac.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.util.Exec;\n+import lombok.AllArgsConstructor;\n+\n+@AllArgsConstructor\n+public class NetworkUtilsMac extends NetworkUtils {\n+    private static final String commandFormat = \"sudo ifconfig en0 %s\";", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMDkyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r408310924", "bodyText": "I tried a few ways but couldn't find another clean and simple solution. Packet filtering does not apply to established connections on Mac.", "author": "hui-yang", "createdAt": "2020-04-14T17:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0OTM4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409249386", "bodyText": "Is en0 the only interface through which communication was happening on the machines we are testing?\nIdeally we can find out which interface was being used and put that as down. You may use 'route -n get <mqtt_endpoint> | grep interface'  to get information about which interface is being used, but this may need to be done until all interfaces are blocked. I would say spend some time to see if it is quick, otherwise may not be worth spending time on this.", "author": "abanthiy", "createdAt": "2020-04-16T02:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTQ2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r410375464", "bodyText": "Did you try the pf firewall settings? https://apple.stackexchange.com/a/230556\nIf this can't block ongoing connections, then you could potentially block the port with pf, then take down the whole network and bring it back up.", "author": "MikeDombo", "createdAt": "2020-04-17T17:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NjEyNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r411686126", "bodyText": "Yes. Tried the PF firewall settings and doesn't affect ongoing connections. So this current impl takes down the network and bring it back up.", "author": "hui-yang", "createdAt": "2020-04-20T20:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2MjQyOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r412362429", "bodyText": "@abanthiy I did some testing. en0 is a hardware interface (usually Ethernet and WiFi). When I'm on VPN, It's actually using interface utun1. Though a rare case, the interface might change during the test. I feel it might be more stable to use the hardware interface.", "author": "hui-yang", "createdAt": "2020-04-21T17:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI4MjkxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413282910", "bodyText": "ok", "author": "abanthiy", "createdAt": "2020-04-22T19:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDkwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r407844907", "bodyText": "this interface can just be Iterable.", "author": "MikeDombo", "createdAt": "2020-04-14T03:29:07Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -189,14 +258,12 @@ public static void downloadFileFromURL(String url, File f) throws IOException {\n     }\n \n     public static <T, E extends IotException> T retryIot(CrashableSupplier<T, E> func) {\n-        return retry(DEFAULT_RETRIES, DEFAULT_INITIAL_BACKOFF_MS, func, ThrottlingException.class,\n-                InternalException.class, InternalFailureException.class, LimitExceededException.class);\n+        return retry(DEFAULT_RETRIES, DEFAULT_INITIAL_BACKOFF_MS, func, retryableIoTExceptions);\n     }\n \n     @SuppressWarnings({\"PMD.AssignmentInOperand\", \"PMD.AvoidCatchingThrowable\"})\n-    @SafeVarargs\n     public static <T, E extends Throwable> T retry(int tries, int initialBackoffMillis, CrashableSupplier<T, E> func,\n-                                                   Class<? extends Throwable>... retryableExceptions) throws E {\n+                                                   Collection<Class<? extends Throwable>> retryableExceptions) throws E {", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NTQ0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r407845443", "bodyText": "Whenever we change properties like this, we should undo it in the after, so that it doens't have hard to debug effects.", "author": "MikeDombo", "createdAt": "2020-04-14T03:31:16Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.NetworkUtils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MqttReconnectTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+\n+    private static final Duration DNS_CACHE_TTL = Duration.ofSeconds(10);\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        // Setting the JVM TTL for DNS Name Lookups. By default it's set to -1, i.e. DNS entries are never\n+        // refreshed until the JVM is restarted. In this test, we break the network connection in the middle. As\n+        // a result, the AWS endpoint will be resolved to an unknown host for a short period. Set the TTL here to make\n+        // sure the unknown host entries are cleared, otherwise we will get UnknownHostException from AWS SDK clients.\n+        java.security.Security.setProperty(\"networkaddress.cache.ttl\", Long.toString(DNS_CACHE_TTL.getSeconds()));", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNDU2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409224569", "bodyText": "If we do not want to cache we can set it to 0 instead of setting it to 10?", "author": "abanthiy", "createdAt": "2020-04-16T01:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NTQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0Njk3Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r407846972", "bodyText": "Do we really need both this test and the online scenario? Surely if this one works, then so would the online version. While obviously this gives us even better assurance, I don't want us to have duplicate test cases so early on which may just be wasting time.", "author": "MikeDombo", "createdAt": "2020-04-14T03:37:08Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleDeploymentsTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MultipleDeploymentsTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+    private static final Logger logger = LogManager.getLogger(MultipleDeploymentsTest.class);\n+\n+    @BeforeEach\n+    void beforeEach() throws IOException {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MultipleDeploymentsTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_online_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        kernel.launch();\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = {thing.thingArn};\n+        for (DeploymentJobHelper helper : helpers) {\n+            helper.createJob(targets);\n+            Utils.waitForJobExecutionStatusToSatisfy(helper.jobId, thing.thingName, Duration.ofMinutes(1),\n+                    s -> s.ordinal() >= JobExecutionStatus.QUEUED.ordinal());\n+        }\n+\n+        // Wait for all jobs to finish\n+        for (DeploymentJobHelper helper : helpers) {\n+            assertTrue(helper.jobCompleted.await(2, TimeUnit.MINUTES), \"Deployment job timed out: \" + helper.jobId);\n+            Utils.waitForJobToComplete(helper.jobId, Duration.ofMinutes(2));\n+\n+            assertEquals(State.FINISHED, kernel.locate(helper.targetPkgName).getState());\n+            assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                    DescribeJobExecutionRequest.builder().jobId(helper.jobId).thingName(thing.thingName).build())\n+                    .execution().status());\n+        }\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_offline_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order_eventually()", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwOTE1Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r408309156", "bodyText": "It's a valid concern. The actual behaviors from the IoT cloud are slightly different. In the online case, I saw more duplicate notifications for the first job, while in the offline case, we just got 1 notification per job most of the case. I'll include @abanthiy here as well to decide if we should keep both cases.", "author": "hui-yang", "createdAt": "2020-04-14T17:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0Njk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzNjc3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409236773", "bodyText": "These two tests are basically same, so no point keeping them both. I would keep the offline one here (since we already test online one in the other test). When we add tests for cancellation, that time we should cover different scenario for multiple jobs and device is online.", "author": "abanthiy", "createdAt": "2020-04-16T02:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0Njk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczNjk2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r411736960", "bodyText": "Discussed offline. I'm going to keep both tests cases with more inline comments to explain the reason.", "author": "hui-yang", "createdAt": "2020-04-20T22:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0Njk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMTYwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409221601", "bodyText": "I would prefer if this method just updates the kernel config and takes ThingInfo as an input parameter.   Would also rename the method to injectDeploymentConfigurationToKernel", "author": "abanthiy", "createdAt": "2020-04-16T01:07:48Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -132,6 +178,29 @@ public static ThingInfo createThing() {\n         return info;\n     }\n \n+    public static ThingInfo setupIotResourcesAndInjectIntoKernel(Kernel kernel, Path tempRootDir) throws IOException {\n+        String rootCaFilePath = tempRootDir.resolve(\"rootCA.pem\").toString();\n+        String privateKeyFilePath = tempRootDir.resolve(\"privKey.key\").toString();\n+        String certificateFilePath = tempRootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(rootCaFilePath));\n+        ThingInfo thing = createThing();", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMjEwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409222107", "bodyText": "In Utils, can we split this into two methods, one for provisioning the device (create Iot thing, certs, groups, add the device to group) and other for updating the deployment config in kernel.", "author": "abanthiy", "createdAt": "2020-04-16T01:09:37Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -80,12 +62,12 @@ void afterEach() {\n \n     private void launchKernel(String configFile) throws IOException, InterruptedException {\n         kernel = new Kernel().parseArgs(\"-i\", DeploymentE2ETest.class.getResource(configFile).toString());\n-        setupIotResourcesAndInjectIntoKernel();\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NDYzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r411654635", "bodyText": "will do", "author": "hui-yang", "createdAt": "2020-04-20T20:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMjEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNTU5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409225590", "bodyText": "You can make these constants public and use them here instead - https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java#L58", "author": "abanthiy", "createdAt": "2020-04-16T01:22:04Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.NetworkUtils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MqttReconnectTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+\n+    private static final Duration DNS_CACHE_TTL = Duration.ofSeconds(10);\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        // Setting the JVM TTL for DNS Name Lookups. By default it's set to -1, i.e. DNS entries are never\n+        // refreshed until the JVM is restarted. In this test, we break the network connection in the middle. As\n+        // a result, the AWS endpoint will be resolved to an unknown host for a short period. Set the TTL here to make\n+        // sure the unknown host entries are cleared, otherwise we will get UnknownHostException from AWS SDK clients.\n+        java.security.Security.setProperty(\"networkaddress.cache.ttl\", Long.toString(DNS_CACHE_TTL.getSeconds()));\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MqttReconnectTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnects_THEN_job_executes_successfully()\n+            throws Exception {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        CountDownLatch jobInProgress = new CountDownLatch(1);\n+        CountDownLatch jobCompleted = new CountDownLatch(1);\n+        CountDownLatch connectionInterrupted = new CountDownLatch(1);\n+\n+        // Subscribe to persisted deployment status\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        Topics processedDeployments = deploymentServiceTopics.createInteriorChild(PROCESSED_DEPLOYMENTS_TOPICS);\n+        processedDeployments.subscribe((whatHappened, newValue) -> {\n+            if (!(newValue instanceof Topic)) {\n+                return;\n+            }\n+            Map<String, Object> deploymentDetails = (HashMap) ((Topic) newValue).getOnce();\n+            if (!deploymentDetails.get(\"JobId\").toString().equals(jobId)) {", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5Nzg4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r410497880", "bodyText": "Have we thought about making deloymentDetails a strongly typed POJO?\n\nYou can make these constants public and use them here instead - https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java#L58", "author": "leaf94", "createdAt": "2020-04-17T22:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNTU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczNjYyOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r411736628", "bodyText": "@leaf94 good idea! I'll leave that change to future iterations though, until deloymentDetails is finalized.", "author": "hui-yang", "createdAt": "2020-04-20T22:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNTU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNTg4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409225882", "bodyText": "What is stopping from creating a Thing group and putting that as a target?", "author": "abanthiy", "createdAt": "2020-04-16T01:23:11Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.NetworkUtils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MqttReconnectTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+\n+    private static final Duration DNS_CACHE_TTL = Duration.ofSeconds(10);\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        // Setting the JVM TTL for DNS Name Lookups. By default it's set to -1, i.e. DNS entries are never\n+        // refreshed until the JVM is restarted. In this test, we break the network connection in the middle. As\n+        // a result, the AWS endpoint will be resolved to an unknown host for a short period. Set the TTL here to make\n+        // sure the unknown host entries are cleared, otherwise we will get UnknownHostException from AWS SDK clients.\n+        java.security.Security.setProperty(\"networkaddress.cache.ttl\", Long.toString(DNS_CACHE_TTL.getSeconds()));\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MqttReconnectTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnects_THEN_job_executes_successfully()\n+            throws Exception {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        CountDownLatch jobInProgress = new CountDownLatch(1);\n+        CountDownLatch jobCompleted = new CountDownLatch(1);\n+        CountDownLatch connectionInterrupted = new CountDownLatch(1);\n+\n+        // Subscribe to persisted deployment status\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        Topics processedDeployments = deploymentServiceTopics.createInteriorChild(PROCESSED_DEPLOYMENTS_TOPICS);\n+        processedDeployments.subscribe((whatHappened, newValue) -> {\n+            if (!(newValue instanceof Topic)) {\n+                return;\n+            }\n+            Map<String, Object> deploymentDetails = (HashMap) ((Topic) newValue).getOnce();\n+            if (!deploymentDetails.get(\"JobId\").toString().equals(jobId)) {\n+                return;\n+            }\n+            String status = deploymentDetails.get(\"JobStatus\").toString();\n+            if (status.equals(\"IN_PROGRESS\")) {\n+                jobInProgress.countDown();\n+            } else if (jobInProgress.getCount() <= 0 && status.equals(\"SUCCEEDED\")) {\n+                jobCompleted.countDown();\n+            }\n+        });\n+\n+        // Create Job Doc\n+        String document = new ObjectMapper()\n+                .writeValueAsString(DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null)\n+                        )).build());\n+\n+        // Create job targeting our DUT\n+        String[] targets = {thing.thingArn};", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzg5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409227890", "bodyText": "Why do we need to check count of the latch here? Do we sometimes get this for both inprogress and complete updates?\nAlso, we need to check for timeout case as well, which is handled here - https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java#L358\nI would prefer making these log strings as constants in the DeploymentService and use those constants here. Otherwise this is fragile.", "author": "abanthiy", "createdAt": "2020-04-16T01:30:15Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.NetworkUtils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MqttReconnectTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+\n+    private static final Duration DNS_CACHE_TTL = Duration.ofSeconds(10);\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        // Setting the JVM TTL for DNS Name Lookups. By default it's set to -1, i.e. DNS entries are never\n+        // refreshed until the JVM is restarted. In this test, we break the network connection in the middle. As\n+        // a result, the AWS endpoint will be resolved to an unknown host for a short period. Set the TTL here to make\n+        // sure the unknown host entries are cleared, otherwise we will get UnknownHostException from AWS SDK clients.\n+        java.security.Security.setProperty(\"networkaddress.cache.ttl\", Long.toString(DNS_CACHE_TTL.getSeconds()));\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MqttReconnectTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnects_THEN_job_executes_successfully()\n+            throws Exception {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        CountDownLatch jobInProgress = new CountDownLatch(1);\n+        CountDownLatch jobCompleted = new CountDownLatch(1);\n+        CountDownLatch connectionInterrupted = new CountDownLatch(1);\n+\n+        // Subscribe to persisted deployment status\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        Topics processedDeployments = deploymentServiceTopics.createInteriorChild(PROCESSED_DEPLOYMENTS_TOPICS);\n+        processedDeployments.subscribe((whatHappened, newValue) -> {\n+            if (!(newValue instanceof Topic)) {\n+                return;\n+            }\n+            Map<String, Object> deploymentDetails = (HashMap) ((Topic) newValue).getOnce();\n+            if (!deploymentDetails.get(\"JobId\").toString().equals(jobId)) {\n+                return;\n+            }\n+            String status = deploymentDetails.get(\"JobStatus\").toString();\n+            if (status.equals(\"IN_PROGRESS\")) {\n+                jobInProgress.countDown();\n+            } else if (jobInProgress.getCount() <= 0 && status.equals(\"SUCCEEDED\")) {\n+                jobCompleted.countDown();\n+            }\n+        });\n+\n+        // Create Job Doc\n+        String document = new ObjectMapper()\n+                .writeValueAsString(DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null)\n+                        )).build());\n+\n+        // Create job targeting our DUT\n+        String[] targets = {thing.thingArn};\n+        Utils.createJobWithId(document, targets, jobId);\n+\n+        kernel.launch();\n+\n+        assertTrue(jobInProgress.await(2, TimeUnit.MINUTES));\n+        NetworkUtils networkUtils = NetworkUtils.getByPlatform();\n+        Consumer<EvergreenStructuredLogMessage> logListener = m -> {\n+            String message = m.getMessage();\n+            if (connectionInterrupted.getCount() > 0 && message != null", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczNjIxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r411736211", "bodyText": "Will do.", "author": "hui-yang", "createdAt": "2020-04-20T22:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMTc0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409231742", "bodyText": "Similar as before, whats missing from creating the group and adding that as target?", "author": "abanthiy", "createdAt": "2020-04-16T01:44:11Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleDeploymentsTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MultipleDeploymentsTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+    private static final Logger logger = LogManager.getLogger(MultipleDeploymentsTest.class);\n+\n+    @BeforeEach\n+    void beforeEach() throws IOException {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MultipleDeploymentsTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_online_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        kernel.launch();\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMjg4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409232884", "bodyText": "If this class is meant to create different deployment documents then it should be named as DeploymentDocumentCreationHelper. Also it can be pulled out and used in both the test classes?", "author": "abanthiy", "createdAt": "2020-04-16T01:48:18Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleDeploymentsTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MultipleDeploymentsTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+    private static final Logger logger = LogManager.getLogger(MultipleDeploymentsTest.class);\n+\n+    @BeforeEach\n+    void beforeEach() throws IOException {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MultipleDeploymentsTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_online_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        kernel.launch();\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = {thing.thingArn};\n+        for (DeploymentJobHelper helper : helpers) {\n+            helper.createJob(targets);\n+            Utils.waitForJobExecutionStatusToSatisfy(helper.jobId, thing.thingName, Duration.ofMinutes(1),\n+                    s -> s.ordinal() >= JobExecutionStatus.QUEUED.ordinal());\n+        }\n+\n+        // Wait for all jobs to finish\n+        for (DeploymentJobHelper helper : helpers) {\n+            assertTrue(helper.jobCompleted.await(2, TimeUnit.MINUTES), \"Deployment job timed out: \" + helper.jobId);\n+            Utils.waitForJobToComplete(helper.jobId, Duration.ofMinutes(2));\n+\n+            assertEquals(State.FINISHED, kernel.locate(helper.targetPkgName).getState());\n+            assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                    DescribeJobExecutionRequest.builder().jobId(helper.jobId).thingName(thing.thingName).build())\n+                    .execution().status());\n+        }\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_offline_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order_eventually()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = {thing.thingArn};\n+        for (DeploymentJobHelper helper : helpers) {\n+            helper.createJob(targets);\n+            Utils.waitForJobExecutionStatusToSatisfy(helper.jobId, thing.thingName, Duration.ofMinutes(1),\n+                    s -> s.ordinal() >= JobExecutionStatus.QUEUED.ordinal());\n+        }\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Start kernel and connect IoT cloud\n+        kernel.launch();\n+\n+        // Wait for all jobs to finish\n+        for (DeploymentJobHelper helper : helpers) {\n+            assertTrue(helper.jobCompleted.await(2, TimeUnit.MINUTES), \"Deployment job timed out: \" + helper.jobId);\n+            Utils.waitForJobToComplete(helper.jobId, Duration.ofMinutes(2));\n+\n+            assertEquals(State.FINISHED, kernel.locate(helper.targetPkgName).getState());\n+            assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                    DescribeJobExecutionRequest.builder().jobId(helper.jobId).thingName(thing.thingName).build())\n+                    .execution().status());\n+        }\n+    }\n+\n+    private void subscribeToLocalDeploymentStatus(Kernel kernel, List<DeploymentJobHelper> helpers) {\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        Topics processedDeployments = deploymentServiceTopics.createInteriorChild(PROCESSED_DEPLOYMENTS_TOPICS);\n+        processedDeployments.subscribe((whatHappened, newValue) -> {\n+            if (!(newValue instanceof Topic)) {\n+                return;\n+            }\n+            Map<String, Object> deploymentDetails = (HashMap) ((Topic) newValue).getOnce();\n+            String jobId = deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID).toString();\n+            String status = deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS).toString();\n+\n+            for (int i = 0; i < helpers.size(); i++) {\n+                if (i > 0 && helpers.get(i - 1).jobCompleted.getCount() > 0) {\n+                    logger.atWarn().kv(\"jobId\", helpers.get(i-1).jobId).log(\"Waiting for deployment job to complete\");\n+                    break;\n+                }\n+                if (helpers.get(i).jobId.equals(jobId) && status.equals(\"SUCCEEDED\")) {\n+                    logger.atWarn().kv(\"jobId\", helpers.get(i).jobId).log(\"Deployment job has completed\");\n+                    helpers.get(i).jobCompleted.countDown();\n+                    break;\n+                }\n+            }\n+        });\n+    }\n+\n+    class DeploymentJobHelper {", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMzg1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409233851", "bodyText": "In addition to previous comment, I would not create the Iot Job in this method and only create the deployment document.", "author": "abanthiy", "createdAt": "2020-04-16T01:51:52Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleDeploymentsTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MultipleDeploymentsTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+    private static final Logger logger = LogManager.getLogger(MultipleDeploymentsTest.class);\n+\n+    @BeforeEach\n+    void beforeEach() throws IOException {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MultipleDeploymentsTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_online_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        kernel.launch();\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = {thing.thingArn};\n+        for (DeploymentJobHelper helper : helpers) {\n+            helper.createJob(targets);\n+            Utils.waitForJobExecutionStatusToSatisfy(helper.jobId, thing.thingName, Duration.ofMinutes(1),\n+                    s -> s.ordinal() >= JobExecutionStatus.QUEUED.ordinal());\n+        }\n+\n+        // Wait for all jobs to finish\n+        for (DeploymentJobHelper helper : helpers) {\n+            assertTrue(helper.jobCompleted.await(2, TimeUnit.MINUTES), \"Deployment job timed out: \" + helper.jobId);\n+            Utils.waitForJobToComplete(helper.jobId, Duration.ofMinutes(2));\n+\n+            assertEquals(State.FINISHED, kernel.locate(helper.targetPkgName).getState());\n+            assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                    DescribeJobExecutionRequest.builder().jobId(helper.jobId).thingName(thing.thingName).build())\n+                    .execution().status());\n+        }\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_offline_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order_eventually()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = {thing.thingArn};\n+        for (DeploymentJobHelper helper : helpers) {\n+            helper.createJob(targets);\n+            Utils.waitForJobExecutionStatusToSatisfy(helper.jobId, thing.thingName, Duration.ofMinutes(1),\n+                    s -> s.ordinal() >= JobExecutionStatus.QUEUED.ordinal());\n+        }\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Start kernel and connect IoT cloud\n+        kernel.launch();\n+\n+        // Wait for all jobs to finish\n+        for (DeploymentJobHelper helper : helpers) {\n+            assertTrue(helper.jobCompleted.await(2, TimeUnit.MINUTES), \"Deployment job timed out: \" + helper.jobId);\n+            Utils.waitForJobToComplete(helper.jobId, Duration.ofMinutes(2));\n+\n+            assertEquals(State.FINISHED, kernel.locate(helper.targetPkgName).getState());\n+            assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                    DescribeJobExecutionRequest.builder().jobId(helper.jobId).thingName(thing.thingName).build())\n+                    .execution().status());\n+        }\n+    }\n+\n+    private void subscribeToLocalDeploymentStatus(Kernel kernel, List<DeploymentJobHelper> helpers) {\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        Topics processedDeployments = deploymentServiceTopics.createInteriorChild(PROCESSED_DEPLOYMENTS_TOPICS);\n+        processedDeployments.subscribe((whatHappened, newValue) -> {\n+            if (!(newValue instanceof Topic)) {\n+                return;\n+            }\n+            Map<String, Object> deploymentDetails = (HashMap) ((Topic) newValue).getOnce();\n+            String jobId = deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID).toString();\n+            String status = deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS).toString();\n+\n+            for (int i = 0; i < helpers.size(); i++) {\n+                if (i > 0 && helpers.get(i - 1).jobCompleted.getCount() > 0) {\n+                    logger.atWarn().kv(\"jobId\", helpers.get(i-1).jobId).log(\"Waiting for deployment job to complete\");\n+                    break;\n+                }\n+                if (helpers.get(i).jobId.equals(jobId) && status.equals(\"SUCCEEDED\")) {\n+                    logger.atWarn().kv(\"jobId\", helpers.get(i).jobId).log(\"Deployment job has completed\");\n+                    helpers.get(i).jobCompleted.countDown();\n+                    break;\n+                }\n+            }\n+        });\n+    }\n+\n+    class DeploymentJobHelper {\n+        String jobId;\n+        CountDownLatch jobCompleted;\n+        String targetPkgName;\n+\n+        public DeploymentJobHelper(String pkgName) {\n+            jobId = UUID.randomUUID().toString();\n+            jobCompleted= new CountDownLatch(1);\n+            targetPkgName = pkgName;\n+        }\n+\n+        public void createJob(String[] targets) throws JsonProcessingException, TimeoutException {", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMzkxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409233911", "bodyText": "Accept a list of target packages?", "author": "abanthiy", "createdAt": "2020-04-16T01:52:06Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleDeploymentsTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MultipleDeploymentsTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+    private static final Logger logger = LogManager.getLogger(MultipleDeploymentsTest.class);\n+\n+    @BeforeEach\n+    void beforeEach() throws IOException {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MultipleDeploymentsTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_online_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        kernel.launch();\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = {thing.thingArn};\n+        for (DeploymentJobHelper helper : helpers) {\n+            helper.createJob(targets);\n+            Utils.waitForJobExecutionStatusToSatisfy(helper.jobId, thing.thingName, Duration.ofMinutes(1),\n+                    s -> s.ordinal() >= JobExecutionStatus.QUEUED.ordinal());\n+        }\n+\n+        // Wait for all jobs to finish\n+        for (DeploymentJobHelper helper : helpers) {\n+            assertTrue(helper.jobCompleted.await(2, TimeUnit.MINUTES), \"Deployment job timed out: \" + helper.jobId);\n+            Utils.waitForJobToComplete(helper.jobId, Duration.ofMinutes(2));\n+\n+            assertEquals(State.FINISHED, kernel.locate(helper.targetPkgName).getState());\n+            assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                    DescribeJobExecutionRequest.builder().jobId(helper.jobId).thingName(thing.thingName).build())\n+                    .execution().status());\n+        }\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_offline_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order_eventually()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = {thing.thingArn};\n+        for (DeploymentJobHelper helper : helpers) {\n+            helper.createJob(targets);\n+            Utils.waitForJobExecutionStatusToSatisfy(helper.jobId, thing.thingName, Duration.ofMinutes(1),\n+                    s -> s.ordinal() >= JobExecutionStatus.QUEUED.ordinal());\n+        }\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Start kernel and connect IoT cloud\n+        kernel.launch();\n+\n+        // Wait for all jobs to finish\n+        for (DeploymentJobHelper helper : helpers) {\n+            assertTrue(helper.jobCompleted.await(2, TimeUnit.MINUTES), \"Deployment job timed out: \" + helper.jobId);\n+            Utils.waitForJobToComplete(helper.jobId, Duration.ofMinutes(2));\n+\n+            assertEquals(State.FINISHED, kernel.locate(helper.targetPkgName).getState());\n+            assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                    DescribeJobExecutionRequest.builder().jobId(helper.jobId).thingName(thing.thingName).build())\n+                    .execution().status());\n+        }\n+    }\n+\n+    private void subscribeToLocalDeploymentStatus(Kernel kernel, List<DeploymentJobHelper> helpers) {\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        Topics processedDeployments = deploymentServiceTopics.createInteriorChild(PROCESSED_DEPLOYMENTS_TOPICS);\n+        processedDeployments.subscribe((whatHappened, newValue) -> {\n+            if (!(newValue instanceof Topic)) {\n+                return;\n+            }\n+            Map<String, Object> deploymentDetails = (HashMap) ((Topic) newValue).getOnce();\n+            String jobId = deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID).toString();\n+            String status = deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS).toString();\n+\n+            for (int i = 0; i < helpers.size(); i++) {\n+                if (i > 0 && helpers.get(i - 1).jobCompleted.getCount() > 0) {\n+                    logger.atWarn().kv(\"jobId\", helpers.get(i-1).jobId).log(\"Waiting for deployment job to complete\");\n+                    break;\n+                }\n+                if (helpers.get(i).jobId.equals(jobId) && status.equals(\"SUCCEEDED\")) {\n+                    logger.atWarn().kv(\"jobId\", helpers.get(i).jobId).log(\"Deployment job has completed\");\n+                    helpers.get(i).jobCompleted.countDown();\n+                    break;\n+                }\n+            }\n+        });\n+    }\n+\n+    class DeploymentJobHelper {\n+        String jobId;\n+        CountDownLatch jobCompleted;\n+        String targetPkgName;", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzNTMwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409235306", "bodyText": "For the SomeService package, should this be FINISHED or RUNNING? You can put the expected state in the Helper class you are creating.", "author": "abanthiy", "createdAt": "2020-04-16T01:57:03Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleDeploymentsTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MultipleDeploymentsTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+    private static final Logger logger = LogManager.getLogger(MultipleDeploymentsTest.class);\n+\n+    @BeforeEach\n+    void beforeEach() throws IOException {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MultipleDeploymentsTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_online_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        kernel.launch();\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = {thing.thingArn};\n+        for (DeploymentJobHelper helper : helpers) {\n+            helper.createJob(targets);\n+            Utils.waitForJobExecutionStatusToSatisfy(helper.jobId, thing.thingName, Duration.ofMinutes(1),\n+                    s -> s.ordinal() >= JobExecutionStatus.QUEUED.ordinal());\n+        }\n+\n+        // Wait for all jobs to finish\n+        for (DeploymentJobHelper helper : helpers) {\n+            assertTrue(helper.jobCompleted.await(2, TimeUnit.MINUTES), \"Deployment job timed out: \" + helper.jobId);\n+            Utils.waitForJobToComplete(helper.jobId, Duration.ofMinutes(2));\n+\n+            assertEquals(State.FINISHED, kernel.locate(helper.targetPkgName).getState());\n+            assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                    DescribeJobExecutionRequest.builder().jobId(helper.jobId).thingName(thing.thingName).build())\n+                    .execution().status());\n+        }\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_offline_device_WHEN_create_multiple_deployments_THEN_deployments_execute_successfully_in_order_eventually()\n+            throws Exception {\n+        List<DeploymentJobHelper> helpers = Arrays.asList(\n+                new DeploymentJobHelper(\"GreenSignal\"),\n+                new DeploymentJobHelper(\"SomeService\"),\n+                new DeploymentJobHelper(\"CustomerApp\"));\n+\n+        // Create multiple jobs\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = {thing.thingArn};\n+        for (DeploymentJobHelper helper : helpers) {\n+            helper.createJob(targets);\n+            Utils.waitForJobExecutionStatusToSatisfy(helper.jobId, thing.thingName, Duration.ofMinutes(1),\n+                    s -> s.ordinal() >= JobExecutionStatus.QUEUED.ordinal());\n+        }\n+\n+        subscribeToLocalDeploymentStatus(kernel, helpers);\n+\n+        // Start kernel and connect IoT cloud\n+        kernel.launch();\n+\n+        // Wait for all jobs to finish\n+        for (DeploymentJobHelper helper : helpers) {\n+            assertTrue(helper.jobCompleted.await(2, TimeUnit.MINUTES), \"Deployment job timed out: \" + helper.jobId);\n+            Utils.waitForJobToComplete(helper.jobId, Duration.ofMinutes(2));\n+\n+            assertEquals(State.FINISHED, kernel.locate(helper.targetPkgName).getState());", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MjY5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r411652695", "bodyText": "All these test packages have a run block that executes very fast and end with FINISHED state.", "author": "hui-yang", "createdAt": "2020-04-20T20:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzNTMwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NTMxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409245315", "bodyText": "Do you need the destination port? You can only block what is coming from the server, and the client port is random.", "author": "abanthiy", "createdAt": "2020-04-16T02:35:18Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/NetworkUtilsLinux.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.util.Exec;\n+import lombok.AllArgsConstructor;\n+\n+@AllArgsConstructor\n+public class NetworkUtilsLinux extends NetworkUtils {\n+    private static final String enableOption = \"--insert\";\n+    private static final String disableOption = \"--delete\";\n+    private static final String commandFormat= \"sudo iptables %s OUTPUT -p tcp --dport %s -j REJECT && \" +", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MTEzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r411651139", "bodyText": "Yes. The commands here are only filtering the server side ports", "author": "hui-yang", "createdAt": "2020-04-20T19:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NTMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1MDU1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r409250553", "bodyText": "If there are two deployments with same id but different DeploymentType, they will be treated same, which is not desired. Include deploymentType for equals comparison as well.", "author": "abanthiy", "createdAt": "2020-04-16T02:54:02Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/Deployment.java", "diffHunk": "@@ -6,13 +6,16 @@\n package com.aws.iot.evergreen.deployment.model;\n \n import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n \n @AllArgsConstructor\n @Getter\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n public class Deployment {\n     private String deploymentDocument;\n     private DeploymentType deploymentType;", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwNDA2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r410504061", "bodyText": "If there are two deployments with same id but different DeploymentType, they will be treated same, which is not desired. Include deploymentType for equals comparison as well.\n\nWhat does it mean when two deployment with same id but different type?", "author": "leaf94", "createdAt": "2020-04-17T22:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1MDU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczNTc2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r411735765", "bodyText": "Discussed offline. Shadow-based deployments and IoT-job based deployments are managed separately and we need to investigate further whether we can make sure the deployment ID is unique across all. Will add type to equal comparison for now.", "author": "hui-yang", "createdAt": "2020-04-20T22:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1MDU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NjY3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r410496674", "bodyText": "Thanks! I should've made this into a FileUtils. It is useful!", "author": "leaf94", "createdAt": "2020-04-17T22:19:16Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -80,12 +62,12 @@ void afterEach() {\n \n     private void launchKernel(String configFile) throws IOException, InterruptedException {\n         kernel = new Kernel().parseArgs(\"-i\", DeploymentE2ETest.class.getResource(configFile).toString());\n-        setupIotResourcesAndInjectIntoKernel();\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n         kernel.launch();\n \n         Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n         // pre-load contents to package store\n-        copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NzQ1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r410497453", "bodyText": "I understand we need to do many wait in this test but can we make the timeout shorter? 10 minutes for a test to fail to too long for further maintenance...", "author": "leaf94", "createdAt": "2020-04-17T22:22:14Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.NetworkUtils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MqttReconnectTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+\n+    private static final Duration DNS_CACHE_TTL = Duration.ofSeconds(10);\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        // Setting the JVM TTL for DNS Name Lookups. By default it's set to -1, i.e. DNS entries are never\n+        // refreshed until the JVM is restarted. In this test, we break the network connection in the middle. As\n+        // a result, the AWS endpoint will be resolved to an unknown host for a short period. Set the TTL here to make\n+        // sure the unknown host entries are cleared, otherwise we will get UnknownHostException from AWS SDK clients.\n+        java.security.Security.setProperty(\"networkaddress.cache.ttl\", Long.toString(DNS_CACHE_TTL.getSeconds()));\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MqttReconnectTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.packageStorePath);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMzQ3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r410503477", "bodyText": "nit cmd -> platform", "author": "leaf94", "createdAt": "2020-04-17T22:44:25Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/NetworkUtils.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public abstract class NetworkUtils {\n+    protected final List<String> MQTT_PORTS = Arrays.asList(\"8883\", \"443\");\n+    protected static final Logger logger = LogManager.getLogger(NetworkUtils.class);\n+\n+    private enum Platform {\n+        UNKNOWN, LINUX, MACOS\n+    }\n+    private static final Platform cmd = initialize();", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwNDQ1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r410504451", "bodyText": "When can this be null?", "author": "leaf94", "createdAt": "2020-04-17T22:48:32Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -267,10 +267,17 @@ private void mergeActiveRootPackages(Set<String> rootPackagesToResolve,\n \n     private String buildErrorMessage(final String pkgName, final Map<String, Semver> resolvedPackageNameToVersion,\n                                      final Map<String, String> versionConstraints) {\n-        Map<PackageIdentifier, String> pkgIdToVersionRequirements = new HashMap<>();\n-        versionConstraints.forEach((dependingPkgName, versionRequirement) -> pkgIdToVersionRequirements\n-                .put(new PackageIdentifier(dependingPkgName, resolvedPackageNameToVersion.get(dependingPkgName)),\n-                        versionRequirement));\n+        Map<String, String> pkgIdToVersionRequirements = new HashMap<>();\n+        versionConstraints.forEach((dependingPkgName, versionRequirement) -> {\n+            Semver dependingPkgVersion = resolvedPackageNameToVersion.get(dependingPkgName);\n+            if (dependingPkgVersion == null) {", "originalCommit": "40da6c06c2c988fedec5ef37aa52e8292adcb82a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1MDQyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r411650425", "bodyText": "Root packages with requirements. This code path is not hit in usual cases but I've came across it in tests with wrong setup. So I feel it's safer to add the null check here.", "author": "hui-yang", "createdAt": "2020-04-20T19:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwNDQ1MQ=="}], "type": "inlineReview"}, {"oid": "9ff6e64f71c986caf6f08cd029719a8a2e1d1790", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9ff6e64f71c986caf6f08cd029719a8a2e1d1790", "message": "Add deployment e2e test under intermittent mqtt connection and multiple deployments", "committedDate": "2020-04-21T17:45:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4NzM4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413187386", "bodyText": "isn't there an enum for this? If so, can we use that instead of the string?", "author": "MikeDombo", "createdAt": "2020-04-22T17:44:02Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.NetworkUtils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.UPDATE_DEPLOYMENT_STATUS_MQTT_ERROR_LOG;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.UPDATE_DEPLOYMENT_STATUS_TIMEOUT_ERROR_LOG;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Tag(\"E2E\")\n+public class MqttReconnectTest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+    private static String thingGroupArn;\n+    private static String dnsCacheTtlPropertyKey = \"networkaddress.cache.ttl\";\n+    private String dnsCacheTtlValue;\n+\n+    private static final Duration DNS_CACHE_TTL = Duration.ofSeconds(10);\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        // Setting the JVM TTL for DNS Name Lookups. By default it's set to -1, i.e. DNS entries are never\n+        // refreshed until the JVM is restarted. In this test, we break the network connection in the middle. As\n+        // a result, the AWS endpoint will be resolved to an unknown host for a short period. Set the TTL here to make\n+        // sure the unknown host entries are cleared, otherwise we will get UnknownHostException from AWS SDK clients.\n+        dnsCacheTtlValue = java.security.Security.getProperty(dnsCacheTtlPropertyKey);\n+        java.security.Security.setProperty(dnsCacheTtlPropertyKey, Long.toString(DNS_CACHE_TTL.getSeconds()));\n+\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+\n+        kernel = new Kernel().parseArgs(\"-i\", MqttReconnectTest.class.getResource(\"blank_config.yaml\").toString());\n+        thing = Utils.setupIotResourcesAndInjectIntoKernel(kernel, tempRootDir);\n+        thingGroupArn = Utils.createThingGroupAndAddThing(thing);\n+\n+        Path localStoreContentPath = Paths.get(DeploymentE2ETest.class.getResource(\"local_store_content\").getPath());\n+        // pre-load contents to package store\n+        FileUtils.copyFolderRecursively(localStoreContentPath, kernel.getPackageStorePath());\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        // Reset to the configuration to previous setting or -1 so that DNS entries are never refreshed\n+        java.security.Security.setProperty(dnsCacheTtlPropertyKey, dnsCacheTtlValue == null ? \"-1\" : dnsCacheTtlValue);\n+\n+        if (kernel != null) {\n+            kernel.shutdown();\n+        }\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+        Utils.cleanAllCreatedThingGroups();\n+    }\n+\n+    @Timeout(value = 5, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnects_THEN_job_executes_successfully()\n+            throws Exception {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        CountDownLatch jobInProgress = new CountDownLatch(1);\n+        CountDownLatch jobCompleted = new CountDownLatch(1);\n+        CountDownLatch connectionInterrupted = new CountDownLatch(1);\n+\n+        // Subscribe to persisted deployment status\n+        Topics deploymentServiceTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC,\n+                DEPLOYMENT_SERVICE_TOPICS);\n+        Topics processedDeployments = deploymentServiceTopics.createInteriorChild(PROCESSED_DEPLOYMENTS_TOPICS);\n+        processedDeployments.subscribe((whatHappened, newValue) -> {\n+            if (!(newValue instanceof Topic)) {\n+                return;\n+            }\n+            Map<String, Object> deploymentDetails = (HashMap) ((Topic) newValue).getOnce();\n+            if (!deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID).toString().equals(jobId)) {\n+                return;\n+            }\n+            String status = deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS).toString();\n+            if (\"IN_PROGRESS\".equals(status)) {", "originalCommit": "9ff6e64f71c986caf6f08cd029719a8a2e1d1790", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5MjgzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413192835", "bodyText": "Yes. I'll update this", "author": "hui-yang", "createdAt": "2020-04-22T17:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4NzM4Ng=="}], "type": "inlineReview"}, {"oid": "592501f2d5fd4050252550d99a0abb5979a415f9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/592501f2d5fd4050252550d99a0abb5979a415f9", "message": "Add deployment e2e test under intermittent mqtt connection and multiple deployments", "committedDate": "2020-04-22T17:55:18Z", "type": "forcePushed"}, {"oid": "62a821ff5c2aecc31f9ec3e5924a8852cf59a8eb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/62a821ff5c2aecc31f9ec3e5924a8852cf59a8eb", "message": "Add deployment e2e test under intermittent mqtt connection and multiple deployments", "committedDate": "2020-04-22T22:33:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MDE0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413390140", "bodyText": "space before =", "author": "abanthiy", "createdAt": "2020-04-22T23:01:14Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/DeploymentJobDocumentHelper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.util.Arrays;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class DeploymentJobDocumentHelper {\n+    public String jobId;\n+    public CountDownLatch jobCompleted;\n+    public String targetPkgName;\n+\n+    public DeploymentJobDocumentHelper(String pkgName) {\n+        jobId = UUID.randomUUID().toString();\n+        jobCompleted= new CountDownLatch(1);", "originalCommit": "62a821ff5c2aecc31f9ec3e5924a8852cf59a8eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5ODU4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413398588", "bodyText": "Sorry if I am bringing this again and probably changing mind about naming, I feel DeploymentJob seems more apt name to me seeing what this class is doing. I think helper is an overloaded term and in my mind I expect only one helper object of a type in a class. But we initialize multiple helper of this type in the Test class, which does not look right to me. Replace this class name with DeploymentJob and the object names (in test class) with deploymentJob and see if it makes it more intuitive.", "author": "abanthiy", "createdAt": "2020-04-22T23:22:21Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/DeploymentJobDocumentHelper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.util.Arrays;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class DeploymentJobDocumentHelper {", "originalCommit": "62a821ff5c2aecc31f9ec3e5924a8852cf59a8eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMzM1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413403355", "bodyText": "Discussed offline. Going with DeploymentJobHelper for now until we found a better name to describe the usage of this class.", "author": "hui-yang", "createdAt": "2020-04-22T23:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5ODU4OA=="}], "type": "inlineReview"}, {"oid": "9d2a994cdf40303e6349685a5ad465311a5a8d0f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9d2a994cdf40303e6349685a5ad465311a5a8d0f", "message": "Add deployment e2e test under intermittent mqtt connection and multiple deployments", "committedDate": "2020-04-22T23:40:10Z", "type": "forcePushed"}, {"oid": "c8575498175ecab096e14c3592a723180f5064df", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c8575498175ecab096e14c3592a723180f5064df", "message": "Add deployment e2e test under intermittent mqtt connection and multiple deployments", "committedDate": "2020-04-23T00:06:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxNzY0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413417640", "bodyText": "This class needs to use the EGExtension as well.", "author": "MikeDombo", "createdAt": "2020-04-23T00:12:23Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentCloudServiceIntegTest.java", "diffHunk": "@@ -41,7 +43,6 @@\n import java.util.List;\n import java.util.UUID;\n \n-import static com.aws.iot.evergreen.integrationtests.e2e.deployment.DeploymentE2ETest.copyFolderRecursively;", "originalCommit": "c8575498175ecab096e14c3592a723180f5064df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxODYyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413418621", "bodyText": "I saw Shirley has a PR out so didn't address it here.", "author": "hui-yang", "createdAt": "2020-04-23T00:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxNzY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxNzk1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413417957", "bodyText": "Switch this to EGExtension.class which includes both log and processes protection.", "author": "MikeDombo", "createdAt": "2020-04-23T00:13:18Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MultipleDeploymentsTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.DeploymentJobHelper;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.PROCESSED_DEPLOYMENTS_TOPICS;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(ExceptionLogProtector.class)", "originalCommit": "c8575498175ecab096e14c3592a723180f5064df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxODcyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/178#discussion_r413418722", "bodyText": "Will address in a separate PR right away!\nUPDATE: fixed in this PR", "author": "hui-yang", "createdAt": "2020-04-23T00:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxNzk1Nw=="}], "type": "inlineReview"}, {"oid": "b561479cba635f2d6d4bc3a058fdd013763ab772", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b561479cba635f2d6d4bc3a058fdd013763ab772", "message": "messed up", "committedDate": "2020-04-23T17:10:06Z", "type": "forcePushed"}, {"oid": "715075818782b433f590187027eba1ea8f6d4c28", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/715075818782b433f590187027eba1ea8f6d4c28", "message": "Attempt to make e2e consistently pass", "committedDate": "2020-04-23T17:13:10Z", "type": "forcePushed"}, {"oid": "228b297ad1bfc6f60c51b75c7824e811d8431587", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/228b297ad1bfc6f60c51b75c7824e811d8431587", "message": "Add deployment e2e test under intermittent mqtt connection and multiple deployments", "committedDate": "2020-04-23T18:48:10Z", "type": "commit"}, {"oid": "fb112c0e356771d32624cfe7d9ee57d86164f658", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb112c0e356771d32624cfe7d9ee57d86164f658", "message": "Attempt to make e2e consistently pass", "committedDate": "2020-04-23T18:48:10Z", "type": "commit"}, {"oid": "fb112c0e356771d32624cfe7d9ee57d86164f658", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb112c0e356771d32624cfe7d9ee57d86164f658", "message": "Attempt to make e2e consistently pass", "committedDate": "2020-04-23T18:48:10Z", "type": "forcePushed"}]}