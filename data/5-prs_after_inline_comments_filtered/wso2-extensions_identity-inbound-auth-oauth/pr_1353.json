{"pr_number": 1353, "pr_title": "Fix OIDC Discovery metadata endpoint", "pr_createdAt": "2020-04-15T08:01:30Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353", "timeline": [{"oid": "166d58ce1579224c8c747d183da7e44efbf2fec5", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/166d58ce1579224c8c747d183da7e44efbf2fec5", "message": "implement method to build url", "committedDate": "2020-04-13T12:48:41Z", "type": "commit"}, {"oid": "6c76a3aa6d742b3f98b0d93cd667f13d0ebc19fa", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/6c76a3aa6d742b3f98b0d93cd667f13d0ebc19fa", "message": "change resolveUrl method usages to consume buildUrl", "committedDate": "2020-04-13T12:49:29Z", "type": "commit"}, {"oid": "9973974d887a1d8fd3f52ed54f60b5a5cedc2360", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9973974d887a1d8fd3f52ed54f60b5a5cedc2360", "message": "fix buildUrl method", "committedDate": "2020-04-15T08:22:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzOTkyNw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r409039927", "bodyText": "Other than meta data are there any other places where this method is invoked", "author": "malithie", "createdAt": "2020-04-15T18:15:29Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1170,20 +1174,14 @@ public static String getOAuth1AccessTokenUrl() {\n \n         public static String getOAuth2AuthzEPUrl() {", "originalCommit": "9973974d887a1d8fd3f52ed54f60b5a5cedc2360", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODg4NQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411338885", "bodyText": "no", "author": "chamathns", "createdAt": "2020-04-20T12:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzOTkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzMjMwMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411032303", "bodyText": "This API should be deprecated and not to be used any more. Only proxy context path will be utilized from new ServiceURLBuilder API.", "author": "malithie", "createdAt": "2020-04-20T00:56:14Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1339,49 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context, proxy context path and web context path.\n+     *\n+     * @param defaultContext                  Default URL context.\n+     * @param getValueFromFileBasedConfig     File-based Configuration.\n+     * @param addProxyContextPathInLegacyMode Add proxy context path to the URL.\n+     * @param addWebContextRootInLegacyMode   Add web context path to the URL.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig,\n+                                  boolean addProxyContextPathInLegacyMode, boolean addWebContextRootInLegacyMode) {\n+\n+        String url;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            url = buildTenantQualifiedUrl(defaultContext);\n+        } else {\n+            String oauth2EndpointURLInFile = null;\n+            if (getValueFromFileBasedConfig != null) {\n+                oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+            }\n+            if (StringUtils.isNotBlank(oauth2EndpointURLInFile)) {\n+                // Use the value configured in the file.\n+                url = oauth2EndpointURLInFile;\n+            } else {\n+                // Use the default context.\n+                url = IdentityUtil\n+                        .getServerURL(defaultContext, addProxyContextPathInLegacyMode, addWebContextRootInLegacyMode);", "originalCommit": "0674c5526fa92db40a45715c1b33b830e462988c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzMjQxNQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411032415", "bodyText": "Get rid of proxy context and web context related stuff", "author": "malithie", "createdAt": "2020-04-20T00:56:54Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1339,49 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context, proxy context path and web context path.\n+     *\n+     * @param defaultContext                  Default URL context.\n+     * @param getValueFromFileBasedConfig     File-based Configuration.\n+     * @param addProxyContextPathInLegacyMode Add proxy context path to the URL.\n+     * @param addWebContextRootInLegacyMode   Add web context path to the URL.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig,\n+                                  boolean addProxyContextPathInLegacyMode, boolean addWebContextRootInLegacyMode) {", "originalCommit": "0674c5526fa92db40a45715c1b33b830e462988c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzMjg2NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411032864", "bodyText": "Don't throw the runtime exception from the private method. Handle the error at the respective APIs that fails to throw it back only", "author": "malithie", "createdAt": "2020-04-20T00:58:57Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1339,49 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context, proxy context path and web context path.\n+     *\n+     * @param defaultContext                  Default URL context.\n+     * @param getValueFromFileBasedConfig     File-based Configuration.\n+     * @param addProxyContextPathInLegacyMode Add proxy context path to the URL.\n+     * @param addWebContextRootInLegacyMode   Add web context path to the URL.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig,\n+                                  boolean addProxyContextPathInLegacyMode, boolean addWebContextRootInLegacyMode) {\n+\n+        String url;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            url = buildTenantQualifiedUrl(defaultContext);\n+        } else {\n+            String oauth2EndpointURLInFile = null;\n+            if (getValueFromFileBasedConfig != null) {\n+                oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+            }\n+            if (StringUtils.isNotBlank(oauth2EndpointURLInFile)) {\n+                // Use the value configured in the file.\n+                url = oauth2EndpointURLInFile;\n+            } else {\n+                // Use the default context.\n+                url = IdentityUtil\n+                        .getServerURL(defaultContext, addProxyContextPathInLegacyMode, addWebContextRootInLegacyMode);\n+            }\n+        }\n+        return url;\n+    }\n+\n+    private static String buildTenantQualifiedUrl(String context) {\n+\n+        try {\n+            return ServiceURLBuilder.create().addPath(context).build().getAbsoluteURL();\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + context);", "originalCommit": "0674c5526fa92db40a45715c1b33b830e462988c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7de56f43584b50c5bfd69529a69b2cea8096ea4c", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/7de56f43584b50c5bfd69529a69b2cea8096ea4c", "message": "fix buildUrl method\nfix tests", "committedDate": "2020-04-20T03:29:43Z", "type": "commit"}, {"oid": "ee9879431af563935d360448cf99f72eeb9d77e4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/ee9879431af563935d360448cf99f72eeb9d77e4", "message": "bump framework version\nchange powermock version", "committedDate": "2020-04-20T03:30:06Z", "type": "forcePushed"}, {"oid": "64b1c3ed655921456b03da2ff90196f05f66c6e9", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/64b1c3ed655921456b03da2ff90196f05f66c6e9", "message": "bump framework version\nbump powermock version", "committedDate": "2020-04-20T05:17:52Z", "type": "commit"}, {"oid": "64b1c3ed655921456b03da2ff90196f05f66c6e9", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/64b1c3ed655921456b03da2ff90196f05f66c6e9", "message": "bump framework version\nbump powermock version", "committedDate": "2020-04-20T05:17:52Z", "type": "forcePushed"}, {"oid": "e924988a62f80b6c0cf138ccf79243f830dc3877", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/e924988a62f80b6c0cf138ccf79243f830dc3877", "message": "fix minor issues", "committedDate": "2020-04-20T10:30:55Z", "type": "forcePushed"}, {"oid": "9400163554242edc0f78ac79349bb99f8b0cd53b", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9400163554242edc0f78ac79349bb99f8b0cd53b", "message": "fix minor issues", "committedDate": "2020-04-20T11:29:56Z", "type": "commit"}, {"oid": "9400163554242edc0f78ac79349bb99f8b0cd53b", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9400163554242edc0f78ac79349bb99f8b0cd53b", "message": "fix minor issues", "committedDate": "2020-04-20T11:29:56Z", "type": "forcePushed"}, {"oid": "be676bc41eb8bca4c43dde6800a65a07858493d5", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/be676bc41eb8bca4c43dde6800a65a07858493d5", "message": "fix test cases", "committedDate": "2020-04-20T12:29:55Z", "type": "commit"}, {"oid": "573eb63dfeaed5bf5c9af4342ab41dddb0b464e3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/573eb63dfeaed5bf5c9af4342ab41dddb0b464e3", "message": "fix minor issues", "committedDate": "2020-04-20T12:44:52Z", "type": "commit"}, {"oid": "573eb63dfeaed5bf5c9af4342ab41dddb0b464e3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/573eb63dfeaed5bf5c9af4342ab41dddb0b464e3", "message": "fix minor issues", "committedDate": "2020-04-20T12:44:52Z", "type": "forcePushed"}, {"oid": "4e01651b5564220aee0d1ab53189614ca49612f8", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/4e01651b5564220aee0d1ab53189614ca49612f8", "message": "fix OAuth2AuthzEndpointTest", "committedDate": "2020-04-20T13:36:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4NjE5OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411386199", "bodyText": "Rather than passing null. It would be better to have an overloaded method with a single argument.", "author": "mefarazath", "createdAt": "2020-04-20T13:41:19Z", "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "diffHunk": "@@ -110,10 +109,8 @@ public OIDProviderConfigResponse buildOIDProviderConfig(OIDProviderRequest reque\n \n         providerConfig.setSubjectTypesSupported(new String[]{\"pairwise\"});\n \n-        providerConfig.setCheckSessionIframe(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL), true, false));\n-        providerConfig.setEndSessionEndpoint(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_LOGOUT_EP_URL), true, false));\n+        providerConfig.setCheckSessionIframe(buildUrl(IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL, null));", "originalCommit": "4e01651b5564220aee0d1ab53189614ca49612f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzU2Nw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411417567", "bodyText": "Rather doing the null check here, it would be better to have another method that does not take the getValueFromFileBasedConfig function.", "author": "mefarazath", "createdAt": "2020-04-20T14:20:18Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1319,49 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String url = null;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            try {\n+                url = buildServiceUrl(defaultContext);\n+            } catch (URLBuilderException e) {\n+                throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+            }\n+        } else {\n+            String oauth2EndpointURLInFile = null;\n+            if (getValueFromFileBasedConfig != null) {\n+                oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+            }", "originalCommit": "4e01651b5564220aee0d1ab53189614ca49612f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzcwMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411423703", "bodyText": "build from file configuration context?\nis that correct?", "author": "mefarazath", "createdAt": "2020-04-20T14:28:01Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1319,55 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.", "originalCommit": "8fc2a21e6908fe368289d0286cb236e7a31b0892", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDUxMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411434513", "bodyText": "Updated.", "author": "chamathns", "createdAt": "2020-04-20T14:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTg1MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411425850", "bodyText": "Do we need to check the tenant qualified mode check here?\nI think we can extract that if condition out to make the code mode readable", "author": "mefarazath", "createdAt": "2020-04-20T14:30:40Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1195,32 +1191,16 @@ public static String getOAuth2TokenEPUrl() {\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n+            String oauth2TokenEPUrl =\n+                    buildUrl(OAUTH2_DCR_EP_URL, OAuthServerConfiguration.getInstance()::getOAuth2DCREPUrl);\n+\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && StringUtils.isNotBlank(tenantDomain) &&", "originalCommit": "8fc2a21e6908fe368289d0286cb236e7a31b0892", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTQxNQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411431415", "bodyText": "Yes, the tenant qualified mode check is needed since we append the tenant domain as a query param only in the legacy mode.", "author": "chamathns", "createdAt": "2020-04-20T14:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTg1MA=="}], "type": "inlineReview"}, {"oid": "10c6e1d53374f99ea94c11f48f46199c3a130a1b", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/10c6e1d53374f99ea94c11f48f46199c3a130a1b", "message": "resolve minor issues", "committedDate": "2020-04-20T14:40:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0OTA2Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411449062", "bodyText": "Fix formatting.", "author": "ashensw", "createdAt": "2020-04-20T14:59:47Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,54 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context.\n+     *\n+     * @param defaultContext              Default URL context.", "originalCommit": "10c6e1d53374f99ea94c11f48f46199c3a130a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1MDY4OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411450689", "bodyText": "Fix formatting.", "author": "ashensw", "createdAt": "2020-04-20T15:01:50Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,54 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext) {\n+\n+        return buildUrl(defaultContext, null);\n+    }\n+\n+    private static String buildServiceUrl(String defaultContext, String oauth2EndpointURLInFile)\n+            throws URLBuilderException {\n+\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            return ServiceURLBuilder.create().addPath(defaultContext).build().getAbsolutePublicURL();\n+        } else if (StringUtils.isNotBlank(oauth2EndpointURLInFile)) {\n+                // Use the value configured in the file.\n+                return oauth2EndpointURLInFile;\n+            } else {", "originalCommit": "10c6e1d53374f99ea94c11f48f46199c3a130a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1Mzc0MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411453740", "bodyText": "How about having a single if statement here?", "author": "ashensw", "createdAt": "2020-04-20T15:05:31Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1258,34 +1241,26 @@ public static String getOAuth2JWKSPageUrl() throws URISyntaxException {\n \n         public static String getOidcWebFingerEPUrl() {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOidcWebFingerEPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OIDC_WEB_FINGER_EP_URL, true, false);\n-            }\n-            return IdentityUtil.resolveURL(oauth2TokenEPUrl, true, true);\n+            return buildUrl(OIDC_WEB_FINGER_EP_URL, OAuthServerConfiguration.getInstance()::getOidcWebFingerEPUrl);\n         }\n \n         public static String getOidcDiscoveryEPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oidcDiscoveryEPUrl = OAuthServerConfiguration.getInstance().getOidcDiscoveryUrl();\n-            if (StringUtils.isBlank(oidcDiscoveryEPUrl)) {\n-                oidcDiscoveryEPUrl = IdentityUtil.getServerURL(OAUTH2_DISCOVERY_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n-            }\n+            String oidcDiscoveryEPUrl = buildUrl(OAUTH2_DISCOVERY_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOidcDiscoveryUrl);\n \n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+                if (StringUtils.isNotBlank(tenantDomain) &&\n+                        !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+                    oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n+                }\n+            }", "originalCommit": "10c6e1d53374f99ea94c11f48f46199c3a130a1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1NzIwMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411457203", "bodyText": "updated.", "author": "chamathns", "createdAt": "2020-04-20T15:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1Mzc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1NDE1Nw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411454157", "bodyText": "How about having a single if statement here?", "author": "ashensw", "createdAt": "2020-04-20T15:06:02Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1230,13 +1212,14 @@ public static String getOAuth2DCREPUrl() throws URISyntaxException {\n          */\n         public static String getOAuth2JWKSPageUrl(String tenantDomain) throws URISyntaxException {\n \n-            String auth2JWKSPageUrl = OAuthServerConfiguration.getInstance().getOAuth2JWKSPageUrl();\n-            if (StringUtils.isBlank(auth2JWKSPageUrl)) {\n-                auth2JWKSPageUrl = IdentityUtil.getServerURL(OAUTH2_JWKS_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);\n+            String auth2JWKSPageUrl = buildUrl(OAUTH2_JWKS_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOAuth2JWKSPageUrl);\n+\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+                if (StringUtils.isNotBlank(tenantDomain) &&\n+                        !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+                    auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);\n+                }", "originalCommit": "10c6e1d53374f99ea94c11f48f46199c3a130a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1NDM3MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411454370", "bodyText": "How about having a single if statement here?", "author": "ashensw", "createdAt": "2020-04-20T15:06:16Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1195,30 +1191,16 @@ public static String getOAuth2TokenEPUrl() {\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);\n-            }\n-            return oauth2TokenEPUrl;\n-        }\n-\n-        /**\n-         * This method is used to get the resolved URL for the OAuth2 Registration Endpoint.\n-         *\n-         * @return String of the resolved URL for the Registration endpoint.\n-         * @throws URISyntaxException URI Syntax Exception.\n-         */\n-        public static String getOAuth2DCREPUrl() throws URISyntaxException {\n+            String oauth2TokenEPUrl =\n+                    buildUrl(OAUTH2_DCR_EP_URL, OAuthServerConfiguration.getInstance()::getOAuth2DCREPUrl);\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+                if (StringUtils.isNotBlank(tenantDomain) &&\n+                        !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+                    oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);\n+                }", "originalCommit": "10c6e1d53374f99ea94c11f48f46199c3a130a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f1e3b271b2ea5b9627bbcc5d0c42e6b5a69464b6", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/f1e3b271b2ea5b9627bbcc5d0c42e6b5a69464b6", "message": "resolve minor issues", "committedDate": "2020-04-20T15:06:58Z", "type": "forcePushed"}, {"oid": "29dcacc19ece7109e09c6b34e9fd667805da0b0f", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/29dcacc19ece7109e09c6b34e9fd667805da0b0f", "message": "resolve minor issues", "committedDate": "2020-04-20T15:09:26Z", "type": "forcePushed"}, {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/a10f38d32aa5bb16ce3fa68e107c7110431bc344", "message": "resolve minor issues", "committedDate": "2020-04-20T15:12:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyMjkxNQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411522915", "bodyText": "Shall we use a variable for request.getTenantDomain()", "author": "dewniMW", "createdAt": "2020-04-20T16:34:07Z", "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "diffHunk": "@@ -75,8 +74,8 @@ public OIDProviderConfigResponse buildOIDProviderConfig(OIDProviderRequest reque\n         providerConfig.setCodeChallengeMethodsSupported(OAuth2Util.getSupportedCodeChallengeMethods()\n                 .toArray(new String[0]));\n         try {\n-            providerConfig.setRegistrationEndpoint(OAuth2Util.OAuthURL.getOAuth2DCREPUrl());\n-            providerConfig.setJwksUri(OAuth2Util.OAuthURL.getOAuth2JWKSPageUrl());\n+            providerConfig.setRegistrationEndpoint(OAuth2Util.OAuthURL.getOAuth2DCREPUrl(request.getTenantDomain()));\n+            providerConfig.setJwksUri(OAuth2Util.OAuthURL.getOAuth2JWKSPageUrl(request.getTenantDomain()));", "originalCommit": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNDg1Mw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411824853", "bodyText": "Can we format this comment", "author": "malithie", "createdAt": "2020-04-21T02:36:16Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1194,33 +1190,19 @@ public static String getOAuth2TokenEPUrl() {\n          * @throws URISyntaxException URI Syntax Exception.\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n+            /*When the tenant-qualified url mode is enabled, ServiceURLBuilder will append the tenant domain to the\n+            url path.*/", "originalCommit": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNjI1OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411826258", "bodyText": "Looks to be this logic can be placed within and if else", "author": "malithie", "createdAt": "2020-04-21T02:40:29Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1194,33 +1190,19 @@ public static String getOAuth2TokenEPUrl() {\n          * @throws URISyntaxException URI Syntax Exception.\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n+            /*When the tenant-qualified url mode is enabled, ServiceURLBuilder will append the tenant domain to the\n+            url path.*/\n+            String oauth2TokenEPUrl =\n+                    buildUrl(OAUTH2_DCR_EP_URL, OAuthServerConfiguration.getInstance()::getOAuth2DCREPUrl);\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);\n+            /*When the tenant-qualified url mode is disabled, the tenant domain should be appended to the url as a\n+            query parameter.*/\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                    oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);", "originalCommit": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNzk4MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411827980", "bodyText": "Same mentioned above", "author": "malithie", "createdAt": "2020-04-21T02:45:51Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1229,14 +1211,15 @@ public static String getOAuth2DCREPUrl() throws URISyntaxException {\n          * @throws URISyntaxException URI Syntax Exception.\n          */\n         public static String getOAuth2JWKSPageUrl(String tenantDomain) throws URISyntaxException {\n+            /*When the tenant-qualified url mode is enabled, ServiceURLBuilder will append the tenant domain to the\n+            url path.*/\n+            String auth2JWKSPageUrl = buildUrl(OAUTH2_JWKS_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOAuth2JWKSPageUrl);\n \n-            String auth2JWKSPageUrl = OAuthServerConfiguration.getInstance().getOAuth2JWKSPageUrl();\n-            if (StringUtils.isBlank(auth2JWKSPageUrl)) {\n-                auth2JWKSPageUrl = IdentityUtil.getServerURL(OAUTH2_JWKS_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);\n+            /*When the tenant-qualified url mode is disabled, the tenant domain should be appended to the url as a\n+            query parameter.*/\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                    auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);", "originalCommit": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyODk4NQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411828985", "bodyText": "same mentioned above", "author": "malithie", "createdAt": "2020-04-21T02:49:00Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1258,34 +1241,26 @@ public static String getOAuth2JWKSPageUrl() throws URISyntaxException {\n \n         public static String getOidcWebFingerEPUrl() {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOidcWebFingerEPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OIDC_WEB_FINGER_EP_URL, true, false);\n-            }\n-            return IdentityUtil.resolveURL(oauth2TokenEPUrl, true, true);\n+            return buildUrl(OIDC_WEB_FINGER_EP_URL, OAuthServerConfiguration.getInstance()::getOidcWebFingerEPUrl);\n         }\n \n         public static String getOidcDiscoveryEPUrl(String tenantDomain) throws URISyntaxException {\n-\n-            String oidcDiscoveryEPUrl = OAuthServerConfiguration.getInstance().getOidcDiscoveryUrl();\n-            if (StringUtils.isBlank(oidcDiscoveryEPUrl)) {\n-                oidcDiscoveryEPUrl = IdentityUtil.getServerURL(OAUTH2_DISCOVERY_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n+            /*When the tenant-qualified url mode is enabled, ServiceURLBuilder will append the tenant domain to the\n+            url path.*/\n+            String oidcDiscoveryEPUrl = buildUrl(OAUTH2_DISCOVERY_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOidcDiscoveryUrl);\n+\n+            /*When the tenant-qualified url mode is disabled, the tenant domain should be appended to the url as a\n+            query parameter.*/\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n                 oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n             }", "originalCommit": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTEyOQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411829129", "bodyText": "Should this be public ?", "author": "malithie", "createdAt": "2020-04-21T02:49:34Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,60 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {", "originalCommit": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg1NjU3MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411856570", "bodyText": "Yes, we need to call this in the ProviderConfigBuilder", "author": "chamathns", "createdAt": "2020-04-21T04:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTU1NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411829554", "bodyText": "Should this be public ?", "author": "malithie", "createdAt": "2020-04-21T02:50:55Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,60 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context.\n+     *\n+     * @param defaultContext Default URL context.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext) {", "originalCommit": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTkzNQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411829935", "bodyText": "And why would we need this one", "author": "malithie", "createdAt": "2020-04-21T02:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg1OTE5Nw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411859197", "bodyText": "In ProviderConfigBuilder, we need to build a url. There, we don't have a config from the file. Instead of passing null in the above method, used this overloaded method.", "author": "chamathns", "createdAt": "2020-04-21T04:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzMDUxNw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411830517", "bodyText": "Ideally, if this is to be a public API, this should not throw a runtime exception. You should wrap this for an exception type defined in this module", "author": "malithie", "createdAt": "2020-04-21T02:53:40Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,60 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);", "originalCommit": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzMjM2Mw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411832363", "bodyText": "who handles the logic when the value in db is empty", "author": "malithie", "createdAt": "2020-04-21T02:59:29Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3145,14 +3167,8 @@ public static String getIdTokenIssuer(String tenantDomain) throws IdentityOAuth2\n         FederatedAuthenticatorConfig oidcAuthenticatorConfig =\n                 IdentityApplicationManagementUtil.getFederatedAuthenticator(fedAuthnConfigs,\n                         IdentityApplicationConstants.Authenticator.OIDC.NAME);\n-        String idpEntityId = IdentityApplicationManagementUtil.getProperty(oidcAuthenticatorConfig.getProperties(),\n+        return IdentityApplicationManagementUtil.getProperty(oidcAuthenticatorConfig.getProperties(),\n                 IDP_ENTITY_ID).getValue();\n-        if (StringUtils.isNotBlank(idpEntityId) && idpEntityId.equals(IdentityUtil.getProperty(\"OAuth.OpenIDConnect\" +\n-                \".IDTokenIssuerID\"))) {\n-            return IdentityUtil.resolveURL(idpEntityId, tenantDomain, true, false, false, false);\n-        } else {\n-            return idpEntityId;\n-        }", "originalCommit": "a10f38d32aa5bb16ce3fa68e107c7110431bc344", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3MjA2MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411872060", "bodyText": "The idPEntityId is written during the tenant creation and can't be empty", "author": "chamathns", "createdAt": "2020-04-21T05:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzMjM2Mw=="}], "type": "inlineReview"}, {"oid": "4e3cce512f738ee0dc35e8e1c3335bb87deeff93", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/4e3cce512f738ee0dc35e8e1c3335bb87deeff93", "message": "resolve minor issues", "committedDate": "2020-04-21T05:00:11Z", "type": "forcePushed"}, {"oid": "3dab7125241b7c7d540d145196d1a88b9ee51467", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/3dab7125241b7c7d540d145196d1a88b9ee51467", "message": "resolve minor issues", "committedDate": "2020-04-21T07:19:24Z", "type": "commit"}, {"oid": "3dab7125241b7c7d540d145196d1a88b9ee51467", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/3dab7125241b7c7d540d145196d1a88b9ee51467", "message": "resolve minor issues", "committedDate": "2020-04-21T07:19:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwMzk4Ng==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412103986", "bodyText": "Isn't above loading from the file config", "author": "malithie", "createdAt": "2020-04-21T11:31:08Z", "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "diffHunk": "@@ -110,10 +110,8 @@ public OIDProviderConfigResponse buildOIDProviderConfig(OIDProviderRequest reque\n \n         providerConfig.setSubjectTypesSupported(new String[]{\"pairwise\"});\n \n-        providerConfig.setCheckSessionIframe(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL), true, false));\n-        providerConfig.setEndSessionEndpoint(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_LOGOUT_EP_URL), true, false));\n+        providerConfig.setCheckSessionIframe(buildUrl(IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL));\n+        providerConfig.setEndSessionEndpoint(buildUrl(IdentityConstants.OAuth.OIDC_LOGOUT_EP_URL));", "originalCommit": "3dab7125241b7c7d540d145196d1a88b9ee51467", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3MDcwNg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412170706", "bodyText": "updated", "author": "chamathns", "createdAt": "2020-04-21T13:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwMzk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2MjcyNw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412162727", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //Append tenant domain to path when the tenant-qualified url mode is disabled.\n          \n          \n            \n                            // Append tenant domain to the path when the tenant-qualified URL mode is disabled.", "author": "mefarazath", "createdAt": "2020-04-21T13:00:02Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1258,34 +1237,24 @@ public static String getOAuth2JWKSPageUrl() throws URISyntaxException {\n \n         public static String getOidcWebFingerEPUrl() {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOidcWebFingerEPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OIDC_WEB_FINGER_EP_URL, true, false);\n-            }\n-            return IdentityUtil.resolveURL(oauth2TokenEPUrl, true, true);\n+            return buildUrl(OIDC_WEB_FINGER_EP_URL, OAuthServerConfiguration.getInstance()::getOidcWebFingerEPUrl);\n         }\n \n         public static String getOidcDiscoveryEPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oidcDiscoveryEPUrl = OAuthServerConfiguration.getInstance().getOidcDiscoveryUrl();\n-            if (StringUtils.isBlank(oidcDiscoveryEPUrl)) {\n-                oidcDiscoveryEPUrl = IdentityUtil.getServerURL(OAUTH2_DISCOVERY_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n-            }\n+            String oidcDiscoveryEPUrl = buildUrl(OAUTH2_DISCOVERY_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOidcDiscoveryUrl);\n \n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                //Append tenant domain to path when the tenant-qualified url mode is disabled.", "originalCommit": "3dab7125241b7c7d540d145196d1a88b9ee51467", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2Mjk2NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412162964", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //Append tenant domain to path when the tenant-qualified url mode is disabled.\n          \n          \n            \n                            // Append tenant domain to the path when the tenant-qualified URL mode is disabled.", "author": "mefarazath", "createdAt": "2020-04-21T13:00:23Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1195,30 +1191,14 @@ public static String getOAuth2TokenEPUrl() {\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);\n-            }\n-            return oauth2TokenEPUrl;\n-        }\n-\n-        /**\n-         * This method is used to get the resolved URL for the OAuth2 Registration Endpoint.\n-         *\n-         * @return String of the resolved URL for the Registration endpoint.\n-         * @throws URISyntaxException URI Syntax Exception.\n-         */\n-        public static String getOAuth2DCREPUrl() throws URISyntaxException {\n+            String oauth2TokenEPUrl =\n+                    buildUrl(OAUTH2_DCR_EP_URL, OAuthServerConfiguration.getInstance()::getOAuth2DCREPUrl);\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                //Append tenant domain to path when the tenant-qualified url mode is disabled.", "originalCommit": "3dab7125241b7c7d540d145196d1a88b9ee51467", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2MzExNw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412163117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //Append tenant domain to path when the tenant-qualified url mode is disabled.\n          \n          \n            \n                            // Append tenant domain to the path when the tenant-qualified URL mode is disabled.", "author": "mefarazath", "createdAt": "2020-04-21T13:00:36Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1230,13 +1210,12 @@ public static String getOAuth2DCREPUrl() throws URISyntaxException {\n          */\n         public static String getOAuth2JWKSPageUrl(String tenantDomain) throws URISyntaxException {\n \n-            String auth2JWKSPageUrl = OAuthServerConfiguration.getInstance().getOAuth2JWKSPageUrl();\n-            if (StringUtils.isBlank(auth2JWKSPageUrl)) {\n-                auth2JWKSPageUrl = IdentityUtil.getServerURL(OAUTH2_JWKS_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);\n+            String auth2JWKSPageUrl = buildUrl(OAUTH2_JWKS_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOAuth2JWKSPageUrl);\n+\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                //Append tenant domain to path when the tenant-qualified url mode is disabled.", "originalCommit": "3dab7125241b7c7d540d145196d1a88b9ee51467", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4ea1147341592552a83bb6bbe4491e937269588f", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/4ea1147341592552a83bb6bbe4491e937269588f", "message": "minor changes to the build Service Url implementation", "committedDate": "2020-04-21T13:15:36Z", "type": "forcePushed"}, {"oid": "cc00a3abd8c84a75c1d9f57f3671ce7557b49be6", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/cc00a3abd8c84a75c1d9f57f3671ce7557b49be6", "message": "minor changes to the build Service Url implementation", "committedDate": "2020-04-21T13:25:01Z", "type": "commit"}, {"oid": "cc00a3abd8c84a75c1d9f57f3671ce7557b49be6", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/cc00a3abd8c84a75c1d9f57f3671ce7557b49be6", "message": "minor changes to the build Service Url implementation", "committedDate": "2020-04-21T13:25:01Z", "type": "forcePushed"}]}