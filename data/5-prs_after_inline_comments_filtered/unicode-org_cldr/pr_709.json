{"pr_number": 709, "pr_title": "CLDR-8654 parallelize VettingViewer - 25-50% speed improvement", "pr_createdAt": "2020-09-15T16:46:09Z", "pr_url": "https://github.com/unicode-org/cldr/pull/709", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDMwMg==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r488830302", "bodyText": "The name of this is very obscure. It appears that this calls get(key) which calls getProperty() \u2014 which does have a meaningful name. The get() methods should be renamed to getProperty()", "author": "macchiati", "createdAt": "2020-09-15T17:16:04Z", "path": "tools/java/org/unicode/cldr/util/CLDRConfig.java", "diffHunk": "@@ -794,4 +794,23 @@ public static VersionInfo getVersion(int... versionInput) {\n         return VersionInfo.getInstance(version[0], version[1], version[2],\n             version[3]);\n     }\n+\n+    /**\n+     * Get a config value as an integer.\n+     * @param key key name\n+     * @param defaultValue default value\n+     * @return the value, or defaultValue if missing or unparseable.\n+     * @see CLDRConfig#get(Object)\n+     */\n+    public int get(String key, int defaultValue) {", "originalCommit": "889cf42b05815614e386264e86b48308d329b7e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NzUyMw==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r492277523", "bodyText": "So this is actually inherited from the fact that it extends Properties which extends Hashtable.\nBut I will change this to `getProperty() which is clearer.", "author": "srl295", "createdAt": "2020-09-21T18:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3OTQ4Mw==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r492279483", "bodyText": "It's worse than that, I actually already added a getProperty(String, Integer) some (years) ago.  Deleted the duplicate implementation and changing code to use that...", "author": "srl295", "createdAt": "2020-09-21T18:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4Mjg5Mg==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r492282892", "bodyText": "Done", "author": "srl295", "createdAt": "2020-09-21T19:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMjE4Ng==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r488832186", "bodyText": "It seems like it would be simpler and more understandable to use parallel streams. Or is there a problem with that?", "author": "macchiati", "createdAt": "2020-09-15T17:19:20Z", "path": "tools/java/org/unicode/cldr/util/VettingViewer.java", "diffHunk": "@@ -805,6 +807,161 @@ public void generateSummaryHtmlErrorTables(Appendable output, EnumSet<Choice> ch\n \n     }\n \n+    private class WriteContext {\n+\n+        private List<String> names = new ArrayList<>();\n+        private List<String> locales = new ArrayList<>();\n+        private StringBuffer[] outputs;\n+        private EnumSet<Choice> choices;\n+        private EnumSet<Choice> thingsThatRequireOldFile;\n+        private EnumSet<Choice> ourChoicesThatRequireOldFile;\n+        private T organization;\n+        private VettingViewer<T>.FileInfo totals;\n+        private Map<String, VettingViewer<T>.FileInfo> localeNameToFileInfo;\n+        private String header;\n+        private int configParallel; // parallelism. 0 means \"let Java decide\"\n+        private int configChunkSize; // Number of locales to process at once, minimum 1\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public WriteContext(Set<Entry<String, String>> entrySet, EnumSet<Choice> choices, T organization, FileInfo totals, Map<String, VettingViewer<T>.FileInfo> localeNameToFileInfo, String header) {\n+            for(Entry<String, String> e : entrySet) {\n+                names.add(e.getKey());\n+                locales.add(e.getValue());\n+            }\n+            int count = names.size();\n+            this.outputs = new StringBuffer[count];\n+            for(int i=0;i<count;i++) {\n+                outputs[i] = new StringBuffer();\n+            }\n+            if(DEBUG_THREADS) System.err.println(\"Initted \" + this.outputs.length + \" outputs\");\n+\n+            // other data\n+            this.choices = choices;\n+\n+            thingsThatRequireOldFile = EnumSet.of(Choice.englishChanged, Choice.missingCoverage, Choice.changedOldValue);\n+            ourChoicesThatRequireOldFile = choices.clone();\n+            ourChoicesThatRequireOldFile.retainAll(thingsThatRequireOldFile);\n+\n+            this.organization = organization;\n+            this.totals = totals;\n+            this.localeNameToFileInfo = localeNameToFileInfo;\n+            this.header = header;\n+\n+            if(DEBUG_THREADS) System.err.println(\"writeContext for \" + organization.toString() + \" booted with \" + count + \" locales\");\n+\n+            // setup env\n+            CLDRConfig config = CLDRConfig.getInstance();\n+\n+            this.configParallel = Math.max(config.get(\"CLDR_VETTINGVIEWER_PARALLEL\", 0), 0);\n+            if(this.configParallel < 1) {\n+                this.configParallel = java.lang.Runtime.getRuntime().availableProcessors(); // matches ForkJoinPool() behavior\n+            }\n+            this.configChunkSize = Math.max(config.get(\"CLDR_VETTINGVIEWER_CHUNKSIZE\", 1), 1);\n+            System.err.println(\"vv: CLDR_VETTINGVIEWER_PARALLEL=\"+configParallel+\", CLDR_VETTINGVIEWER_CHUNKSIZE=\"+configChunkSize);\n+        }\n+\n+        public void append(Appendable output) throws IOException {\n+            // all done, append all\n+            char lastChar = ' ';\n+\n+            for(int n=0;n<outputs.length;n++) {\n+              final String name = names.get(n);\n+              if(DEBUG_THREADS) System.err.println(\"Appending \" + name + \" - \" + outputs[n].length());\n+              output.append(outputs[n]);\n+\n+              char nextChar = name.charAt(0);\n+              if (lastChar != nextChar) {\n+                  output.append(this.header);\n+                  lastChar = nextChar;\n+              }\n+            }\n+        }\n+\n+        public int size() {\n+            return names.size();\n+        }\n+", "originalCommit": "889cf42b05815614e386264e86b48308d329b7e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY0MTMzOQ==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r491641339", "bodyText": "They are parallel streams? And then they are appended together at the end, including header-inclusion logic.", "author": "srl295", "createdAt": "2020-09-20T01:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMjE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4MjcwMw==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r492282703", "bodyText": "streams outputs[0\u2026n] are written in parallel by separate threads, using the ForkJoin mechanism's algorithms for efficient scheduling.  Then, all of the streams are written one after another to the requested output.", "author": "srl295", "createdAt": "2020-09-21T19:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMjE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2ODE0MA==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r492368140", "bodyText": "Here is a tutorial on them. https://docs.oracle.com/javase/tutorial/collections/streams/parallelism.html\nThere are a few instances in the unitTests, but we haven't changed older code.", "author": "macchiati", "createdAt": "2020-09-21T21:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMjE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4NzU4Mw==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r492387583", "bodyText": "OK, that's a different use of 'parallel stream' but, I think it's worth looking into.", "author": "srl295", "createdAt": "2020-09-21T22:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMjE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzNzUxNQ==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r488837515", "bodyText": "This name is misleading. It is appending this to output, rather than the reverse, so should be appendto.", "author": "macchiati", "createdAt": "2020-09-15T17:24:46Z", "path": "tools/java/org/unicode/cldr/util/VettingViewer.java", "diffHunk": "@@ -805,6 +807,161 @@ public void generateSummaryHtmlErrorTables(Appendable output, EnumSet<Choice> ch\n \n     }\n \n+    private class WriteContext {\n+\n+        private List<String> names = new ArrayList<>();\n+        private List<String> locales = new ArrayList<>();\n+        private StringBuffer[] outputs;\n+        private EnumSet<Choice> choices;\n+        private EnumSet<Choice> thingsThatRequireOldFile;\n+        private EnumSet<Choice> ourChoicesThatRequireOldFile;\n+        private T organization;\n+        private VettingViewer<T>.FileInfo totals;\n+        private Map<String, VettingViewer<T>.FileInfo> localeNameToFileInfo;\n+        private String header;\n+        private int configParallel; // parallelism. 0 means \"let Java decide\"\n+        private int configChunkSize; // Number of locales to process at once, minimum 1\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public WriteContext(Set<Entry<String, String>> entrySet, EnumSet<Choice> choices, T organization, FileInfo totals, Map<String, VettingViewer<T>.FileInfo> localeNameToFileInfo, String header) {\n+            for(Entry<String, String> e : entrySet) {\n+                names.add(e.getKey());\n+                locales.add(e.getValue());\n+            }\n+            int count = names.size();\n+            this.outputs = new StringBuffer[count];\n+            for(int i=0;i<count;i++) {\n+                outputs[i] = new StringBuffer();\n+            }\n+            if(DEBUG_THREADS) System.err.println(\"Initted \" + this.outputs.length + \" outputs\");\n+\n+            // other data\n+            this.choices = choices;\n+\n+            thingsThatRequireOldFile = EnumSet.of(Choice.englishChanged, Choice.missingCoverage, Choice.changedOldValue);\n+            ourChoicesThatRequireOldFile = choices.clone();\n+            ourChoicesThatRequireOldFile.retainAll(thingsThatRequireOldFile);\n+\n+            this.organization = organization;\n+            this.totals = totals;\n+            this.localeNameToFileInfo = localeNameToFileInfo;\n+            this.header = header;\n+\n+            if(DEBUG_THREADS) System.err.println(\"writeContext for \" + organization.toString() + \" booted with \" + count + \" locales\");\n+\n+            // setup env\n+            CLDRConfig config = CLDRConfig.getInstance();\n+\n+            this.configParallel = Math.max(config.get(\"CLDR_VETTINGVIEWER_PARALLEL\", 0), 0);\n+            if(this.configParallel < 1) {\n+                this.configParallel = java.lang.Runtime.getRuntime().availableProcessors(); // matches ForkJoinPool() behavior\n+            }\n+            this.configChunkSize = Math.max(config.get(\"CLDR_VETTINGVIEWER_CHUNKSIZE\", 1), 1);\n+            System.err.println(\"vv: CLDR_VETTINGVIEWER_PARALLEL=\"+configParallel+\", CLDR_VETTINGVIEWER_CHUNKSIZE=\"+configChunkSize);\n+        }\n+\n+        public void append(Appendable output) throws IOException {", "originalCommit": "889cf42b05815614e386264e86b48308d329b7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzODc2OQ==", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r488838769", "bodyText": "I'm guessing these are localeNames and localeIds\nI know our code has lots of bad names, but for new code we should be clearer.", "author": "macchiati", "createdAt": "2020-09-15T17:26:39Z", "path": "tools/java/org/unicode/cldr/util/VettingViewer.java", "diffHunk": "@@ -805,6 +807,161 @@ public void generateSummaryHtmlErrorTables(Appendable output, EnumSet<Choice> ch\n \n     }\n \n+    private class WriteContext {\n+\n+        private List<String> names = new ArrayList<>();", "originalCommit": "889cf42b05815614e386264e86b48308d329b7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f72cb59bcf9b7372d31f612de3855dd323d5d22c", "url": "https://github.com/unicode-org/cldr/commit/f72cb59bcf9b7372d31f612de3855dd323d5d22c", "message": "CLDR-8654 parallellize VettingViewer - 25-50% speed improvement\n\n- use a ForkJoinPool to parallelize the VV generation\n- write to separate Appendable buffers and then join them all at once\n- add CLDRConfig.get(String, int default) for fetching numeric config parameters\n- DefaultErrorStatus errorStatus was moved into getFileInfo() as it did not\nhave any long running state, and produced concurrency issues.\n\nparameters:\n\nCLDR_VETTINGVIEWER_CHUNKSIZE=1\n- number of locales each thread should process before getting\nmore work\n\nCLDR_VETTINGVIEWER_PARALLEL=0\n- number of threads (0 means 'one per CPU')", "committedDate": "2020-09-21T19:04:59Z", "type": "commit"}, {"oid": "f72cb59bcf9b7372d31f612de3855dd323d5d22c", "url": "https://github.com/unicode-org/cldr/commit/f72cb59bcf9b7372d31f612de3855dd323d5d22c", "message": "CLDR-8654 parallellize VettingViewer - 25-50% speed improvement\n\n- use a ForkJoinPool to parallelize the VV generation\n- write to separate Appendable buffers and then join them all at once\n- add CLDRConfig.get(String, int default) for fetching numeric config parameters\n- DefaultErrorStatus errorStatus was moved into getFileInfo() as it did not\nhave any long running state, and produced concurrency issues.\n\nparameters:\n\nCLDR_VETTINGVIEWER_CHUNKSIZE=1\n- number of locales each thread should process before getting\nmore work\n\nCLDR_VETTINGVIEWER_PARALLEL=0\n- number of threads (0 means 'one per CPU')", "committedDate": "2020-09-21T19:04:59Z", "type": "forcePushed"}]}