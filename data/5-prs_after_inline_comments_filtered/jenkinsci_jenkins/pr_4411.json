{"pr_number": 4411, "pr_title": "[JENKINS-60577] - Prevent the RSS feed in Computer page from returning an error 404", "pr_createdAt": "2020-01-02T13:17:20Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4411", "timeline": [{"oid": "2021ab59b229dac0372aebba5996e8c0908d8b46", "url": "https://github.com/jenkinsci/jenkins/commit/2021ab59b229dac0372aebba5996e8c0908d8b46", "message": "[JENKINS-60577] Rss Latest Builds for Computer", "committedDate": "2020-01-02T13:07:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYxNDg0OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r362614848", "bodyText": "I feel like it would be a huge change, but would It make more sense to make RSS an interface, and have a function that returns getBuilds().failureOnly().newBuilds() ?", "author": "halkeye", "createdAt": "2020-01-02T20:17:52Z", "path": "core/src/main/java/hudson/model/Job.java", "diffHunk": "@@ -1566,18 +1566,12 @@ protected void checkRename(String newName) throws Failure {\n \n     public void doRssAll(StaplerRequest req, StaplerResponse rsp)\n             throws IOException, ServletException {\n-        rss(req, rsp, \" all builds\", getBuilds());\n+        RSS.rss(req, rsp, getDisplayName() + \" all builds\", getUrl(), getBuilds().newBuilds());\n     }\n \n     public void doRssFailed(StaplerRequest req, StaplerResponse rsp)\n             throws IOException, ServletException {\n-        rss(req, rsp, \" failed builds\", getBuilds().failureOnly());\n-    }\n-\n-    private void rss(StaplerRequest req, StaplerResponse rsp, String suffix,\n-            RunList runs) throws IOException, ServletException {\n-        RSS.forwardToRss(getDisplayName() + suffix, getUrl(), runs.newBuilds(),\n-                Run.FEED_ADAPTER, req, rsp);\n+        RSS.rss(req, rsp, getDisplayName() + \" failed builds\", getUrl(), getBuilds().failureOnly().newBuilds());", "originalCommit": "2021ab59b229dac0372aebba5996e8c0908d8b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTA3MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r362985070", "bodyText": "Nice 2 have. Add Javadoc to newly introduced methods", "author": "oleg-nenashev", "createdAt": "2020-01-03T22:41:45Z", "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -90,4 +91,14 @@ public static void doTrackback( Object it, StaplerRequest req, StaplerResponse r\n \n         req.getView(Jenkins.get(),\"/hudson/\"+flavor+\".jelly\").forward(req,rsp);\n     }\n+\n+    public static void rss(StaplerRequest req, StaplerResponse rsp, String title, String url, RunList runList) throws IOException, ServletException {", "originalCommit": "2021ab59b229dac0372aebba5996e8c0908d8b46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzMTA2NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r363631065", "bodyText": "indeed!. I thought I had added before the commit \ud83e\udd26\u200d\u2642\ufe0f", "author": "fcojfernandez", "createdAt": "2020-01-07T08:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r362985417", "bodyText": "Should the limitation to AbstractBuild be documented somewhere?", "author": "oleg-nenashev", "createdAt": "2020-01-03T22:43:33Z", "path": "core/src/main/java/hudson/model/Computer.java", "diffHunk": "@@ -1369,15 +1369,22 @@ public String call() throws IOException {\n //\n //\n     public void doRssAll( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n-        rss(req, rsp, \" all builds\", getBuilds());\n+        RSS.rss(req, rsp, getDisplayName() + \" all builds\", getUrl(), getBuilds());\n     }\n \n     public void doRssFailed(StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n-        rss(req, rsp, \" failed builds\", getBuilds().failureOnly());\n+        RSS.rss(req, rsp, getDisplayName() + \" failed builds\", getUrl(), getBuilds().failureOnly());\n     }\n-    private void rss(StaplerRequest req, StaplerResponse rsp, String suffix, RunList runs) throws IOException, ServletException {\n-        RSS.forwardToRss(getDisplayName() + suffix, getUrl(),\n-                runs.newBuilds(), Run.FEED_ADAPTER, req, rsp);\n+\n+    public void doRssLatest( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n+        final List<Run> lastBuilds = new ArrayList<>();\n+        for (AbstractProject<?, ?> p : Jenkins.get().allItems(AbstractProject.class)) {", "originalCommit": "2021ab59b229dac0372aebba5996e8c0908d8b46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzMjExNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r363632116", "bodyText": "I've just wanted to keep some coherence and I just saw  \n  \n    \n      jenkins/core/src/main/java/hudson/model/User.java\n    \n    \n        Lines 882 to 896\n      in\n      4d05982\n    \n    \n    \n    \n\n        \n          \n           public void doRssLatest(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException { \n        \n\n        \n          \n               final List<Run> lastBuilds = new ArrayList<>(); \n        \n\n        \n          \n               for (AbstractProject<?, ?> p : Jenkins.get().allItems(AbstractProject.class)) { \n        \n\n        \n          \n                   for (AbstractBuild<?, ?> b = p.getLastBuild(); b != null; b = b.getPreviousBuild()) { \n        \n\n        \n          \n                       if (relatedTo(b)) { \n        \n\n        \n          \n                           lastBuilds.add(b); \n        \n\n        \n          \n                           break; \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n\n        \n          \n               // historically these have been reported sorted by project name, we switched to the lazy iteration \n        \n\n        \n          \n               // so we only have to sort the sublist of runs rather than the full list of irrelevant projects \n        \n\n        \n          \n               lastBuilds.sort((o1, o2) -> Items.BY_FULL_NAME.compare(o1.getParent(), o2.getParent())); \n        \n\n        \n          \n               rss(req, rsp, \" latest build\", RunList.fromRuns(lastBuilds), Run.FEED_ADAPTER_LATEST); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nTBH, I don't know if any kind of limitation should apply. I will add a javadoc explaining what is displayed and if you think something else / other documentation is needed just let me know and I'm happy to add it.", "author": "fcojfernandez", "createdAt": "2020-01-07T08:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzNzYzMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r363637631", "bodyText": "I think now I've understood you well ...", "author": "fcojfernandez", "createdAt": "2020-01-07T08:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYzOTEyOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r363639128", "bodyText": "Maybe 5a2c62e?", "author": "fcojfernandez", "createdAt": "2020-01-07T08:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4ODkwMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r364688901", "bodyText": "I think Oleg meant that this code only takes into account AbstractProjects, it doesn't take into account, for example, FreeStyleProjects.", "author": "MRamonLeon", "createdAt": "2020-01-09T11:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5ODUzNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r364698537", "bodyText": "It does: FreeStyleProject extends from Project (see here) which extends from AbstractProject (see here).\nMy local testing was using a pipeline and a FreeStyle Project and both sort of projects appeared in the feed. As I said above, I'm mimicking the behaviour in User class. I'm totally happy with adding whatever is missing or with documenting whatever is needed, but I need more detail.", "author": "fcojfernandez", "createdAt": "2020-01-09T11:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwNTE2NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r364705164", "bodyText": "Would performance be a concern here? Given we are asking for all the items and looping through them?", "author": "varyvol", "createdAt": "2020-01-09T12:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcxMDI0OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r364710248", "bodyText": "TBH, I don't think this feature is widely used since it's been broken for so long, so personally I wound't care (personal opinion).\nAs I said above, I'm mimicking the current behaviour for the already existing User class. If there is another way to gather that information, I'm unknown. And also I'm open to suggestions if this is not the information that should be retrieved.", "author": "fcojfernandez", "createdAt": "2020-01-09T12:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc4MDAwNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r364780005", "bodyText": "Sounds reasonable. A bad performant feature (worst case scenario) is better than a broken one.", "author": "varyvol", "createdAt": "2020-01-09T14:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyOTMwNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r365129306", "bodyText": "I think Oleg meant that this code only takes into account AbstractProjects, it doesn't take into account, for example, FreeStyleProjects.\n\nIt does not take Pipeline into account, for example. I know that we are still waiting for proper Node information API to be exposed for Pipeline, but \ud83e\udd37\u200d\u2642", "author": "oleg-nenashev", "createdAt": "2020-01-10T08:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMTg0Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r365721842", "bodyText": "@MRamonLeon and @oleg-nenashev you're right. I should have misread the feed in my tests. It's only displaying the FreeStyleProject and not the pipeline:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n  <title>principal last builds only</title>\n  <link rel=\"alternate\" type=\"text/html\" href=\"http://localhost:7080/computer/(master)/\"/>\n  <updated>2020-01-13T09:52:40Z</updated>\n  <author>\n    <name>Jenkins Server</name>\n  </author>\n  <id>urn:uuid:903deee0-7bfa-11db-9fe1-0800200c9a66</id>\n  <entry>\n    <title>free #3 (estable)</title>\n    <link rel=\"alternate\" type=\"text/html\" href=\"http://localhost:7080/job/free/3/\"/>\n    <id>tag:hudson.dev.java.net,2020:free:3</id>\n    <published>2020-01-13T09:52:40Z</published>\n    <updated>2020-01-13T09:52:40Z</updated>\n  </entry>\n</feed>\n\nI will change the javadoc!", "author": "fcojfernandez", "createdAt": "2020-01-13T10:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTQxNw=="}], "type": "inlineReview"}, {"oid": "9b7dd89a7a8ea1d880733d58f99b744bcb8877dd", "url": "https://github.com/jenkinsci/jenkins/commit/9b7dd89a7a8ea1d880733d58f99b744bcb8877dd", "message": "[JENKINS-60577] Missing javadoc", "committedDate": "2020-01-07T08:32:31Z", "type": "commit"}, {"oid": "5a2c62e5c72320ba8ba9fd9aff4f514e0e385249", "url": "https://github.com/jenkinsci/jenkins/commit/5a2c62e5c72320ba8ba9fd9aff4f514e0e385249", "message": "[JENKINS-60577] Add builds from the computer", "committedDate": "2020-01-07T08:33:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwNDkwOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r364704909", "bodyText": "This comment should say the last build for each project I think?", "author": "varyvol", "createdAt": "2020-01-09T12:08:22Z", "path": "core/src/main/java/hudson/model/Computer.java", "diffHunk": "@@ -1369,15 +1369,29 @@ public String call() throws IOException {\n //\n //\n     public void doRssAll( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n-        rss(req, rsp, \" all builds\", getBuilds());\n+        RSS.rss(req, rsp, getDisplayName() + \" all builds\", getUrl(), getBuilds());\n     }\n \n     public void doRssFailed(StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n-        rss(req, rsp, \" failed builds\", getBuilds().failureOnly());\n+        RSS.rss(req, rsp, getDisplayName() + \" failed builds\", getUrl(), getBuilds().failureOnly());\n     }\n-    private void rss(StaplerRequest req, StaplerResponse rsp, String suffix, RunList runs) throws IOException, ServletException {\n-        RSS.forwardToRss(getDisplayName() + suffix, getUrl(),\n-                runs.newBuilds(), Run.FEED_ADAPTER, req, rsp);\n+\n+    /**\n+     * Retrieve the RSS feed for the last build executed in this computer", "originalCommit": "5a2c62e5c72320ba8ba9fd9aff4f514e0e385249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwNzY2Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r364707666", "bodyText": "Sounds reasonable.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve the RSS feed for the last build executed in this computer\n          \n          \n            \n                 * Retrieve the RSS feed for the last build for each project executed in this computer", "author": "fcojfernandez", "createdAt": "2020-01-09T12:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwNDkwOQ=="}], "type": "inlineReview"}, {"oid": "8d40f459debe5de919573686d1a13d8581cd3418", "url": "https://github.com/jenkinsci/jenkins/commit/8d40f459debe5de919573686d1a13d8581cd3418", "message": "Update core/src/main/java/hudson/model/Computer.java", "committedDate": "2020-01-09T12:22:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyOTY3NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r365129674", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve the RSS feed for the last build for each project executed in this computer\n          \n          \n            \n                 * Retrieve the RSS feed for the last build for each project executed in this computer\n          \n          \n            \n                 * @since TODO", "author": "oleg-nenashev", "createdAt": "2020-01-10T08:58:25Z", "path": "core/src/main/java/hudson/model/Computer.java", "diffHunk": "@@ -1369,15 +1369,29 @@ public String call() throws IOException {\n //\n //\n     public void doRssAll( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n-        rss(req, rsp, \" all builds\", getBuilds());\n+        RSS.rss(req, rsp, getDisplayName() + \" all builds\", getUrl(), getBuilds());\n     }\n \n     public void doRssFailed(StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n-        rss(req, rsp, \" failed builds\", getBuilds().failureOnly());\n+        RSS.rss(req, rsp, getDisplayName() + \" failed builds\", getUrl(), getBuilds().failureOnly());\n     }\n-    private void rss(StaplerRequest req, StaplerResponse rsp, String suffix, RunList runs) throws IOException, ServletException {\n-        RSS.forwardToRss(getDisplayName() + suffix, getUrl(),\n-                runs.newBuilds(), Run.FEED_ADAPTER, req, rsp);\n+\n+    /**\n+     * Retrieve the RSS feed for the last build for each project executed in this computer", "originalCommit": "8d40f459debe5de919573686d1a13d8581cd3418", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyOTc5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r365129798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *      Entries to be listed in the RSS feed.\n          \n          \n            \n                 *      Entries to be listed in the RSS feed.\n          \n          \n            \n                 * @since TODO", "author": "oleg-nenashev", "createdAt": "2020-01-10T08:58:46Z", "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -90,4 +91,35 @@ public static void doTrackback( Object it, StaplerRequest req, StaplerResponse r\n \n         req.getView(Jenkins.get(),\"/hudson/\"+flavor+\".jelly\").forward(req,rsp);\n     }\n+\n+    /**\n+     * Sends the RSS feed to the client using a default feed adapter.\n+     *\n+     * @param title\n+     *      Title of the feed.\n+     * @param url\n+     *      URL of the model object that owns this feed. Relative to the context root.\n+     * @param runList\n+     *      Entries to be listed in the RSS feed.", "originalCommit": "8d40f459debe5de919573686d1a13d8581cd3418", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyOTk3OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r365129979", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *      Controls how to render entries to RSS.\n          \n          \n            \n                 *      Controls how to render entries to RSS.\n          \n          \n            \n                 * @since TODO", "author": "oleg-nenashev", "createdAt": "2020-01-10T08:59:14Z", "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -90,4 +91,35 @@ public static void doTrackback( Object it, StaplerRequest req, StaplerResponse r\n \n         req.getView(Jenkins.get(),\"/hudson/\"+flavor+\".jelly\").forward(req,rsp);\n     }\n+\n+    /**\n+     * Sends the RSS feed to the client using a default feed adapter.\n+     *\n+     * @param title\n+     *      Title of the feed.\n+     * @param url\n+     *      URL of the model object that owns this feed. Relative to the context root.\n+     * @param runList\n+     *      Entries to be listed in the RSS feed.\n+     */\n+    public static void rss(StaplerRequest req, StaplerResponse rsp, String title, String url, RunList runList) throws IOException, ServletException {\n+        rss(req, rsp, title, url, runList, null);\n+    }\n+\n+    /**\n+     * Sends the RSS feed to the client using a specific feed adapter.\n+     *\n+     * @param title\n+     *      Title of the feed.\n+     * @param url\n+     *      URL of the model object that owns this feed. Relative to the context root.\n+     * @param runList\n+     *      Entries to be listed in the RSS feed.\n+     * @param feedAdapter\n+     *      Controls how to render entries to RSS.", "originalCommit": "8d40f459debe5de919573686d1a13d8581cd3418", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMDQ4Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r365130482", "bodyText": "Should it be marked as @Restricted(DoNotlUse.class). AFAIK it is only for Stapler. And yes, I know that the historical methods are not annotated. So it is not blocking", "author": "oleg-nenashev", "createdAt": "2020-01-10T09:00:37Z", "path": "core/src/main/java/hudson/model/Computer.java", "diffHunk": "@@ -1369,15 +1369,29 @@ public String call() throws IOException {\n //\n //\n     public void doRssAll( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n-        rss(req, rsp, \" all builds\", getBuilds());\n+        RSS.rss(req, rsp, getDisplayName() + \" all builds\", getUrl(), getBuilds());\n     }\n \n     public void doRssFailed(StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {\n-        rss(req, rsp, \" failed builds\", getBuilds().failureOnly());\n+        RSS.rss(req, rsp, getDisplayName() + \" failed builds\", getUrl(), getBuilds().failureOnly());\n     }\n-    private void rss(StaplerRequest req, StaplerResponse rsp, String suffix, RunList runs) throws IOException, ServletException {\n-        RSS.forwardToRss(getDisplayName() + suffix, getUrl(),\n-                runs.newBuilds(), Run.FEED_ADAPTER, req, rsp);\n+\n+    /**\n+     * Retrieve the RSS feed for the last build for each project executed in this computer\n+     */\n+    public void doRssLatest( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {", "originalCommit": "8d40f459debe5de919573686d1a13d8581cd3418", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjQyNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r365722427", "bodyText": "@oleg-nenashev  I'm happy to add the annotation. Should I annotate the other methods in this class? and in the other classes? I can do it as part of this PR", "author": "fcojfernandez", "createdAt": "2020-01-13T10:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMDQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2Mjg5NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4411#discussion_r365762894", "bodyText": "I think it is fine to annotate this class in this pull request. If you prefer to be on the safe side, just do it for newly introduced endpoints", "author": "oleg-nenashev", "createdAt": "2020-01-13T11:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMDQ4Mg=="}], "type": "inlineReview"}, {"oid": "e0edecd5d0049d7940d887598616a71c68442ea9", "url": "https://github.com/jenkinsci/jenkins/commit/e0edecd5d0049d7940d887598616a71c68442ea9", "message": "Apply suggestions from code review\n\nCo-Authored-By: Oleg Nenashev <o.v.nenashev@gmail.com>", "committedDate": "2020-01-13T11:15:12Z", "type": "commit"}, {"oid": "3fdfa0a1ef381d300d1f0090a35ba7a9cfb5a5e9", "url": "https://github.com/jenkinsci/jenkins/commit/3fdfa0a1ef381d300d1f0090a35ba7a9cfb5a5e9", "message": "[JENKINS-60577] Document limitation to AbstractProject", "committedDate": "2020-01-13T11:45:35Z", "type": "commit"}, {"oid": "e9d95ac8f9c6c13d5cb6e39d274e0e2a065e8fad", "url": "https://github.com/jenkinsci/jenkins/commit/e9d95ac8f9c6c13d5cb6e39d274e0e2a065e8fad", "message": "[JENKINS-60577] Restrict the RSS methods in Computer", "committedDate": "2020-01-13T12:36:16Z", "type": "commit"}]}