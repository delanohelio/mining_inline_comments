{"pr_number": 5051, "pr_title": "JENKINS-64196 Move PluginManager available page to client side", "pr_createdAt": "2020-11-09T19:46:30Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/5051", "timeline": [{"oid": "8e217db996c3504e23e6f0ccdffa3f16012ed2be", "url": "https://github.com/jenkinsci/jenkins/commit/8e217db996c3504e23e6f0ccdffa3f16012ed2be", "message": "Move PluginManager available to client side", "committedDate": "2020-11-09T19:33:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3ODcxOA==", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r520078718", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Restricted(Beta.class)\n          \n          \n            \n                @Restricted(NoExternalUse.class)", "author": "timja", "createdAt": "2020-11-09T19:50:20Z", "path": "core/src/main/java/hudson/model/UpdateCenter.java", "diffHunk": "@@ -971,6 +976,119 @@ private XmlFile getConfigFile() {\n                                     UpdateCenter.class.getName()+\".xml\"));\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static boolean hasAdoptThisPluginLabel(UpdateSite.Plugin plugin) {\n+        final String[] categories = plugin.categories;\n+        if (categories == null) {\n+            return false;\n+        }\n+        return Arrays.asList(categories).contains(\"adopt-this-plugin\");\n+    }\n+\n+    @Restricted(NoExternalUse.class)\n+    public static boolean hasLatestVersionNewerThanOffered(UpdateSite.Plugin plugin) {\n+        if (plugin.latest == null) {\n+            return false;\n+        }\n+        return !plugin.latest.equalsIgnoreCase(plugin.version); // we can assume that any defined 'latest' will be newer than the actual offered version\n+    }\n+    \n+    @JavaScriptMethod\n+    @Restricted(Beta.class)", "originalCommit": "8e217db996c3504e23e6f0ccdffa3f16012ed2be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ce9da0cd85c832df6f693d6b51ea3da3de9b4498", "url": "https://github.com/jenkinsci/jenkins/commit/ce9da0cd85c832df6f693d6b51ea3da3de9b4498", "message": "Fix in IE", "committedDate": "2020-11-11T09:56:29Z", "type": "commit"}, {"oid": "1965b837d92b6d0c4c459ed674d554d1a0add172", "url": "https://github.com/jenkinsci/jenkins/commit/1965b837d92b6d0c4c459ed674d554d1a0add172", "message": "Merge branch 'master' into plugin-manager", "committedDate": "2020-11-12T12:03:06Z", "type": "commit"}, {"oid": "1c91e9b13fc24efab7e3f6a68f72e3ff31792e24", "url": "https://github.com/jenkinsci/jenkins/commit/1c91e9b13fc24efab7e3f6a68f72e3ff31792e24", "message": "Address feedback from ux-sig demo", "committedDate": "2020-11-12T14:59:26Z", "type": "commit"}, {"oid": "5418f7e856011b94a77a41d65b2ec51c4e95dc8a", "url": "https://github.com/jenkinsci/jenkins/commit/5418f7e856011b94a77a41d65b2ec51c4e95dc8a", "message": "Add handlebars module", "committedDate": "2020-11-12T16:36:31Z", "type": "commit"}, {"oid": "ab3c1bcfd9b54f1f934af574d00811e56fc142e3", "url": "https://github.com/jenkinsci/jenkins/commit/ab3c1bcfd9b54f1f934af574d00811e56fc142e3", "message": "Handlebars plugin manager", "committedDate": "2020-11-13T14:14:44Z", "type": "commit"}, {"oid": "11ee569e0ab05e53e3b0ff654477c4aedc90073f", "url": "https://github.com/jenkinsci/jenkins/commit/11ee569e0ab05e53e3b0ff654477c4aedc90073f", "message": "Update core/src/main/java/hudson/model/UpdateCenter.java", "committedDate": "2020-11-13T14:15:48Z", "type": "commit"}, {"oid": "5ef60f235038569785669659cbff8cf50660baf9", "url": "https://github.com/jenkinsci/jenkins/commit/5ef60f235038569785669659cbff8cf50660baf9", "message": "Remove import", "committedDate": "2020-11-13T14:16:34Z", "type": "commit"}, {"oid": "a93dec0d1d772a77d01399992431fb77c805dc37", "url": "https://github.com/jenkinsci/jenkins/commit/a93dec0d1d772a77d01399992431fb77c805dc37", "message": "Fix input", "committedDate": "2020-11-13T14:26:26Z", "type": "commit"}, {"oid": "54a6b84512ab7c471cda81f981ceb2fb94f44891", "url": "https://github.com/jenkinsci/jenkins/commit/54a6b84512ab7c471cda81f981ceb2fb94f44891", "message": "Remove debug", "committedDate": "2020-11-13T14:27:11Z", "type": "commit"}, {"oid": "b4ce1357a47eb84cae41faa192d3f52034f41de4", "url": "https://github.com/jenkinsci/jenkins/commit/b4ce1357a47eb84cae41faa192d3f52034f41de4", "message": "Use rest client", "committedDate": "2020-11-13T15:29:45Z", "type": "commit"}, {"oid": "8d0b1198ba0a9c33fe9970535c98ea77b35231fb", "url": "https://github.com/jenkinsci/jenkins/commit/8d0b1198ba0a9c33fe9970535c98ea77b35231fb", "message": "Fix bug", "committedDate": "2020-11-13T15:34:13Z", "type": "commit"}, {"oid": "bef659de081308754f63824c1c1b6044fcd6683d", "url": "https://github.com/jenkinsci/jenkins/commit/bef659de081308754f63824c1c1b6044fcd6683d", "message": "Move properties to right location", "committedDate": "2020-11-13T19:51:09Z", "type": "commit"}, {"oid": "553ddd714b77aeae2014d66ac4dfeaf255b4ffe2", "url": "https://github.com/jenkinsci/jenkins/commit/553ddd714b77aeae2014d66ac4dfeaf255b4ffe2", "message": "Cleanup", "committedDate": "2020-11-13T19:51:35Z", "type": "commit"}, {"oid": "a01bd001b3dc2c88e8f75684476d9bcd10fc3724", "url": "https://github.com/jenkinsci/jenkins/commit/a01bd001b3dc2c88e8f75684476d9bcd10fc3724", "message": "Use lodash debounce", "committedDate": "2020-11-13T20:20:56Z", "type": "commit"}, {"oid": "ea475b74f2c5e27631a17047e7d4463f61ac538f", "url": "https://github.com/jenkinsci/jenkins/commit/ea475b74f2c5e27631a17047e7d4463f61ac538f", "message": "Revert properties change", "committedDate": "2020-11-13T20:22:02Z", "type": "commit"}, {"oid": "7c7d27d2b2d1e843b5cce53df64a4a347d2cc53f", "url": "https://github.com/jenkinsci/jenkins/commit/7c7d27d2b2d1e843b5cce53df64a4a347d2cc53f", "message": "Fmt", "committedDate": "2020-11-13T20:23:27Z", "type": "commit"}, {"oid": "bf635cc57aaabe67c76cf2c2e14f034e556543f0", "url": "https://github.com/jenkinsci/jenkins/commit/bf635cc57aaabe67c76cf2c2e14f034e556543f0", "message": "Rank exact matches at the top", "committedDate": "2020-11-20T12:29:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTI5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r527675295", "bodyText": "So what's the Turkish locale situation in JS?\nAre they going to search for GIT and not find git because it's not g\u0131t?", "author": "daniel-beck", "createdAt": "2020-11-20T13:00:24Z", "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,121 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        String lowerSearchQuery = query != null ? query.toLowerCase() : null;\n+        List<JSONObject> plugins = new ArrayList<>();\n+        for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {\n+            plugins = site.getAvailables().stream()\n+                .filter(plugin -> {\n+                    if (StringUtils.isBlank(query)) {\n+                        return true;\n+                    }\n+                    return plugin.name.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.title.toLowerCase().contains(lowerSearchQuery) ||\n+                        plugin.excerpt.toLowerCase().contains(lowerSearchQuery) ||\n+                        Arrays.asList(plugin.categories).contains(query) ||\n+                        Arrays.stream(plugin.categories)\n+                            .map(UpdateCenter::getCategoryDisplayName)\n+                            .anyMatch(category -> category.toLowerCase().contains(query)) ||\n+                        plugin.hasWarnings() && lowerSearchQuery.equals(\"warning:\");\n+                })\n+                .limit(limit)\n+                .map(plugin -> {\n+                    JSONObject jsonObject = new JSONObject();\n+                    jsonObject.put(\"name\", plugin.name);\n+                    jsonObject.put(\"sourceId\", plugin.sourceId);\n+                    jsonObject.put(\"title\", plugin.title);\n+                    jsonObject.put(\"displayName\", plugin.getDisplayName());\n+                    jsonObject.put(\"wiki\", plugin.wiki);\n+                    jsonObject.put(\"categories\", Arrays.stream(plugin.categories)\n+                        .filter(PluginManager::isNonMetaLabel)\n+                        .map(UpdateCenter::getCategoryDisplayName)\n+                        .collect(toList())\n+                    );\n+\n+                    if (hasAdoptThisPluginLabel(plugin)) {\n+                        jsonObject.put(\"adoptMe\", Messages.PluginManager_adoptThisPlugin());\n+                    }\n+                    if (plugin.isDeprecated()) {\n+                        jsonObject.put(\"deprecated\", Messages.PluginManager_deprecationWarning(plugin.getDeprecation().url));\n+                    }\n+                    jsonObject.put(\"excerpt\", plugin.excerpt);\n+                    jsonObject.put(\"version\", plugin.version);\n+                    jsonObject.put(\"popularity\", plugin.popularity);\n+                    if (plugin.isForNewerHudson()) {\n+                        jsonObject.put(\"newerCoreRequired\", Messages.PluginManager_coreWarning(plugin.requiredCore));\n+                    }\n+                    if (plugin.isForNewerJava()) {\n+                        jsonObject.put(\"newerJavaRequired\", Messages.PluginManager_javaWarning(plugin.minimumJavaVersion));\n+                    }\n+                    if (plugin.isNeededDependenciesForNewerJava()) {\n+                        VersionNumber javaVersion = plugin.getNeededDependenciesMinimumJavaVersion();\n+                        if (javaVersion == null) {\n+                            throw new IllegalStateException(\"java version cannot be null here\");\n+                        }\n+                        jsonObject.put(\"dependenciesNewerJava\", Messages.PluginManager_depJavaWarning(javaVersion.toString()));\n+                    }\n+                    if (plugin.hasWarnings()) {\n+                        JSONObject unresolvedSecurityWarnings = new JSONObject();\n+                        unresolvedSecurityWarnings.put(\"text\", Messages.PluginManager_securityWarning());\n+                        Set<UpdateSite.Warning> pluginWarnings = plugin.getWarnings();\n+                        if (pluginWarnings == null) {\n+                            throw new IllegalStateException(\"warnings cannot be null here\");\n+                        }\n+                        List<JSONObject> warnings = pluginWarnings.stream()\n+                            .map(warning -> {\n+                                JSONObject jsonWarning = new JSONObject();\n+                                jsonWarning.put(\"url\", warning.url);\n+                                jsonWarning.put(\"message\", warning.message);\n+                                return jsonWarning;\n+                            }).collect(toList());\n+                        unresolvedSecurityWarnings.put(\"warnings\", warnings);\n+                        jsonObject.put(\"unresolvedSecurityWarnings\", unresolvedSecurityWarnings);\n+                    }\n+                    if (plugin.releaseTimestamp != null) {\n+                        JSONObject releaseTimestamp = new JSONObject();\n+                        releaseTimestamp.put(\"iso8601\", Functions.iso8601DateTime(plugin.releaseTimestamp));\n+                        releaseTimestamp.put(\"displayValue\", Messages.PluginManager_ago(Functions.getTimeSpanString(plugin.releaseTimestamp)));\n+                        jsonObject.put(\"releaseTimestamp\", releaseTimestamp);\n+                    }\n+                    if (hasLatestVersionNewerThanOffered(plugin)) {\n+                        jsonObject.put(\"newerVersionAvailableNotOffered\", Messages.PluginManager_newerVersionExists(plugin.latest));\n+                    }\n+                    return jsonObject;\n+                })\n+                .sorted((o1, o2) -> {\n+                    String o1DisplayName = o1.getString(\"displayName\");\n+                    if (o1.getString(\"name\").toLowerCase().equals(lowerSearchQuery) || o1DisplayName.toLowerCase().equals(lowerSearchQuery)) {", "originalCommit": "bf635cc57aaabe67c76cf2c2e14f034e556543f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3ODYzMg==", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r527678632", "bodyText": "is this what you meant? 492a24a\nthere's no JS searching done here, it's all server side", "author": "timja", "createdAt": "2020-11-20T13:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4Nzk5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r527687995", "bodyText": "Oops. Yes, then Turkish people might be unhappy.\nAlso there's String#equalsIgnoreCase which does this for us.", "author": "daniel-beck", "createdAt": "2020-11-20T13:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTI5NQ=="}], "type": "inlineReview"}, {"oid": "492a24a98c119f6ff4989119618d9e6f43eaea0a", "url": "https://github.com/jenkinsci/jenkins/commit/492a24a98c119f6ff4989119618d9e6f43eaea0a", "message": "Set locale", "committedDate": "2020-11-20T13:06:06Z", "type": "commit"}, {"oid": "9ad75d1bbaceb3538187656dbee275f938a31654", "url": "https://github.com/jenkinsci/jenkins/commit/9ad75d1bbaceb3538187656dbee275f938a31654", "message": "Spotbugs", "committedDate": "2020-11-20T13:43:32Z", "type": "commit"}, {"oid": "c996c91e86f01614203d34ec3caf5c7ba2e10178", "url": "https://github.com/jenkinsci/jenkins/commit/c996c91e86f01614203d34ec3caf5c7ba2e10178", "message": "ignore case in nicer way", "committedDate": "2020-11-20T13:48:48Z", "type": "commit"}, {"oid": "a4640102086f7c8524347f0b32432e985467772c", "url": "https://github.com/jenkinsci/jenkins/commit/a4640102086f7c8524347f0b32432e985467772c", "message": "Merge branch 'master' into plugin-manager", "committedDate": "2020-11-23T21:33:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMDg0OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r530520849", "bodyText": "does this not need to be reflective also?  if o2 is direct match for the search term then return +1?", "author": "jtnord", "createdAt": "2020-11-25T16:58:47Z", "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,120 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        List<JSONObject> plugins = new ArrayList<>();\n+        for (UpdateSite site : Jenkins.get().getUpdateCenter().getSiteList()) {\n+            plugins = site.getAvailables().stream()\n+                .filter(plugin -> {\n+                    if (StringUtils.isBlank(query)) {\n+                        return true;\n+                    }\n+                    return StringUtils.containsIgnoreCase(plugin.name, query) ||\n+                        StringUtils.containsIgnoreCase(plugin.title, query) ||\n+                        StringUtils.containsIgnoreCase(plugin.excerpt, query) ||\n+                        Arrays.asList(plugin.categories).contains(query) ||\n+                        Arrays.stream(plugin.categories)\n+                            .map(UpdateCenter::getCategoryDisplayName)\n+                            .anyMatch(category -> StringUtils.containsIgnoreCase(category, query)) ||\n+                        plugin.hasWarnings() && query.equalsIgnoreCase(\"warning:\");\n+                })\n+                .limit(limit)\n+                .map(plugin -> {\n+                    JSONObject jsonObject = new JSONObject();\n+                    jsonObject.put(\"name\", plugin.name);\n+                    jsonObject.put(\"sourceId\", plugin.sourceId);\n+                    jsonObject.put(\"title\", plugin.title);\n+                    jsonObject.put(\"displayName\", plugin.getDisplayName());\n+                    jsonObject.put(\"wiki\", plugin.wiki);\n+                    jsonObject.put(\"categories\", Arrays.stream(plugin.categories)\n+                        .filter(PluginManager::isNonMetaLabel)\n+                        .map(UpdateCenter::getCategoryDisplayName)\n+                        .collect(toList())\n+                    );\n+\n+                    if (hasAdoptThisPluginLabel(plugin)) {\n+                        jsonObject.put(\"adoptMe\", Messages.PluginManager_adoptThisPlugin());\n+                    }\n+                    if (plugin.isDeprecated()) {\n+                        jsonObject.put(\"deprecated\", Messages.PluginManager_deprecationWarning(plugin.getDeprecation().url));\n+                    }\n+                    jsonObject.put(\"excerpt\", plugin.excerpt);\n+                    jsonObject.put(\"version\", plugin.version);\n+                    jsonObject.put(\"popularity\", plugin.popularity);\n+                    if (plugin.isForNewerHudson()) {\n+                        jsonObject.put(\"newerCoreRequired\", Messages.PluginManager_coreWarning(plugin.requiredCore));\n+                    }\n+                    if (plugin.isForNewerJava()) {\n+                        jsonObject.put(\"newerJavaRequired\", Messages.PluginManager_javaWarning(plugin.minimumJavaVersion));\n+                    }\n+                    if (plugin.isNeededDependenciesForNewerJava()) {\n+                        VersionNumber javaVersion = plugin.getNeededDependenciesMinimumJavaVersion();\n+                        if (javaVersion == null) {\n+                            throw new IllegalStateException(\"java version cannot be null here\");\n+                        }\n+                        jsonObject.put(\"dependenciesNewerJava\", Messages.PluginManager_depJavaWarning(javaVersion.toString()));\n+                    }\n+                    if (plugin.hasWarnings()) {\n+                        JSONObject unresolvedSecurityWarnings = new JSONObject();\n+                        unresolvedSecurityWarnings.put(\"text\", Messages.PluginManager_securityWarning());\n+                        Set<UpdateSite.Warning> pluginWarnings = plugin.getWarnings();\n+                        if (pluginWarnings == null) {\n+                            throw new IllegalStateException(\"warnings cannot be null here\");\n+                        }\n+                        List<JSONObject> warnings = pluginWarnings.stream()\n+                            .map(warning -> {\n+                                JSONObject jsonWarning = new JSONObject();\n+                                jsonWarning.put(\"url\", warning.url);\n+                                jsonWarning.put(\"message\", warning.message);\n+                                return jsonWarning;\n+                            }).collect(toList());\n+                        unresolvedSecurityWarnings.put(\"warnings\", warnings);\n+                        jsonObject.put(\"unresolvedSecurityWarnings\", unresolvedSecurityWarnings);\n+                    }\n+                    if (plugin.releaseTimestamp != null) {\n+                        JSONObject releaseTimestamp = new JSONObject();\n+                        releaseTimestamp.put(\"iso8601\", Functions.iso8601DateTime(plugin.releaseTimestamp));\n+                        releaseTimestamp.put(\"displayValue\", Messages.PluginManager_ago(Functions.getTimeSpanString(plugin.releaseTimestamp)));\n+                        jsonObject.put(\"releaseTimestamp\", releaseTimestamp);\n+                    }\n+                    if (hasLatestVersionNewerThanOffered(plugin)) {\n+                        jsonObject.put(\"newerVersionAvailableNotOffered\", Messages.PluginManager_newerVersionExists(plugin.latest));\n+                    }\n+                    return jsonObject;\n+                })\n+                .sorted((o1, o2) -> {\n+                    String o1DisplayName = o1.getString(\"displayName\");", "originalCommit": "a4640102086f7c8524347f0b32432e985467772c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg5Nzg2Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r534897863", "bodyText": "done", "author": "timja", "createdAt": "2020-12-03T08:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMDg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTgwNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r530525805", "bodyText": "missing permission check?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<JSONObject> plugins = new ArrayList<>();\n          \n          \n            \n                    Jenkins.get().checkPermission(Jenkins.SYSTEM_READ);\n          \n          \n            \n                    List<JSONObject> plugins = new ArrayList<>();", "author": "jtnord", "createdAt": "2020-11-25T17:06:46Z", "path": "core/src/main/java/hudson/PluginManager.java", "diffHunk": "@@ -1344,6 +1346,120 @@ public void stop() {\n         LogFactory.release(uberClassLoader);\n     }\n \n+    @Restricted(NoExternalUse.class)\n+    public static boolean isNonMetaLabel(String label) {\n+        return !(\"adopt-this-plugin\".equals(label) || \"deprecated\".equals(label));\n+    }\n+    \n+    @Restricted(NoExternalUse.class)\n+    public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {\n+        List<JSONObject> plugins = new ArrayList<>();", "originalCommit": "a4640102086f7c8524347f0b32432e985467772c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNjUzMw==", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r530606533", "bodyText": "I think already covered here:\nhttps://github.com/timja/jenkins/blob/plugin-manager/core/src/main/java/hudson/PluginManager.java#L2393\nthe other permission checks are for tightening it to ADMINISTER mostly", "author": "timja", "createdAt": "2020-11-25T19:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1MTA4Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/5051#discussion_r531451083", "bodyText": "Tested, reader is missing the Overall/SystemRead permission", "author": "timja", "createdAt": "2020-11-27T08:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTgwNQ=="}], "type": "inlineReview"}, {"oid": "fab36afa58c43c18f462dbab6312dee4a0dff5a9", "url": "https://github.com/jenkinsci/jenkins/commit/fab36afa58c43c18f462dbab6312dee4a0dff5a9", "message": "Merge branch 'master' into plugin-manager", "committedDate": "2020-12-03T07:59:06Z", "type": "commit"}, {"oid": "d1a76dbd2df823aa8c4ab442b4b3121014c7dba2", "url": "https://github.com/jenkinsci/jenkins/commit/d1a76dbd2df823aa8c4ab442b4b3121014c7dba2", "message": "Sorting improvements", "committedDate": "2020-12-03T08:18:29Z", "type": "commit"}]}