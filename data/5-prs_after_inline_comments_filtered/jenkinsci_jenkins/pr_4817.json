{"pr_number": 4817, "pr_title": "[JENKINS-62755] Introduce Fingerprint Cleanup in External Storage API", "pr_createdAt": "2020-06-22T19:48:58Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4817", "timeline": [{"oid": "287f8dfe0e452fbf1533db3941c5205e639f5281", "url": "https://github.com/jenkinsci/jenkins/commit/287f8dfe0e452fbf1533db3941c5205e639f5281", "message": "Create new FingerprintCleanupThread", "committedDate": "2020-06-22T19:45:59Z", "type": "commit"}, {"oid": "59bdf8d51c35bfea8450e74eaed892799bfa5700", "url": "https://github.com/jenkinsci/jenkins/commit/59bdf8d51c35bfea8450e74eaed892799bfa5700", "message": "Moved test to jenkins", "committedDate": "2020-06-23T03:51:05Z", "type": "commit"}, {"oid": "f954d10557ff02cc6a7ce0b75f74a7cc5b834bb8", "url": "https://github.com/jenkinsci/jenkins/commit/f954d10557ff02cc6a7ce0b75f74a7cc5b834bb8", "message": "Add license", "committedDate": "2020-06-23T03:52:20Z", "type": "commit"}, {"oid": "7950fab3927f7288b7993076457c72a491558878", "url": "https://github.com/jenkinsci/jenkins/commit/7950fab3927f7288b7993076457c72a491558878", "message": "Fix license", "committedDate": "2020-06-23T03:53:23Z", "type": "commit"}, {"oid": "c54aeb729e84153696cf6305cb7955000799db8e", "url": "https://github.com/jenkinsci/jenkins/commit/c54aeb729e84153696cf6305cb7955000799db8e", "message": "Fix some tests", "committedDate": "2020-06-23T15:49:56Z", "type": "commit"}, {"oid": "82d65b97e8f2a08906b8900939dcd0be06c87669", "url": "https://github.com/jenkinsci/jenkins/commit/82d65b97e8f2a08906b8900939dcd0be06c87669", "message": "Fix all tests", "committedDate": "2020-06-23T16:47:52Z", "type": "commit"}, {"oid": "c274871133bb68d7a18493f27611dfdcc344c764", "url": "https://github.com/jenkinsci/jenkins/commit/c274871133bb68d7a18493f27611dfdcc344c764", "message": "Remove redundant imports", "committedDate": "2020-06-23T16:49:21Z", "type": "commit"}, {"oid": "3f6d00ebd799667a2797b4469ff916e643c457d9", "url": "https://github.com/jenkinsci/jenkins/commit/3f6d00ebd799667a2797b4469ff916e643c457d9", "message": "Add documentation; add test", "committedDate": "2020-06-23T17:07:57Z", "type": "commit"}, {"oid": "a5bb69dd0abc9e0edd88ba0559f0c60064370dc0", "url": "https://github.com/jenkinsci/jenkins/commit/a5bb69dd0abc9e0edd88ba0559f0c60064370dc0", "message": "Fix errors in fingerprintertest", "committedDate": "2020-06-23T18:16:55Z", "type": "commit"}, {"oid": "b198246c9e949491914b930ade47771c3dc71251", "url": "https://github.com/jenkinsci/jenkins/commit/b198246c9e949491914b930ade47771c3dc71251", "message": "Merge remote-tracking branch 'upstream/master' into fp_cleanup", "committedDate": "2020-06-23T18:17:14Z", "type": "commit"}, {"oid": "5daa43c86ca2aea6078de2176485e98cd049c5a3", "url": "https://github.com/jenkinsci/jenkins/commit/5daa43c86ca2aea6078de2176485e98cd049c5a3", "message": "Remove default fingerprint cleanup implementation", "committedDate": "2020-06-23T18:23:23Z", "type": "commit"}, {"oid": "da9664fab4883bcc28dbc5552dc28853500892bb", "url": "https://github.com/jenkinsci/jenkins/commit/da9664fab4883bcc28dbc5552dc28853500892bb", "message": "Remove override from execute", "committedDate": "2020-06-23T18:24:27Z", "type": "commit"}, {"oid": "383c47121586f5d772ae506f017778d0b1be2b2f", "url": "https://github.com/jenkinsci/jenkins/commit/383c47121586f5d772ae506f017778d0b1be2b2f", "message": "Undo author deletion", "committedDate": "2020-06-24T16:25:59Z", "type": "commit"}, {"oid": "a20c73e8757955a43899e7204e7071f0f98ae640", "url": "https://github.com/jenkinsci/jenkins/commit/a20c73e8757955a43899e7204e7071f0f98ae640", "message": "Remove redundant import", "committedDate": "2020-06-24T16:26:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0Mzk0Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445043943", "bodyText": "It used to be a public APi before accmod was introduced. Should be safe enough, I cannot find or imagine an external usage.", "author": "oleg-nenashev", "createdAt": "2020-06-24T17:06:58Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintCleanupThread.java", "diffHunk": "@@ -50,30 +48,14 @@\n  *\n  * @author Kohsuke Kawaguchi\n  */\n-@Extension @Symbol(\"fingerprintCleanup\")\n+@Extension(ordinal=-100)\n @Restricted(NoExternalUse.class)\n-public class FingerprintCleanupThread extends AsyncPeriodicWork {\n+public class FileFingerprintCleanupThread extends FingerprintCleanupThread {", "originalCommit": "383c47121586f5d772ae506f017778d0b1be2b2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NDY1NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445044655", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             */\n          \n          \n            \n             * @since TODO\n          \n          \n            \n             */", "author": "oleg-nenashev", "createdAt": "2020-06-24T17:08:06Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintCleanupThread.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+import hudson.Functions;\n+import hudson.model.AsyncPeriodicWork;\n+import hudson.model.Fingerprint;\n+import hudson.model.TaskListener;\n+import jenkins.model.FingerprintFacet;\n+import jenkins.model.Jenkins;\n+import org.jenkinsci.Symbol;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Fingerprint Cleanup API.\n+ * To implement custom fingerprint cleanup by external storage plugin, extend this class, and override the\n+ * {@link #execute(TaskListener)} method.\n+ * {@link #cleanFingerprint(Fingerprint, TaskListener)} can be used to clean the fingerprint.\n+ */", "originalCommit": "383c47121586f5d772ae506f017778d0b1be2b2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NTA4OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445045089", "bodyText": "Could lead to funny results if 2+ plugins are installed, e.g. in the case of migrating from one storage to another", "author": "oleg-nenashev", "createdAt": "2020-06-24T17:08:58Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintCleanupThread.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+import hudson.Functions;\n+import hudson.model.AsyncPeriodicWork;\n+import hudson.model.Fingerprint;\n+import hudson.model.TaskListener;\n+import jenkins.model.FingerprintFacet;\n+import jenkins.model.Jenkins;\n+import org.jenkinsci.Symbol;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Fingerprint Cleanup API.\n+ * To implement custom fingerprint cleanup by external storage plugin, extend this class, and override the\n+ * {@link #execute(TaskListener)} method.\n+ * {@link #cleanFingerprint(Fingerprint, TaskListener)} can be used to clean the fingerprint.\n+ */\n+@Symbol(\"fingerprintCleanup\")\n+@Restricted(Beta.class)\n+public abstract class FingerprintCleanupThread extends AsyncPeriodicWork implements ExtensionPoint {\n+\n+    public FingerprintCleanupThread() {\n+        super(\"Fingerprint cleanup\");\n+    }\n+\n+    public long getRecurrencePeriod() {\n+        return DAY;\n+    }\n+\n+    /**\n+     * Invokes the periodic job.\n+     */\n+    public static void invoke() {\n+        get().run();\n+    }\n+\n+    /**\n+     * Returns the first implementation of {@link FingerprintCleanupThread} for the instance.\n+     * External storage plugins which implement {@link FingerprintCleanupThread} are given a higher priority.", "originalCommit": "383c47121586f5d772ae506f017778d0b1be2b2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NjU3NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445046574", "bodyText": "Please document what the implementations are expected to do there.\nMaybe a better name like iterateAndCleanupFingerprints() is better", "author": "oleg-nenashev", "createdAt": "2020-06-24T17:11:38Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintCleanupThread.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020, Jenkins project contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package jenkins.fingerprints;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import hudson.ExtensionList;\n+import hudson.ExtensionPoint;\n+import hudson.Functions;\n+import hudson.model.AsyncPeriodicWork;\n+import hudson.model.Fingerprint;\n+import hudson.model.TaskListener;\n+import jenkins.model.FingerprintFacet;\n+import jenkins.model.Jenkins;\n+import org.jenkinsci.Symbol;\n+import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Fingerprint Cleanup API.\n+ * To implement custom fingerprint cleanup by external storage plugin, extend this class, and override the\n+ * {@link #execute(TaskListener)} method.\n+ * {@link #cleanFingerprint(Fingerprint, TaskListener)} can be used to clean the fingerprint.\n+ */\n+@Symbol(\"fingerprintCleanup\")\n+@Restricted(Beta.class)\n+public abstract class FingerprintCleanupThread extends AsyncPeriodicWork implements ExtensionPoint {\n+\n+    public FingerprintCleanupThread() {\n+        super(\"Fingerprint cleanup\");\n+    }\n+\n+    public long getRecurrencePeriod() {\n+        return DAY;\n+    }\n+\n+    /**\n+     * Invokes the periodic job.\n+     */\n+    public static void invoke() {\n+        get().run();\n+    }\n+\n+    /**\n+     * Returns the first implementation of {@link FingerprintCleanupThread} for the instance.\n+     * External storage plugins which implement {@link FingerprintCleanupThread} are given a higher priority.\n+     */\n+    public static FingerprintCleanupThread get() {\n+        return ExtensionList.lookup(FingerprintCleanupThread.class).get(0);\n+    }\n+\n+    public abstract void execute(TaskListener taskListener);", "originalCommit": "383c47121586f5d772ae506f017778d0b1be2b2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "83aa71aa5faa60407d9e9a103c1f68a8736d1076", "url": "https://github.com/jenkinsci/jenkins/commit/83aa71aa5faa60407d9e9a103c1f68a8736d1076", "message": "Move fingerprint cleanup to storage", "committedDate": "2020-06-24T17:45:03Z", "type": "commit"}, {"oid": "c8589392e30af000fde32988cb56c697da558552", "url": "https://github.com/jenkinsci/jenkins/commit/c8589392e30af000fde32988cb56c697da558552", "message": "Fix spacing", "committedDate": "2020-06-24T17:48:07Z", "type": "commit"}, {"oid": "6f237c7f26f70aaa0efefdea63fe7c8abcdc2145", "url": "https://github.com/jenkinsci/jenkins/commit/6f237c7f26f70aaa0efefdea63fe7c8abcdc2145", "message": "Add new line", "committedDate": "2020-06-24T17:48:47Z", "type": "commit"}, {"oid": "ec5ff5ac0735c5b9f7fa78b590007124418e0948", "url": "https://github.com/jenkinsci/jenkins/commit/ec5ff5ac0735c5b9f7fa78b590007124418e0948", "message": "Minor fixes", "committedDate": "2020-06-24T17:50:14Z", "type": "commit"}, {"oid": "ac6dfd795dc479475187c5d03f23e39a366ed856", "url": "https://github.com/jenkinsci/jenkins/commit/ac6dfd795dc479475187c5d03f23e39a366ed856", "message": "Fix tests", "committedDate": "2020-06-24T18:10:10Z", "type": "commit"}, {"oid": "7bc7fea9988d4a48657384cd06facf0ec3288bdc", "url": "https://github.com/jenkinsci/jenkins/commit/7bc7fea9988d4a48657384cd06facf0ec3288bdc", "message": "Merge remote-tracking branch 'upstream/master' into fp_cleanup", "committedDate": "2020-06-24T21:20:08Z", "type": "commit"}, {"oid": "383cbe835e94d39141651d8d9369c38f720de453", "url": "https://github.com/jenkinsci/jenkins/commit/383cbe835e94d39141651d8d9369c38f720de453", "message": "Add documentation", "committedDate": "2020-06-24T22:08:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxNTQ3Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445315477", "bodyText": "It is only for tests, right? If the test is applicable to File Fingerprint storage, it makes sense to relocate the dependent test to a new class and use the package scope. Option B is to use @Restricted(NoExternalUse.class) to prevent external usages", "author": "oleg-nenashev", "createdAt": "2020-06-25T05:30:52Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -57,6 +62,8 @@\n \n     private static final Logger logger = Logger.getLogger(FileFingerprintStorage.class.getName());\n     private static final DateConverter DATE_CONVERTER = new DateConverter();\n+    public static final String FINGERPRINTS_DIR_NAME = \"fingerprints\";", "originalCommit": "383cbe835e94d39141651d8d9369c38f720de453", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTY3MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445939671", "bodyText": "@oleg-nenashev Do I need to add @Restricted(NoExternalUse.class) if the entire class itself is using that annotation?", "author": "stellargo", "createdAt": "2020-06-26T02:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxNTQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMTg2Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445621866", "bodyText": "Why == 2?", "author": "afalko", "createdAt": "2020-06-25T14:55:45Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -210,6 +217,61 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            logger.fine(\"External fingerprint storage is configured. Skipping execution\");\n+            return;\n+        }\n+\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);", "originalCommit": "383cbe835e94d39141651d8d9369c38f720de453", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNTgzMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445825832", "bodyText": "this code is just moved", "author": "timja", "createdAt": "2020-06-25T20:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMTg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzODIwMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445938203", "bodyText": "Yes, this is ported code. The reason is because of the structure in which fingerprints are stored on file system storage. Say the fingerprint md5 is abc123456789 then it gets saved inside ab/c1/23456789.xml", "author": "stellargo", "createdAt": "2020-06-26T02:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMTg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMjY2Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445622662", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");\n          \n          \n            \n                    taskListener.getLogger().println(String.format(\"Cleaned up %d records\", records));", "author": "afalko", "createdAt": "2020-06-25T14:56:56Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -210,6 +217,61 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            logger.fine(\"External fingerprint storage is configured. Skipping execution\");\n+            return;\n+        }\n+\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+        if(files1!=null) {\n+            for (File file1 : files1) {\n+                File[] files2 = file1.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+                for(File file2 : files2) {\n+                    File[] files3 = file2.listFiles(f -> f.isFile() && FINGERPRINT_FILE_PATTERN.matcher(f.getName()).matches());\n+                    for(File file3 : files3) {\n+                        if(cleanFingerprint(file3, taskListener))\n+                            numFiles++;\n+                    }\n+                    deleteIfEmpty(file2);\n+                }\n+                deleteIfEmpty(file1);\n+            }\n+        }\n+\n+        taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");", "originalCommit": "383cbe835e94d39141651d8d9369c38f720de453", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMzQ5MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445623491", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                listener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" + new Date(deletionBlockerFacet.getTimestamp()) + \" blocked deletion of \" + fingerprintFile);\n          \n          \n            \n                                listener.getLogger().println(String.format(\"%s created on %s blocked deletion of %s\", deletionBlockerFacet.getClass().getName(), new Date(deletionBlockerFacet.getTimestamp()), fingerprintFile));", "author": "afalko", "createdAt": "2020-06-25T14:58:04Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -210,6 +217,61 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        Object fingerprintStorage = FingerprintStorage.get();\n+        if (!(fingerprintStorage instanceof FileFingerprintStorage)) {\n+            logger.fine(\"External fingerprint storage is configured. Skipping execution\");\n+            return;\n+        }\n+\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+        if(files1!=null) {\n+            for (File file1 : files1) {\n+                File[] files2 = file1.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+                for(File file2 : files2) {\n+                    File[] files3 = file2.listFiles(f -> f.isFile() && FINGERPRINT_FILE_PATTERN.matcher(f.getName()).matches());\n+                    for(File file3 : files3) {\n+                        if(cleanFingerprint(file3, taskListener))\n+                            numFiles++;\n+                    }\n+                    deleteIfEmpty(file2);\n+                }\n+                deleteIfEmpty(file1);\n+            }\n+        }\n+\n+        taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");\n+    }\n+\n+    private boolean cleanFingerprint(File fingerprintFile, TaskListener listener) {\n+        try {\n+            Fingerprint fp = loadFingerprint(fingerprintFile);\n+            if (fp == null || (!fp.isAlive() && fp.getFacetBlockingDeletion() == null) ) {\n+                listener.getLogger().println(\"deleting obsolete \" + fingerprintFile);\n+                fingerprintFile.delete();\n+                return true;\n+            } else {\n+                if (!fp.isAlive()) {\n+                    FingerprintFacet deletionBlockerFacet = fp.getFacetBlockingDeletion();\n+                    listener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" + new Date(deletionBlockerFacet.getTimestamp()) + \" blocked deletion of \" + fingerprintFile);", "originalCommit": "383cbe835e94d39141651d8d9369c38f720de453", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTA2MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445939060", "bodyText": "This is moved code, so will make this change in separate PR.", "author": "stellargo", "createdAt": "2020-06-26T02:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMzQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMzg3Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445623877", "bodyText": "curlies", "author": "afalko", "createdAt": "2020-06-25T14:58:34Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -255,4 +317,26 @@ private static String serialize(Fingerprint.RangeSet src) {\n         return buf.toString();\n     }\n \n+    /**\n+     * Deletes a directory if it's empty.\n+     */\n+    private void deleteIfEmpty(File dir) {\n+        String[] r = dir.list();\n+        if(r==null)     return; // can happen in a rare occasion\n+        if(r.length==0)", "originalCommit": "383cbe835e94d39141651d8d9369c38f720de453", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzODk2Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445938966", "bodyText": "This is moved code, so will make this change in separate PR.", "author": "stellargo", "createdAt": "2020-06-26T02:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMzg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDYxMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445624611", "bodyText": "Hmmm...this seems duplicate of https://github.com/jenkinsci/jenkins/pull/4817/files#r445623491", "author": "afalko", "createdAt": "2020-06-25T14:59:32Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -80,4 +86,39 @@ public static FingerprintStorage get() {\n      */\n     public abstract boolean isReady();\n \n+    /**\n+     * Iterates a set of fingerprints, and cleans them up.\n+     * This method is called periodically by {@link hudson.model.FingerprintCleanupThread}.\n+     * For reference, see {@link FileFingerprintStorage#iterateAndCleanupFingerprints(TaskListener)}\n+     * For cleaning up the fingerprint {@link #cleanFingerprint(Fingerprint, TaskListener)} may be used.\n+     */\n+    public abstract void iterateAndCleanupFingerprints(TaskListener taskListener);\n+\n+    /**\n+     * This method performs the cleanup of the given fingerprint.\n+     */\n+    public boolean cleanFingerprint(@NonNull Fingerprint fingerprint, TaskListener taskListener) {\n+        try {\n+            if (!fingerprint.isAlive() && fingerprint.getFacetBlockingDeletion() == null) {\n+                taskListener.getLogger().println(\"deleting obsolete \" + fingerprint.toString());\n+                Fingerprint.delete(fingerprint.getHashString());\n+                return true;\n+            } else {\n+                if (!fingerprint.isAlive()) {\n+                    FingerprintFacet deletionBlockerFacet = fingerprint.getFacetBlockingDeletion();\n+                    taskListener.getLogger().println(deletionBlockerFacet.getClass().getName() + \" created on \" +", "originalCommit": "383cbe835e94d39141651d8d9369c38f720de453", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDg1OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445624858", "bodyText": "Also below as well", "author": "afalko", "createdAt": "2020-06-25T14:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNzYzOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445827639", "bodyText": "It's called in different places,\nFileFingerprint has it's own implementation, the redis plugin is calling this method", "author": "timja", "createdAt": "2020-06-25T20:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzODg2MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r445938861", "bodyText": "Yes, that is correct. This is not duplicate, it has slight changes. The one in FingerprintStorage lays out a basic implementation for plugin developers. File system storage overrides it and uses a slightly different implementation instead which can delete files directly.", "author": "stellargo", "createdAt": "2020-06-26T02:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDYxMQ=="}], "type": "inlineReview"}, {"oid": "7f51b48ae5744903bcaa49218f03f198eca2c6b9", "url": "https://github.com/jenkinsci/jenkins/commit/7f51b48ae5744903bcaa49218f03f198eca2c6b9", "message": "Introduce fingerprint cleanup toggle", "committedDate": "2020-06-26T03:10:29Z", "type": "commit"}, {"oid": "99d1ab16c772d34fd8012054323f176bd57fb481", "url": "https://github.com/jenkinsci/jenkins/commit/99d1ab16c772d34fd8012054323f176bd57fb481", "message": "Link cleanup config to thread", "committedDate": "2020-06-26T03:20:17Z", "type": "commit"}, {"oid": "294d20b7632cf1a40f57204f96a2f26ecf09dd4b", "url": "https://github.com/jenkinsci/jenkins/commit/294d20b7632cf1a40f57204f96a2f26ecf09dd4b", "message": "Add file system cleanup", "committedDate": "2020-06-29T03:36:38Z", "type": "commit"}, {"oid": "46c9d4da030a02462a28e72d57e6d3c7009cbe30", "url": "https://github.com/jenkinsci/jenkins/commit/46c9d4da030a02462a28e72d57e6d3c7009cbe30", "message": "Add test", "committedDate": "2020-06-29T18:18:09Z", "type": "commit"}, {"oid": "18bc44ced97c29d3703706076af75989ec98fb06", "url": "https://github.com/jenkinsci/jenkins/commit/18bc44ced97c29d3703706076af75989ec98fb06", "message": "Introduce external fingerprint storage cleanup tests", "committedDate": "2020-06-30T02:27:51Z", "type": "commit"}, {"oid": "64a826628cd335ea94bcb4d1524eb4a620d89aac", "url": "https://github.com/jenkinsci/jenkins/commit/64a826628cd335ea94bcb4d1524eb4a620d89aac", "message": "Remove redundant statements", "committedDate": "2020-06-30T02:37:44Z", "type": "commit"}, {"oid": "1870552433b016a6f7aa2f9591994b82ec56800e", "url": "https://github.com/jenkinsci/jenkins/commit/1870552433b016a6f7aa2f9591994b82ec56800e", "message": "Fix test", "committedDate": "2020-06-30T03:30:39Z", "type": "commit"}, {"oid": "1d72d0c17ed6c28ed34dd480fc15dd5a54984617", "url": "https://github.com/jenkinsci/jenkins/commit/1d72d0c17ed6c28ed34dd480fc15dd5a54984617", "message": "Merge remote-tracking branch 'upstream/master' into fp_cleanup", "committedDate": "2020-06-30T03:31:37Z", "type": "commit"}, {"oid": "7157e3c0b04d75233fde20204b7379ce1f5c9ee4", "url": "https://github.com/jenkinsci/jenkins/commit/7157e3c0b04d75233fde20204b7379ce1f5c9ee4", "message": "Improve docstring", "committedDate": "2020-07-01T15:08:45Z", "type": "commit"}, {"oid": "bd15db74c20158e43cf33e93522cd41ca49d7fc2", "url": "https://github.com/jenkinsci/jenkins/commit/bd15db74c20158e43cf33e93522cd41ca49d7fc2", "message": "Merge remote-tracking branch 'upstream/master' into fp_cleanup", "committedDate": "2020-07-05T15:02:01Z", "type": "commit"}, {"oid": "e8552cc48865afd53ff92f7b8e4e0da4daa830d4", "url": "https://github.com/jenkinsci/jenkins/commit/e8552cc48865afd53ff92f7b8e4e0da4daa830d4", "message": "Introduce shouldNotCleanFingerprintsWhenDisabled test", "committedDate": "2020-07-07T03:06:35Z", "type": "commit"}, {"oid": "cb95e9290a2d402ff5f4696a747a7578fce7331f", "url": "https://github.com/jenkinsci/jenkins/commit/cb95e9290a2d402ff5f4696a747a7578fce7331f", "message": "Resolve merge conflicts", "committedDate": "2020-07-17T15:06:13Z", "type": "commit"}, {"oid": "342bea66e312a7d67be28b97d51d18b46e0d765e", "url": "https://github.com/jenkinsci/jenkins/commit/342bea66e312a7d67be28b97d51d18b46e0d765e", "message": "Fix default cleanup value", "committedDate": "2020-07-17T15:15:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwODI5MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456508291", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n          \n          \n            \n                @Override\n          \n          \n            \n                public void iterateAndCleanupFingerprints(TaskListener taskListener) {", "author": "oleg-nenashev", "createdAt": "2020-07-17T15:17:31Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -216,6 +223,55 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {", "originalCommit": "342bea66e312a7d67be28b97d51d18b46e0d765e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwODU1NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456508555", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This method performs the cleanup of the given fingerprint.\n          \n          \n            \n                 * This method performs the cleanup of the given fingerprint.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @since TODO", "author": "oleg-nenashev", "createdAt": "2020-07-17T15:18:01Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -80,8 +93,51 @@ public static FingerprintStorage get() {\n      */\n     public abstract boolean isReady();\n \n+    /**\n+     * Iterates a set of fingerprints, and cleans them up. Cleaning up a fingerprint implies deleting the builds\n+     * associated with the fingerprints, once they are no longer available on the system. If all the builds have been\n+     * deleted, the fingerprint itself is deleted.\n+     *\n+     * This method is called periodically by {@link hudson.model.FingerprintCleanupThread}.\n+     * For reference, see {@link FileFingerprintStorage#iterateAndCleanupFingerprints(TaskListener)}\n+     * For cleaning up the fingerprint {@link #cleanFingerprint(Fingerprint, TaskListener)} may be used.\n+     */\n+    public abstract void iterateAndCleanupFingerprints(TaskListener taskListener);\n+\n+    /**\n+     * This method performs the cleanup of the given fingerprint.", "originalCommit": "342bea66e312a7d67be28b97d51d18b46e0d765e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwODc2Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456508767", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 */\n          \n          \n            \n                 * @since TODO\n          \n          \n            \n                 */", "author": "oleg-nenashev", "createdAt": "2020-07-17T15:18:18Z", "path": "core/src/main/java/jenkins/fingerprints/FingerprintStorage.java", "diffHunk": "@@ -80,8 +93,51 @@ public static FingerprintStorage get() {\n      */\n     public abstract boolean isReady();\n \n+    /**\n+     * Iterates a set of fingerprints, and cleans them up. Cleaning up a fingerprint implies deleting the builds\n+     * associated with the fingerprints, once they are no longer available on the system. If all the builds have been\n+     * deleted, the fingerprint itself is deleted.\n+     *\n+     * This method is called periodically by {@link hudson.model.FingerprintCleanupThread}.\n+     * For reference, see {@link FileFingerprintStorage#iterateAndCleanupFingerprints(TaskListener)}\n+     * For cleaning up the fingerprint {@link #cleanFingerprint(Fingerprint, TaskListener)} may be used.\n+     */", "originalCommit": "342bea66e312a7d67be28b97d51d18b46e0d765e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxMDU1Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456510557", "bodyText": "It will not work for configurations deserialized from the disk", "author": "oleg-nenashev", "createdAt": "2020-07-17T15:21:16Z", "path": "core/src/main/java/jenkins/fingerprints/GlobalFingerprintConfiguration.java", "diffHunk": "@@ -43,6 +43,7 @@\n \n     private FingerprintStorage storage = ExtensionList.lookupSingleton(FileFingerprintStorage.class);\n     private static final Logger LOGGER = Logger.getLogger(GlobalFingerprintConfiguration.class.getName());\n+    private boolean fingerprintCleanup = true;", "originalCommit": "342bea66e312a7d67be28b97d51d18b46e0d765e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxMTI3OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456511278", "bodyText": "If it is private, it does not override the implementation in upper class.  Looks like a \ud83d\udc1b for API users", "author": "oleg-nenashev", "createdAt": "2020-07-17T15:22:30Z", "path": "core/src/main/java/jenkins/fingerprints/FileFingerprintStorage.java", "diffHunk": "@@ -216,6 +223,55 @@ public boolean isReady() {\n         return new File(Jenkins.get().getRootDir(),\"fingerprints\").exists();\n     }\n \n+    /**\n+     * Perform Fingerprint cleanup.\n+     */\n+    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\n+        int numFiles = 0;\n+\n+        File root = new File(getRootDir(), FINGERPRINTS_DIR_NAME);\n+        File[] files1 = root.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+        if(files1!=null) {\n+            for (File file1 : files1) {\n+                File[] files2 = file1.listFiles(f -> f.isDirectory() && f.getName().length()==2);\n+                for(File file2 : files2) {\n+                    File[] files3 = file2.listFiles(f -> f.isFile() && FINGERPRINT_FILE_PATTERN.matcher(f.getName()).matches());\n+                    for(File file3 : files3) {\n+                        if(cleanFingerprint(file3, taskListener))\n+                            numFiles++;\n+                    }\n+                    deleteIfEmpty(file2);\n+                }\n+                deleteIfEmpty(file1);\n+            }\n+        }\n+\n+        taskListener.getLogger().println(\"Cleaned up \"+numFiles+\" records\");\n+    }\n+\n+    private boolean cleanFingerprint(File fingerprintFile, TaskListener listener) {", "originalCommit": "342bea66e312a7d67be28b97d51d18b46e0d765e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyMDk2MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456520961", "bodyText": "So this isn't supposed to override the method of the upper class(signature is different). The method in the upper class isn't called by itself, it is -used- by plugin implementations.", "author": "stellargo", "createdAt": "2020-07-17T15:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxMTI3OA=="}], "type": "inlineReview"}, {"oid": "a9e5a3b15066e68122268632a2c304a084b38827", "url": "https://github.com/jenkinsci/jenkins/commit/a9e5a3b15066e68122268632a2c304a084b38827", "message": "Minor fixes", "committedDate": "2020-07-17T15:41:22Z", "type": "commit"}, {"oid": "2a3896db12fa57ffd112fca217cdf464991ebdce", "url": "https://github.com/jenkinsci/jenkins/commit/2a3896db12fa57ffd112fca217cdf464991ebdce", "message": "Enabled->Disabled", "committedDate": "2020-07-17T15:49:38Z", "type": "commit"}, {"oid": "512f086609f3a83edd568a792148f52ed2c9c510", "url": "https://github.com/jenkinsci/jenkins/commit/512f086609f3a83edd568a792148f52ed2c9c510", "message": "Fix tests", "committedDate": "2020-07-17T17:22:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4Njk0OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4817#discussion_r456586948", "bodyText": "Usually Java APIs use 'isSomething()' for boolean getters", "author": "oleg-nenashev", "createdAt": "2020-07-17T17:48:30Z", "path": "core/src/main/java/jenkins/fingerprints/GlobalFingerprintConfiguration.java", "diffHunk": "@@ -63,6 +64,15 @@ public void setStorage(FingerprintStorage fingerprintStorage) {\n                 fingerprintStorage.getDescriptor().getDisplayName());\n     }\n \n+    public boolean getFingerprintCleanupDisabled() {", "originalCommit": "512f086609f3a83edd568a792148f52ed2c9c510", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "578b46f2a5ccc034d9bd4c93178f3eafa8bb3083", "url": "https://github.com/jenkinsci/jenkins/commit/578b46f2a5ccc034d9bd4c93178f3eafa8bb3083", "message": "get -> is", "committedDate": "2020-07-17T18:00:13Z", "type": "commit"}]}