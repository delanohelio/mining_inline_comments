{"pr_number": 4684, "pr_title": "JENKINS-61956 ItemGroupMixin#createProject() does not call Jenkins#checkGoodName()", "pr_createdAt": "2020-04-22T19:48:53Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4684", "timeline": [{"oid": "1321c9e0467d494a293f621f3d2eee9169f24d8f", "url": "https://github.com/jenkinsci/jenkins/commit/1321c9e0467d494a293f621f3d2eee9169f24d8f", "message": "Retry CI", "committedDate": "2020-04-24T20:42:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyMTM1Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4684#discussion_r419021352", "bodyText": "JUnit assertThrows is now available (JUnit 4.13) to make these types of assertion checks cleaner.\nLearned something new here, that the Failure class is a Jenkins exception class.", "author": "MarkEWaite", "createdAt": "2020-05-02T23:32:09Z", "path": "test/src/test/java/hudson/model/ItemGroupMixInTest.java", "diffHunk": "@@ -207,4 +208,62 @@ public boolean isApplicable(Class jobType) {\n         assertThat(Items.getConfigFile(foo).asString(), containsString(\"<description/>\"));\n     }\n \n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void copy_checkGoodName() throws Failure, IOException {\n+    final String goodName = \"calvin-jenkins\";\n+    final String badName = \"calvin@jenkins\";\n+\n+    Project goodProject = r.jenkins.createProject(FreeStyleProject.class, goodName);\n+\n+    try {\n+      r.jenkins.copy(goodProject, badName);\n+      fail(\"@ is an unsafe character therefore copying to a project named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }\n+  }\n+\n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void createProject_checkGoodName() throws Failure, IOException {\n+    final String badName = \"calvin@jenkins\";\n+\n+    try {\n+      r.jenkins.createProject(MockFolder.class, badName);\n+      fail(\"@ is an unsafe character therefore creating a folder named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }\n+  }\n+\n+  @Issue(\"JENKINS-61956\")\n+  @Test\n+  public void createProjectFromXML_checkGoodName() throws Failure, IOException {\n+    final String badName = \"calvin@jenkins\";\n+\n+    final String xml = \"<?xml version='1.0' encoding='UTF-8'?>\\n\" +\n+            \"<!DOCTYPE project[\\n\" +\n+            \"  <!ENTITY foo SYSTEM \\\"file:///\\\">\\n\" +\n+            \"]>\\n\" +\n+            \"<project>\\n\" +\n+            \"  <actions/>\\n\" +\n+            \"  <description>&foo;</description>\\n\" +\n+            \"  <keepDependencies>false</keepDependencies>\\n\" +\n+            \"  <properties/>\\n\" +\n+            \"  <scm class=\\\"hudson.scm.NullSCM\\\"/>\\n\" +\n+            \"  <canRoam>true</canRoam>\\n\" +\n+            \"  <triggers/>\\n\" +\n+            \"  <builders/>\\n\" +\n+            \"  <publishers/>\\n\" +\n+            \"  <buildWrappers/>\\n\" +\n+            \"</project>\";\n+\n+    try {\n+      r.jenkins.createProjectFromXML(badName, new ByteArrayInputStream(xml.getBytes()));\n+      fail(\"@ is an unsafe character therefore creating a project named \" + badName + \" should have failed\");\n+    } catch (Failure x) {\n+      assertEquals(x.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n+    }", "originalCommit": "1321c9e0467d494a293f621f3d2eee9169f24d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMDY4Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4684#discussion_r419030687", "bodyText": "Would you like to me to change it to use assertThrows?", "author": "calvinpark", "createdAt": "2020-05-03T01:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyMTM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE3NDg3Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4684#discussion_r419174877", "bodyText": "Changed", "author": "calvinpark", "createdAt": "2020-05-03T23:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyMTM1Mg=="}], "type": "inlineReview"}, {"oid": "f176292eb4a41c007a97b86ff767ccb36707c1e6", "url": "https://github.com/jenkinsci/jenkins/commit/f176292eb4a41c007a97b86ff767ccb36707c1e6", "message": "JENKINS-61956 ItemGroupMixing#createProject() does not call Jenkins#checkGoodName", "committedDate": "2020-05-03T21:30:55Z", "type": "commit"}, {"oid": "0d69820eeee68467a43b15883b8858cf5068f929", "url": "https://github.com/jenkinsci/jenkins/commit/0d69820eeee68467a43b15883b8858cf5068f929", "message": "@ is an unsafe character therefore do not use in a project name", "committedDate": "2020-05-03T21:30:55Z", "type": "commit"}, {"oid": "59d7ea11eaee94f498bdc1a4fd81a9a62dde0287", "url": "https://github.com/jenkinsci/jenkins/commit/59d7ea11eaee94f498bdc1a4fd81a9a62dde0287", "message": "Add tests", "committedDate": "2020-05-03T21:30:55Z", "type": "commit"}, {"oid": "273ad34072d4f8f19d969043e524f486faa98599", "url": "https://github.com/jenkinsci/jenkins/commit/273ad34072d4f8f19d969043e524f486faa98599", "message": "Use assertThrows()", "committedDate": "2020-05-03T21:30:55Z", "type": "commit"}, {"oid": "273ad34072d4f8f19d969043e524f486faa98599", "url": "https://github.com/jenkinsci/jenkins/commit/273ad34072d4f8f19d969043e524f486faa98599", "message": "Use assertThrows()", "committedDate": "2020-05-03T21:30:55Z", "type": "forcePushed"}]}