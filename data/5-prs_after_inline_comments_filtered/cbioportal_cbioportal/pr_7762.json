{"pr_number": 7762, "pr_title": "SV: add new api to support generic assay chart", "pr_createdAt": "2020-08-05T14:13:12Z", "pr_url": "https://github.com/cBioPortal/cbioportal/pull/7762", "timeline": [{"oid": "7f8dae38b754091fa4b0cf8871b574e448766867", "url": "https://github.com/cBioPortal/cbioportal/commit/7f8dae38b754091fa4b0cf8871b574e448766867", "message": "Add generic assay data bin api", "committedDate": "2020-08-12T14:06:22Z", "type": "forcePushed"}, {"oid": "ca772206c9efb0dee20e74bc1638297218999c8b", "url": "https://github.com/cBioPortal/cbioportal/commit/ca772206c9efb0dee20e74bc1638297218999c8b", "message": "Add generic assay data bin api", "committedDate": "2020-08-12T18:45:55Z", "type": "forcePushed"}, {"oid": "12eeb0794eca39dffab78fce3335b27aa70d5085", "url": "https://github.com/cBioPortal/cbioportal/commit/12eeb0794eca39dffab78fce3335b27aa70d5085", "message": "Add generic assay data bin api", "committedDate": "2020-08-12T20:22:22Z", "type": "forcePushed"}, {"oid": "5a0be2f2c0230e6adc4c6cc20c77dcac6b5c6397", "url": "https://github.com/cBioPortal/cbioportal/commit/5a0be2f2c0230e6adc4c6cc20c77dcac6b5c6397", "message": "Add generic assay data bin api", "committedDate": "2020-08-12T20:25:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NDU3Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470084577", "bodyText": "Why are we suppressing warnings here (and below)?", "author": "n1zea144", "createdAt": "2020-08-13T16:42:33Z", "path": "web/src/main/java/org/cbioportal/web/util/StudyViewFilterApplier.java", "diffHunk": "@@ -546,4 +421,408 @@ private void splitGeneFiltersByMolecularAlterationType(List<GeneFilter> genefilt\n             }\n         }\n     }\n+\n+    public List<String> getUniqkeyKeys(List<String> studyIds, List<String> caseIds) {\n+        List<String> uniqkeyKeys = new ArrayList<String>();\n+        for (int i = 0; i < caseIds.size(); i++) {\n+            uniqkeyKeys.add(studyViewFilterUtil.getCaseUniqueKey(studyIds.get(i), caseIds.get(i)));\n+        }\n+        return uniqkeyKeys;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "originalCommit": "5a0be2f2c0230e6adc4c6cc20c77dcac6b5c6397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI4MjA4Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470282082", "bodyText": "This is just to get rid of Type safety: Unchecked cast warnings in eclipse editor. It is not important, I'll remove them.", "author": "kalletlak", "createdAt": "2020-08-13T22:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NDU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3ODI1NQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470178255", "bodyText": "I wouldn't think this was an xor from the name. Maybe isEitherSampleListIdXOrSampleIdsPresent?", "author": "Luke-Sikina", "createdAt": "2020-08-13T18:56:44Z", "path": "web/src/main/java/org/cbioportal/web/parameter/GenericAssayFilter.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.cbioportal.web.parameter;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Size;\n+import java.util.List;\n+\n+public class GenericAssayFilter {\n+\n+    @Size(min = 1, max = PagingConstants.MAX_PAGE_SIZE)\n+    private List<String> sampleIds;\n+    private String sampleListId;\n+    @Size(min = 1, max = PagingConstants.MAX_PAGE_SIZE)\n+    private List<String> genericAssayStableId;\n+\n+    @AssertTrue\n+    private boolean isEitherSampleListIdOrSampleIdsPresent() {", "originalCommit": "5a0be2f2c0230e6adc4c6cc20c77dcac6b5c6397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI4MDU4Mw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470280583", "bodyText": "It looks correct to me Either...Or. If we want to include xor then I think it should be sampleListIdXOrSampleIdsPresent", "author": "kalletlak", "createdAt": "2020-08-13T22:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3ODI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MjU3MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470182571", "bodyText": "I would think a test to see if value or range is present would be\nv.getValue() != null || (v.getStart() != null || v.getEnd() != null)\nBy checking that the two checks evaluate to the same boolean, you're marking a rows as invalid when it has both a range and a value, or neither a range nor a value. Is that what you want?", "author": "Luke-Sikina", "createdAt": "2020-08-13T19:04:03Z", "path": "web/src/main/java/org/cbioportal/web/parameter/StudyViewFilter.java", "diffHunk": "@@ -61,6 +62,22 @@ private boolean isEitherValueOrRangePresentInGenomicDataIntervalFilters() {\n         return invalidCount == 0;\n     }\n \n+    @AssertTrue\n+    private boolean isEitherValueOrRangePresentInGenericAssayDataIntervalFilters() {\n+        long invalidCount = 0;\n+\n+        if (genericAssayDataFilters != null) {\n+            invalidCount = genericAssayDataFilters\n+                    .stream()\n+                    .flatMap(f -> f.getValues().stream())\n+                    .filter(Objects::nonNull)\n+                    .filter(v -> v.getValue() != null == (v.getStart() != null || v.getEnd() != null))", "originalCommit": "5a0be2f2c0230e6adc4c6cc20c77dcac6b5c6397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1MDkzNA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r472350934", "bodyText": "looks correct to me. If two checks evaluate to the same boolean then it is invalid, which we are evaluating.", "author": "kalletlak", "createdAt": "2020-08-18T17:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MjU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MzM4MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470183381", "bodyText": "Is addressing this TODO within the scope of this PR?", "author": "Luke-Sikina", "createdAt": "2020-08-13T19:05:33Z", "path": "web/src/main/java/org/cbioportal/web/util/ClinicalDataIntervalFilterApplier.java", "diffHunk": "@@ -134,7 +138,7 @@ else if (value.startsWith(gt)) {\n \n         // TODO also add startInclusive and endInclusive as a filterValue parameter?", "originalCommit": "5a0be2f2c0230e6adc4c6cc20c77dcac6b5c6397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3OTkwNQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470279905", "bodyText": "No. And I have no idea about this", "author": "kalletlak", "createdAt": "2020-08-13T22:18:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MzM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0ODkxMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470748912", "bodyText": "I guess we never needed to customize startInclusive and endInclusive options so far. Feel free to remove the TODO.", "author": "onursumer", "createdAt": "2020-08-14T17:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MzM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MDA0OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r471650048", "bodyText": "Sure, I'll clean it up", "author": "kalletlak", "createdAt": "2020-08-17T17:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MzM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NDYyOA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470184628", "bodyText": "I didn't see a DataBinHelperTest in the files - this seems like a good method to unit test.", "author": "Luke-Sikina", "createdAt": "2020-08-13T19:08:01Z", "path": "web/src/main/java/org/cbioportal/web/util/DataBinHelper.java", "diffHunk": "@@ -308,4 +301,35 @@ public String stripOperator(String value) {\n     public boolean isAgeAttribute(String attributeId) {\n         return attributeId != null && attributeId.matches(\"(^AGE$)|(^AGE_.*)|(.*_AGE_.*)|(.*_AGE&)\");\n     }\n+", "originalCommit": "5a0be2f2c0230e6adc4c6cc20c77dcac6b5c6397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3OTE5NA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470279194", "bodyText": "true, but looks like this scenario is tested while testing DataBinner in DataBinnerTest.java", "author": "kalletlak", "createdAt": "2020-08-13T22:16:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NDYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NTgwNg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470185806", "bodyText": "You added logic to dataBinHelper for when start and end are null. Here, you check that in this ternary, so you never pass null, null. Could you eliminate this check and change the behavior of calcRange, or are you doing calcRange(null, null) elsewhere?", "author": "Luke-Sikina", "createdAt": "2020-08-13T19:10:30Z", "path": "web/src/main/java/org/cbioportal/web/util/DataBinner.java", "diffHunk": "@@ -106,7 +96,7 @@ public DataBinner(DataBinHelper dataBinHelper,\n         boolean numericalOnly = false;\n \n         Range<BigDecimal> range = dataBinFilter.getStart() == null && dataBinFilter.getEnd() == null ?", "originalCommit": "5a0be2f2c0230e6adc4c6cc20c77dcac6b5c6397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3ODA2Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470278062", "bodyText": "I was just moving calcRange from one class to another(for some spring dependency injection issues), wasn't checking what it was doing. Yeah, looks like this logic can be removed.", "author": "kalletlak", "createdAt": "2020-08-13T22:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NTgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyMjc0MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470722741", "bodyText": "Looks like calcRange is used even in other files which requires to check those fields for null", "author": "kalletlak", "createdAt": "2020-08-14T16:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NTgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4ODIzMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470188231", "bodyText": "What am I missing here? You add the dataBinHelper, but never use it.", "author": "Luke-Sikina", "createdAt": "2020-08-13T19:14:47Z", "path": "web/src/main/java/org/cbioportal/web/util/LinearDataBinner.java", "diffHunk": "@@ -34,12 +34,8 @@\n \n     public static final Integer DEFAULT_INTERVAL_COUNT = 20;\n \n-    private DataBinHelper dataBinHelper;\n-\n     @Autowired\n-    public LinearDataBinner(DataBinHelper dataBinHelper) {\n-        this.dataBinHelper = dataBinHelper;\n-    }\n+    private DataBinHelper dataBinHelper;", "originalCommit": "5a0be2f2c0230e6adc4c6cc20c77dcac6b5c6397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4ODcyOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470188729", "bodyText": "Same for LogScaleDataBinner.java, ScientificSmallDataBinner.java", "author": "Luke-Sikina", "createdAt": "2020-08-13T19:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4ODIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjY5Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7762#discussion_r470276697", "bodyText": "dataBinHelper is used in this class. I just changed to constructor injection to property injection", "author": "kalletlak", "createdAt": "2020-08-13T22:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4ODIzMQ=="}], "type": "inlineReview"}, {"oid": "8ce576569c868118079889929f1c60251c65e657", "url": "https://github.com/cBioPortal/cbioportal/commit/8ce576569c868118079889929f1c60251c65e657", "message": "Add generic assay data bin api", "committedDate": "2020-08-17T17:34:17Z", "type": "commit"}, {"oid": "8ce576569c868118079889929f1c60251c65e657", "url": "https://github.com/cBioPortal/cbioportal/commit/8ce576569c868118079889929f1c60251c65e657", "message": "Add generic assay data bin api", "committedDate": "2020-08-17T17:34:17Z", "type": "forcePushed"}]}