{"pr_number": 7659, "pr_title": "Treatments in study view", "pr_createdAt": "2020-06-25T18:50:16Z", "pr_url": "https://github.com/cBioPortal/cbioportal/pull/7659", "timeline": [{"oid": "6cb38340148573aedafb85bb83bcf4f0ee59a710", "url": "https://github.com/cBioPortal/cbioportal/commit/6cb38340148573aedafb85bb83bcf4f0ee59a710", "message": "Treatments in study view", "committedDate": "2020-07-01T13:54:39Z", "type": "forcePushed"}, {"oid": "74baff85a7abee384f8dbf077d5545355278be58", "url": "https://github.com/cBioPortal/cbioportal/commit/74baff85a7abee384f8dbf077d5545355278be58", "message": "Study View Treatments API\n\nThis commit creates two new endpoints to support the new treatments\ncharts in the study view. It also adds additional logic to the\nStudyViewFilterApplier to help it filter by treatment. The commit\nalso fixes two endpoints that 500ed when given a filter that results\nin 0 samples.\n\n`/treatments/patient` returns a list of PatientTreatmentRows. Each\npatient treatment rows represents the number of patients that have\nrecieved a specific treatment.\n\n`/treatments/sample` returns a list of SampleTreatmentRows. Each\nsample treatment row represents either the number of samples\nthat were taken after a patient recieved a specific treatment,\nor the number of samples that were taken before a patient recieved\na specific treatment.\n\nThe StudyViewFilter gained two new fields: sampleTreatmentFilters\nand patientTreatmentFilters. These fileds correspond to the previously\ndescribed rows and filter out samples as you would expect.", "committedDate": "2020-07-23T17:36:15Z", "type": "forcePushed"}, {"oid": "5bc84bbbace34d7e76c5377d60279bca74c8091d", "url": "https://github.com/cBioPortal/cbioportal/commit/5bc84bbbace34d7e76c5377d60279bca74c8091d", "message": "Study View Treatments API\n\nThis commit creates two new endpoints to support the new treatments\ncharts in the study view. It also adds additional logic to the\nStudyViewFilterApplier to help it filter by treatment. The commit\nalso fixes two endpoints that 500ed when given a filter that results\nin 0 samples.\n\n`/treatments/patient` returns a list of PatientTreatmentRows. Each\npatient treatment rows represents the number of patients that have\nrecieved a specific treatment.\n\n`/treatments/sample` returns a list of SampleTreatmentRows. Each\nsample treatment row represents either the number of samples\nthat were taken after a patient recieved a specific treatment,\nor the number of samples that were taken before a patient recieved\na specific treatment.\n\nThe StudyViewFilter gained two new fields: sampleTreatmentFilters\nand patientTreatmentFilters. These fileds correspond to the previously\ndescribed rows and filter out samples as you would expect.", "committedDate": "2020-08-17T18:28:42Z", "type": "forcePushed"}, {"oid": "667b9f3f475f96cd04a4bc3513b4eecc03cd0669", "url": "https://github.com/cBioPortal/cbioportal/commit/667b9f3f475f96cd04a4bc3513b4eecc03cd0669", "message": "Study View Treatments API\n\nThis commit creates two new endpoints to support the new treatments\ncharts in the study view. It also adds additional logic to the\nStudyViewFilterApplier to help it filter by treatment. The commit\nalso fixes two endpoints that 500ed when given a filter that results\nin 0 samples.\n\n`/treatments/patient` returns a list of PatientTreatmentRows. Each\npatient treatment rows represents the number of patients that have\nrecieved a specific treatment.\n\n`/treatments/sample` returns a list of SampleTreatmentRows. Each\nsample treatment row represents either the number of samples\nthat were taken after a patient recieved a specific treatment,\nor the number of samples that were taken before a patient recieved\na specific treatment.\n\nThe StudyViewFilter gained two new fields: sampleTreatmentFilters\nand patientTreatmentFilters. These fileds correspond to the previously\ndescribed rows and filter out samples as you would expect.", "committedDate": "2020-08-18T15:25:50Z", "type": "forcePushed"}, {"oid": "8a627416c6e04fb7aee666ac36265ae4ad6cc62f", "url": "https://github.com/cBioPortal/cbioportal/commit/8a627416c6e04fb7aee666ac36265ae4ad6cc62f", "message": "Study View Treatments API\n\nThis commit creates two new endpoints to support the new treatments\ncharts in the study view. It also adds additional logic to the\nStudyViewFilterApplier to help it filter by treatment. The commit\nalso fixes two endpoints that 500ed when given a filter that results\nin 0 samples.\n\n`/treatments/patient` returns a list of PatientTreatmentRows. Each\npatient treatment rows represents the number of patients that have\nrecieved a specific treatment.\n\n`/treatments/sample` returns a list of SampleTreatmentRows. Each\nsample treatment row represents either the number of samples\nthat were taken after a patient recieved a specific treatment,\nor the number of samples that were taken before a patient recieved\na specific treatment.\n\nThe StudyViewFilter gained two new fields: sampleTreatmentFilters\nand patientTreatmentFilters. These fileds correspond to the previously\ndescribed rows and filter out samples as you would expect.", "committedDate": "2020-08-18T16:00:19Z", "type": "forcePushed"}, {"oid": "cdb8c7b960e8c21ddea21da806ba38702b0b391c", "url": "https://github.com/cBioPortal/cbioportal/commit/cdb8c7b960e8c21ddea21da806ba38702b0b391c", "message": "Study View Treatments API\n\nThis commit creates two new endpoints to support the new treatments\ncharts in the study view. It also adds additional logic to the\nStudyViewFilterApplier to help it filter by treatment. The commit\nalso fixes two endpoints that 500ed when given a filter that results\nin 0 samples.\n\n`/treatments/patient` returns a list of PatientTreatmentRows. Each\npatient treatment rows represents the number of patients that have\nrecieved a specific treatment.\n\n`/treatments/sample` returns a list of SampleTreatmentRows. Each\nsample treatment row represents either the number of samples\nthat were taken after a patient recieved a specific treatment,\nor the number of samples that were taken before a patient recieved\na specific treatment.\n\nThe StudyViewFilter gained two new fields: sampleTreatmentFilters\nand patientTreatmentFilters. These fileds correspond to the previously\ndescribed rows and filter out samples as you would expect.", "committedDate": "2020-08-19T17:31:21Z", "type": "forcePushed"}, {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691", "url": "https://github.com/cBioPortal/cbioportal/commit/c8e958f930fb4e55a2ea6971109e261139b6e691", "message": "Study View Treatments API\n\nThis commit creates two new endpoints to support the new treatments\ncharts in the study view. It also adds additional logic to the\nStudyViewFilterApplier to help it filter by treatment. The commit\nalso fixes two endpoints that 500ed when given a filter that results\nin 0 samples.\n\n`/treatments/patient` returns a list of PatientTreatmentRows. Each\npatient treatment rows represents the number of patients that have\nrecieved a specific treatment.\n\n`/treatments/sample` returns a list of SampleTreatmentRows. Each\nsample treatment row represents either the number of samples\nthat were taken after a patient recieved a specific treatment,\nor the number of samples that were taken before a patient recieved\na specific treatment.\n\nThe StudyViewFilter gained two new fields: sampleTreatmentFilters\nand patientTreatmentFilters. These fileds correspond to the previously\ndescribed rows and filter out samples as you would expect.", "committedDate": "2020-08-19T17:48:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0OTQ1OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473349459", "bodyText": "Maybe change to \"Get all patient level treatments\"", "author": "dippindots", "createdAt": "2020-08-19T21:40:17Z", "path": "web/src/main/java/org/cbioportal/web/TreatmentController.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package org.cbioportal.web;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import org.cbioportal.model.PatientTreatmentRow;\n+import org.cbioportal.model.SampleTreatmentRow;\n+import org.cbioportal.service.TreatmentService;\n+import org.cbioportal.web.config.annotation.PublicApi;\n+import org.cbioportal.web.parameter.*;\n+import org.cbioportal.web.util.StudyViewFilterApplier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.*;\n+import springfox.documentation.annotations.ApiIgnore;\n+\n+import javax.validation.Valid;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@PublicApi\n+@RestController\n+@Validated\n+@Api(tags = \"Treatments\", description = \" \")\n+public class TreatmentController {\n+\n+    @Autowired\n+    private TreatmentService treatmentService;\n+    \n+    @Autowired\n+    private StudyViewFilterApplier studyViewFilterApplier;\n+\n+    @PreAuthorize(\"hasPermission(#involvedCancerStudies, 'Collection<CancerStudyId>', 'read')\")\n+    @RequestMapping(value = \"/treatments/patient\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(\"Get all cancer types\")", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2OTk1OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473369959", "bodyText": "should be consistent (all space).", "author": "dippindots", "createdAt": "2020-08-19T22:05:21Z", "path": "web/src/main/java/org/cbioportal/web/parameter/StudyViewFilter.java", "diffHunk": "@@ -21,7 +22,9 @@\n     private List<String> studyIds;\n     private List<ClinicalDataFilter> clinicalDataFilters;\n     private List<GeneFilter> geneFilters;\n-    private List<List<String>> genomicProfiles;\n+    private AndedSampleTreatmentFilters sampleTreatmentFilters;\n+    private AndedPatientTreatmentFilters patientTreatmentFilters;\n+\tprivate List<List<String>> genomicProfiles;", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NTQyMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473375422", "bodyText": "Better to add the same comment * @param sampleId sample.STABLE_ID as PatientTreatmentFilter.java", "author": "dippindots", "createdAt": "2020-08-19T22:12:06Z", "path": "web/src/main/java/org/cbioportal/web/parameter/filter/SampleTreatmentFilter.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.cbioportal.web.parameter.filter;\n+\n+import org.cbioportal.model.TemporalRelation;\n+import org.cbioportal.model.SampleTreatmentRow;\n+import org.cbioportal.web.parameter.SampleIdentifier;\n+\n+import java.util.Map;\n+\n+public class SampleTreatmentFilter {\n+    private String treatment;\n+    private TemporalRelation time;\n+\n+    /**\n+     * A sample should be included if the treatment row that corresponds\n+     * to the treatment and time in this filter contains that sample.\n+     * @param treatments key is SampleTreatmentRow::calculateKey", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3OTUyMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473379523", "bodyText": "Is this necessary? Will you create more test cases for StudyViewFilterApplierTest?", "author": "dippindots", "createdAt": "2020-08-19T22:17:18Z", "path": "web/src/test/java/org/cbioportal/web/util/StudyViewFilterApplierTest.java", "diffHunk": "@@ -63,6 +63,8 @@\n     private SampleListService sampleListService;\n     @Mock\n     private GenericAssayService genericAssayService;\n+    @Mock\n+    private TreatmentService treatmentService;", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Nzk1MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473067950", "bodyText": "Any specific reason for including Sample in the name? If not, I would prefer just ClinicalEvent", "author": "kalletlak", "createdAt": "2020-08-19T14:22:06Z", "path": "model/src/main/java/org/cbioportal/model/ClinicalEventSample.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.cbioportal.model;\n+\n+import java.util.Objects;\n+\n+public class ClinicalEventSample {", "originalCommit": "8a627416c6e04fb7aee666ac36265ae4ad6cc62f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY5NDYwNg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474694606", "bodyText": "There is already a ClinicalEvent object. It had a lot more stuff in it than I needed, so I opted to use my own object. I named my object ClinicalEventSample because I am using it to represent a sample, as stored in the clinical events table.", "author": "Luke-Sikina", "createdAt": "2020-08-21T13:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Nzk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNTgwMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473925801", "bodyText": "should this be patients?", "author": "kalletlak", "createdAt": "2020-08-20T12:17:15Z", "path": "model/src/main/java/org/cbioportal/model/PatientTreatmentRow.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.cbioportal.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class PatientTreatmentRow {\n+    private String treatment;\n+    private int count;\n+    private Set<String> samples;", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY5ODI2NQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474698265", "bodyText": "No. Because everything in the study view is filtered by sample + study, I kept track of the samples included in the row, rather than the patients.", "author": "Luke-Sikina", "createdAt": "2020-08-21T13:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNTgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMDE1Mw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473930153", "bodyText": "Since it is a Map, any specific reason to sort?", "author": "kalletlak", "createdAt": "2020-08-20T12:25:09Z", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.ClinicalEventSample;\n+import org.cbioportal.model.Treatment;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+@Repository\n+public class TreatmentMyBatisRepository implements TreatmentRepository {\n+    @Autowired\n+    private TreatmentMapper treatmentMapper;\n+    \n+    @Override\n+    public Map<String, List<Treatment>> getTreatmentsByPatient(List<String> sampleIds, List<String> studyIds) {\n+        return treatmentMapper.getAllTreatments(sampleIds, studyIds)\n+            .stream()\n+            .sorted(Comparator.comparingInt(Treatment::getStart))", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY5ODQ4MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474698480", "bodyText": "Good catch.", "author": "Luke-Sikina", "createdAt": "2020-08-21T13:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMDE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMTQxMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473931413", "bodyText": "May be getClinicalEventsByPatientId", "author": "kalletlak", "createdAt": "2020-08-20T12:27:20Z", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.ClinicalEventSample;\n+import org.cbioportal.model.Treatment;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+@Repository\n+public class TreatmentMyBatisRepository implements TreatmentRepository {\n+    @Autowired\n+    private TreatmentMapper treatmentMapper;\n+    \n+    @Override\n+    public Map<String, List<Treatment>> getTreatmentsByPatient(List<String> sampleIds, List<String> studyIds) {\n+        return treatmentMapper.getAllTreatments(sampleIds, studyIds)\n+            .stream()\n+            .sorted(Comparator.comparingInt(Treatment::getStart))\n+            .collect(groupingBy(Treatment::getPatientId));\n+    }\n+\n+    @Override\n+    public Map<String, List<ClinicalEventSample>> getSamplesByPatient(List<String> sampleIds, List<String> studyIds) {", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA0ODY4Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474048687", "bodyText": "may be getTreatmentsByPatientId", "author": "kalletlak", "createdAt": "2020-08-20T14:58:10Z", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.ClinicalEventSample;\n+import org.cbioportal.model.Treatment;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+@Repository\n+public class TreatmentMyBatisRepository implements TreatmentRepository {\n+    @Autowired\n+    private TreatmentMapper treatmentMapper;\n+    \n+    @Override\n+    public Map<String, List<Treatment>> getTreatmentsByPatient(List<String> sampleIds, List<String> studyIds) {", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDc3OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474100778", "bodyText": "Method name doesn't suggest anything about return type. May be rename it?", "author": "kalletlak", "createdAt": "2020-08-20T16:08:20Z", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMapper.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.ClinicalEventSample;\n+import org.cbioportal.model.Treatment;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public interface TreatmentMapper {\n+    List<Treatment> getAllTreatments(List<String> sampleIds, List<String> studyIds);\n+\n+    List<ClinicalEventSample> getAllSamples(List<String> sampleIds, List<String> studyIds);", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExNDE4Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474114182", "bodyText": "looks like samples are iterated 3 times, will there be any performance issue?", "author": "kalletlak", "createdAt": "2020-08-20T16:29:16Z", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);\n+            } else {\n+                uniqueRows.put(rowToAdd.getTreatment() + rowToAdd.getTime().name(), rowToAdd);\n+            }\n+        });\n+\n+        List<SampleTreatmentRow> flattenedRows = new ArrayList<>(uniqueRows.values());\n+        flattenedRows.sort(Comparator.comparing(a -> (a.getTreatment() + a.getTime().name())));\n+        return flattenedRows;\n+    }\n+\n+\n+    /**\n+     * For a given treatment, you can have samples that are taken\n+     * before (pre), after (post), or that don't have a date (unknown)\n+     * \n+     * This class accepts an initial list of samples and a treatment.\n+     * At the start, all samples are considered pre, as there hasn't been\n+     * any treatment start / stop times.\n+     * \n+     * You then call moveSamplesToPost on this with a series of matching\n+     * treatments. Each call will move samples taken \n+     */\n+    private static class TreatmentRowTriplet {\n+        private final Set<ClinicalEventSample> pre, post, unknown;\n+        private final String treatment;\n+        private final Set<String> studyIds;\n+\n+        TreatmentRowTriplet(List<ClinicalEventSample> samples, String treatment) {\n+            this.treatment = treatment;\n+            post = new HashSet<>();\n+            pre = samples.stream()", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDQ2Mw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474134463", "bodyText": "should this also be . getOrDefault?", "author": "kalletlak", "createdAt": "2020-08-20T16:51:46Z", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcwNDMxNg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474704316", "bodyText": "It doesn't have to be, no. This function is called in getAllSampleTreatmentRows while iterating over the keys of samplesByPatient. patientId is a key from samplesByPatient, so you're guaranteed to get a match.", "author": "Luke-Sikina", "createdAt": "2020-08-21T13:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDQ2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1MzIzMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474153231", "bodyText": "Looks like sorted list is not required at any place. this response is directly sent through api (I assume sorting will be done in front-end).", "author": "kalletlak", "createdAt": "2020-08-20T17:25:32Z", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);\n+            } else {\n+                uniqueRows.put(rowToAdd.getTreatment() + rowToAdd.getTime().name(), rowToAdd);\n+            }\n+        });\n+\n+        List<SampleTreatmentRow> flattenedRows = new ArrayList<>(uniqueRows.values());\n+        flattenedRows.sort(Comparator.comparing(a -> (a.getTreatment() + a.getTime().name())));", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcwNTEwMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474705103", "bodyText": "You're right. I probably wrote this before I realized sorting was going to be done entirely in the frontend.", "author": "Luke-Sikina", "createdAt": "2020-08-21T13:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1MzIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1NzUyNQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474157525", "bodyText": "looks like all treatments can be fetched from treatmentsByPatient(line 139). would it be different invoking treatmentRepository.getAllUniqueTreatments?", "author": "kalletlak", "createdAt": "2020-08-20T17:33:10Z", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);\n+            } else {\n+                uniqueRows.put(rowToAdd.getTreatment() + rowToAdd.getTime().name(), rowToAdd);\n+            }\n+        });\n+\n+        List<SampleTreatmentRow> flattenedRows = new ArrayList<>(uniqueRows.values());\n+        flattenedRows.sort(Comparator.comparing(a -> (a.getTreatment() + a.getTime().name())));\n+        return flattenedRows;\n+    }\n+\n+\n+    /**\n+     * For a given treatment, you can have samples that are taken\n+     * before (pre), after (post), or that don't have a date (unknown)\n+     * \n+     * This class accepts an initial list of samples and a treatment.\n+     * At the start, all samples are considered pre, as there hasn't been\n+     * any treatment start / stop times.\n+     * \n+     * You then call moveSamplesToPost on this with a series of matching\n+     * treatments. Each call will move samples taken \n+     */\n+    private static class TreatmentRowTriplet {\n+        private final Set<ClinicalEventSample> pre, post, unknown;\n+        private final String treatment;\n+        private final Set<String> studyIds;\n+\n+        TreatmentRowTriplet(List<ClinicalEventSample> samples, String treatment) {\n+            this.treatment = treatment;\n+            post = new HashSet<>();\n+            pre = samples.stream()\n+                .filter(s -> s.getTimeTaken() != null)\n+                .collect(Collectors.toSet());\n+            unknown = samples.stream()\n+                .filter(s -> s.getTimeTaken() == null)\n+                .collect(Collectors.toSet());\n+            studyIds = samples.stream()\n+                .map(ClinicalEventSample::getStudyId)\n+                .collect(Collectors.toSet());\n+        }\n+\n+        /**\n+         * Moves any samples marked as pre that were taken after the treatment\n+         * started to post.\n+         * \n+         * @param treatment a treatment with a start value. It is assumed that\n+         *                  the treatment matches the treatment stored in this triplet\n+         */\n+        void moveSamplesToPost(Treatment treatment) {\n+            for (Iterator<ClinicalEventSample> iterator = pre.iterator(); iterator.hasNext(); ) {\n+                ClinicalEventSample clinicalEventSample = iterator.next();\n+                // edge case: is a sample taken the same day a treatment starts pre or post?\n+                // We're saying pre here\n+                if (clinicalEventSample.getTimeTaken() > treatment.getStart()) {\n+                    iterator.remove();\n+                    post.add(clinicalEventSample);\n+                }\n+            }\n+        }\n+        \n+        Stream<SampleTreatmentRow> toRows() {\n+            return Stream.of(\n+                    new SampleTreatmentRow(TemporalRelation.Pre, treatment, pre.size(), toStrings(pre), studyIds),\n+                    new SampleTreatmentRow(TemporalRelation.Post, treatment, post.size(), toStrings(post), studyIds),\n+                    new SampleTreatmentRow(TemporalRelation.Unknown, treatment, unknown.size(), toStrings(unknown), studyIds)\n+            );\n+        }\n+        \n+        private Set<String> toStrings(Set<ClinicalEventSample> samples) {\n+            return samples.stream()\n+                    .map(ClinicalEventSample::getSampleId)\n+                    .collect(Collectors.toSet());\n+        }\n+    }\n+\n+    @Override\n+    public List<PatientTreatmentRow> getAllPatientTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository\n+            .getSamplesByPatient(sampleIds, studyIds)\n+            .entrySet()\n+            .stream()\n+            .filter(e -> treatmentsByPatient.containsKey(e.getKey()))\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        Set<String> treatments = treatmentRepository.getAllUniqueTreatments(sampleIds, studyIds);", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1MjU5NA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474752594", "bodyText": "You're right - you wouldn't get a different result. I guess I just did this because it is a bit simpler to read, and it translates into SQL pretty well. I think this service is complex enough without an extra hunk of logic to extract treatments from the patient treatment map.", "author": "Luke-Sikina", "createdAt": "2020-08-21T14:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1NzUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MjU4Mw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474162583", "bodyText": "shouldn't this be uniqueRows.get(rowToAdd.getTreatment() + rowToAdd.getTime().name()).add(rowToAdd);?\nbtw could you create a separate method for generating the key?", "author": "kalletlak", "createdAt": "2020-08-20T17:42:23Z", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MDQyOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474760429", "bodyText": "Good catch. Looks like the toString had the same function, so not a bug, but you're right, a key() method would be good here.", "author": "Luke-Sikina", "createdAt": "2020-08-21T15:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MjU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NDc5OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474184798", "bodyText": "I think check for sample in TreatmentRow samples list might be an expensive operation(if there are many samples and/or if there are many treatments in selection). And there can be same sample id for multiple studies. I think you need to check for both sampleId and studyId together.\nI propose to change replace sample and studies in both PatientTreatmentRow and SampleTreatmentRow to a Map<SampleIdentifier, Boolean> if not to a List -> to support duplicate sampleIds.\nThis goes same with SampleTreatmentFilter.java", "author": "kalletlak", "createdAt": "2020-08-20T18:23:18Z", "path": "web/src/main/java/org/cbioportal/web/parameter/filter/PatientTreatmentFilter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.cbioportal.web.parameter.filter;\n+\n+import org.cbioportal.model.PatientTreatmentRow;\n+import org.cbioportal.web.parameter.SampleIdentifier;\n+\n+import java.util.Map;\n+\n+public class PatientTreatmentFilter {\n+    private String treatment;\n+\n+    /**\n+     * A sampleId should be included if the treatment row that corresponds\n+     * to the treatment and time in this filter contains that sampleId.\n+     * @param sampleId sample.STABLE_ID\n+     * @param treatments key is PatientTreatmentRow::calculateKey\n+     */\n+    public boolean filter(SampleIdentifier sampleId, Map<String, PatientTreatmentRow> treatments) {\n+        PatientTreatmentRow row = treatments.get(treatment);\n+        return row != null && row.getSamples().contains(sampleId.getSampleId());", "originalCommit": "c8e958f930fb4e55a2ea6971109e261139b6e691", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1NjkxMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474956910", "bodyText": "This is a good idea, but I can't exactly do that, because SampleIdentifier isn't in the cbioportal package, and that package doesn't have a dependency on web. I use a string to boolean map with the same intent.", "author": "Luke-Sikina", "createdAt": "2020-08-21T20:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NDc5OA=="}], "type": "inlineReview"}, {"oid": "9b7761ee298465c5028d90a26307df226413fd05", "url": "https://github.com/cBioPortal/cbioportal/commit/9b7761ee298465c5028d90a26307df226413fd05", "message": "Study View Treatments API\n\nThis commit creates two new endpoints to support the new treatments\ncharts in the study view. It also adds additional logic to the\nStudyViewFilterApplier to help it filter by treatment. The commit\nalso fixes two endpoints that 500ed when given a filter that results\nin 0 samples.\n\n`/treatments/patient` returns a list of PatientTreatmentRows. Each\npatient treatment rows represents the number of patients that have\nrecieved a specific treatment.\n\n`/treatments/sample` returns a list of SampleTreatmentRows. Each\nsample treatment row represents either the number of samples\nthat were taken after a patient recieved a specific treatment,\nor the number of samples that were taken before a patient recieved\na specific treatment.\n\nThe StudyViewFilter gained two new fields: sampleTreatmentFilters\nand patientTreatmentFilters. These fileds correspond to the previously\ndescribed rows and filter out samples as you would expect.", "committedDate": "2020-08-20T20:25:56Z", "type": "forcePushed"}, {"oid": "9ed7d844197867fbc02edd09b59a6f39ac9461a2", "url": "https://github.com/cBioPortal/cbioportal/commit/9ed7d844197867fbc02edd09b59a6f39ac9461a2", "message": "PR review changes.", "committedDate": "2020-08-21T19:20:19Z", "type": "forcePushed"}, {"oid": "37289c0df1ac15d9a6bd71242ba86257bc29427e", "url": "https://github.com/cBioPortal/cbioportal/commit/37289c0df1ac15d9a6bd71242ba86257bc29427e", "message": "Study View Treatments API\n\nThis commit creates two new endpoints to support the new treatments\ncharts in the study view. It also adds additional logic to the\nStudyViewFilterApplier to help it filter by treatment. The commit\nalso fixes two endpoints that 500ed when given a filter that results\nin 0 samples.\n\n`/treatments/patient` returns a list of PatientTreatmentRows. Each\npatient treatment rows represents the number of patients that have\nrecieved a specific treatment.\n\n`/treatments/sample` returns a list of SampleTreatmentRows. Each\nsample treatment row represents either the number of samples\nthat were taken after a patient recieved a specific treatment,\nor the number of samples that were taken before a patient recieved\na specific treatment.\n\nThe StudyViewFilter gained two new fields: sampleTreatmentFilters\nand patientTreatmentFilters. These fileds correspond to the previously\ndescribed rows and filter out samples as you would expect.", "committedDate": "2020-08-21T20:14:01Z", "type": "commit"}, {"oid": "37289c0df1ac15d9a6bd71242ba86257bc29427e", "url": "https://github.com/cBioPortal/cbioportal/commit/37289c0df1ac15d9a6bd71242ba86257bc29427e", "message": "Study View Treatments API\n\nThis commit creates two new endpoints to support the new treatments\ncharts in the study view. It also adds additional logic to the\nStudyViewFilterApplier to help it filter by treatment. The commit\nalso fixes two endpoints that 500ed when given a filter that results\nin 0 samples.\n\n`/treatments/patient` returns a list of PatientTreatmentRows. Each\npatient treatment rows represents the number of patients that have\nrecieved a specific treatment.\n\n`/treatments/sample` returns a list of SampleTreatmentRows. Each\nsample treatment row represents either the number of samples\nthat were taken after a patient recieved a specific treatment,\nor the number of samples that were taken before a patient recieved\na specific treatment.\n\nThe StudyViewFilter gained two new fields: sampleTreatmentFilters\nand patientTreatmentFilters. These fileds correspond to the previously\ndescribed rows and filter out samples as you would expect.", "committedDate": "2020-08-21T20:14:01Z", "type": "forcePushed"}]}