{"pr_number": 7860, "pr_title": "Add new api's to support saving custom data charts", "pr_createdAt": "2020-09-03T19:05:08Z", "pr_url": "https://github.com/cBioPortal/cbioportal/pull/7860", "timeline": [{"oid": "d7bbc26a8b174e1301f82ea9ceb3a7818463d45b", "url": "https://github.com/cBioPortal/cbioportal/commit/d7bbc26a8b174e1301f82ea9ceb3a7818463d45b", "message": "Add new study view api for custom data", "committedDate": "2020-10-08T19:08:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgwNzE1NA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7860#discussion_r512807154", "bodyText": "Where is this used?", "author": "n1zea144", "createdAt": "2020-10-27T15:46:02Z", "path": "web/src/main/java/org/cbioportal/web/SessionServiceController.java", "diffHunk": "@@ -454,6 +435,43 @@ public void updateSession(@PathVariable SessionType type, @PathVariable String i\n             return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n         }\n     }\n+\n+    @RequestMapping(value = \"/custom_data/fetch\", method = RequestMethod.POST)\n+    public ResponseEntity<List<CustomDataSession>> fetchCustomProperties(\n+            @Size(min = 1, max = PagingConstants.MAX_PAGE_SIZE) @RequestBody List<String> studyIds,\n+            HttpServletResponse response) throws IOException {\n+\n+        if (isSessionServiceEnabled() && isAuthorized()) {\n+\n+            String username = userName();\n+            Map<String, Object> map = new HashMap<>();", "originalCommit": "3d5aeebbfd9678ebd5e842fdd8286307f20e8181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4NTUxMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7860#discussion_r516885510", "bodyText": "good catch. this is not used now. I'll remove it", "author": "kalletlak", "createdAt": "2020-11-03T18:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgwNzE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyOTU2OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7860#discussion_r512829569", "bodyText": "Typo in classname.", "author": "n1zea144", "createdAt": "2020-10-27T16:12:24Z", "path": "web/src/main/java/org/cbioportal/web/studyview/CustomDataContorller.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package org.cbioportal.web.studyview;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.Valid;\n+\n+import org.cbioportal.model.ClinicalDataCountItem;\n+import org.cbioportal.model.Patient;\n+import org.cbioportal.service.PatientService;\n+import org.cbioportal.session_service.domain.SessionType;\n+import org.cbioportal.web.config.annotation.InternalApi;\n+import org.cbioportal.web.parameter.ClinicalDataCountFilter;\n+import org.cbioportal.web.parameter.ClinicalDataFilter;\n+import org.cbioportal.web.parameter.CustomDataSession;\n+import org.cbioportal.web.parameter.SampleIdentifier;\n+import org.cbioportal.web.parameter.StudyViewFilter;\n+import org.cbioportal.web.util.SessionServiceRequestHandler;\n+import org.cbioportal.web.util.StudyViewFilterApplier;\n+import org.cbioportal.web.util.StudyViewFilterUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.RequestAttribute;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import springfox.documentation.annotations.ApiIgnore;\n+\n+@InternalApi\n+@RestController\n+@Validated\n+@Api(tags = \"Study View\", description = \" \")\n+public class CustomDataContorller {", "originalCommit": "3d5aeebbfd9678ebd5e842fdd8286307f20e8181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzODk2Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7860#discussion_r512838967", "bodyText": "Is this needed if the method throws exception?", "author": "n1zea144", "createdAt": "2020-10-27T16:23:57Z", "path": "web/src/main/java/org/cbioportal/web/util/SessionServiceRequestHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.cbioportal.web.util;\n+\n+import java.nio.charset.Charset;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang.StringUtils;\n+import org.cbioportal.session_service.domain.Session;\n+import org.cbioportal.session_service.domain.SessionType;\n+import org.cbioportal.web.parameter.CustomDataSession;\n+import org.cbioportal.web.parameter.PageSettings;\n+import org.cbioportal.web.parameter.VirtualStudy;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+@Component\n+public class SessionServiceRequestHandler {\n+\n+    @Value(\"${session.service.url:}\")\n+    private String sessionServiceURL;\n+\n+    @Value(\"${session.service.user:}\")\n+    private String sessionServiceUser;\n+\n+    @Value(\"${session.service.password:}\")\n+    private String sessionServicePassword;\n+\n+    private Boolean isBasicAuthEnabled() {\n+        return isSessionServiceEnabled() && sessionServicePassword != null && !sessionServicePassword.equals(\"\");\n+    }\n+\n+    private Boolean isSessionServiceEnabled() {\n+        return !StringUtils.isEmpty(sessionServiceURL);\n+    }\n+\n+    public HttpHeaders getHttpHeaders() {\n+\n+        return new HttpHeaders() {\n+            {\n+                if (isBasicAuthEnabled()) {\n+                    String auth = sessionServiceUser + \":\" + sessionServicePassword;\n+                    byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(Charset.forName(\"US-ASCII\")));\n+                    String authHeader = \"Basic \" + new String(encodedAuth);\n+                    set(\"Authorization\", authHeader);\n+                }\n+                set(\"Content-Type\", \"application/json\");\n+            }\n+        };\n+    }\n+\n+    public Session getSession(SessionType type, String id) throws Exception {\n+\n+        try {\n+            RestTemplate restTemplate = new RestTemplate();\n+\n+            // add basic authentication in header\n+            HttpEntity<String> headers = new HttpEntity<String>(getHttpHeaders());\n+            ResponseEntity<String> responseEntity = restTemplate.exchange(sessionServiceURL + type + \"/\" + id,\n+                    HttpMethod.GET, headers, String.class);\n+\n+            ObjectMapper mapper = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n+                    false);\n+\n+            Session session;\n+\n+            if (type.equals(SessionType.virtual_study) || type.equals(SessionType.group)) {\n+                session = mapper.readValue(responseEntity.getBody(), VirtualStudy.class);\n+            } else if (type.equals(SessionType.settings)) {\n+                session = mapper.readValue(responseEntity.getBody(), PageSettings.class);\n+            } else if (type.equals(SessionType.custom_data)) {\n+                session = mapper.readValue(responseEntity.getBody(), CustomDataSession.class);\n+            } else {\n+                session = mapper.readValue(responseEntity.getBody(), Session.class);\n+            }\n+\n+            return session;\n+\n+        } catch (Exception exception) {", "originalCommit": "3d5aeebbfd9678ebd5e842fdd8286307f20e8181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4ODcwNw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7860#discussion_r516888707", "bodyText": "yeah, not required", "author": "kalletlak", "createdAt": "2020-11-03T18:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzODk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMzA0OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7860#discussion_r512903048", "bodyText": "Kinda makes me nervous burying these missing value constants in code like this and not putting them in a central place.", "author": "n1zea144", "createdAt": "2020-10-27T17:48:10Z", "path": "web/src/main/java/org/cbioportal/web/util/StudyViewFilterUtil.java", "diffHunk": "@@ -63,4 +78,77 @@ public ClinicalDataBin dataBinToClinicalDataBin(ClinicalDataBinFilter attribute,\n             return sampleList.getStableId().replace(sampleList.getCancerStudyIdentifier() + \"_\", \"\");\n         }));\n     }\n+\n+    public Integer getFilteredCountByDataEquality(List<ClinicalDataFilter> attributes, MultiKeyMap clinicalDataMap,\n+            String entityId, String studyId, Boolean negateFilters) {\n+        Integer count = 0;\n+        for (ClinicalDataFilter s : attributes) {\n+            List<String> filteredValues = s.getValues().stream().map(DataFilterValue::getValue)\n+                    .collect(Collectors.toList());\n+            filteredValues.replaceAll(String::toUpperCase);\n+            if (clinicalDataMap.containsKey(studyId, entityId, s.getAttributeId())) {\n+                String value = (String) clinicalDataMap.get(studyId, entityId, s.getAttributeId());\n+                if (negateFilters ^ filteredValues.contains(value)) {\n+                    count++;\n+                }\n+            } else if (negateFilters ^ filteredValues.contains(\"NA\")) {\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+\n+    public List<ClinicalDataCountItem> getClinicalDataCountsFromCustomData(List<CustomDataSession> customDataSessions,\n+            Map<String, SampleIdentifier> filteredSamplesMap, List<Patient> patients) {\n+        int totalSamplesCount = filteredSamplesMap.keySet().size();\n+        int totalPatientsCount = patients.size();\n+\n+        return customDataSessions.stream().map(customDataSession -> {\n+\n+            Map<String, List<CustomDataValue>> groupedDatabyValue = customDataSession.getData().getData().stream()\n+                    .filter(datum -> {\n+                        return filteredSamplesMap\n+                                .containsKey(getCaseUniqueKey(datum.getStudyId(), datum.getSampleId()));\n+                    }).collect(Collectors.groupingBy(CustomDataValue::getValue));\n+\n+            ClinicalDataCountItem clinicalDataCountItem = new ClinicalDataCountItem();\n+            clinicalDataCountItem.setAttributeId(customDataSession.getId());\n+\n+            List<ClinicalDataCount> clinicalDataCounts = groupedDatabyValue.entrySet().stream()\n+                    .map(entry -> {\n+                        long count = entry.getValue().stream().map(datum -> {\n+                            return getCaseUniqueKey(datum.getStudyId(),\n+                                    customDataSession.getData().getPatientAttribute()\n+                                            ? datum.getPatientId()\n+                                            : datum.getSampleId());\n+        \n+                        }).distinct().count();\n+                        ClinicalDataCount dataCount = new ClinicalDataCount();\n+                        dataCount.setValue(entry.getKey());\n+                        dataCount.setCount(Math.toIntExact(count));\n+                        return dataCount;\n+                    })\n+                    .filter(c -> !c.getValue().toUpperCase().equals(\"NA\") && !c.getValue().toUpperCase().equals(\"NAN\")", "originalCommit": "3d5aeebbfd9678ebd5e842fdd8286307f20e8181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNzYwNA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7860#discussion_r516917604", "bodyText": "Agreed. they are at many place all over the repo. cleanup should be in another pr", "author": "kalletlak", "createdAt": "2020-11-03T19:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwMzA0OA=="}], "type": "inlineReview"}, {"oid": "1b7c6f7ee0d0adc70f0376160780d12eaa87c9e8", "url": "https://github.com/cBioPortal/cbioportal/commit/1b7c6f7ee0d0adc70f0376160780d12eaa87c9e8", "message": "Add new study view api for custom data", "committedDate": "2020-11-03T19:52:01Z", "type": "forcePushed"}, {"oid": "abef3dee26645459d46d40f6978eba1268b27f98", "url": "https://github.com/cBioPortal/cbioportal/commit/abef3dee26645459d46d40f6978eba1268b27f98", "message": "Add new study view api for custom data", "committedDate": "2020-11-10T17:26:08Z", "type": "forcePushed"}, {"oid": "62a975904b0378106c4cecc5fe35234d85fbaa19", "url": "https://github.com/cBioPortal/cbioportal/commit/62a975904b0378106c4cecc5fe35234d85fbaa19", "message": "Add new study view api for custom data", "committedDate": "2020-11-10T21:14:49Z", "type": "forcePushed"}, {"oid": "225dd838b3e35dbd9d82a6260dd89f7f2c1d62be", "url": "https://github.com/cBioPortal/cbioportal/commit/225dd838b3e35dbd9d82a6260dd89f7f2c1d62be", "message": "Add new study view api for custom data", "committedDate": "2020-12-01T20:12:29Z", "type": "forcePushed"}, {"oid": "45ad122e6e511cc0f35af52376ef25d62a906984", "url": "https://github.com/cBioPortal/cbioportal/commit/45ad122e6e511cc0f35af52376ef25d62a906984", "message": "Add new study view api for custom data", "committedDate": "2020-12-07T21:22:41Z", "type": "forcePushed"}, {"oid": "604fd5cedf3d21aa51d9f4668350ae619a328908", "url": "https://github.com/cBioPortal/cbioportal/commit/604fd5cedf3d21aa51d9f4668350ae619a328908", "message": "Add new study view api for custom data", "committedDate": "2020-12-11T21:24:32Z", "type": "forcePushed"}, {"oid": "cf2225c5ed7544dc05fa3419c53b66d7c84c48f5", "url": "https://github.com/cBioPortal/cbioportal/commit/cf2225c5ed7544dc05fa3419c53b66d7c84c48f5", "message": "Add new api's to support saving custom data charts", "committedDate": "2021-01-05T22:45:48Z", "type": "commit"}, {"oid": "fc3a7e3698b656701a5c65674d30350ac6a2c1ed", "url": "https://github.com/cBioPortal/cbioportal/commit/fc3a7e3698b656701a5c65674d30350ac6a2c1ed", "message": "Add new study view api for custom data", "committedDate": "2021-01-05T22:46:27Z", "type": "commit"}, {"oid": "fc3a7e3698b656701a5c65674d30350ac6a2c1ed", "url": "https://github.com/cBioPortal/cbioportal/commit/fc3a7e3698b656701a5c65674d30350ac6a2c1ed", "message": "Add new study view api for custom data", "committedDate": "2021-01-05T22:46:27Z", "type": "forcePushed"}]}