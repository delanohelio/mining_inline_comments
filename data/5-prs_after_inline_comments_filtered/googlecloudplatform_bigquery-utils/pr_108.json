{"pr_number": 108, "pr_title": "Auto Query Fixer: implement Sql Error Factory", "pr_createdAt": "2020-07-17T18:17:14Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108", "timeline": [{"oid": "fab85becdc0345f57bfc78394ceaad4b70618bb9", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/fab85becdc0345f57bfc78394ceaad4b70618bb9", "message": "add getMessage method", "committedDate": "2020-07-17T18:08:15Z", "type": "commit"}, {"oid": "0ec1d3710e919bc04b693a2819d896866d298a95", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0ec1d3710e919bc04b693a2819d896866d298a95", "message": "implement SqlErrorFactory", "committedDate": "2020-07-17T18:10:58Z", "type": "commit"}, {"oid": "c904515daa5d85c2d7761784ea040e7f41188120", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/c904515daa5d85c2d7761784ea040e7f41188120", "message": "Merge remote-tracking branch 'upstream/master' into add_error_class", "committedDate": "2020-07-17T18:12:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MDM5MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460340390", "bodyText": "If some keyword is not recognized, will it be \"unrecognized name\" too or it is only for column name?", "author": "kikkyo", "createdAt": "2020-07-25T00:33:40Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";", "originalCommit": "c904515daa5d85c2d7761784ea040e7f41188120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MDk3NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460340975", "bodyText": "I'm not sure if this is the recommended practice to save one line, but up to you :)", "author": "kikkyo", "createdAt": "2020-07-25T00:37:43Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {", "originalCommit": "c904515daa5d85c2d7761784ea040e7f41188120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3ODQ1Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r461078456", "bodyText": "Let's keep in this style and change it later if the style is discouraged.", "author": "mingen-pan", "createdAt": "2020-07-27T18:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MDk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTMyNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460341326", "bodyText": "Check if length is as expected before get(0)?", "author": "kikkyo", "createdAt": "2020-07-25T00:40:05Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryUnrecognizedNameError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryFunctionNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link TableNotFoundError}. If it fails, a null\n+   * point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Not found: Table (.*?) was not found`. Please see\n+   * {@link TableNotFoundError} for details on what information the regex extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private TableNotFoundError tryTableNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), TableNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Not found: Table (0) was not found\"\n+    String incorrectTable = contents.get(0);", "originalCommit": "c904515daa5d85c2d7761784ea040e7f41188120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3OTAwMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r461079001", "bodyText": "There is no need to check size, because the size of extracted substrings has been determined by the pattern. A comment has been added to the code to clarify this.", "author": "mingen-pan", "createdAt": "2020-07-27T18:15:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTM3NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460341375", "bodyText": "Check if length is as expected before get(0)?", "author": "kikkyo", "createdAt": "2020-07-25T00:40:25Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryUnrecognizedNameError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryFunctionNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link TableNotFoundError}. If it fails, a null\n+   * point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Not found: Table (.*?) was not found`. Please see\n+   * {@link TableNotFoundError} for details on what information the regex extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private TableNotFoundError tryTableNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), TableNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Not found: Table (0) was not found\"\n+    String incorrectTable = contents.get(0);\n+    return new TableNotFoundError(incorrectTable, /*errPos= */ null, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link UnrecognizedColumnError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Unrecognized name: (.*?)(; Did you mean (.*?)\\?)? at\n+   * (.*?)`. Please see {@link UnrecognizedColumnError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private UnrecognizedColumnError tryUnrecognizedNameError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), UnrecognizedNameRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Unrecognized name: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String unrecognizedName = contents.get(0);", "originalCommit": "c904515daa5d85c2d7761784ea040e7f41188120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTQxOQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460341419", "bodyText": "Check if length is as expected before get(0)?", "author": "kikkyo", "createdAt": "2020-07-25T00:40:41Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryUnrecognizedNameError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryFunctionNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link TableNotFoundError}. If it fails, a null\n+   * point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Not found: Table (.*?) was not found`. Please see\n+   * {@link TableNotFoundError} for details on what information the regex extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private TableNotFoundError tryTableNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), TableNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Not found: Table (0) was not found\"\n+    String incorrectTable = contents.get(0);\n+    return new TableNotFoundError(incorrectTable, /*errPos= */ null, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link UnrecognizedColumnError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Unrecognized name: (.*?)(; Did you mean (.*?)\\?)? at\n+   * (.*?)`. Please see {@link UnrecognizedColumnError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private UnrecognizedColumnError tryUnrecognizedNameError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), UnrecognizedNameRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Unrecognized name: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String unrecognizedName = contents.get(0);\n+    String suggestion = contents.get(2);\n+    String errPosStr = contents.get(3);\n+    Position errorPosition = extractPosition(errPosStr);\n+\n+    return new UnrecognizedColumnError(unrecognizedName, errorPosition, suggestion, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link FunctionNotFoundError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at\n+   * (.*?)$`. Please see {@link FunctionNotFoundError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private FunctionNotFoundError tryFunctionNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), FunctionNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+    // Here shows the index of matching places.\n+    // \"^Function not found: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String functionName = contents.get(0);\n+    String suggestion = contents.get(2);\n+    String errPosStr = contents.get(3);", "originalCommit": "c904515daa5d85c2d7761784ea040e7f41188120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MjQ5OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460342498", "bodyText": "check length :)", "author": "kikkyo", "createdAt": "2020-07-25T00:47:55Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryUnrecognizedNameError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryFunctionNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link TableNotFoundError}. If it fails, a null\n+   * point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Not found: Table (.*?) was not found`. Please see\n+   * {@link TableNotFoundError} for details on what information the regex extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private TableNotFoundError tryTableNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), TableNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Not found: Table (0) was not found\"\n+    String incorrectTable = contents.get(0);\n+    return new TableNotFoundError(incorrectTable, /*errPos= */ null, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link UnrecognizedColumnError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Unrecognized name: (.*?)(; Did you mean (.*?)\\?)? at\n+   * (.*?)`. Please see {@link UnrecognizedColumnError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private UnrecognizedColumnError tryUnrecognizedNameError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), UnrecognizedNameRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Unrecognized name: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String unrecognizedName = contents.get(0);\n+    String suggestion = contents.get(2);\n+    String errPosStr = contents.get(3);\n+    Position errorPosition = extractPosition(errPosStr);\n+\n+    return new UnrecognizedColumnError(unrecognizedName, errorPosition, suggestion, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link FunctionNotFoundError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at\n+   * (.*?)$`. Please see {@link FunctionNotFoundError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private FunctionNotFoundError tryFunctionNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), FunctionNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+    // Here shows the index of matching places.\n+    // \"^Function not found: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String functionName = contents.get(0);\n+    String suggestion = contents.get(2);\n+    String errPosStr = contents.get(3);\n+    Position errorPosition = extractPosition(errPosStr);\n+\n+    return new FunctionNotFoundError(functionName, errorPosition, suggestion, exception);\n+  }\n+\n+  private Position extractPosition(String posStr) {\n+    List<String> contents = PatternMatcher.extract(posStr, /*regex= */ \"\\\\[(.*?):(.*?)\\\\]\");\n+    if (contents == null) {\n+      return null;\n+    }\n+    int rowNum = Integer.parseInt(contents.get(0));\n+    int colNum = Integer.parseInt(contents.get(1));", "originalCommit": "c904515daa5d85c2d7761784ea040e7f41188120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MjUzOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460342538", "bodyText": "this new line seems really weird :)", "author": "kikkyo", "createdAt": "2020-07-25T00:48:15Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/util/PatternMatcher.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.google.cloud.bigquery.utils.queryfixer.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A helper class that provides static methods to extract substrings from a string based on regular\n+ * expression.", "originalCommit": "c904515daa5d85c2d7761784ea040e7f41188120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3OTgwMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r461079802", "bodyText": "Rerun the auto format. Seems it looks good.", "author": "mingen-pan", "createdAt": "2020-07-27T18:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MjUzOA=="}], "type": "inlineReview"}, {"oid": "f546f5d54e17211d513f0b56d6aaa7a545126f0c", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f546f5d54e17211d513f0b56d6aaa7a545126f0c", "message": "minor change", "committedDate": "2020-07-27T18:17:36Z", "type": "commit"}, {"oid": "7641a011543d966093e96b86801eaf133a18d76c", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7641a011543d966093e96b86801eaf133a18d76c", "message": "Merge branch 'master' into add_error_class", "committedDate": "2020-07-27T18:18:21Z", "type": "commit"}]}