{"pr_number": 119, "pr_title": "Query Breakdown: Program now executes successfully with deletion (w/o location tracking)", "pr_createdAt": "2020-07-27T16:25:35Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119", "timeline": [{"oid": "f32b6ddf7784273c4f084bc136c240ac4d8b3154", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f32b6ddf7784273c4f084bc136c240ac4d8b3154", "message": "replacement and main loop draft done", "committedDate": "2020-07-24T19:08:09Z", "type": "commit"}, {"oid": "7b09301ba1de656c47401c254eb3979049a24773", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7b09301ba1de656c47401c254eb3979049a24773", "message": "refactored QueryBreakdown, organized code for PR", "committedDate": "2020-07-24T21:47:02Z", "type": "commit"}, {"oid": "28adf1077930405db08f5b673d45863f82a0be44", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/28adf1077930405db08f5b673d45863f82a0be44", "message": "deletion is now working with the main loop and run", "committedDate": "2020-07-27T16:09:55Z", "type": "commit"}, {"oid": "04235d9d37e21ec1a6a3df531b3e9f1d49432313", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/04235d9d37e21ec1a6a3df531b3e9f1d49432313", "message": "Merge branch 'master' into milestone1_3", "committedDate": "2020-07-27T18:44:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTk0Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461221946", "bodyText": "Nit: try to use str.format over + from the readability standpoint.", "author": "AayushBhatnagar", "createdAt": "2020-07-27T23:11:04Z", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Node.java", "diffHunk": "@@ -27,15 +27,91 @@\n   private int unparseableCount;\n \n   // indicates how we handled the error\n-  enum errorHandlingType {\n+  enum ErrorHandlingType {\n     DELETION,\n     REPLACEMENT\n   }\n \n+  ErrorHandlingType type;\n+\n+  /**\n+   * constructor for the node class for deletion\n+   */\n+  public Node (Node parent, int startLine, int startColumn, int endLine, int endColumn,\n+      int unparseableCount) {\n+    this.parent = parent;\n+    this.startLine = startLine;\n+    this.startColumn = startColumn;\n+    this.endLine = endLine;\n+    this.endColumn = endColumn;\n+    type = ErrorHandlingType.DELETION;\n+    this.unparseableCount = unparseableCount;\n+  }\n+\n   /**\n-   * constructor for the node class\n+   * constructor for the node class for replacement\n    */\n   public Node (Node parent, int startLine, int startColumn, int endLine, int endColumn,\n-      boolean errorHandlingType, String replaceFrom, String replaceTo, int unparseableCount) {\n+      String replaceFrom, String replaceTo, int unparseableCount) {\n+    this.parent = parent;\n+    this.startLine = startLine;\n+    this.startColumn = startColumn;\n+    this.endLine = endLine;\n+    this.endColumn = endColumn;\n+    type = ErrorHandlingType.REPLACEMENT;\n+    this.replaceFrom = replaceFrom;\n+    this.replaceTo = replaceTo;\n+    this.unparseableCount = unparseableCount;\n+  }\n+\n+  /**\n+   * Override toString method for better debugging\n+   */\n+  @Override\n+  public String toString() {\n+    return \"Parent: \" + parent.getStartColumn() + parent.getEndColumn()", "originalCommit": "04235d9d37e21ec1a6a3df531b3e9f1d49432313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzMTAwOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461831008", "bodyText": "Got it, changed it for the node class as well as the querybreakdown class!", "author": "subinbean", "createdAt": "2020-07-28T19:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjE3NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461222175", "bodyText": "inconsistent var naming. either use this. for all members or none at all.", "author": "AayushBhatnagar", "createdAt": "2020-07-27T23:11:44Z", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -16,52 +15,109 @@\n public class QueryBreakdown {\n \n   // global fields that keeps track of the minimum unparseable component so far\n-  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private int minimumUnparseableComp;\n   private Node solution;\n \n   // the generated tree\n   private Node root;\n-  private static Parser parser;\n+  private Parser parser;\n \n   /**\n-   * This is the method that will run QueryBreakdown given an original query and output\n-   * it to the specified output file, or if that is null, generate a new file to put the output in.\n-   * The provided timeLimit will stop the tool from running over a certain time.\n+   * Constructor for the QueryBreakdown object. We model this class as an object rather than\n+   * through static methods because the user should be able to call QueryBreakdown multiple\n+   * times and create multiple instances of it.\n    */\n-  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+  public QueryBreakdown(Parser parser) {\n+    minimumUnparseableComp = Integer.MAX_VALUE;\n+    root = new Node();", "originalCommit": "04235d9d37e21ec1a6a3df531b3e9f1d49432313", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjk4MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461222980", "bodyText": "Please verify that this a sqlparseexception type before casting it into one something like\nif (e instanceof SqlParseException) {\n....\n}\nbetter still catch SqlParseException besides catching superclass Exception.", "author": "AayushBhatnagar", "createdAt": "2020-07-27T23:14:16Z", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -16,52 +15,109 @@\n public class QueryBreakdown {\n \n   // global fields that keeps track of the minimum unparseable component so far\n-  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private int minimumUnparseableComp;\n   private Node solution;\n \n   // the generated tree\n   private Node root;\n-  private static Parser parser;\n+  private Parser parser;\n \n   /**\n-   * This is the method that will run QueryBreakdown given an original query and output\n-   * it to the specified output file, or if that is null, generate a new file to put the output in.\n-   * The provided timeLimit will stop the tool from running over a certain time.\n+   * Constructor for the QueryBreakdown object. We model this class as an object rather than\n+   * through static methods because the user should be able to call QueryBreakdown multiple\n+   * times and create multiple instances of it.\n    */\n-  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+  public QueryBreakdown(Parser parser) {\n+    minimumUnparseableComp = Integer.MAX_VALUE;\n+    root = new Node();\n+    this.parser = parser;\n+  }\n \n-    // determines which parser to use\n-    parser = new CalciteParser();\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file or commandline. The provided errorLimit will stop the\n+   * tool from running over a certain time.\n+   *\n+   * TODO: output file feature and runtime limit support\n+   */\n+  public void run(String originalQuery, String outputFile, int errorLimit) {\n \n     // uses the loop function to generate and traverse the tree of possible error recoveries\n-    loop(originalQuery, errorLimit);\n+    // this will set the variable solution\n+    loop(originalQuery, errorLimit, root, 0);\n+\n+    // case where entire query can be parsed\n+    if (solution.equals(root)) {\n+      System.out.println(\"The entire query can be parsed without error\");\n+    }\n \n     // write termination logic for output (tracing the node back, reconstructing path, output)\n+    Node current = solution;\n+    while (current.getParent() != null) {\n+      // print out the result\n+      System.out.println(\"Unparseable portion: Start Line \" + current.getStartLine() +\n+          \", End Line \" + current.getEndLine() + \", Start Column \" + current.getStartColumn() +\n+          \", End Column \" + current.getEndColumn() + \", \" + current.getErrorHandlingType());\n+\n+      // if replacement\n+      if (current.getErrorHandlingType().equals(\"Replacement\")) {\n+        System.out.println(\": replaced \" + current.getReplaceFrom() + \" with \" +\n+            current.getReplaceTo() + \"\\n\");\n+      }\n+\n+      // update for loop\n+      current = current.getParent();\n+    }\n   }\n \n   /**\n-   * This is where the code for the algorithm will go: essentially, there will be a loop that\n-   * constantly inputs a new query after adequate error handling\n+   * This is where the code for the algorithm resides: essentially, there is a loop that\n+   * constantly inputs a new query after adequate error handling. The loop terminates once\n+   * the parsing doesn't throw any errors, and in the case that it went through a smaller\n+   * number of unparseable components than the global minimum, it sets the solution as\n+   * the global solution and also alters the minimumUnparseableComp variable.\n+   *\n+   * TODO: implement errorLimit logic, deal with exception casting\n    */\n-  private static void loop(String inputQuery, int errorLimit) {\n+  private void loop(String inputQuery, int errorLimit, Node parent, int depth) {\n     try {\n       parser.parseQuery(inputQuery);\n     } catch (Exception e) {\n       // generates new queries through deletion and replacement\n       SqlParserPos pos = ((SqlParseException) e).getPos();", "originalCommit": "04235d9d37e21ec1a6a3df531b3e9f1d49432313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzODUzOQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461838539", "bodyText": "Ah! I mentioned above in the PR request that Exceptions will be dealt with in future PR's: for the next few PR's I'm focusing on the main features. Will refactor the exceptions in the future, leaving this comment open for now for future reference.", "author": "subinbean", "createdAt": "2020-07-28T19:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMzU1Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461223556", "bodyText": "remove this import.", "author": "AayushBhatnagar", "createdAt": "2020-07-27T23:16:07Z", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacementLogic.java", "diffHunk": "@@ -1,7 +1,7 @@\n package com.google.bigquery;\n \n import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;", "originalCommit": "04235d9d37e21ec1a6a3df531b3e9f1d49432313", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMzcxOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461223718", "bodyText": "final modifier??", "author": "AayushBhatnagar", "createdAt": "2020-07-27T23:16:37Z", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacedComponent.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.google.bigquery;\n+\n+/**\n+ * This class captures the replaced query, original component, and what it is replaced with\n+ */\n+public class ReplacedComponent {\n+  private String query;", "originalCommit": "04235d9d37e21ec1a6a3df531b3e9f1d49432313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzOTMxMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461839312", "bodyText": "Made all the fields final since replacedcomponent object will never change it's parameters", "author": "subinbean", "createdAt": "2020-07-28T19:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMzcxOA=="}], "type": "inlineReview"}, {"oid": "e3ac9ad11d0ad5c103fec41f615e0be4d3074065", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/e3ac9ad11d0ad5c103fec41f615e0be4d3074065", "message": "string formatted", "committedDate": "2020-07-28T19:39:41Z", "type": "commit"}, {"oid": "af045886a4700a3063f7cf6c7024385f2a610379", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/af045886a4700a3063f7cf6c7024385f2a610379", "message": "string formatted for querybreakdown as well", "committedDate": "2020-07-28T19:44:02Z", "type": "commit"}, {"oid": "fd046b4053b0d43e738e54acfa50fd0246aaa39b", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/fd046b4053b0d43e738e54acfa50fd0246aaa39b", "message": "comments further addressed", "committedDate": "2020-07-28T20:00:13Z", "type": "commit"}, {"oid": "28ef50de6950a51cd7d8f35e00441320fcf38edd", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/28ef50de6950a51cd7d8f35e00441320fcf38edd", "message": "Merge branch 'milestone1_3' of https://github.com/subinbean/bigquery-utils into milestone1_3", "committedDate": "2020-07-28T20:01:20Z", "type": "commit"}, {"oid": "560c82e2a0a12bdcb6dbdb99929b8b30d14652a2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/560c82e2a0a12bdcb6dbdb99929b8b30d14652a2", "message": "Merge branch 'master' into milestone1_3", "committedDate": "2020-07-28T22:28:21Z", "type": "commit"}, {"oid": "3df13d228dcb02373ba78e132578f8a94916a580", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/3df13d228dcb02373ba78e132578f8a94916a580", "message": "added this to the constructor for consistency", "committedDate": "2020-07-28T23:47:52Z", "type": "commit"}, {"oid": "7c302792ae71bc5430fc7afc5bc618dd5b301eec", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7c302792ae71bc5430fc7afc5bc618dd5b301eec", "message": "Merge branch 'milestone1_3' of https://github.com/subinbean/bigquery-utils into milestone1_3", "committedDate": "2020-07-28T23:48:13Z", "type": "commit"}]}