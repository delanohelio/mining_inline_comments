{"pr_number": 80, "pr_title": "Template generation\u2014Initial PR", "pr_createdAt": "2020-07-01T18:04:39Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80", "timeline": [{"oid": "e709e357ad12cb9143bf094d2b6bdb2810f67f7b", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/e709e357ad12cb9143bf094d2b6bdb2810f67f7b", "message": "added .gitignore", "committedDate": "2020-06-15T21:48:00Z", "type": "commit"}, {"oid": "716104019609169be4b02864ca8333581f55940f", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/716104019609169be4b02864ca8333581f55940f", "message": "added rough markov chain", "committedDate": "2020-06-15T21:50:30Z", "type": "commit"}, {"oid": "87f3234afcb3b4b5dca19f9d50cc1ba31b77b4e6", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/87f3234afcb3b4b5dca19f9d50cc1ba31b77b4e6", "message": "improved style in MarkovChain, Node, and Test", "committedDate": "2020-06-16T20:15:59Z", "type": "commit"}, {"oid": "1f849e082bf2ba65ad198000d0ccd6243a92f455", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/1f849e082bf2ba65ad198000d0ccd6243a92f455", "message": "added some tests", "committedDate": "2020-06-22T17:23:31Z", "type": "commit"}, {"oid": "b80f4548d0735de2a3677bab154e550cedda753f", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/b80f4548d0735de2a3677bab154e550cedda753f", "message": "initial Utils class", "committedDate": "2020-06-24T17:49:10Z", "type": "commit"}, {"oid": "9f039630c973653fd3da7ade1f38fdd5ed8a3e46", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9f039630c973653fd3da7ade1f38fdd5ed8a3e46", "message": "restructured project", "committedDate": "2020-06-24T20:25:46Z", "type": "commit"}, {"oid": "0d51981ecd07b483b66c8ed7b11b0e5d7ec26749", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0d51981ecd07b483b66c8ed7b11b0e5d7ec26749", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation", "committedDate": "2020-06-24T20:26:09Z", "type": "commit"}, {"oid": "72035d3abbd5d006ec0dc3f86c01241c5b7672c1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/72035d3abbd5d006ec0dc3f86c01241c5b7672c1", "message": "merged with branch", "committedDate": "2020-06-24T20:28:07Z", "type": "commit"}, {"oid": "d89bdf64f9da1a509c40389527861626273f31fb", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/d89bdf64f9da1a509c40389527861626273f31fb", "message": "restructured project", "committedDate": "2020-06-24T21:37:30Z", "type": "commit"}, {"oid": "ae059ffe16652108005f8866215baaed29e7e6df", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/ae059ffe16652108005f8866215baaed29e7e6df", "message": "refactored Utils with Guava, added Utils tests", "committedDate": "2020-06-25T19:25:04Z", "type": "commit"}, {"oid": "919ae1913d927461276d2a4d4a8aebdbdd8360ba", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/919ae1913d927461276d2a4d4a8aebdbdd8360ba", "message": "added Keywords interface", "committedDate": "2020-06-26T21:10:58Z", "type": "commit"}, {"oid": "6b284b717813ead3776d12bf8df56ccb90a4f5c9", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/6b284b717813ead3776d12bf8df56ccb90a4f5c9", "message": "Added initial DML keywords", "committedDate": "2020-06-26T21:13:25Z", "type": "commit"}, {"oid": "6310308df6145625e67ac2cdb712317c2b7102bc", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/6310308df6145625e67ac2cdb712317c2b7102bc", "message": "Added DML Keywords class and test", "committedDate": "2020-06-26T21:14:31Z", "type": "commit"}, {"oid": "0f73334122547d093d07a50fa8342735585b5ff2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0f73334122547d093d07a50fa8342735585b5ff2", "message": "added Query, QueryGenerator, and QueryType, set up structure for config files", "committedDate": "2020-06-26T21:37:41Z", "type": "commit"}, {"oid": "6327f64647656533cc532ccb0b0aaabd29e371ba", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/6327f64647656533cc532ccb0b0aaabd29e371ba", "message": "merged", "committedDate": "2020-06-26T21:39:44Z", "type": "commit"}, {"oid": "9e59174aa1d578c149c4db0dfce33af2bb7768e2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9e59174aa1d578c149c4db0dfce33af2bb7768e2", "message": "finished adding unit tests to NodeTest and MarkovChainTest", "committedDate": "2020-06-30T02:27:01Z", "type": "commit"}, {"oid": "c8b89d15040e072810e43d27b8d9423847fdb286", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/c8b89d15040e072810e43d27b8d9423847fdb286", "message": "changed config files", "committedDate": "2020-06-30T17:20:53Z", "type": "commit"}, {"oid": "2acac0c3bd5b5d61189d424d1befdedff3a7edce", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/2acac0c3bd5b5d61189d424d1befdedff3a7edce", "message": "finished QueryGenerator and added rudimentary corresponding test", "committedDate": "2020-06-30T22:11:44Z", "type": "commit"}, {"oid": "943cd57697563e87f03239fc5be8240dc2be3483", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/943cd57697563e87f03239fc5be8240dc2be3483", "message": "defined keyword set interface and classes", "committedDate": "2020-07-01T00:19:13Z", "type": "commit"}, {"oid": "59cc5097057b9293d4659cb18f7667f5d719bc1c", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/59cc5097057b9293d4659cb18f7667f5d719bc1c", "message": "initial keyword mapping configs", "committedDate": "2020-07-01T00:21:02Z", "type": "commit"}, {"oid": "45aff938a2a2086c6b5b867e95a5f29485296464", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/45aff938a2a2086c6b5b867e95a5f29485296464", "message": "modified immutable set and map function", "committedDate": "2020-07-01T00:22:06Z", "type": "commit"}, {"oid": "31b42237ffab1f5a0f5ab04872436138088c25aa", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/31b42237ffab1f5a0f5ab04872436138088c25aa", "message": "corrected DQL mapping file, deleted old test file", "committedDate": "2020-07-01T04:55:28Z", "type": "commit"}, {"oid": "341cd2f1ede7b8335e8acc06d99f20db289fd99a", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/341cd2f1ede7b8335e8acc06d99f20db289fd99a", "message": "initial keywords mapping interface and classes", "committedDate": "2020-07-01T04:57:02Z", "type": "commit"}, {"oid": "cef2a4415652fa1eae8ee2f365bc5f75b1b54c45", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/cef2a4415652fa1eae8ee2f365bc5f75b1b54c45", "message": "added unit tests for Utils, Keywords, KeywordsMapping", "committedDate": "2020-07-01T04:58:21Z", "type": "commit"}, {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a28bf9bd409b1569b8a716abf4602786db40ab2b", "message": "fixed relative file path typos", "committedDate": "2020-07-01T06:01:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTgwNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451189805", "bodyText": "I ve noticed that we have inherited 3 classes for ddl, dml & dql with identical code. Do we expect more difference with the keyword class for ddl, dml & dql? If the only difference is the file location, can we use this Keywords class to cover the 3 cases? For example, we can introduce the file_path as a class parameter.", "author": "Bei-z", "createdAt": "2020-07-07T22:58:25Z", "path": "tools/template_based_query_generation/src/main/java/Keywords.java", "diffHunk": "@@ -0,0 +1,23 @@\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Keywords set interface that all keyword set classes implement\n+ */\n+\n+public interface Keywords {", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTczNTgyMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451735821", "bodyText": "I believe we were expecting that these classes would allow Allen and I to work separately on DDL and DML respectively, but we've divided the work in a different way so yes I think it makes sense to just use the Keywords class and specify file_path. Will make that change soon.", "author": "spoiledhua", "createdAt": "2020-07-08T18:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE5MjY4Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451192682", "bodyText": "Similar to keywords class. Here we also have 3 different classes for DML, DDL & DQL with identical code. Do we expect more difference with the code for 3 classes? If not, we could consider use this KeywordMapping directly.", "author": "Bei-z", "createdAt": "2020-07-07T23:07:44Z", "path": "tools/template_based_query_generation/src/main/java/KeywordsMapping.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Keywords mapping interface that all keyword mapping classes implement\n+ */\n+\n+public interface KeywordsMapping {", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTczNjEwOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451736108", "bodyText": "Similar reasoning to the Keywords class, will make the change soon.", "author": "spoiledhua", "createdAt": "2020-07-08T18:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE5MjY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMDM5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451210393", "bodyText": "Do we always expect a seed number from user input? (for example, from config?) If not, we need another constructor do not have this field.", "author": "Bei-z", "createdAt": "2020-07-08T00:07:10Z", "path": "tools/template_based_query_generation/src/main/java/MarkovChain.java", "diffHunk": "@@ -0,0 +1,55 @@\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.HashMap;\n+import java.util.Random;\n+\n+/**\n+ * Class that represents src.main.MarkovChain encoding query and keyword dependencies\n+ */\n+public class MarkovChain<E> {\n+    \n+    private HashSet<Node<E>> nodes;\n+    private Random r;\n+\n+    /**\n+     * constructs MarkovChain object from edge weights and random seed\n+     * @param nodes\n+     * @param seed\n+     */\n+    public MarkovChain(HashMap<Node<E>, HashMap<Node<E>, Double>> nodes, int seed) {", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4Njk5NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451786995", "bodyText": "The config will have a seed field that will be by default set to 0, the user can choose not to change it in the config.", "author": "AllenWang314", "createdAt": "2020-07-08T19:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMDM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5OTgxMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451899810", "bodyText": "If we have a default seed value in config, does that mean if user does not notice that, we will always use the same seed and generate the same output?", "author": "Bei-z", "createdAt": "2020-07-09T00:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMDM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDI3OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453134279", "bodyText": "Bei pointed me to Random() which solved this problem!", "author": "AllenWang314", "createdAt": "2020-07-11T00:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMDM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNDQ0MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453134440", "bodyText": "No randomness is needed in Markov Chain so I removed this constructor, see below for further comments on Nodes sharing the same Random r.", "author": "AllenWang314", "createdAt": "2020-07-11T00:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMDM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMTk3OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451211978", "bodyText": "As this variable is only used one, we can probably directly use this.neighbors.keySet() in the for loop?", "author": "Bei-z", "createdAt": "2020-07-08T00:13:24Z", "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,124 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;\n+    private ArrayList<Node<E>> neighborList; // list of neighbors and corresponding cumulative probabilities\n+    private ArrayList<Double> cProbabilities; // cumulative probabilities\n+    private Random r;\n+\n+    /**\n+     * constructs node from query\n+     * @param obj\n+     */\n+    public Node(E obj, int seed) {\n+        this.obj = obj;\n+        this.r = new Random(seed);\n+        this.setNeighbors(new HashMap<Node<E>, Double>());\n+    }\n+\n+    /**\n+     * updates neighborList and cProbabilities when neighbors is changed\n+     */\n+    private void updateProbabilities() {\n+        if (this.neighbors.size() != 0) {\n+            Set<Node<E>> neighborSet = this.neighbors.keySet();", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NzUwNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r452957506", "bodyText": "fixed!", "author": "AllenWang314", "createdAt": "2020-07-10T16:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMTk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNDYyMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451224621", "bodyText": "We should avoid storing duplicated information in two object.\nLooks like we only loop through the list of neighbor, and do not need to get the probability of a provided neighbor node. If that is the case, we could use an array of pair instead of hashmap.\nAlso, we may only need to store the cumulative probability instead of the individual probability with the current implementation.\nAnother possible approach is to use a TreeMap with ceilingEntry. So that in this Tree map we use cumulative probabilities as a key, and choose a node with ceilingEntry function. The time complexity of ceilingEntry is o(logn), which is the same as your binary search approach, so both approaches are good for our use case.", "author": "Bei-z", "createdAt": "2020-07-08T01:03:15Z", "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,124 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;\n+    private ArrayList<Node<E>> neighborList; // list of neighbors and corresponding cumulative probabilities\n+    private ArrayList<Double> cProbabilities; // cumulative probabilities", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjQ1NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r452956455", "bodyText": "I've changed it to Treemap storing both cProbabilities and neighborList. Now that I think about it, there might not be a point in having HashMap<Node, Double> neighbors as a field.", "author": "AllenWang314", "createdAt": "2020-07-10T16:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNDYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNjM2NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451226365", "bodyText": "Looks like this r is never used?", "author": "Bei-z", "createdAt": "2020-07-08T01:10:11Z", "path": "tools/template_based_query_generation/src/main/java/MarkovChain.java", "diffHunk": "@@ -0,0 +1,55 @@\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.HashMap;\n+import java.util.Random;\n+\n+/**\n+ * Class that represents src.main.MarkovChain encoding query and keyword dependencies\n+ */\n+public class MarkovChain<E> {\n+    \n+    private HashSet<Node<E>> nodes;\n+    private Random r;", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NTY3Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451785673", "bodyText": "Yes, originally I had the randomness happen in MarkovChain, but I later moved it to Node, so it's no longer needed here. I have removed it and refactored code from QueryGenerator.", "author": "AllenWang314", "createdAt": "2020-07-08T19:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNjM2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzY5MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451233691", "bodyText": "Please consider de-duplicate those lines. Probably consider making helper function with callback.", "author": "Bei-z", "createdAt": "2020-07-08T01:39:18Z", "path": "tools/template_based_query_generation/src/main/java/QueryGenerator.java", "diffHunk": "@@ -0,0 +1,142 @@\n+import com.opensymphony.xwork2.util.ClassLoaderUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * Class that parses config file and creates queries from markov chain\n+ */\n+public class QueryGenerator {\n+\n+    private MarkovChain<Query> mcGenerator;\n+    private Node<Query> queryRoot;\n+\n+    /**\n+     *\n+     * @param dialectConfigPaths\n+     * @param userConfigPaths\n+     * @param mainUserConfig\n+     * @throws Exception\n+     */\n+    public QueryGenerator(String[] dialectConfigPaths, String[] userConfigPaths, String mainUserConfig) throws Exception {\n+        // read in lines from userConfigPaths, ignoring lines that begin with ' ' or '/'\n+        // stores active queries in activatedQueries\n+        HashSet<String> activatedQueries = new HashSet<String>();\n+        String line;\n+        for (String path: userConfigPaths) {\n+            InputStream inputStream = ClassLoaderUtil.getResourceAsStream(path, QueryGenerator.class);", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MTI4MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453061280", "bodyText": "As discussed offline, this file will be changed after we moved to gson. Please add a todo in this file as well as the test file with some short explanation of the proposing change. Thank you!", "author": "Bei-z", "createdAt": "2020-07-10T20:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzODgxMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453838810", "bodyText": "Added TODOs assigned to Allen", "author": "AllenWang314", "createdAt": "2020-07-13T18:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDY0NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451234645", "bodyText": "break here after we find the root.", "author": "Bei-z", "createdAt": "2020-07-08T01:42:52Z", "path": "tools/template_based_query_generation/src/main/java/QueryGenerator.java", "diffHunk": "@@ -0,0 +1,142 @@\n+import com.opensymphony.xwork2.util.ClassLoaderUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * Class that parses config file and creates queries from markov chain\n+ */\n+public class QueryGenerator {\n+\n+    private MarkovChain<Query> mcGenerator;\n+    private Node<Query> queryRoot;\n+\n+    /**\n+     *\n+     * @param dialectConfigPaths\n+     * @param userConfigPaths\n+     * @param mainUserConfig\n+     * @throws Exception\n+     */\n+    public QueryGenerator(String[] dialectConfigPaths, String[] userConfigPaths, String mainUserConfig) throws Exception {\n+        // read in lines from userConfigPaths, ignoring lines that begin with ' ' or '/'\n+        // stores active queries in activatedQueries\n+        HashSet<String> activatedQueries = new HashSet<String>();\n+        String line;\n+        for (String path: userConfigPaths) {\n+            InputStream inputStream = ClassLoaderUtil.getResourceAsStream(path, QueryGenerator.class);\n+            InputStreamReader streamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+            BufferedReader br = new BufferedReader(streamReader);\n+            while ((line = br.readLine()) != null) {\n+                if (line.length() > 2 && line.charAt(0) != ' '\n+                        && !(line.charAt(0) == '/' && line.charAt(1) == '/')) {\n+                    String[] res = line.split(\":\");\n+                    if (res[1].charAt(0) == '1') {\n+                        activatedQueries.add(res[0]);\n+                    }\n+                }\n+            }\n+            br.close();\n+        }\n+\n+        // read in lines from dialectConfigPaths, ignoring lines that begin with ' ' or '/'\n+        // stores directed edges in dependencies\n+        HashMap<String, HashSet<String>> dependencies = new HashMap<String, HashSet<String>>();\n+        for (String path: dialectConfigPaths) {\n+            InputStream inputStream = ClassLoaderUtil.getResourceAsStream(path, QueryGenerator.class);\n+            InputStreamReader streamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+            BufferedReader br = new BufferedReader(streamReader);\n+            while ((line = br.readLine()) != null) {\n+                if (line.length() > 2 && line.charAt(0) != ' '\n+                        && !(line.charAt(0) == '/' && line.charAt(1) == '/')) {\n+                    String[] res = line.split(\":\");\n+                    if (!dependencies.keySet().contains(res[0]) && activatedQueries.contains(res[0])) {\n+                        dependencies.put(res[0], new HashSet<String>());\n+                    }\n+                    if (!dependencies.keySet().contains(res[1]) && activatedQueries.contains(res[1])) {\n+                        dependencies.put(res[1], new HashSet<String>());\n+                    }\n+                    if (activatedQueries.contains(res[0]) && activatedQueries.contains(res[1])) {\n+                        dependencies.get(res[0]).add(res[1]);\n+                    }\n+                }\n+            }\n+            br.close();\n+        }\n+\n+        // create a Node object for each query\n+        HashMap<String, Node<Query>> nodes = new HashMap<String, Node<Query>>();\n+        for (String query: activatedQueries) {\n+            nodes.put(query, new Node(new Query(QueryType.valueOf(query)),0));\n+        }\n+\n+        // for each query, correctly set neighbors and set root\n+        for (String query: activatedQueries) {\n+            HashSet<Node<Query>> neighbors = new HashSet<Node<Query>>();\n+            for (String s2: dependencies.get(query)) {\n+                neighbors.add(nodes.get(s2));\n+            }\n+            nodes.get(query).setNeighbors(neighbors);\n+        }\n+\n+        // parse lines from mainUserConfig, ignoring lines that begin with ' ' or '/'\n+        InputStream inputStream = ClassLoaderUtil.getResourceAsStream(mainUserConfig, QueryGenerator.class);\n+        InputStreamReader streamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+        BufferedReader br = new BufferedReader(streamReader);\n+        while ((line = br.readLine()) != null) {\n+            if (line.length() > 2 && line.charAt(0) != ' '\n+                    && !(line.charAt(0) == '/' && line.charAt(1) == '/')) {\n+                String[] res = line.split(\":\");\n+                if(res[0].equals(\"root\")) {\n+                    this.queryRoot = nodes.get(res[1]);", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzOTQ3OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453839478", "bodyText": "Entire file has been changed.", "author": "AllenWang314", "createdAt": "2020-07-13T18:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzOTU5NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451239594", "bodyText": "DML/DQL/DDL does not seem to be in the equivalent type as DDL_CREATE/DDL_PARTITION/... Consider splitting?", "author": "Bei-z", "createdAt": "2020-07-08T02:02:04Z", "path": "tools/template_based_query_generation/src/main/java/QueryType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Types of queries in SQL language encoding\n+ */\n+public enum QueryType {\n+    QUERY_ROOT,\n+    DML,\n+    DQL,\n+    DDL,\n+    SINK,\n+    DDL_CREATE,\n+    DDL_PARTITION,\n+    DDL_CLUSTER,", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3MzU2OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r452973568", "bodyText": "I see what you mean: two types are needed but the tricky part is MarkovChain and Node need objects of the same type. What I plan is to have to still keep MarkovChain and Node but I will change the structure of Query in a later PR (adding stuff about number of tokens needed, etc)", "author": "AllenWang314", "createdAt": "2020-07-10T17:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzOTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MDU1Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453060556", "bodyText": "Please add a todo here.", "author": "Bei-z", "createdAt": "2020-07-10T20:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzOTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0MjM4OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453142389", "bodyText": "Yup added!", "author": "AllenWang314", "createdAt": "2020-07-11T02:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzOTU5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MTMzNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451241334", "bodyText": "consider use CHARSET.charAt(random.nextInt(0,52)) ?", "author": "Bei-z", "createdAt": "2020-07-08T02:08:52Z", "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Utilities class that provides random and IO helper functions.\n+ */\n+public class Utils {\n+\n+\tprivate static final ThreadLocalRandom random = ThreadLocalRandom.current();\n+\n+\tprivate static final int lowerBound = 0;\n+\n+\tprivate static final String CHARSET = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\";\n+\n+\t/**\n+\t * Returns a random integer between a lowerBound and an upperBound, inclusive\n+\t *\n+\t * @param upperBound a non-negative integer upper bound on the generated random integer, inclusive\n+\t * @return a random integer between lowerBound and upperBound, inclusive\n+\t * @throws IllegalArgumentException if upperBound is negative\n+\t */\n+\tpublic static int getRandomInteger(int upperBound) throws IllegalArgumentException {\n+\t\tif (upperBound < 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Upper bound cannot be negative\");\n+\t\t}\n+\n+\t\treturn random.nextInt(lowerBound, upperBound + 1);\n+\t}\n+\n+\t/**\n+\t * Returns a random string with a specified length that matches the regex '[a-zA-Z_]'\n+\t *\n+\t * @param length a nonzero integer specifying the desired length of the generated string\n+\t * @return a random string that matches the regex '[a-zA-Z_]' and has the specified length\n+\t */\n+\tpublic static String getRandomString(int length) throws IllegalArgumentException {\n+\t\tif (length <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Random string must have positive length\");\n+\t\t}\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());\n+\t\t\tchar randomChar = CHARSET.charAt(randomIndex);\n+\t\t\tif (i == 0 && Character.isDigit(randomChar)) {\n+\t\t\t\t// SQL identifiers can't start with digits, so replace with an arbitrary character\n+\t\t\t\trandomChar = 'a';", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc0MDA3OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451740079", "bodyText": "Good catch, will change it.", "author": "spoiledhua", "createdAt": "2020-07-08T18:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MTMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MTUyNw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451241527", "bodyText": "CHARSET.charAt(random.nextInt(0,63))", "author": "Bei-z", "createdAt": "2020-07-08T02:09:41Z", "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Utilities class that provides random and IO helper functions.\n+ */\n+public class Utils {\n+\n+\tprivate static final ThreadLocalRandom random = ThreadLocalRandom.current();\n+\n+\tprivate static final int lowerBound = 0;\n+\n+\tprivate static final String CHARSET = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\";\n+\n+\t/**\n+\t * Returns a random integer between a lowerBound and an upperBound, inclusive\n+\t *\n+\t * @param upperBound a non-negative integer upper bound on the generated random integer, inclusive\n+\t * @return a random integer between lowerBound and upperBound, inclusive\n+\t * @throws IllegalArgumentException if upperBound is negative\n+\t */\n+\tpublic static int getRandomInteger(int upperBound) throws IllegalArgumentException {\n+\t\tif (upperBound < 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Upper bound cannot be negative\");\n+\t\t}\n+\n+\t\treturn random.nextInt(lowerBound, upperBound + 1);\n+\t}\n+\n+\t/**\n+\t * Returns a random string with a specified length that matches the regex '[a-zA-Z_]'\n+\t *\n+\t * @param length a nonzero integer specifying the desired length of the generated string\n+\t * @return a random string that matches the regex '[a-zA-Z_]' and has the specified length\n+\t */\n+\tpublic static String getRandomString(int length) throws IllegalArgumentException {\n+\t\tif (length <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Random string must have positive length\");\n+\t\t}\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());\n+\t\t\tchar randomChar = CHARSET.charAt(randomIndex);", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNjU3OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453136579", "bodyText": "Changed to char randomChar = CHARSET.charAt(random.nextInt(0, CHARSET.length()));", "author": "AllenWang314", "createdAt": "2020-07-11T01:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MTUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0Mzg0OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451243848", "bodyText": "Please add tests for this method and remove unused code.", "author": "Bei-z", "createdAt": "2020-07-08T02:18:55Z", "path": "tools/template_based_query_generation/src/test/java/UtilsTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class UtilsTest {\n+\n+\t@Test\n+\tpublic void test_getRandomInteger() {\n+\t\tint randomInt1 = Utils.getRandomInteger(10);\n+\t\tassertTrue(randomInt1 > 0);\n+\t\tassertTrue(randomInt1 <= 10);\n+\t\tassertEquals(0, Utils.getRandomInteger(0));\n+\t\tassertThrows(IllegalArgumentException.class, () -> {\n+\t\t\tUtils.getRandomInteger(-1);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void test_getRandomString() {\n+\t\tString randomString1 = Utils.getRandomString(10);\n+\t\tassertEquals(10, randomString1.length());\n+\t\tassertFalse(randomString1.contains(\"!\"));\n+\t\tassertFalse(Character.isDigit(randomString1.charAt(0)));\n+\t\tassertThrows(IllegalArgumentException.class, () -> {\n+\t\t\tUtils.getRandomString(0);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void test_writeDirectory() {\n+\t\tassertEquals(1, 1);\n+\t\t/*\n+\t\tList<String> bq_skeletons = new ArrayList<>();\n+\t\tbq_skeletons.add(\"BQ Skeletons!\");\n+\t\tList<String> bq_tokenized = new ArrayList<>();\n+\t\tbq_tokenized.add(\"BQ Tokens!\");\n+\t\tList<String> postgre_skeletons = new ArrayList<>();\n+\t\tpostgre_skeletons.add(\"PostgreSQL Skeletons!\");\n+\t\tList<String> postgre_tokenized = new ArrayList<>();\n+\t\tpostgre_tokenized.add(\"PostgreSQL Tokens!\");\n+\t\tMap<String, ImmutableList<String>> outputs = new HashMap<>();\n+\t\toutputs.put(\"BQ_skeletons\", ImmutableList.copyOf(bq_skeletons));\n+\t\toutputs.put(\"BQ_tokenized\", ImmutableList.copyOf(bq_tokenized));\n+\t\toutputs.put(\"Postgre_skeletons\", ImmutableList.copyOf(postgre_skeletons));\n+\t\toutputs.put(\"Postgre_tokenized\", ImmutableList.copyOf(postgre_tokenized));\n+\t\ttry {\n+\t\t\tUtils.writeDirectory(ImmutableMap.copyOf(outputs));\n+\t\t} catch (IOException exception) {\n+\t\t\tSystem.out.println(exception);\n+\t\t}\n+\t\t */\n+\t}\n+}", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc0MDM1NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451740355", "bodyText": "Okay, will add new tests using the Mock objects we discussed.", "author": "spoiledhua", "createdAt": "2020-07-08T18:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0Mzg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NDAwMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451244000", "bodyText": "Please use assert instead of print in test. Also, consider use test data in case real data is too long.", "author": "Bei-z", "createdAt": "2020-07-08T02:19:33Z", "path": "tools/template_based_query_generation/src/test/java/QueryGeneratorTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class QueryGeneratorTest {\n+\n+    @Test\n+    public void test_generateQueries_1() throws Exception {\n+        String[] dialectConfigPaths = new String[] {\"dialect_config/ddl_dependencies.txt\",\n+                \"dialect_config/dml_dependencies.txt\",\n+                \"dialect_config/dql_dependencies.txt\",\n+                \"dialect_config/root_dependencies.txt\"};\n+        String[] userConfigPaths = new String[] {\"user_config/ddl.txt\",\n+                \"user_config/dml.txt\",\n+                \"user_config/dql.txt\",\n+                \"user_config/root.txt\"};\n+        String mainUserConfig = \"user_config/config.txt\";\n+        QueryGenerator qg = new QueryGenerator(dialectConfigPaths, userConfigPaths, mainUserConfig);\n+        ArrayList<ArrayList<Query>> queries = qg.generateQueries(50);\n+        for (ArrayList<Query> query: queries) {\n+            System.out.println(query);", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNTcwNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453135706", "bodyText": "The body of QueryGenerator and QueryGeneratorTest have been removed. Victor is working on doing it via a json approach,.", "author": "AllenWang314", "createdAt": "2020-07-11T01:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NDAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NDgxNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451244814", "bodyText": "Consider to use getCumulativeProbabilities instead of getCProbabilities to make it more readable.", "author": "Bei-z", "createdAt": "2020-07-08T02:22:43Z", "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,124 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;\n+    private ArrayList<Node<E>> neighborList; // list of neighbors and corresponding cumulative probabilities\n+    private ArrayList<Double> cProbabilities; // cumulative probabilities\n+    private Random r;\n+\n+    /**\n+     * constructs node from query\n+     * @param obj\n+     */\n+    public Node(E obj, int seed) {\n+        this.obj = obj;\n+        this.r = new Random(seed);\n+        this.setNeighbors(new HashMap<Node<E>, Double>());\n+    }\n+\n+    /**\n+     * updates neighborList and cProbabilities when neighbors is changed\n+     */\n+    private void updateProbabilities() {\n+        if (this.neighbors.size() != 0) {\n+            Set<Node<E>> neighborSet = this.neighbors.keySet();\n+            double total = 0;\n+            ArrayList<Node<E>> newNeighborList = new ArrayList<Node<E>>();\n+            ArrayList<Double> newCProbabilities = new ArrayList<Double>();\n+            for (Node<E> n: neighborSet) {\n+                newNeighborList.add(n);\n+                newCProbabilities.add(total);\n+                total += this.neighbors.get(n);\n+            }\n+            this.neighborList = newNeighborList;\n+            this.cProbabilities = newCProbabilities;\n+        } else {\n+            this.neighborList = new ArrayList<Node<E>>();\n+            this.cProbabilities = new ArrayList<Double>();\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @return if node is sink\n+     */\n+    public boolean hasNextNode() {\n+        return (neighbors.size() > 0);\n+    }\n+\n+    /**\n+     * \n+     * @return next random node from current node, returns null if node is sink\n+     */\n+    public Node nextNode() {\n+        if (this.neighborList.size() == 0) {\n+            return null;\n+        }\n+        double randDouble = this.r.nextDouble();\n+\n+        // find largest index such that cProbabilities is less than randDouble\n+        int low = 0, high = this.neighborList.size();\n+        while (high - low > 1) {\n+            int mid = (low + high) / 2;\n+            if (this.cProbabilities.get(mid) > randDouble) {\n+                high = mid;\n+            } else {\n+                low = mid;\n+            }\n+        }\n+        return this.neighborList.get(low);\n+    }\n+\n+    public String toString() {\n+        return this.obj.toString();\n+    }\n+\n+    public E getObj() {\n+        return this.obj;\n+    }\n+\n+    public void setObj(String query) {\n+        this.obj = obj;\n+    }\n+\n+    public HashMap<Node<E>, Double> getNeighbors() {\n+        return this.neighbors;\n+    }\n+\n+    public void setNeighbors(HashMap<Node<E>, Double> neighbors) {\n+        this.neighbors = neighbors;\n+        this.updateProbabilities();\n+    }\n+\n+    /**\n+     * sets neighbors with \n+     * @param neighbors\n+     */\n+    public void setNeighbors(HashSet<Node<E>> neighbors) {\n+        HashMap<Node<E>, Double> edges = new HashMap<Node<E>, Double>();\n+        double c = (neighbors.size() == 0) ? 0 : 1.0/neighbors.size();\n+        for (Node<E> n: neighbors) {\n+            edges.put(n, c);\n+        }\n+        this.neighbors = edges;\n+        this.updateProbabilities();\n+    }\n+\n+    public ArrayList<Node<E>> getNeighborList() {\n+        return neighborList;\n+    }\n+\n+    public ArrayList<Double> getCProbabilities() {", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MDk0NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r452960945", "bodyText": "fixed!", "author": "AllenWang314", "createdAt": "2020-07-10T16:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NDgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NTI4Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451245283", "bodyText": "Consider have assignment for each todo? For example \"TODO(spoiledhua):...\"", "author": "Bei-z", "createdAt": "2020-07-08T02:24:40Z", "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Utilities class that provides random and IO helper functions.\n+ */\n+public class Utils {\n+\n+\tprivate static final ThreadLocalRandom random = ThreadLocalRandom.current();\n+\n+\tprivate static final int lowerBound = 0;\n+\n+\tprivate static final String CHARSET = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\";\n+\n+\t/**\n+\t * Returns a random integer between a lowerBound and an upperBound, inclusive\n+\t *\n+\t * @param upperBound a non-negative integer upper bound on the generated random integer, inclusive\n+\t * @return a random integer between lowerBound and upperBound, inclusive\n+\t * @throws IllegalArgumentException if upperBound is negative\n+\t */\n+\tpublic static int getRandomInteger(int upperBound) throws IllegalArgumentException {\n+\t\tif (upperBound < 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Upper bound cannot be negative\");\n+\t\t}\n+\n+\t\treturn random.nextInt(lowerBound, upperBound + 1);\n+\t}\n+\n+\t/**\n+\t * Returns a random string with a specified length that matches the regex '[a-zA-Z_]'\n+\t *\n+\t * @param length a nonzero integer specifying the desired length of the generated string\n+\t * @return a random string that matches the regex '[a-zA-Z_]' and has the specified length\n+\t */\n+\tpublic static String getRandomString(int length) throws IllegalArgumentException {\n+\t\tif (length <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Random string must have positive length\");\n+\t\t}\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());\n+\t\t\tchar randomChar = CHARSET.charAt(randomIndex);\n+\t\t\tif (i == 0 && Character.isDigit(randomChar)) {\n+\t\t\t\t// SQL identifiers can't start with digits, so replace with an arbitrary character\n+\t\t\t\trandomChar = 'a';\n+\t\t\t}\n+\t\t\tsb.append(randomChar);\n+\t\t}\n+\n+\t\treturn sb.toString();\n+\t}\n+\n+\t/**\n+\t * Writes generated outputs to a specified directory, creating one if it doesn't exist.\n+\t *\n+\t * @param outputs       collection of statements to write\n+\t * @param directoryName relative path of a specified directory\n+\t * @throws IOException if the IO fails or creating the necessary files or folders fails\n+\t */\n+\tpublic static void writeDirectory(ImmutableMap<String, ImmutableList<String>> outputs, String directoryName) throws IOException {\n+\t\tString outputDirectory = getOutputDirectory(directoryName);\n+\t\tFile file = new File(outputDirectory);\n+\n+\t\tif (!file.exists() && !file.mkdir()) {\n+\t\t\tthrow new FileNotFoundException(\"No such directory or the directory could not be created\");\n+\t\t}\n+\n+\t\twriteFile(outputs.get(\"BQ_skeletons\"), outputDirectory + \"/bq_skeleton.txt\");\n+\t\twriteFile(outputs.get(\"BQ_tokenized\"), outputDirectory + \"/bq_tokenized.txt\");\n+\t\twriteFile(outputs.get(\"Postgre_skeletons\"), outputDirectory + \"/postgre_skeleton.txt\");\n+\t\twriteFile(outputs.get(\"Postgre_tokenized\"), outputDirectory + \"/postgre_tokenized.txt\");\n+\t\t// TODO: write sample data to file", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNjUxMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453836512", "bodyText": "Yup assigned to Victor", "author": "AllenWang314", "createdAt": "2020-07-13T18:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NTI4Mw=="}], "type": "inlineReview"}, {"oid": "bc810e37ceb4709e118dada8d9f161f0b8f062d1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/bc810e37ceb4709e118dada8d9f161f0b8f062d1", "message": "deleted unused code, refactored randomization", "committedDate": "2020-07-08T18:37:50Z", "type": "commit"}, {"oid": "9d72bb0d92386387c3cf965baec965e530e2b112", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9d72bb0d92386387c3cf965baec965e530e2b112", "message": "deleted unused code, refactored randomization", "committedDate": "2020-07-08T18:38:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4MDc3Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451780772", "bodyText": "I would recommend to break this constructor into a few helper methods.", "author": "bonancao", "createdAt": "2020-07-08T19:36:26Z", "path": "tools/template_based_query_generation/src/main/java/QueryGenerator.java", "diffHunk": "@@ -0,0 +1,142 @@\n+import com.opensymphony.xwork2.util.ClassLoaderUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * Class that parses config file and creates queries from markov chain\n+ */\n+public class QueryGenerator {\n+\n+    private MarkovChain<Query> mcGenerator;\n+    private Node<Query> queryRoot;\n+\n+    /**\n+     *\n+     * @param dialectConfigPaths\n+     * @param userConfigPaths\n+     * @param mainUserConfig\n+     * @throws Exception\n+     */\n+    public QueryGenerator(String[] dialectConfigPaths, String[] userConfigPaths, String mainUserConfig) throws Exception {", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNTQ4Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453135486", "bodyText": "I was mainly using QueryGenerator as a prototype to print some strings out and see what it does. Victor is working on replacing this completely using gson, and the body of this class has been removed and replaced with a TODO", "author": "AllenWang314", "createdAt": "2020-07-11T01:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4MDc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NTEwOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451785108", "bodyText": "The indentation in the first few files looks weird.", "author": "bonancao", "createdAt": "2020-07-08T19:45:03Z", "path": "tools/template_based_query_generation/src/main/java/Keywords.java", "diffHunk": "@@ -0,0 +1,23 @@\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Keywords set interface that all keyword set classes implement\n+ */\n+\n+public interface Keywords {\n+\n+\t/**", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MTkxOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453071918", "bodyText": "I think this is fixed now---Victor revised this file significantly", "author": "AllenWang314", "createdAt": "2020-07-10T20:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NTEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1OTg4OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453859888", "bodyText": "This should be fixed now.", "author": "spoiledhua", "createdAt": "2020-07-13T18:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NjcwNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451786704", "bodyText": "Please remove this line if not required.", "author": "bonancao", "createdAt": "2020-07-08T19:48:08Z", "path": "tools/template_based_query_generation/src/main/java/KeywordsMappingDDL.java", "diffHunk": "@@ -0,0 +1,55 @@\n+import com.google.common.collect.ImmutableMap;\n+\n+public class KeywordsMappingDDL implements KeywordsMapping {\n+\n+\tprivate final String fileNamePostgre = \"./src/main/resources/dialect_config/ddl_mapping_postgre.txt\";\n+\n+\tprivate final String fileNameBQ = \"./src/main/resources/dialect_config/ddl_mapping_BQ.txt\";\n+\n+\tprivate final KeywordsDDL keywordsSetDDL = new KeywordsDDL();\n+\n+\tprivate final ImmutableMap<String, String> keywordsMapPostgre;\n+\n+\tprivate final ImmutableMap<String, String> keywordsMapBQ;\n+\n+\t/**\n+\t * Constructor of DDL keywords mapping, parsed from the config file\n+\t */\n+\tpublic KeywordsMappingDDL() {\n+\t\tkeywordsMapPostgre = Utils.makeImmutableMap(fileNamePostgre, keywordsSetDDL);\n+\n+\t\tkeywordsMapBQ = Utils.makeImmutableMap(fileNameBQ, keywordsSetDDL);\n+\n+\t\tSystem.out.println(System.getProperty(\"user.dir\"));", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NDQwMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453074402", "bodyText": "Done!", "author": "spoiledhua", "createdAt": "2020-07-10T20:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NjcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTA1OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451835059", "bodyText": "Should we keep a Random instance in each node or all of the nodes should share the same instance?", "author": "bonancao", "createdAt": "2020-07-08T21:27:10Z", "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,124 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;\n+    private ArrayList<Node<E>> neighborList; // list of neighbors and corresponding cumulative probabilities\n+    private ArrayList<Double> cProbabilities; // cumulative probabilities\n+    private Random r;", "originalCommit": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NzM3Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r452957377", "bodyText": "All of them share the same instance, since they are initialized in the same class with the seed given by the user. Is it a problem if they share the same instance? Would they be generating similar random numbers then? Is it a problem if they have different instances?", "author": "AllenWang314", "createdAt": "2020-07-10T16:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MzE2Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453063166", "bodyText": "With the current implementation I believe it each not will have its own instance as the instance is initialized in the contructor?\nAlso, vote +1 for sharing the same instance. If they do not share the same instance, I guess with the same seed each node will get same list of random numbers.", "author": "Bei-z", "createdAt": "2020-07-10T20:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNTA2MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453135061", "bodyText": "When the Nodes are created in QueryGenerator, they will be given the same Random r. I have added a constructor in Node to take in an instance of Random.", "author": "AllenWang314", "createdAt": "2020-07-11T00:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTA1OQ=="}], "type": "inlineReview"}, {"oid": "3cbd93ab51b3b39970cf34be28f1098858061196", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/3cbd93ab51b3b39970cf34be28f1098858061196", "message": "refactored Keywords and KeywordsMapping", "committedDate": "2020-07-08T22:22:19Z", "type": "commit"}, {"oid": "608046c9b39e98ec1eb3db900aab2edf0ab32b75", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/608046c9b39e98ec1eb3db900aab2edf0ab32b75", "message": "refactored tests for Keywords and KeywordsMapping", "committedDate": "2020-07-08T22:23:23Z", "type": "commit"}, {"oid": "47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0", "message": "fixed Utils to match Keywords refactor", "committedDate": "2020-07-08T22:28:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5ODc5OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451898799", "bodyText": "Removed unused variable: randomIndex", "author": "Bei-z", "createdAt": "2020-07-09T00:35:28Z", "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -50,10 +51,10 @@ public static String getRandomString(int length) throws IllegalArgumentException\n \n \t\tfor (int i = 0; i < length; i++) {\n \t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());", "originalCommit": "47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNTkzMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453135932", "bodyText": "Victor made a fix.", "author": "AllenWang314", "createdAt": "2020-07-11T01:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5ODc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2MDAxOQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453860019", "bodyText": "Fixed!", "author": "spoiledhua", "createdAt": "2020-07-13T18:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5ODc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5OTEwMw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451899103", "bodyText": "Sorry for asking for change back and forth. I guess it would be better to use CHARSET.charAt(random.nextInt(0, CHARSET.length())) here.", "author": "Bei-z", "createdAt": "2020-07-09T00:36:41Z", "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -50,10 +51,10 @@ public static String getRandomString(int length) throws IllegalArgumentException\n \n \t\tfor (int i = 0; i < length; i++) {\n \t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());\n-\t\t\tchar randomChar = CHARSET.charAt(randomIndex);\n+\t\t\tchar randomChar = CHARSET.charAt(random.nextInt(0, 63));", "originalCommit": "47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNjc4Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453136786", "bodyText": "Victor made this change.", "author": "AllenWang314", "createdAt": "2020-07-11T01:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5OTEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2MDExNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453860115", "bodyText": "Fixed.", "author": "spoiledhua", "createdAt": "2020-07-13T18:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5OTEwMw=="}], "type": "inlineReview"}, {"oid": "2fc68790872f208ed5bcb32c0174911527d599a1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/2fc68790872f208ed5bcb32c0174911527d599a1", "message": "refactored KeywordsTest for less repetition", "committedDate": "2020-07-09T15:31:29Z", "type": "commit"}, {"oid": "7f59c191b57deaca8e3f447c209b2958c6b8dab2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7f59c191b57deaca8e3f447c209b2958c6b8dab2", "message": "added tests for Utils write functions", "committedDate": "2020-07-09T20:28:19Z", "type": "commit"}, {"oid": "8c9adfb9cbe7db04844f953384354933674dda49", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8c9adfb9cbe7db04844f953384354933674dda49", "message": "made changes to MarkovChain and Node", "committedDate": "2020-07-10T16:55:56Z", "type": "commit"}, {"oid": "46203ca09921e4df62c76f98cf6e4dd6940665b6", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/46203ca09921e4df62c76f98cf6e4dd6940665b6", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation", "committedDate": "2020-07-10T16:56:03Z", "type": "commit"}, {"oid": "4512cbd838e28dba6b1abe671ea9087681b3fad8", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/4512cbd838e28dba6b1abe671ea9087681b3fad8", "message": "mockito dependency removed", "committedDate": "2020-07-10T18:49:30Z", "type": "commit"}, {"oid": "55fd96636d3e6815d154c861b65f463dacc1ecd5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/55fd96636d3e6815d154c861b65f463dacc1ecd5", "message": "fixed tests", "committedDate": "2020-07-10T20:06:27Z", "type": "commit"}, {"oid": "e175fbc1ab39d3563867f4ae9d888247642d76e4", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/e175fbc1ab39d3563867f4ae9d888247642d76e4", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation", "committedDate": "2020-07-10T20:06:46Z", "type": "commit"}, {"oid": "083d94eb378131a0901deecc294c4d7978ff92bd", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/083d94eb378131a0901deecc294c4d7978ff92bd", "message": "refactored user config to json", "committedDate": "2020-07-10T20:14:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1OTg4MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453059881", "bodyText": "We still store duplicated data in this neighbors hashmap and the following cumulativeProbabilities. Even though the storage space is not sensitive in this project, storing same info in different places and also expect those 2 objects storing identical nodes could possible cause more errors in the future when we or someone else edit it. Do we really need to store this neighbor variable? Looks like the probability was only used to calculated the cumulativeProbability. If the probability need to be kept for some other use, can we store it in the cumulativeProbabilities object? For example, use TreeMap<Double, Pair<Node, Double>>", "author": "Bei-z", "createdAt": "2020-07-10T20:21:16Z", "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,99 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.TreeMap;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;", "originalCommit": "e175fbc1ab39d3563867f4ae9d888247642d76e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MzAwNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453073005", "bodyText": "I think neighbors would come in handy if we ever needed to modify the markov chain. However, from how we imagine people using our tool, the markov chain will be initialized and used to generate queries and won't be modified. The user will modify the config and recreate a markov chain to make modifications. So I think it's ok to completely get rid of neighbors.", "author": "AllenWang314", "createdAt": "2020-07-10T20:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1OTg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzMzYyMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453133622", "bodyText": "I kept neighbors because it was nice having it for testing (though it's never used by the other classes). I got rid of it and made edits to NodeTest to only use cumulativeProbabilities.", "author": "AllenWang314", "createdAt": "2020-07-11T00:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1OTg4MQ=="}], "type": "inlineReview"}, {"oid": "820464f6603367b4e651800e7c743358b46f8c82", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/820464f6603367b4e651800e7c743358b46f8c82", "message": "replaced .txt reader with .json Gson", "committedDate": "2020-07-11T00:27:59Z", "type": "commit"}, {"oid": "90da5dac443270bbc6bf54996d9845244312eb9a", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/90da5dac443270bbc6bf54996d9845244312eb9a", "message": "refacted QueryGenerator with .json file paths", "committedDate": "2020-07-11T00:29:22Z", "type": "commit"}, {"oid": "33835babc5a545ddf0f7fbbd442e277e56124165", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/33835babc5a545ddf0f7fbbd442e277e56124165", "message": "added comments for new JSON helper classes", "committedDate": "2020-07-11T00:37:18Z", "type": "commit"}, {"oid": "356957072c23dddd47718d162f11fd4179cccc32", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/356957072c23dddd47718d162f11fd4179cccc32", "message": "made revisions for first PR", "committedDate": "2020-07-11T01:56:05Z", "type": "commit"}, {"oid": "771fbf9116b8bff81ef70f07c3ffa9828033b3bb", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/771fbf9116b8bff81ef70f07c3ffa9828033b3bb", "message": "merged with Victor's edits", "committedDate": "2020-07-11T01:58:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMjA5NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453802095", "bodyText": "Please resolve those lined caused by merging conflicts.", "author": "Bei-z", "createdAt": "2020-07-13T17:12:07Z", "path": "tools/template_based_query_generation/src/test/java/QueryGeneratorTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+import org.junit.jupiter.api.Test;\n+\n+<<<<<<< HEAD", "originalCommit": "771fbf9116b8bff81ef70f07c3ffa9828033b3bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNTcxNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453835716", "bodyText": "Fixed", "author": "AllenWang314", "createdAt": "2020-07-13T18:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMjA5NQ=="}], "type": "inlineReview"}, {"oid": "dd56d5981647c395189b684a9b636e5b6080b487", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/dd56d5981647c395189b684a9b636e5b6080b487", "message": "fixed merge conflict", "committedDate": "2020-07-13T18:17:08Z", "type": "commit"}, {"oid": "a89b003680d9fd5bf8013cb87fc944fa49a19da1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a89b003680d9fd5bf8013cb87fc944fa49a19da1", "message": "fixed indentation", "committedDate": "2020-07-13T19:29:11Z", "type": "commit"}, {"oid": "1f2c698b51c8a3a36016fa6bd1e7cb2ba58e9735", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/1f2c698b51c8a3a36016fa6bd1e7cb2ba58e9735", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation", "committedDate": "2020-07-13T19:29:20Z", "type": "commit"}, {"oid": "23edcc679481219b40d4bf4d408079af60b389ed", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/23edcc679481219b40d4bf4d408079af60b389ed", "message": "fixed spacing", "committedDate": "2020-07-13T19:32:56Z", "type": "commit"}, {"oid": "f7ec890435329dd0fd152ca78339c6efe7028c61", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f7ec890435329dd0fd152ca78339c6efe7028c61", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation", "committedDate": "2020-07-13T19:33:14Z", "type": "commit"}, {"oid": "1fe1e6166ab121d617128e1a2caf54676dd8cd98", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/1fe1e6166ab121d617128e1a2caf54676dd8cd98", "message": "added TODOs for .json conversion", "committedDate": "2020-07-13T19:41:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5MDk5Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453890996", "bodyText": "Please delete the weird character", "author": "Bei-z", "createdAt": "2020-07-13T19:47:13Z", "path": "tools/template_based_query_generation/src/main/java/MarkovChain.java", "diffHunk": "@@ -0,0 +1,50 @@\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.HashMap;\n+import java.util.Random;\n+\n+/**\n+ * Class that represents src.main.MarkovChain encoding query and keyword dependencies\n+ */\n+public class MarkovChain<E> {\n+\n+\tprivate HashSet<Node<E>> nodes;\n+\n+\t/**\u00e5", "originalCommit": "1fe1e6166ab121d617128e1a2caf54676dd8cd98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5NjE2OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453896169", "bodyText": "got it!", "author": "AllenWang314", "createdAt": "2020-07-13T19:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5MDk5Ng=="}], "type": "inlineReview"}, {"oid": "87a25f852923ef4dfd86b503102ca0f37e631561", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/87a25f852923ef4dfd86b503102ca0f37e631561", "message": "fixed typo", "committedDate": "2020-07-13T19:57:31Z", "type": "commit"}, {"oid": "ba9768d7ae9426b4d469a20ba134c1837980ed97", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/ba9768d7ae9426b4d469a20ba134c1837980ed97", "message": "fixed typo", "committedDate": "2020-07-13T19:58:25Z", "type": "commit"}, {"oid": "5568b93422d8a435633b5da0e9e2d67093d94b0f", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/5568b93422d8a435633b5da0e9e2d67093d94b0f", "message": "fixed merge conflict", "committedDate": "2020-07-13T19:59:54Z", "type": "commit"}, {"oid": "13a664928439f2c1b111764288b5424d63072c9d", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/13a664928439f2c1b111764288b5424d63072c9d", "message": "Merge branch 'master' into template-generation", "committedDate": "2020-07-13T20:00:22Z", "type": "commit"}]}