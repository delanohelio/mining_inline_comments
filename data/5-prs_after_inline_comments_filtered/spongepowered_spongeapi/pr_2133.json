{"pr_number": 2133, "pr_title": "Replace Service Manager with Provider", "pr_createdAt": "2020-06-27T11:34:40Z", "pr_url": "https://github.com/SpongePowered/SpongeAPI/pull/2133", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxODEyNw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2133#discussion_r446518127", "bodyText": "Maybe append per plugin otherwise the reader expects a reason or error here.", "author": "ST-DDT", "createdAt": "2020-06-27T12:06:52Z", "path": "src/main/java/org/spongepowered/api/event/service/ProvideServiceEvent.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.spongepowered.api.event.service;\n+\n+import org.spongepowered.api.event.GenericEvent;\n+\n+import java.util.function.Supplier;\n+\n+/**\n+ * An event that allows plugins to suggest their own implementation for a given\n+ * service.\n+ *\n+ * <p>Service providers should <strong>not</strong> construct the service object\n+ * prior to selection. Instead, they should wait for if, and only if, their\n+ * service factory as supplied in {@link #suggest(Supplier)} has been called.\n+ * Further, each plugin may only supply <strong>one</strong> service provider\n+ * for each service.</p>\n+ *\n+ * <p>It is not guaranteed that this service will fire for the indicated\n+ * service. This may happen if the server is configured to select a particular\n+ * service.</p>\n+ *\n+ * @param <T> The service to provide.\n+ */\n+public interface ProvideServiceEvent<T> extends GenericEvent<T> {\n+\n+    /**\n+     * Provides a suggestion for the given service. <strong>This may only be\n+     * called once for a given service.</strong>", "originalCommit": "4df68d19bc53fbcfcd5c050ada4f76ee9470641c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMjcxNg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2133#discussion_r446522716", "bodyText": "Please add a provideUnchecked, like before.", "author": "ST-DDT", "createdAt": "2020-06-27T12:42:33Z", "path": "src/main/java/org/spongepowered/api/service/ServiceProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.spongepowered.api.service;\n+\n+import org.spongepowered.api.service.ban.BanService;\n+import org.spongepowered.api.service.economy.EconomyService;\n+import org.spongepowered.api.service.pagination.PaginationService;\n+import org.spongepowered.api.service.permission.PermissionService;\n+import org.spongepowered.api.service.rcon.RconService;\n+import org.spongepowered.api.service.sql.SqlService;\n+import org.spongepowered.api.service.user.UserStorageService;\n+import org.spongepowered.api.service.whitelist.WhitelistService;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Provides various Sponge services.\n+ */\n+public interface ServiceProvider {\n+\n+    /**\n+     * Provides the service represented by the supplied {@link Class}.\n+     *\n+     * @param serviceClass The class\n+     * @param <T> The type of service\n+     * @return The service, if one exists\n+     */\n+    <T> Optional<T> provide(Class<T> serviceClass);", "originalCommit": "4df68d19bc53fbcfcd5c050ada4f76ee9470641c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMzc1MQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2133#discussion_r446523751", "bodyText": "No.\nAs this is a PoC I've not fully explained what's going on here but this is not intended for third party service interfaces. The only reason I've added this is to enable third party implementations to add extra first-party service interfaces.", "author": "dualspiral", "createdAt": "2020-06-27T12:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMjcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMzIyNw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2133#discussion_r446523227", "bodyText": "I would call it getRegistration, not sure which prupose this method has though.", "author": "ST-DDT", "createdAt": "2020-06-27T12:44:32Z", "path": "src/main/java/org/spongepowered/api/service/ServiceProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.spongepowered.api.service;\n+\n+import org.spongepowered.api.service.ban.BanService;\n+import org.spongepowered.api.service.economy.EconomyService;\n+import org.spongepowered.api.service.pagination.PaginationService;\n+import org.spongepowered.api.service.permission.PermissionService;\n+import org.spongepowered.api.service.rcon.RconService;\n+import org.spongepowered.api.service.sql.SqlService;\n+import org.spongepowered.api.service.user.UserStorageService;\n+import org.spongepowered.api.service.whitelist.WhitelistService;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Provides various Sponge services.\n+ */\n+public interface ServiceProvider {\n+\n+    /**\n+     * Provides the service represented by the supplied {@link Class}.\n+     *\n+     * @param serviceClass The class\n+     * @param <T> The type of service\n+     * @return The service, if one exists\n+     */\n+    <T> Optional<T> provide(Class<T> serviceClass);\n+\n+    /**\n+     * Provides the {@link ServiceRegistration} for the supplied {@link Class}.\n+     *\n+     * @param serviceClass The class\n+     * @param <T> The type of service\n+     * @return The registration, if one exists\n+     */\n+    <T> Optional<ServiceRegistration<T>> registration(Class<T> serviceClass);", "originalCommit": "4df68d19bc53fbcfcd5c050ada4f76ee9470641c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNDE0OA==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2133#discussion_r446524148", "bodyText": "Yeah, name is in the air. A example is that a plugin might want to know who supplies a service, so they then know they can use an expanded API from said plugin that they are aware of.", "author": "dualspiral", "createdAt": "2020-06-27T12:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMzIyNw=="}], "type": "inlineReview"}, {"oid": "63f45578676aed8b555434e85fa1797c5b7fc099", "url": "https://github.com/SpongePowered/SpongeAPI/commit/63f45578676aed8b555434e85fa1797c5b7fc099", "message": "Licence", "committedDate": "2020-07-02T18:35:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc3OTAzMw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2133#discussion_r449779033", "bodyText": "this.", "author": "Zidane", "createdAt": "2020-07-04T14:46:42Z", "path": "src/main/java/org/spongepowered/api/Sponge.java", "diffHunk": "@@ -254,4 +240,14 @@ public static Scheduler getAsyncScheduler() {\n     public static CommandManager getCommandManager() {\n         return check(commandManager);\n     }\n+\n+    /**\n+     * Gets the {@link ServiceProvider} for providing services.\n+     *\n+     * @return The service provider.\n+     */\n+    public static ServiceProvider getServiceProvider() {\n+        return getGame().getServiceProvider();", "originalCommit": "63f45578676aed8b555434e85fa1797c5b7fc099", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MDk0OQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2133#discussion_r449780949", "bodyText": "getGame() is static.", "author": "dualspiral", "createdAt": "2020-07-04T15:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc3OTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MDk2Ng==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2133#discussion_r449780966", "bodyText": "Sigh, I am up too early then.", "author": "Zidane", "createdAt": "2020-07-04T15:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc3OTAzMw=="}], "type": "inlineReview"}, {"oid": "4772279984001b89edcaa8eb8b30f38f54efb75d", "url": "https://github.com/SpongePowered/SpongeAPI/commit/4772279984001b89edcaa8eb8b30f38f54efb75d", "message": "PoC for service manager", "committedDate": "2020-07-04T15:10:53Z", "type": "commit"}, {"oid": "a83fd3510c7158376b0465f47e93544f2d3f4402", "url": "https://github.com/SpongePowered/SpongeAPI/commit/a83fd3510c7158376b0465f47e93544f2d3f4402", "message": "Update comment", "committedDate": "2020-07-04T15:10:53Z", "type": "commit"}, {"oid": "313fb89a4feda474f4fe808b92328252938ef8ef", "url": "https://github.com/SpongePowered/SpongeAPI/commit/313fb89a4feda474f4fe808b92328252938ef8ef", "message": "Add entry point for service provider", "committedDate": "2020-07-04T15:10:53Z", "type": "commit"}, {"oid": "acdd90b065b9576da8fc45d76f9738d2717b9bfe", "url": "https://github.com/SpongePowered/SpongeAPI/commit/acdd90b065b9576da8fc45d76f9738d2717b9bfe", "message": "Licence", "committedDate": "2020-07-04T15:10:53Z", "type": "commit"}, {"oid": "acdd90b065b9576da8fc45d76f9738d2717b9bfe", "url": "https://github.com/SpongePowered/SpongeAPI/commit/acdd90b065b9576da8fc45d76f9738d2717b9bfe", "message": "Licence", "committedDate": "2020-07-04T15:10:53Z", "type": "forcePushed"}, {"oid": "3090b18b645317401616ea2d85271fc2ba103312", "url": "https://github.com/SpongePowered/SpongeAPI/commit/3090b18b645317401616ea2d85271fc2ba103312", "message": "Move service event", "committedDate": "2020-07-04T15:28:54Z", "type": "commit"}, {"oid": "8984e6ab389cbe094e2911b0dbb099b82f88a530", "url": "https://github.com/SpongePowered/SpongeAPI/commit/8984e6ab389cbe094e2911b0dbb099b82f88a530", "message": "Fix compile error", "committedDate": "2020-07-04T15:42:24Z", "type": "commit"}]}