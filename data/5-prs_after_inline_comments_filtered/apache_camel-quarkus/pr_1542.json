{"pr_number": 1542, "pr_title": "Added support for flatpack dataformat fixes #796", "pr_createdAt": "2020-08-18T19:50:37Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1542", "timeline": [{"oid": "6fbd19002ddf959c4384d2b07f3b2d2908ac5121", "url": "https://github.com/apache/camel-quarkus/commit/6fbd19002ddf959c4384d2b07f3b2d2908ac5121", "message": "Added support for flatpack dataformat fixes #796", "committedDate": "2020-08-18T19:47:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDU0MA==", "url": "https://github.com/apache/camel-quarkus/pull/1542#discussion_r472864540", "bodyText": "This won't work when the test is executed on the platform because there is only the test-jar available. No local filesystem.\nCould you plz load the file via classloader?", "author": "ppalaga", "createdAt": "2020-08-19T08:43:48Z", "path": "integration-tests/flatpack/src/test/java/org/apache/camel/quarkus/component/flatpack/it/FlatpackTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.flatpack.it;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import org.apache.camel.converter.IOConverter;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@QuarkusTest\n+class FlatpackTest {\n+\n+    @Test\n+    public void delimitedUnmarshalShouldSucceed() throws IOException {\n+        String data = IOConverter.toString(new File(\"src/test/data/delim/INVENTORY-CommaDelimitedWithQualifier.txt\"), null);", "originalCommit": "6fbd19002ddf959c4384d2b07f3b2d2908ac5121", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkxNDU2OA==", "url": "https://github.com/apache/camel-quarkus/pull/1542#discussion_r472914568", "bodyText": "Thanks for catching @ppalaga :+1 I've aligned on other tests in this commit.", "author": "aldettinger", "createdAt": "2020-08-19T10:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDk2NA==", "url": "https://github.com/apache/camel-quarkus/pull/1542#discussion_r472864964", "bodyText": "Same as above: could you plz load the file via class loader?", "author": "ppalaga", "createdAt": "2020-08-19T08:44:29Z", "path": "integration-tests/flatpack/src/test/java/org/apache/camel/quarkus/component/flatpack/it/FlatpackTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.flatpack.it;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import org.apache.camel.converter.IOConverter;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@QuarkusTest\n+class FlatpackTest {\n+\n+    @Test\n+    public void delimitedUnmarshalShouldSucceed() throws IOException {\n+        String data = IOConverter.toString(new File(\"src/test/data/delim/INVENTORY-CommaDelimitedWithQualifier.txt\"), null);\n+\n+        given().body(data).when().get(\"/flatpack/delimited-unmarshal\").then().statusCode(200).body(is(\"4-SOME VALVE\"));\n+    }\n+\n+    @Test\n+    public void delimitedMarshalShouldSucceed() {\n+        List<Map<String, String>> data = new ArrayList<>();\n+        Map<String, String> firstRow = new LinkedHashMap<>();\n+        firstRow.put(\"ITEM_DESC\", \"SOME VALVE\");\n+        firstRow.put(\"IN_STOCK\", \"2\");\n+        firstRow.put(\"PRICE\", \"5.00\");\n+        firstRow.put(\"LAST_RECV_DT\", \"20050101\");\n+        data.add(firstRow);\n+\n+        Map<String, String> secondRow = new LinkedHashMap<>();\n+        secondRow.put(\"ITEM_DESC\", \"AN ENGINE\");\n+        secondRow.put(\"IN_STOCK\", \"100\");\n+        secondRow.put(\"PRICE\", \"1000.00\");\n+        secondRow.put(\"LAST_RECV_DT\", \"20040601\");\n+        data.add(secondRow);\n+\n+        String expected = \"ITEM_DESC,IN_STOCK,PRICE,LAST_RECV_DT\\nAN ENGINE,100,1000.00,20040601\\n\";\n+        given().contentType(ContentType.JSON).body(data).when().get(\"/flatpack/delimited-marshal\").then().statusCode(200)\n+                .body(is(expected));\n+    }\n+\n+    @Test\n+    public void fixedLengthUnmarshalShouldSucceed() throws IOException {\n+        String data = IOConverter.toString(new File(\"src/test/data/fixed/PEOPLE-FixedLength.txt\"), null);", "originalCommit": "6fbd19002ddf959c4384d2b07f3b2d2908ac5121", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkxNDcyMw==", "url": "https://github.com/apache/camel-quarkus/pull/1542#discussion_r472914723", "bodyText": "Same as above.", "author": "aldettinger", "createdAt": "2020-08-19T10:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDk2NA=="}], "type": "inlineReview"}]}