{"pr_number": 998, "pr_title": "Tika support", "pr_createdAt": "2020-03-30T09:38:58Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/998", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMDgxNg==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402910816", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The bean-validator component is programmatically configured by the extension thus\n          \n          \n            \n                 * The tika component is programmatically configured by the extension thus", "author": "ppalaga", "createdAt": "2020-04-03T10:29:18Z", "path": "extensions/tika/deployment/src/main/java/org/apache/camel/quarkus/component/tika/deployment/TikaProcessor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.deployment;\n+\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.tika.TikaRecorder;\n+import org.apache.camel.quarkus.core.deployment.CamelRuntimeBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+import org.jboss.logging.Logger;\n+\n+class TikaProcessor {\n+\n+    private static final Logger LOG = Logger.getLogger(TikaProcessor.class);\n+    private static final String FEATURE = \"camel-tika\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    /*\n+     * The bean-validator component is programmatically configured by the extension thus", "originalCommit": "b37998613ed1dea92647c776d7d6120eb43a8f8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzA2Ng==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402913066", "bodyText": "TikaRecorder looks strange. TikaComponent maybe?", "author": "ppalaga", "createdAt": "2020-04-03T10:33:38Z", "path": "extensions/tika/deployment/src/main/java/org/apache/camel/quarkus/component/tika/deployment/TikaProcessor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.deployment;\n+\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.tika.TikaRecorder;\n+import org.apache.camel.quarkus.core.deployment.CamelRuntimeBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+import org.jboss.logging.Logger;\n+\n+class TikaProcessor {\n+\n+    private static final Logger LOG = Logger.getLogger(TikaProcessor.class);\n+    private static final String FEATURE = \"camel-tika\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    /*\n+     * The bean-validator component is programmatically configured by the extension thus\n+     * we can safely prevent camel to instantiate a default instance.\n+     */\n+    @BuildStep\n+    CamelServiceFilterBuildItem serviceFilter() {\n+        return new CamelServiceFilterBuildItem(CamelServiceFilter.forComponent(\"tika\"));\n+    }\n+\n+    @Record(ExecutionTime.STATIC_INIT)\n+    @BuildStep\n+    CamelRuntimeBeanBuildItem tikaComponent(BeanContainerBuildItem beanContainer, TikaRecorder recorder) {\n+        return new CamelRuntimeBeanBuildItem(\n+                \"tika\",\n+                TikaRecorder.class.getName(),", "originalCommit": "b37998613ed1dea92647c776d7d6120eb43a8f8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDA5Ng==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402914096", "bodyText": "Plz remove the commented code.", "author": "ppalaga", "createdAt": "2020-04-03T10:35:41Z", "path": "integration-tests/tika/src/main/java/org/apache/camel/quarkus/component/tika/it/TikaResource.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.it;\n+\n+import java.net.URI;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+// import org.apache.camel.ProducerTemplate;", "originalCommit": "b37998613ed1dea92647c776d7d6120eb43a8f8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNTg4MQ==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402915881", "bodyText": "Maybe better this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //    @Test\n          \n          \n            \n                @Test\n          \n          \n            \n                @Disabled(\"https://github.com/quarkusio/quarkus/issues/8375\")", "author": "ppalaga", "createdAt": "2020-04-03T10:39:17Z", "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.it;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.txt.UniversalEncodingDetector;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.containsStringIgnoringCase;\n+import static org.hamcrest.Matchers.not;\n+\n+@QuarkusTest\n+class TikaTest {\n+\n+    @Test\n+    public void testPdf() throws Exception {\n+        test(\"quarkus.pdf\", \"application/pdf\", \"Hello Quarkus\");\n+    }\n+\n+    @Test\n+    public void testOdf() throws Exception {\n+        String body = test(\"testOpenOffice2.odt\", \"application/vnd.oasis.opendocument.text\",\n+                \"This is a sample Open Office document, written in NeoOffice 2.2.1 for the Mac\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));\n+    }\n+\n+    @Test\n+    public void testOffice() throws Exception {\n+        String body = test(\"test.doc\", \"application/msword\", \"test\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes());\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(Charset.defaultCharset().name()));\n+    }\n+\n+    //    @Test", "originalCommit": "b37998613ed1dea92647c776d7d6120eb43a8f8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3030530b2b93a6b63e6c6192eff5163bc37cba31", "url": "https://github.com/apache/camel-quarkus/commit/3030530b2b93a6b63e6c6192eff5163bc37cba31", "message": "Tika support #799", "committedDate": "2020-04-03T14:48:47Z", "type": "forcePushed"}, {"oid": "a19fefc852ce85969d6524b1fbd8f6fb33262b6b", "url": "https://github.com/apache/camel-quarkus/commit/a19fefc852ce85969d6524b1fbd8f6fb33262b6b", "message": "Tika support #799", "committedDate": "2020-04-03T14:54:45Z", "type": "forcePushed"}, {"oid": "323d72038aea84857ce944477d99e27819cf63a8", "url": "https://github.com/apache/camel-quarkus/commit/323d72038aea84857ce944477d99e27819cf63a8", "message": "Tika support #799", "committedDate": "2020-04-03T15:16:53Z", "type": "forcePushed"}, {"oid": "cf061b716fcbaf3eb601457170651e224d02b853", "url": "https://github.com/apache/camel-quarkus/commit/cf061b716fcbaf3eb601457170651e224d02b853", "message": "Tika support #799", "committedDate": "2020-04-07T10:19:17Z", "type": "forcePushed"}, {"oid": "25291ae7c66d46498400aebe853dcc495be40905", "url": "https://github.com/apache/camel-quarkus/commit/25291ae7c66d46498400aebe853dcc495be40905", "message": "Tika support #799", "committedDate": "2020-06-17T11:51:08Z", "type": "forcePushed"}, {"oid": "54d159bf2edc88755b46ca181a421788d1f86e2e", "url": "https://github.com/apache/camel-quarkus/commit/54d159bf2edc88755b46ca181a421788d1f86e2e", "message": "Tika support #799", "committedDate": "2020-06-17T12:46:57Z", "type": "forcePushed"}, {"oid": "ae443f6de25b2749ffe74f002d3a6251336f157f", "url": "https://github.com/apache/camel-quarkus/commit/ae443f6de25b2749ffe74f002d3a6251336f157f", "message": "Tika support #799", "committedDate": "2020-06-17T12:48:33Z", "type": "forcePushed"}, {"oid": "384fe34915ad45843bf31bbea668a3fa0872a45a", "url": "https://github.com/apache/camel-quarkus/commit/384fe34915ad45843bf31bbea668a3fa0872a45a", "message": "Tika support #799", "committedDate": "2020-06-17T13:10:32Z", "type": "forcePushed"}, {"oid": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace", "url": "https://github.com/apache/camel-quarkus/commit/318ec108c81e0ab492f8fb1cf6b17c3df2e72ace", "message": "Tika support #799", "committedDate": "2020-06-17T13:53:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MzEwNg==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r441573106", "bodyText": "I think it would be more effective to move this check to the constructor and change the type of the delegate field to SAXTransformerFactory thus eliminating the delegateAsSAXTransformerFactory() method. Given that we call TransformerFactory.newInstance( \"org.apache.xalan.xsltc.trax.TransformerFactoryImpl\", ...) we are quite safe to always get a SAXTransformerFactory", "author": "ppalaga", "createdAt": "2020-06-17T14:07:17Z", "path": "extensions-support/xalan/runtime/src/main/java/org/apache/camel/quarkus/support/xalan/XalanTransformerFactory.java", "diffHunk": "@@ -110,4 +115,42 @@ public void setErrorListener(ErrorListener listener) {\n     public ErrorListener getErrorListener() {\n         return delegate.getErrorListener();\n     }\n+\n+    private SAXTransformerFactory delegateAsSAXTransformerFactory() {\n+        if (delegate instanceof SAXTransformerFactory) {\n+            return (SAXTransformerFactory) delegate;\n+        }\n+        throw new IllegalArgumentException(\"Unsupported TransformerFactory feature \" + SAXTransformerFactory.FEATURE);", "originalCommit": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5ODg2OQ==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r441598869", "bodyText": "Is this annotation required given that we produce a named bean above? https://github.com/apache/camel-quarkus/pull/998/files#diff-6af9bcae1d2af7449582ad99e6bdac3cR54", "author": "ppalaga", "createdAt": "2020-06-17T14:41:35Z", "path": "extensions/tika/runtime/src/main/java/org/apache/camel/quarkus/component/tika/TikaRecorder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.tika.TikaContent;\n+import io.quarkus.tika.TikaMetadata;\n+import io.quarkus.tika.TikaParser;\n+import io.quarkus.tika.runtime.TikaParserProducer;\n+import org.apache.camel.Component;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.tika.TikaComponent;\n+import org.apache.camel.component.tika.TikaConfiguration;\n+import org.apache.camel.component.tika.TikaEndpoint;\n+import org.apache.camel.component.tika.TikaProducer;\n+import org.apache.tika.exception.TikaException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.mime.MediaType;\n+import org.apache.tika.parser.ParseContext;\n+import org.apache.tika.parser.Parser;\n+\n+@Recorder\n+public class TikaRecorder {\n+\n+    public RuntimeValue<TikaComponent> createTikaComponent(BeanContainer container) {\n+        return new RuntimeValue<>(new QuarkusTikaComponent(container.instance(TikaParserProducer.class)));\n+    }\n+\n+    @org.apache.camel.spi.annotations.Component(\"tika\")", "originalCommit": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxOTkxOA==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442019918", "bodyText": "@ppalaga It would make sense to get rid of this annotation.\nBut  without it, execution fails for odf parser with:\n\nCaused by: java.lang.LinkageError: loader constraint violation: loader (instance of ) previously initiated loading for a different type with name \"org/w3c/dom/Node\"\n\nI'm not sure about the reason of this behavior. There is a one related comment: quarkusio/quarkus#8375 (comment)", "author": "JiriOndrusek", "createdAt": "2020-06-18T07:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5ODg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0Mjg2MA==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442042860", "bodyText": "Strange, that looks like a symptom of some class loading nastyness. Either org/w3c/dom/Node is coming from two jars or it is loaded by two different class loaders.", "author": "ppalaga", "createdAt": "2020-06-18T08:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5ODg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNDc1OA==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r441604758", "bodyText": "This is acceptable for now, but as a next step, could we perhaps define some sort of TikaParserProducer interface in Camel and have it there in the Camel Tika component and producer, so that we do not have to subclass here?", "author": "ppalaga", "createdAt": "2020-06-17T14:49:11Z", "path": "extensions/tika/runtime/src/main/java/org/apache/camel/quarkus/component/tika/TikaRecorder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.tika.TikaContent;\n+import io.quarkus.tika.TikaMetadata;\n+import io.quarkus.tika.TikaParser;\n+import io.quarkus.tika.runtime.TikaParserProducer;\n+import org.apache.camel.Component;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.tika.TikaComponent;\n+import org.apache.camel.component.tika.TikaConfiguration;\n+import org.apache.camel.component.tika.TikaEndpoint;\n+import org.apache.camel.component.tika.TikaProducer;\n+import org.apache.tika.exception.TikaException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.mime.MediaType;\n+import org.apache.tika.parser.ParseContext;\n+import org.apache.tika.parser.Parser;\n+\n+@Recorder\n+public class TikaRecorder {\n+\n+    public RuntimeValue<TikaComponent> createTikaComponent(BeanContainer container) {\n+        return new RuntimeValue<>(new QuarkusTikaComponent(container.instance(TikaParserProducer.class)));\n+    }\n+\n+    @org.apache.camel.spi.annotations.Component(\"tika\")\n+    static class QuarkusTikaComponent extends TikaComponent {\n+\n+        private final TikaParserProducer tikaParserProducer;\n+\n+        public QuarkusTikaComponent(TikaParserProducer tikaParserProducer) {", "originalCommit": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "acb9ae5620d079f9ccb2e2f8fb4efaea3c81c659", "url": "https://github.com/apache/camel-quarkus/commit/acb9ae5620d079f9ccb2e2f8fb4efaea3c81c659", "message": "Tika support #799", "committedDate": "2020-06-18T07:31:23Z", "type": "forcePushed"}, {"oid": "b9615da64588c351c69fe3988752846250f76208", "url": "https://github.com/apache/camel-quarkus/commit/b9615da64588c351c69fe3988752846250f76208", "message": "Tika support #799", "committedDate": "2020-06-18T07:39:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0ODA1Mg==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442048052", "bodyText": "I wonder why do we need to test UniversalEncodingDetector here? It does not seem to be testing any Camel Quarkus code.", "author": "ppalaga", "createdAt": "2020-06-18T08:13:53Z", "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.it;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.txt.UniversalEncodingDetector;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.containsStringIgnoringCase;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@QuarkusTest\n+class TikaTest {\n+\n+    @Test\n+    public void testPdf() throws Exception {\n+        testParse(\"quarkus.pdf\", \"application/pdf\", \"Hello Quarkus\");\n+    }\n+\n+    @Test\n+    public void testOdf() throws Exception {\n+        String body = testParse(\"testOpenOffice2.odt\", \"application/vnd.oasis.opendocument.text\",\n+                \"This is a sample Open Office document, written in NeoOffice 2.2.1 for the Mac\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));", "originalCommit": "b9615da64588c351c69fe3988752846250f76208", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0OTY3Mg==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442049672", "bodyText": "Same as above: do we need this?", "author": "ppalaga", "createdAt": "2020-06-18T08:16:41Z", "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.it;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.txt.UniversalEncodingDetector;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.containsStringIgnoringCase;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@QuarkusTest\n+class TikaTest {\n+\n+    @Test\n+    public void testPdf() throws Exception {\n+        testParse(\"quarkus.pdf\", \"application/pdf\", \"Hello Quarkus\");\n+    }\n+\n+    @Test\n+    public void testOdf() throws Exception {\n+        String body = testParse(\"testOpenOffice2.odt\", \"application/vnd.oasis.opendocument.text\",\n+                \"This is a sample Open Office document, written in NeoOffice 2.2.1 for the Mac\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));\n+    }\n+\n+    @Test\n+    public void testOffice() throws Exception {\n+        String body = testParse(\"test.doc\", \"application/msword\", \"test\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));", "originalCommit": "b9615da64588c351c69fe3988752846250f76208", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NTU4MQ==", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442055581", "bodyText": "You are right. This is covered by camel itself (https://github.com/apache/camel/blob/master/components/camel-tika/src/test/java/org/apache/camel/component/tika/TikaParseTest.java#L71). I'll remove both parts.", "author": "JiriOndrusek", "createdAt": "2020-06-18T08:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0OTY3Mg=="}], "type": "inlineReview"}, {"oid": "02b0870bbadddadbe1aaf941995f6df13affc1e5", "url": "https://github.com/apache/camel-quarkus/commit/02b0870bbadddadbe1aaf941995f6df13affc1e5", "message": "Tika support #799", "committedDate": "2020-06-18T08:35:51Z", "type": "commit"}, {"oid": "02b0870bbadddadbe1aaf941995f6df13affc1e5", "url": "https://github.com/apache/camel-quarkus/commit/02b0870bbadddadbe1aaf941995f6df13affc1e5", "message": "Tika support #799", "committedDate": "2020-06-18T08:35:51Z", "type": "forcePushed"}]}