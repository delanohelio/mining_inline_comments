{"pr_number": 1344, "pr_title": "Revisit camel-quarkus bootstrap", "pr_createdAt": "2020-06-11T20:00:03Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1344", "timeline": [{"oid": "2d7fd8addd422d35044fb5a093a441b5d8efd9c7", "url": "https://github.com/apache/camel-quarkus/commit/2d7fd8addd422d35044fb5a093a441b5d8efd9c7", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-13T18:58:51Z", "type": "forcePushed"}, {"oid": "ea9a2e2d570af5cd8613b3bf514c4877b8e37ead", "url": "https://github.com/apache/camel-quarkus/commit/ea9a2e2d570af5cd8613b3bf514c4877b8e37ead", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-14T13:35:15Z", "type": "forcePushed"}, {"oid": "8c18c2b0a2118cba3e04dfe0bb48d59fb03c44d0", "url": "https://github.com/apache/camel-quarkus/commit/8c18c2b0a2118cba3e04dfe0bb48d59fb03c44d0", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-14T15:07:16Z", "type": "forcePushed"}, {"oid": "af9097da9187f5cc7766d31f11293627201431b0", "url": "https://github.com/apache/camel-quarkus/commit/af9097da9187f5cc7766d31f11293627201431b0", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-14T15:19:53Z", "type": "forcePushed"}, {"oid": "16a7d7b3194c0ff536226c09690b1d939df4cda2", "url": "https://github.com/apache/camel-quarkus/commit/16a7d7b3194c0ff536226c09690b1d939df4cda2", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-14T15:20:38Z", "type": "forcePushed"}, {"oid": "57e344ebc2f180c1a8d46e7c7b36940f4161be91", "url": "https://github.com/apache/camel-quarkus/commit/57e344ebc2f180c1a8d46e7c7b36940f4161be91", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-14T15:23:02Z", "type": "forcePushed"}, {"oid": "f3539dc9f57f1c704b213a3a9e1772ab2eabe0f6", "url": "https://github.com/apache/camel-quarkus/commit/f3539dc9f57f1c704b213a3a9e1772ab2eabe0f6", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-14T15:27:54Z", "type": "forcePushed"}, {"oid": "ffb60fe78f392916c7edac576043416c52d4fe44", "url": "https://github.com/apache/camel-quarkus/commit/ffb60fe78f392916c7edac576043416c52d4fe44", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-14T17:54:45Z", "type": "forcePushed"}, {"oid": "44dbfeb753247d9430ce479e9d896f020db20121", "url": "https://github.com/apache/camel-quarkus/commit/44dbfeb753247d9430ce479e9d896f020db20121", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-14T22:21:16Z", "type": "forcePushed"}, {"oid": "c75e2884d67f59c3763cc465b8dfcf1ac30a3a46", "url": "https://github.com/apache/camel-quarkus/commit/c75e2884d67f59c3763cc465b8dfcf1ac30a3a46", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-15T06:56:51Z", "type": "forcePushed"}, {"oid": "819cbfb356daeca683fb7eee87719c1f261ee5b5", "url": "https://github.com/apache/camel-quarkus/commit/819cbfb356daeca683fb7eee87719c1f261ee5b5", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-15T07:16:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNzM1Ng==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440017356", "bodyText": "Yeah all converters are now non-reflective, so we should look at this in another ticket", "author": "davsclaus", "createdAt": "2020-06-15T08:38:47Z", "path": "extensions-core/core/deployment/src/main/java/org/apache/camel/quarkus/core/deployment/CamelNativeImageProcessor.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.core.deployment;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import io.quarkus.deployment.ApplicationArchive;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationArchivesBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveMethodBuildItem;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Component;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Converter;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Producer;\n+import org.apache.camel.TypeConverter;\n+import org.apache.camel.impl.engine.DefaultComponentResolver;\n+import org.apache.camel.impl.engine.DefaultDataFormatResolver;\n+import org.apache.camel.impl.engine.DefaultLanguageResolver;\n+import org.apache.camel.quarkus.core.CamelConfig;\n+import org.apache.camel.quarkus.core.CamelConfig.ReflectionConfig;\n+import org.apache.camel.quarkus.core.CamelConfig.ResourcesConfig;\n+import org.apache.camel.quarkus.core.CamelConfigFlags;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelRoutesBuilderClassBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelServiceBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelServicePatternBuildItem;\n+import org.apache.camel.quarkus.core.deployment.util.CamelSupport;\n+import org.apache.camel.quarkus.core.deployment.util.PathFilter;\n+import org.apache.camel.spi.DataFormat;\n+import org.apache.camel.spi.ExchangeFormatter;\n+import org.apache.camel.spi.PropertiesComponent;\n+import org.apache.camel.spi.ScheduledPollConsumerScheduler;\n+import org.apache.camel.spi.StreamCachingStrategy;\n+import org.apache.camel.support.CamelContextHelper;\n+import org.jboss.jandex.AnnotationTarget.Kind;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.commons.lang3.ClassUtils.getPackageName;\n+\n+public class CamelNativeImageProcessor {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CamelNativeImageProcessor.class);\n+\n+    private static final List<Class<?>> CAMEL_REFLECTIVE_CLASSES = Arrays.asList(\n+            Endpoint.class,\n+            Consumer.class,\n+            Producer.class,\n+            TypeConverter.class,\n+            ExchangeFormatter.class,\n+            ScheduledPollConsumerScheduler.class,\n+            Component.class,\n+            CamelContext.class,\n+            StreamCachingStrategy.class,\n+            StreamCachingStrategy.SpoolUsedHeapMemoryLimit.class,\n+            PropertiesComponent.class,\n+            DataFormat.class);\n+\n+    @BuildStep\n+    void reflectiveItems(\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<ReflectiveMethodBuildItem> reflectiveMethod) {\n+\n+        final IndexView view = combinedIndex.getIndex();\n+\n+        CAMEL_REFLECTIVE_CLASSES.stream()\n+                .map(Class::getName)\n+                .map(DotName::createSimple)\n+                .map(view::getAllKnownImplementors)\n+                .flatMap(Collection::stream)\n+                .filter(CamelSupport::isPublic)\n+                .forEach(v -> reflectiveClass.produce(new ReflectiveClassBuildItem(true, false, v.name().toString())));\n+\n+        DotName converter = DotName.createSimple(Converter.class.getName());\n+        List<ClassInfo> converterClasses = view.getAnnotations(converter)\n+                .stream()\n+                .filter(ai -> ai.target().kind() == Kind.CLASS)\n+                .filter(ai -> {\n+                    AnnotationValue av = ai.value(\"loader\");\n+                    boolean isLoader = av != null && av.asBoolean();\n+                    // filter out camel-base converters which are automatically inlined in the\n+                    // CoreStaticTypeConverterLoader\n+                    // need to revisit with Camel 3.0.0-M3 which should improve this area", "originalCommit": "819cbfb356daeca683fb7eee87719c1f261ee5b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NzY0Ng==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440077646", "bodyText": "I appreciate the comment!", "author": "ppalaga", "createdAt": "2020-06-15T10:23:15Z", "path": "extensions-core/core/deployment/src/main/java/org/apache/camel/quarkus/core/deployment/CamelContextProcessor.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.core.deployment;\n+\n+import java.util.List;\n+\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Overridable;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.ServiceStartBuildItem;\n+import io.quarkus.runtime.RuntimeValue;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.quarkus.core.CamelConfig;\n+import org.apache.camel.quarkus.core.CamelConfigFlags;\n+import org.apache.camel.quarkus.core.CamelContextRecorder;\n+import org.apache.camel.quarkus.core.CamelRuntime;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelContextBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelContextCustomizerBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelFactoryFinderResolverBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelModelJAXBContextFactoryBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelModelToXMLDumperBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelRegistryBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelRoutesBuilderClassBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelRoutesLoaderBuildItems;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelRuntimeBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelRuntimeTaskBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelTypeConverterRegistryBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.ContainerBeansBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.RuntimeCamelContextCustomizerBuildItem;\n+import org.apache.camel.quarkus.core.deployment.util.CamelSupport;\n+import org.apache.camel.spi.ModelJAXBContextFactory;\n+import org.apache.camel.spi.TypeConverterRegistry;\n+\n+public class CamelContextProcessor {\n+    /**\n+     * This build step is responsible to assemble a {@link CamelContext} instance.\n+     *\n+     * @param  beanContainer           a reference to a fully initialized CDI bean container\n+     * @param  recorder                the recorder.\n+     * @param  registry                a reference to a {@link org.apache.camel.spi.Registry}.\n+     * @param  typeConverterRegistry   a reference to a {@link TypeConverterRegistry}.\n+     * @param  modelJAXBContextFactory a list of known {@link ModelJAXBContextFactory}.\n+     * @param  xmlLoader               a list of known {@link org.apache.camel.spi.XMLRoutesDefinitionLoader}.\n+     * @param  modelDumper             a list of known {@link CamelModelToXMLDumperBuildItem}.\n+     * @param  factoryFinderResolver   a list of known {@link org.apache.camel.spi.FactoryFinderResolver}.\n+     * @param  customizers             a list of {@link org.apache.camel.quarkus.core.CamelContextCustomizer} used to\n+     *                                 customize the {@link CamelContext} at {@link ExecutionTime#STATIC_INIT}.\n+     * @return                         a build item holding an instance of a {@link CamelContext}\n+     */\n+    @Record(ExecutionTime.STATIC_INIT)\n+    @BuildStep\n+    CamelContextBuildItem context(\n+            BeanContainerBuildItem beanContainer,\n+            CamelContextRecorder recorder,\n+            CamelRegistryBuildItem registry,\n+            CamelTypeConverterRegistryBuildItem typeConverterRegistry,\n+            CamelModelJAXBContextFactoryBuildItem modelJAXBContextFactory,\n+            CamelRoutesLoaderBuildItems.Xml xmlLoader,\n+            CamelModelToXMLDumperBuildItem modelDumper,\n+            CamelFactoryFinderResolverBuildItem factoryFinderResolver,\n+            List<CamelContextCustomizerBuildItem> customizers,\n+            CamelConfig config) {\n+\n+        RuntimeValue<CamelContext> context = recorder.createContext(\n+                registry.getRegistry(),\n+                typeConverterRegistry.getRegistry(),\n+                modelJAXBContextFactory.getContextFactory(),\n+                xmlLoader.getLoader(),\n+                modelDumper.getValue(),\n+                factoryFinderResolver.getFactoryFinderResolver(),\n+                beanContainer.getValue(),\n+                CamelSupport.getCamelVersion(),\n+                config);\n+\n+        for (CamelContextCustomizerBuildItem customizer : customizers) {\n+            recorder.customize(context, customizer.get());\n+        }\n+\n+        return new CamelContextBuildItem(context);\n+    }\n+\n+    /**\n+     * This build steps assembles the default implementation of a {@link CamelRuntime} responsible to bootstrap\n+     * Camel.\n+     * <p>\n+     * This implementation provides the minimal features for a fully functional and ready to use {@link CamelRuntime} by\n+     * loading all the discoverable {@link org.apache.camel.RoutesBuilder} into the auto-configured {@link CamelContext}\n+     * but does not perform any advanced set-up such as:\n+     * <ul>\n+     * <li>auto-configure components/languages/data-formats through properties which is then under user responsibility\n+     * <li>take control of the application life-cycle\n+     * </ul>\n+     * <p>\n+     * For advanced auto-configuration capabilities add camel-quarkus-main to the list of dependencies.", "originalCommit": "819cbfb356daeca683fb7eee87719c1f261ee5b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4MzcxNg==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440083716", "bodyText": "A side note about a possible future refactoring: Producing a single ReflectiveClassBuildItem containing multiple class names seems to be more effective than producing multiple ReflectiveClassBuildItems containing single class name each. We have several sites like this.", "author": "ppalaga", "createdAt": "2020-06-15T10:35:06Z", "path": "extensions-core/core/deployment/src/main/java/org/apache/camel/quarkus/core/deployment/CamelNativeImageProcessor.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.core.deployment;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import io.quarkus.deployment.ApplicationArchive;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationArchivesBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveMethodBuildItem;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Component;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Converter;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Producer;\n+import org.apache.camel.TypeConverter;\n+import org.apache.camel.impl.engine.DefaultComponentResolver;\n+import org.apache.camel.impl.engine.DefaultDataFormatResolver;\n+import org.apache.camel.impl.engine.DefaultLanguageResolver;\n+import org.apache.camel.quarkus.core.CamelConfig;\n+import org.apache.camel.quarkus.core.CamelConfig.ReflectionConfig;\n+import org.apache.camel.quarkus.core.CamelConfig.ResourcesConfig;\n+import org.apache.camel.quarkus.core.CamelConfigFlags;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelRoutesBuilderClassBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelServiceBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelServicePatternBuildItem;\n+import org.apache.camel.quarkus.core.deployment.util.CamelSupport;\n+import org.apache.camel.quarkus.core.deployment.util.PathFilter;\n+import org.apache.camel.spi.DataFormat;\n+import org.apache.camel.spi.ExchangeFormatter;\n+import org.apache.camel.spi.PropertiesComponent;\n+import org.apache.camel.spi.ScheduledPollConsumerScheduler;\n+import org.apache.camel.spi.StreamCachingStrategy;\n+import org.apache.camel.support.CamelContextHelper;\n+import org.jboss.jandex.AnnotationTarget.Kind;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.commons.lang3.ClassUtils.getPackageName;\n+\n+public class CamelNativeImageProcessor {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CamelNativeImageProcessor.class);\n+\n+    private static final List<Class<?>> CAMEL_REFLECTIVE_CLASSES = Arrays.asList(\n+            Endpoint.class,\n+            Consumer.class,\n+            Producer.class,\n+            TypeConverter.class,\n+            ExchangeFormatter.class,\n+            ScheduledPollConsumerScheduler.class,\n+            Component.class,\n+            CamelContext.class,\n+            StreamCachingStrategy.class,\n+            StreamCachingStrategy.SpoolUsedHeapMemoryLimit.class,\n+            PropertiesComponent.class,\n+            DataFormat.class);\n+\n+    @BuildStep\n+    void reflectiveItems(\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<ReflectiveMethodBuildItem> reflectiveMethod) {\n+\n+        final IndexView view = combinedIndex.getIndex();\n+\n+        CAMEL_REFLECTIVE_CLASSES.stream()\n+                .map(Class::getName)\n+                .map(DotName::createSimple)\n+                .map(view::getAllKnownImplementors)\n+                .flatMap(Collection::stream)\n+                .filter(CamelSupport::isPublic)\n+                .forEach(v -> reflectiveClass.produce(new ReflectiveClassBuildItem(true, false, v.name().toString())));", "originalCommit": "819cbfb356daeca683fb7eee87719c1f261ee5b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNjM3Mw==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440306373", "bodyText": "let postpone this", "author": "lburgazzoli", "createdAt": "2020-06-15T16:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4MzcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzIzNg==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440107236", "bodyText": "Please next time put this kind of refactorings in a separate commit.", "author": "ppalaga", "createdAt": "2020-06-15T11:23:38Z", "path": "extensions-core/core/deployment/src/main/java/org/apache/camel/quarkus/core/deployment/spi/CamelRuntimeBuildItem.java", "diffHunk": "@@ -18,19 +18,16 @@\n \n import io.quarkus.builder.item.SimpleBuildItem;\n import io.quarkus.runtime.RuntimeValue;\n-import org.apache.camel.spi.ReactiveExecutor;\n+import org.apache.camel.quarkus.core.CamelRuntime;\n \n-/**\n- * Holds the {@link ReactiveExecutor} {@link RuntimeValue}.\n- */\n-public final class CamelReactiveExecutorBuildItem extends SimpleBuildItem {\n-    private final RuntimeValue<ReactiveExecutor> instance;\n+public final class CamelRuntimeBuildItem extends SimpleBuildItem {\n+    private final RuntimeValue<CamelRuntime> runtime;\n \n-    public CamelReactiveExecutorBuildItem(RuntimeValue<ReactiveExecutor> instance) {\n-        this.instance = instance;\n+    public CamelRuntimeBuildItem(RuntimeValue<CamelRuntime> runtime) {\n+        this.runtime = runtime;\n     }\n \n-    public RuntimeValue<ReactiveExecutor> getInstance() {\n-        return instance;\n+    public RuntimeValue<CamelRuntime> get() {\n+        return runtime;", "originalCommit": "819cbfb356daeca683fb7eee87719c1f261ee5b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1MTYxMQ==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440151611", "bodyText": "I guess git got confused as I did remove the ReactiveExecutorBuildItem build item and I have introduced CamelRuntimeBuildItem", "author": "lburgazzoli", "createdAt": "2020-06-15T12:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMTg1Mg==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440611852", "bodyText": "Sorry then", "author": "ppalaga", "createdAt": "2020-06-16T06:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwODQxOQ==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440108419", "bodyText": "I wonder what symbolic means here?\nI never heart of runtime tasks in the context of Camel Quarkus. Could you please add a sentence or example to get an idea what it is?", "author": "ppalaga", "createdAt": "2020-06-15T11:26:18Z", "path": "extensions-core/core/deployment/src/main/java/org/apache/camel/quarkus/core/deployment/spi/CamelRuntimeTaskBuildItem.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.core.deployment.spi;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+/**\n+ * A symbolic class that represents a runtime task.", "originalCommit": "819cbfb356daeca683fb7eee87719c1f261ee5b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNjA3NA==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440306074", "bodyText": "done", "author": "lburgazzoli", "createdAt": "2020-06-15T16:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwODQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNTAyMw==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440115023", "bodyText": "Explaining in more detail what it does or add a link to a resource that explains it would be nice.", "author": "ppalaga", "createdAt": "2020-06-15T11:40:08Z", "path": "extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/CamelConfig.java", "diffHunk": "@@ -44,29 +44,25 @@\n     @ConfigItem\n     public RuntimeCatalogConfig runtimeCatalog;\n \n+    /**\n+     * Build time configuration options for routes discovery.\n+     */\n+    @ConfigItem\n+    public RoutesDiscoveryConfig routesDiscovery;\n+\n     /**\n      * Build time configuration options related to the building of native executable.\n      */\n     @ConfigItem(name = \"native\")\n     public NativeConfig native_;\n \n     @ConfigGroup\n-    public static class MainConfig {\n+    public static class BootstrapConfig {\n         /**\n-         * Enable {@code camel-main}. If {@code true}, routes are automatically\n-         * loaded and started and the entire lifecycle of the Camel Context is\n-         * under the control of the {@code camel-main} component. Otherwise, the\n-         * application developer is responsible for performing all the mentioned\n-         * tasks.\n+         * Enable bootstrapping the {@link CamelRuntime}.", "originalCommit": "819cbfb356daeca683fb7eee87719c1f261ee5b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzODMwMA==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440138300", "bodyText": "Why do we need the empty trailing string here?", "author": "ppalaga", "createdAt": "2020-06-15T12:25:31Z", "path": "extensions-core/main/runtime/src/main/java/org/apache/camel/quarkus/main/CamelMainRoutesCollector.java", "diffHunk": "@@ -66,7 +67,7 @@ public XMLRoutesDefinitionLoader getXmlRoutesLoader() {\n         List<RoutesDefinition> answer = new ArrayList<>();\n         PackageScanResourceResolver resolver = camelContext.adapt(ExtendedCamelContext.class).getPackageScanResourceResolver();\n \n-        for (String part : directory.split(\",\")) {\n+        for (String part : directory.split(\",\", -1)) {", "originalCommit": "819cbfb356daeca683fb7eee87719c1f261ee5b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIwNjAyOQ==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440206029", "bodyText": "thx to spot this, I don't really know what's the reason of such change", "author": "lburgazzoli", "createdAt": "2020-06-15T14:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzODMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNjEzNw==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440306137", "bodyText": "done", "author": "lburgazzoli", "createdAt": "2020-06-15T16:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzODMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzODM0OQ==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r440138349", "bodyText": "Why do we need the empty trailing string here?", "author": "ppalaga", "createdAt": "2020-06-15T12:25:36Z", "path": "extensions-core/main/runtime/src/main/java/org/apache/camel/quarkus/main/CamelMainRoutesCollector.java", "diffHunk": "@@ -90,7 +91,7 @@ public XMLRoutesDefinitionLoader getXmlRoutesLoader() {\n         List<RestsDefinition> answer = new ArrayList<>();\n         PackageScanResourceResolver resolver = camelContext.adapt(ExtendedCamelContext.class).getPackageScanResourceResolver();\n \n-        for (String part : directory.split(\",\")) {\n+        for (String part : directory.split(\",\", -1)) {", "originalCommit": "819cbfb356daeca683fb7eee87719c1f261ee5b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "511e476729b9abce17bac3ad7a0060d3fed7c55a", "url": "https://github.com/apache/camel-quarkus/commit/511e476729b9abce17bac3ad7a0060d3fed7c55a", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-15T16:38:55Z", "type": "forcePushed"}, {"oid": "724886ed175db09dfe562b864e610908806833ce", "url": "https://github.com/apache/camel-quarkus/commit/724886ed175db09dfe562b864e610908806833ce", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-15T16:48:54Z", "type": "forcePushed"}, {"oid": "a2ee625faf208389bf696d2a1fc5534e19111ba7", "url": "https://github.com/apache/camel-quarkus/commit/a2ee625faf208389bf696d2a1fc5534e19111ba7", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-15T20:38:36Z", "type": "forcePushed"}, {"oid": "c77fcc9fab3e1f49ffb2ea4f13b0810bb5da15af", "url": "https://github.com/apache/camel-quarkus/commit/c77fcc9fab3e1f49ffb2ea4f13b0810bb5da15af", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-15T20:52:50Z", "type": "forcePushed"}, {"oid": "4660ec62433535e8453bb0d36ecf40e3fc7b035c", "url": "https://github.com/apache/camel-quarkus/commit/4660ec62433535e8453bb0d36ecf40e3fc7b035c", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-16T08:07:53Z", "type": "forcePushed"}, {"oid": "171e6831ed62b961091db96c1561593cb61992d1", "url": "https://github.com/apache/camel-quarkus/commit/171e6831ed62b961091db96c1561593cb61992d1", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-17T16:57:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0OTM4NQ==", "url": "https://github.com/apache/camel-quarkus/pull/1344#discussion_r441749385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // the configuration of the log component is programmatically done using CDI\n          \n          \n            \n                            // the configuration of the log component is done programmatically using CDI", "author": "ppalaga", "createdAt": "2020-06-17T18:36:46Z", "path": "examples/timer-log-cdi/src/main/java/org/acme/timer/TimerRoute.java", "diffHunk": "@@ -31,18 +31,24 @@\n @ApplicationScoped\n public class TimerRoute extends RouteBuilder {\n \n-    /** {@code timer.period} is defined in {@code src/main/resources/application.properties} */\n+    /**\n+     * {@code timer.period} is defined in {@code src/main/resources/application.properties}\n+     */\n     @ConfigProperty(name = \"timer.period\", defaultValue = \"1000\")\n     String period;\n \n-    /** An injected bean */\n+    /**\n+     * An injected bean\n+     */\n     @Inject\n     Counter counter;\n \n     @Override\n     public void configure() throws Exception {\n         fromF(\"timer:foo?period=%s\", period)\n                 .setBody(exchange -> \"Incremented the counter: \" + counter.increment())\n-                .to(\"log:example?showExchangePattern=false&showBodyType=false\");\n+                // the configuration of the log component is programmatically done using CDI", "originalCommit": "5ffa86e60bb3f5f7580999f5d6b2d2c4fd8cbbc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c7e665396ef39b43c8a03128c30ce7a90a09c131", "url": "https://github.com/apache/camel-quarkus/commit/c7e665396ef39b43c8a03128c30ce7a90a09c131", "message": "Support Quarkus command mode #1037", "committedDate": "2020-06-18T22:46:26Z", "type": "forcePushed"}, {"oid": "9dd5f3f4ce6b582ef528f1dd238788b1ad5e098a", "url": "https://github.com/apache/camel-quarkus/commit/9dd5f3f4ce6b582ef528f1dd238788b1ad5e098a", "message": "Support Quarkus command mode #1037", "committedDate": "2020-06-19T12:10:48Z", "type": "forcePushed"}, {"oid": "78dc9d0d8b35540abf904ca69de10b0d9caa7f98", "url": "https://github.com/apache/camel-quarkus/commit/78dc9d0d8b35540abf904ca69de10b0d9caa7f98", "message": "Support Quarkus command mode #1037", "committedDate": "2020-06-19T12:31:41Z", "type": "forcePushed"}, {"oid": "a5f5f828d9676887e9152eb2a5f2ff38575e44e8", "url": "https://github.com/apache/camel-quarkus/commit/a5f5f828d9676887e9152eb2a5f2ff38575e44e8", "message": "Support Quarkus command mode #1037", "committedDate": "2020-06-19T12:38:18Z", "type": "forcePushed"}, {"oid": "725de9b5ea2b303169bff877c4229f79a279c489", "url": "https://github.com/apache/camel-quarkus/commit/725de9b5ea2b303169bff877c4229f79a279c489", "message": "Revisit camel-quarkus bootstrap #1128 (docs)\n\nCo-authored-by: Peter Palaga <ppalaga@redhat.com>", "committedDate": "2020-06-19T12:57:44Z", "type": "forcePushed"}, {"oid": "7d1196f4b8b0869a3f3b7bac7d4f9c8775029acc", "url": "https://github.com/apache/camel-quarkus/commit/7d1196f4b8b0869a3f3b7bac7d4f9c8775029acc", "message": "Regen", "committedDate": "2020-06-19T13:12:05Z", "type": "forcePushed"}, {"oid": "6ba740a42ae92a16de36c8f441fc2d6e76f1f6e1", "url": "https://github.com/apache/camel-quarkus/commit/6ba740a42ae92a16de36c8f441fc2d6e76f1f6e1", "message": "Regen", "committedDate": "2020-06-19T13:36:42Z", "type": "forcePushed"}, {"oid": "800d578d51a808c8f61f440f2ba884c0b459ebf1", "url": "https://github.com/apache/camel-quarkus/commit/800d578d51a808c8f61f440f2ba884c0b459ebf1", "message": "Regen", "committedDate": "2020-06-19T14:20:09Z", "type": "forcePushed"}, {"oid": "a94129f0f546fbce3629e860a430629981caf7b9", "url": "https://github.com/apache/camel-quarkus/commit/a94129f0f546fbce3629e860a430629981caf7b9", "message": "Regen", "committedDate": "2020-06-19T15:46:16Z", "type": "forcePushed"}, {"oid": "5ea3279d196a9c76dc42db00fe32b1cce42fd8bd", "url": "https://github.com/apache/camel-quarkus/commit/5ea3279d196a9c76dc42db00fe32b1cce42fd8bd", "message": "Re-apply commit 9f425b3d14e1831f06cbe246110de670fef9cd3b", "committedDate": "2020-06-20T15:32:27Z", "type": "commit"}, {"oid": "9f5e58b1638b74b842e9d81f6c013a4ff5e221d8", "url": "https://github.com/apache/camel-quarkus/commit/9f5e58b1638b74b842e9d81f6c013a4ff5e221d8", "message": "Re apply commit 98abf252d399c70967ffea37295431fb37ca26c7", "committedDate": "2020-06-20T15:32:30Z", "type": "commit"}, {"oid": "a56a55a3e827a5327f0fe13947494e4f55f1b49a", "url": "https://github.com/apache/camel-quarkus/commit/a56a55a3e827a5327f0fe13947494e4f55f1b49a", "message": "Revisit camel-quarkus bootstrap #1128", "committedDate": "2020-06-20T15:32:30Z", "type": "commit"}, {"oid": "502059f0b25399c7df17e6675bf4ac2b0ab2d550", "url": "https://github.com/apache/camel-quarkus/commit/502059f0b25399c7df17e6675bf4ac2b0ab2d550", "message": "Regen", "committedDate": "2020-06-20T15:32:30Z", "type": "commit"}, {"oid": "aa9206bba17210cb9a6134244dd1a632f26af254", "url": "https://github.com/apache/camel-quarkus/commit/aa9206bba17210cb9a6134244dd1a632f26af254", "message": "Manually re-apply commit 9d990df64ceb946e7eed6006dd01fff09e0eceef", "committedDate": "2020-06-20T15:32:31Z", "type": "commit"}, {"oid": "d00c2686b91550f496f4119d712f8e52d827a0ff", "url": "https://github.com/apache/camel-quarkus/commit/d00c2686b91550f496f4119d712f8e52d827a0ff", "message": "Support Quarkus command mode #1037", "committedDate": "2020-06-20T15:32:31Z", "type": "commit"}, {"oid": "fe156967bd9153b4a0018afbc7a704fc3bae74e4", "url": "https://github.com/apache/camel-quarkus/commit/fe156967bd9153b4a0018afbc7a704fc3bae74e4", "message": "Revisit camel-quarkus bootstrap #1128 (docs)\n\nCo-authored-by: Peter Palaga <ppalaga@redhat.com>", "committedDate": "2020-06-20T15:32:31Z", "type": "commit"}, {"oid": "68e5e31456eefd10fbb7bb9ea389abce2c6c838e", "url": "https://github.com/apache/camel-quarkus/commit/68e5e31456eefd10fbb7bb9ea389abce2c6c838e", "message": "Regen", "committedDate": "2020-06-20T15:32:31Z", "type": "commit"}, {"oid": "1dd76a6fac3b9a100512b871d306875a6b87379e", "url": "https://github.com/apache/camel-quarkus/commit/1dd76a6fac3b9a100512b871d306875a6b87379e", "message": "Fix NPE", "committedDate": "2020-06-20T15:32:31Z", "type": "commit"}, {"oid": "82269690255e52af06b88dc48202479658542464", "url": "https://github.com/apache/camel-quarkus/commit/82269690255e52af06b88dc48202479658542464", "message": "Add a test to validate fix for #1368", "committedDate": "2020-06-20T16:05:31Z", "type": "commit"}, {"oid": "7544287f9580b313668b201133cf10204fe43d3f", "url": "https://github.com/apache/camel-quarkus/commit/7544287f9580b313668b201133cf10204fe43d3f", "message": "Regen", "committedDate": "2020-06-20T16:06:01Z", "type": "commit"}, {"oid": "7544287f9580b313668b201133cf10204fe43d3f", "url": "https://github.com/apache/camel-quarkus/commit/7544287f9580b313668b201133cf10204fe43d3f", "message": "Regen", "committedDate": "2020-06-20T16:06:01Z", "type": "forcePushed"}]}