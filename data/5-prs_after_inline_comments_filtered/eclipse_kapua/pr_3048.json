{"pr_number": 3048, "pr_title": "Added well-known OpenId auto configuration to the SSO generic-provider", "pr_createdAt": "2020-08-04T15:18:52Z", "pr_url": "https://github.com/eclipse/kapua/pull/3048", "timeline": [{"oid": "abbbd19d4df7686f5f6c0817b7f48f5dea96c6e9", "url": "https://github.com/eclipse/kapua/commit/abbbd19d4df7686f5f6c0817b7f48f5dea96c6e9", "message": "Simplifying well-known conf path generation\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-08-20T08:15:18Z", "type": "forcePushed"}, {"oid": "cad987a19a17d6fade14c9acc4b073d095fc3056", "url": "https://github.com/eclipse/kapua/commit/cad987a19a17d6fade14c9acc4b073d095fc3056", "message": "Improved documentation concerning clientId and audience\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-08-20T09:01:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMTc4OA==", "url": "https://github.com/eclipse/kapua/pull/3048#discussion_r476421788", "bodyText": "hey @gbarbon, if this file is new, header should contain only year \"2020\" and not 2019.", "author": "LeoNerdoG", "createdAt": "2020-08-25T12:49:50Z", "path": "sso/provider/src/main/java/org/eclipse/kapua/sso/provider/SingleSignOnUtils.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Eurotech and/or its affiliates and others", "originalCommit": "cad987a19a17d6fade14c9acc4b073d095fc3056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NDcxOA==", "url": "https://github.com/eclipse/kapua/pull/3048#discussion_r476484718", "bodyText": "Yep, that's true! I think this happened because I renamed the old JsonUtils.java class to SingleSignOnUtils. Anyway, now it's fixed.", "author": "gbarbon", "createdAt": "2020-08-25T14:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMTc4OA=="}], "type": "inlineReview"}, {"oid": "de123112726a3fb410d03527ff2d3de0928dec51", "url": "https://github.com/eclipse/kapua/commit/de123112726a3fb410d03527ff2d3de0928dec51", "message": "Improved documentation concerning clientId and audience\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-08-25T14:13:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1NjMwMQ==", "url": "https://github.com/eclipse/kapua/pull/3048#discussion_r479056301", "bodyText": "Please make use of Strings.isNullOrEmpty", "author": "Coduz", "createdAt": "2020-08-28T09:58:40Z", "path": "sso/provider-generic/src/main/java/org/eclipse/kapua/sso/provider/generic/GenericSingleSignOnService.java", "diffHunk": "@@ -34,29 +45,70 @@ public GenericSingleSignOnService(final SsoSetting ssoSettings, final GenericSso\n     }\n \n     @Override\n-    protected String getAuthUri() throws SsoIllegalUriException {\n-        String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n-        if (authUri == null || authUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH.key(), authUri);\n+    protected String getAuthUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(AUTH_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(AUTH_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n+            if (authUri == null || authUri.isEmpty()) {", "originalCommit": "de123112726a3fb410d03527ff2d3de0928dec51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1NjQxMA==", "url": "https://github.com/eclipse/kapua/pull/3048#discussion_r479056410", "bodyText": "Please make use of Strings.isNullOrEmpty", "author": "Coduz", "createdAt": "2020-08-28T09:58:45Z", "path": "sso/provider-generic/src/main/java/org/eclipse/kapua/sso/provider/generic/GenericSingleSignOnService.java", "diffHunk": "@@ -34,29 +45,70 @@ public GenericSingleSignOnService(final SsoSetting ssoSettings, final GenericSso\n     }\n \n     @Override\n-    protected String getAuthUri() throws SsoIllegalUriException {\n-        String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n-        if (authUri == null || authUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH.key(), authUri);\n+    protected String getAuthUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(AUTH_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(AUTH_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n+            if (authUri == null || authUri.isEmpty()) {\n+                throw se;\n+            }\n+            return authUri;\n         }\n-        return authUri;\n     }\n \n     @Override\n-    protected String getTokenUri() throws SsoIllegalUriException {\n-        String tokenUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN);\n-        if (tokenUri == null || tokenUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN.key(), tokenUri);\n+    protected String getTokenUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(TOKEN_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(TOKEN_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String tokenUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN);\n+            if (tokenUri == null || tokenUri.isEmpty()) {", "originalCommit": "de123112726a3fb410d03527ff2d3de0928dec51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1NjYxNA==", "url": "https://github.com/eclipse/kapua/pull/3048#discussion_r479056614", "bodyText": "Please make use of Strings.isNullOrEmpty", "author": "Coduz", "createdAt": "2020-08-28T09:58:55Z", "path": "sso/provider-generic/src/main/java/org/eclipse/kapua/sso/provider/generic/GenericSingleSignOnService.java", "diffHunk": "@@ -34,29 +45,70 @@ public GenericSingleSignOnService(final SsoSetting ssoSettings, final GenericSso\n     }\n \n     @Override\n-    protected String getAuthUri() throws SsoIllegalUriException {\n-        String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n-        if (authUri == null || authUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH.key(), authUri);\n+    protected String getAuthUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(AUTH_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(AUTH_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n+            if (authUri == null || authUri.isEmpty()) {\n+                throw se;\n+            }\n+            return authUri;\n         }\n-        return authUri;\n     }\n \n     @Override\n-    protected String getTokenUri() throws SsoIllegalUriException {\n-        String tokenUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN);\n-        if (tokenUri == null || tokenUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN.key(), tokenUri);\n+    protected String getTokenUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(TOKEN_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(TOKEN_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String tokenUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN);\n+            if (tokenUri == null || tokenUri.isEmpty()) {\n+                throw se;\n+            }\n+            return tokenUri;\n         }\n-        return tokenUri;\n     }\n \n     @Override\n-    protected String getLogoutUri() throws SsoIllegalUriException {\n-        String logoutUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_LOGOUT);\n-        if (logoutUri == null || logoutUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_LOGOUT.key(), logoutUri);\n+    protected String getLogoutUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(LOGOUT_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(LOGOUT_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String logoutUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_LOGOUT);\n+            if (logoutUri == null || logoutUri.isEmpty()) {", "originalCommit": "de123112726a3fb410d03527ff2d3de0928dec51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1NjczMQ==", "url": "https://github.com/eclipse/kapua/pull/3048#discussion_r479056731", "bodyText": "Please make use of Strings.isNullOrEmpty", "author": "Coduz", "createdAt": "2020-08-28T09:59:01Z", "path": "sso/provider-generic/src/main/java/org/eclipse/kapua/sso/provider/generic/GenericSingleSignOnService.java", "diffHunk": "@@ -34,29 +45,70 @@ public GenericSingleSignOnService(final SsoSetting ssoSettings, final GenericSso\n     }\n \n     @Override\n-    protected String getAuthUri() throws SsoIllegalUriException {\n-        String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n-        if (authUri == null || authUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH.key(), authUri);\n+    protected String getAuthUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(AUTH_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(AUTH_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n+            if (authUri == null || authUri.isEmpty()) {\n+                throw se;\n+            }\n+            return authUri;\n         }\n-        return authUri;\n     }\n \n     @Override\n-    protected String getTokenUri() throws SsoIllegalUriException {\n-        String tokenUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN);\n-        if (tokenUri == null || tokenUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN.key(), tokenUri);\n+    protected String getTokenUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(TOKEN_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(TOKEN_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String tokenUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN);\n+            if (tokenUri == null || tokenUri.isEmpty()) {\n+                throw se;\n+            }\n+            return tokenUri;\n         }\n-        return tokenUri;\n     }\n \n     @Override\n-    protected String getLogoutUri() throws SsoIllegalUriException {\n-        String logoutUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_LOGOUT);\n-        if (logoutUri == null || logoutUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_LOGOUT.key(), logoutUri);\n+    protected String getLogoutUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(LOGOUT_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(LOGOUT_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String logoutUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_LOGOUT);\n+            if (logoutUri == null || logoutUri.isEmpty()) {\n+                throw se;\n+            }\n+            return logoutUri;\n+        }\n+    }\n+\n+    /**\n+     * Get the OpenID configuration path.\n+     *\n+     * @throws SsoIllegalArgumentException if it cannot retrieve the OpenID configuration path\n+     * @return a String representing the OpenID configuration URL.\n+     */\n+    private String getOpenIdConfPath() throws SsoIllegalArgumentException {\n+        String issuerUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_JWT_ISSUER_ALLOWED);\n+        if (issuerUri == null || issuerUri.isEmpty()) {", "originalCommit": "de123112726a3fb410d03527ff2d3de0928dec51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1NzE3OQ==", "url": "https://github.com/eclipse/kapua/pull/3048#discussion_r479057179", "bodyText": "Please make use of Strings.isNullOrEmpty", "author": "Coduz", "createdAt": "2020-08-28T09:59:21Z", "path": "sso/provider/src/main/java/org/eclipse/kapua/sso/provider/SingleSignOnUtils.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.sso.provider;\n+\n+import org.eclipse.kapua.sso.exception.SsoIllegalArgumentException;\n+import org.eclipse.kapua.sso.exception.uri.SsoIllegalUriException;\n+import org.eclipse.kapua.sso.exception.uri.SsoJwtUriException;\n+import org.eclipse.kapua.sso.exception.uri.SsoUriException;\n+import org.eclipse.kapua.sso.provider.setting.SsoSetting;\n+import org.eclipse.kapua.sso.provider.setting.SsoSettingKeys;\n+\n+import javax.json.Json;\n+import javax.json.JsonObject;\n+import javax.json.JsonString;\n+import javax.json.JsonValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+/**\n+ * Single Sign On utility class.\n+ */\n+public final class SingleSignOnUtils {\n+\n+    private static final String DEFAULT_SSO_OPENID_CONF_PATH = \".well-known/openid-configuration\";\n+\n+    private SingleSignOnUtils() {\n+    }\n+\n+    /**\n+     * Attempts to retrieve a URI from the Well-Known OpenId Configuration using the given proeprty.\n+     *\n+     * @param property the property to get from the JSON response.\n+     * @param openIdConfPath the OpendID Connect configuration path.\n+     * @return an Optional with a {@link URI} corresponding to the given property if everything is fine, otherwise\n+     * an empty Optional.\n+     * @throws SsoUriException if an {@link IOException} is caught.\n+     */\n+    public static Optional<URI> getConfigUri(String property, String openIdConfPath) throws SsoUriException {\n+        final JsonObject jsonObject;\n+\n+        // Read .well-known resource\n+        try (final InputStream stream = new URL(openIdConfPath).openStream()) {\n+            // Parse json response\n+            jsonObject = Json.createReader(stream).readObject();\n+        } catch (IOException ioe) {\n+            throw new SsoJwtUriException(ioe);\n+        }\n+\n+        // Get property\n+        final JsonValue uriJsonValue = jsonObject.get(property);\n+\n+        // test result\n+        try {\n+            if (uriJsonValue instanceof JsonString) {\n+                return Optional.of(new URI(((JsonString) uriJsonValue).getString()));\n+            }\n+        } catch (URISyntaxException urise) {\n+            throw new IllegalAccessError(\"Unable to retrieve Config Uri\");\n+        }\n+\n+        // return\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Retrieve the OpenID Connect discovery endpoint (the provider's Well-Known Configuration Endpoint).\n+     *\n+     * @param issuer the URI representing the JWT Issuer.\n+     * @return a String representing the discovery endpoint.\n+     * @throws SsoIllegalArgumentException if it cannot retrieve the OpenID configuration path or if the generated OpenID Connect discovery endpoint is a\n+     * malformed URL\n+     */\n+    public static String getOpenIdConfPath(final URI issuer) throws SsoIllegalArgumentException {\n+        return getOpenIdConfPath(issuer.toString());\n+    }\n+\n+    /**\n+     * Retrieve the OpenID Connect discovery endpoint (the provider's Well-Known Configuration Endpoint).\n+     *\n+     * @param issuer the String representing the JWT Issuer URI.\n+     * @return a String representing the discovery endpoint.\n+     * @throws SsoIllegalArgumentException if it cannot retrieve the OpenID configuration path or if the generated OpenID Connect discovery endpoint is a\n+     * malformed URL\n+     */\n+    public static String getOpenIdConfPath(String issuer) throws SsoIllegalArgumentException {\n+        String openIDConfPathSuffix = SsoSetting.getInstance().getString(SsoSettingKeys.SSO_OPENID_CONF_PATH, DEFAULT_SSO_OPENID_CONF_PATH);\n+        if (openIDConfPathSuffix == null || openIDConfPathSuffix.isEmpty()) {", "originalCommit": "de123112726a3fb410d03527ff2d3de0928dec51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA2MzM5OA==", "url": "https://github.com/eclipse/kapua/pull/3048#discussion_r479063398", "bodyText": "Please leverage the Optional capabilities.\ni.e.\nOptional<Object> optional = Optional.ofNullable({somevalue});\nObject object = optional.orElseThrow(Exception::new);", "author": "Coduz", "createdAt": "2020-08-28T10:04:28Z", "path": "sso/provider-generic/src/main/java/org/eclipse/kapua/sso/provider/generic/GenericSingleSignOnService.java", "diffHunk": "@@ -34,29 +45,70 @@ public GenericSingleSignOnService(final SsoSetting ssoSettings, final GenericSso\n     }\n \n     @Override\n-    protected String getAuthUri() throws SsoIllegalUriException {\n-        String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n-        if (authUri == null || authUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH.key(), authUri);\n+    protected String getAuthUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(AUTH_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(AUTH_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n+            if (authUri == null || authUri.isEmpty()) {\n+                throw se;\n+            }\n+            return authUri;\n         }\n-        return authUri;\n     }\n \n     @Override\n-    protected String getTokenUri() throws SsoIllegalUriException {\n-        String tokenUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN);\n-        if (tokenUri == null || tokenUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN.key(), tokenUri);\n+    protected String getTokenUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(TOKEN_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {\n+                return uri.get().toString();\n+            } else {\n+                throw new SsoIllegalUriException(TOKEN_WELL_KNOWN_KEY, null);\n+            }\n+        } catch (SsoException se) {\n+            String tokenUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_TOKEN);\n+            if (tokenUri == null || tokenUri.isEmpty()) {\n+                throw se;\n+            }\n+            return tokenUri;\n         }\n-        return tokenUri;\n     }\n \n     @Override\n-    protected String getLogoutUri() throws SsoIllegalUriException {\n-        String logoutUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_LOGOUT);\n-        if (logoutUri == null || logoutUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_LOGOUT.key(), logoutUri);\n+    protected String getLogoutUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(LOGOUT_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {", "originalCommit": "de123112726a3fb410d03527ff2d3de0928dec51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA2NTU3MQ==", "url": "https://github.com/eclipse/kapua/pull/3048#discussion_r479065571", "bodyText": "Please leverage the Optional capabilities.\ni.e.\nOptional<Object> optional = Optional.ofNullable({somevalue});\nObject object = optional.orElseThrow(Exception::new);", "author": "Coduz", "createdAt": "2020-08-28T10:06:11Z", "path": "sso/provider-generic/src/main/java/org/eclipse/kapua/sso/provider/generic/GenericSingleSignOnService.java", "diffHunk": "@@ -34,29 +45,70 @@ public GenericSingleSignOnService(final SsoSetting ssoSettings, final GenericSso\n     }\n \n     @Override\n-    protected String getAuthUri() throws SsoIllegalUriException {\n-        String authUri = genericSettings.getString(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH);\n-        if (authUri == null || authUri.isEmpty()) {\n-            throw new SsoIllegalUriException(GenericSsoSettingKeys.SSO_OPENID_SERVER_ENDPOINT_AUTH.key(), authUri);\n+    protected String getAuthUri() throws SsoException {\n+        try {\n+            final Optional<URI> uri = SingleSignOnUtils.getConfigUri(AUTH_WELL_KNOWN_KEY, getOpenIdConfPath());\n+            if (uri.isPresent()) {", "originalCommit": "de123112726a3fb410d03527ff2d3de0928dec51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d6118895a944ac3ec244b9eab1191492fca8c4ed", "url": "https://github.com/eclipse/kapua/commit/d6118895a944ac3ec244b9eab1191492fca8c4ed", "message": "Use the well-known configuration document to configure the SSO OpenID providers\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-08-28T13:00:42Z", "type": "commit"}, {"oid": "efd660b6d01dd830fd031727a76a452b71be0301", "url": "https://github.com/eclipse/kapua/commit/efd660b6d01dd830fd031727a76a452b71be0301", "message": "Simplifying well-known conf path generation\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-08-28T13:02:23Z", "type": "commit"}, {"oid": "3d18295ffaaa8349722128241869143407688248", "url": "https://github.com/eclipse/kapua/commit/3d18295ffaaa8349722128241869143407688248", "message": "Improved documentation concerning clientId and audience\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-08-28T13:02:37Z", "type": "commit"}, {"oid": "90a653477fc6622d49cc41e7b52d68ddc8f0fd29", "url": "https://github.com/eclipse/kapua/commit/90a653477fc6622d49cc41e7b52d68ddc8f0fd29", "message": "Using Optional class capabilities, Strings.isNullOrEmpty and CollectionUtils.isEmpty\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-08-28T14:51:53Z", "type": "commit"}, {"oid": "90a653477fc6622d49cc41e7b52d68ddc8f0fd29", "url": "https://github.com/eclipse/kapua/commit/90a653477fc6622d49cc41e7b52d68ddc8f0fd29", "message": "Using Optional class capabilities, Strings.isNullOrEmpty and CollectionUtils.isEmpty\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-08-28T14:51:53Z", "type": "forcePushed"}]}