{"pr_number": 3011, "pr_title": "Cache manager review the cache instantiation process", "pr_createdAt": "2020-07-03T14:21:57Z", "pr_url": "https://github.com/eclipse/kapua/pull/3011", "timeline": [{"oid": "61947400182ab332e7405fed3dcac69c97bbed17", "url": "https://github.com/eclipse/kapua/commit/61947400182ab332e7405fed3dcac69c97bbed17", "message": "Cache initilization fix (Using the same CacheManager for all the instantiated caches)\n\nSigned-off-by: riccardomodanese <riccardo.modanese@eurotech.com>", "committedDate": "2020-07-03T13:02:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxNjc1Mw==", "url": "https://github.com/eclipse/kapua/pull/3011#discussion_r449616753", "bodyText": "I don't think registeredCache.dec() is enough, it should be set to zero, am I wrong ?", "author": "stefanomorson", "createdAt": "2020-07-03T14:43:02Z", "path": "commons/src/main/java/org/eclipse/kapua/commons/service/internal/cache/KapuaCacheManager.java", "diffHunk": "@@ -97,39 +119,74 @@ private static URI getCacheConfig() {\n             synchronized (CACHE_MAP) {\n                 cache = CACHE_MAP.get(cacheName);\n                 if (cache == null) {\n-                    Factory expiryPolicyFactory;\n-                    if (ExpiryPolicy.TOUCHED.name().equals(EXPIRY_POLICY)) {\n-                        expiryPolicyFactory = TouchedExpiryPolicy.factoryOf(new Duration(TimeUnit.SECONDS, TTL));\n-                    } else {\n-                        expiryPolicyFactory = ModifiedExpiryPolicy.factoryOf(new Duration(TimeUnit.SECONDS, TTL));\n-                    }\n-                    MutableConfiguration<Serializable, Serializable> config = new MutableConfiguration<>();\n-                    config.setExpiryPolicyFactory(expiryPolicyFactory);\n-                    CachingProvider cachingProvider;\n-                    if (CACHING_PROVIDER_CLASS_NAME != null && CACHING_PROVIDER_CLASS_NAME.trim().length() > 0) {\n-                        cachingProvider = Caching.getCachingProvider(CACHING_PROVIDER_CLASS_NAME);\n-                    } else {\n-                        try {\n-                            cachingProvider = Caching.getCachingProvider();\n-                        } catch (CacheException e) {\n-                            LOGGER.warn(\"Error while loading the CachingProvider... Loading the default one ({}).\", DEFAULT_CACHING_PROVIDER_CLASS_NAME);\n-                            cachingProvider = Caching.getCachingProvider(DEFAULT_CACHING_PROVIDER_CLASS_NAME);\n-                        }\n-                    }\n-                    cache = cachingProvider.getCacheManager(CACHE_CONFIG_URI, null).createCache(cacheName, config);\n+                    checkCacheManager();\n+                    cache = cacheManager.createCache(cacheName, initConfig());\n                     CACHE_MAP.put(cacheName, cache);\n+                    registeredCache.inc();\n                     LOGGER.info(\"Created cache: {} - Expiry Policy: {} - TTL: {}\", cacheName, EXPIRY_POLICY, TTL);\n                 }\n             }\n         }\n         return cache;\n     }\n \n+\n+    private static void checkCacheManager() {\n+        //called by synchronized section so no concurrency issues can arise\n+        if (cacheManager == null) {\n+            CachingProvider cachingProvider;\n+            try {\n+                if (!StringUtils.isEmpty(CACHING_PROVIDER_CLASS_NAME)) {\n+                    cachingProvider = Caching.getCachingProvider(CACHING_PROVIDER_CLASS_NAME);\n+                } else {\n+                    cachingProvider = Caching.getCachingProvider();\n+                }\n+                //set the default cache flag\n+                cacheStatus = 1;\n+            } catch (CacheException e) {\n+                //set the \"default cache\" flag (already done by initDefualtCacheProvider)\n+                LOGGER.warn(\"Error while loading the CachingProvider... Loading the default one ({}).\", DEFAULT_CACHING_PROVIDER_CLASS_NAME);\n+                cachingProvider = initDefualtCacheProvider();\n+            }\n+            try {\n+                cacheManager = cachingProvider.getCacheManager(CACHE_CONFIG_URI, null);\n+            }\n+            catch (Exception e) {\n+                //anyway set the \"default cache\" flag (already done by initDefualtCacheProvider)\n+                //second fallback\n+                LOGGER.warn(\"Error while loading the CacheManager... Switching to CachingProvider default ({}). Error: {}\", DEFAULT_CACHING_PROVIDER_CLASS_NAME, e.getMessage(), e);\n+                cachingProvider = initDefualtCacheProvider();\n+                cacheManager = cachingProvider.getCacheManager(CACHE_CONFIG_URI, null);\n+            }\n+        }\n+    }\n+\n+    private static CachingProvider initDefualtCacheProvider() {\n+        //set the default cache flag\n+        cacheStatus = -1;\n+        return Caching.getCachingProvider(DEFAULT_CACHING_PROVIDER_CLASS_NAME);\n+    }\n+\n+    private static MutableConfiguration<Serializable, Serializable> initConfig() {\n+        Factory expiryPolicyFactory;\n+        if (ExpiryPolicy.TOUCHED.name().equals(EXPIRY_POLICY)) {\n+            expiryPolicyFactory = TouchedExpiryPolicy.factoryOf(new Duration(TimeUnit.SECONDS, TTL));\n+        } else {\n+            expiryPolicyFactory = ModifiedExpiryPolicy.factoryOf(new Duration(TimeUnit.SECONDS, TTL));\n+        }\n+        MutableConfiguration<Serializable, Serializable> config = new MutableConfiguration<>();\n+        config.setExpiryPolicyFactory(expiryPolicyFactory);\n+        return config;\n+    }\n+\n     /**\n      * Utility method to cleanup the whole cache.\n      */\n     public static void invalidateAll() {\n-        CACHE_MAP.forEach((cacheKey, cache) -> cache.clear());\n+        CACHE_MAP.forEach((cacheKey, cache) -> {\n+            cache.clear();\n+            registeredCache.dec();", "originalCommit": "61947400182ab332e7405fed3dcac69c97bbed17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxNzg5Nw==", "url": "https://github.com/eclipse/kapua/pull/3011#discussion_r449617897", "bodyText": "My fault it's in the loop.", "author": "stefanomorson", "createdAt": "2020-07-03T14:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxNjc1Mw=="}], "type": "inlineReview"}]}