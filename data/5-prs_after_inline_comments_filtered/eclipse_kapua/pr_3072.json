{"pr_number": 3072, "pr_title": "Added Junit Tests for classes in service/api module and Entity, Event, Locator package", "pr_createdAt": "2020-09-14T08:32:59Z", "pr_url": "https://github.com/eclipse/kapua/pull/3072", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1Njk0Ng==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488556946", "bodyText": "Please use enhanced for loop: \"                for (KapuaErrorCodes ker: kapuaErrorCodes) {\"", "author": "LeoNerdoG", "createdAt": "2020-09-15T10:25:06Z", "path": "service/api/src/test/java/org/eclipse/kapua/KapuaIllegalArgumentExceptionTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaIllegalArgumentExceptionTest extends Assert {\n+\n+    String[] argumentName;\n+    String[] argumentValue;\n+    KapuaErrorCodes[] kapuaErrorCodes;\n+\n+    @Before\n+    public void initialize() {\n+        argumentName = new String[]{\"Argument Name\", null};\n+        argumentValue = new String[]{\"Argument Value\", null};\n+        kapuaErrorCodes = new KapuaErrorCodes[]{KapuaErrorCodes.ENTITY_NOT_FOUND, KapuaErrorCodes.ENTITY_ALREADY_EXISTS, KapuaErrorCodes.DUPLICATE_NAME, KapuaErrorCodes.DUPLICATE_EXTERNAL_ID,\n+                KapuaErrorCodes.ENTITY_UNIQUENESS, KapuaErrorCodes.ILLEGAL_ACCESS, KapuaErrorCodes.ILLEGAL_ARGUMENT, KapuaErrorCodes.ILLEGAL_NULL_ARGUMENT,\n+                KapuaErrorCodes.ILLEGAL_STATE, KapuaErrorCodes.OPTIMISTIC_LOCKING, KapuaErrorCodes.UNAUTHENTICATED, KapuaErrorCodes.OPERATION_NOT_SUPPORTED,\n+                KapuaErrorCodes.INTERNAL_ERROR, KapuaErrorCodes.SEVERE_INTERNAL_ERROR, KapuaErrorCodes.PARENT_LIMIT_EXCEEDED_IN_CONFIG, KapuaErrorCodes.SUBJECT_UNAUTHORIZED,\n+                KapuaErrorCodes.ENTITY_ALREADY_EXIST_IN_ANOTHER_ACCOUNT, KapuaErrorCodes.EXTERNAL_ID_ALREADY_EXIST_IN_ANOTHER_ACCOUNT, KapuaErrorCodes.BUNDLE_START_ERROR,\n+                KapuaErrorCodes.BUNDLE_STOP_ERROR, KapuaErrorCodes.PACKAGE_URI_SYNTAX_ERROR, KapuaErrorCodes.MAX_NUMBER_OF_ITEMS_REACHED, KapuaErrorCodes.END_BEFORE_START_TIME_ERROR,\n+                KapuaErrorCodes.SAME_START_AND_DATE, KapuaErrorCodes.RETRY_AND_CRON_BOTH_SELECTED, KapuaErrorCodes.DEVICE_NOT_FOUND, KapuaErrorCodes.SCHEDULE_DUPLICATE_NAME,\n+                KapuaErrorCodes.DOWNLOAD_PACKAGE_EXCEPTION, KapuaErrorCodes.TRIGGER_NEVER_FIRE, KapuaErrorCodes.ADMIN_ROLE_DELETED_ERROR, KapuaErrorCodes.PERMISSION_DELETE_NOT_ALLOWED,\n+                KapuaErrorCodes.SERVICE_DISABLED};\n+    }\n+\n+    @Test\n+    public void kapuaIllegalArgumentExceptionStringParametersTest() {\n+        for (String name : argumentName) {\n+            for (String value : argumentValue) {\n+                KapuaIllegalArgumentException kapuaIllegalArgumentException = new KapuaIllegalArgumentException(name, value);\n+                assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ILLEGAL_ARGUMENT, kapuaIllegalArgumentException.getCode());\n+                assertEquals(\"Expected and actual values should be the same.\", name, kapuaIllegalArgumentException.getArgumentName());\n+                assertEquals(\"Expected and actual values should be the same.\", value, kapuaIllegalArgumentException.getArgumentValue());\n+                assertEquals(\"Expected and actual values should be the same.\", \"An illegal value was provided for the argument \" + name + \": \" + value + \".\", kapuaIllegalArgumentException.getMessage());\n+                assertNull(\"Null expected.\", kapuaIllegalArgumentException.getCause());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaIllegalArgumentExceptionKapuaErrorCodesStringParametersTest() {\n+        for (String name : argumentName) {\n+            for (String value : argumentValue) {\n+                String[] message = {\"The entity of type \" + name + \" with id/name \" + value + \" was not found.\", \"Error: \" + name + \", \" + value, \"An entity with the same name \" + name + \" already exists.\",\n+                        \"An entity with the same external Id \" + name + \" already exists.\", \"Error: \" + name + \", \" + value, \"The current subject is not authorized for \" + name + \".\", \"An illegal value was provided for the argument \" + name + \": \" + value + \".\",\n+                        \"An illegal null value was provided for the argument \" + name + \".\", \"The application is in a illegal state: \" + name + \".\", \"The entity is out of state as it has been modified or deleted by another transaction.\",\n+                        \"No authenticated Subject found in context.\", \"Error: \" + name + \", \" + value, \"An internal error occurred: \" + name + \".\", \"Error: \" + name + \", \" + value, \"Maximum number of items has been exceeded,\",\n+                        \"User does not have permission to perform this action. Missing permission: \" + name + \". Please perform a new login to refresh users permissions.\", \"An entity with the same name \" + name,\n+                        \"An entity with the same external id \" + name + \" already exists in another account.\", \"Bundle could not be started. Please check the device log for errors.\", \"Bundle could not be stopped. Please check the device log for errors.\",\n+                        \"Error: \" + name + \", \" + value, \"Max number of \" + name + \" reached. Please increase the number or set InfiniteChild\" + name + \" parameter to True.\", \"The start time cannot be later than the end time.\",\n+                        \"Start and end time cannot be at the same point in time. Please change the parameters.\", \"There should only be one scheduling parameter - either Retry interval or Cron schedule.\",\n+                        \"The selected devices were not found. Please refresh device list.\", \"An entity with the same value for field already exists here or in another job.\",\n+                        \"Error: Another resource is currently downloading. Please wait a few moments so package finishes downloading and then try again.\",\n+                        \"Error: \" + name + \", \" + value, \"Operation not allowed on admin role.\", \"Operation not allowed on this specific permission.\", \"The Service is disabled: \" + name};\n+\n+                for (int i = 0; i < kapuaErrorCodes.length; i++) {", "originalCommit": "737f977712791a8072f6a0d27bd456ec78145819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0NzQ4MQ==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488647481", "bodyText": "I used index i to get values from different arrays in the same position", "author": "sonja-ct", "createdAt": "2020-09-15T13:01:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1Njk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1OTY0Mw==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488559643", "bodyText": "Please use enhanced for loop: for(Throwable thr:throwables)", "author": "LeoNerdoG", "createdAt": "2020-09-15T10:30:04Z", "path": "service/api/src/test/java/org/eclipse/kapua/KapuaRuntimeExceptionTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaRuntimeExceptionTest extends Assert {\n+\n+    String expectedErrorMessage;\n+    KapuaErrorCode kapuaErrorCode;\n+    Object argument1, argument2, argument3;\n+    Throwable[] throwables;\n+\n+    @Before\n+    public void initialize() {\n+        expectedErrorMessage = \"kapua-service-error-messages\";\n+        kapuaErrorCode = KapuaErrorCodes.ADMIN_ROLE_DELETED_ERROR;\n+        argument1 = \"user\";\n+        argument2 = 1;\n+        argument3 = 'c';\n+        throwables = new Throwable[]{new Throwable(), null};\n+    }\n+\n+\n+    @Test\n+    public void kapuaRuntimeExceptionKapuaErrorCodeParameterTest() {\n+        KapuaRuntimeException kapuaRuntimeException = new KapuaRuntimeException(kapuaErrorCode);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ADMIN_ROLE_DELETED_ERROR, kapuaRuntimeException.getCode());\n+        assertNull(\"Null expected.\", kapuaRuntimeException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Operation not allowed on admin role.\", kapuaRuntimeException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Operation not allowed on admin role.\", kapuaRuntimeException.getLocalizedMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaRuntimeException.getKapuaErrorMessagesBundle());\n+    }\n+\n+    @Test\n+    public void kapuaRuntimeExceptionNullKapuaErrorCodeParameterTest() {\n+        KapuaRuntimeException kapuaRuntimeException = new KapuaRuntimeException(null);\n+\n+        assertNull(\"Null expected.\", kapuaRuntimeException.getCode());\n+        assertNull(\"Null expected.\", kapuaRuntimeException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaRuntimeException.getKapuaErrorMessagesBundle());\n+        try {\n+            kapuaRuntimeException.getMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+        try {\n+            kapuaRuntimeException.getLocalizedMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaRuntimeExceptionKapuaErrorCodeObjectParametersTest() {\n+        KapuaRuntimeException kapuaRuntimeException = new KapuaRuntimeException(kapuaErrorCode, argument1, argument2, argument3);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ADMIN_ROLE_DELETED_ERROR, kapuaRuntimeException.getCode());\n+        assertNull(\"Null expected.\", kapuaRuntimeException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Operation not allowed on admin role.\", kapuaRuntimeException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Operation not allowed on admin role.\", kapuaRuntimeException.getLocalizedMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaRuntimeException.getKapuaErrorMessagesBundle());\n+    }\n+\n+    @Test\n+    public void kapuaRuntimeExceptionKapuaErrorCodeNullObjectParametersTest() {\n+        KapuaRuntimeException kapuaRuntimeException = new KapuaRuntimeException(kapuaErrorCode, null);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ADMIN_ROLE_DELETED_ERROR, kapuaRuntimeException.getCode());\n+        assertNull(\"Null expected.\", kapuaRuntimeException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Operation not allowed on admin role.\", kapuaRuntimeException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Operation not allowed on admin role.\", kapuaRuntimeException.getLocalizedMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaRuntimeException.getKapuaErrorMessagesBundle());\n+    }\n+\n+    @Test\n+    public void kapuaRuntimeExceptionNullKapuaErrorCodeObjectParametersTest() {\n+        KapuaRuntimeException kapuaRuntimeException = new KapuaRuntimeException(null, argument1, argument2, argument3);\n+\n+        assertNull(\"Null expected.\", kapuaRuntimeException.getCode());\n+        assertNull(\"Null expected.\", kapuaRuntimeException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaRuntimeException.getKapuaErrorMessagesBundle());\n+        try {\n+            kapuaRuntimeException.getMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+        try {\n+            kapuaRuntimeException.getLocalizedMessage();\n+            fail(\"NullPointerException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaRuntimeExceptionKapuaErrorCodeThrowableObjectParametesTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaRuntimeException kapuaRuntimeException = new KapuaRuntimeException(KapuaErrorCodes.ENTITY_NOT_FOUND, throwable, argument1, argument2, argument3);\n+            assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaRuntimeException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaRuntimeException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type \" + argument1 + \" with id/name \" + argument2 + \" was not found.\", kapuaRuntimeException.getLocalizedMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaRuntimeException.getKapuaErrorMessagesBundle());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaRuntimeException.getCause());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaRuntimeExceptionNullKapuaErrorCodeThrowableObjectParametesTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaRuntimeException = new KapuaException(null, throwable, argument1, argument2, argument3);\n+            assertNull(\"Null expected.\", kapuaRuntimeException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaRuntimeException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaRuntimeException.getKapuaErrorMessagesBundle());\n+            try {\n+                kapuaRuntimeException.getMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+            try {\n+                kapuaRuntimeException.getLocalizedMessage();\n+                fail(\"NullPointerException expected.\");\n+            } catch (Exception e) {\n+                assertEquals(\"NullPointerException expected.\", new NullPointerException().toString(), e.toString());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaRuntimeExceptionKapuaErrorCodeThrowableNullObjectParametesTest() {\n+        for (Throwable throwable : throwables) {\n+            KapuaException kapuaRuntimeException = new KapuaException(KapuaErrorCodes.ENTITY_NOT_FOUND, throwable, null);\n+            assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.ENTITY_NOT_FOUND, kapuaRuntimeException.getCode());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaRuntimeException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", \"The entity of type {0} with id/name {1} was not found.\", kapuaRuntimeException.getLocalizedMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaRuntimeException.getKapuaErrorMessagesBundle());\n+            assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaRuntimeException.getCause());\n+        }\n+    }\n+\n+    @Test\n+    public void internalErrorCauseMessageTest() {\n+        String[] messages = {\"Message\", null};\n+\n+        for (Throwable throwable : throwables) {\n+            for (String msg : messages) {\n+                assertThat(\"Instance of KapuaRuntimeException expected.\", KapuaRuntimeException.internalError(throwable, msg), IsInstanceOf.instanceOf(KapuaRuntimeException.class));\n+                assertEquals(\"Expected and actual values should be the same.\", new KapuaRuntimeException(KapuaErrorCodes.INTERNAL_ERROR, throwable, msg).toString(), KapuaRuntimeException.internalError(throwable, msg).toString());\n+                assertEquals(\"Expected and actual values should be the same.\", \"An internal error occurred: \" + msg + \".\", KapuaRuntimeException.internalError(throwable, msg).getMessage());\n+                assertEquals(\"Expected and actual values should be the same.\", throwable, KapuaRuntimeException.internalError(throwable, msg).getCause());\n+                assertEquals(\"Expected and actual values should be the same.\", KapuaErrorCodes.INTERNAL_ERROR, KapuaRuntimeException.internalError(throwable, msg).getCode());\n+                assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, KapuaRuntimeException.internalError(throwable, msg).getKapuaErrorMessagesBundle());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void internalErrorCauseTest() {\n+        String message = \"Message\";\n+        Throwable[] throwables = {new Throwable(message), new Throwable()};\n+        Throwable nullThrowable = null;\n+        String[] expectedMessage = {\"An internal error occurred: \" + message + \".\", \"An internal error occurred: \" + throwables[1] + \".\"};\n+        String[] arguments = {\"Message\", \"java.lang.Throwable\"};\n+\n+        for (int i = 0; i < throwables.length; i++) {", "originalCommit": "737f977712791a8072f6a0d27bd456ec78145819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0NzcwMA==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488647700", "bodyText": "I used index i to get values from different arrays in the same position", "author": "sonja-ct", "createdAt": "2020-09-15T13:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1OTY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2MDAwNQ==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488560005", "bodyText": "Please delete empty line.", "author": "LeoNerdoG", "createdAt": "2020-09-15T10:30:41Z", "path": "service/api/src/test/java/org/eclipse/kapua/KapuaRuntimeExceptionTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaRuntimeExceptionTest extends Assert {\n+\n+    String expectedErrorMessage;\n+    KapuaErrorCode kapuaErrorCode;\n+    Object argument1, argument2, argument3;\n+    Throwable[] throwables;\n+\n+    @Before\n+    public void initialize() {\n+        expectedErrorMessage = \"kapua-service-error-messages\";\n+        kapuaErrorCode = KapuaErrorCodes.ADMIN_ROLE_DELETED_ERROR;\n+        argument1 = \"user\";\n+        argument2 = 1;\n+        argument3 = 'c';\n+        throwables = new Throwable[]{new Throwable(), null};\n+    }\n+", "originalCommit": "737f977712791a8072f6a0d27bd456ec78145819", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTY4MQ==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488571681", "bodyText": "Please use enhanced for loop.", "author": "LeoNerdoG", "createdAt": "2020-09-15T10:52:13Z", "path": "service/api/src/test/java/org/eclipse/kapua/locator/KapuaLocatorExceptionTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.locator;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaLocatorExceptionTest extends Assert {\n+\n+    String expectedErrorMessage;\n+    KapuaLocatorErrorCodes[] kapuaLocatorErrorCodes;\n+    Object argument1, argument2, argument3;\n+    Throwable[] throwables;\n+    String[] expectedMessageNullArguments;\n+    String[] expectedMessage;\n+\n+    @Before\n+    public void initialize() {\n+        expectedErrorMessage = \"kapua-locator-service-error-messages\";\n+        kapuaLocatorErrorCodes = new KapuaLocatorErrorCodes[]{KapuaLocatorErrorCodes.SERVICE_UNAVAILABLE, KapuaLocatorErrorCodes.SERVICE_PROVIDER_INVALID,\n+                KapuaLocatorErrorCodes.FACTORY_UNAVAILABLE, KapuaLocatorErrorCodes.FACTORY_PROVIDER_INVALID, KapuaLocatorErrorCodes.COMPONENT_UNAVAILABLE,\n+                KapuaLocatorErrorCodes.COMPONENT_PROVIDER_INVALID, KapuaLocatorErrorCodes.INVALID_CONFIGURATION};\n+        argument1 = \"argument1\";\n+        argument2 = \"argument2\";\n+        argument3 = \"argument3\";\n+        throwables = new Throwable[]{new Throwable(), null};\n+        expectedMessageNullArguments = new String[]{\"Service unavailable {0}\", \"{0} is not a valid service provider for {1}\", \"Factory unavailable {0}\",\n+                \"{0} is not a valid factory provider for {1}\", \"Error: \", \"Error: \", \"Error: \"};\n+        expectedMessage = new String[]{\"Service unavailable \" + argument1, argument1 + \" is not a valid service provider for \" + argument2, \"Factory unavailable \" + argument1,\n+                argument1 + \" is not a valid factory provider for \" + argument2, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3,\n+                \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3};\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesParameterTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {", "originalCommit": "737f977712791a8072f6a0d27bd456ec78145819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0OTA4MQ==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488649081", "bodyText": "I used index i to get values from different arrays in the same position", "author": "sonja-ct", "createdAt": "2020-09-15T13:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTc1OQ==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488571759", "bodyText": "Please use enhanced for loop.", "author": "LeoNerdoG", "createdAt": "2020-09-15T10:52:22Z", "path": "service/api/src/test/java/org/eclipse/kapua/locator/KapuaLocatorExceptionTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.locator;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaLocatorExceptionTest extends Assert {\n+\n+    String expectedErrorMessage;\n+    KapuaLocatorErrorCodes[] kapuaLocatorErrorCodes;\n+    Object argument1, argument2, argument3;\n+    Throwable[] throwables;\n+    String[] expectedMessageNullArguments;\n+    String[] expectedMessage;\n+\n+    @Before\n+    public void initialize() {\n+        expectedErrorMessage = \"kapua-locator-service-error-messages\";\n+        kapuaLocatorErrorCodes = new KapuaLocatorErrorCodes[]{KapuaLocatorErrorCodes.SERVICE_UNAVAILABLE, KapuaLocatorErrorCodes.SERVICE_PROVIDER_INVALID,\n+                KapuaLocatorErrorCodes.FACTORY_UNAVAILABLE, KapuaLocatorErrorCodes.FACTORY_PROVIDER_INVALID, KapuaLocatorErrorCodes.COMPONENT_UNAVAILABLE,\n+                KapuaLocatorErrorCodes.COMPONENT_PROVIDER_INVALID, KapuaLocatorErrorCodes.INVALID_CONFIGURATION};\n+        argument1 = \"argument1\";\n+        argument2 = \"argument2\";\n+        argument3 = \"argument3\";\n+        throwables = new Throwable[]{new Throwable(), null};\n+        expectedMessageNullArguments = new String[]{\"Service unavailable {0}\", \"{0} is not a valid service provider for {1}\", \"Factory unavailable {0}\",\n+                \"{0} is not a valid factory provider for {1}\", \"Error: \", \"Error: \", \"Error: \"};\n+        expectedMessage = new String[]{\"Service unavailable \" + argument1, argument1 + \" is not a valid service provider for \" + argument2, \"Factory unavailable \" + argument1,\n+                argument1 + \" is not a valid factory provider for \" + argument2, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3,\n+                \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3};\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesParameterTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+            KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i]);\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+            assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedMessageNullArguments[i], kapuaLocatorException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void kapuaLocatorExceptionKapuaLocatorNullErrorCodesParameterTest() {\n+        KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(null);\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCode());\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        kapuaLocatorException.getMessage();\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesObjectParametersTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {", "originalCommit": "737f977712791a8072f6a0d27bd456ec78145819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0ODAwMg==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488648002", "bodyText": "I used index i to get values from different arrays in the same position", "author": "sonja-ct", "createdAt": "2020-09-15T13:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTc5Mg==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488571792", "bodyText": "Please use enhanced for loop.", "author": "LeoNerdoG", "createdAt": "2020-09-15T10:52:26Z", "path": "service/api/src/test/java/org/eclipse/kapua/locator/KapuaLocatorExceptionTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.locator;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaLocatorExceptionTest extends Assert {\n+\n+    String expectedErrorMessage;\n+    KapuaLocatorErrorCodes[] kapuaLocatorErrorCodes;\n+    Object argument1, argument2, argument3;\n+    Throwable[] throwables;\n+    String[] expectedMessageNullArguments;\n+    String[] expectedMessage;\n+\n+    @Before\n+    public void initialize() {\n+        expectedErrorMessage = \"kapua-locator-service-error-messages\";\n+        kapuaLocatorErrorCodes = new KapuaLocatorErrorCodes[]{KapuaLocatorErrorCodes.SERVICE_UNAVAILABLE, KapuaLocatorErrorCodes.SERVICE_PROVIDER_INVALID,\n+                KapuaLocatorErrorCodes.FACTORY_UNAVAILABLE, KapuaLocatorErrorCodes.FACTORY_PROVIDER_INVALID, KapuaLocatorErrorCodes.COMPONENT_UNAVAILABLE,\n+                KapuaLocatorErrorCodes.COMPONENT_PROVIDER_INVALID, KapuaLocatorErrorCodes.INVALID_CONFIGURATION};\n+        argument1 = \"argument1\";\n+        argument2 = \"argument2\";\n+        argument3 = \"argument3\";\n+        throwables = new Throwable[]{new Throwable(), null};\n+        expectedMessageNullArguments = new String[]{\"Service unavailable {0}\", \"{0} is not a valid service provider for {1}\", \"Factory unavailable {0}\",\n+                \"{0} is not a valid factory provider for {1}\", \"Error: \", \"Error: \", \"Error: \"};\n+        expectedMessage = new String[]{\"Service unavailable \" + argument1, argument1 + \" is not a valid service provider for \" + argument2, \"Factory unavailable \" + argument1,\n+                argument1 + \" is not a valid factory provider for \" + argument2, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3,\n+                \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3};\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesParameterTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+            KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i]);\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+            assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedMessageNullArguments[i], kapuaLocatorException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void kapuaLocatorExceptionKapuaLocatorNullErrorCodesParameterTest() {\n+        KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(null);\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCode());\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        kapuaLocatorException.getMessage();\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesObjectParametersTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+            KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i], argument1, argument2, argument3);\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+            assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedMessage[i], kapuaLocatorException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesNullObjectParametersTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {", "originalCommit": "737f977712791a8072f6a0d27bd456ec78145819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0ODExNw==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488648117", "bodyText": "I used index i to get values from different arrays in the same position", "author": "sonja-ct", "createdAt": "2020-09-15T13:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTg2OA==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488571868", "bodyText": "Please use enhanced for loop.", "author": "LeoNerdoG", "createdAt": "2020-09-15T10:52:33Z", "path": "service/api/src/test/java/org/eclipse/kapua/locator/KapuaLocatorExceptionTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.locator;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaLocatorExceptionTest extends Assert {\n+\n+    String expectedErrorMessage;\n+    KapuaLocatorErrorCodes[] kapuaLocatorErrorCodes;\n+    Object argument1, argument2, argument3;\n+    Throwable[] throwables;\n+    String[] expectedMessageNullArguments;\n+    String[] expectedMessage;\n+\n+    @Before\n+    public void initialize() {\n+        expectedErrorMessage = \"kapua-locator-service-error-messages\";\n+        kapuaLocatorErrorCodes = new KapuaLocatorErrorCodes[]{KapuaLocatorErrorCodes.SERVICE_UNAVAILABLE, KapuaLocatorErrorCodes.SERVICE_PROVIDER_INVALID,\n+                KapuaLocatorErrorCodes.FACTORY_UNAVAILABLE, KapuaLocatorErrorCodes.FACTORY_PROVIDER_INVALID, KapuaLocatorErrorCodes.COMPONENT_UNAVAILABLE,\n+                KapuaLocatorErrorCodes.COMPONENT_PROVIDER_INVALID, KapuaLocatorErrorCodes.INVALID_CONFIGURATION};\n+        argument1 = \"argument1\";\n+        argument2 = \"argument2\";\n+        argument3 = \"argument3\";\n+        throwables = new Throwable[]{new Throwable(), null};\n+        expectedMessageNullArguments = new String[]{\"Service unavailable {0}\", \"{0} is not a valid service provider for {1}\", \"Factory unavailable {0}\",\n+                \"{0} is not a valid factory provider for {1}\", \"Error: \", \"Error: \", \"Error: \"};\n+        expectedMessage = new String[]{\"Service unavailable \" + argument1, argument1 + \" is not a valid service provider for \" + argument2, \"Factory unavailable \" + argument1,\n+                argument1 + \" is not a valid factory provider for \" + argument2, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3,\n+                \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3};\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesParameterTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+            KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i]);\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+            assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedMessageNullArguments[i], kapuaLocatorException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void kapuaLocatorExceptionKapuaLocatorNullErrorCodesParameterTest() {\n+        KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(null);\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCode());\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        kapuaLocatorException.getMessage();\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesObjectParametersTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+            KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i], argument1, argument2, argument3);\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+            assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedMessage[i], kapuaLocatorException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesNullObjectParametersTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+            KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i], null);\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+            assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedMessageNullArguments[i], kapuaLocatorException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void kapuaLocatorExceptionNullKapuaLocatorErrorCodesObjectParametersTest() {\n+        KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(null, argument1, argument2, argument3);\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCode());\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        kapuaLocatorException.getMessage();\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void kapuaLocatorExceptionNullKapuaLocatorErrorCodesNullObjectParametersTest() {\n+        KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(null, null);\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCode());\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        kapuaLocatorException.getMessage();\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesThrowableObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {", "originalCommit": "737f977712791a8072f6a0d27bd456ec78145819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0OTE3OQ==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488649179", "bodyText": "I used index i to get values from different arrays in the same position", "author": "sonja-ct", "createdAt": "2020-09-15T13:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTg5Ng==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488571896", "bodyText": "Please use enhanced for loop.", "author": "LeoNerdoG", "createdAt": "2020-09-15T10:52:37Z", "path": "service/api/src/test/java/org/eclipse/kapua/locator/KapuaLocatorExceptionTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.locator;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaLocatorExceptionTest extends Assert {\n+\n+    String expectedErrorMessage;\n+    KapuaLocatorErrorCodes[] kapuaLocatorErrorCodes;\n+    Object argument1, argument2, argument3;\n+    Throwable[] throwables;\n+    String[] expectedMessageNullArguments;\n+    String[] expectedMessage;\n+\n+    @Before\n+    public void initialize() {\n+        expectedErrorMessage = \"kapua-locator-service-error-messages\";\n+        kapuaLocatorErrorCodes = new KapuaLocatorErrorCodes[]{KapuaLocatorErrorCodes.SERVICE_UNAVAILABLE, KapuaLocatorErrorCodes.SERVICE_PROVIDER_INVALID,\n+                KapuaLocatorErrorCodes.FACTORY_UNAVAILABLE, KapuaLocatorErrorCodes.FACTORY_PROVIDER_INVALID, KapuaLocatorErrorCodes.COMPONENT_UNAVAILABLE,\n+                KapuaLocatorErrorCodes.COMPONENT_PROVIDER_INVALID, KapuaLocatorErrorCodes.INVALID_CONFIGURATION};\n+        argument1 = \"argument1\";\n+        argument2 = \"argument2\";\n+        argument3 = \"argument3\";\n+        throwables = new Throwable[]{new Throwable(), null};\n+        expectedMessageNullArguments = new String[]{\"Service unavailable {0}\", \"{0} is not a valid service provider for {1}\", \"Factory unavailable {0}\",\n+                \"{0} is not a valid factory provider for {1}\", \"Error: \", \"Error: \", \"Error: \"};\n+        expectedMessage = new String[]{\"Service unavailable \" + argument1, argument1 + \" is not a valid service provider for \" + argument2, \"Factory unavailable \" + argument1,\n+                argument1 + \" is not a valid factory provider for \" + argument2, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3, \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3,\n+                \"Error: \" + argument1 + \", \" + argument2 + \", \" + argument3};\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesParameterTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+            KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i]);\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+            assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedMessageNullArguments[i], kapuaLocatorException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void kapuaLocatorExceptionKapuaLocatorNullErrorCodesParameterTest() {\n+        KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(null);\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCode());\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        kapuaLocatorException.getMessage();\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesObjectParametersTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+            KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i], argument1, argument2, argument3);\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+            assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedMessage[i], kapuaLocatorException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesNullObjectParametersTest() {\n+        for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+            KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i], null);\n+            assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+            assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedMessageNullArguments[i], kapuaLocatorException.getMessage());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void kapuaLocatorExceptionNullKapuaLocatorErrorCodesObjectParametersTest() {\n+        KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(null, argument1, argument2, argument3);\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCode());\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        kapuaLocatorException.getMessage();\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void kapuaLocatorExceptionNullKapuaLocatorErrorCodesNullObjectParametersTest() {\n+        KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(null, null);\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCode());\n+        assertNull(\"Null expected.\", kapuaLocatorException.getCause());\n+        assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+        kapuaLocatorException.getMessage();\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesThrowableObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {\n+                KapuaLocatorException kapuaLocatorException = new KapuaLocatorException(kapuaLocatorErrorCodes[i], throwable, argument1, argument2, argument3);\n+                assertEquals(\"Expected and actual values should be the same.\", kapuaLocatorErrorCodes[i], kapuaLocatorException.getCode());\n+                assertEquals(\"Expected and actual values should be the same.\", throwable, kapuaLocatorException.getCause());\n+                assertEquals(\"Expected and actual values should be the same.\", expectedMessage[i], kapuaLocatorException.getMessage());\n+                assertEquals(\"Expected and actual values should be the same.\", expectedErrorMessage, kapuaLocatorException.getKapuaErrorMessagesBundle());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void kapuaLocatorExceptionKapuaLocatorErrorCodesThrowableNullObjectParametersTest() {\n+        for (Throwable throwable : throwables) {\n+            for (int i = 0; i < kapuaLocatorErrorCodes.length; i++) {", "originalCommit": "737f977712791a8072f6a0d27bd456ec78145819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0OTIxOQ==", "url": "https://github.com/eclipse/kapua/pull/3072#discussion_r488649219", "bodyText": "I used index i to get values from different arrays in the same position", "author": "sonja-ct", "createdAt": "2020-09-15T13:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTg5Ng=="}], "type": "inlineReview"}, {"oid": "70b8d264dae380598c21454712762c339d706e1e", "url": "https://github.com/eclipse/kapua/commit/70b8d264dae380598c21454712762c339d706e1e", "message": "Added Junit Tests for service/api module\n\nAdded Junit tests for KapuaIllegalArgumentException class\nAdded Junit tests for KapuaRuntimeException class\nAdded Junit Tests for Entity package\nAdded Junit Tests for Event package\nAdded Junit Tests for Locator package\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-09-15T13:01:03Z", "type": "commit"}, {"oid": "70b8d264dae380598c21454712762c339d706e1e", "url": "https://github.com/eclipse/kapua/commit/70b8d264dae380598c21454712762c339d706e1e", "message": "Added Junit Tests for service/api module\n\nAdded Junit tests for KapuaIllegalArgumentException class\nAdded Junit tests for KapuaRuntimeException class\nAdded Junit Tests for Entity package\nAdded Junit Tests for Event package\nAdded Junit Tests for Locator package\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-09-15T13:01:03Z", "type": "forcePushed"}]}