{"pr_number": 3070, "pr_title": "Added Junit Tests", "pr_createdAt": "2020-09-14T07:09:03Z", "pr_url": "https://github.com/eclipse/kapua/pull/3070", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwOTU0OA==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488409548", "bodyText": "Pleas use enhanced for loop (example: for(String string: duplicatedExternalId)", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:11:02Z", "path": "service/api/src/test/java/org/eclipse/kapua/KapuaDuplicateExternalIdExceptionTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaDuplicateExternalIdExceptionTest extends Assert {\n+\n+    String[] duplicatedExternalId;\n+\n+    @Before\n+    public void initialize() {\n+        duplicatedExternalId = new String[]{\"Duplicated External Id\", null};\n+    }\n+\n+    @Test\n+    public void kapuaDuplicateExternalIdExceptionTest() {\n+        for (int i = 0; i < duplicatedExternalId.length; i++) {", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMDExMA==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488410110", "bodyText": "Pleas use enhanced for loop (example: for(String string: duplicatedExternalId)", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:12:30Z", "path": "service/api/src/test/java/org/eclipse/kapua/KapuaDuplicateExternalIdInAnotherAccountErrorTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class KapuaDuplicateExternalIdInAnotherAccountErrorTest extends Assert {\n+\n+    String[] duplicateExternalId;\n+\n+    @Before\n+    public void initialize() {\n+        duplicateExternalId = new String[]{\"Duplicate External Id\", null};\n+    }\n+\n+    @Test\n+    public void kapuaDuplicateExternalIdInAnotherAccountErrorTest() {", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNjQwMA==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488416400", "bodyText": "Please add \"null\" as parameter, otherwise you will not cover lin 85 in the tested class.", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:27:34Z", "path": "service/api/src/test/java/org/eclipse/kapua/service/config/ServiceXmlConfigPropertiesAdapterTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.config;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class ServiceXmlConfigPropertiesAdapterTest extends Assert {\n+\n+    ServiceXmlConfigPropertiesAdapter serviceXmlConfigPropertiesAdapter;\n+    Map[] expectedProperties;\n+\n+    @Before\n+    public void initialize() {\n+        serviceXmlConfigPropertiesAdapter = new ServiceXmlConfigPropertiesAdapter();\n+\n+        Map<String, Object> expectedProperty1 = new HashMap<>();\n+        Map<String, Object> expectedProperty2 = new HashMap<>();\n+        Map<String, Object> expectedProperty3 = new HashMap<>();\n+        Map<String, Object> expectedProperty4 = new HashMap<>();\n+        Map<String, Object> expectedProperty5 = new HashMap<>();\n+        Map<String, Object> expectedProperty6 = new HashMap<>();\n+        Map<String, Object> expectedProperty7 = new HashMap<>();\n+        Map<String, Object> expectedProperty8 = new HashMap<>();\n+        Map<String, Object> expectedProperty9 = new HashMap<>();\n+        Map<String, Object> expectedProperty10 = new HashMap<>();\n+        expectedProperty2.put(null, \"47\");\n+        expectedProperty3.put(null, (long) 47);\n+        expectedProperty4.put(null, 47d);\n+        expectedProperty5.put(null, 47f);\n+        expectedProperty6.put(null, 47);\n+        expectedProperty7.put(null, (byte) 47);\n+        expectedProperty8.put(null, '4');\n+        expectedProperty9.put(null, false);\n+        expectedProperty10.put(null, (short) 47);\n+        expectedProperties = new Map[]{expectedProperty1, expectedProperty2, expectedProperty3, expectedProperty4, expectedProperty5, expectedProperty6, expectedProperty7, expectedProperty8, expectedProperty9, expectedProperty10};\n+    }\n+\n+    @Test\n+    public void marshalTest() {\n+        Map<String, Object> props = new HashMap<>();\n+        String stringValue = \"String Value\";\n+        long longValue = 10L;\n+        double doubleValue = 10.10d;\n+        float floatValue = 10f;\n+        int integerValue = 20;\n+        byte byteValue = 10;\n+        char characterValue = 'c';\n+        boolean booleanValue = true;\n+        short shortValue = 32767;\n+        String[] stringArray = {null, \"String Value 1\", \"String Value 2\", \"String Value 3\"};\n+        Long[] longArray = {10L, 20L, 20200L};", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNjQ3Nw==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488416477", "bodyText": "Please add \"null\" as parameter, otherwise you will not cover lin 96 in the tested class.", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:27:45Z", "path": "service/api/src/test/java/org/eclipse/kapua/service/config/ServiceXmlConfigPropertiesAdapterTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.config;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class ServiceXmlConfigPropertiesAdapterTest extends Assert {\n+\n+    ServiceXmlConfigPropertiesAdapter serviceXmlConfigPropertiesAdapter;\n+    Map[] expectedProperties;\n+\n+    @Before\n+    public void initialize() {\n+        serviceXmlConfigPropertiesAdapter = new ServiceXmlConfigPropertiesAdapter();\n+\n+        Map<String, Object> expectedProperty1 = new HashMap<>();\n+        Map<String, Object> expectedProperty2 = new HashMap<>();\n+        Map<String, Object> expectedProperty3 = new HashMap<>();\n+        Map<String, Object> expectedProperty4 = new HashMap<>();\n+        Map<String, Object> expectedProperty5 = new HashMap<>();\n+        Map<String, Object> expectedProperty6 = new HashMap<>();\n+        Map<String, Object> expectedProperty7 = new HashMap<>();\n+        Map<String, Object> expectedProperty8 = new HashMap<>();\n+        Map<String, Object> expectedProperty9 = new HashMap<>();\n+        Map<String, Object> expectedProperty10 = new HashMap<>();\n+        expectedProperty2.put(null, \"47\");\n+        expectedProperty3.put(null, (long) 47);\n+        expectedProperty4.put(null, 47d);\n+        expectedProperty5.put(null, 47f);\n+        expectedProperty6.put(null, 47);\n+        expectedProperty7.put(null, (byte) 47);\n+        expectedProperty8.put(null, '4');\n+        expectedProperty9.put(null, false);\n+        expectedProperty10.put(null, (short) 47);\n+        expectedProperties = new Map[]{expectedProperty1, expectedProperty2, expectedProperty3, expectedProperty4, expectedProperty5, expectedProperty6, expectedProperty7, expectedProperty8, expectedProperty9, expectedProperty10};\n+    }\n+\n+    @Test\n+    public void marshalTest() {\n+        Map<String, Object> props = new HashMap<>();\n+        String stringValue = \"String Value\";\n+        long longValue = 10L;\n+        double doubleValue = 10.10d;\n+        float floatValue = 10f;\n+        int integerValue = 20;\n+        byte byteValue = 10;\n+        char characterValue = 'c';\n+        boolean booleanValue = true;\n+        short shortValue = 32767;\n+        String[] stringArray = {null, \"String Value 1\", \"String Value 2\", \"String Value 3\"};\n+        Long[] longArray = {10L, 20L, 20200L};\n+        Double[] doubleArray = {10.123d, 1000.1234556d, 10.100000000000000000000d};", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNjU0Nw==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488416547", "bodyText": "Please add \"null\" as parameter, otherwise you will not cover lin 107 in the tested class.", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:27:53Z", "path": "service/api/src/test/java/org/eclipse/kapua/service/config/ServiceXmlConfigPropertiesAdapterTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.config;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class ServiceXmlConfigPropertiesAdapterTest extends Assert {\n+\n+    ServiceXmlConfigPropertiesAdapter serviceXmlConfigPropertiesAdapter;\n+    Map[] expectedProperties;\n+\n+    @Before\n+    public void initialize() {\n+        serviceXmlConfigPropertiesAdapter = new ServiceXmlConfigPropertiesAdapter();\n+\n+        Map<String, Object> expectedProperty1 = new HashMap<>();\n+        Map<String, Object> expectedProperty2 = new HashMap<>();\n+        Map<String, Object> expectedProperty3 = new HashMap<>();\n+        Map<String, Object> expectedProperty4 = new HashMap<>();\n+        Map<String, Object> expectedProperty5 = new HashMap<>();\n+        Map<String, Object> expectedProperty6 = new HashMap<>();\n+        Map<String, Object> expectedProperty7 = new HashMap<>();\n+        Map<String, Object> expectedProperty8 = new HashMap<>();\n+        Map<String, Object> expectedProperty9 = new HashMap<>();\n+        Map<String, Object> expectedProperty10 = new HashMap<>();\n+        expectedProperty2.put(null, \"47\");\n+        expectedProperty3.put(null, (long) 47);\n+        expectedProperty4.put(null, 47d);\n+        expectedProperty5.put(null, 47f);\n+        expectedProperty6.put(null, 47);\n+        expectedProperty7.put(null, (byte) 47);\n+        expectedProperty8.put(null, '4');\n+        expectedProperty9.put(null, false);\n+        expectedProperty10.put(null, (short) 47);\n+        expectedProperties = new Map[]{expectedProperty1, expectedProperty2, expectedProperty3, expectedProperty4, expectedProperty5, expectedProperty6, expectedProperty7, expectedProperty8, expectedProperty9, expectedProperty10};\n+    }\n+\n+    @Test\n+    public void marshalTest() {\n+        Map<String, Object> props = new HashMap<>();\n+        String stringValue = \"String Value\";\n+        long longValue = 10L;\n+        double doubleValue = 10.10d;\n+        float floatValue = 10f;\n+        int integerValue = 20;\n+        byte byteValue = 10;\n+        char characterValue = 'c';\n+        boolean booleanValue = true;\n+        short shortValue = 32767;\n+        String[] stringArray = {null, \"String Value 1\", \"String Value 2\", \"String Value 3\"};\n+        Long[] longArray = {10L, 20L, 20200L};\n+        Double[] doubleArray = {10.123d, 1000.1234556d, 10.100000000000000000000d};\n+        Float[] floatArray = {10.100000000000000000000f, 1010101010.10f, 1010101010.1f};", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNjYzNA==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488416634", "bodyText": "Please add \"null\" as parameter, otherwise you will not cover lin 118 in the tested class.", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:28:05Z", "path": "service/api/src/test/java/org/eclipse/kapua/service/config/ServiceXmlConfigPropertiesAdapterTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.config;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class ServiceXmlConfigPropertiesAdapterTest extends Assert {\n+\n+    ServiceXmlConfigPropertiesAdapter serviceXmlConfigPropertiesAdapter;\n+    Map[] expectedProperties;\n+\n+    @Before\n+    public void initialize() {\n+        serviceXmlConfigPropertiesAdapter = new ServiceXmlConfigPropertiesAdapter();\n+\n+        Map<String, Object> expectedProperty1 = new HashMap<>();\n+        Map<String, Object> expectedProperty2 = new HashMap<>();\n+        Map<String, Object> expectedProperty3 = new HashMap<>();\n+        Map<String, Object> expectedProperty4 = new HashMap<>();\n+        Map<String, Object> expectedProperty5 = new HashMap<>();\n+        Map<String, Object> expectedProperty6 = new HashMap<>();\n+        Map<String, Object> expectedProperty7 = new HashMap<>();\n+        Map<String, Object> expectedProperty8 = new HashMap<>();\n+        Map<String, Object> expectedProperty9 = new HashMap<>();\n+        Map<String, Object> expectedProperty10 = new HashMap<>();\n+        expectedProperty2.put(null, \"47\");\n+        expectedProperty3.put(null, (long) 47);\n+        expectedProperty4.put(null, 47d);\n+        expectedProperty5.put(null, 47f);\n+        expectedProperty6.put(null, 47);\n+        expectedProperty7.put(null, (byte) 47);\n+        expectedProperty8.put(null, '4');\n+        expectedProperty9.put(null, false);\n+        expectedProperty10.put(null, (short) 47);\n+        expectedProperties = new Map[]{expectedProperty1, expectedProperty2, expectedProperty3, expectedProperty4, expectedProperty5, expectedProperty6, expectedProperty7, expectedProperty8, expectedProperty9, expectedProperty10};\n+    }\n+\n+    @Test\n+    public void marshalTest() {\n+        Map<String, Object> props = new HashMap<>();\n+        String stringValue = \"String Value\";\n+        long longValue = 10L;\n+        double doubleValue = 10.10d;\n+        float floatValue = 10f;\n+        int integerValue = 20;\n+        byte byteValue = 10;\n+        char characterValue = 'c';\n+        boolean booleanValue = true;\n+        short shortValue = 32767;\n+        String[] stringArray = {null, \"String Value 1\", \"String Value 2\", \"String Value 3\"};\n+        Long[] longArray = {10L, 20L, 20200L};\n+        Double[] doubleArray = {10.123d, 1000.1234556d, 10.100000000000000000000d};\n+        Float[] floatArray = {10.100000000000000000000f, 1010101010.10f, 1010101010.1f};\n+        Integer[] integerArray = {-2000, -20, 0, 10, 20,};", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNjcwNg==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488416706", "bodyText": "Please add \"null\" as parameter, otherwise you will not cover lin 129 in the tested class.", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:28:13Z", "path": "service/api/src/test/java/org/eclipse/kapua/service/config/ServiceXmlConfigPropertiesAdapterTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.config;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class ServiceXmlConfigPropertiesAdapterTest extends Assert {\n+\n+    ServiceXmlConfigPropertiesAdapter serviceXmlConfigPropertiesAdapter;\n+    Map[] expectedProperties;\n+\n+    @Before\n+    public void initialize() {\n+        serviceXmlConfigPropertiesAdapter = new ServiceXmlConfigPropertiesAdapter();\n+\n+        Map<String, Object> expectedProperty1 = new HashMap<>();\n+        Map<String, Object> expectedProperty2 = new HashMap<>();\n+        Map<String, Object> expectedProperty3 = new HashMap<>();\n+        Map<String, Object> expectedProperty4 = new HashMap<>();\n+        Map<String, Object> expectedProperty5 = new HashMap<>();\n+        Map<String, Object> expectedProperty6 = new HashMap<>();\n+        Map<String, Object> expectedProperty7 = new HashMap<>();\n+        Map<String, Object> expectedProperty8 = new HashMap<>();\n+        Map<String, Object> expectedProperty9 = new HashMap<>();\n+        Map<String, Object> expectedProperty10 = new HashMap<>();\n+        expectedProperty2.put(null, \"47\");\n+        expectedProperty3.put(null, (long) 47);\n+        expectedProperty4.put(null, 47d);\n+        expectedProperty5.put(null, 47f);\n+        expectedProperty6.put(null, 47);\n+        expectedProperty7.put(null, (byte) 47);\n+        expectedProperty8.put(null, '4');\n+        expectedProperty9.put(null, false);\n+        expectedProperty10.put(null, (short) 47);\n+        expectedProperties = new Map[]{expectedProperty1, expectedProperty2, expectedProperty3, expectedProperty4, expectedProperty5, expectedProperty6, expectedProperty7, expectedProperty8, expectedProperty9, expectedProperty10};\n+    }\n+\n+    @Test\n+    public void marshalTest() {\n+        Map<String, Object> props = new HashMap<>();\n+        String stringValue = \"String Value\";\n+        long longValue = 10L;\n+        double doubleValue = 10.10d;\n+        float floatValue = 10f;\n+        int integerValue = 20;\n+        byte byteValue = 10;\n+        char characterValue = 'c';\n+        boolean booleanValue = true;\n+        short shortValue = 32767;\n+        String[] stringArray = {null, \"String Value 1\", \"String Value 2\", \"String Value 3\"};\n+        Long[] longArray = {10L, 20L, 20200L};\n+        Double[] doubleArray = {10.123d, 1000.1234556d, 10.100000000000000000000d};\n+        Float[] floatArray = {10.100000000000000000000f, 1010101010.10f, 1010101010.1f};\n+        Integer[] integerArray = {-2000, -20, 0, 10, 20,};\n+        Byte[] byteArray = {-128, -10, 0, 10, 127};", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNjgwMQ==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488416801", "bodyText": "Please add \"null\" as parameter, otherwise you will not cover lin 140 in the tested class.", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:28:25Z", "path": "service/api/src/test/java/org/eclipse/kapua/service/config/ServiceXmlConfigPropertiesAdapterTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.config;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class ServiceXmlConfigPropertiesAdapterTest extends Assert {\n+\n+    ServiceXmlConfigPropertiesAdapter serviceXmlConfigPropertiesAdapter;\n+    Map[] expectedProperties;\n+\n+    @Before\n+    public void initialize() {\n+        serviceXmlConfigPropertiesAdapter = new ServiceXmlConfigPropertiesAdapter();\n+\n+        Map<String, Object> expectedProperty1 = new HashMap<>();\n+        Map<String, Object> expectedProperty2 = new HashMap<>();\n+        Map<String, Object> expectedProperty3 = new HashMap<>();\n+        Map<String, Object> expectedProperty4 = new HashMap<>();\n+        Map<String, Object> expectedProperty5 = new HashMap<>();\n+        Map<String, Object> expectedProperty6 = new HashMap<>();\n+        Map<String, Object> expectedProperty7 = new HashMap<>();\n+        Map<String, Object> expectedProperty8 = new HashMap<>();\n+        Map<String, Object> expectedProperty9 = new HashMap<>();\n+        Map<String, Object> expectedProperty10 = new HashMap<>();\n+        expectedProperty2.put(null, \"47\");\n+        expectedProperty3.put(null, (long) 47);\n+        expectedProperty4.put(null, 47d);\n+        expectedProperty5.put(null, 47f);\n+        expectedProperty6.put(null, 47);\n+        expectedProperty7.put(null, (byte) 47);\n+        expectedProperty8.put(null, '4');\n+        expectedProperty9.put(null, false);\n+        expectedProperty10.put(null, (short) 47);\n+        expectedProperties = new Map[]{expectedProperty1, expectedProperty2, expectedProperty3, expectedProperty4, expectedProperty5, expectedProperty6, expectedProperty7, expectedProperty8, expectedProperty9, expectedProperty10};\n+    }\n+\n+    @Test\n+    public void marshalTest() {\n+        Map<String, Object> props = new HashMap<>();\n+        String stringValue = \"String Value\";\n+        long longValue = 10L;\n+        double doubleValue = 10.10d;\n+        float floatValue = 10f;\n+        int integerValue = 20;\n+        byte byteValue = 10;\n+        char characterValue = 'c';\n+        boolean booleanValue = true;\n+        short shortValue = 32767;\n+        String[] stringArray = {null, \"String Value 1\", \"String Value 2\", \"String Value 3\"};\n+        Long[] longArray = {10L, 20L, 20200L};\n+        Double[] doubleArray = {10.123d, 1000.1234556d, 10.100000000000000000000d};\n+        Float[] floatArray = {10.100000000000000000000f, 1010101010.10f, 1010101010.1f};\n+        Integer[] integerArray = {-2000, -20, 0, 10, 20,};\n+        Byte[] byteArray = {-128, -10, 0, 10, 127};\n+        Character[] characterArray = {'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r'};", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNjg3NA==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488416874", "bodyText": "Please add \"null\" as parameter, otherwise you will not cover lin 151 in the tested class.", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:28:36Z", "path": "service/api/src/test/java/org/eclipse/kapua/service/config/ServiceXmlConfigPropertiesAdapterTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.config;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class ServiceXmlConfigPropertiesAdapterTest extends Assert {\n+\n+    ServiceXmlConfigPropertiesAdapter serviceXmlConfigPropertiesAdapter;\n+    Map[] expectedProperties;\n+\n+    @Before\n+    public void initialize() {\n+        serviceXmlConfigPropertiesAdapter = new ServiceXmlConfigPropertiesAdapter();\n+\n+        Map<String, Object> expectedProperty1 = new HashMap<>();\n+        Map<String, Object> expectedProperty2 = new HashMap<>();\n+        Map<String, Object> expectedProperty3 = new HashMap<>();\n+        Map<String, Object> expectedProperty4 = new HashMap<>();\n+        Map<String, Object> expectedProperty5 = new HashMap<>();\n+        Map<String, Object> expectedProperty6 = new HashMap<>();\n+        Map<String, Object> expectedProperty7 = new HashMap<>();\n+        Map<String, Object> expectedProperty8 = new HashMap<>();\n+        Map<String, Object> expectedProperty9 = new HashMap<>();\n+        Map<String, Object> expectedProperty10 = new HashMap<>();\n+        expectedProperty2.put(null, \"47\");\n+        expectedProperty3.put(null, (long) 47);\n+        expectedProperty4.put(null, 47d);\n+        expectedProperty5.put(null, 47f);\n+        expectedProperty6.put(null, 47);\n+        expectedProperty7.put(null, (byte) 47);\n+        expectedProperty8.put(null, '4');\n+        expectedProperty9.put(null, false);\n+        expectedProperty10.put(null, (short) 47);\n+        expectedProperties = new Map[]{expectedProperty1, expectedProperty2, expectedProperty3, expectedProperty4, expectedProperty5, expectedProperty6, expectedProperty7, expectedProperty8, expectedProperty9, expectedProperty10};\n+    }\n+\n+    @Test\n+    public void marshalTest() {\n+        Map<String, Object> props = new HashMap<>();\n+        String stringValue = \"String Value\";\n+        long longValue = 10L;\n+        double doubleValue = 10.10d;\n+        float floatValue = 10f;\n+        int integerValue = 20;\n+        byte byteValue = 10;\n+        char characterValue = 'c';\n+        boolean booleanValue = true;\n+        short shortValue = 32767;\n+        String[] stringArray = {null, \"String Value 1\", \"String Value 2\", \"String Value 3\"};\n+        Long[] longArray = {10L, 20L, 20200L};\n+        Double[] doubleArray = {10.123d, 1000.1234556d, 10.100000000000000000000d};\n+        Float[] floatArray = {10.100000000000000000000f, 1010101010.10f, 1010101010.1f};\n+        Integer[] integerArray = {-2000, -20, 0, 10, 20,};\n+        Byte[] byteArray = {-128, -10, 0, 10, 127};\n+        Character[] characterArray = {'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r'};\n+        Boolean[] booleanArray = {true, false};", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNzEzNA==", "url": "https://github.com/eclipse/kapua/pull/3070#discussion_r488417134", "bodyText": "Please add \"null\" as parameter, otherwise you will not cover lin 162 in the tested class.", "author": "LeoNerdoG", "createdAt": "2020-09-15T06:29:16Z", "path": "service/api/src/test/java/org/eclipse/kapua/service/config/ServiceXmlConfigPropertiesAdapterTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.service.config;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class ServiceXmlConfigPropertiesAdapterTest extends Assert {\n+\n+    ServiceXmlConfigPropertiesAdapter serviceXmlConfigPropertiesAdapter;\n+    Map[] expectedProperties;\n+\n+    @Before\n+    public void initialize() {\n+        serviceXmlConfigPropertiesAdapter = new ServiceXmlConfigPropertiesAdapter();\n+\n+        Map<String, Object> expectedProperty1 = new HashMap<>();\n+        Map<String, Object> expectedProperty2 = new HashMap<>();\n+        Map<String, Object> expectedProperty3 = new HashMap<>();\n+        Map<String, Object> expectedProperty4 = new HashMap<>();\n+        Map<String, Object> expectedProperty5 = new HashMap<>();\n+        Map<String, Object> expectedProperty6 = new HashMap<>();\n+        Map<String, Object> expectedProperty7 = new HashMap<>();\n+        Map<String, Object> expectedProperty8 = new HashMap<>();\n+        Map<String, Object> expectedProperty9 = new HashMap<>();\n+        Map<String, Object> expectedProperty10 = new HashMap<>();\n+        expectedProperty2.put(null, \"47\");\n+        expectedProperty3.put(null, (long) 47);\n+        expectedProperty4.put(null, 47d);\n+        expectedProperty5.put(null, 47f);\n+        expectedProperty6.put(null, 47);\n+        expectedProperty7.put(null, (byte) 47);\n+        expectedProperty8.put(null, '4');\n+        expectedProperty9.put(null, false);\n+        expectedProperty10.put(null, (short) 47);\n+        expectedProperties = new Map[]{expectedProperty1, expectedProperty2, expectedProperty3, expectedProperty4, expectedProperty5, expectedProperty6, expectedProperty7, expectedProperty8, expectedProperty9, expectedProperty10};\n+    }\n+\n+    @Test\n+    public void marshalTest() {\n+        Map<String, Object> props = new HashMap<>();\n+        String stringValue = \"String Value\";\n+        long longValue = 10L;\n+        double doubleValue = 10.10d;\n+        float floatValue = 10f;\n+        int integerValue = 20;\n+        byte byteValue = 10;\n+        char characterValue = 'c';\n+        boolean booleanValue = true;\n+        short shortValue = 32767;\n+        String[] stringArray = {null, \"String Value 1\", \"String Value 2\", \"String Value 3\"};\n+        Long[] longArray = {10L, 20L, 20200L};\n+        Double[] doubleArray = {10.123d, 1000.1234556d, 10.100000000000000000000d};\n+        Float[] floatArray = {10.100000000000000000000f, 1010101010.10f, 1010101010.1f};\n+        Integer[] integerArray = {-2000, -20, 0, 10, 20,};\n+        Byte[] byteArray = {-128, -10, 0, 10, 127};\n+        Character[] characterArray = {'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r'};\n+        Boolean[] booleanArray = {true, false};\n+        Short[] shortArray = {-32768, 1, 0, 10, 32767};", "originalCommit": "bc286769d630bc16f2ff3ac1057e74ab9c866a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "507e0da175a632e6548f708d987a4f3b6d62bf3b", "url": "https://github.com/eclipse/kapua/commit/507e0da175a632e6548f708d987a4f3b6d62bf3b", "message": "Added Junit Tests\n\nAdded Junit tests for service/api/service/config package\nAdded Junit tests for service/stream/api package\n\nAdded Junit tests for DeviceMenagmentException class\nAdded Junit tests for KapuaDuplicateExternalIdException class\nAdded Junit tests for KapuaDuplicateExternalIdInAnotherAccountError\nclass\nAdded Junit tests for KapuaDuplicateNameException class\nAdded Junit tests for KapuaDuplicateNameInAnotherAccountError class\nAdded Junit tests for KapuaEndBeforeStartTimeException class\nAdded Junit tests for KapuaEntityNotFoundException class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-09-15T10:18:29Z", "type": "forcePushed"}, {"oid": "acab11ba39c15b82474000cb1791a273c03ba1b3", "url": "https://github.com/eclipse/kapua/commit/acab11ba39c15b82474000cb1791a273c03ba1b3", "message": "Added Junit Tests\n\nAdded Junit tests for service/api/service/config package\nAdded Junit tests for service/stream/api package\n\nAdded Junit tests for ExceptionMessageUtils class\nAdded Junit tests for DeviceMenagmentException class\nAdded Junit tests for KapuaDuplicateExternalIdException class\nAdded Junit tests for KapuaDuplicateExternalIdInAnotherAccountError\nclass\nAdded Junit tests for KapuaDuplicateNameException class\nAdded Junit tests for KapuaDuplicateNameInAnotherAccountError class\nAdded Junit tests for KapuaEndBeforeStartTimeException class\nAdded Junit tests for KapuaEntityNotFoundException class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-09-15T12:17:41Z", "type": "commit"}, {"oid": "acab11ba39c15b82474000cb1791a273c03ba1b3", "url": "https://github.com/eclipse/kapua/commit/acab11ba39c15b82474000cb1791a273c03ba1b3", "message": "Added Junit Tests\n\nAdded Junit tests for service/api/service/config package\nAdded Junit tests for service/stream/api package\n\nAdded Junit tests for ExceptionMessageUtils class\nAdded Junit tests for DeviceMenagmentException class\nAdded Junit tests for KapuaDuplicateExternalIdException class\nAdded Junit tests for KapuaDuplicateExternalIdInAnotherAccountError\nclass\nAdded Junit tests for KapuaDuplicateNameException class\nAdded Junit tests for KapuaDuplicateNameInAnotherAccountError class\nAdded Junit tests for KapuaEndBeforeStartTimeException class\nAdded Junit tests for KapuaEntityNotFoundException class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-09-15T12:17:41Z", "type": "forcePushed"}]}