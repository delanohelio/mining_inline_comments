{"pr_number": 3014, "pr_title": "Added Junit Tests for LocalCache Class", "pr_createdAt": "2020-07-06T09:26:20Z", "pr_url": "https://github.com/eclipse/kapua/pull/3014", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxNDUwMA==", "url": "https://github.com/eclipse/kapua/pull/3014#discussion_r459914500", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "author": "Coduz", "createdAt": "2020-07-24T08:18:12Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/cache/LocalCacheTest.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.cache;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.ArrayList;\n+\n+@Category(JUnitTests.class)\n+public class LocalCacheTest extends Assert {\n+\n+    @Test\n+    public void localCacheTest1() {\n+        int[] sizeMaxList = new int[]{0, 1, 10, 1000, 10000, 2147483647};\n+        int[] expireAfterList = new int[]{0, 1, 10, 1000, 10000, 2147483647};\n+        Object[] defaultValueList = new Object[]{0, 10, 100000, \"String\", 'c', -10, -1000000000, -100000000000L, 10L, 10.0f, null, 10.10d, true, false,};\n+        int invalidNegativeSizeMax = -1;\n+        int invalidNegativeExpireAfter = -1;\n+        IllegalArgumentException illegalArgumentExceptionSizeMax = new IllegalArgumentException(\"maximum size must not be negative\");\n+        IllegalArgumentException illegalArgumentExceptionExpireAfter = new IllegalArgumentException(\"duration cannot be negative: \" + invalidNegativeExpireAfter + \" SECONDS\");\n+\n+        for (int sizeMax : sizeMaxList) {\n+            for (int expireAfter : expireAfterList) {\n+                for (Object defaultValue : defaultValueList) {\n+                    LocalCache<Object, Object> localCache = new LocalCache<>(sizeMax, expireAfter, defaultValue);\n+                    assertNotNull(localCache);", "originalCommit": "7e7bedc412757b1774c345a0fd859d571c35544e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxNDUzOA==", "url": "https://github.com/eclipse/kapua/pull/3014#discussion_r459914538", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "author": "Coduz", "createdAt": "2020-07-24T08:18:17Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/cache/LocalCacheTest.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.cache;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.ArrayList;\n+\n+@Category(JUnitTests.class)\n+public class LocalCacheTest extends Assert {\n+\n+    @Test\n+    public void localCacheTest1() {\n+        int[] sizeMaxList = new int[]{0, 1, 10, 1000, 10000, 2147483647};\n+        int[] expireAfterList = new int[]{0, 1, 10, 1000, 10000, 2147483647};\n+        Object[] defaultValueList = new Object[]{0, 10, 100000, \"String\", 'c', -10, -1000000000, -100000000000L, 10L, 10.0f, null, 10.10d, true, false,};\n+        int invalidNegativeSizeMax = -1;\n+        int invalidNegativeExpireAfter = -1;\n+        IllegalArgumentException illegalArgumentExceptionSizeMax = new IllegalArgumentException(\"maximum size must not be negative\");\n+        IllegalArgumentException illegalArgumentExceptionExpireAfter = new IllegalArgumentException(\"duration cannot be negative: \" + invalidNegativeExpireAfter + \" SECONDS\");\n+\n+        for (int sizeMax : sizeMaxList) {\n+            for (int expireAfter : expireAfterList) {\n+                for (Object defaultValue : defaultValueList) {\n+                    LocalCache<Object, Object> localCache = new LocalCache<>(sizeMax, expireAfter, defaultValue);\n+                    assertNotNull(localCache);\n+                    assertEquals(\"Expected and actual values should be the same.\", defaultValue, localCache.get(defaultValueList));\n+                    assertThat(\"LocalCache object expected.\", localCache, IsInstanceOf.instanceOf(LocalCache.class));", "originalCommit": "7e7bedc412757b1774c345a0fd859d571c35544e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxNDg2Mw==", "url": "https://github.com/eclipse/kapua/pull/3014#discussion_r459914863", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "author": "Coduz", "createdAt": "2020-07-24T08:18:59Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/cache/LocalCacheTest.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.cache;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.ArrayList;\n+\n+@Category(JUnitTests.class)\n+public class LocalCacheTest extends Assert {\n+\n+    @Test\n+    public void localCacheTest1() {\n+        int[] sizeMaxList = new int[]{0, 1, 10, 1000, 10000, 2147483647};\n+        int[] expireAfterList = new int[]{0, 1, 10, 1000, 10000, 2147483647};\n+        Object[] defaultValueList = new Object[]{0, 10, 100000, \"String\", 'c', -10, -1000000000, -100000000000L, 10L, 10.0f, null, 10.10d, true, false,};\n+        int invalidNegativeSizeMax = -1;\n+        int invalidNegativeExpireAfter = -1;\n+        IllegalArgumentException illegalArgumentExceptionSizeMax = new IllegalArgumentException(\"maximum size must not be negative\");\n+        IllegalArgumentException illegalArgumentExceptionExpireAfter = new IllegalArgumentException(\"duration cannot be negative: \" + invalidNegativeExpireAfter + \" SECONDS\");\n+\n+        for (int sizeMax : sizeMaxList) {\n+            for (int expireAfter : expireAfterList) {\n+                for (Object defaultValue : defaultValueList) {\n+                    LocalCache<Object, Object> localCache = new LocalCache<>(sizeMax, expireAfter, defaultValue);\n+                    assertNotNull(localCache);\n+                    assertEquals(\"Expected and actual values should be the same.\", defaultValue, localCache.get(defaultValueList));\n+                    assertThat(\"LocalCache object expected.\", localCache, IsInstanceOf.instanceOf(LocalCache.class));\n+                }\n+            }\n+        }\n+        for (int expireAfter : expireAfterList) {\n+            for (Object defaultValue : defaultValueList) {\n+                try {\n+                    LocalCache<Object, Object> localCache = new LocalCache<>(invalidNegativeSizeMax, expireAfter, defaultValue);\n+                } catch (Exception e) {\n+                    assertEquals(\"Expected IllegalArgumentException: maximum size must not be negative.\", illegalArgumentExceptionSizeMax.toString(), e.toString());\n+                }\n+            }\n+        }\n+        for (int sizeMax : sizeMaxList) {\n+            for (Object defaultValue : defaultValueList) {\n+                try {\n+                    LocalCache<Object, Object> localCache = new LocalCache<>(sizeMax, invalidNegativeExpireAfter, defaultValue);\n+                } catch (Exception e) {\n+                    assertEquals(\"Expected java.lang.IllegalArgumentException: duration cannot be negative: \" + invalidNegativeExpireAfter + \" SECONDS\", illegalArgumentExceptionExpireAfter.toString(), e.toString());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void localCacheTest2() {\n+        int[] sizeMaxList = new int[]{0, 10, 1000, 10000, 2147483647};\n+        Object[] defaultValueList = new Object[]{0, 10, 100000, \"String\", 'c', -10, -1000000000, -100000000000L, 10L, 10.0f, null, 10.10d, true, false,};\n+        int invalidNegativeSizeMax = -1;\n+        IllegalArgumentException illegalArgumentExceptionSizeMax = new IllegalArgumentException(\"maximum size must not be negative\");\n+\n+        for (int sizeMax : sizeMaxList) {\n+            for (Object defaultValue : defaultValueList) {\n+                LocalCache<Object, Object> localCache = new LocalCache<>(sizeMax, defaultValue);\n+                assertNotNull(\"Null not expected.\", localCache);", "originalCommit": "7e7bedc412757b1774c345a0fd859d571c35544e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxNDkxNQ==", "url": "https://github.com/eclipse/kapua/pull/3014#discussion_r459914915", "bodyText": "Same things as #3008 - https://github.com/eclipse/kapua/pull/3008/files#diff-031d59073d14c177c331d7ce9d2a83d8R67", "author": "Coduz", "createdAt": "2020-07-24T08:19:06Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/cache/LocalCacheTest.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.cache;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.hamcrest.core.IsInstanceOf;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.ArrayList;\n+\n+@Category(JUnitTests.class)\n+public class LocalCacheTest extends Assert {\n+\n+    @Test\n+    public void localCacheTest1() {\n+        int[] sizeMaxList = new int[]{0, 1, 10, 1000, 10000, 2147483647};\n+        int[] expireAfterList = new int[]{0, 1, 10, 1000, 10000, 2147483647};\n+        Object[] defaultValueList = new Object[]{0, 10, 100000, \"String\", 'c', -10, -1000000000, -100000000000L, 10L, 10.0f, null, 10.10d, true, false,};\n+        int invalidNegativeSizeMax = -1;\n+        int invalidNegativeExpireAfter = -1;\n+        IllegalArgumentException illegalArgumentExceptionSizeMax = new IllegalArgumentException(\"maximum size must not be negative\");\n+        IllegalArgumentException illegalArgumentExceptionExpireAfter = new IllegalArgumentException(\"duration cannot be negative: \" + invalidNegativeExpireAfter + \" SECONDS\");\n+\n+        for (int sizeMax : sizeMaxList) {\n+            for (int expireAfter : expireAfterList) {\n+                for (Object defaultValue : defaultValueList) {\n+                    LocalCache<Object, Object> localCache = new LocalCache<>(sizeMax, expireAfter, defaultValue);\n+                    assertNotNull(localCache);\n+                    assertEquals(\"Expected and actual values should be the same.\", defaultValue, localCache.get(defaultValueList));\n+                    assertThat(\"LocalCache object expected.\", localCache, IsInstanceOf.instanceOf(LocalCache.class));\n+                }\n+            }\n+        }\n+        for (int expireAfter : expireAfterList) {\n+            for (Object defaultValue : defaultValueList) {\n+                try {\n+                    LocalCache<Object, Object> localCache = new LocalCache<>(invalidNegativeSizeMax, expireAfter, defaultValue);\n+                } catch (Exception e) {\n+                    assertEquals(\"Expected IllegalArgumentException: maximum size must not be negative.\", illegalArgumentExceptionSizeMax.toString(), e.toString());\n+                }\n+            }\n+        }\n+        for (int sizeMax : sizeMaxList) {\n+            for (Object defaultValue : defaultValueList) {\n+                try {\n+                    LocalCache<Object, Object> localCache = new LocalCache<>(sizeMax, invalidNegativeExpireAfter, defaultValue);\n+                } catch (Exception e) {\n+                    assertEquals(\"Expected java.lang.IllegalArgumentException: duration cannot be negative: \" + invalidNegativeExpireAfter + \" SECONDS\", illegalArgumentExceptionExpireAfter.toString(), e.toString());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void localCacheTest2() {\n+        int[] sizeMaxList = new int[]{0, 10, 1000, 10000, 2147483647};\n+        Object[] defaultValueList = new Object[]{0, 10, 100000, \"String\", 'c', -10, -1000000000, -100000000000L, 10L, 10.0f, null, 10.10d, true, false,};\n+        int invalidNegativeSizeMax = -1;\n+        IllegalArgumentException illegalArgumentExceptionSizeMax = new IllegalArgumentException(\"maximum size must not be negative\");\n+\n+        for (int sizeMax : sizeMaxList) {\n+            for (Object defaultValue : defaultValueList) {\n+                LocalCache<Object, Object> localCache = new LocalCache<>(sizeMax, defaultValue);\n+                assertNotNull(\"Null not expected.\", localCache);\n+                assertEquals(\"Expected and actual values should be the same.\", defaultValue, localCache.get(defaultValueList));\n+                assertThat(\"LocalCache object expected.\", localCache, IsInstanceOf.instanceOf(LocalCache.class));", "originalCommit": "7e7bedc412757b1774c345a0fd859d571c35544e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da8fd52afcec3235711f18d170da6cd26d1fe2c0", "url": "https://github.com/eclipse/kapua/commit/da8fd52afcec3235711f18d170da6cd26d1fe2c0", "message": "Added Junit Tests for LocalCache Class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-07-24T10:15:56Z", "type": "forcePushed"}, {"oid": "6971f43759c3cd52db838cca1dedf8fbbe3fa380", "url": "https://github.com/eclipse/kapua/commit/6971f43759c3cd52db838cca1dedf8fbbe3fa380", "message": "Added Junit Tests for LocalCache Class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-07-29T10:09:19Z", "type": "forcePushed"}, {"oid": "db2a3657b78b42e76b510f38cea875da78cd1669", "url": "https://github.com/eclipse/kapua/commit/db2a3657b78b42e76b510f38cea875da78cd1669", "message": "Added Junit Tests for LocalCache Class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-09-02T08:29:14Z", "type": "forcePushed"}, {"oid": "930d2037ec879e9ea4fdbea22c14f46c179e9813", "url": "https://github.com/eclipse/kapua/commit/930d2037ec879e9ea4fdbea22c14f46c179e9813", "message": "Added Junit Tests for LocalCache Class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-09-02T10:12:37Z", "type": "commit"}, {"oid": "930d2037ec879e9ea4fdbea22c14f46c179e9813", "url": "https://github.com/eclipse/kapua/commit/930d2037ec879e9ea4fdbea22c14f46c179e9813", "message": "Added Junit Tests for LocalCache Class\n\nSigned-off-by: Sonja <sonja.matic@comtrade.com>", "committedDate": "2020-09-02T10:12:37Z", "type": "forcePushed"}]}