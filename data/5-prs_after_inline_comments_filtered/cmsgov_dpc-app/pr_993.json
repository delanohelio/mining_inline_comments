{"pr_number": 993, "pr_title": "DPC-389 tweak logging to one line", "pr_createdAt": "2020-08-20T02:53:37Z", "pr_url": "https://github.com/CMSgov/dpc-app/pull/993", "timeline": [{"oid": "321c4255de7f228f7436b2dc2ebe40f883dc9310", "url": "https://github.com/CMSgov/dpc-app/commit/321c4255de7f228f7436b2dc2ebe40f883dc9310", "message": "tweak logging to one line", "committedDate": "2020-08-20T02:50:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MjI2Nw==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r473562267", "bodyText": "Refactor this method to not always return the same value.", "author": "codeclimate", "createdAt": "2020-08-20T03:13:44Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,71 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n \n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"lookBackDateCompare={}-{}, providerCompare={}-{}, organizationCompare={}-{}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n+\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n+\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {", "originalCommit": "321c4255de7f228f7436b2dc2ebe40f883dc9310", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MjI3MA==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r473562270", "bodyText": "Call \"optionalBillingPeriod.isPresent()\" before accessing the value.", "author": "codeclimate", "createdAt": "2020-08-20T03:13:44Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,71 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n \n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"lookBackDateCompare={}-{}, providerCompare={}-{}, organizationCompare={}-{}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n+\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n+\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {\n+        Optional<Date> optionalBillingPeriod = Optional.ofNullable(billingPeriod);\n+        Optional<String> optionalProviderID = Optional.ofNullable(providerID);\n+        Optional<String> optionalOrganizationID = Optional.ofNullable(organizationID);\n+        Optional<String> optionalEobOrganizationID = Optional.ofNullable(eobOrganizationID);\n+\n+        if (optionalBillingPeriod.isEmpty() || optionalProviderID.isEmpty() || optionalOrganizationID.isEmpty() || optionalEobOrganizationID.isEmpty()) {\n             LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n             return false;\n         }\n \n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n+        long lookBackMonthsDifference = getMonthsDifference(optionalBillingPeriod.get(), operationsConfig.getLookBackDate());", "originalCommit": "321c4255de7f228f7436b2dc2ebe40f883dc9310", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MjI3MQ==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r473562271", "bodyText": "Method passLookBack has 6 arguments (exceeds 4 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-08-20T03:13:44Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,71 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n \n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"lookBackDateCompare={}-{}, providerCompare={}-{}, organizationCompare={}-{}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n+\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n+\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {", "originalCommit": "321c4255de7f228f7436b2dc2ebe40f883dc9310", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyODc3Nw==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r473928777", "bodyText": "Would it be easier for us to shape the Splunk results if we give each value its own key? I'm thinking that would allow more flexibility than putting values together with -.", "author": "em1", "createdAt": "2020-08-20T12:22:40Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,71 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n \n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"lookBackDateCompare={}-{}, providerCompare={}-{}, organizationCompare={}-{}, passLookBack={}\",", "originalCommit": "321c4255de7f228f7436b2dc2ebe40f883dc9310", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6489d6ed5ab811dd022438c3efd04b79d2cb2399", "url": "https://github.com/CMSgov/dpc-app/commit/6489d6ed5ab811dd022438c3efd04b79d2cb2399", "message": "change log variables, fix a code climate complaint", "committedDate": "2020-08-20T14:53:26Z", "type": "commit"}, {"oid": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac", "url": "https://github.com/CMSgov/dpc-app/commit/c28e3c4df8afe31acaa4a573a46a161f7284e4ac", "message": "Merge branch 'master' into DPC-389-tweak-logging", "committedDate": "2020-08-20T14:54:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NTMwOQ==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474065309", "bodyText": "Consider simplifying this complex logical expression.", "author": "codeclimate", "createdAt": "2020-08-20T15:20:52Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,68 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n-\n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n-\n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, eobProviders={}, jobProvider={}, eobOrganization={} jobOrganization={}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n \n-        LOGGER.info(\"LookBack stats eobWithinLookBackLimit={}, eobContainsProvider={}, eobRelatedToOrganization={}, eobMonthsDifference={}, hasClaim={}\",\n-                eobWithinLookBackLimit, eobContainsProvider, eobRelatedToOrganization, lookBackMonthsDifference, hasClaim);\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n \n-        return hasClaim;\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {\n+        Optional<Date> optionalBillingPeriod = Optional.ofNullable(billingPeriod);\n+        Optional<String> optionalProviderID = Optional.ofNullable(providerID);\n+        Optional<String> optionalOrganizationID = Optional.ofNullable(organizationID);\n+        Optional<String> optionalEobOrganizationID = Optional.ofNullable(eobOrganizationID);\n+\n+        boolean result = false;\n+        if (optionalBillingPeriod.isPresent() && optionalProviderID.isPresent() && optionalOrganizationID.isPresent() && optionalEobOrganizationID.isPresent()) {", "originalCommit": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4NTE0Ng==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474285146", "bodyText": "For DPC-572, it would be helpful to have these 3 booleans as well as the lookBackMonthsDifference included in the logs. Could we return a list of these values to the logging statement and log those as well as the result of the aggregation of them?", "author": "jonfulk", "createdAt": "2020-08-20T21:33:40Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,74 +42,68 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n         Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n \n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n-\n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n-\n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n+        boolean passLookBack = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, eobProviderNPIs, withinMonth);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, eobProviders={}, jobProvider={}, eobOrganization={} jobOrganization={}, passLookBack={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), eobProviderNPIs, providerNPI, eobOrganizationID, organizationID, passLookBack);\n \n-        LOGGER.info(\"LookBack stats eobWithinLookBackLimit={}, eobContainsProvider={}, eobRelatedToOrganization={}, eobMonthsDifference={}, hasClaim={}\",\n-                eobWithinLookBackLimit, eobContainsProvider, eobRelatedToOrganization, lookBackMonthsDifference, hasClaim);\n+        MDC.remove(EOB_ID);\n+        return passLookBack;\n+    }\n \n-        return hasClaim;\n+    private boolean passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {\n+        Optional<Date> optionalBillingPeriod = Optional.ofNullable(billingPeriod);\n+        Optional<String> optionalProviderID = Optional.ofNullable(providerID);\n+        Optional<String> optionalOrganizationID = Optional.ofNullable(organizationID);\n+        Optional<String> optionalEobOrganizationID = Optional.ofNullable(eobOrganizationID);\n+\n+        boolean result = false;\n+        if (optionalBillingPeriod.isPresent() && optionalProviderID.isPresent() && optionalOrganizationID.isPresent() && optionalEobOrganizationID.isPresent()) {\n+            long lookBackMonthsDifference = getMonthsDifference(optionalBillingPeriod.get(), operationsConfig.getLookBackDate());\n+            boolean eobContainsProvider = eobProviderNPIs.contains(optionalProviderID.get());\n+            boolean eobRelatedToOrganization = optionalOrganizationID.get().equals(optionalEobOrganizationID.get());\n+            boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;", "originalCommit": "c28e3c4df8afe31acaa4a573a46a161f7284e4ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5NTMwNQ==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474295305", "bodyText": "I think we used to have them but now it prints out the value found in EOB and the Value found in the JOB, wile the match result is not provided we can perform that check in Splunk.", "author": "MrMorie", "createdAt": "2020-08-20T21:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4NTE0Ng=="}], "type": "inlineReview"}, {"oid": "caf358053072069b55358b8b46eee4f9e88b8ee4", "url": "https://github.com/CMSgov/dpc-app/commit/caf358053072069b55358b8b46eee4f9e88b8ee4", "message": "log more", "committedDate": "2020-08-20T22:30:24Z", "type": "commit"}, {"oid": "cab2a2dd7f66eea8b364243f4a97ccc053dbede5", "url": "https://github.com/CMSgov/dpc-app/commit/cab2a2dd7f66eea8b364243f4a97ccc053dbede5", "message": "Merge remote-tracking branch 'origin/DPC-389-tweak-logging' into DPC-389-tweak-logging", "committedDate": "2020-08-20T22:30:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNDgxNQ==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474314815", "bodyText": "Method passLookBack has 6 arguments (exceeds 4 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-08-20T22:52:52Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,89 +42,82 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n-\n-        Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n-\n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n+        Pair<String, Set<String>> npis = extractPractionerNPIs(explanationOfBenefit);\n+        Set<String> allNPIs = new HashSet<>(npis.getRight());\n+        allNPIs.add(npis.getLeft());\n \n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n+        LookBackAnswer lookBackAnswer = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, allNPIs, withinMonth);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, monthsDifference={}, eobProvider={}, eobCareTeamProviders={}, jobProvider={}, eobOrganization={} jobOrganization={}, withinLimit={}, eobProviderMatch={}, eobOrganizationMatch={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), lookBackAnswer.getBillingDateMonthsFromNow(), npis.getLeft(), npis.getRight(), providerNPI, eobOrganizationID,\n+                organizationID, lookBackAnswer.isMatchLookBackLimitCriteria(), lookBackAnswer.isMatchProvidersCriteria(), lookBackAnswer.isMatchOrganizationCriteria());\n \n-        LOGGER.info(\"LookBack stats eobWithinLookBackLimit={}, eobContainsProvider={}, eobRelatedToOrganization={}, eobMonthsDifference={}, hasClaim={}\",\n-                eobWithinLookBackLimit, eobContainsProvider, eobRelatedToOrganization, lookBackMonthsDifference, hasClaim);\n+        MDC.remove(EOB_ID);\n+        return lookBackAnswer.answer();\n+    }\n \n-        return hasClaim;\n+    private LookBackAnswer passLookBack(Date billingPeriod, String providerID, String organizationID, String eobOrganizationID, Set<String> eobProviderNPIs, long withinMonth) {", "originalCommit": "cab2a2dd7f66eea8b364243f4a97ccc053dbede5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "971d467f8b025dcf40efca332c3d53e3913d6b0e", "url": "https://github.com/CMSgov/dpc-app/commit/971d467f8b025dcf40efca332c3d53e3913d6b0e", "message": "fix missing comma", "committedDate": "2020-08-20T22:53:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0MDI2OQ==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474740269", "bodyText": "Based on the conversation yesterday, you might want to break this out into two separate variables:\n\nOrg NPI matches EOB.organization.\nOrg NPI matches EOB.careTeam.\n\nOr that might be part of another ticket/PR. \ud83e\udd37\nIf it is part of another ticket, though, I'd probably rename this one to be clearer, e.g. matchOrganizationNPIToOrganizationCriteria (with a future matchOrganizationNPIToCareTeam field coming in that later ticket).", "author": "karlmdavis", "createdAt": "2020-08-21T14:38:30Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackAnswer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package gov.cms.dpc.aggregation.service;\n+\n+public class LookBackAnswer {\n+\n+    private boolean matchLookBackLimitCriteria;\n+    private boolean matchProvidersCriteria;\n+    private boolean matchOrganizationCriteria;", "originalCommit": "971d467f8b025dcf40efca332c3d53e3913d6b0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NDU5Mw==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474774593", "bodyText": "that is an ask in another ticket/future PR", "author": "MrBilnon", "createdAt": "2020-08-21T15:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0MDI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NzcyNw==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474747727", "bodyText": "Am I understanding this correctly? For every rostered (but not yet verified-via-lookback bene), we're logging:\n\nFor each of their claims:\n\nThe claim ID, and associating that with:\n\nThe claim's service date.\nAll of the NPIs from the claim (via EOB.provider, EOB.organization, and EOB.careTeam).\n\n\n\n\n\nIf so, that seems fine by me, but it's also the kind of thing I'd run past Jason to double-check. Have you?\nAlso, a suggestion: because you're doing this detailed logging per-claim, you don't need to do the detailed logging that I was suggesting at the aggregate level, but since you still want that calculation you're setting yourselves up for having to create what feels like a gnarly parsing, aggregation, and math query in Splunk. Personally, I'd do that in the Java code, instead, in whatever code you have that's using LookbackServiceImpl. hasClaimWithin(...). It's likely easier to do in app code and would result in a lot less logging volume, but (I think) more logging value. YMMV, though.", "author": "karlmdavis", "createdAt": "2020-08-21T14:51:08Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/service/LookBackServiceImpl.java", "diffHunk": "@@ -39,89 +42,82 @@ public LookBackServiceImpl(RosterDAO rosterDAO, OrganizationDAO organizationDAO,\n     @UnitOfWork(readOnly = true)\n     public String getProviderNPIFromRoster(UUID orgUUID, String providerOrRosterID, String patientMBI) {\n         //Expect only one roster for the parameters, otherwise return null\n-        String npi = rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n-        LOGGER.info(\"jobProviderNPI={}\", npi);\n-        return npi;\n+        return rosterDAO.retrieveProviderNPIFromRoster(orgUUID, UUID.fromString(providerOrRosterID), patientMBI).orElse(null);\n     }\n \n     @Override\n     @UnitOfWork(readOnly = true)\n-    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerUUID, long withinMonth) {\n-        Optional<Date> billingPeriod = Optional.ofNullable(explanationOfBenefit)\n+    public boolean hasClaimWithin(ExplanationOfBenefit explanationOfBenefit, UUID organizationUUID, String providerNPI, long withinMonth) {\n+        MDC.put(EOB_ID, explanationOfBenefit.getId());\n+        Date billingPeriod = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getBillablePeriod)\n-                .map(Period::getEnd);\n-\n-        Optional<String> providerID = Optional.ofNullable(providerUUID);\n+                .map(Period::getEnd)\n+                .orElse(null);\n \n-        Optional<String> organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID);\n+        String organizationID = organizationDAO.fetchOrganizationNPI(organizationUUID).orElse(null);\n \n-        Optional<String> eobOrganizationID = Optional.ofNullable(explanationOfBenefit)\n+        String eobOrganizationID = Optional.of(explanationOfBenefit)\n                 .map(ExplanationOfBenefit::getOrganization)\n                 .map(Reference::getIdentifier)\n                 .filter(i -> DPCIdentifierSystem.NPPES.getSystem().equals(i.getSystem()))\n-                .map(Identifier::getValue);\n-\n-        Set<String> eobProviderNPIs = extractPractionerNPIs(explanationOfBenefit);\n-\n-        LOGGER.info(\"billingPeriod={}\", billingPeriod.orElse(null));\n-        LOGGER.info(\"eobOrganizationID={}\", eobOrganizationID.orElse(null));\n-        LOGGER.info(\"jobOrganizationID={}\", organizationID.orElse(null));\n-\n-        if (billingPeriod.isEmpty() || providerID.isEmpty() || organizationID.isEmpty() || eobOrganizationID.isEmpty()) {\n-            LOGGER.info(\"eob BillingPeriod or job providerID or job organizationID or eob OrganizationID are null\");\n-            return false;\n-        }\n+                .map(Identifier::getValue)\n+                .orElse(null);\n \n-        long lookBackMonthsDifference = getMonthsDifference(billingPeriod.get(), operationsConfig.getLookBackDate());\n-        boolean eobContainsProvider = eobProviderNPIs.contains(providerID.get());\n-        boolean eobRelatedToOrganization = organizationID.get().equals(eobOrganizationID.get());\n-        boolean eobWithinLookBackLimit = lookBackMonthsDifference < withinMonth;\n+        Pair<String, Set<String>> npis = extractPractionerNPIs(explanationOfBenefit);\n+        Set<String> allNPIs = new HashSet<>(npis.getRight());\n+        allNPIs.add(npis.getLeft());\n \n-        boolean hasClaim = eobWithinLookBackLimit\n-                && eobContainsProvider\n-                && eobRelatedToOrganization;\n+        LookBackAnswer lookBackAnswer = passLookBack(billingPeriod, providerNPI, organizationID, eobOrganizationID, allNPIs, withinMonth);\n+        LOGGER.info(\"billingPeriodDate={}, lookBackDate={}, monthsDifference={}, eobProvider={}, eobCareTeamProviders={}, jobProvider={}, eobOrganization={}, jobOrganization={}, withinLimit={}, eobProviderMatch={}, eobOrganizationMatch={}\",\n+                billingPeriod, operationsConfig.getLookBackDate(), lookBackAnswer.getBillingDateMonthsFromNow(), npis.getLeft(), npis.getRight(), providerNPI, eobOrganizationID,\n+                organizationID, lookBackAnswer.isMatchLookBackLimitCriteria(), lookBackAnswer.isMatchProvidersCriteria(), lookBackAnswer.isMatchOrganizationCriteria());", "originalCommit": "971d467f8b025dcf40efca332c3d53e3913d6b0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1Nzc0Mw==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474757743", "bodyText": "Am I understanding this correctly? For every rostered (but not yet verified-via-lookback bene), we're logging:\n\n\nFor each of their claims:\n\n\nThe claim ID, and associating that with:\n\nThe claim's service date.\nAll of the NPIs from the claim (via EOB.provider, EOB.organization, and EOB.careTeam).\n\n\n\n\n\nIf so, that seems fine by me, but it's also the kind of thing I'd run past Jason to double-check. Have you?\nAlso, a suggestion: because you're doing this detailed logging per-claim, you don't need to do the detailed logging that I was suggesting at the aggregate level, but since you still want that calculation you're setting yourselves up for having to create what feels like a gnarly parsing, aggregation, and math query in Splunk. Personally, I'd do that in the Java code, instead, in whatever code you have that's using LookbackServiceImpl. hasClaimWithin(...). It's likely easier to do in app code and would result in a lot less logging volume, but (I think) more logging value. YMMV, though.\n\nI agree it would usually be easier to put the aggregation logs in the java code, but the caller of the hasClaims method is wrapped up in a RxJava flowable pipeline and it would be difficult and or a lot more rewrite to our code to be able to aggregate all the EoBs for a patient. Also, yes we will double check with Jason before this is merged in.", "author": "MrBilnon", "createdAt": "2020-08-21T15:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NzcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2OTQwMg==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474769402", "bodyText": "@karlmdavis forgot this, but the information we are logging has already been reviewed by Jason, the only thing new is the claim id and that we can tie this information to a particular claim.", "author": "MrBilnon", "createdAt": "2020-08-21T15:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NzcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MDA0NQ==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474770045", "bodyText": "Am I understanding this correctly? For every rostered (but not yet verified-via-lookback bene), we're logging:\n\n\nFor each of their claims:\nThe claim ID, and associating that with:\nThe claim's service date.\nAll of the NPIs from the claim (via EOB.provider, EOB.organization, and EOB.careTeam).\nIf so, that seems fine by me, but it's also the kind of thing I'd run past Jason to double-check. Have you?\n\n@karlmdavis The only additional data being logged in this PR is the claim ID; the main utility of the change is to consolidate the data into a single log line.", "author": "dhgreene", "createdAt": "2020-08-21T15:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NzcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3Mjk0Mw==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474772943", "bodyText": "I get that you're not changing much here, but I'd just check with Jason that it's cool to have the net effect landing in our logs. (I spend a decent amount of time wondering/worrying about how much of our raw data an attacker could reconstruct from our logs.)", "author": "karlmdavis", "createdAt": "2020-08-21T15:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NzcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3Mzk1MQ==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474773951", "bodyText": "Oh, whoops! @whuang85 I should ask: what else is already in the logging context (i.e. MDC) at this point? Is the bene ID in there -- or the MBI hash, or some other sort of unique ID for benes?", "author": "karlmdavis", "createdAt": "2020-08-21T15:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NzcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMjEwNQ==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474812105", "bodyText": "@karlmdavis at this point, the patientID is also in the MDC", "author": "MrBilnon", "createdAt": "2020-08-21T16:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NzcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMjU0NA==", "url": "https://github.com/CMSgov/dpc-app/pull/993#discussion_r474812544", "bodyText": "@karlmdavis this is an example log when we run our e2e with our made up data\n{\"level\":\"INFO\",\"logger\":\"gov.cms.dpc.aggregation.service.LookBackService\",\"eobProvider\":\"null\",\"eobOrganizationMatch\":\"true\",\"thread\":\"RxComputationThreadPool-1\",\"eobProviderMatch\":\"true\",\"billingPeriodDate\":\"Sat Jul 01 00:00:00 UTC 2000\",\"mdc\":{\"eobID\":\"ExplanationOfBenefit/carrier--10192733163\",\"jobID\":\"0838a940-cdac-4418-9d22-8c23100dcf67\",\"batchID\":\"efe86286-4a36-4c8b-9d75-7e4d86a9fd7c\",\"patientID\":\"e411277fd31da392eaa9a45df53b0c429e365626182f50d9f35810d77f0e2756\"},\"jobOrganization\":\"2111111110\",\"eobCareTeamProviders\":\"[2459425221]\",\"jobProvider\":\"2459425221\",\"monthsDifference\":\"3\",\"withinLimit\":\"true\",\"timestamp\":\"2020-08-20T23:31:12.385+0000\",\"lookBackDate\":\"Sun Oct 01 00:00:00 UTC 2000\",\"eobOrganization\":\"2111111110\"}", "author": "MrBilnon", "createdAt": "2020-08-21T16:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NzcyNw=="}], "type": "inlineReview"}, {"oid": "7580a9f7156de0d35ef88bae2382dc76d1e9a608", "url": "https://github.com/CMSgov/dpc-app/commit/7580a9f7156de0d35ef88bae2382dc76d1e9a608", "message": "Merge branch 'master' into DPC-389-tweak-logging", "committedDate": "2020-08-21T15:29:38Z", "type": "commit"}, {"oid": "bd55e41deb9ea550abb7a6624f693e1eab983cbf", "url": "https://github.com/CMSgov/dpc-app/commit/bd55e41deb9ea550abb7a6624f693e1eab983cbf", "message": "Merge branch 'master' into DPC-389-tweak-logging", "committedDate": "2020-08-21T17:50:30Z", "type": "commit"}, {"oid": "16ead75aa96e50943305b86463fed3f6e49e0fe0", "url": "https://github.com/CMSgov/dpc-app/commit/16ead75aa96e50943305b86463fed3f6e49e0fe0", "message": "Merge branch 'master' into DPC-389-tweak-logging", "committedDate": "2020-08-24T17:28:04Z", "type": "commit"}]}