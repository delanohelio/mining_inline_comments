{"pr_number": 6552, "pr_title": "6735 embedded file extractor retries", "pr_createdAt": "2020-12-15T21:56:55Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/6552", "timeline": [{"oid": "bd2b50d56a5132519aee96b715cd94bc14532547", "url": "https://github.com/sleuthkit/autopsy/commit/bd2b50d56a5132519aee96b715cd94bc14532547", "message": "Initial changes for EFE retries", "committedDate": "2020-12-07T18:19:34Z", "type": "commit"}, {"oid": "59c1be114cad16e6c2f4a840f204902caff3b700", "url": "https://github.com/sleuthkit/autopsy/commit/59c1be114cad16e6c2f4a840f204902caff3b700", "message": "Merge remote-tracking branch 'upstream/develop' into 6735-embedded-file-extractor-retries", "committedDate": "2020-12-08T21:45:58Z", "type": "commit"}, {"oid": "230eec39a42434ff1ef9ac44afecd09a78703792", "url": "https://github.com/sleuthkit/autopsy/commit/230eec39a42434ff1ef9ac44afecd09a78703792", "message": "Interim check in for EFE retries", "committedDate": "2020-12-09T22:06:59Z", "type": "commit"}, {"oid": "5cb19bf4b9b561b2364c2378c036c8ca8bef4395", "url": "https://github.com/sleuthkit/autopsy/commit/5cb19bf4b9b561b2364c2378c036c8ca8bef4395", "message": "Merge remote-tracking branch 'upstream/develop' into 6735-embedded-file-extractor-retries", "committedDate": "2020-12-10T16:46:40Z", "type": "commit"}, {"oid": "30f89ee797be572cf68e8b6a47d2a91da1192adf", "url": "https://github.com/sleuthkit/autopsy/commit/30f89ee797be572cf68e8b6a47d2a91da1192adf", "message": "Merge remote-tracking branch 'upstream/develop' into 6735-embedded-file-extractor-retries", "committedDate": "2020-12-10T20:44:46Z", "type": "commit"}, {"oid": "5bee3eeea94a33202ae190ed89cd002b135a9373", "url": "https://github.com/sleuthkit/autopsy/commit/5bee3eeea94a33202ae190ed89cd002b135a9373", "message": "Merge remote-tracking branch 'upstream/develop' into 6735-embedded-file-extractor-retries", "committedDate": "2020-12-11T16:40:56Z", "type": "commit"}, {"oid": "f03643b59f01646b58319b3eeaab2ce839708922", "url": "https://github.com/sleuthkit/autopsy/commit/f03643b59f01646b58319b3eeaab2ce839708922", "message": "Interim check in of embedded file extrator hang fix", "committedDate": "2020-12-15T21:56:04Z", "type": "commit"}, {"oid": "79cee4d09aaa3844812706e835c5c9377726cf1f", "url": "https://github.com/sleuthkit/autopsy/commit/79cee4d09aaa3844812706e835c5c9377726cf1f", "message": "Tidying EFE for java,io,File retries", "committedDate": "2020-12-16T14:59:05Z", "type": "commit"}, {"oid": "87a2cb740e39962c5cafb2f3483fd37227fa7f59", "url": "https://github.com/sleuthkit/autopsy/commit/87a2cb740e39962c5cafb2f3483fd37227fa7f59", "message": "Tidying EFE class changes for java.io.File retries", "committedDate": "2020-12-16T17:35:00Z", "type": "commit"}, {"oid": "1b3ec602b57b5ac9622d80af4e1babaebc4ebebe", "url": "https://github.com/sleuthkit/autopsy/commit/1b3ec602b57b5ac9622d80af4e1babaebc4ebebe", "message": "Tidying EFE class changes for java.io.File retries", "committedDate": "2020-12-16T17:53:46Z", "type": "commit"}, {"oid": "724c7a639dba2475a6df9bca9d805d8d5737dca8", "url": "https://github.com/sleuthkit/autopsy/commit/724c7a639dba2475a6df9bca9d805d8d5737dca8", "message": "Interim check in for EFE hang solution", "committedDate": "2020-12-17T14:28:16Z", "type": "commit"}, {"oid": "37de3ddb46a3b890d55be5deabfc385579a8b600", "url": "https://github.com/sleuthkit/autopsy/commit/37de3ddb46a3b890d55be5deabfc385579a8b600", "message": "Merge remote-tracking branch 'upstream/develop' into 6735-embedded-file-extractor-retries", "committedDate": "2020-12-17T14:29:16Z", "type": "commit"}, {"oid": "8b36eebe70086bcba507f6ef531d82deb72ca3b2", "url": "https://github.com/sleuthkit/autopsy/commit/8b36eebe70086bcba507f6ef531d82deb72ca3b2", "message": "Interim check in for EFE hang solution", "committedDate": "2020-12-18T20:08:48Z", "type": "commit"}, {"oid": "3482aa70d4cf961eb7054fad8b4edfc4891f7b06", "url": "https://github.com/sleuthkit/autopsy/commit/3482aa70d4cf961eb7054fad8b4edfc4891f7b06", "message": "Merge remote-tracking branch 'upstream/develop' into 6735-embedded-file-extractor-retries", "committedDate": "2020-12-22T21:19:47Z", "type": "commit"}, {"oid": "8ab02aa2b95988e3b83f63229dabacbbfb171ef0", "url": "https://github.com/sleuthkit/autopsy/commit/8ab02aa2b95988e3b83f63229dabacbbfb171ef0", "message": "Merge remote-tracking branch 'upstream/develop' into 6735-embedded-file-extractor-retries", "committedDate": "2020-12-28T17:09:39Z", "type": "commit"}, {"oid": "6dc6507715c9a28ce44f289d3d7a581d4b0d456d", "url": "https://github.com/sleuthkit/autopsy/commit/6dc6507715c9a28ce44f289d3d7a581d4b0d456d", "message": "EFE retry handling refinements", "committedDate": "2020-12-28T18:19:37Z", "type": "commit"}, {"oid": "7f96111669a85c5cd755eef1bc3b1a8516c8976b", "url": "https://github.com/sleuthkit/autopsy/commit/7f96111669a85c5cd755eef1bc3b1a8516c8976b", "message": "EFE retry handling refinements", "committedDate": "2020-12-28T19:06:00Z", "type": "commit"}, {"oid": "054b0dfa06d43db9eba73f8fed700d24d46bdcc4", "url": "https://github.com/sleuthkit/autopsy/commit/054b0dfa06d43db9eba73f8fed700d24d46bdcc4", "message": "EFE retry handling refinements", "committedDate": "2020-12-28T19:49:16Z", "type": "commit"}, {"oid": "0082c71a2a96ae78c911a2dd232f7d9aaca46982", "url": "https://github.com/sleuthkit/autopsy/commit/0082c71a2a96ae78c911a2dd232f7d9aaca46982", "message": "Refinements to EFE file tasks", "committedDate": "2020-12-29T15:11:04Z", "type": "commit"}, {"oid": "07597cff12f09d8e65ab29b374f410f215281f45", "url": "https://github.com/sleuthkit/autopsy/commit/07597cff12f09d8e65ab29b374f410f215281f45", "message": "Refinements to EFE retries", "committedDate": "2020-12-30T15:11:31Z", "type": "commit"}, {"oid": "85739a82925d55119786abc2dbea0ad8641f8938", "url": "https://github.com/sleuthkit/autopsy/commit/85739a82925d55119786abc2dbea0ad8641f8938", "message": "Bug fixes for EFE file task retries", "committedDate": "2020-12-31T17:00:38Z", "type": "commit"}, {"oid": "dd91b15838200498b61b0ee429df58cfdcdac1ef", "url": "https://github.com/sleuthkit/autopsy/commit/dd91b15838200498b61b0ee429df58cfdcdac1ef", "message": "Comment out test code in EFE FileTaskExecutor", "committedDate": "2021-01-04T17:45:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4Mjc3Mg==", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r551482772", "bodyText": "I think I would note here that the units for the delay (and the timeout in the next getter) come from getTimeUnit()", "author": "APriestman", "createdAt": "2021-01-04T18:15:24Z", "path": "Core/src/org/sleuthkit/autopsy/threadutils/TaskRetryUtil.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.threadutils;\n+\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A utility that attempts a task a specified number of times with a specified\n+ * delay before each attempt and an optional timeout for each attempt. If an\n+ * attempt times out, the attempt will be cancelled and the next attempt, if\n+ * any, will begin.\n+ */\n+public class TaskRetryUtil {\n+\n+    private static final AtomicLong totalTasks = new AtomicLong();\n+    private static final AtomicLong totalTaskRetries = new AtomicLong();\n+    private static final AtomicLong totalTaskAttemptTimeOuts = new AtomicLong();\n+    private static final AtomicLong totalFailedTasks = new AtomicLong();\n+\n+    /**\n+     * Encapsulates the specification of a task attempt for the attemptTask()\n+     * utility.\n+     */\n+    public static class TaskAttempt {\n+\n+        private final Long delay;\n+        private final Long timeOut;\n+        private final TimeUnit timeUnit;\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility. The attempt will have neither\n+         * a delay nor a time out.\n+         *\n+         * @param delay         The delay before the task should be attempted,\n+         *                      may be zero or any positive integer.\n+         * @param delayTimeUnit The time unit for the delay before the task\n+         *                      should be attempted.\n+         */\n+        public TaskAttempt() {\n+            this.delay = 0L;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;\n+        }\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility.\n+         *\n+         * @param delay    The delay before the task should be attempted, may be\n+         *                 zero or any positive integer.\n+         * @param timeUnit The time unit for the delay before the task should be\n+         *                 attempted.\n+         */\n+        public TaskAttempt(Long delay, TimeUnit timeUnit) {\n+            if (delay == null || delay < 0) {\n+                throw new IllegalArgumentException(String.format(\"Argument for delay parameter = %d, must be zero or any positive integer\", delay));\n+            }\n+            if (timeUnit == null) {\n+                throw new IllegalArgumentException(\"Argument for timeUnit parameter is null\");\n+            }\n+            this.delay = delay;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;\n+        }\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility.\n+         *\n+         * @param delay    The delay before the task should be attempted, must\n+         *                 be zero or any positive integer.\n+         * @param timeOut  The timeout for the task attempt, must be zero or any\n+         *                 positive integer.\n+         * @param timeUnit The time unit for the delay before the task should be\n+         *                 attempted and the time out.\n+         */\n+        public TaskAttempt(Long delay, Long timeOut, TimeUnit timeUnit) {\n+            if (delay == null || delay < 0) {\n+                throw new IllegalArgumentException(String.format(\"Argument for delay parameter = %d, must be zero or any positive integer\", delay));\n+            }\n+            if (timeOut == null || timeOut < 0) {\n+                throw new IllegalArgumentException(String.format(\"Argument for timeOut parameter = %d, must be zero or any positive integer\", delay));\n+            }\n+            if (timeUnit == null) {\n+                throw new IllegalArgumentException(\"Argument for timeUnit parameter is null\");\n+            }\n+            this.delay = delay;\n+            this.timeOut = timeOut;\n+            this.timeUnit = timeUnit;\n+        }\n+\n+        /**\n+         * Gets the optional delay before the task should be attempted, may be\n+         * zero.\n+         *", "originalCommit": "dd91b15838200498b61b0ee429df58cfdcdac1ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzI0MQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r551483241", "bodyText": "I think this should be saving the passed in timeUnit", "author": "APriestman", "createdAt": "2021-01-04T18:16:11Z", "path": "Core/src/org/sleuthkit/autopsy/threadutils/TaskRetryUtil.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.threadutils;\n+\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A utility that attempts a task a specified number of times with a specified\n+ * delay before each attempt and an optional timeout for each attempt. If an\n+ * attempt times out, the attempt will be cancelled and the next attempt, if\n+ * any, will begin.\n+ */\n+public class TaskRetryUtil {\n+\n+    private static final AtomicLong totalTasks = new AtomicLong();\n+    private static final AtomicLong totalTaskRetries = new AtomicLong();\n+    private static final AtomicLong totalTaskAttemptTimeOuts = new AtomicLong();\n+    private static final AtomicLong totalFailedTasks = new AtomicLong();\n+\n+    /**\n+     * Encapsulates the specification of a task attempt for the attemptTask()\n+     * utility.\n+     */\n+    public static class TaskAttempt {\n+\n+        private final Long delay;\n+        private final Long timeOut;\n+        private final TimeUnit timeUnit;\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility. The attempt will have neither\n+         * a delay nor a time out.\n+         *\n+         * @param delay         The delay before the task should be attempted,\n+         *                      may be zero or any positive integer.\n+         * @param delayTimeUnit The time unit for the delay before the task\n+         *                      should be attempted.\n+         */\n+        public TaskAttempt() {\n+            this.delay = 0L;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;\n+        }\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility.\n+         *\n+         * @param delay    The delay before the task should be attempted, may be\n+         *                 zero or any positive integer.\n+         * @param timeUnit The time unit for the delay before the task should be\n+         *                 attempted.\n+         */\n+        public TaskAttempt(Long delay, TimeUnit timeUnit) {\n+            if (delay == null || delay < 0) {\n+                throw new IllegalArgumentException(String.format(\"Argument for delay parameter = %d, must be zero or any positive integer\", delay));\n+            }\n+            if (timeUnit == null) {\n+                throw new IllegalArgumentException(\"Argument for timeUnit parameter is null\");\n+            }\n+            this.delay = delay;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;", "originalCommit": "dd91b15838200498b61b0ee429df58cfdcdac1ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5NTc2MA==", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r551495760", "bodyText": "Yes, good catch, thanks.", "author": "rcordovano", "createdAt": "2021-01-04T18:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzI0MQ=="}], "type": "inlineReview"}, {"oid": "6cc9802024bb0d83393e86bf4ca6218c5984ebe2", "url": "https://github.com/sleuthkit/autopsy/commit/6cc9802024bb0d83393e86bf4ca6218c5984ebe2", "message": "Fix ctor field init bug, add comments for TaskRetryUtil", "committedDate": "2021-01-04T18:39:13Z", "type": "commit"}, {"oid": "9855533775c13f636ce7017f10a148a85781ce75", "url": "https://github.com/sleuthkit/autopsy/commit/9855533775c13f636ce7017f10a148a85781ce75", "message": "Bug fix for EFE file ops with retries", "committedDate": "2021-01-04T23:09:22Z", "type": "commit"}, {"oid": "7522caab384abcf6aa48cab83b10e72d0d3d109e", "url": "https://github.com/sleuthkit/autopsy/commit/7522caab384abcf6aa48cab83b10e72d0d3d109e", "message": "Remove test code from EFE file task executor", "committedDate": "2021-01-05T17:06:34Z", "type": "commit"}]}