{"pr_number": 5657, "pr_title": "6016 enable cr in sqlite", "pr_createdAt": "2020-02-24T16:14:21Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/5657", "timeline": [{"oid": "7dcaa72f7842dadc2adc4dbd42bb12a4055fe70a", "url": "https://github.com/sleuthkit/autopsy/commit/7dcaa72f7842dadc2adc4dbd42bb12a4055fe70a", "message": "updated default for flag previous devices", "committedDate": "2020-02-13T17:14:52Z", "type": "commit"}, {"oid": "79fda8405055115823a515d4e9e4c7e40b8c5d82", "url": "https://github.com/sleuthkit/autopsy/commit/79fda8405055115823a515d4e9e4c7e40b8c5d82", "message": "refactoring in EamDbSettingsDialog", "committedDate": "2020-02-13T22:37:55Z", "type": "commit"}, {"oid": "f13160df2e9eb6892bb5afc8d8a6d8cfe8257287", "url": "https://github.com/sleuthkit/autopsy/commit/f13160df2e9eb6892bb5afc8d8a6d8cfe8257287", "message": "adding DatabaseTestResult", "committedDate": "2020-02-13T22:39:12Z", "type": "commit"}, {"oid": "5befaf6b21c4387f8491291220c62f7f08e76704", "url": "https://github.com/sleuthkit/autopsy/commit/5befaf6b21c4387f8491291220c62f7f08e76704", "message": "continuing refactor of Central Repo Db Manager", "committedDate": "2020-02-14T14:14:14Z", "type": "commit"}, {"oid": "5419db1deae1c55c910be02ababd9082ac86c441", "url": "https://github.com/sleuthkit/autopsy/commit/5419db1deae1c55c910be02ababd9082ac86c441", "message": "working through refactoring of classes", "committedDate": "2020-02-14T17:32:09Z", "type": "commit"}, {"oid": "49bf930794cebf69f75033859e9aa54ec5811889", "url": "https://github.com/sleuthkit/autopsy/commit/49bf930794cebf69f75033859e9aa54ec5811889", "message": "finished refactoring", "committedDate": "2020-02-21T15:16:04Z", "type": "commit"}, {"oid": "851a3308ad5bb12945a484b48a641ee25cc20de7", "url": "https://github.com/sleuthkit/autopsy/commit/851a3308ad5bb12945a484b48a641ee25cc20de7", "message": "working through initial central repository enable", "committedDate": "2020-02-21T18:51:16Z", "type": "commit"}, {"oid": "1b18e39dcfaa31b851799bf8441e4d6556c747c5", "url": "https://github.com/sleuthkit/autopsy/commit/1b18e39dcfaa31b851799bf8441e4d6556c747c5", "message": "created central repo on first load", "committedDate": "2020-02-21T21:08:26Z", "type": "commit"}, {"oid": "22131f4491dde9a03543d7392550ba83c12d62ad", "url": "https://github.com/sleuthkit/autopsy/commit/22131f4491dde9a03543d7392550ba83c12d62ad", "message": "updated formatting in central repo initialization message", "committedDate": "2020-02-24T12:54:11Z", "type": "commit"}, {"oid": "fb00d635752ba8312cea72d0d9ecc109293841c7", "url": "https://github.com/sleuthkit/autopsy/commit/fb00d635752ba8312cea72d0d9ecc109293841c7", "message": "resolving merge conflicts from master", "committedDate": "2020-02-24T14:14:46Z", "type": "commit"}, {"oid": "fcf85ee0df4e856794a4946e7d9b914aaa5b4726", "url": "https://github.com/sleuthkit/autopsy/commit/fcf85ee0df4e856794a4946e7d9b914aaa5b4726", "message": "fix for exception on method", "committedDate": "2020-02-24T14:19:45Z", "type": "commit"}, {"oid": "bf4c252fed6792e0197d5eae9a678405328913e3", "url": "https://github.com/sleuthkit/autopsy/commit/bf4c252fed6792e0197d5eae9a678405328913e3", "message": "central repo code cleanup", "committedDate": "2020-02-24T15:03:52Z", "type": "commit"}, {"oid": "367bd69bddcc41a867e10128d8c27081bd8a3a4b", "url": "https://github.com/sleuthkit/autopsy/commit/367bd69bddcc41a867e10128d8c27081bd8a3a4b", "message": "central repo code cleanup", "committedDate": "2020-02-24T15:11:16Z", "type": "commit"}, {"oid": "8b09842bb50fb2bb086a9e9bff7f990edb070a9e", "url": "https://github.com/sleuthkit/autopsy/commit/8b09842bb50fb2bb086a9e9bff7f990edb070a9e", "message": "fix for licenses on new files in central repo", "committedDate": "2020-02-24T16:09:25Z", "type": "commit"}, {"oid": "0004afacd12a4f7a697ccfdf2c9c5810632107e2", "url": "https://github.com/sleuthkit/autopsy/commit/0004afacd12a4f7a697ccfdf2c9c5810632107e2", "message": "some more code cleanup", "committedDate": "2020-02-24T18:05:36Z", "type": "commit"}, {"oid": "86285c071c659a865743e68655a5ca0eb02e3a8e", "url": "https://github.com/sleuthkit/autopsy/commit/86285c071c659a865743e68655a5ca0eb02e3a8e", "message": "further cleanup of central repo code", "committedDate": "2020-02-24T18:37:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MTc4MQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5657#discussion_r384091781", "bodyText": "I think this should be \"obtain\"?", "author": "APriestman", "createdAt": "2020-02-25T19:55:18Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoDbManager.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2015-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coordinationservice.CoordinationService;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * Contains business logic for saving and validating settings for central repo\n+ */\n+public class CentralRepoDbManager {\n+\n+    private static final Logger logger = Logger.getLogger(CentralRepoDbManager.class.getName());\n+\n+    private static final String CENTRAL_REPO_DB_NAME = \"central_repository\";\n+\n+    /**\n+     * attains the database connectivity for central repository\n+     *\n+     * @return the CentralRepository object to connect to\n+     * @throws CentralRepoException\n+     */\n+    private static CentralRepository attainCentralRepository() throws CentralRepoException {\n+        //get connection\n+        try {\n+            return CentralRepository.getInstance();\n+        } catch (CentralRepoException ex) {\n+            logger.log(Level.SEVERE, \"Error updating central repository, unable to make connection\", ex);\n+            onUpgradeError(\"Error updating central repository, unable to make connection\",\n+                    Bundle.EamDbUtil_centralRepoConnectionFailed_message() + Bundle.EamDbUtil_centralRepoDisabled_message(), ex);\n+        }\n+\n+        // will never be reached\n+        return null;\n+    }\n+\n+    /**\n+     * attains central repository lock\n+     *\n+     * @param db the database connection\n+     * @return the lock if acquired\n+     * @throws CentralRepoException\n+     */\n+    private static CoordinationService.Lock attainCentralRepoLock(CentralRepository db) throws CentralRepoException {", "originalCommit": "86285c071c659a865743e68655a5ca0eb02e3a8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODAwOQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5657#discussion_r384098009", "bodyText": "oops.  will do.", "author": "gdicristofaro", "createdAt": "2020-02-25T20:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MTc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MjM1NQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5657#discussion_r384092355", "bodyText": "If this logic is correct there needs to be a comment explaining why it's defaulting to postgresql.", "author": "APriestman", "createdAt": "2020-02-25T19:56:19Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoDbManager.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2015-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coordinationservice.CoordinationService;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * Contains business logic for saving and validating settings for central repo\n+ */\n+public class CentralRepoDbManager {\n+\n+    private static final Logger logger = Logger.getLogger(CentralRepoDbManager.class.getName());\n+\n+    private static final String CENTRAL_REPO_DB_NAME = \"central_repository\";\n+\n+    /**\n+     * attains the database connectivity for central repository\n+     *\n+     * @return the CentralRepository object to connect to\n+     * @throws CentralRepoException\n+     */\n+    private static CentralRepository attainCentralRepository() throws CentralRepoException {\n+        //get connection\n+        try {\n+            return CentralRepository.getInstance();\n+        } catch (CentralRepoException ex) {\n+            logger.log(Level.SEVERE, \"Error updating central repository, unable to make connection\", ex);\n+            onUpgradeError(\"Error updating central repository, unable to make connection\",\n+                    Bundle.EamDbUtil_centralRepoConnectionFailed_message() + Bundle.EamDbUtil_centralRepoDisabled_message(), ex);\n+        }\n+\n+        // will never be reached\n+        return null;\n+    }\n+\n+    /**\n+     * attains central repository lock\n+     *\n+     * @param db the database connection\n+     * @return the lock if acquired\n+     * @throws CentralRepoException\n+     */\n+    private static CoordinationService.Lock attainCentralRepoLock(CentralRepository db) throws CentralRepoException {\n+        try {\n+            // This may return null if locking isn't supported, which is fine. It will\n+            // throw an exception if locking is supported but we can't get the lock\n+            // (meaning the database is in use by another user)\n+            return db.getExclusiveMultiUserDbLock();\n+            //perform upgrade\n+        } catch (CentralRepoException ex) {\n+            logger.log(Level.SEVERE, \"Error updating central repository, unable to acquire exclusive lock\", ex);\n+            onUpgradeError(\"Error updating central repository, unable to acquire exclusive lock\",\n+                    Bundle.EamDbUtil_exclusiveLockAquisitionFailure_message() + Bundle.EamDbUtil_centralRepoDisabled_message(), ex);\n+        }\n+\n+        // will never be reached\n+        return null;\n+    }\n+\n+    /**\n+     * updates central repository schema if necessary\n+     *\n+     * @param db the database connectivity\n+     * @param lock the acquired lock\n+     * @throws CentralRepoException\n+     */\n+    private static void updatedDbSchema(CentralRepository db, CoordinationService.Lock lock) throws CentralRepoException {\n+        try {\n+            db.upgradeSchema();\n+        } catch (CentralRepoException ex) {\n+            logger.log(Level.SEVERE, \"Error updating central repository\", ex);\n+            onUpgradeError(\"Error updating central repository\", ex.getUserMessage() + Bundle.EamDbUtil_centralRepoDisabled_message(), ex);\n+        } catch (SQLException ex) {\n+            logger.log(Level.SEVERE, \"Error updating central repository\", ex);\n+            onUpgradeError(\"Error updating central repository\",\n+                    Bundle.EamDbUtil_centralRepoUpgradeFailed_message() + Bundle.EamDbUtil_centralRepoDisabled_message(), ex);\n+        } catch (IncompatibleCentralRepoException ex) {\n+            logger.log(Level.SEVERE, \"Error updating central repository\", ex);\n+            onUpgradeError(\"Error updating central repository\",\n+                    ex.getMessage() + \"\\n\\n\" + Bundle.EamDbUtil_centralRepoUpgradeFailed_message() + Bundle.EamDbUtil_centralRepoDisabled_message(), ex);\n+        } finally {\n+            if (lock != null) {\n+                try {\n+                    lock.release();\n+                } catch (CoordinationService.CoordinationServiceException ex) {\n+                    logger.log(Level.SEVERE, \"Error releasing database lock\", ex);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Upgrade the current Central Reposity schema to the newest version. If the\n+     * upgrade fails, the Central Repository will be disabled and the current\n+     * settings will be cleared.\n+     */\n+    @NbBundle.Messages(value = {\"EamDbUtil.centralRepoDisabled.message= The Central Repository has been disabled.\", \"EamDbUtil.centralRepoUpgradeFailed.message=Failed to upgrade Central Repository.\", \"EamDbUtil.centralRepoConnectionFailed.message=Unable to connect to Central Repository.\", \"EamDbUtil.exclusiveLockAquisitionFailure.message=Unable to acquire exclusive lock for Central Repository.\"})\n+    public static void upgradeDatabase() throws CentralRepoException {\n+        if (!CentralRepository.isEnabled()) {\n+            return;\n+        }\n+\n+        CentralRepository db = attainCentralRepository();\n+\n+        //get lock necessary for upgrade\n+        if (db != null) {\n+            CoordinationService.Lock lock = attainCentralRepoLock(db);\n+            updatedDbSchema(db, lock);\n+        } else {\n+            onUpgradeError(\"Unable to connect to database\",\n+                    Bundle.EamDbUtil_centralRepoConnectionFailed_message() + Bundle.EamDbUtil_centralRepoDisabled_message(), null);\n+        }\n+    }\n+\n+    private static void onUpgradeError(String message, String desc, Exception innerException) throws CentralRepoException {\n+        // Disable the central repo and clear the current settings.\n+        try {\n+            if (null != CentralRepository.getInstance()) {\n+                CentralRepository.getInstance().shutdownConnections();\n+            }\n+        } catch (CentralRepoException ex2) {\n+            logger.log(Level.SEVERE, \"Error shutting down central repo connection pool\", ex2);\n+        }\n+        CentralRepoPlatforms.setSelectedPlatform(CentralRepoPlatforms.DISABLED.name());\n+        CentralRepoPlatforms.saveSelectedPlatform();\n+        if (innerException == null) {\n+            throw new CentralRepoException(message, desc);\n+        } else {\n+            throw new CentralRepoException(message, desc, innerException);\n+        }\n+    }\n+\n+    private DatabaseTestResult testingStatus;\n+    private CentralRepoPlatforms selectedPlatform;\n+\n+    private final PostgresCentralRepoSettings dbSettingsPostgres;\n+    private final SqliteCentralRepoSettings dbSettingsSqlite;\n+\n+    private boolean configurationChanged = false;\n+\n+    public CentralRepoDbManager() {\n+        dbSettingsPostgres = new PostgresCentralRepoSettings();\n+        dbSettingsSqlite = new SqliteCentralRepoSettings();\n+        selectedPlatform = CentralRepoPlatforms.getSelectedPlatform();\n+        if (selectedPlatform == null || selectedPlatform.equals(CentralRepoPlatforms.DISABLED)) {\n+            selectedPlatform = CentralRepoPlatforms.POSTGRESQL;", "originalCommit": "86285c071c659a865743e68655a5ca0eb02e3a8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwNDcwMA==", "url": "https://github.com/sleuthkit/autopsy/pull/5657#discussion_r384104700", "bodyText": "This originally came from the EamDbSettingsDialog constructor before I divided up the code.  https://github.com/sleuthkit/autopsy/blob/b805d2a1ec3f4bc16229a900a8d3859ba3355758/Core/src/org/sleuthkit/autopsy/centralrepository/optionspanel/EamDbSettingsDialog.java\nI think it is so the drop down populates with something if no choice is selected.  Is this something that needs to change all together?", "author": "gdicristofaro", "createdAt": "2020-02-25T20:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MjM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ2OTAxMA==", "url": "https://github.com/sleuthkit/autopsy/pull/5657#discussion_r384469010", "bodyText": "Ok it's probably fine but please add a comment about what's going on.", "author": "APriestman", "createdAt": "2020-02-26T12:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MjM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4Njk3Nw==", "url": "https://github.com/sleuthkit/autopsy/pull/5657#discussion_r384486977", "bodyText": "Ok.  It should be in the PR now.", "author": "gdicristofaro", "createdAt": "2020-02-26T13:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MjM1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MjkyMA==", "url": "https://github.com/sleuthkit/autopsy/pull/5657#discussion_r384092920", "bodyText": "Replace with quick description", "author": "APriestman", "createdAt": "2020-02-25T19:57:22Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoDbSettings.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2015-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+/**\n+ *\n+ * @author gregd", "originalCommit": "86285c071c659a865743e68655a5ca0eb02e3a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MzYxMQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5657#discussion_r384093611", "bodyText": "Can this not just be LOGGER.warning(\"msg...\", e) ?\nAlso I think we nearly always use \"ex\" so that would be a bit better for consistency.", "author": "APriestman", "createdAt": "2020-02-25T19:58:39Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/eventlisteners/Installer.java", "diffHunk": "@@ -51,28 +56,101 @@ private Installer() {\n         super();\n     }\n \n-    @NbBundle.Messages({\"Installer.centralRepoUpgradeFailed.title=Central repository disabled\"})\n+    @NbBundle.Messages({\n+        \"Installer.centralRepoUpgradeFailed.title=Central repository disabled\",\n+        \"Installer.initialCreateSqlite.title=Enable Central Repository?\",\n+        \"Installer.initialCreateSqlite.messageHeader=The Central Repository is not enabled. Would you like to?\",\n+        \"Installer.initialCreateSqlite.messageDesc=It will store information about all hashes and identifiers that you process. \" +\n+            \"You can use this to ignore previously seen files and make connections between cases.\"\n+    })\n     @Override\n     public void restored() {\n         Case.addPropertyChangeListener(pcl);\n         ieListener.installListeners();\n \n-        // Perform the database upgrade and inform the user if it fails\n+        String initialized = ModuleSettings.getConfigSetting(\"CentralRepository\", \"initialized\");\n+\n+        // if central repository hasn't been previously initialized, initialize it\n+        if (!Boolean.parseBoolean(initialized)) {\n+            // if running with a GUI, prompt the user\n+            if (RuntimeProperties.runningWithGUI()) {\n+                try {\n+                    SwingUtilities.invokeAndWait(() -> {\n+                        try {\n+                            String dialogText = \n+                                \"<html><body>\" + \n+                                    \"<div style='width: 400px;'>\" +\n+                                        \"<p>\" + NbBundle.getMessage(this.getClass(), \"Installer.initialCreateSqlite.messageHeader\") + \"</p>\" +\n+                                        \"<p style='margin-top: 10px'>\" + NbBundle.getMessage(this.getClass(), \"Installer.initialCreateSqlite.messageDesc\") + \"</p>\" +\n+                                    \"</div>\" +\n+                                \"</body></html>\";\n+\n+                            if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(WindowManager.getDefault().getMainWindow(),\n+                                    dialogText,\n+                                    NbBundle.getMessage(this.getClass(), \"Installer.initialCreateSqlite.title\"),\n+                                    JOptionPane.YES_NO_OPTION)) {\n+\n+                                setupDefaultSqlite();\n+                            }\n+                        } catch (CentralRepoException ex) {\n+                            LOGGER.log(Level.SEVERE, \"There was an error while initializing the central repository database\", ex);\n+\n+                            reportUpgradeError(ex);\n+                        }\n+                    });\n+                } catch (InterruptedException | InvocationTargetException ex) {\n+                    LOGGER.log(Level.SEVERE, \"There was an error while running the swing utility invoke later while creating the central repository database\", ex);\n+                }\n+            } // if no GUI, just initialize\n+            else {\n+                try {\n+                    setupDefaultSqlite();\n+                } catch (CentralRepoException ex) {\n+                     LOGGER.log(Level.SEVERE, \"There was an error while initializing the central repository database\", ex);\n+\n+                    reportUpgradeError(ex);\n+                }\n+            }\n+\n+            ModuleSettings.setConfigSetting(\"CentralRepository\", \"initialized\", \"true\");\n+        } \n+        \n+        // now run regular module startup code\n         try {\n-            CentralRepoDbUtil.upgradeDatabase();\n+            CentralRepoDbManager.upgradeDatabase();\n         } catch (CentralRepoException ex) {\n+            LOGGER.log(Level.SEVERE, \"There was an error while upgrading the central repository database\", ex);\n             if (RuntimeProperties.runningWithGUI()) {\n-                WindowManager.getDefault().invokeWhenUIReady(() -> {\n-                    JOptionPane.showMessageDialog(null,\n-                            ex.getUserMessage(),\n-                            NbBundle.getMessage(this.getClass(),\n-                                    \"Installer.centralRepoUpgradeFailed.title\"),\n-                            JOptionPane.ERROR_MESSAGE);\n-                });\n+                reportUpgradeError(ex);\n             }\n         }\n     }\n \n+    private void setupDefaultSqlite() throws CentralRepoException {\n+        CentralRepoDbUtil.setUseCentralRepo(true);\n+        CentralRepoDbManager manager = new CentralRepoDbManager();\n+        manager.setupDefaultSqliteSettings();\n+        manager.createDb();\n+        manager.saveNewCentralRepo();\n+    }\n+\n+    private void reportUpgradeError(CentralRepoException ex) {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                JOptionPane.showMessageDialog(null,\n+                        ex.getUserMessage(),\n+                        NbBundle.getMessage(this.getClass(),\n+                                \"Installer.centralRepoUpgradeFailed.title\"),\n+                        JOptionPane.ERROR_MESSAGE);\n+            });\n+        } catch (InterruptedException | InvocationTargetException e) {\n+            LOGGER.warning(\"There was an error while running the swing utility invoke later while displaying an error \" + \n+                \"for creating the central repository database: \"\n+                + e.getMessage() + System.lineSeparator() + e.getStackTrace());", "originalCommit": "86285c071c659a865743e68655a5ca0eb02e3a8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d412131b032682e5808c5d04551a0a085cd3280", "url": "https://github.com/sleuthkit/autopsy/commit/6d412131b032682e5808c5d04551a0a085cd3280", "message": "updated messages", "committedDate": "2020-02-25T21:12:44Z", "type": "commit"}, {"oid": "4cda428708eae34074818dfd6cd15cc6db0d3258", "url": "https://github.com/sleuthkit/autopsy/commit/4cda428708eae34074818dfd6cd15cc6db0d3258", "message": "updates in central repository to avoid bug on initialization if sqlite db already exists", "committedDate": "2020-02-26T17:25:08Z", "type": "commit"}, {"oid": "078848d7d56a3864a63e7835c5974c62bac7fb1b", "url": "https://github.com/sleuthkit/autopsy/commit/078848d7d56a3864a63e7835c5974c62bac7fb1b", "message": "merge down from develop", "committedDate": "2020-02-27T13:03:44Z", "type": "commit"}, {"oid": "a0e753075406843ca8501241844427c7a646ae8a", "url": "https://github.com/sleuthkit/autopsy/commit/a0e753075406843ca8501241844427c7a646ae8a", "message": "Merge branch 'develop' into 6016-enable-cr-in-sqlite", "committedDate": "2020-02-27T17:21:30Z", "type": "commit"}, {"oid": "ede829860d8e948ea9e4f9d97f35a071036844ea", "url": "https://github.com/sleuthkit/autopsy/commit/ede829860d8e948ea9e4f9d97f35a071036844ea", "message": "cleaned up dependencies", "committedDate": "2020-02-27T17:31:56Z", "type": "commit"}, {"oid": "8e1cbce2d7188932e099b851071547f665cc7314", "url": "https://github.com/sleuthkit/autopsy/commit/8e1cbce2d7188932e099b851071547f665cc7314", "message": "update to check if cr initialized outside of code base", "committedDate": "2020-02-27T20:01:49Z", "type": "commit"}, {"oid": "9d26e2b69b03698e0a1da4beac09a5aebc5f191f", "url": "https://github.com/sleuthkit/autopsy/commit/9d26e2b69b03698e0a1da4beac09a5aebc5f191f", "message": "reverting merged properties", "committedDate": "2020-02-28T15:11:15Z", "type": "commit"}, {"oid": "9087ffba51c240c83f1e95859581e3822a62c320", "url": "https://github.com/sleuthkit/autopsy/commit/9087ffba51c240c83f1e95859581e3822a62c320", "message": "Merge branch 'develop' into 6016-enable-cr-in-sqlite", "committedDate": "2020-02-28T15:13:08Z", "type": "commit"}]}