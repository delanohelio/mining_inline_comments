{"pr_number": 5668, "pr_title": "6035 cr psql default", "pr_createdAt": "2020-03-02T15:57:19Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/5668", "timeline": [{"oid": "70e62f28c0026b3d5f5ff01ef9bad896e7f6d580", "url": "https://github.com/sleuthkit/autopsy/commit/70e62f28c0026b3d5f5ff01ef9bad896e7f6d580", "message": "beginning to integrate postgres with multiuser settings to be used with central repository", "committedDate": "2020-02-24T20:57:32Z", "type": "commit"}, {"oid": "c0a0af5e61a178d6369f35bbb1fe6e4942466735", "url": "https://github.com/sleuthkit/autopsy/commit/c0a0af5e61a178d6369f35bbb1fe6e4942466735", "message": "changes in multi user settings are redirected to central repository", "committedDate": "2020-02-25T14:33:25Z", "type": "commit"}, {"oid": "5ea3751c35fbb3ac9969f5ef96b5f025f05f4655", "url": "https://github.com/sleuthkit/autopsy/commit/5ea3751c35fbb3ac9969f5ef96b5f025f05f4655", "message": "small bug fix", "committedDate": "2020-02-25T16:30:54Z", "type": "commit"}, {"oid": "b13b621b2a628a9b096514590ccde4d62490c241", "url": "https://github.com/sleuthkit/autopsy/commit/b13b621b2a628a9b096514590ccde4d62490c241", "message": "beginning to create settings choice vs. db choice", "committedDate": "2020-02-25T20:09:42Z", "type": "commit"}, {"oid": "8d0948a824031313b049a804743000573bae5e75", "url": "https://github.com/sleuthkit/autopsy/commit/8d0948a824031313b049a804743000573bae5e75", "message": "adding new enum", "committedDate": "2020-02-25T20:11:08Z", "type": "commit"}, {"oid": "740090aa856c0939cca1fe81d6e40728ecc68872", "url": "https://github.com/sleuthkit/autopsy/commit/740090aa856c0939cca1fe81d6e40728ecc68872", "message": "merge from 6016", "committedDate": "2020-02-26T18:15:26Z", "type": "commit"}, {"oid": "0fd078a8072f09ff39dae9fbba8a77033560ef37", "url": "https://github.com/sleuthkit/autopsy/commit/0fd078a8072f09ff39dae9fbba8a77033560ef37", "message": "refactoring to create CentralRepoDbChoice", "committedDate": "2020-02-26T20:42:38Z", "type": "commit"}, {"oid": "ab8473db4e59544b237fb1622e279282c5b7431a", "url": "https://github.com/sleuthkit/autopsy/commit/ab8473db4e59544b237fb1622e279282c5b7431a", "message": "fixed some build errors", "committedDate": "2020-02-26T21:05:07Z", "type": "commit"}, {"oid": "127cc0c9e12ff1f02cf4c67d4d6cda722d879dcd", "url": "https://github.com/sleuthkit/autopsy/commit/127cc0c9e12ff1f02cf4c67d4d6cda722d879dcd", "message": "Merge branch '6016-enable-cr-in-sqlite' into 6035-cr-psql-default", "committedDate": "2020-02-27T13:04:37Z", "type": "commit"}, {"oid": "7dba95ed2f561a79c136cad86b15743f34d1aa06", "url": "https://github.com/sleuthkit/autopsy/commit/7dba95ed2f561a79c136cad86b15743f34d1aa06", "message": "working through refactoring postgres settings in central repo", "committedDate": "2020-02-27T17:17:52Z", "type": "commit"}, {"oid": "097aa7075ada6380df76d6d747e43c0274aba887", "url": "https://github.com/sleuthkit/autopsy/commit/097aa7075ada6380df76d6d747e43c0274aba887", "message": "updates for consistency", "committedDate": "2020-02-27T21:05:10Z", "type": "commit"}, {"oid": "13719c3e706323d87efdd9efe42fba45cc68fd78", "url": "https://github.com/sleuthkit/autopsy/commit/13719c3e706323d87efdd9efe42fba45cc68fd78", "message": "updates for some initial debugging", "committedDate": "2020-02-27T22:28:13Z", "type": "commit"}, {"oid": "00a94d649ba5cc4c528cf6c13a7d2e4a2d633ec7", "url": "https://github.com/sleuthkit/autopsy/commit/00a94d649ba5cc4c528cf6c13a7d2e4a2d633ec7", "message": "updates from debugging", "committedDate": "2020-02-28T14:28:19Z", "type": "commit"}, {"oid": "94d6a8c01249b647f7301e6f39793cb92a9510e1", "url": "https://github.com/sleuthkit/autopsy/commit/94d6a8c01249b647f7301e6f39793cb92a9510e1", "message": "working through bugs in 6035 implementation", "committedDate": "2020-02-28T18:47:49Z", "type": "commit"}, {"oid": "44366d3bb971a7153b1d789fd904c803643634cf", "url": "https://github.com/sleuthkit/autopsy/commit/44366d3bb971a7153b1d789fd904c803643634cf", "message": "Merge branch '6016-enable-cr-in-sqlite' into 6035-cr-psql-default", "committedDate": "2020-02-28T18:48:06Z", "type": "commit"}, {"oid": "b64cf35611ff34ff541e56f7800128755d220add", "url": "https://github.com/sleuthkit/autopsy/commit/b64cf35611ff34ff541e56f7800128755d220add", "message": "change for small issue found", "committedDate": "2020-02-28T20:34:11Z", "type": "commit"}, {"oid": "d0fca6e2aca6b21d69954315aa1c244397e4d66e", "url": "https://github.com/sleuthkit/autopsy/commit/d0fca6e2aca6b21d69954315aa1c244397e4d66e", "message": "updates for creating db if does not exist", "committedDate": "2020-03-02T15:00:06Z", "type": "commit"}, {"oid": "de914b13580ec013772ae527c75fa5ef4bb0c8ee", "url": "https://github.com/sleuthkit/autopsy/commit/de914b13580ec013772ae527c75fa5ef4bb0c8ee", "message": "Merge branch 'develop' into 6016-enable-cr-in-sqlite", "committedDate": "2020-03-02T16:00:21Z", "type": "commit"}, {"oid": "83acf735fa618427b573cc42820084d8b0580e3c", "url": "https://github.com/sleuthkit/autopsy/commit/83acf735fa618427b573cc42820084d8b0580e3c", "message": "Merge branch '6016-enable-cr-in-sqlite' into 6035-cr-psql-default", "committedDate": "2020-03-02T16:01:18Z", "type": "commit"}, {"oid": "0dfead369942412dcfdc2273d3ed5dc4fa78f645", "url": "https://github.com/sleuthkit/autopsy/commit/0dfead369942412dcfdc2273d3ed5dc4fa78f645", "message": "updates of gui and codacy items", "committedDate": "2020-03-02T19:39:08Z", "type": "commit"}, {"oid": "67dfdaa71654dc4531bc5ff674b98057a495f5e6", "url": "https://github.com/sleuthkit/autopsy/commit/67dfdaa71654dc4531bc5ff674b98057a495f5e6", "message": "updated based on codacy comments", "committedDate": "2020-03-02T20:11:27Z", "type": "commit"}, {"oid": "7a7fa90945d1f8716e488b0c30f61641f8ef2a68", "url": "https://github.com/sleuthkit/autopsy/commit/7a7fa90945d1f8716e488b0c30f61641f8ef2a68", "message": "fixes to address comments in central repo and multi user coordination", "committedDate": "2020-03-03T16:40:00Z", "type": "commit"}, {"oid": "1103ed53bdd155014e34288f54f3d036e910f170", "url": "https://github.com/sleuthkit/autopsy/commit/1103ed53bdd155014e34288f54f3d036e910f170", "message": "updates in ui", "committedDate": "2020-03-03T20:47:41Z", "type": "commit"}, {"oid": "b3347aa58a0617183a17f8cf626ed22b4a29d3cc", "url": "https://github.com/sleuthkit/autopsy/commit/b3347aa58a0617183a17f8cf626ed22b4a29d3cc", "message": "updated merged property files", "committedDate": "2020-03-05T12:42:28Z", "type": "commit"}, {"oid": "8288b73b1918d41b580d7ae76b42573251c866e8", "url": "https://github.com/sleuthkit/autopsy/commit/8288b73b1918d41b580d7ae76b42573251c866e8", "message": "Merge branch 'develop' into 6035-cr-psql-default", "committedDate": "2020-03-05T12:44:40Z", "type": "commit"}, {"oid": "e2fbc59cf3082967a0bac7bd298ce0d1e469c8a7", "url": "https://github.com/sleuthkit/autopsy/commit/e2fbc59cf3082967a0bac7bd298ce0d1e469c8a7", "message": "merge from develop", "committedDate": "2020-03-05T12:48:57Z", "type": "commit"}, {"oid": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "url": "https://github.com/sleuthkit/autopsy/commit/da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "message": "merge from develop", "committedDate": "2020-03-05T12:57:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwOTkzMw==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388509933", "bodyText": "Could this be an enum? Then we could use case statements later.", "author": "APriestman", "createdAt": "2020-03-05T19:21:59Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoDbChoice.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2015-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+/**\n+ * the database choices available for central repo\n+ */\n+public class CentralRepoDbChoice {", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxOTM5Mg==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388619392", "bodyText": "Yes, I could do that.  Part of my concern with using enum's was that I was sticking at least some data into each of these items.  Is that a problem or should I just move forward with an enum?", "author": "gdicristofaro", "createdAt": "2020-03-05T23:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwOTkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMjIwNA==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388902204", "bodyText": "nevermind.  I got over my mental block.  I think this is a lot more ergonomic.", "author": "gdicristofaro", "createdAt": "2020-03-06T13:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwOTkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMDI0OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388510249", "bodyText": "Perhaps UI_CHOICES? To make it more clear", "author": "APriestman", "createdAt": "2020-03-05T19:22:39Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoDbChoice.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2015-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+/**\n+ * the database choices available for central repo\n+ */\n+public class CentralRepoDbChoice {\n+    public static final CentralRepoDbChoice DISABLED = new CentralRepoDbChoice(\"Disabled\", CentralRepoPlatforms.DISABLED);\n+\n+    public static final CentralRepoDbChoice SQLITE = new CentralRepoDbChoice(\"Sqlite\", \"SQLite\", CentralRepoPlatforms.SQLITE);\n+\n+    public static final CentralRepoDbChoice POSTGRESQL_MULTIUSER = \n+        new CentralRepoDbChoice(\"PostgreSQL_Multiuser\", \"PostgreSQL using multi-user settings\", CentralRepoPlatforms.POSTGRESQL);\n+\n+    public static final CentralRepoDbChoice POSTGRESQL_CUSTOM = \n+        new CentralRepoDbChoice(\"PostgreSQL\", \"Custom PostgreSQL\", CentralRepoPlatforms.POSTGRESQL);\n+\n+    public static final CentralRepoDbChoice[] CHOICES = new CentralRepoDbChoice[]{", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMDY0OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388510649", "bodyText": "I think since this isn't a constant it should be normal lower case", "author": "APriestman", "createdAt": "2020-03-05T19:23:20Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoDbManager.java", "diffHunk": "@@ -34,6 +35,45 @@\n \n     private static final String CENTRAL_REPO_DB_NAME = \"central_repository\";\n \n+\n+\n+    private static volatile CentralRepoDbChoice SAVED_CHOICE = null;", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMTI5OA==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388511298", "bodyText": "If the second string is displayed in the UI, it should be in a bundle message", "author": "APriestman", "createdAt": "2020-03-05T19:24:28Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoDbChoice.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2015-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+/**\n+ * the database choices available for central repo\n+ */\n+public class CentralRepoDbChoice {\n+    public static final CentralRepoDbChoice DISABLED = new CentralRepoDbChoice(\"Disabled\", CentralRepoPlatforms.DISABLED);\n+\n+    public static final CentralRepoDbChoice SQLITE = new CentralRepoDbChoice(\"Sqlite\", \"SQLite\", CentralRepoPlatforms.SQLITE);", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNzY4Nw==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388517687", "bodyText": "Should we do more than just log an error if these parameters are invalid? There may be empty fields in the settings object. If this is what we want to do, add a comment that this is what's happening.", "author": "APriestman", "createdAt": "2020-03-05T19:36:35Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoPostgresSettingsUtil.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2012-2020 Basis Technology Corp.\n+ *\n+ * Copyright 2012 42six Solutions.\n+ * Contact: aebadirad <at> 42six <dot> com\n+ * Project Contact/Architect: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import org.sleuthkit.autopsy.core.UserPreferences;\n+import org.sleuthkit.autopsy.core.UserPreferencesException;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.ModuleSettings;\n+import org.sleuthkit.autopsy.coreutils.TextConverter;\n+import org.sleuthkit.autopsy.coreutils.TextConverterException;\n+import org.sleuthkit.datamodel.CaseDbConnectionInfo;\n+\n+/**\n+ * handles saving and loading of postgres settings for central repo\n+ */\n+public class CentralRepoPostgresSettingsUtil {\n+    private final static Logger LOGGER = Logger.getLogger(CentralRepoPostgresSettingsUtil.class.getName());\n+    \n+    private final static String DEFAULT_HOST = \"\"; // NON-NLS\n+    private final static int DEFAULT_PORT = 5432;\n+    private final static String DEFAULT_DBNAME = \"central_repository\"; // NON-NLS\n+    private final static String DEFAULT_USERNAME = \"\";\n+    private final static String DEFAULT_PASSWORD = \"\";\n+\n+    private static final String PASSWORD_KEY = \"db.postgresql.password\";\n+    private static final String BULK_THRESHOLD_KEY = \"db.postgresql.bulkThreshold\";\n+    private static final String PORT_KEY = \"db.postgresql.port\";\n+    private static final String USER_KEY = \"db.postgresql.user\";\n+    private static final String DBNAME_KEY = \"db.postgresql.dbName\";\n+    private static final String HOST_KEY = \"db.postgresql.host\";\n+\n+    private static final String MODULE_KEY = \"CentralRepository\";\n+\n+    \n+    \n+    private static String valOrDefault(String val, String defaultVal) {\n+        if (val == null || val.isEmpty())\n+            return defaultVal;\n+        \n+        return val;\n+    }\n+    \n+    private static int valOrDefault(String val, int defaultVal, Integer min, Integer max) {\n+        try {\n+            if (val == null || val.isEmpty()) {\n+                return defaultVal;\n+            } else {\n+                int retVal = Integer.parseInt(val);\n+                if ((min != null && retVal < min) || (max != null && retVal > max)) {\n+                    return defaultVal;\n+                }\n+                else {\n+                    return retVal;\n+                }\n+            }\n+        } catch (NumberFormatException ex) {\n+            return defaultVal;\n+        }\n+    }\n+    \n+    private static void handleTry(TryHandler handler) {\n+        try {\n+            handler.operation();\n+        }\n+        catch (CentralRepoException e) {\n+            LOGGER.log(Level.WARNING, \"There was an error in converting central repo postgres settings\", e);\n+        }\n+    }\n+    \n+    /**\n+     * an action that potentially throws an exception\n+     */\n+    private interface TryHandler {\n+        void operation() throws CentralRepoException;\n+    }\n+    \n+    \n+    public static PostgresConnectionSettings loadMultiUserSettings() {\n+        PostgresConnectionSettings settings = new PostgresConnectionSettings();\n+        \n+        CaseDbConnectionInfo muConn;\n+        try {\n+            muConn = UserPreferences.getDatabaseConnectionInfo();\n+        } catch (UserPreferencesException ex) {\n+            LOGGER.log(Level.SEVERE, \"Failed to import settings from multi-user settings.\", ex);\n+            return settings;\n+        }\n+        \n+        handleTry(() -> settings.setHost(valOrDefault(muConn.getHost(), DEFAULT_HOST)));", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTg2Nw==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388565867", "bodyText": "My goal for this and the other thing you mentioned in this file was to preserve the the same behavior here: https://github.com/sleuthkit/autopsy/blob/develop/Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/PostgresCentralRepoSettings.java#L73.  Would it be worth changing right now or should this wait for another time?", "author": "gdicristofaro", "createdAt": "2020-03-05T21:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNzY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNTAyMg==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388905022", "bodyText": "I don't think you've quite preserved that logic, though I may be reading it wrong. It seems like in your new code if the exception gets thrown the field doesn't get saved to the default.", "author": "APriestman", "createdAt": "2020-03-06T13:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNzY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDM2NQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388924365", "bodyText": "Oh okay.  I'll fix that.", "author": "gdicristofaro", "createdAt": "2020-03-06T14:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNzY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxODYyNA==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388518624", "bodyText": "This could use a comment and a more descriptive name. As it stands, logException() would be more accurate.", "author": "APriestman", "createdAt": "2020-03-05T19:38:17Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoPostgresSettingsUtil.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2012-2020 Basis Technology Corp.\n+ *\n+ * Copyright 2012 42six Solutions.\n+ * Contact: aebadirad <at> 42six <dot> com\n+ * Project Contact/Architect: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import org.sleuthkit.autopsy.core.UserPreferences;\n+import org.sleuthkit.autopsy.core.UserPreferencesException;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.ModuleSettings;\n+import org.sleuthkit.autopsy.coreutils.TextConverter;\n+import org.sleuthkit.autopsy.coreutils.TextConverterException;\n+import org.sleuthkit.datamodel.CaseDbConnectionInfo;\n+\n+/**\n+ * handles saving and loading of postgres settings for central repo\n+ */\n+public class CentralRepoPostgresSettingsUtil {\n+    private final static Logger LOGGER = Logger.getLogger(CentralRepoPostgresSettingsUtil.class.getName());\n+    \n+    private final static String DEFAULT_HOST = \"\"; // NON-NLS\n+    private final static int DEFAULT_PORT = 5432;\n+    private final static String DEFAULT_DBNAME = \"central_repository\"; // NON-NLS\n+    private final static String DEFAULT_USERNAME = \"\";\n+    private final static String DEFAULT_PASSWORD = \"\";\n+\n+    private static final String PASSWORD_KEY = \"db.postgresql.password\";\n+    private static final String BULK_THRESHOLD_KEY = \"db.postgresql.bulkThreshold\";\n+    private static final String PORT_KEY = \"db.postgresql.port\";\n+    private static final String USER_KEY = \"db.postgresql.user\";\n+    private static final String DBNAME_KEY = \"db.postgresql.dbName\";\n+    private static final String HOST_KEY = \"db.postgresql.host\";\n+\n+    private static final String MODULE_KEY = \"CentralRepository\";\n+\n+    \n+    \n+    private static String valOrDefault(String val, String defaultVal) {\n+        if (val == null || val.isEmpty())\n+            return defaultVal;\n+        \n+        return val;\n+    }\n+    \n+    private static int valOrDefault(String val, int defaultVal, Integer min, Integer max) {\n+        try {\n+            if (val == null || val.isEmpty()) {\n+                return defaultVal;\n+            } else {\n+                int retVal = Integer.parseInt(val);\n+                if ((min != null && retVal < min) || (max != null && retVal > max)) {\n+                    return defaultVal;\n+                }\n+                else {\n+                    return retVal;\n+                }\n+            }\n+        } catch (NumberFormatException ex) {\n+            return defaultVal;\n+        }\n+    }\n+    \n+    private static void handleTry(TryHandler handler) {", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMTQ2NA==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388521464", "bodyText": "In the previous section this is a warning and the default password is used. Why is it different here? Also if the error is \"SEVERE\" we probably shouldn't just log it and continue on.", "author": "APriestman", "createdAt": "2020-03-05T19:43:27Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoPostgresSettingsUtil.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2012-2020 Basis Technology Corp.\n+ *\n+ * Copyright 2012 42six Solutions.\n+ * Contact: aebadirad <at> 42six <dot> com\n+ * Project Contact/Architect: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import org.sleuthkit.autopsy.core.UserPreferences;\n+import org.sleuthkit.autopsy.core.UserPreferencesException;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.ModuleSettings;\n+import org.sleuthkit.autopsy.coreutils.TextConverter;\n+import org.sleuthkit.autopsy.coreutils.TextConverterException;\n+import org.sleuthkit.datamodel.CaseDbConnectionInfo;\n+\n+/**\n+ * handles saving and loading of postgres settings for central repo\n+ */\n+public class CentralRepoPostgresSettingsUtil {\n+    private final static Logger LOGGER = Logger.getLogger(CentralRepoPostgresSettingsUtil.class.getName());\n+    \n+    private final static String DEFAULT_HOST = \"\"; // NON-NLS\n+    private final static int DEFAULT_PORT = 5432;\n+    private final static String DEFAULT_DBNAME = \"central_repository\"; // NON-NLS\n+    private final static String DEFAULT_USERNAME = \"\";\n+    private final static String DEFAULT_PASSWORD = \"\";\n+\n+    private static final String PASSWORD_KEY = \"db.postgresql.password\";\n+    private static final String BULK_THRESHOLD_KEY = \"db.postgresql.bulkThreshold\";\n+    private static final String PORT_KEY = \"db.postgresql.port\";\n+    private static final String USER_KEY = \"db.postgresql.user\";\n+    private static final String DBNAME_KEY = \"db.postgresql.dbName\";\n+    private static final String HOST_KEY = \"db.postgresql.host\";\n+\n+    private static final String MODULE_KEY = \"CentralRepository\";\n+\n+    \n+    \n+    private static String valOrDefault(String val, String defaultVal) {\n+        if (val == null || val.isEmpty())\n+            return defaultVal;\n+        \n+        return val;\n+    }\n+    \n+    private static int valOrDefault(String val, int defaultVal, Integer min, Integer max) {\n+        try {\n+            if (val == null || val.isEmpty()) {\n+                return defaultVal;\n+            } else {\n+                int retVal = Integer.parseInt(val);\n+                if ((min != null && retVal < min) || (max != null && retVal > max)) {\n+                    return defaultVal;\n+                }\n+                else {\n+                    return retVal;\n+                }\n+            }\n+        } catch (NumberFormatException ex) {\n+            return defaultVal;\n+        }\n+    }\n+    \n+    private static void handleTry(TryHandler handler) {\n+        try {\n+            handler.operation();\n+        }\n+        catch (CentralRepoException e) {\n+            LOGGER.log(Level.WARNING, \"There was an error in converting central repo postgres settings\", e);\n+        }\n+    }\n+    \n+    /**\n+     * an action that potentially throws an exception\n+     */\n+    private interface TryHandler {\n+        void operation() throws CentralRepoException;\n+    }\n+    \n+    \n+    public static PostgresConnectionSettings loadMultiUserSettings() {\n+        PostgresConnectionSettings settings = new PostgresConnectionSettings();\n+        \n+        CaseDbConnectionInfo muConn;\n+        try {\n+            muConn = UserPreferences.getDatabaseConnectionInfo();\n+        } catch (UserPreferencesException ex) {\n+            LOGGER.log(Level.SEVERE, \"Failed to import settings from multi-user settings.\", ex);\n+            return settings;\n+        }\n+        \n+        handleTry(() -> settings.setHost(valOrDefault(muConn.getHost(), DEFAULT_HOST)));\n+        handleTry(() -> settings.setDbName(DEFAULT_DBNAME));\n+        handleTry(() -> settings.setUserName(valOrDefault(muConn.getUserName(), DEFAULT_USERNAME)));\n+        \n+        handleTry(() -> settings.setPort(valOrDefault(muConn.getPort(), DEFAULT_PORT, 1, 65535)));\n+        handleTry(() -> settings.setBulkThreshold(RdbmsCentralRepo.DEFAULT_BULK_THRESHHOLD));\n+        \n+        handleTry(() -> settings.setPassword(valOrDefault(muConn.getPassword(), DEFAULT_PASSWORD)));\n+        \n+        return settings;\n+    }\n+    \n+    \n+    public static PostgresConnectionSettings loadCustomSettings() {\n+        PostgresConnectionSettings settings = new PostgresConnectionSettings();\n+        Map<String, String> keyVals = ModuleSettings.getConfigSettings(MODULE_KEY);\n+        \n+        \n+        handleTry(() -> settings.setHost(valOrDefault(keyVals.get(HOST_KEY), DEFAULT_HOST)));\n+        handleTry(() -> settings.setDbName(valOrDefault(keyVals.get(DBNAME_KEY), DEFAULT_DBNAME)));\n+        handleTry(() -> settings.setUserName(valOrDefault(keyVals.get(USER_KEY), DEFAULT_USERNAME)));\n+        \n+        handleTry(() -> settings.setPort(valOrDefault(keyVals.get(PORT_KEY), DEFAULT_PORT, 1, 65535)));\n+        handleTry(() -> settings.setBulkThreshold(valOrDefault(keyVals.get(BULK_THRESHOLD_KEY), RdbmsCentralRepo.DEFAULT_BULK_THRESHHOLD, 1, null)));\n+        \n+        String passwordHex = keyVals.get(PASSWORD_KEY);\n+        String password;\n+        try {\n+            password = TextConverter.convertHexTextToText(passwordHex);\n+        } catch (TextConverterException ex) {\n+            LOGGER.log(Level.WARNING, \"Failed to convert password from hex text to text.\", ex);\n+            password = DEFAULT_PASSWORD;\n+        }\n+        \n+        final String finalPassword = password;\n+        \n+        handleTry(() -> settings.setPassword(finalPassword));\n+        return settings;\n+    }\n+\n+    public static void saveCustomSettings(PostgresConnectionSettings settings) {\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(HOST_KEY, settings.getHost());\n+        map.put(PORT_KEY, Integer.toString(settings.getPort()));\n+        map.put(DBNAME_KEY, settings.getDbName());\n+        map.put(BULK_THRESHOLD_KEY, Integer.toString(settings.getBulkThreshold()));\n+        map.put(USER_KEY, settings.getUserName());\n+        try {\n+            map.put(PASSWORD_KEY, TextConverter.convertTextToHexText(settings.getPassword())); // NON-NLS\n+        } catch (TextConverterException ex) {\n+            LOGGER.log(Level.SEVERE, \"Failed to convert password from text to hex text.\", ex);", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMjQ2MA==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388522460", "bodyText": "These names could be a bit more descriptive.", "author": "APriestman", "createdAt": "2020-03-05T19:45:13Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/PostgresSettingsLoader.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2015-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+/**\n+ * interface to load or save postgres settings\n+ */\n+public interface PostgresSettingsLoader {\n+    PostgresConnectionSettings loadSettings();\n+    void saveSettings(PostgresConnectionSettings settings);\n+    \n+    PostgresSettingsLoader CUSTOM_LOADER = new Custom();", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMzg4NQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388523885", "bodyText": "Why is this in this PR?", "author": "APriestman", "createdAt": "2020-03-05T19:47:32Z", "path": "Core/src/org/sleuthkit/autopsy/core/UserPreferences.java", "diffHunk": "@@ -75,6 +75,7 @@\n     public static final String SHOW_ONLY_CURRENT_USER_TAGS = \"ShowOnlyCurrentUserTags\";\n     public static final String HIDE_SCO_COLUMNS = \"HideCentralRepoCommentsAndOccurrences\"; //The key for this setting pre-dates the settings current functionality //NON-NLS\n     public static final String DISPLAY_TRANSLATED_NAMES = \"DisplayTranslatedNames\";\n+    private static final boolean DISPLAY_TRANSLATED_NAMES_DEFAULT = true;", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MDMxMg==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388880312", "bodyText": "Sorry about that.  I'll correct it.", "author": "gdicristofaro", "createdAt": "2020-03-06T12:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMzg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNDIzMg==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r388524232", "bodyText": "I don't think you named this, but an underscore would really help readability for \"TESTEDOK\"", "author": "APriestman", "createdAt": "2020-03-05T19:48:09Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/PostgresCentralRepoSettings.java", "diffHunk": "@@ -377,95 +305,72 @@ public void setPort(int port) throws CentralRepoException {\n      * @return the dbName\n      */\n     public String getDbName() {\n-        return dbName.toLowerCase();\n+        return connSettings.getDbName() == null ? null : connSettings.getDbName().toLowerCase();\n     }\n \n     /**\n      * @param dbName the dbName to set\n      */\n     public void setDbName(String dbName) throws CentralRepoException {\n-        if (dbName == null || dbName.isEmpty()) {\n-            throw new CentralRepoException(\"Invalid database name. Cannot be empty.\"); // NON-NLS\n-        } else if (!Pattern.matches(DB_NAMES_REGEX, dbName)) {\n-            throw new CentralRepoException(\"Invalid database name. Name must start with a lowercase letter and can only contain lowercase letters, numbers, and '_'.\"); // NON-NLS\n-        }\n-\n-        this.dbName = dbName.toLowerCase();\n+        connSettings.setDbName(dbName);\n     }\n \n     /**\n      * @return the bulkThreshold\n      */\n     int getBulkThreshold() {\n-        return bulkThreshold;\n+        return connSettings.getBulkThreshold();\n     }\n \n     /**\n      * @param bulkThreshold the bulkThreshold to set\n      */\n     public void setBulkThreshold(int bulkThreshold) throws CentralRepoException {\n-        if (bulkThreshold > 0) {\n-            this.bulkThreshold = bulkThreshold;\n-        } else {\n-            throw new CentralRepoException(\"Invalid bulk threshold.\"); // NON-NLS\n-        }\n+        connSettings.setBulkThreshold(bulkThreshold);\n     }\n \n     /**\n      * @return the userName\n      */\n     public String getUserName() {\n-        return userName;\n+        return connSettings.getUserName();\n     }\n \n     /**\n      * @param userName the userName to set\n      */\n     public void setUserName(String userName) throws CentralRepoException {\n-        if (userName == null || userName.isEmpty()) {\n-            throw new CentralRepoException(\"Invalid user name. Cannot be empty.\"); // NON-NLS\n-        } else if (!Pattern.matches(DB_USER_NAMES_REGEX, userName)) {\n-            throw new CentralRepoException(\"Invalid user name. Name must start with a letter and can only contain letters, numbers, and '_'.\"); // NON-NLS\n-        }\n-        this.userName = userName;\n+        connSettings.setUserName(userName);\n     }\n \n     /**\n      * @return the password\n      */\n     public String getPassword() {\n-        return password;\n+        return connSettings.getPassword();\n     }\n \n     /**\n      * @param password the password to set\n      */\n     public void setPassword(String password) throws CentralRepoException {\n-        if (password == null || password.isEmpty()) {\n-            throw new CentralRepoException(\"Invalid user password. Cannot be empty.\"); // NON-NLS\n-        }\n-        this.password = password;\n+        connSettings.setPassword(password);\n     }\n \n-    /**\n-     * @return the VALIDATION_QUERY\n-     */\n-    String getValidationQuery() {\n-        return VALIDATION_QUERY;\n-    }\n-\n-    /**\n-     * @return the POSTGRES_DRIVER\n-     */\n-    String getDriver() {\n-        return JDBC_DRIVER;\n-    }\n-\n-    /**\n-     * @return the JDBC_BASE_URI\n-     */\n-    String getJDBCBaseURI() {\n-        return JDBC_BASE_URI;\n+    @Override\n+    public DatabaseTestResult testStatus() {\n+        if (verifyConnection()) {\n+            if (verifyDatabaseExists()) {\n+                if (verifyDatabaseSchema()) {\n+                    return DatabaseTestResult.TESTEDOK;", "originalCommit": "da9059ed0c8a20777a7bdfdfe32586cb040cf87a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d093a2169b369b74c947ce9ce3b854ec9cf06730", "url": "https://github.com/sleuthkit/autopsy/commit/d093a2169b369b74c947ce9ce3b854ec9cf06730", "message": "Merge branch 'develop' into 6035-cr-psql-default", "committedDate": "2020-03-06T12:50:53Z", "type": "commit"}, {"oid": "167c12f00c8b54c2525a0b73bd14fd7aa6b6252e", "url": "https://github.com/sleuthkit/autopsy/commit/167c12f00c8b54c2525a0b73bd14fd7aa6b6252e", "message": "updates from PR", "committedDate": "2020-03-06T13:36:42Z", "type": "commit"}, {"oid": "d07c6d5dd21b248f3794f43f7955945ec952fb98", "url": "https://github.com/sleuthkit/autopsy/commit/d07c6d5dd21b248f3794f43f7955945ec952fb98", "message": "improved comments", "committedDate": "2020-03-06T14:17:14Z", "type": "commit"}, {"oid": "9b04404958935d390dbfcacaa1f6d8882d953947", "url": "https://github.com/sleuthkit/autopsy/commit/9b04404958935d390dbfcacaa1f6d8882d953947", "message": "updates for handling defaults better on exception", "committedDate": "2020-03-06T14:50:33Z", "type": "commit"}, {"oid": "c80f75e9a92c43cb84c6f1624111eea76f3387fe", "url": "https://github.com/sleuthkit/autopsy/commit/c80f75e9a92c43cb84c6f1624111eea76f3387fe", "message": "Merge branch 'develop' of github.com:sleuthkit/autopsy into 6035-cr-psql-default", "committedDate": "2020-03-06T16:57:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNjI3MA==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r389616270", "bodyText": "Still have a translation change here.", "author": "APriestman", "createdAt": "2020-03-09T12:00:26Z", "path": "Core/src/org/sleuthkit/autopsy/datamodel/AbstractAbstractFileNode.java", "diffHunk": "@@ -105,7 +105,7 @@\n                             this.content.getName(), this.content.getId()), ex);\n         }\n \n-        if (UserPreferences.displayTranslatedFileNames()) {\n+        if (TextTranslationService.getInstance().hasProvider() && UserPreferences.displayTranslatedFileNames()) {", "originalCommit": "c80f75e9a92c43cb84c6f1624111eea76f3387fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1d58cdcccbf94bf9ab8d24185ef23e9c73aa52ab", "url": "https://github.com/sleuthkit/autopsy/commit/1d58cdcccbf94bf9ab8d24185ef23e9c73aa52ab", "message": "revert abstract file node", "committedDate": "2020-03-09T12:11:28Z", "type": "commit"}, {"oid": "afddb61e7aecd4012a324de3f15faa1fbfe8507e", "url": "https://github.com/sleuthkit/autopsy/commit/afddb61e7aecd4012a324de3f15faa1fbfe8507e", "message": "Merge branch 'develop' of github.com:sleuthkit/autopsy into 6035-cr-psql-default", "committedDate": "2020-03-09T12:11:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNDk3Nw==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r389624977", "bodyText": "Would it be possible to implement PropertyChangeListener here instead of writing your own?", "author": "APriestman", "createdAt": "2020-03-09T12:20:35Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/optionspanel/GlobalSettingsPanel.java", "diffHunk": "@@ -33,33 +33,58 @@\n import org.sleuthkit.autopsy.casemodule.Case;\n import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoDbManager;\n import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoException;\n+import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoPlatforms;\n import org.sleuthkit.autopsy.corecomponents.OptionsPanel;\n import org.sleuthkit.autopsy.events.AutopsyEvent;\n import org.sleuthkit.autopsy.ingest.IngestManager;\n import org.sleuthkit.autopsy.ingest.IngestModuleGlobalSettingsPanel;\n-import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoPlatforms;\n-import static org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoPlatforms.DISABLED;\n+import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoDbChoice;\n import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoDbUtil;\n import org.sleuthkit.autopsy.centralrepository.datamodel.PostgresCentralRepoSettings;\n import org.sleuthkit.autopsy.centralrepository.datamodel.SqliteCentralRepoSettings;\n+import java.awt.Component;\n+import java.util.logging.Level;\n \n /**\n  * Main settings panel for the Central Repository\n  */\n @SuppressWarnings(\"PMD.SingularField\") // UI widgets cause lots of false positives\n public final class GlobalSettingsPanel extends IngestModuleGlobalSettingsPanel implements OptionsPanel {", "originalCommit": "afddb61e7aecd4012a324de3f15faa1fbfe8507e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzNTc4Ng==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r389635786", "bodyText": "Sure.  I will fix that.", "author": "gdicristofaro", "createdAt": "2020-03-09T12:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNDk3Nw=="}], "type": "inlineReview"}, {"oid": "0e8fcc9a17f250d6d37c5b1f3f5fc459374363a6", "url": "https://github.com/sleuthkit/autopsy/commit/0e8fcc9a17f250d6d37c5b1f3f5fc459374363a6", "message": "addressed codacy issues", "committedDate": "2020-03-09T12:33:26Z", "type": "commit"}, {"oid": "50c7ddb1a646a4efaae2383e2bd13fb540288799", "url": "https://github.com/sleuthkit/autopsy/commit/50c7ddb1a646a4efaae2383e2bd13fb540288799", "message": "addressed codacy issues", "committedDate": "2020-03-09T12:35:45Z", "type": "commit"}, {"oid": "c63bfaf72ee4899a705d53485eedcfc2ecb5f3a0", "url": "https://github.com/sleuthkit/autopsy/commit/c63bfaf72ee4899a705d53485eedcfc2ecb5f3a0", "message": "add property change listener", "committedDate": "2020-03-09T14:22:51Z", "type": "commit"}, {"oid": "e842893a322a960bfc751423a8963cf6c4fa3c18", "url": "https://github.com/sleuthkit/autopsy/commit/e842893a322a960bfc751423a8963cf6c4fa3c18", "message": "codacy comments improvement", "committedDate": "2020-03-09T17:20:01Z", "type": "commit"}, {"oid": "b6957fe2bcb1ac3736bc1823a6624c0e42829125", "url": "https://github.com/sleuthkit/autopsy/commit/b6957fe2bcb1ac3736bc1823a6624c0e42829125", "message": "fixes to capture disabled due to failure and validity checks on re-enable", "committedDate": "2020-03-10T21:25:21Z", "type": "commit"}, {"oid": "487d680d4174e7b0f7a7fd14ec676a71494225da", "url": "https://github.com/sleuthkit/autopsy/commit/487d680d4174e7b0f7a7fd14ec676a71494225da", "message": "update for display of change due to failure", "committedDate": "2020-03-11T14:53:28Z", "type": "commit"}, {"oid": "6ee3aeeecdf28df3901e5b4ba09fbf94d00a4f9b", "url": "https://github.com/sleuthkit/autopsy/commit/6ee3aeeecdf28df3901e5b4ba09fbf94d00a4f9b", "message": "updated to enforce invariants", "committedDate": "2020-03-12T20:17:26Z", "type": "commit"}, {"oid": "67e06fd853c36e5d7c063b3708000312dbf69f6b", "url": "https://github.com/sleuthkit/autopsy/commit/67e06fd853c36e5d7c063b3708000312dbf69f6b", "message": "removed unused imports", "committedDate": "2020-03-12T20:29:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMDkzMQ==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r392210931", "bodyText": "Random \"if\" here", "author": "APriestman", "createdAt": "2020-03-13T12:58:11Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoDbManager.java", "diffHunk": "@@ -216,38 +365,45 @@ public boolean wasConfigurationChanged() {\n         return configurationChanged;\n     }\n \n-    private CentralRepoDbSettings getSelectedSettings() throws CentralRepoException {\n-        switch (selectedPlatform) {\n-            case POSTGRESQL:\n-                return dbSettingsPostgres;\n-            case SQLITE:\n-                return dbSettingsSqlite;\n-            case DISABLED:\n-                return null;\n-            default:\n-                throw new CentralRepoException(\"Unknown database type: \" + selectedPlatform);\n-        }\n+    private CentralRepoDbConnectivityManager getSelectedSettings() throws CentralRepoException {\n+        if (selectedDbChoice == CentralRepoDbChoice.POSTGRESQL_MULTIUSER)\n+            return dbSettingsMultiUser;\n+        if (selectedDbChoice == CentralRepoDbChoice.POSTGRESQL_CUSTOM)\n+            return dbSettingsPostgres;\n+        if (selectedDbChoice == CentralRepoDbChoice.SQLITE)\n+            return dbSettingsSqlite;\n+        if (selectedDbChoice == CentralRepoDbChoice.DISABLED)\n+            return null;\n+        \n+            throw new CentralRepoException(\"Unknown database type: \" + selectedDbChoice);\n     }\n \n     private RdbmsCentralRepoFactory getDbFactory() throws CentralRepoException {\n-        switch (selectedPlatform) {\n-            case POSTGRESQL:\n-                return new RdbmsCentralRepoFactory(selectedPlatform, dbSettingsPostgres);\n-            case SQLITE:\n-                return new RdbmsCentralRepoFactory(selectedPlatform, dbSettingsSqlite);\n-            case DISABLED:\n-                return null;\n-            default:\n-                throw new CentralRepoException(\"Unknown database type: \" + selectedPlatform);\n-        }\n+        if (selectedDbChoice == CentralRepoDbChoice.POSTGRESQL_MULTIUSER)\n+            return new RdbmsCentralRepoFactory(CentralRepoPlatforms.POSTGRESQL, dbSettingsMultiUser);\n+        if (selectedDbChoice == CentralRepoDbChoice.POSTGRESQL_CUSTOM)\n+            return new RdbmsCentralRepoFactory(CentralRepoPlatforms.POSTGRESQL, dbSettingsPostgres);\n+        if (selectedDbChoice == CentralRepoDbChoice.SQLITE)\n+            return new RdbmsCentralRepoFactory(CentralRepoPlatforms.SQLITE, dbSettingsSqlite);\n+        if (selectedDbChoice == CentralRepoDbChoice.DISABLED)\n+            return null;\n+        \n+        throw new CentralRepoException(\"Unknown database type: \" + selectedDbChoice);\n     }\n \n+    /**\n+     * create central repo database if it does not already exist\n+     * @return      true if successful; false if unsuccessful\n+     * @throws CentralRepoException     if ", "originalCommit": "67e06fd853c36e5d7c063b3708000312dbf69f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMTc2OA==", "url": "https://github.com/sleuthkit/autopsy/pull/5668#discussion_r392211768", "bodyText": "Can you switch to capitalizing your comments per Richard's style email?", "author": "APriestman", "createdAt": "2020-03-13T12:59:44Z", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoDbManager.java", "diffHunk": "@@ -216,38 +365,45 @@ public boolean wasConfigurationChanged() {\n         return configurationChanged;\n     }\n \n-    private CentralRepoDbSettings getSelectedSettings() throws CentralRepoException {\n-        switch (selectedPlatform) {\n-            case POSTGRESQL:\n-                return dbSettingsPostgres;\n-            case SQLITE:\n-                return dbSettingsSqlite;\n-            case DISABLED:\n-                return null;\n-            default:\n-                throw new CentralRepoException(\"Unknown database type: \" + selectedPlatform);\n-        }\n+    private CentralRepoDbConnectivityManager getSelectedSettings() throws CentralRepoException {\n+        if (selectedDbChoice == CentralRepoDbChoice.POSTGRESQL_MULTIUSER)\n+            return dbSettingsMultiUser;\n+        if (selectedDbChoice == CentralRepoDbChoice.POSTGRESQL_CUSTOM)\n+            return dbSettingsPostgres;\n+        if (selectedDbChoice == CentralRepoDbChoice.SQLITE)\n+            return dbSettingsSqlite;\n+        if (selectedDbChoice == CentralRepoDbChoice.DISABLED)\n+            return null;\n+        \n+            throw new CentralRepoException(\"Unknown database type: \" + selectedDbChoice);\n     }\n \n     private RdbmsCentralRepoFactory getDbFactory() throws CentralRepoException {\n-        switch (selectedPlatform) {\n-            case POSTGRESQL:\n-                return new RdbmsCentralRepoFactory(selectedPlatform, dbSettingsPostgres);\n-            case SQLITE:\n-                return new RdbmsCentralRepoFactory(selectedPlatform, dbSettingsSqlite);\n-            case DISABLED:\n-                return null;\n-            default:\n-                throw new CentralRepoException(\"Unknown database type: \" + selectedPlatform);\n-        }\n+        if (selectedDbChoice == CentralRepoDbChoice.POSTGRESQL_MULTIUSER)\n+            return new RdbmsCentralRepoFactory(CentralRepoPlatforms.POSTGRESQL, dbSettingsMultiUser);\n+        if (selectedDbChoice == CentralRepoDbChoice.POSTGRESQL_CUSTOM)\n+            return new RdbmsCentralRepoFactory(CentralRepoPlatforms.POSTGRESQL, dbSettingsPostgres);\n+        if (selectedDbChoice == CentralRepoDbChoice.SQLITE)\n+            return new RdbmsCentralRepoFactory(CentralRepoPlatforms.SQLITE, dbSettingsSqlite);\n+        if (selectedDbChoice == CentralRepoDbChoice.DISABLED)\n+            return null;\n+        \n+        throw new CentralRepoException(\"Unknown database type: \" + selectedDbChoice);\n     }\n \n+    /**\n+     * create central repo database if it does not already exist", "originalCommit": "67e06fd853c36e5d7c063b3708000312dbf69f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e3e86dd20f736e9c5efaaf4094328939d7b986fd", "url": "https://github.com/sleuthkit/autopsy/commit/e3e86dd20f736e9c5efaaf4094328939d7b986fd", "message": "improved commenting", "committedDate": "2020-03-13T14:14:23Z", "type": "commit"}]}