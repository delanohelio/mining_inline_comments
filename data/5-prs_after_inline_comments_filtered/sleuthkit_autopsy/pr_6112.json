{"pr_number": 6112, "pr_title": "4506 get bluetooth pairings from reg ripper", "pr_createdAt": "2020-07-21T18:22:20Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/6112", "timeline": [{"oid": "622b7247c5c4b857a7f3248d8484dcb49b8a435d", "url": "https://github.com/sleuthkit/autopsy/commit/622b7247c5c4b857a7f3248d8484dcb49b8a435d", "message": "Add Bluetooth initial\n\nAdd bluetooth initial support", "committedDate": "2020-06-25T14:23:25Z", "type": "commit"}, {"oid": "71174355d9cf55552b0ee975e420d5c2adf5898c", "url": "https://github.com/sleuthkit/autopsy/commit/71174355d9cf55552b0ee975e420d5c2adf5898c", "message": "Merge remote-tracking branch 'upstream/develop' into 4506-Get-Wifi-Adapter-and-bluetooth-from-RegRipper", "committedDate": "2020-06-25T14:23:57Z", "type": "commit"}, {"oid": "22c636c76aa4cd533ad2631e92a869def86d4212", "url": "https://github.com/sleuthkit/autopsy/commit/22c636c76aa4cd533ad2631e92a869def86d4212", "message": "Merge remote-tracking branch 'upstream/develop' into 4506-Get-Wifi-Adapter-and-bluetooth-from-RegRipper", "committedDate": "2020-07-21T17:12:26Z", "type": "commit"}, {"oid": "2cde791bafa16eccf087fff5db9b35001dc3e3bc", "url": "https://github.com/sleuthkit/autopsy/commit/2cde791bafa16eccf087fff5db9b35001dc3e3bc", "message": "Update ExtractRegistry.java", "committedDate": "2020-07-21T18:20:56Z", "type": "commit"}, {"oid": "9132ceeede036550924d8789d0e5b715da41a89b", "url": "https://github.com/sleuthkit/autopsy/commit/9132ceeede036550924d8789d0e5b715da41a89b", "message": "fix empty statement\n\nFix empty statement codacy", "committedDate": "2020-07-21T18:42:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MTIyNw==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r459491227", "bodyText": "Could this line be made lowercase so that the regexes below match without casing being an issue?", "author": "dannysmyda", "createdAt": "2020-07-23T14:27:15Z", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();", "originalCommit": "9132ceeede036550924d8789d0e5b715da41a89b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MTI0MA==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r461691240", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-07-28T15:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MjA5Nw==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r459492097", "bodyText": "Could this be made lowercase and all contains calls be made lowercase too? Or alternatively you can use http://commons.apache.org/proper/commons-lang//apidocs/org/apache/commons/lang3/StringUtils.html#containsIgnoreCase-java.lang.CharSequence-java.lang.CharSequence-", "author": "dannysmyda", "createdAt": "2020-07-23T14:28:25Z", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();", "originalCommit": "9132ceeede036550924d8789d0e5b715da41a89b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MTEzNg==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r461691136", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-07-28T15:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MjA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MzgzOQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r459493839", "bodyText": "There is a lot of unchecked array access. Can you verify that the split arrays are at least length 2?", "author": "dannysmyda", "createdAt": "2020-07-23T14:30:38Z", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n+        Long bthLastSeen = Long.valueOf(0);\n+        Long bthLastConnected = Long.valueOf(0);\n+        while (!line.contains(SECTION_DIVIDER)) {\n+            line = reader.readLine();\n+            line = line.trim();\n+            if (line.contains(\"Device Unique ID\")) {\n+                // Columns are seperated by colons :\n+                // Data : Values\n+                // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n+                    // Split line on \"> \" which is the record delimiter between position and file\n+                    String deviceTokens[] = line.split(\": \");", "originalCommit": "9132ceeede036550924d8789d0e5b715da41a89b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MTAyMg==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r461691022", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-07-28T15:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MzgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NzU5OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r460097599", "bodyText": "Also, if there are no more lines in the reader, a null value will be returned.", "author": "dannysmyda", "createdAt": "2020-07-24T14:43:53Z", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n+        Long bthLastSeen = Long.valueOf(0);\n+        Long bthLastConnected = Long.valueOf(0);\n+        while (!line.contains(SECTION_DIVIDER)) {\n+            line = reader.readLine();\n+            line = line.trim();\n+            if (line.contains(\"Device Unique ID\")) {\n+                // Columns are seperated by colons :\n+                // Data : Values\n+                // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n+                    // Split line on \"> \" which is the record delimiter between position and file\n+                    String deviceTokens[] = line.split(\": \");\n+                    String deviceUniqueId = deviceTokens[1];\n+                    line = reader.readLine();", "originalCommit": "9132ceeede036550924d8789d0e5b715da41a89b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5ODAyNw==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r460098027", "bodyText": "I think if at any point the line is null you can just bail.", "author": "dannysmyda", "createdAt": "2020-07-24T14:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NzU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDkyOQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r461690929", "bodyText": "Done.", "author": "markmckinnon", "createdAt": "2020-07-28T15:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NzU5OQ=="}], "type": "inlineReview"}, {"oid": "5aa868b0a35b22b485d9337446a6b98568f7f53b", "url": "https://github.com/sleuthkit/autopsy/commit/5aa868b0a35b22b485d9337446a6b98568f7f53b", "message": "Update ExtractRegistry.java\n\nAddress comments and codacy", "committedDate": "2020-07-28T15:47:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NzA1Mw==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r465867053", "bodyText": "Could you check line != null before the contains? It's still unsafe.", "author": "dannysmyda", "createdAt": "2020-08-05T16:52:22Z", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,113 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.toLowerCase().matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.toLowerCase().matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        while (!line.contains(SECTION_DIVIDER)) {", "originalCommit": "5aa868b0a35b22b485d9337446a6b98568f7f53b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk1MzA0Mg==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r467953042", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-08-10T14:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NzA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2OTY4Mg==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r465869682", "bodyText": "This if statement should check if line != null before the contains.", "author": "dannysmyda", "createdAt": "2020-08-05T16:56:39Z", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -993,56 +993,25 @@ private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbst\n     private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n         List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n         String line = reader.readLine();\n-        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n-        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n-        Long bthLastSeen = Long.valueOf(0);\n-        Long bthLastConnected = Long.valueOf(0);\n         while (!line.contains(SECTION_DIVIDER)) {\n             line = reader.readLine();\n             line = line.trim();\n-            if (line.contains(\"Device Unique ID\")) {\n+            if (line.toLowerCase().contains(\"device unique id\")) {\n                 // Columns are seperated by colons :\n                 // Data : Values\n                 // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n-                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n-                    // Split line on \"> \" which is the record delimiter between position and file\n-                    String deviceTokens[] = line.split(\": \");\n-                    String deviceUniqueId = deviceTokens[1];\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.toLowerCase().contains(\"radio support not found\")) {\n+                    Collection<BlackboardAttribute> attributes = new ArrayList<>();\n+                    addBlueToothAttribute(line, attributes, TSK_DEVICE_ID);\n                     line = reader.readLine();\n-                    // Default device name to unknown as a device name may not exist.\n-                    String deviceName = \"Unknown\";\n-                    if (line.contains(\"Name\")) {\n-                        String nameTokens[] = line.split(\": \");\n-                        deviceName = nameTokens[1];\n+                    // Name may not exist, check for it to make sure.", "originalCommit": "5aa868b0a35b22b485d9337446a6b98568f7f53b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MTc1MA==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r465871750", "bodyText": "Could you add a line != null condition before all of these other checks?", "author": "dannysmyda", "createdAt": "2020-08-05T16:59:51Z", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -993,56 +993,25 @@ private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbst\n     private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n         List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n         String line = reader.readLine();\n-        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n-        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n-        Long bthLastSeen = Long.valueOf(0);\n-        Long bthLastConnected = Long.valueOf(0);\n         while (!line.contains(SECTION_DIVIDER)) {\n             line = reader.readLine();\n             line = line.trim();\n-            if (line.contains(\"Device Unique ID\")) {\n+            if (line.toLowerCase().contains(\"device unique id\")) {\n                 // Columns are seperated by colons :\n                 // Data : Values\n                 // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n-                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n-                    // Split line on \"> \" which is the record delimiter between position and file\n-                    String deviceTokens[] = line.split(\": \");\n-                    String deviceUniqueId = deviceTokens[1];\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.toLowerCase().contains(\"radio support not found\")) {", "originalCommit": "5aa868b0a35b22b485d9337446a6b98568f7f53b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk1OTY5NA==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r467959694", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-08-10T14:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MTc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MjI5NQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r465872295", "bodyText": "Could you add a check after this readLine to break/return if null?", "author": "dannysmyda", "createdAt": "2020-08-05T17:00:41Z", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -993,56 +993,25 @@ private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbst\n     private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n         List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n         String line = reader.readLine();\n-        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n-        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n-        Long bthLastSeen = Long.valueOf(0);\n-        Long bthLastConnected = Long.valueOf(0);\n         while (!line.contains(SECTION_DIVIDER)) {\n             line = reader.readLine();", "originalCommit": "5aa868b0a35b22b485d9337446a6b98568f7f53b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk1OTg0NA==", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r467959844", "bodyText": "Done", "author": "markmckinnon", "createdAt": "2020-08-10T14:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MjI5NQ=="}], "type": "inlineReview"}, {"oid": "5cdd5ba613c4cbf90b660e47df6ae807830599d1", "url": "https://github.com/sleuthkit/autopsy/commit/5cdd5ba613c4cbf90b660e47df6ae807830599d1", "message": "Update ExtractRegistry.java\n\nAdded check if line is not null for safety", "committedDate": "2020-08-10T14:42:24Z", "type": "commit"}, {"oid": "6d4593b65731c317cd09dc847f8fa5d7de48455f", "url": "https://github.com/sleuthkit/autopsy/commit/6d4593b65731c317cd09dc847f8fa5d7de48455f", "message": "Update ExtractRegistry.java\n\nAdd check for null for safety.", "committedDate": "2020-08-10T14:52:00Z", "type": "commit"}, {"oid": "ca337723c546695a5d9bb2a848b16d2eb763adcf", "url": "https://github.com/sleuthkit/autopsy/commit/ca337723c546695a5d9bb2a848b16d2eb763adcf", "message": "Update ExtractRegistry.java\n\nSafety checks", "committedDate": "2020-08-11T14:10:56Z", "type": "commit"}]}