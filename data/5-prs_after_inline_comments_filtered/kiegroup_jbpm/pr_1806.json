{"pr_number": 1806, "pr_title": "[JBPM-9470] User Task output variable mapping to an object attribute", "pr_createdAt": "2020-11-18T09:30:34Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1806", "timeline": [{"oid": "890f5e59988df1901d5cd378bc14b17339148e51", "url": "https://github.com/kiegroup/jbpm/commit/890f5e59988df1901d5cd378bc14b17339148e51", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel", "committedDate": "2020-11-18T11:21:37Z", "type": "forcePushed"}, {"oid": "3b5b873dfb5de3fe12f32a999dd974818045f4ea", "url": "https://github.com/kiegroup/jbpm/commit/3b5b873dfb5de3fe12f32a999dd974818045f4ea", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-18T12:54:15Z", "type": "forcePushed"}, {"oid": "bcc71740e78a1a2b1acb2cd60e5b9b2ab746e1af", "url": "https://github.com/kiegroup/jbpm/commit/bcc71740e78a1a2b1acb2cd60e5b9b2ab746e1af", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-18T13:04:34Z", "type": "forcePushed"}, {"oid": "255dfd71c17ea498591030886645c2538852bf5a", "url": "https://github.com/kiegroup/jbpm/commit/255dfd71c17ea498591030886645c2538852bf5a", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-18T16:21:47Z", "type": "forcePushed"}, {"oid": "950a41ce9d8e463e4c0c786752fb176b673c2988", "url": "https://github.com/kiegroup/jbpm/commit/950a41ce9d8e463e4c0c786752fb176b673c2988", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-18T16:28:29Z", "type": "forcePushed"}, {"oid": "22d4cd6fff4df40c2932f7c57ff1f7a09c0ee49b", "url": "https://github.com/kiegroup/jbpm/commit/22d4cd6fff4df40c2932f7c57ff1f7a09c0ee49b", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-18T16:34:02Z", "type": "forcePushed"}, {"oid": "18597e45e68f0d45bde5ac029d83a0226f70621b", "url": "https://github.com/kiegroup/jbpm/commit/18597e45e68f0d45bde5ac029d83a0226f70621b", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-18T16:35:58Z", "type": "forcePushed"}, {"oid": "cfb8e079fb5954708f508b4847ff81e091fb7c53", "url": "https://github.com/kiegroup/jbpm/commit/cfb8e079fb5954708f508b4847ff81e091fb7c53", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-19T18:36:56Z", "type": "forcePushed"}, {"oid": "18f8557338da2d070473094501f0b049462419e6", "url": "https://github.com/kiegroup/jbpm/commit/18f8557338da2d070473094501f0b049462419e6", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-20T13:11:03Z", "type": "forcePushed"}, {"oid": "0c4c741d246da4c6050604e3de2d8d435759b927", "url": "https://github.com/kiegroup/jbpm/commit/0c4c741d246da4c6050604e3de2d8d435759b927", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-20T13:31:32Z", "type": "forcePushed"}, {"oid": "7bcc5e59d8a0155e34ef7439eabd4a6b2551aa9c", "url": "https://github.com/kiegroup/jbpm/commit/7bcc5e59d8a0155e34ef7439eabd4a6b2551aa9c", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-20T16:19:26Z", "type": "forcePushed"}, {"oid": "abea764b9c06fcddeea7c0407ede5441a05916d0", "url": "https://github.com/kiegroup/jbpm/commit/abea764b9c06fcddeea7c0407ede5441a05916d0", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-23T08:46:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NjcwOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528746709", "bodyText": "The concept of \".\" as \"this\" is does not feel very standard.\nThe concept of expression [] for arrays is as well very strange without setting the name of the array.\nTo make things a bit more standard we should remove the logic of ensureLocated as you are trying to infer things.\nWe can can set the extra parameters as source/target for instance as a pointer to the object. or even something like\n@source[3].myprop = @target.myprop. This will avoid the problem of having node output express with the same name as target. (Edge case but could happen)\nThis should leave trail in the audit table so I would suggest to add a test about that to evaluate the source expression\ntarget expression\nthe call producer\nin three different steps.\nPlease also remove the need of #{} if the UI is no setting the language you have already more than enough check to work that properly.", "author": "elguardian", "createdAt": "2020-11-23T14:35:38Z", "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+import java.util.regex.Matcher;\n+\n+import org.drools.mvel.MVELSafeHelper;\n+import org.jbpm.process.instance.impl.AssignmentAction;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.util.PatternConstants;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.jbpm.workflow.instance.impl.NodeInstanceResolverFactory;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class MVELAssignmentAction implements AssignmentAction {\n+\n+    private String to;\n+    private String from;\n+    private String srcExpr;\n+    private String targetExpr;\n+    private AssignmentProducer producer;\n+    private BiFunction<ProcessContext, NodeInstance, Object> src;\n+    private BiFunction<ProcessContext, NodeInstance, Object> target;\n+\n+    public MVELAssignmentAction(Assignment assignment, String sourceExpr, String targetExpr,\n+                                BiFunction<ProcessContext, NodeInstance, Object> source,\n+                                BiFunction<ProcessContext, NodeInstance, Object> target, AssignmentProducer producer) {\n+\n+        Matcher fromMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getFrom());\n+        Matcher toMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getTo());\n+\n+        this.from = fromMatcher.find() ? fromMatcher.group(1) : assignment.getFrom();\n+        this.to = toMatcher.find() ? toMatcher.group(1) : assignment.getTo();\n+        this.src = source;\n+        this.target = target;\n+        this.srcExpr = sourceExpr;\n+        this.targetExpr = targetExpr;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void execute(NodeInstance nodeInstance, ProcessContext context) throws Exception {\n+        Object targetObject = this.target.apply(context, nodeInstance);\n+        Object srcObject = this.src.apply(context, nodeInstance);\n+        NodeInstanceResolverFactory resolver = new NodeInstanceResolverFactory(\n+                (org.jbpm.workflow.instance.NodeInstance) nodeInstance);\n+\n+        // if just evaluating, not assignment\n+        if (targetObject == null || notEvalTarget()) {\n+            producer.accept(context, nodeInstance, notEvalSrc() ? srcObject : MVELSafeHelper.getEvaluator().eval(\n+                    from, srcObject, resolver));\n+        } else {\n+            resolver.addExtraParameter(srcExpr, srcObject);\n+            resolver.addExtraParameter(targetExpr, targetObject);\n+            MVELSafeHelper.getEvaluator().eval(ensureLocated(targetExpr, to).concat(\"=\").concat(ensureLocated(srcExpr,\n+                    from)), resolver);\n+        }\n+    }", "originalCommit": "abea764b9c06fcddeea7c0407ede5441a05916d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMzM4Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528803382", "bodyText": "this keyword introduced to cope with the egde case, if expression has same name than target, this usage is mandatory, otherwise is optional", "author": "fjtirado", "createdAt": "2020-11-23T15:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NjcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMzk2OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528803969", "bodyText": "examples edited to not use #{} if language is specified in expression, otherwise it needs to be specified to identify the expression as mvel", "author": "fjtirado", "createdAt": "2020-11-23T15:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NjcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNDU0NA==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528804544", "bodyText": "this prefix is now used in list assigment example", "author": "fjtirado", "createdAt": "2020-11-23T15:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NjcwOQ=="}], "type": "inlineReview"}, {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7", "url": "https://github.com/kiegroup/jbpm/commit/494be54a81353d4f74a1c7e689a3582f75f7eee7", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-23T15:47:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwODU1Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528808552", "bodyText": "shouldn't we enclose both to and from together within an inner parenthesis? otherwise if dialect == null && PatternConstants.PARAMETER_MATCHER.matcher(from.getTextContent()).matches() gets evaluated to false it might happen that last part PatternConstants.PARAMETER_MATCHER.matcher(to.getTextContent()).matches() is equal true and therefore we might be overriding previous dialect (this is not taken into account in the second part of the condition)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (dialect == null && PatternConstants.PARAMETER_MATCHER.matcher(from.getTextContent()).matches() ||\n          \n          \n            \n                        PatternConstants.PARAMETER_MATCHER.matcher(to.getTextContent()).matches()) {\n          \n          \n            \n                    if (dialect == null && (PatternConstants.PARAMETER_MATCHER.matcher(from.getTextContent()).matches() ||\n          \n          \n            \n                        PatternConstants.PARAMETER_MATCHER.matcher(to.getTextContent()).matches())) {", "author": "afalhambra", "createdAt": "2020-11-23T15:57:16Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "diffHunk": "@@ -79,22 +90,75 @@ public static DataAssociation readDataOutputAssociation(Node xmlNode, Map<String\n         return new DataAssociation(source, target, assignment, transformation);\n     }\n     \n-    private static Assignment readAssignment(Node xmlNode) {\n-        NodeList nodeList = xmlNode.getChildNodes();\n-        String from = null;\n-        String to = null;\n-        for(int i = 0; i < nodeList.getLength(); i++) {\n-            Node subNode = nodeList.item(i);\n-            switch (subNode.getNodeName()) {\n-                case \"from\":\n-                    from = subNode.getTextContent();\n-                    break;\n-                case \"to\":\n-                    to = subNode.getTextContent();\n-                    break;\n+    public static List<Assignment> readAssignments(Node subNode) {\n+        List<Assignment> assignments = new LinkedList<>();\n+        while (subNode != null) {\n+            assignments.add(DataAssociationFactory.readAssignment(subNode));\n+            subNode = subNode.getNextSibling();\n+        }\n+        return assignments;\n+    }\n+\n+    public static Assignment readAssignment(Node xmlNode) {\n+        Node from = xmlNode.getFirstChild();\n+        if (from == null) {\n+            throw new IllegalArgumentException(\"missing from for assignment\");\n+        }\n+        Node to = from.getNextSibling();\n+        if (to == null) {\n+            throw new IllegalArgumentException(\"missing to for assigment\");\n+        }\n+        return new Assignment(getDialect(xmlNode, from, to), from.getTextContent(), to.getTextContent());\n+    }\n+\n+\n+    protected static String getDialect(Node node, Node from, Node to) {\n+        Collection<String> dialects = ProcessDialectRegistry.getDialects();\n+        if (!dialects.equals(dialectPatterns.keySet())) {\n+            dialectPatterns = buildDialectPatterns(dialects);\n+        }\n+\n+        // trying to retrieve dialect from to or from overridden language\n+        String dialect = findDialect(from.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        if (dialect == null) {\n+            dialect = findDialect(to.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        }\n+\n+        // there are some working process which declares MVEL in definition but use XPATH, in order\n+        // to prevent these files to fail, we check a flag (disable by default) before reading expression \n+        // language from definition\n+        if (dialect == null && Boolean.getBoolean(USE_DEFINITION_LANGUAGE_PROPERTY)) {\n+            Node parentNode;\n+            do {\n+                parentNode = node.getParentNode();\n+            }\n+            while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\"));\n+            if (parentNode != null) {\n+                dialect = findDialect(parentNode.getAttributes().getNamedItem(\"expressionLanguage\"));\n             }\n         }\n-        return new Assignment(\"XPath\", from, to);\n+        // finally, if still not able to determine language, check if from or to contains a mvel expression \n+        if (dialect == null && PatternConstants.PARAMETER_MATCHER.matcher(from.getTextContent()).matches() ||\n+            PatternConstants.PARAMETER_MATCHER.matcher(to.getTextContent()).matches()) {", "originalCommit": "494be54a81353d4f74a1c7e689a3582f75f7eee7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzNTMwNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529435305", "bodyText": "Good catch", "author": "fjtirado", "createdAt": "2020-11-24T10:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwODU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgxMTgwOA==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528811808", "bodyText": "potential infinitive loop? we are not getting latest parentNode when looping, thus we might be in an infinitive loop\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Node parentNode;\n          \n          \n            \n                        do {\n          \n          \n            \n                            parentNode = node.getParentNode();\n          \n          \n            \n                        }\n          \n          \n            \n                        while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\"));\n          \n          \n            \n                        Node parentNode = node.getParentNode();\n          \n          \n            \n                        while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\")) {\n          \n          \n            \n                            parentNode = parentNode.getParentNode();\n          \n          \n            \n                        }", "author": "afalhambra", "createdAt": "2020-11-23T15:59:48Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "diffHunk": "@@ -79,22 +90,75 @@ public static DataAssociation readDataOutputAssociation(Node xmlNode, Map<String\n         return new DataAssociation(source, target, assignment, transformation);\n     }\n     \n-    private static Assignment readAssignment(Node xmlNode) {\n-        NodeList nodeList = xmlNode.getChildNodes();\n-        String from = null;\n-        String to = null;\n-        for(int i = 0; i < nodeList.getLength(); i++) {\n-            Node subNode = nodeList.item(i);\n-            switch (subNode.getNodeName()) {\n-                case \"from\":\n-                    from = subNode.getTextContent();\n-                    break;\n-                case \"to\":\n-                    to = subNode.getTextContent();\n-                    break;\n+    public static List<Assignment> readAssignments(Node subNode) {\n+        List<Assignment> assignments = new LinkedList<>();\n+        while (subNode != null) {\n+            assignments.add(DataAssociationFactory.readAssignment(subNode));\n+            subNode = subNode.getNextSibling();\n+        }\n+        return assignments;\n+    }\n+\n+    public static Assignment readAssignment(Node xmlNode) {\n+        Node from = xmlNode.getFirstChild();\n+        if (from == null) {\n+            throw new IllegalArgumentException(\"missing from for assignment\");\n+        }\n+        Node to = from.getNextSibling();\n+        if (to == null) {\n+            throw new IllegalArgumentException(\"missing to for assigment\");\n+        }\n+        return new Assignment(getDialect(xmlNode, from, to), from.getTextContent(), to.getTextContent());\n+    }\n+\n+\n+    protected static String getDialect(Node node, Node from, Node to) {\n+        Collection<String> dialects = ProcessDialectRegistry.getDialects();\n+        if (!dialects.equals(dialectPatterns.keySet())) {\n+            dialectPatterns = buildDialectPatterns(dialects);\n+        }\n+\n+        // trying to retrieve dialect from to or from overridden language\n+        String dialect = findDialect(from.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        if (dialect == null) {\n+            dialect = findDialect(to.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        }\n+\n+        // there are some working process which declares MVEL in definition but use XPATH, in order\n+        // to prevent these files to fail, we check a flag (disable by default) before reading expression \n+        // language from definition\n+        if (dialect == null && Boolean.getBoolean(USE_DEFINITION_LANGUAGE_PROPERTY)) {\n+            Node parentNode;\n+            do {\n+                parentNode = node.getParentNode();\n+            }\n+            while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\"));", "originalCommit": "494be54a81353d4f74a1c7e689a3582f75f7eee7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NTI2MA==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529445260", "bodyText": "Good catch", "author": "fjtirado", "createdAt": "2020-11-24T10:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgxMTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI1MDE1Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529250156", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"missing to for assigment\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"missing to for assignment\");", "author": "afalhambra", "createdAt": "2020-11-24T07:19:30Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "diffHunk": "@@ -79,22 +90,75 @@ public static DataAssociation readDataOutputAssociation(Node xmlNode, Map<String\n         return new DataAssociation(source, target, assignment, transformation);\n     }\n     \n-    private static Assignment readAssignment(Node xmlNode) {\n-        NodeList nodeList = xmlNode.getChildNodes();\n-        String from = null;\n-        String to = null;\n-        for(int i = 0; i < nodeList.getLength(); i++) {\n-            Node subNode = nodeList.item(i);\n-            switch (subNode.getNodeName()) {\n-                case \"from\":\n-                    from = subNode.getTextContent();\n-                    break;\n-                case \"to\":\n-                    to = subNode.getTextContent();\n-                    break;\n+    public static List<Assignment> readAssignments(Node subNode) {\n+        List<Assignment> assignments = new LinkedList<>();\n+        while (subNode != null) {\n+            assignments.add(DataAssociationFactory.readAssignment(subNode));\n+            subNode = subNode.getNextSibling();\n+        }\n+        return assignments;\n+    }\n+\n+    public static Assignment readAssignment(Node xmlNode) {\n+        Node from = xmlNode.getFirstChild();\n+        if (from == null) {\n+            throw new IllegalArgumentException(\"missing from for assignment\");\n+        }\n+        Node to = from.getNextSibling();\n+        if (to == null) {\n+            throw new IllegalArgumentException(\"missing to for assigment\");", "originalCommit": "494be54a81353d4f74a1c7e689a3582f75f7eee7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI1NjY1Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529256653", "bodyText": "typo (missing n)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class MVELAssigmentBuilder implements AssignmentBuilder {\n          \n          \n            \n            public class MVELAssignmentBuilder implements AssignmentBuilder {", "author": "afalhambra", "createdAt": "2020-11-24T07:33:15Z", "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssigmentBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+\n+import org.drools.compiler.rule.builder.PackageBuildContext;\n+import org.jbpm.process.builder.AssignmentBuilder;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+\n+public class MVELAssigmentBuilder implements AssignmentBuilder {", "originalCommit": "494be54a81353d4f74a1c7e689a3582f75f7eee7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI2MzUzMw==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529263533", "bodyText": "Even though, throws Exception is declared in the AssignmentAction interface, this method doesn't throw any checked exception, thus it's not really needed, but up to you.", "author": "afalhambra", "createdAt": "2020-11-24T07:47:11Z", "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+import java.util.regex.Matcher;\n+\n+import org.drools.mvel.MVELSafeHelper;\n+import org.jbpm.process.instance.impl.AssignmentAction;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.util.PatternConstants;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.jbpm.workflow.instance.impl.NodeInstanceResolverFactory;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class MVELAssignmentAction implements AssignmentAction {\n+\n+    private String to;\n+    private String from;\n+    private String srcExpr;\n+    private String targetExpr;\n+    private AssignmentProducer producer;\n+    private BiFunction<ProcessContext, NodeInstance, Object> src;\n+    private BiFunction<ProcessContext, NodeInstance, Object> target;\n+\n+    private static final String THIS = \"this\";\n+\n+    public MVELAssignmentAction(Assignment assignment, String sourceExpr, String targetExpr,\n+                                BiFunction<ProcessContext, NodeInstance, Object> source,\n+                                BiFunction<ProcessContext, NodeInstance, Object> target, AssignmentProducer producer) {\n+\n+        Matcher fromMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getFrom());\n+        Matcher toMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getTo());\n+\n+        this.from = fromMatcher.find() ? fromMatcher.group(1) : assignment.getFrom();\n+        this.to = toMatcher.find() ? toMatcher.group(1) : assignment.getTo();\n+        this.src = source;\n+        this.target = target;\n+        this.srcExpr = sourceExpr;\n+        this.targetExpr = targetExpr;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void execute(NodeInstance nodeInstance, ProcessContext context) throws Exception {", "originalCommit": "494be54a81353d4f74a1c7e689a3582f75f7eee7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NzE1MA==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529447150", "bodyText": "good catch", "author": "fjtirado", "createdAt": "2020-11-24T10:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI2MzUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3OTM5OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529379399", "bodyText": "I think it would be good to add a test to prove it works fine when using Maps as Anton's comment in the jira ticket. So we are covering all possible scenarios, wdyt?", "author": "afalhambra", "createdAt": "2020-11-24T09:56:01Z", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/DataTest.java", "diffHunk": "@@ -495,7 +615,109 @@ public void executeWorkItem(WorkItem workItem,\n                 });\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"process\");\n-        \n+\n+    }\n+\n+    @Test\n+    public void testDataOutputAssociationsWithPojo() throws Exception {\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-DataOutputAssociations-Pojo.bpmn2\");\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\",\n+                new WorkItemHandler() {\n+\n+                    public void abortWorkItem(WorkItem manager,\n+                                              WorkItemManager mgr) {\n+\n+                    }\n+\n+                    public void executeWorkItem(WorkItem workItem,\n+                                                WorkItemManager mgr) {\n+                        WorkflowProcessInstance processInstance = (WorkflowProcessInstance) ksession.getProcessInstance(\n+                                workItem.getProcessInstanceId());\n+                        Person person = (Person) processInstance.getVariable(\"instanceMetadata\");\n+                        assertNotNull(person);\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Paris\", person.getAddress().getCity());\n+                        assertEquals(\"France\", person.getAddress().getCountry());\n+                        mgr.completeWorkItem(workItem.getId(), Collections.singletonMap(\"output\", new Person(\n+                                \"Javierito\", new Address(\"Sevilla\", \"Spain\"))));\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Sevilla\", person.getAddress().getCity());\n+                        assertEquals(\"Spain\", person.getAddress().getCountry());\n+                    }\n+\n+                });\n+        ksession.startProcess(\"process\", Collections.singletonMap(\"instanceMetadata\", new Person(\"Napoleon\",\n+                        new Address(\"Paris\", \"France\"))));\n+    }\n+\n+    @Test\n+    public void testDataOutputAssociationsWithPojoEmptyFrom() throws Exception {\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-DataOutputAssociations-Pojo-EmptyFrom.bpmn2\");\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\",\n+                new WorkItemHandler() {\n+\n+                    public void abortWorkItem(WorkItem manager,\n+                                              WorkItemManager mgr) {\n+\n+                    }\n+\n+                    public void executeWorkItem(WorkItem workItem,\n+                                                WorkItemManager mgr) {\n+                        WorkflowProcessInstance processInstance = (WorkflowProcessInstance) ksession.getProcessInstance(\n+                                workItem.getProcessInstanceId());\n+                        Person person = (Person) processInstance.getVariable(\"instanceMetadata\");\n+                        assertNotNull(person);\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Paris\", person.getAddress().getCity());\n+                        assertEquals(\"France\", person.getAddress().getCountry());\n+                        mgr.completeWorkItem(workItem.getId(), Collections.singletonMap(\"instanceAddress\", new Address(\n+                                \"Sevilla\", \"Spain\")));\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Sevilla\", person.getAddress().getCity());\n+                        assertEquals(\"Spain\", person.getAddress().getCountry());\n+                    }\n+\n+                });\n+        ksession.startProcess(\"process\", Collections.singletonMap(\"instanceMetadata\", new Person(\"Napoleon\",\n+                new Address(\"Paris\", \"France\"))));\n+    }\n+\n+    @Test\n+    public void testDataOutputAssociationsWithPojoList() throws Exception {", "originalCommit": "494be54a81353d4f74a1c7e689a3582f75f7eee7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2MjMxOA==", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529462318", "bodyText": "Done", "author": "fjtirado", "createdAt": "2020-11-24T11:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3OTM5OQ=="}], "type": "inlineReview"}, {"oid": "6205c5816f1cac81611c2e0e45cd15423d6b64af", "url": "https://github.com/kiegroup/jbpm/commit/6205c5816f1cac81611c2e0e45cd15423d6b64af", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-24T11:07:29Z", "type": "commit"}, {"oid": "6205c5816f1cac81611c2e0e45cd15423d6b64af", "url": "https://github.com/kiegroup/jbpm/commit/6205c5816f1cac81611c2e0e45cd15423d6b64af", "message": "[JBPM-9470] User Task output variable mapping to an object attribute\n\nReading expressionLanguage from process\nImplementing assigment for mvel\nAdding flag for backward compatibility with xpath", "committedDate": "2020-11-24T11:07:29Z", "type": "forcePushed"}]}