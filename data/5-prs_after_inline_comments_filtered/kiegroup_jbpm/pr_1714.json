{"pr_number": 1714, "pr_title": "[JBPM-9259] Create a test to validate new springboot DDL scripts", "pr_createdAt": "2020-07-29T11:21:53Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1714", "timeline": [{"oid": "fa5cd0545657b0a0d48f4df1b543e38968a7e1e8", "url": "https://github.com/kiegroup/jbpm/commit/fa5cd0545657b0a0d48f4df1b543e38968a7e1e8", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts", "committedDate": "2020-07-29T11:29:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNzEzNw==", "url": "https://github.com/kiegroup/jbpm/pull/1714#discussion_r463827137", "bodyText": "Just really minor thing that this parameter is actually a file and not a name, but nothing major :)", "author": "MarianMacik", "createdAt": "2020-07-31T20:45:35Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/TestsUtil.java", "diffHunk": "@@ -41,35 +41,36 @@\n      * Gets SQL scripts for selected database type.\n      * @param folderWithDDLs Root folder containing SQL scripts for all database types.\n      * @param databaseType Database type.\n-     * @param sortByName If true, resulting array of SQL script files will be sorted by filename using String\n-     * comparator.\n-     * @param dropFiles If true, return those files that don't contain 'drop' into the name. Otherwise,\n-     * return those containing 'drop'\n+     * @param scriptFilter Indicates the filter to apply, including springboot or not scripts and create/drop scripts\n      * @return Array of SQL script files. If there are no SQL script files found, returns empty array.\n      */\n-    public static File[] getDDLScriptFilesByDatabaseType(final File folderWithDDLs, final DatabaseType databaseType,\n-            final boolean sortByName, final boolean dropFiles) {\n+    public static File[] getDDLScriptFilesByDatabaseType(final File folderWithDDLs,\n+                                                         final DatabaseType databaseType,\n+                                                         final ScriptFilter scriptFilter) {\n         final File folderWithScripts = new File(folderWithDDLs.getPath() + File.separator + databaseType.getScriptsFolderName());\n-        if (folderWithScripts.exists()) {\n-            Predicate<File> filterNew = (name) -> name.getName().toLowerCase().contains(\"springboot\");\n-            Predicate<File> filterExtension = (name) -> name.getName().toLowerCase().endsWith(\".sql\");\n-            Predicate<File> filterName = (name) -> name.getName().contains(\"drop\");\n-            Predicate<File> filter = filterExtension.and((!dropFiles) ? filterName : filterName.negate()).and(filterNew.negate());\n-            File[] foundFiles = Arrays.asList(folderWithScripts.listFiles()).stream().filter(filter).toArray(File[]::new);\n-\n-            if (sortByName) {\n-                foundFiles = Arrays.stream(foundFiles).map(DatabaseScript::new).sorted().map(DatabaseScript::getScript).toArray(File[]::new);\n-\n-                if (databaseType.equals(DatabaseType.POSTGRESQL)) {\n-                    //Returns first schema sql\n-                    Arrays.sort(foundFiles, Comparator.<File, Boolean>comparing(s -> s.getName().contains(\"schema\")).reversed());\n-                }\n-            }\n-\n-            return foundFiles;\n-        } else {\n+        \n+        if (!folderWithScripts.exists()) {\n+            logger.warn(\"Folder with DDLs doesn't exist {}\", folderWithDDLs);\n             return new File[0];\n         }\n+        \n+        Predicate<File> filterExtension = (name) -> name.getName().toLowerCase().endsWith(\".sql\");\n+        Predicate<File> filterSpringboot = (name) -> name.getName().toLowerCase().contains(\"springboot\");\n+        Predicate<File> filterName = (name) -> name.getName().contains(\"drop\");", "originalCommit": "fa5cd0545657b0a0d48f4df1b543e38968a7e1e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzM3OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1714#discussion_r463877379", "bodyText": "Thanks for your review, updated.", "author": "gmunozfe", "createdAt": "2020-07-31T22:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNzEzNw=="}], "type": "inlineReview"}, {"oid": "577841255d4e0b202c304e7048d8aa0e8250cb49", "url": "https://github.com/kiegroup/jbpm/commit/577841255d4e0b202c304e7048d8aa0e8250cb49", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts", "committedDate": "2020-07-31T22:45:39Z", "type": "forcePushed"}, {"oid": "a4553aa4f3916755be3aff587d026ab0b6faa3cf", "url": "https://github.com/kiegroup/jbpm/commit/a4553aa4f3916755be3aff587d026ab0b6faa3cf", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts", "committedDate": "2020-08-01T11:53:49Z", "type": "commit"}, {"oid": "a4553aa4f3916755be3aff587d026ab0b6faa3cf", "url": "https://github.com/kiegroup/jbpm/commit/a4553aa4f3916755be3aff587d026ab0b6faa3cf", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts", "committedDate": "2020-08-01T11:53:49Z", "type": "forcePushed"}]}