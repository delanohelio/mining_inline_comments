{"pr_number": 1625, "pr_title": "[JBPM-9094] Add the ability to specify an CaseId Expression and Sequence Name / Case Prefix Expression", "pr_createdAt": "2020-04-02T10:53:15Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1625", "timeline": [{"oid": "b3debea701a86a3d07e844468467fba8520c89ff", "url": "https://github.com/kiegroup/jbpm/commit/b3debea701a86a3d07e844468467fba8520c89ff", "message": "[JBPM-9094] Add the ability to specify an CaseId Expression and Sequence Name / Case Prefix Expression\n\nadding expression support for case Id and prefix", "committedDate": "2020-04-06T07:26:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNDQwNw==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r403904407", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return StringUtils.leftPad(text, count, pad);\n          \n          \n            \n                    return StringUtils.rightPad(text, count, pad);\n          \n      \n    \n    \n  \n\nWrong method", "author": "gmunozfe", "createdAt": "2020-04-06T08:12:02Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/generator/CaseIdExpressionFunctions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.casemgmt.impl.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public final class CaseIdExpressionFunctions {\n+\n+    public static final CaseIdExpressionFunctions CASE_ID_FUNCTIONS = new CaseIdExpressionFunctions();\n+\n+    private CaseIdExpressionFunctions() {}\n+\n+    public static final String LPAD(Integer id, Integer count, String pad) {\n+        return StringUtils.leftPad(id.toString(), count, pad);\n+    }\n+\n+    public static final String RPAD(Integer id, Integer count, String pad) {\n+        return StringUtils.rightPad(id.toString(), count, pad);\n+    }\n+\n+    public static final String LPAD(String text, Integer count, String pad) {\n+        return StringUtils.leftPad(text, count, pad);\n+    }\n+\n+    public static final String RPAD(String text, Integer count, String pad) {\n+        return StringUtils.leftPad(text, count, pad);", "originalCommit": "b3debea701a86a3d07e844468467fba8520c89ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNzk2NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r403907965", "bodyText": "nitpicking... 2020", "author": "gmunozfe", "createdAt": "2020-04-06T08:18:02Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-api/src/main/java/org/jbpm/casemgmt/api/generator/CaseIdCannotBeGeneratedException.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.", "originalCommit": "b3debea701a86a3d07e844468467fba8520c89ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzNTg2NA==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r403935864", "bodyText": "Update javadoc adding deploymendId param", "author": "gmunozfe", "createdAt": "2020-04-06T09:03:47Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-api/src/main/java/org/jbpm/casemgmt/api/generator/CaseIdGenerator.java", "diffHunk": "@@ -39,21 +39,31 @@\n      * Should be called only one time per given prefix. Subsequent calls with same prefix do not affect the generator state.\n      * @param prefix unique prefix that should be used for generating case identifiers", "originalCommit": "b3debea701a86a3d07e844468467fba8520c89ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzNjMzNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r403936335", "bodyText": "update javadoc, now it refers to deploymentId", "author": "gmunozfe", "createdAt": "2020-04-06T09:04:27Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-api/src/main/java/org/jbpm/casemgmt/api/generator/CaseIdGenerator.java", "diffHunk": "@@ -39,21 +39,31 @@\n      * Should be called only one time per given prefix. Subsequent calls with same prefix do not affect the generator state.\n      * @param prefix unique prefix that should be used for generating case identifiers\n      */\n-    void register(String prefix);\n+    void register(String deploymentId, String prefix);\n     \n     /**\n-     * Unregisters given prefix from the generator. It's up to generator implementation to either remove the prefix \n+     * Unregisters given prefixes from the generator for a particular deployment. It's up to generator implementation to either remove the prefix \n      * and its latest value permanently or resume it in case of further registration of the same prefix.\n      * @param prefix unique prefix that should be used for generating case identifiers", "originalCommit": "b3debea701a86a3d07e844468467fba8520c89ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzODE3MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r403938171", "bodyText": "It doesn't seem a very accurate description about what the method does.", "author": "gmunozfe", "createdAt": "2020-04-06T09:07:22Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-api/src/main/java/org/jbpm/casemgmt/api/generator/CaseIdGenerator.java", "diffHunk": "@@ -39,21 +39,31 @@\n      * Should be called only one time per given prefix. Subsequent calls with same prefix do not affect the generator state.\n      * @param prefix unique prefix that should be used for generating case identifiers\n      */\n-    void register(String prefix);\n+    void register(String deploymentId, String prefix);\n     \n     /**\n-     * Unregisters given prefix from the generator. It's up to generator implementation to either remove the prefix \n+     * Unregisters given prefixes from the generator for a particular deployment. It's up to generator implementation to either remove the prefix \n      * and its latest value permanently or resume it in case of further registration of the same prefix.\n      * @param prefix unique prefix that should be used for generating case identifiers\n      */\n-    void unregister(String prefix);\n+    void unregister(String deploymentId);\n     \n     /**\n      * Generates next value for given prefix. Returned value should include the prefix as part of the returned value.\n      * @param prefix unique prefix that should be used for generating case identifiers\n      * @return complete case id in format (PREFIX-GENERATED_VALUE)\n      * @param optionalParameters map of optionalParameters that might be helpful for implementation\n      * @throws CasePrefixNotFoundException in case given prefix was not registered\n+     * @throws CaseIdCannotBeGeneratedException in case the expression cannot be evaluated\n      */\n-    String generate(String prefix, Map<String, Object> optionalParameters) throws CasePrefixNotFoundException;\n+    String generate(String prefix, Map<String, Object> optionalParameters);\n+\n+    /**\n+     * evaluates the current prefix to generate the sequence name", "originalCommit": "b3debea701a86a3d07e844468467fba8520c89ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzODM5OA==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r403938398", "bodyText": "Missing optionalParameters in the javadoc", "author": "gmunozfe", "createdAt": "2020-04-06T09:07:44Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-api/src/main/java/org/jbpm/casemgmt/api/generator/CaseIdGenerator.java", "diffHunk": "@@ -39,21 +39,31 @@\n      * Should be called only one time per given prefix. Subsequent calls with same prefix do not affect the generator state.\n      * @param prefix unique prefix that should be used for generating case identifiers\n      */\n-    void register(String prefix);\n+    void register(String deploymentId, String prefix);\n     \n     /**\n-     * Unregisters given prefix from the generator. It's up to generator implementation to either remove the prefix \n+     * Unregisters given prefixes from the generator for a particular deployment. It's up to generator implementation to either remove the prefix \n      * and its latest value permanently or resume it in case of further registration of the same prefix.\n      * @param prefix unique prefix that should be used for generating case identifiers\n      */\n-    void unregister(String prefix);\n+    void unregister(String deploymentId);\n     \n     /**\n      * Generates next value for given prefix. Returned value should include the prefix as part of the returned value.\n      * @param prefix unique prefix that should be used for generating case identifiers\n      * @return complete case id in format (PREFIX-GENERATED_VALUE)\n      * @param optionalParameters map of optionalParameters that might be helpful for implementation\n      * @throws CasePrefixNotFoundException in case given prefix was not registered\n+     * @throws CaseIdCannotBeGeneratedException in case the expression cannot be evaluated\n      */\n-    String generate(String prefix, Map<String, Object> optionalParameters) throws CasePrefixNotFoundException;\n+    String generate(String prefix, Map<String, Object> optionalParameters);\n+\n+    /**\n+     * evaluates the current prefix to generate the sequence name\n+     * @param identifierPrefix expression to be evaluated\n+     * @return returns the sequence name", "originalCommit": "b3debea701a86a3d07e844468467fba8520c89ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2OTQ2NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r403969465", "bodyText": "nitpicking... 2020", "author": "gmunozfe", "createdAt": "2020-04-06T09:58:09Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/CaseIdGeneratorTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.", "originalCommit": "b3debea701a86a3d07e844468467fba8520c89ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7367a9217df2e7006a1b0adbde1ddadd0010afc9", "url": "https://github.com/kiegroup/jbpm/commit/7367a9217df2e7006a1b0adbde1ddadd0010afc9", "message": "[JBPM-9094] Add the ability to specify an CaseId Expression and Sequence Name / Case Prefix Expression\n\nadding expression support for case Id and prefix", "committedDate": "2020-04-07T10:41:29Z", "type": "forcePushed"}, {"oid": "839d5ab40a4bf704f8a91a588433f48d31668d6a", "url": "https://github.com/kiegroup/jbpm/commit/839d5ab40a4bf704f8a91a588433f48d31668d6a", "message": "[JBPM-9094] Add the ability to specify an CaseId Expression and Sequence Name / Case Prefix Expression\n\nadding expression support for case Id and prefix", "committedDate": "2020-04-07T10:49:08Z", "type": "forcePushed"}, {"oid": "3508065dea63c26befe58a7aebfbbcd36d923ffb", "url": "https://github.com/kiegroup/jbpm/commit/3508065dea63c26befe58a7aebfbbcd36d923ffb", "message": "[JBPM-9094] Add the ability to specify an CaseId Expression and Sequence Name / Case Prefix Expression\n\nadding expression support for case Id and prefix", "committedDate": "2020-04-07T11:26:55Z", "type": "forcePushed"}, {"oid": "b6294c77476f394b80469de16dd1b429d73568f1", "url": "https://github.com/kiegroup/jbpm/commit/b6294c77476f394b80469de16dd1b429d73568f1", "message": "[JBPM-9094] Add the ability to specify an CaseId Expression and Sequence Name / Case Prefix Expression\n\nadding expression support for case Id and prefix", "committedDate": "2020-04-08T07:16:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0MzYwMg==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r412843602", "bodyText": "Just curious, is this backward-compatible in case somebody implemented its own generator? It is possible to set it either directly in jBPM or through the ServiceLoader in CaseKieServerExtension in KIE Server.", "author": "MarianMacik", "createdAt": "2020-04-22T09:58:04Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-api/src/main/java/org/jbpm/casemgmt/api/generator/CaseIdGenerator.java", "diffHunk": "@@ -37,23 +37,35 @@\n \n     /**\n      * Should be called only one time per given prefix. Subsequent calls with same prefix do not affect the generator state.\n+     * @param deploymentId deploymentId this prefix expression belongs to.\n      * @param prefix unique prefix that should be used for generating case identifiers\n      */\n-    void register(String prefix);\n+    void register(String deploymentId, String prefix);", "originalCommit": "b6294c77476f394b80469de16dd1b429d73568f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkwMTIzNg==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r412901236", "bodyText": "This is under discussion with the field.\nIn we go this way there is no other way to know which prefix belongs to which deployments as prefix will be dynamic. So this is fine to break backward compatitibliy.", "author": "elguardian", "createdAt": "2020-04-22T11:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0MzYwMg=="}], "type": "inlineReview"}, {"oid": "8dc49458a81a5656f5e370b75830c0aa88e94e47", "url": "https://github.com/kiegroup/jbpm/commit/8dc49458a81a5656f5e370b75830c0aa88e94e47", "message": "[JPBM-9094] Add the ability to specify a Case Prefix Expression\n\nadd the possibility to specify the case Id prefix expression throgh MVEL template", "committedDate": "2020-04-24T08:31:03Z", "type": "forcePushed"}, {"oid": "da018ec279fcdc40177e2557716ce0ead9dce4fb", "url": "https://github.com/kiegroup/jbpm/commit/da018ec279fcdc40177e2557716ce0ead9dce4fb", "message": "[JPBM-9094] Add the ability to specify a Case Prefix Expression\n\nadd the possibility to specify the case Id prefix expression throgh MVEL template", "committedDate": "2020-04-24T11:30:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzMjM4NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r415632385", "bodyText": "Remove this line", "author": "gmunozfe", "createdAt": "2020-04-27T08:53:54Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-api/src/main/java/org/jbpm/casemgmt/api/generator/CaseIdGenerator.java", "diffHunk": "@@ -55,5 +55,16 @@\n      * @param optionalParameters map of optionalParameters that might be helpful for implementation\n      * @throws CasePrefixNotFoundException in case given prefix was not registered", "originalCommit": "da018ec279fcdc40177e2557716ce0ead9dce4fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4Nzk1OA==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r416387958", "bodyText": "just because it is not a checked exception it does not mean that it should not be documented.", "author": "elguardian", "createdAt": "2020-04-28T07:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzMjM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDcxNg==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r415634716", "bodyText": "Same here", "author": "gmunozfe", "createdAt": "2020-04-27T08:57:01Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-api/src/main/java/org/jbpm/casemgmt/api/generator/CaseIdGenerator.java", "diffHunk": "@@ -55,5 +55,16 @@\n      * @param optionalParameters map of optionalParameters that might be helpful for implementation\n      * @throws CasePrefixNotFoundException in case given prefix was not registered\n      */\n-    String generate(String prefix, Map<String, Object> optionalParameters) throws CasePrefixNotFoundException;\n+    String generate(String prefix, Map<String, Object> optionalParameters);\n+\n+    /**\n+     * Evaluates the current prefix expression to generate the sequence name given the parameters passed\n+     * @param identifierPrefix expression to be evaluated\n+     * @param optionalParameters parameters needed to evaluate the expression\n+     * @return returns the sequence name\n+     * @throws CasePrefixCannotBeGeneratedException when it is not possible to generate the case prefix expression", "originalCommit": "da018ec279fcdc40177e2557716ce0ead9dce4fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4ODAyNA==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r416388024", "bodyText": "just because it is not a checked exception it does not mean that it should not be documented.", "author": "elguardian", "createdAt": "2020-04-28T07:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5MTA2Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r415691067", "bodyText": "Add a new test, similar to previous one with\ndata.put(\"IS_PREFIX_SEQUENCE\", null);\nand caseDefinitionId: EmptyCaseWithCaseIdPrefix4\nThere are 2 null pointer exceptions, at marshal/unmarshal methods of CaseFileInstanceMarshallingStrategy class, that could be avoided by checking\n\n\ndataEntry.getValue() != null \n  \n    \n      jbpm/jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/marshalling/CaseFileInstanceMarshallingStrategy.java\n    \n    \n         Line 144\n      in\n      778e63a\n    \n    \n    \n    \n\n        \n          \n           if (marshaller.accept(dataEntry.getValue())) { \n        \n    \n  \n\n\n\n\nserializedContent.getContent() != null\n\n  \n    \n      jbpm/jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/marshalling/CaseFileInstanceMarshallingStrategy.java\n    \n    \n         Line 187\n      in\n      778e63a\n    \n    \n    \n    \n\n        \n          \n           Object value = marshaller.unmarshal(context, is, serializedContent.getContent(), classloader); \n        \n    \n  \n\n\n\n\nWdyt?", "author": "gmunozfe", "createdAt": "2020-04-27T10:20:43Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/CaseIdGeneratorTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.casemgmt.impl;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.casemgmt.impl.util.AbstractCaseServicesBaseTest;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class CaseIdGeneratorTest extends AbstractCaseServicesBaseTest {\n+\n+    @Override\n+    protected List<String> getProcessDefinitionFiles() {\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"cases/EmptyCaseWithCaseIdPrefix1.bpmn2\");\n+        processes.add(\"cases/EmptyCaseWithCaseIdPrefix2.bpmn2\");\n+        processes.add(\"cases/EmptyCaseWithCaseIdPrefix3.bpmn2\");\n+        processes.add(\"cases/EmptyCaseWithCaseIdPrefix4.bpmn2\");\n+        processes.add(\"cases/EmptyCase.bpmn2\");\n+        return processes;\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseExpression() {\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"class\", \"test\");\n+        CaseFileInstance caseFile = caseService.newCaseFileInstance(deploymentUnit.getIdentifier(), \"EmptyCaseWithIdCaseExpression\", data);\n+\n+        String caseId = caseService.startCase(deploymentUnit.getIdentifier(), \"EmptyCaseWithIdCaseExpression\", caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"EmptyCaseWithIdCaseExpression-0000000001\", caseId);\n+        caseService.cancelCase(caseId);\n+\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithOverridingSequence() {\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"CORRELATION_KEY\", \"0101010101\");\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        CaseFileInstance caseFile = caseService.newCaseFileInstance(deploymentUnit.getIdentifier(), \"EmptyCaseWithIdCaseExpressionAndEmptyPrefixExpression\", data);\n+\n+        String caseId = caseService.startCase(deploymentUnit.getIdentifier(), \"EmptyCaseWithIdCaseExpressionAndEmptyPrefixExpression\", caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"0101010101\", caseId);\n+        caseService.cancelCase(caseId);\n+    }\n+", "originalCommit": "da018ec279fcdc40177e2557716ce0ead9dce4fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NzcyMw==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r416377723", "bodyText": "null is not really a valid input. so it does not really make sense.", "author": "elguardian", "createdAt": "2020-04-28T07:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5MTA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5NDYxMw==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r415694613", "bodyText": "Add a test to cover also this line (e.g., with a non-existing variable at customCaseIdPrefix metadata)", "author": "gmunozfe", "createdAt": "2020-04-27T10:26:19Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/generator/TableCaseIdGenerator.java", "diffHunk": "@@ -84,11 +87,19 @@ public void unregister(String prefix) {\n         } else {\n             logger.debug(\"Skipping remove of case id info for prefix {}\", prefix);\n         }\n+    }\n \n+    @Override\n+    public String resolveCaseIdPrefix(String expression, Map<String, Object> optionalParameters) {\n+        try {\n+            return !expression.isEmpty() ? (String) TemplateRuntime.eval(expression, CASE_ID_FUNCTIONS, optionalParameters) : \"\";\n+        } catch (org.mvel2.CompileException e) {\n+            throw new CasePrefixCannotBeGeneratedException(\"Case Id Prefix cannot be generated\", e);", "originalCommit": "da018ec279fcdc40177e2557716ce0ead9dce4fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4NzQ5OA==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r416387498", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-04-28T07:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5NDYxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNzMxNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r415737315", "bodyText": "Why InMemoryCaseIdGenerator doesn't override this method, same as TableCaseIdGenerator?\nBoth should work the same", "author": "gmunozfe", "createdAt": "2020-04-27T11:36:30Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-api/src/main/java/org/jbpm/casemgmt/api/generator/CaseIdGenerator.java", "diffHunk": "@@ -55,5 +55,16 @@\n      * @param optionalParameters map of optionalParameters that might be helpful for implementation\n      * @throws CasePrefixNotFoundException in case given prefix was not registered\n      */\n-    String generate(String prefix, Map<String, Object> optionalParameters) throws CasePrefixNotFoundException;\n+    String generate(String prefix, Map<String, Object> optionalParameters);\n+\n+    /**\n+     * Evaluates the current prefix expression to generate the sequence name given the parameters passed\n+     * @param identifierPrefix expression to be evaluated\n+     * @param optionalParameters parameters needed to evaluate the expression\n+     * @return returns the sequence name\n+     * @throws CasePrefixCannotBeGeneratedException when it is not possible to generate the case prefix expression\n+     */\n+    default String resolveCaseIdPrefix(String prefix, Map<String, Object> optionalParameters) {\n+        return prefix;", "originalCommit": "da018ec279fcdc40177e2557716ce0ead9dce4fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2MTU0NA==", "url": "https://github.com/kiegroup/jbpm/pull/1625#discussion_r416361544", "bodyText": "to mantain backward compatibilty. It is not relevant to do this and it is not really used.", "author": "elguardian", "createdAt": "2020-04-28T06:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNzMxNQ=="}], "type": "inlineReview"}, {"oid": "5a75d7f6e4bbe671ab0cd5b42950b50b67263caf", "url": "https://github.com/kiegroup/jbpm/commit/5a75d7f6e4bbe671ab0cd5b42950b50b67263caf", "message": "[JPBM-9094] Add the ability to specify a Case Prefix Expression\n\nadd the possibility to specify the case Id prefix expression throgh MVEL template", "committedDate": "2020-04-28T07:30:39Z", "type": "commit"}, {"oid": "5a75d7f6e4bbe671ab0cd5b42950b50b67263caf", "url": "https://github.com/kiegroup/jbpm/commit/5a75d7f6e4bbe671ab0cd5b42950b50b67263caf", "message": "[JPBM-9094] Add the ability to specify a Case Prefix Expression\n\nadd the possibility to specify the case Id prefix expression throgh MVEL template", "committedDate": "2020-04-28T07:30:39Z", "type": "forcePushed"}]}