{"pr_number": 1797, "pr_title": "[JBPM-9459] Nested process instances abort doesn't work when a task in event subprocess is marked with \"Is Async\" as true", "pr_createdAt": "2020-11-10T12:23:30Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1797", "timeline": [{"oid": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "url": "https://github.com/kiegroup/jbpm/commit/6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "message": "[JBPM-9459] Nested process instances abort doesn't work when a task in event subprocess is marked with \"Is Async\" as true", "committedDate": "2020-11-10T13:20:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NTE4OA==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r521345188", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // we need to abort first otherwise the end node will completed the process normally (something that should not happen\n          \n          \n            \n                            // we need to abort first otherwise the end node will complete the process normally (something that should not happen)", "author": "afalhambra", "createdAt": "2020-11-11T13:07:00Z", "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/EventSubProcessNodeInstance.java", "diffHunk": "@@ -79,21 +79,23 @@ public void nodeInstanceCompleted(org.jbpm.workflow.instance.NodeInstance nodeIn\n         if (nodeInstance instanceof EndNodeInstance) { \n             if (getCompositeNode().isKeepActive()) {\n                 StartNode startNode = getCompositeNode().findStartNode();\n-                triggerCompleted(true);\n+\n+                // we need to abort first otherwise the end node will completed the process normally (something that should not happen", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyMzcxOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522023719", "bodyText": "done", "author": "elguardian", "createdAt": "2020-11-12T11:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NTE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5ODkyOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r521998929", "bodyText": "Unused import - please remove\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.junit.Assert;", "author": "afalhambra", "createdAt": "2020-11-12T10:27:22Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -16,19 +16,30 @@\n \n package org.jbpm.test.functional.async;\n \n+import static java.util.Collections.emptyMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.jbpm.test.tools.TrackingListenerAssert.assertProcessStarted;\n+import static org.jbpm.test.tools.TrackingListenerAssert.assertTriggeredAndLeft;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n import org.jbpm.executor.ExecutorServiceFactory;\n import org.jbpm.kie.services.impl.admin.commands.TriggerNodeCommand;\n import org.jbpm.test.JbpmTestCase;\n import org.jbpm.test.listener.TrackingProcessEventListener;\n import org.junit.After;\n+import org.junit.Assert;", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyMzkzMA==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522023930", "bodyText": "done", "author": "elguardian", "createdAt": "2020-11-12T11:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5ODkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMDE3Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522000176", "bodyText": "Isn't it too much? Actually child process 3, just directly throw a runtimeException so it should be pretty straight forward.", "author": "afalhambra", "createdAt": "2020-11-12T10:29:21Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNDA4Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522024086", "bodyText": "it is the standard around", "author": "elguardian", "createdAt": "2020-11-12T11:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMDE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTY1OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522001659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n          \n          \n            \n                            if(ERROR_MULTILEVEL_MAIN_PROCESS_ID.equals(event.getProcessInstance().getProcessId())) {", "author": "afalhambra", "createdAt": "2020-11-12T10:31:40Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNDQ4MA==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522024480", "bodyText": "done", "author": "elguardian", "createdAt": "2020-11-12T11:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNTc0Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522005743", "bodyText": "It might be clearer\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n          \n          \n            \n                    assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(ProcessInstance.STATE_ABORTED));", "author": "afalhambra", "createdAt": "2020-11-12T10:38:09Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler());\n+        ProcessInstance pi = ksession.startProcess(ERROR_MULTILEVEL_MAIN_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNDgyNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522024825", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-11-12T11:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNTc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNjE0MA==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522006140", "bodyText": "is it not the same as previous assert?", "author": "afalhambra", "createdAt": "2020-11-12T10:38:51Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler());\n+        ProcessInstance pi = ksession.startProcess(ERROR_MULTILEVEL_MAIN_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNjY4OA==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522006688", "bodyText": "I think we should also check the status of subprocess 2 and 3, as they must be in an aborted state", "author": "afalhambra", "createdAt": "2020-11-12T10:39:43Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler());\n+        ProcessInstance pi = ksession.startProcess(ERROR_MULTILEVEL_MAIN_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());\n+ ", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNjkzMg==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522006932", "bodyText": "Same as previous test", "author": "afalhambra", "createdAt": "2020-11-12T10:40:03Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler());\n+        ProcessInstance pi = ksession.startProcess(ERROR_MULTILEVEL_MAIN_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());\n+ \n+    }\n+\n+    \n+\n+    @Test(timeout = 30000)", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNzQ2Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522007463", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(\"cascade-abort.MainProcess\".equals(event.getProcessInstance().getProcessId())) {\n          \n          \n            \n                            if(if(ERROR_ASYNC_MAIN_EXCEPTION_PROCESS_ID.equals(event.getProcessInstance().getProcessId())) {.equals(event.getProcessInstance().getProcessId())) {", "author": "afalhambra", "createdAt": "2020-11-12T10:40:52Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler());\n+        ProcessInstance pi = ksession.startProcess(ERROR_MULTILEVEL_MAIN_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());\n+ \n+    }\n+\n+    \n+\n+    @Test(timeout = 30000)\n+    public void testErrorAsyncActivity() throws Exception {\n+\n+        KieSession ksession = createKSession(ERROR_ASYNC_CHILD_EXCEPTION_PROCESS,  ERROR_ASYNC_MAIN_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"cascade-abort.MainProcess\".equals(event.getProcessInstance().getProcessId())) {", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMTgyNw==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522031827", "bodyText": "done", "author": "elguardian", "createdAt": "2020-11-12T11:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNzQ2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwODIzNA==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522008234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n          \n          \n            \n                    assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(ProcessInstance.STATE_ABORTED));", "author": "afalhambra", "createdAt": "2020-11-12T10:42:03Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler());\n+        ProcessInstance pi = ksession.startProcess(ERROR_MULTILEVEL_MAIN_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());\n+ \n+    }\n+\n+    \n+\n+    @Test(timeout = 30000)\n+    public void testErrorAsyncActivity() throws Exception {\n+\n+        KieSession ksession = createKSession(ERROR_ASYNC_CHILD_EXCEPTION_PROCESS,  ERROR_ASYNC_MAIN_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"cascade-abort.MainProcess\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler(true));\n+        ProcessInstance pi = ksession.startProcess(ERROR_ASYNC_MAIN_EXCEPTION_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNTEwNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522025105", "bodyText": "done", "author": "elguardian", "createdAt": "2020-11-12T11:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwODIzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwODY2Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522008667", "bodyText": "I think we should also check status of subprocess to verify it is also in an aborted status", "author": "afalhambra", "createdAt": "2020-11-12T10:42:42Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler());\n+        ProcessInstance pi = ksession.startProcess(ERROR_MULTILEVEL_MAIN_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());\n+ \n+    }\n+\n+    \n+\n+    @Test(timeout = 30000)\n+    public void testErrorAsyncActivity() throws Exception {\n+\n+        KieSession ksession = createKSession(ERROR_ASYNC_CHILD_EXCEPTION_PROCESS,  ERROR_ASYNC_MAIN_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"cascade-abort.MainProcess\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler(true));\n+        ProcessInstance pi = ksession.startProcess(ERROR_ASYNC_MAIN_EXCEPTION_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMTkwMg==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522031902", "bodyText": "done", "author": "elguardian", "createdAt": "2020-11-12T11:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwODY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwOTU0NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522009545", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            // empty", "author": "afalhambra", "createdAt": "2020-11-12T10:44:05Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler());\n+        ProcessInstance pi = ksession.startProcess(ERROR_MULTILEVEL_MAIN_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());\n+ \n+    }\n+\n+    \n+\n+    @Test(timeout = 30000)\n+    public void testErrorAsyncActivity() throws Exception {\n+\n+        KieSession ksession = createKSession(ERROR_ASYNC_CHILD_EXCEPTION_PROCESS,  ERROR_ASYNC_MAIN_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"cascade-abort.MainProcess\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler(true));\n+        ProcessInstance pi = ksession.startProcess(ERROR_ASYNC_MAIN_EXCEPTION_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());\n+ \n+    }\n \n+    class RestWorkItemHandler implements WorkItemHandler {\n \n+        \n+        private boolean throwException;\n+\n+        public RestWorkItemHandler() {\n+            this(false);\n+        }\n+        \n+        public RestWorkItemHandler(boolean throwException) {\n+            this.throwException = throwException;\n+        }\n+        \n+        @Override\n+        public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n+            if(throwException) {\n+                throw new RuntimeException();\n+            }\n+            manager.completeWorkItem(workItem.getId(), emptyMap());\n+        }\n+\n+        @Override\n+        public void abortWorkItem(WorkItem workItem, WorkItemManager manager) {\n+", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNTI3Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522025276", "bodyText": "done", "author": "elguardian", "createdAt": "2020-11-12T11:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwOTU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwOTczNg==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522009736", "bodyText": "can be static\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                class RestWorkItemHandler implements WorkItemHandler {\n          \n          \n            \n                static class RestWorkItemHandler implements WorkItemHandler {", "author": "afalhambra", "createdAt": "2020-11-12T10:44:22Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/async/AsyncAdHocSubprocessTest.java", "diffHunk": "@@ -91,6 +126,81 @@ public void testAdHocSubAsyncProcessAuto() throws Exception {\n         assertProcessInstanceAborted(id);\n     }\n \n+    @Test(timeout = 30000)\n+    public void testErrorMultilevelActivity() throws Exception {\n+\n+        \n+        \n+        KieSession ksession = createKSession(ERROR_MULTILEVEL_MAIN_PROCESS, ERROR_MULTILEVEL_CHILD_PROCESS, ERROR_MULTILEVEL_CHILD_CHILD_PROCESS, ERROR_MULTILEVEL_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"nested-abort.level1P\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler());\n+        ProcessInstance pi = ksession.startProcess(ERROR_MULTILEVEL_MAIN_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());\n+ \n+    }\n+\n+    \n+\n+    @Test(timeout = 30000)\n+    public void testErrorAsyncActivity() throws Exception {\n+\n+        KieSession ksession = createKSession(ERROR_ASYNC_CHILD_EXCEPTION_PROCESS,  ERROR_ASYNC_MAIN_EXCEPTION_PROCESS);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ksession.addEventListener(new DefaultProcessEventListener() {\n+            @Override\n+            public void afterProcessCompleted(ProcessCompletedEvent event) {\n+                if(\"cascade-abort.MainProcess\".equals(event.getProcessInstance().getProcessId())) {\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Rest\", new RestWorkItemHandler(true));\n+        ProcessInstance pi = ksession.startProcess(ERROR_ASYNC_MAIN_EXCEPTION_PROCESS_ID);\n+        latch.await();\n+\n+        Thread.sleep(1000L);\n+        assertThat(getLogService().findProcessInstance(pi.getId()).getStatus(), is(3));\n+        assertProcessInstanceAborted(pi.getId());\n+ \n+    }\n \n+    class RestWorkItemHandler implements WorkItemHandler {", "originalCommit": "6792e1ea4b8cdb2fd5c6b3a4f591ad75c8d5f341", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMzE2MA==", "url": "https://github.com/kiegroup/jbpm/pull/1797#discussion_r522033160", "bodyText": "done", "author": "elguardian", "createdAt": "2020-11-12T11:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwOTczNg=="}], "type": "inlineReview"}, {"oid": "cf058d34e1feab742d65c9c9fb5f2ea16ea4f93b", "url": "https://github.com/kiegroup/jbpm/commit/cf058d34e1feab742d65c9c9fb5f2ea16ea4f93b", "message": "[JBPM-9459] Nested process instances abort doesn't work when a task in event subprocess is marked with \"Is Async\" as true", "committedDate": "2020-11-12T11:26:50Z", "type": "commit"}, {"oid": "cf058d34e1feab742d65c9c9fb5f2ea16ea4f93b", "url": "https://github.com/kiegroup/jbpm/commit/cf058d34e1feab742d65c9c9fb5f2ea16ea4f93b", "message": "[JBPM-9459] Nested process instances abort doesn't work when a task in event subprocess is marked with \"Is Async\" as true", "committedDate": "2020-11-12T11:26:50Z", "type": "forcePushed"}]}