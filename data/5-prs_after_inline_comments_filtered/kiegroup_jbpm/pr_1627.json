{"pr_number": 1627, "pr_title": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support", "pr_createdAt": "2020-04-03T13:58:23Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1627", "timeline": [{"oid": "6ae534db434aafc223479463ba6e1304a08e8964", "url": "https://github.com/kiegroup/jbpm/commit/6ae534db434aafc223479463ba6e1304a08e8964", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-04-03T16:38:44Z", "type": "forcePushed"}, {"oid": "74115b6eb0e830d9e97bd883c7f726525136c79c", "url": "https://github.com/kiegroup/jbpm/commit/74115b6eb0e830d9e97bd883c7f726525136c79c", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-04-06T07:06:35Z", "type": "forcePushed"}, {"oid": "3b2ad9f6944fcd92c5b67e2ff216d5f4b74b0188", "url": "https://github.com/kiegroup/jbpm/commit/3b2ad9f6944fcd92c5b67e2ff216d5f4b74b0188", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-04-06T10:19:16Z", "type": "forcePushed"}, {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "url": "https://github.com/kiegroup/jbpm/commit/1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-04-06T13:16:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405457001", "bodyText": "remove line instead of commenting", "author": "gmunozfe", "createdAt": "2020-04-08T11:35:57Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -16,136 +16,34 @@\n \n package org.jbpm.test.functional.timer;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.sql.Connection;\n-import java.sql.Statement;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Properties;\n-import java.util.Scanner;\n-import java.util.Set;\n \n-import javax.naming.InitialContext;\n-import javax.sql.DataSource;\n-\n-import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.jbpm.runtime.manager.impl.DefaultRegisterableItemsFactory;\n import org.jbpm.test.AbstractBaseTest;\n-import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.kie.api.event.process.ProcessEventListener;\n import org.kie.api.event.rule.AgendaEventListener;\n import org.kie.api.runtime.manager.RuntimeEngine;\n import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public abstract class TimerBaseTest extends AbstractBaseTest {\n     private static final Logger logger = LoggerFactory.getLogger(TimerBaseTest.class);\n \t\n \tprivate static PoolingDataSourceWrapper pds;\n-    \n-    protected static final String DATASOURCE_PROPERTIES = \"/datasource.properties\";\n-    \n-    protected static final String MAX_POOL_SIZE = \"maxPoolSize\";\n-    protected static final String ALLOW_LOCAL_TXS = \"allowLocalTransactions\";\n-    \n-    protected static final String DATASOURCE_CLASS_NAME = \"className\";\n-    protected static final String DRIVER_CLASS_NAME = \"driverClassName\";\n-    protected static final String USER = \"user\";\n-    protected static final String PASSWORD = \"password\";\n-    protected static final String JDBC_URL = \"url\";\n-    \n-    public static PoolingDataSourceWrapper setupPoolingDataSource() {\n-        Properties dsProps = getDatasourceProperties();\n-        PoolingDataSourceWrapper pds = null;\n-        try {\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        } catch (Exception e) {\n-        \tlogger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of \" + e.getMessage() + \" cleaning up...\");\n-        \tlogger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-\n-        \tlogger.info(\"DBPOOL_MGR:Pool created after cleanup of leftover resources\");\n-        }\n-        \n-        return pds;\n-    }\n-    \n-    \n-    /**\n-     * This reads in the (maven filtered) datasource properties from the test\n-     * resource directory.\n-     * \n-     * @return Properties containing the datasource properties.\n-     */\n-    private static Properties getDatasourceProperties() { \n-        boolean propertiesNotFound = false;\n-        \n-        // Central place to set additional H2 properties\n-        System.setProperty(\"h2.lobInDatabase\", \"true\");\n-        \n-        InputStream propsInputStream = TimerBaseTest.class.getResourceAsStream(DATASOURCE_PROPERTIES);\n-        Properties props = new Properties();\n-        if (propsInputStream != null) {\n-            try {\n-                props.load(propsInputStream);\n-            } catch (IOException ioe) {\n-                propertiesNotFound = true;\n-                logger.warn(\"Unable to find properties, using default H2 properties: \" + ioe.getMessage());\n-                ioe.printStackTrace();\n-            }\n-        } else {\n-            propertiesNotFound = true;\n-        }\n-\n-        String password = props.getProperty(\"password\");\n-        if (\"${maven.jdbc.password}\".equals(password) || propertiesNotFound) {\n-           logger.warn( \"Unable to load datasource properties [\" + DATASOURCE_PROPERTIES + \"]\" );\n-        }\n-        \n-        // If maven filtering somehow doesn't work the way it should.. \n-        setDefaultProperties(props);\n \n-        return props;\n-    }\n+    protected static final String DB_DDL_SCRIPTS_RESOURCE_PATH = \"/db/ddl-scripts\";\n \n-    /**\n-     * Return the default database/datasource properties - These properties use\n-     * an in-memory H2 database\n-     * \n-     * This is used when the developer is somehow running the tests but\n-     * bypassing the maven filtering that's been turned on in the pom.\n-     * \n-     * @return Properties containing the default properties\n-     */\n-    private static void setDefaultProperties(Properties props) {\n-        String[] keyArr = { \n-                \"serverName\", \"portNumber\", \"databaseName\", JDBC_URL,\n-                USER, PASSWORD,\n-                DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n-                MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n-        String[] defaultPropArr = { \n-                \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n-                \"sa\", \"\", \n-                \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\", \n-                \"5\", \"true\" };\n-        Assert.assertTrue(\"Unequal number of keys for default properties\", keyArr.length == defaultPropArr.length);\n-        for (int i = 0; i < keyArr.length; ++i) {\n-            if( ! props.containsKey(keyArr[i]) ) {\n-                props.put(keyArr[i], defaultPropArr[i]);\n-            }\n-        }\n-    }   \n-    \n     @BeforeClass\n     public static void setUpOnce() {\n         if (pds == null) {\n-            pds = setupPoolingDataSource();\n+            pds = setupPoolingDataSource(datasourceName);\n         }\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, true);", "originalCommit": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNDg3OA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405624878", "bodyText": "Done", "author": "afalhambra", "createdAt": "2020-04-08T15:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTc3NA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408101774", "bodyText": "Still can see this commented line :)", "author": "MarianMacik", "createdAt": "2020-04-14T12:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4NzMzMg==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411987332", "bodyText": "now it's done :)", "author": "afalhambra", "createdAt": "2020-04-21T08:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405457193", "bodyText": "Same here", "author": "gmunozfe", "createdAt": "2020-04-08T11:36:24Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -154,23 +52,8 @@ public static void tearDownOnce() {\n             pds.close();\n             pds = null;\n         }\n-    }\n-\n-\n-    protected void testCreateQuartzSchema() {\n-        Scanner scanner = new Scanner(this.getClass().getResourceAsStream(\"/quartz_tables_h2.sql\")).useDelimiter(\";\");\n-        try {\n-            Connection connection = ((DataSource)InitialContext.doLookup(\"jdbc/jbpm-ds\")).getConnection();\n-            Statement stmt = connection.createStatement();\n-            while (scanner.hasNext()) {\n-                String sql = scanner.next();\n-                stmt.executeUpdate(sql);\n-            }\n-            stmt.close();\n-            connection.close();\n-        } catch (Exception e) {\n-\n-        }\n+        //TestsUtil.clearSchema();\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, false);", "originalCommit": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNDk1NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405624955", "bodyText": "Done", "author": "afalhambra", "createdAt": "2020-04-08T15:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTg4Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408101883", "bodyText": "Still can see it here as well.", "author": "MarianMacik", "createdAt": "2020-04-14T12:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4NzUwOA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411987508", "bodyText": "finally done :)", "author": "afalhambra", "createdAt": "2020-04-21T08:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405458686", "bodyText": "why setting \"h2:mem\" as default instead of \"h2:tcp\"?\nIn the method comment, it also states \"in-memory H2 database\"", "author": "gmunozfe", "createdAt": "2020-04-08T11:39:14Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",", "originalCommit": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwODg3Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405608876", "bodyText": "\"h2:mem\" is used for \"in-memory H2 database\" which means no data will be stored in the database once the connection is closed whereas \"h2:tcp\" it does store data but requires a server to be startup - see \n  \n    \n      jbpm/jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java\n    \n    \n         Line 127\n      in\n      1d6e7c2\n    \n    \n    \n    \n\n        \n          \n           public static void startH2TcpServer(Properties datasourceProperties) {", "author": "afalhambra", "createdAt": "2020-04-08T15:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1NTk0Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408155942", "bodyText": "Yes, but is that an issue? We can leave h2:tcp as a default as well. This is anyway used just for scenarios where datasource.properties is missing. Moreover, PersistenceUtil is clever and will start the server for tcp-prefixd connections URLs if you use this method:\n\n  \n    \n      jbpm/jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java\n    \n    \n        Lines 116 to 121\n      in\n      3ce2c81\n    \n    \n    \n    \n\n        \n          \n           public static void startH2TcpServer(Properties datasourceProperties) { \n        \n\n        \n          \n               String jdbcUrl = datasourceProperties.getProperty(\"url\"); \n        \n\n        \n          \n               if (jdbcUrl != null && jdbcUrl.matches(\"jdbc:h2:tcp:.*\")) { \n        \n\n        \n          \n                   h2Server.start(); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nBut probably even better - we should unify this to always use in-memory one as it is more convenient. Moreover, some modules like jbpm-human-task-core override this to in-memory, so they override what is defined in the root pom.xml", "author": "MarianMacik", "createdAt": "2020-04-14T13:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYzOTEwMA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r409639100", "bodyText": "Currently, there is a mix of use in all tests. Some are using h2:mem and some h2:tcp.\nFor instance, HumanTaskServicesBaseTest class in jbpm-human-task-core uses h2:tcp connection by calling to PersistenceUtil.getDefaultProperties():\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/HumanTaskServicesBaseTest.java#L189\nWhereas JbpmJUnitBaseTestCase class, is using h2:mem:\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-test/src/main/java/org/jbpm/test/JbpmJUnitBaseTestCase.java#L845\nBut most of the tests I've gone through are using h2:mem, like:\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-test/src/main/java/org/jbpm/test/services/AbstractServicesTest.java#L187\nSo what I've done is to unify this and use \"h2:mem\" as the default one. However, you can always override these properties and use the ones you define either in your pom or in your own test cases.\nBut looking at the parent pom.xml in jbpm module level, default value is \"h2:tcp\"...\nWhat do you guys @gmunozfe and @MarianMacik think? is there any real reason why some are hardcoding this value to h2:mem and others to h2:tcp? shouldn't we unify all and make them homogeneous?", "author": "afalhambra", "createdAt": "2020-04-16T15:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4NjE4Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411986186", "bodyText": "Set h2:mem up as default for all tests. However it supports h2:tcp as well, and the H2 server is automatically started up by PersistenceUtil class and stop on finalize call method.", "author": "afalhambra", "createdAt": "2020-04-21T08:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405459424", "bodyText": "Max_pool_size was previously 16, is there any reason to lower it to 5?", "author": "gmunozfe", "createdAt": "2020-04-08T11:40:39Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n+                    \"sa\", \"\",\n+                    \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\",\n+                    \"5\", \"true\" };", "originalCommit": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMTEzMw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405611133", "bodyText": "Some tests had this property harcoded to 16 and some to 5. But yes, makes more sense to keep a higher number of connections in the pool.", "author": "afalhambra", "createdAt": "2020-04-08T15:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1NjUyNw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408156527", "bodyText": "+1", "author": "MarianMacik", "createdAt": "2020-04-14T13:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4Nzc5MA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411987790", "bodyText": "Done", "author": "afalhambra", "createdAt": "2020-04-21T08:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTIzOA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405549238", "bodyText": "I know this is following the same approach as before (moved from other class), but it's just a single reattempt after catching the exception, no?", "author": "gmunozfe", "createdAt": "2020-04-08T14:02:25Z", "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {\n+        Properties dsProps = (properties != null) ? properties : PersistenceUtil.getDatasourceProperties();\n+        PoolingDataSourceWrapper pds;\n+        try {\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);\n+        } catch (Exception e) {\n+            logger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of {} cleaning up...\", e.getMessage());\n+            logger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);", "originalCommit": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMjM3Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405622372", "bodyText": "Yes, one single attempt.\nHaving a deeper look at what the PersistenceUtil.setupPoolingDataSource does I haven't been able to see whether there is some kind of cleaning up mechanism as per what above logs are suggesting...\n\n  \n    \n      jbpm/jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java\n    \n    \n        Lines 63 to 67\n      in\n      1d6e7c2\n    \n    \n    \n    \n\n        \n          \n           logger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of {} cleaning up...\", e.getMessage()); \n        \n\n        \n          \n           logger.info(\"DBPOOL_MGR: attempting to create db pool again...\"); \n        \n\n        \n          \n           pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName); \n        \n\n        \n          \n            \n        \n\n        \n          \n           logger.info(\"DBPOOL_MGR:Pool created after cleanup of leftover resources\"); \n        \n    \n  \n\n\nTo me this is a workaround in case of any with the database arises. If there is any issues, it should be fixed properly. So I would remove this \"attempt\". What do you think?", "author": "afalhambra", "createdAt": "2020-04-08T15:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0MDI3MA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r409640270", "bodyText": "@gmunozfe - what do you think? Should I keep it?", "author": "afalhambra", "createdAt": "2020-04-16T15:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5ODgxNw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411998817", "bodyText": "leaving it as is", "author": "afalhambra", "createdAt": "2020-04-21T08:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NjQyNw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405556427", "bodyText": "This seems more like a constant (default datasourceName): if it's, there should be besides of static, final and uppercase.\nIf not, it can be confused in the scope of the methods that uses a param with the same name.", "author": "gmunozfe", "createdAt": "2020-04-08T14:12:38Z", "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";", "originalCommit": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNzk2Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405627963", "bodyText": "I mean this\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static String datasourceName = \"jdbc/jbpm-ds\";\n          \n          \n            \n                protected static final String DATASOURCE_NAME = \"jdbc/jbpm-ds\";", "author": "gmunozfe", "createdAt": "2020-04-08T15:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4ODYxNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411988615", "bodyText": "Done", "author": "afalhambra", "createdAt": "2020-04-21T08:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NjQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTA0Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408095043", "bodyText": "This is left here just because of that POOL_CONNECTIONS custom property for a subset of tests?", "author": "MarianMacik", "createdAt": "2020-04-14T12:27:00Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/JbpmTestCase.java", "diffHunk": "@@ -80,12 +80,10 @@ protected void finished(Description description) {\n     );\n \n     @Override\n-    protected PoolingDataSourceWrapper setupPoolingDataSource() {\n+    protected Properties getDataSourceProperties(){\n         Properties dsProps = PersistenceUtil.getDatasourceProperties();\n         dsProps.setProperty(\"POOL_CONNECTIONS\", \"false\");\n-        // Setup the datasource\n-        PoolingDataSourceWrapper ds1 = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        return ds1;\n+        return dsProps;", "originalCommit": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NjcyMg==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r410056722", "bodyText": "Yes, correct. Not really sure where exactly this property is used internally so I just left it there. There is a couple of tests setting up that property. Do you know why by any chance?", "author": "afalhambra", "createdAt": "2020-04-17T07:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NTE0NA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r435975144", "bodyText": "By looking at the Git history it seems that this is needed because of Narayana.", "author": "MarianMacik", "createdAt": "2020-06-05T14:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTg1NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408095855", "bodyText": "Was the validation failing or why was this changed?", "author": "MarianMacik", "createdAt": "2020-04-14T12:28:17Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/quartzmockentities/QrtzJobDetails.java", "diffHunk": "@@ -57,6 +57,6 @@\n     private Boolean requestsRecovery;\n \n     @Lob\n-    @Column(name = \"JOB_DATA\")\n+    @Column(name = \"JOB_DATA\", length = 5000)", "originalCommit": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1MjQ0OA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r409652448", "bodyText": "As per this PR's note:\nNote: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.\nProblem with this is when database creation is through sql scripts. If you remember, we had to remove the blob size out of the scripts, cause it failed. I was thinking about setting SQL script to this size but at the same time these scripts are taken from Quartz repository.\nWhat do you think?", "author": "afalhambra", "createdAt": "2020-04-16T15:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3OTcwOA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r435979708", "bodyText": "Cannot remember now what failed when blob size was in the scripts. But these mock entities are used to validate the database scripts so I think the scripts and these entities should be 1:1?", "author": "MarianMacik", "createdAt": "2020-06-05T14:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNjgyMw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r442016823", "bodyText": "These Quartz scripts are taken from official Quart repo, so initially there was a problem with them when the size of the blob was set to 2000. So Maciej, removed the size in a PR, however afterwards when upgrading jbpm to use a newer version of Quartz (2.x), then these sql scripts overwrote these changes and put this size/limit back again.\nSo to avoid this, I raised a PR but on Quartz, so we make sure these size/limit is removed from the sql script in Quartz itself:\nquartz-scheduler/quartz#559\nProblem now... if we remove this size also from the entities to keep them in sync with the scripts, we have a different problem because by default, hibernates generates a 250 bytes length for a blob field which is not enough for us (it fails), so I had to manually set this limit to a higher value, after all these are just mock entities.\nQuestion is: should we really remove the size of the Quartz script or just increase to a certain valid size for us? Apparently in the original quartz script, it's kind of saying that you can increase these limit:\nhttps://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_db2.sql\nWhat do you think?", "author": "afalhambra", "createdAt": "2020-06-18T07:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NDEyMw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408164123", "bodyText": "Can't we directly use the PersistenceUtil class? We should always use the properties from datasource.properties file so I would delete the option of providing null properties completely.", "author": "MarianMacik", "createdAt": "2020-04-14T14:06:40Z", "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {", "originalCommit": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5MDE1NA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411990154", "bodyText": "Good point. Done.", "author": "afalhambra", "createdAt": "2020-04-21T08:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NDEyMw=="}], "type": "inlineReview"}, {"oid": "561e5ef29231f4fd9c452aacac45866ab73c15b4", "url": "https://github.com/kiegroup/jbpm/commit/561e5ef29231f4fd9c452aacac45866ab73c15b4", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-04-21T08:30:21Z", "type": "forcePushed"}, {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f", "url": "https://github.com/kiegroup/jbpm/commit/9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-04-21T11:50:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDAxOA==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r416544018", "bodyText": "Just checking, here without setting any port, default will be used (or a random, if it's already on use), no? Because previously it was started on 9123.", "author": "gmunozfe", "createdAt": "2020-04-28T11:39:43Z", "path": "jbpm-services/jbpm-executor/src/test/java/org/jbpm/executor/DBUnavilabilityExecutorTest.java", "diffHunk": "@@ -47,33 +46,29 @@\n \n public class DBUnavilabilityExecutorTest{\n \n-    public static final Map<String, Object> cachedEntities = new HashMap<String, Object>();\n+    public static final Map<String, Object> cachedEntities = new HashMap<>();\n     private ExecutorService executorService;\n \n+    private static Properties dsProps;\n \n     private EntityManagerFactory emf = null;\n \n \tprivate PoolingDataSourceWrapper pds;\n \n-\tprivate static Server h2Server;\n-\n \t@BeforeClass\n-    public static void createDBServer() throws Exception {\n-\t    h2Server = Server.createTcpServer(new String[] { \"-tcpPort\", \"9123\" });\n-\t    h2Server.start();\n+    public static void createDBServer() {\n+        dsProps = ExecutorTestUtil.getDatasourceProperties();\n+        dsProps.setProperty(\"url\", \"jdbc:h2:tcp://localhost/target/jbpm-exec-test;MVCC=TRUE\");", "originalCommit": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwMDE2Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r436000167", "bodyText": "+1, I would leave the URL as it was before.", "author": "MarianMacik", "createdAt": "2020-06-05T15:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNjQzMg==", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r442016432", "bodyText": "done", "author": "afalhambra", "createdAt": "2020-06-18T07:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDAxOA=="}], "type": "inlineReview"}, {"oid": "797443b57bb108938d0c0afebf3b4d87ff0fcb22", "url": "https://github.com/kiegroup/jbpm/commit/797443b57bb108938d0c0afebf3b4d87ff0fcb22", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-06-09T10:27:31Z", "type": "forcePushed"}, {"oid": "d2042a0a31d93f04651cd8ec3a56a6a8987ce0e2", "url": "https://github.com/kiegroup/jbpm/commit/d2042a0a31d93f04651cd8ec3a56a6a8987ce0e2", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-06-10T12:22:50Z", "type": "forcePushed"}, {"oid": "a213a4498b1fb09c61361547a8f6cef9d93ba2c2", "url": "https://github.com/kiegroup/jbpm/commit/a213a4498b1fb09c61361547a8f6cef9d93ba2c2", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-06-10T17:52:37Z", "type": "forcePushed"}, {"oid": "db0bed5934dc16d21e2a06cdfc876ee7a3f6543b", "url": "https://github.com/kiegroup/jbpm/commit/db0bed5934dc16d21e2a06cdfc876ee7a3f6543b", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-06-18T07:03:16Z", "type": "commit"}, {"oid": "db0bed5934dc16d21e2a06cdfc876ee7a3f6543b", "url": "https://github.com/kiegroup/jbpm/commit/db0bed5934dc16d21e2a06cdfc876ee7a3f6543b", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "committedDate": "2020-06-18T07:03:16Z", "type": "forcePushed"}]}