{"pr_number": 1724, "pr_title": "[JBPM-9278] Tests for Email deadline notifications with DBUserInfoImpl", "pr_createdAt": "2020-08-07T10:36:39Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1724", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwOTMyOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1724#discussion_r484809329", "bodyText": "I would leave pds to be closed outside this method since it's being already closed at clean method.\n\n  \n    \n      jbpm/jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/EmailDeadlinesDBTest.java\n    \n    \n         Line 106\n      in\n      26921f4\n    \n    \n    \n    \n\n        \n          \n           pds.close(); \n        \n    \n  \n\n\nI would though move both st and conn variables closure to this finally block cause at the moment in case of any exception these won't be closed.", "author": "afalhambra", "createdAt": "2020-09-08T10:17:50Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/EmailDeadlinesDBTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.services.task;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import org.jbpm.services.task.identity.DBUserInfoImpl;\n+import org.jbpm.services.task.impl.TaskDeadlinesServiceImpl;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.kie.internal.task.api.InternalTaskService;\n+\n+\n+public class EmailDeadlinesDBTest extends EmailDeadlinesBaseTest {\n+\n+    private PoolingDataSourceWrapper pds;\n+    private EntityManagerFactory emf;\n+    \n+    @Before\n+    public void setup() {\n+        pds = setupPoolingDataSource();\n+        emf = Persistence.createEntityManagerFactory( \"org.jbpm.services.task\" );\n+        super.setup();\n+        \n+        prepareDb();\n+                 \n+        Properties props = new Properties();\n+        props.setProperty(DBUserInfoImpl.DS_JNDI_NAME, \"jdbc/jbpm-ds\");\n+        props.setProperty(DBUserInfoImpl.NAME_QUERY, \"select name from Users where entityId = ?\");\n+        props.setProperty(DBUserInfoImpl.EMAIL_QUERY, \"select email from Users where entityId = ?\");\n+        props.setProperty(DBUserInfoImpl.LANG_QUERY, \"select lang from Users where entityId = ?\");\n+        props.setProperty(DBUserInfoImpl.MEMBERS_QUERY, \"select entityId from UserGroups where groupId = ?\");\n+\n+        DBUserInfoImpl userInfo = new DBUserInfoImpl(props);\n+                \n+        this.taskService = (InternalTaskService) HumanTaskServiceFactory.newTaskServiceConfigurator()\n+                                                .entityManagerFactory(emf)\n+                                                .userInfo(userInfo)\n+                                                .getTaskService();\n+\n+    }\n+    \n+    protected void prepareDb() {\n+        try {\n+            Connection conn = pds.getConnection();\n+            String createUserTableSql = \"create table Users (entityId varchar(255), email varchar(255), lang varchar(255), name varchar(255))\";\n+            PreparedStatement st = conn.prepareStatement(createUserTableSql);\n+            st.execute();\n+\n+            String createGroupTableSql = \"create table UserGroups (groupId varchar(255), entityId varchar(255), email varchar(255))\";\n+            st = conn.prepareStatement(createGroupTableSql);\n+            st.execute();\n+\n+            // insert user rows\n+            String insertUser = \"insert into Users (entityId, email, lang, name) values (?, ?, ?, ?)\";\n+            st = conn.prepareStatement(insertUser);\n+            \n+            st.setString(1, \"Darth Vader\");\n+            st.setString(2, \"darth@domain.com\");\n+            st.setString(3, \"en-UK\");\n+            st.setString(4, \"Darth Vader\");\n+            st.execute();\n+            \n+            st = conn.prepareStatement(insertUser);\n+            st.setString(1, \"Tony Stark\");\n+            st.setString(2, \"tony@domain.com\");\n+            st.setString(3, \"en-UK\");\n+            st.setString(4, \"Tony Stark\");\n+            st.execute();\n+\n+            st.close();\n+            conn.close();\n+\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+\n+        }\n+    }\n+\n+    @After\n+    public void clean() {\n+        TaskDeadlinesServiceImpl.reset();\n+        super.tearDown();\n+        cleanDb();\n+        if (pds != null) {\n+            pds.close();\n+        }\n+    }\n+    \n+    public void cleanDb() {\n+        try {\n+            Connection conn = pds.getConnection();\n+            String dropUserTableSql = \"drop table Users\";\n+            PreparedStatement st = conn.prepareStatement(dropUserTableSql);\n+            st.execute();\n+\n+            String dropGroupTableSql = \"drop table UserGroups\";\n+            st = conn.prepareStatement(dropGroupTableSql);\n+\n+            st.execute();\n+\n+            st.close();\n+            conn.close();\n+\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+\n+        } finally {\n+            pds.close();", "originalCommit": "26921f4d212e561453888444861987322e453264", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMDIzNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1724#discussion_r486510235", "bodyText": "I've refactored to use try-with-resources for taking advantage of autocloseable and creating auxiliary methods for enhancing readability. Thanks for your review @afalhambra !", "author": "gmunozfe", "createdAt": "2020-09-10T17:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwOTMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxMzMxMA==", "url": "https://github.com/kiegroup/jbpm/pull/1724#discussion_r484813310", "bodyText": "emf should also be closed", "author": "afalhambra", "createdAt": "2020-09-08T10:25:23Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/EmailDeadlinesDBTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.services.task;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import org.jbpm.services.task.identity.DBUserInfoImpl;\n+import org.jbpm.services.task.impl.TaskDeadlinesServiceImpl;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.kie.internal.task.api.InternalTaskService;\n+\n+\n+public class EmailDeadlinesDBTest extends EmailDeadlinesBaseTest {\n+\n+    private PoolingDataSourceWrapper pds;\n+    private EntityManagerFactory emf;\n+    \n+    @Before\n+    public void setup() {\n+        pds = setupPoolingDataSource();\n+        emf = Persistence.createEntityManagerFactory( \"org.jbpm.services.task\" );\n+        super.setup();\n+        \n+        prepareDb();\n+                 \n+        Properties props = new Properties();\n+        props.setProperty(DBUserInfoImpl.DS_JNDI_NAME, \"jdbc/jbpm-ds\");\n+        props.setProperty(DBUserInfoImpl.NAME_QUERY, \"select name from Users where entityId = ?\");\n+        props.setProperty(DBUserInfoImpl.EMAIL_QUERY, \"select email from Users where entityId = ?\");\n+        props.setProperty(DBUserInfoImpl.LANG_QUERY, \"select lang from Users where entityId = ?\");\n+        props.setProperty(DBUserInfoImpl.MEMBERS_QUERY, \"select entityId from UserGroups where groupId = ?\");\n+\n+        DBUserInfoImpl userInfo = new DBUserInfoImpl(props);\n+                \n+        this.taskService = (InternalTaskService) HumanTaskServiceFactory.newTaskServiceConfigurator()\n+                                                .entityManagerFactory(emf)\n+                                                .userInfo(userInfo)\n+                                                .getTaskService();\n+\n+    }\n+    \n+    protected void prepareDb() {\n+        try {\n+            Connection conn = pds.getConnection();\n+            String createUserTableSql = \"create table Users (entityId varchar(255), email varchar(255), lang varchar(255), name varchar(255))\";\n+            PreparedStatement st = conn.prepareStatement(createUserTableSql);\n+            st.execute();\n+\n+            String createGroupTableSql = \"create table UserGroups (groupId varchar(255), entityId varchar(255), email varchar(255))\";\n+            st = conn.prepareStatement(createGroupTableSql);\n+            st.execute();\n+\n+            // insert user rows\n+            String insertUser = \"insert into Users (entityId, email, lang, name) values (?, ?, ?, ?)\";\n+            st = conn.prepareStatement(insertUser);\n+            \n+            st.setString(1, \"Darth Vader\");\n+            st.setString(2, \"darth@domain.com\");\n+            st.setString(3, \"en-UK\");\n+            st.setString(4, \"Darth Vader\");\n+            st.execute();\n+            \n+            st = conn.prepareStatement(insertUser);\n+            st.setString(1, \"Tony Stark\");\n+            st.setString(2, \"tony@domain.com\");\n+            st.setString(3, \"en-UK\");\n+            st.setString(4, \"Tony Stark\");\n+            st.execute();\n+\n+            st.close();\n+            conn.close();\n+\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+\n+        }\n+    }\n+\n+    @After\n+    public void clean() {\n+        TaskDeadlinesServiceImpl.reset();\n+        super.tearDown();\n+        cleanDb();\n+        if (pds != null) {", "originalCommit": "26921f4d212e561453888444861987322e453264", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af5a4addc4638db8159ac21ec543bbdafe79f45a", "url": "https://github.com/kiegroup/jbpm/commit/af5a4addc4638db8159ac21ec543bbdafe79f45a", "message": "[JBPM-9278] Tests for Email deadline notifications with DBUserInfoImpl", "committedDate": "2020-09-10T17:19:19Z", "type": "forcePushed"}, {"oid": "e22d0e100734964a8c986700bbd9e75e097a3467", "url": "https://github.com/kiegroup/jbpm/commit/e22d0e100734964a8c986700bbd9e75e097a3467", "message": "[JBPM-9278] Tests for Email deadline notifications with DBUserInfoImpl", "committedDate": "2020-09-10T17:27:21Z", "type": "commit"}, {"oid": "e22d0e100734964a8c986700bbd9e75e097a3467", "url": "https://github.com/kiegroup/jbpm/commit/e22d0e100734964a8c986700bbd9e75e097a3467", "message": "[JBPM-9278] Tests for Email deadline notifications with DBUserInfoImpl", "committedDate": "2020-09-10T17:27:21Z", "type": "forcePushed"}]}