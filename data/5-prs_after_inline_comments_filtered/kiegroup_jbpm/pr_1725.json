{"pr_number": 1725, "pr_title": "[JBPM-9277]  JMS Audit Data Replication in spring boot", "pr_createdAt": "2020-08-11T09:44:55Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1725", "timeline": [{"oid": "52eb3513827c78db0dbb0d54f0dce1ea6e1eb087", "url": "https://github.com/kiegroup/jbpm/commit/52eb3513827c78db0dbb0d54f0dce1ea6e1eb087", "message": "[JBPM-9277]  JMS Audit Data Replication in spring boot\n\nrefactor task listeners and process listener to adapters\nfor data replication", "committedDate": "2020-08-11T13:30:54Z", "type": "forcePushed"}, {"oid": "7452ecd92a3e1698cb830a7bcc736749b7596d2b", "url": "https://github.com/kiegroup/jbpm/commit/7452ecd92a3e1698cb830a7bcc736749b7596d2b", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-12T10:31:59Z", "type": "forcePushed"}, {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "url": "https://github.com/kiegroup/jbpm/commit/623854f8d777fa6edbd54844d3a0ace8188f75cc", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-12T13:28:54Z", "type": "forcePushed"}, {"oid": "658d5d20529b18dbf18bf9703e9056506562fc71", "url": "https://github.com/kiegroup/jbpm/commit/658d5d20529b18dbf18bf9703e9056506562fc71", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-14T14:59:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzE1MA==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469787150", "bodyText": "All entities to be public access modifier for the IDs field, but does it make sense to have them so? I mean, this id is autogenerated by the JPA provider.", "author": "afalhambra", "createdAt": "2020-08-13T08:34:02Z", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/NodeInstanceLog.java", "diffHunk": "@@ -99,7 +99,7 @@ public long getId() {\n     \treturn id;\n     }\n     \n-    void setId(long id) {\n+    public void setId(long id) {", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5Mzk3Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r471493972", "bodyText": "validation fails in jms receiver if those aren't public. Anyways just for coherence. (I override the seq generator)", "author": "elguardian", "createdAt": "2020-08-17T13:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzkxNA==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469787914", "bodyText": "All entities to be public access modifier for the IDs field, but does it make sense to have them so? I mean, this id is autogenerated by the JPA provider.", "author": "afalhambra", "createdAt": "2020-08-13T08:35:20Z", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/ProcessInstanceLog.java", "diffHunk": "@@ -132,7 +132,7 @@ public long getId() {\n     \treturn id;\n     }\n     \n-    void setId(long id) {\n+    public void setId(long id) {", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDEwMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r471494101", "bodyText": "validation fails in jms receiver if those aren't public. Anyways just for coherence. (I override the seq generator)", "author": "elguardian", "createdAt": "2020-08-17T13:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzI2OA==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803268", "bodyText": "full package name not needed.", "author": "afalhambra", "createdAt": "2020-08-13T08:59:16Z", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMzg5Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472933896", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-19T10:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzM3Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803377", "bodyText": "same here", "author": "afalhambra", "createdAt": "2020-08-13T08:59:26Z", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4NTE5Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472985192", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-19T12:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzQ5Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803496", "bodyText": "same here", "author": "afalhambra", "createdAt": "2020-08-13T08:59:35Z", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {\n+        return ((ProcessInstanceImpl) pi).getMetaData().get(key);\n+    }\n+\n+    public void setNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key, Object value) {", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMzk2MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472933961", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-19T10:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzU4Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803586", "bodyText": "same here", "author": "afalhambra", "createdAt": "2020-08-13T08:59:44Z", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {\n+        return ((ProcessInstanceImpl) pi).getMetaData().get(key);\n+    }\n+\n+    public void setNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key, Object value) {\n+        ((NodeInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key) {", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNDAzNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472934035", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-19T10:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwNzAyOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469807029", "bodyText": "This field is not used/referenced in any place of the code. Do we need it?", "author": "afalhambra", "createdAt": "2020-08-13T09:05:41Z", "path": "jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/JPATaskLifeCycleEventListener.java", "diffHunk": "@@ -48,7 +48,11 @@\n  *\n  */\n public class JPATaskLifeCycleEventListener extends PersistableEventListener implements TaskLifeCycleEventListener {\n-    \n+\n+    public static final String METADATA_TASK_EVENT = \"TASK_EVENT\";\n+    public static final String METADATA_AUDIT_TASK = \"TASK_AUDIT_EVENT\";\n+    public static final String METADATA_INPUT_VAR_EVENT = \"TASK_INPUT_VAR_EVENT\";", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNzQ4OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472937489", "bodyText": "it should be reference by indexAndPersistVariables method", "author": "elguardian", "createdAt": "2020-08-19T10:48:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwNzAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMTU1Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469811556", "bodyText": "Why changing access modifier to protected?", "author": "afalhambra", "createdAt": "2020-08-13T09:12:48Z", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -57,18 +56,19 @@\n  * Enables history log via JPA.\n  * \n  */\n-public class JPAWorkingMemoryDbLogger extends AbstractAuditLogger {\n+public class JPAWorkingMemoryDbLogger extends AbstractAuditLoggerAdapter {\n \n     private static final Logger logger = LoggerFactory.getLogger(JPAWorkingMemoryDbLogger.class);\n-    \n-    private static final String[] KNOWN_UT_JNDI_KEYS = new String[] {\"UserTransaction\", \"java:jboss/UserTransaction\", System.getProperty(\"jbpm.ut.jndi.lookup\")};\n-    \n+\n+    private static final String[] KNOWN_UT_JNDI_KEYS = new String[]{\"UserTransaction\", \"java:jboss/UserTransaction\", System.getProperty(\"jbpm.ut.jndi.lookup\")};\n+\n     private boolean isJTA = true;\n     private boolean sharedEM = false;\n-    \n+\n     private EntityManagerFactory emf;\n-    \n-    private ProcessIndexerManager indexManager = ProcessIndexerManager.get();\n+\n+    protected ProcessIndexerManager indexManager = ProcessIndexerManager.get();", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNTM4OA==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472935388", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-08-19T10:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMTU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMjUxNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469812515", "bodyText": "Same here, not sure why we need to change it to protected?", "author": "afalhambra", "createdAt": "2020-08-13T09:14:22Z", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -107,154 +107,124 @@ public JPAWorkingMemoryDbLogger(Environment env) {\n         internalSetIsJTA(env);\n     }\n \n-    private void internalSetIsJTA(Environment env) { \n+    protected void internalSetIsJTA(Environment env) {", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNzkwMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472937901", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-19T10:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMjUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMzA0OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469813049", "bodyText": "Unnecessary unboxing.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        isJTA = bool.booleanValue();\n          \n          \n            \n                        isJTA = bool;", "author": "afalhambra", "createdAt": "2020-08-13T09:15:08Z", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -107,154 +107,124 @@ public JPAWorkingMemoryDbLogger(Environment env) {\n         internalSetIsJTA(env);\n     }\n \n-    private void internalSetIsJTA(Environment env) { \n+    protected void internalSetIsJTA(Environment env) {\n         Boolean bool = (Boolean) env.get(\"IS_JTA_TRANSACTION\");\n         if (bool != null) {\n-        \tisJTA = bool.booleanValue();\n+            isJTA = bool.booleanValue();", "originalCommit": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzODA1NA==", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472938054", "bodyText": "removed the change.", "author": "elguardian", "createdAt": "2020-08-19T10:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMzA0OQ=="}], "type": "inlineReview"}, {"oid": "c0da60e79722573d38b3a3ed85b14a566a05a17f", "url": "https://github.com/kiegroup/jbpm/commit/c0da60e79722573d38b3a3ed85b14a566a05a17f", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-19T10:54:38Z", "type": "forcePushed"}, {"oid": "54cb29d27eb38d932eff223752df799b506e8e36", "url": "https://github.com/kiegroup/jbpm/commit/54cb29d27eb38d932eff223752df799b506e8e36", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-20T09:14:09Z", "type": "forcePushed"}, {"oid": "718673cd6ac518d13680976ca6b0d7f7285335fb", "url": "https://github.com/kiegroup/jbpm/commit/718673cd6ac518d13680976ca6b0d7f7285335fb", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-20T09:34:01Z", "type": "forcePushed"}, {"oid": "52877fb4a2a293e61eb9e11cf9b5783b00d4f8b0", "url": "https://github.com/kiegroup/jbpm/commit/52877fb4a2a293e61eb9e11cf9b5783b00d4f8b0", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-20T10:55:32Z", "type": "commit"}, {"oid": "52877fb4a2a293e61eb9e11cf9b5783b00d4f8b0", "url": "https://github.com/kiegroup/jbpm/commit/52877fb4a2a293e61eb9e11cf9b5783b00d4f8b0", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-20T10:55:32Z", "type": "forcePushed"}]}