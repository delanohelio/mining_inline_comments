{"pr_number": 1680, "pr_title": "[JBPM-9195] Case traceability from a Task Instance", "pr_createdAt": "2020-06-17T12:32:56Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1680", "timeline": [{"oid": "61270e932ce8737ed0b328972f39e9bbb9e85f0e", "url": "https://github.com/kiegroup/jbpm/commit/61270e932ce8737ed0b328972f39e9bbb9e85f0e", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-19T10:58:59Z", "type": "forcePushed"}, {"oid": "51a9e93af7c3527ca9ca8ae9e28d08adde141ce0", "url": "https://github.com/kiegroup/jbpm/commit/51a9e93af7c3527ca9ca8ae9e28d08adde141ce0", "message": "[BAPL-1623] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-19T11:42:22Z", "type": "forcePushed"}, {"oid": "175d975dc812753335a69392b4af94e091d7c1cd", "url": "https://github.com/kiegroup/jbpm/commit/175d975dc812753335a69392b4af94e091d7c1cd", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-19T11:44:13Z", "type": "forcePushed"}, {"oid": "ed969425b338582405c93abf4230aabd083a9767", "url": "https://github.com/kiegroup/jbpm/commit/ed969425b338582405c93abf4230aabd083a9767", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-19T14:44:16Z", "type": "forcePushed"}, {"oid": "bc6af915170ddc4a6e023d4deb1d4757d9b41abf", "url": "https://github.com/kiegroup/jbpm/commit/bc6af915170ddc4a6e023d4deb1d4757d9b41abf", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-19T14:53:12Z", "type": "forcePushed"}, {"oid": "780c6a50d34c3f095a56a9936cc92d47791c4e85", "url": "https://github.com/kiegroup/jbpm/commit/780c6a50d34c3f095a56a9936cc92d47791c4e85", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-19T15:01:41Z", "type": "forcePushed"}, {"oid": "c45f901acef5d0646d9ccaf5a527ff342f544297", "url": "https://github.com/kiegroup/jbpm/commit/c45f901acef5d0646d9ccaf5a527ff342f544297", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-19T15:05:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4OTkwNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r444089905", "bodyText": "Not enought check also the value of correlation key. as a rule of thumb the correlation key by default is the process instance id to string but you can start a process with a custom correlation key. (do that)", "author": "elguardian", "createdAt": "2020-06-23T09:29:31Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/RuntimeDataServiceImplTest.java", "diffHunk": "@@ -1039,19 +1040,23 @@ public void testGetTaskById() {\n     \tassertEquals(\"Write a Document\", userTask.getName());\n \n     \tNodeInstanceDesc nodeInstanceDesc = runtimeDataService.getNodeInstanceForWorkItem(userTask.getWorkItemId());\n-\t\tassertNull(userTask.getSlaCompliance());\n-\t\tassertNull(userTask.getSlaDueDate());\n+    \tassertNull(userTask.getSlaCompliance());\n+    \tassertNull(userTask.getSlaDueDate());\n \n-\t\tuserTask = runtimeDataService.getTaskById(taskId,true);\n-\t\tassertNotNull(userTask);\n-\n-\t\tassertEquals(nodeInstanceDesc.getSlaCompliance(), userTask.getSlaCompliance());\n-\t\tassertEquals(nodeInstanceDesc.getSlaDueDate(), userTask.getSlaDueDate());\n+    \tuserTask = runtimeDataService.getTaskById(taskId, true);\n+    \tassertNotNull(userTask);\n+    \tassertEquals(nodeInstanceDesc.getSlaCompliance(), userTask.getSlaCompliance());\n+    \tassertEquals(nodeInstanceDesc.getSlaDueDate(), userTask.getSlaDueDate());\n+    \t\n+    \tassertNotNull(userTask.getCorrelationKey());", "originalCommit": "c45f901acef5d0646d9ccaf5a527ff342f544297", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NjYwMA==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r444096600", "bodyText": "what about the correlation key ?", "author": "elguardian", "createdAt": "2020-06-23T09:40:58Z", "path": "jbpm-services/jbpm-services-cdi/src/test/java/org/jbpm/services/cdi/test/RuntimeDataServiceTest.java", "diffHunk": "@@ -266,7 +267,7 @@ public void testGetTasksAssignedAsPotentialOwnerGroupFromCallback() {\n         List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwnerByStatus(\"katy\", statuses, new QueryFilter());\n         assertNotNull(tasks);\n         assertEquals(1, tasks.size());\n-        \n+        assertEquals(WorkflowProcess.PROCESS_TYPE, tasks.get(0).getProcessType().intValue());", "originalCommit": "c45f901acef5d0646d9ccaf5a527ff342f544297", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c37cfb3f1a3804768e96ffa170441ae47a08fb74", "url": "https://github.com/kiegroup/jbpm/commit/c37cfb3f1a3804768e96ffa170441ae47a08fb74", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-23T18:41:52Z", "type": "forcePushed"}, {"oid": "44f2ecf59c1c194ab664f27d5f23dd82526b8e78", "url": "https://github.com/kiegroup/jbpm/commit/44f2ecf59c1c194ab664f27d5f23dd82526b8e78", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-24T10:11:54Z", "type": "forcePushed"}, {"oid": "4cbad8b037d9dd1afb97c97f42ddb5c4d2e95c31", "url": "https://github.com/kiegroup/jbpm/commit/4cbad8b037d9dd1afb97c97f42ddb5c4d2e95c31", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-24T14:16:21Z", "type": "forcePushed"}, {"oid": "fbb756613756f84254bfdcf50cc72c451a9ba3fc", "url": "https://github.com/kiegroup/jbpm/commit/fbb756613756f84254bfdcf50cc72c451a9ba3fc", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-24T19:08:26Z", "type": "forcePushed"}, {"oid": "3a8c52442ca2306e9135526ac311cc399c176034", "url": "https://github.com/kiegroup/jbpm/commit/3a8c52442ca2306e9135526ac311cc399c176034", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-26T07:57:42Z", "type": "forcePushed"}, {"oid": "54f2b17a613b2f2724f71cd4a28380ba3cd85d62", "url": "https://github.com/kiegroup/jbpm/commit/54f2b17a613b2f2724f71cd4a28380ba3cd85d62", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-26T10:24:22Z", "type": "forcePushed"}, {"oid": "06d4712c515e31fd843ba9ea346b5ad0ca1d539e", "url": "https://github.com/kiegroup/jbpm/commit/06d4712c515e31fd843ba9ea346b5ad0ca1d539e", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-26T10:30:59Z", "type": "forcePushed"}, {"oid": "8a8bfa82d340e7f04431625a3201ec09f319dc45", "url": "https://github.com/kiegroup/jbpm/commit/8a8bfa82d340e7f04431625a3201ec09f319dc45", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-26T13:45:30Z", "type": "forcePushed"}, {"oid": "3e0ff5162b6fffbecd7b46879d7bda6a15018a0a", "url": "https://github.com/kiegroup/jbpm/commit/3e0ff5162b6fffbecd7b46879d7bda6a15018a0a", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-26T16:15:43Z", "type": "forcePushed"}, {"oid": "e37f87e7d12f508f5b74feea8c10c8336397e8ce", "url": "https://github.com/kiegroup/jbpm/commit/e37f87e7d12f508f5b74feea8c10c8336397e8ce", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-29T09:05:52Z", "type": "forcePushed"}, {"oid": "3c81f60003d534ac954f4d9f72913e30d4b6444e", "url": "https://github.com/kiegroup/jbpm/commit/3c81f60003d534ac954f4d9f72913e30d4b6444e", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-29T12:36:12Z", "type": "forcePushed"}, {"oid": "ddd49135b598f4af93205fdbfe75e5b50d06626e", "url": "https://github.com/kiegroup/jbpm/commit/ddd49135b598f4af93205fdbfe75e5b50d06626e", "message": "JBPM-9195 Adding traces for test debugging\n\nThis will be removed once all test are passed", "committedDate": "2020-07-02T08:20:10Z", "type": "forcePushed"}, {"oid": "3c81f60003d534ac954f4d9f72913e30d4b6444e", "url": "https://github.com/kiegroup/jbpm/commit/3c81f60003d534ac954f4d9f72913e30d4b6444e", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-06-29T12:36:12Z", "type": "forcePushed"}, {"oid": "ce1479c00457998ae3e99f5881f49e48e5e7a7e6", "url": "https://github.com/kiegroup/jbpm/commit/ce1479c00457998ae3e99f5881f49e48e5e7a7e6", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-07T11:46:36Z", "type": "forcePushed"}, {"oid": "8a391e8e95985e938558e07048336b838b3bcc31", "url": "https://github.com/kiegroup/jbpm/commit/8a391e8e95985e938558e07048336b838b3bcc31", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-08T11:47:19Z", "type": "forcePushed"}, {"oid": "63e0752778e9009e553071527bbbd459866e068b", "url": "https://github.com/kiegroup/jbpm/commit/63e0752778e9009e553071527bbbd459866e068b", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-08T12:16:33Z", "type": "forcePushed"}, {"oid": "e0842954dd1799d6299542f68783f32a7c766ab2", "url": "https://github.com/kiegroup/jbpm/commit/e0842954dd1799d6299542f68783f32a7c766ab2", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-08T12:19:24Z", "type": "forcePushed"}, {"oid": "9a3f89bb872fda12f0c7db2aae8a32345231dc66", "url": "https://github.com/kiegroup/jbpm/commit/9a3f89bb872fda12f0c7db2aae8a32345231dc66", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-08T15:47:08Z", "type": "forcePushed"}, {"oid": "c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "url": "https://github.com/kiegroup/jbpm/commit/c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-09T14:25:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NDEyNw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453574127", "bodyText": "This check can now be made in the beginning of the method as it would eliminate possibly unnecessary querying of all task events in case the task doesn't even exist.", "author": "MarianMacik", "createdAt": "2020-07-13T11:10:23Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/RuntimeDataServiceImpl.java", "diffHunk": "@@ -1131,11 +1131,15 @@ private void addVariableNameAndVariableValueParameters(TaskSummaryQueryBuilder q\n         List<TaskEvent> taskEvents = commandService.execute(\n     \t\t\t\tnew QueryNameCommand<List<TaskEvent>>(\"getAllTasksEvents\", params));\n \n-        if(taskEvents == null || taskEvents.isEmpty()) {\n-            \n-            UserTaskInstanceDesc task = getTaskById(taskId);\n-            if (task == null) {\n-                throw new TaskNotFoundException( MessageFormat.format(TASK_NOT_FOUND, taskId) );\n+        \n+        UserTaskInstanceDesc task = getTaskById(taskId);\n+        if (task == null) {\n+            throw new TaskNotFoundException( MessageFormat.format(TASK_NOT_FOUND, taskId) );\n+        }", "originalCommit": "c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY4NTQ4Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453685483", "bodyText": "yes, good point", "author": "fjtirado", "createdAt": "2020-07-13T14:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NDEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NTQ5Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453575497", "bodyText": "Can you create a new test for this as this is modifying the old one? It uses a different startProcess method.", "author": "MarianMacik", "createdAt": "2020-07-13T11:13:08Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/RuntimeDataServiceImplTest.java", "diffHunk": "@@ -1016,12 +1017,15 @@ public void testGetTaskByWorkItemId() {\n     \tassertNotNull(userTask);\n     \tassertEquals(processInstanceId, userTask.getProcessInstanceId());\n     \tassertEquals(\"Write a Document\", userTask.getName());\n+        assertTask(userTask, processInstanceId);\n \n     }\n \n     @Test\n     public void testGetTaskById() {", "originalCommit": "c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwNjk3Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453706977", "bodyText": "I think once the name of asserTask method has been changed to assertCorrelationAndProcess, it is now clear the pupose of adding this line here. To test that for getTaskByWorkItemId, processType and correlationKey are included in the response", "author": "fjtirado", "createdAt": "2020-07-13T14:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NTQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcxNDIwOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453714209", "bodyText": "I mean the test which I commented testGetTaskById() :) As you changed the behaviour of the test - not that good for regression testing. (For example you use now a different startProcess method) So I would say that a separate test would be better.", "author": "MarianMacik", "createdAt": "2020-07-13T15:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NTQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcyNTAzMg==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453725032", "bodyText": "Ok, understood ;)\nNew test added.", "author": "fjtirado", "createdAt": "2020-07-13T15:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NTQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NjA2Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453576067", "bodyText": "Why was this removed? It should still hold I think.", "author": "MarianMacik", "createdAt": "2020-07-13T11:14:21Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/RuntimeDataServiceImplTest.java", "diffHunk": "@@ -1118,26 +1127,20 @@ public void testGetTaskAssignedAsBusinessAdminPaging() {\n     \n     @Test\n     public void testGetTaskAssignedAsBusinessAdminByStatus() {\n-\n-        for (int i = 0; i < 10; i++) {\n-\n-            processService.startProcess(deploymentUnit.getIdentifier(), \"org.jbpm.writedocument\");\n-        }\n+        startProcesses(10, \"org.jbpm.writedocument\");\n         \n         List<Status> statuses = new ArrayList<Status>();\n         statuses.add(Status.Ready);\n         statuses.add(Status.Reserved);\n \n         List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsBusinessAdministratorByStatus(\"Administrator\", statuses, new QueryFilter(0, 5));\n-        assertNotNull(tasks);\n-        assertEquals(5, tasks.size());", "originalCommit": "c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5NjYxMw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453696613", "bodyText": "There was an already existing issue with this test.\nBasically Task table is not removed between test, which leads to inconsistencies.\nSince it is apparently not related with these changes, Gonzalo will investigate this as a separate task.", "author": "fjtirado", "createdAt": "2020-07-13T14:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NjA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NjY2Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453576662", "bodyText": "Same here.", "author": "MarianMacik", "createdAt": "2020-07-13T11:15:22Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/RuntimeDataServiceImplTest.java", "diffHunk": "@@ -1210,22 +1213,15 @@ public void testGetTasksAssignedAsPotentialOwnerByStatusPagingAndFiltering() {\n     \n     @Test\n     public void testGetTasksAssignedAsPotentialOwnerSortedByAlias() {\n-        List<Long> processInstanceIds = new ArrayList<Long>();\n-        for (int i = 0; i < 10; i++) {\n-\n-            processInstanceIds.add(processService.startProcess(deploymentUnit.getIdentifier(), \"org.jbpm.writedocument\"));\n-        }\n-\n+        startProcesses(10, \"org.jbpm.writedocument\");\n+        \n         List<Status> statuses = new ArrayList<Status>();\n         statuses.add(Status.Ready);\n         statuses.add(Status.Reserved);\n \n         QueryFilter ctx = new QueryFilter(0, 5, \"Status\", true);\n         \n         List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwnerByStatus(\"salaboy\", statuses, ctx);\n-        assertNotNull(tasks);\n-        assertEquals(5, tasks.size());\n-", "originalCommit": "c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5Njc0Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453696742", "bodyText": "There was an already existing issue with this test.\nBasically Task table is not removed between test, which leads to inconsistencies.\nSince it is apparently not related with these changes, Gonzalo will investigate this as a separate task.", "author": "fjtirado", "createdAt": "2020-07-13T14:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NjY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NzQ1Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453577456", "bodyText": "Maybe assert the process type as well.", "author": "MarianMacik", "createdAt": "2020-07-13T11:16:55Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/RuntimeDataServiceImplTest.java", "diffHunk": "@@ -1329,12 +1325,15 @@ public void testGetTaskEvents() {\n     \tassertNotNull(workItemId);\n \n     \tUserTaskInstanceDesc userTask = runtimeDataService.getTaskByWorkItemId(workItemId);\n-    \tassertNotNull(userTask);\n+        assertTask(userTask, processInstanceId);\n \n     \tList<TaskEvent> auditTasks = runtimeDataService.getTaskEvents(userTask.getTaskId(), new QueryFilter());\n     \tassertNotNull(auditTasks);\n-        assertEquals(2, auditTasks.size());\n-    \tassertEquals(TaskEvent.TaskEventType.ADDED, auditTasks.get(0).getType());\n+    \tassertEquals(2, auditTasks.size());\n+    \tTaskEvent taskEvent = auditTasks.get(0);\n+    \tassertEquals(TaskEvent.TaskEventType.ADDED, taskEvent.getType());\n+    \tassertNotNull(taskEvent.getCorrelationKey());\n+    \tassertNotNull(taskEvent.getProcessType());", "originalCommit": "c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwMDcxOA==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453700718", "bodyText": "processType here can be either PROCESS or CASE, so what is tested is that TaskEvent is filled as expected with a not null value", "author": "fjtirado", "createdAt": "2020-07-13T14:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcxNjcwOA==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453716708", "bodyText": "But since you started process in this test you can expect PROCESS here, so the test would have even better coverage.", "author": "MarianMacik", "createdAt": "2020-07-13T15:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcyNjQ3Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453726473", "bodyText": "you are right, changed", "author": "fjtirado", "createdAt": "2020-07-13T15:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3NzQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3ODkzNw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453578937", "bodyText": "Maybe make the name more descriptive - e.g. what it's asserting on.", "author": "MarianMacik", "createdAt": "2020-07-13T11:19:49Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/test/util/AbstractKieServicesBaseTest.java", "diffHunk": "@@ -110,4 +115,33 @@ protected KieFileSystem createKieFileSystemWithKProject(KieServices ks) {\n         return kfs;\n     }\n \n+    protected void assertTask(UserTaskInstanceDesc userTask, long processInstanceId) {\n+        assertTask(userTask, Long.toString(processInstanceId));\n+    }\n+\n+    protected void assertTask(UserTaskInstanceDesc userTask, String correlationKey) {", "originalCommit": "c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwMjQwOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453702409", "bodyText": "Done", "author": "fjtirado", "createdAt": "2020-07-13T14:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3ODkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MDI2Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453580266", "bodyText": "I would rather use a variable which belongs to the test itself as it's less error-prone to tests influencing each other.", "author": "MarianMacik", "createdAt": "2020-07-13T11:22:31Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/RuntimeDataServiceImplTest.java", "diffHunk": "@@ -1239,7 +1235,7 @@ public void testGetTasksAssignedAsPotentialOwnerSortedByAlias() {\n     @Test\n     public void testTasksByStatusByProcessInstanceIdPagingAndFiltering() {\n \n-    \tLong pid = processService.startProcess(deploymentUnit.getIdentifier(), \"org.jbpm.writedocument\");\n+    \tprocessInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"org.jbpm.writedocument\");", "originalCommit": "c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwNDI1Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453704253", "bodyText": "I agree with the principle, but in practise global variable approach is used for all other test and allow defining commom method in parent class (changing that at this stage is not providig any benefit). This line was modified  to align this test with the other ones.", "author": "fjtirado", "createdAt": "2020-07-13T14:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MDI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcyMDgyNw==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453720827", "bodyText": "OK, makes sense.", "author": "MarianMacik", "createdAt": "2020-07-13T15:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MDI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MDcyOA==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453580728", "bodyText": "Why do we need this intermediate step and not do the conversion inside the assert method below? As this method doesn't do anything more.", "author": "MarianMacik", "createdAt": "2020-07-13T11:23:33Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/test/util/AbstractKieServicesBaseTest.java", "diffHunk": "@@ -110,4 +115,33 @@ protected KieFileSystem createKieFileSystemWithKProject(KieServices ks) {\n         return kfs;\n     }\n \n+    protected void assertTask(UserTaskInstanceDesc userTask, long processInstanceId) {\n+        assertTask(userTask, Long.toString(processInstanceId));\n+    }", "originalCommit": "c42c86c20ae599745d96a56aa7a9c802a8ee4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwNTI5NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453705295", "bodyText": "This method is a bridge between processInstanceId and correlationKey. In most test, correlationKey is equal to processInstanceId. This is doing the briding. If this method is removed Long.toString will have to be invoked in a lot of test.", "author": "fjtirado", "createdAt": "2020-07-13T14:48:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MDcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcxOTY4MA==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453719680", "bodyText": "I see now, thanks.", "author": "MarianMacik", "createdAt": "2020-07-13T15:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MDcyOA=="}], "type": "inlineReview"}, {"oid": "2e42e6943cc9e734be3dd214ff710693e4aa607e", "url": "https://github.com/kiegroup/jbpm/commit/2e42e6943cc9e734be3dd214ff710693e4aa607e", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-13T14:49:18Z", "type": "forcePushed"}, {"oid": "8636b23fb8bdf3b2b78a16424375fd1374e12bce", "url": "https://github.com/kiegroup/jbpm/commit/8636b23fb8bdf3b2b78a16424375fd1374e12bce", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-13T15:14:04Z", "type": "forcePushed"}, {"oid": "65a55341259365b7676db2dd0774ee60129cb17c", "url": "https://github.com/kiegroup/jbpm/commit/65a55341259365b7676db2dd0774ee60129cb17c", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-13T15:17:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NDkyMg==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453754922", "bodyText": "SLA-related columns are used for node(task)-related SLA (from NodeInstanceLog), not for process SLA (from ProcessInstanceLog). These fields are used for the RuntimeDataServiceImpl#getTaskById(Long taskId, boolean withSLA) method where you can specify if you want just the task or also its SLA data. So by default it's fine that the mapper doesn't have this data.\nAt first, the join with NodeInstanceLog was implemented in 3c46765 but then we found that it negatively impacts performance so we decided to create a separate method for that and reuse the same UserTaskInstanceDesc object for that (1ed84fe). That's why SLA information is not in the mapper by default.", "author": "MarianMacik", "createdAt": "2020-07-13T15:56:10Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/mapper/UserTaskInstanceQueryMapper.java", "diffHunk": "@@ -80,7 +80,11 @@ protected UserTaskInstanceDesc buildInstance(DataSet dataSetResult, int index) {\n                 getColumnDateValue(dataSetResult, COLUMN_DUEDATE, index),//dueDate\n                 getColumnLongValue(dataSetResult, COLUMN_WORKITEMID, index), //workItemId\n                 getColumnStringValue(dataSetResult, COLUMN_FORM_NAME, index),\n-                getColumnStringValue(dataSetResult, COLUMN_SUBJECT, index)\n+                getColumnStringValue(dataSetResult, COLUMN_SUBJECT, index),\n+                getColumnStringValue(dataSetResult, COLUMN_CORRELATIONKEY, index), \n+                getColumnIntValue(dataSetResult, COLUMN_PROCESSTYPE, index),\n+                getColumnDateValue(dataSetResult, COLUMN_SLA_DUE_DATE, index), \n+                getColumnIntValue(dataSetResult, COLUMN_SLA_COMPLIANCE, index)", "originalCommit": "65a55341259365b7676db2dd0774ee60129cb17c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMDQxNg==", "url": "https://github.com/kiegroup/jbpm/pull/1680#discussion_r453800416", "bodyText": "Ok, adding two separate set of contanst for these two columns on task table, in case they are retrieved in future", "author": "fjtirado", "createdAt": "2020-07-13T17:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NDkyMg=="}], "type": "inlineReview"}, {"oid": "6e0b1d135b848bbaceaab01147d74f4443c4cbe5", "url": "https://github.com/kiegroup/jbpm/commit/6e0b1d135b848bbaceaab01147d74f4443c4cbe5", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-13T17:08:16Z", "type": "forcePushed"}, {"oid": "898a8e4e00d727e5c3cf7bf123dec972fa7957ea", "url": "https://github.com/kiegroup/jbpm/commit/898a8e4e00d727e5c3cf7bf123dec972fa7957ea", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-14T14:37:12Z", "type": "forcePushed"}, {"oid": "e22734e9f60ffd7858cac6b25210c82d8a143a54", "url": "https://github.com/kiegroup/jbpm/commit/e22734e9f60ffd7858cac6b25210c82d8a143a54", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-14T14:48:11Z", "type": "commit"}, {"oid": "e22734e9f60ffd7858cac6b25210c82d8a143a54", "url": "https://github.com/kiegroup/jbpm/commit/e22734e9f60ffd7858cac6b25210c82d8a143a54", "message": "[JBPM-9195] Case traceability from a Task Instance\n\nCorrelationKey and ProcessType added to UserTaskDescription.\n\nExisting APIs(getTaskById, getTaskByWorkItem and getTaskByProcess) are\nreused, since I believe is preferable to assume the performance cost of\nan extra join rather than having to maintain a new API for every\nattribute combination (specially when there is already a join because of\nthe introduction of subject attribute)", "committedDate": "2020-07-14T14:48:11Z", "type": "forcePushed"}]}