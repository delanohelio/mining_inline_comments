{"pr_number": 12385, "pr_title": "Check and fail page store operation after timeout", "pr_createdAt": "2020-10-23T23:09:28Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/12385", "timeline": [{"oid": "ef182051efbf0c1d3820a030324065110ec51f4e", "url": "https://github.com/Alluxio/alluxio/commit/ef182051efbf0c1d3820a030324065110ec51f4e", "message": "Support timeout for local page store", "committedDate": "2020-10-23T23:10:55Z", "type": "forcePushed"}, {"oid": "945de83f7888edf1d2414331ef1456fa16a3b46a", "url": "https://github.com/Alluxio/alluxio/commit/945de83f7888edf1d2414331ef1456fa16a3b46a", "message": "Support timeout for local page store", "committedDate": "2020-10-24T05:00:20Z", "type": "forcePushed"}, {"oid": "3733ccabd116bf07bd8a36cfd0d7be71b2c29dc1", "url": "https://github.com/Alluxio/alluxio/commit/3733ccabd116bf07bd8a36cfd0d7be71b2c29dc1", "message": "Support timeout for local page store", "committedDate": "2020-10-24T05:02:22Z", "type": "forcePushed"}, {"oid": "a4061ad19c7477d9ae9c6d1c7bbd5846d54cb2b9", "url": "https://github.com/Alluxio/alluxio/commit/a4061ad19c7477d9ae9c6d1c7bbd5846d54cb2b9", "message": "Support timeout for local page store", "committedDate": "2020-10-24T05:17:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ4NDU3NA==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r511484574", "bodyText": "Do the corresponding page stores need to handle InterruptedException? For example, LocalPageStore will throw an IOException if it catches any exception, so we will not see TimeoutException?", "author": "calvinjia", "createdAt": "2020-10-24T15:35:24Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/TimeLimitedPageStore.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ *\n+ */\n+\n+package alluxio.client.file.cache;\n+\n+import alluxio.exception.PageNotFoundException;\n+import alluxio.metrics.MetricKey;\n+import alluxio.metrics.MetricsSystem;\n+\n+import com.codahale.metrics.Counter;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.SimpleTimeLimiter;\n+import com.google.common.util.concurrent.TimeLimiter;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Stream;\n+\n+/**\n+ * A wrapper class on PageStore with timeout.\n+ */\n+public class TimeLimitedPageStore implements PageStore {\n+  private final PageStore mPageStore;\n+  private final long mTimeoutMs;\n+  private final TimeLimiter mTimeLimter;\n+\n+  /**\n+   * @param pageStore page store\n+   * @param timeout time out in ms\n+   */\n+  public TimeLimitedPageStore(PageStore pageStore, long timeout) {\n+    mPageStore = pageStore;\n+    mTimeoutMs = timeout;\n+    mTimeLimter = SimpleTimeLimiter.create(Executors.newCachedThreadPool());\n+  }\n+\n+  @Override\n+  public void put(PageId pageId, byte[] page) throws IOException {\n+    try {\n+      Callable<Void> callable = () -> {\n+        mPageStore.put(pageId, page);\n+        return null;\n+      };\n+      mTimeLimter.callWithTimeout(callable, mTimeoutMs, TimeUnit.MILLISECONDS);", "originalCommit": "a4061ad19c7477d9ae9c6d1c7bbd5846d54cb2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4MzkyNw==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512283927", "bodyText": "we will need to handle InterruptedException  here. Updated the code.\nLocalPageStore shouldn't make any change", "author": "apc999", "createdAt": "2020-10-26T21:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ4NDU3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNzg4Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512237883", "bodyText": "Update this description.", "author": "gpang", "createdAt": "2020-10-26T20:10:52Z", "path": "core/common/src/main/java/alluxio/metrics/MetricKey.java", "diffHunk": "@@ -962,6 +962,24 @@ public MetricKey build() {\n           .setMetricType(MetricType.COUNTER)\n           .setIsClusterAggregated(false)\n           .build();\n+  public static final MetricKey CLIENT_CACHE_STORE_DELETE_TIMEOUT =\n+      new Builder(Name.CLIENT_CACHE_STORE_DELETE_TIMEOUT)\n+          .setDescription(\"Number of timeouts when writing new pages to page store.\")", "originalCommit": "a4061ad19c7477d9ae9c6d1c7bbd5846d54cb2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMzUyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512403525", "bodyText": "done", "author": "apc999", "createdAt": "2020-10-27T04:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNzg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNzkzMQ==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512237931", "bodyText": "Update this description.", "author": "gpang", "createdAt": "2020-10-26T20:10:58Z", "path": "core/common/src/main/java/alluxio/metrics/MetricKey.java", "diffHunk": "@@ -962,6 +962,24 @@ public MetricKey build() {\n           .setMetricType(MetricType.COUNTER)\n           .setIsClusterAggregated(false)\n           .build();\n+  public static final MetricKey CLIENT_CACHE_STORE_DELETE_TIMEOUT =\n+      new Builder(Name.CLIENT_CACHE_STORE_DELETE_TIMEOUT)\n+          .setDescription(\"Number of timeouts when writing new pages to page store.\")\n+          .setMetricType(MetricType.COUNTER)\n+          .setIsClusterAggregated(false)\n+          .build();\n+  public static final MetricKey CLIENT_CACHE_STORE_GET_TIMEOUT =\n+      new Builder(Name.CLIENT_CACHE_STORE_GET_TIMEOUT)\n+          .setDescription(\"Number of timeouts when writing new pages to page store.\")", "originalCommit": "a4061ad19c7477d9ae9c6d1c7bbd5846d54cb2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMzUzOA==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512403538", "bodyText": "done", "author": "apc999", "createdAt": "2020-10-27T04:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNzkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzODMzNw==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512238337", "bodyText": "operations? Which operations are affected? Also, is there a setting that disables the timeout?", "author": "gpang", "createdAt": "2020-10-26T20:11:41Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3648,6 +3648,12 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.CLIENT)\n           .build();\n+  public static final PropertyKey USER_CLIENT_CACHE_STORE_TIMEOUT =\n+      new Builder(Name.USER_CLIENT_CACHE_STORE_TIMEOUT)\n+          .setDescription(\"The timeout for page store options\")", "originalCommit": "a4061ad19c7477d9ae9c6d1c7bbd5846d54cb2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNTUzNA==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512405534", "bodyText": "read/write/delete operations -> updated in description\nthis parameter is not set by default which means disabling timeout..\nAdd more clarification", "author": "apc999", "createdAt": "2020-10-27T04:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzODMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NDg3NQ==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512244875", "bodyText": "Is there a way to create a threadpool that can have named threads? Does the threadpool ever have to be shutdown at the end?", "author": "gpang", "createdAt": "2020-10-26T20:23:41Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/TimeLimitedPageStore.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ *\n+ */\n+\n+package alluxio.client.file.cache;\n+\n+import alluxio.exception.PageNotFoundException;\n+import alluxio.metrics.MetricKey;\n+import alluxio.metrics.MetricsSystem;\n+\n+import com.codahale.metrics.Counter;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.SimpleTimeLimiter;\n+import com.google.common.util.concurrent.TimeLimiter;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Stream;\n+\n+/**\n+ * A wrapper class on PageStore with timeout.\n+ */\n+public class TimeLimitedPageStore implements PageStore {\n+  private final PageStore mPageStore;\n+  private final long mTimeoutMs;\n+  private final TimeLimiter mTimeLimter;\n+\n+  /**\n+   * @param pageStore page store\n+   * @param timeout time out in ms\n+   */\n+  public TimeLimitedPageStore(PageStore pageStore, long timeout) {\n+    mPageStore = pageStore;\n+    mTimeoutMs = timeout;\n+    mTimeLimter = SimpleTimeLimiter.create(Executors.newCachedThreadPool());", "originalCommit": "a4061ad19c7477d9ae9c6d1c7bbd5846d54cb2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNjQ5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512406496", "bodyText": "good call. added a reference to ServiceExecuttor and put shutdown in close", "author": "apc999", "createdAt": "2020-10-27T04:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NDg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NjI4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512246286", "bodyText": "will this test take 10s? That seems too long? Would a timeout like 1s be good enough?", "author": "gpang", "createdAt": "2020-10-26T20:26:12Z", "path": "core/client/fs/src/test/java/alluxio/client/file/cache/LocalCacheManagerTest.java", "diffHunk": "@@ -612,6 +615,45 @@ public void failedPageStoreDeleteOnEviction() throws Exception {\n     assertArrayEquals(PAGE1, mBuf);\n   }\n \n+  @Test\n+  public void putTimeout() throws Exception {\n+    mConf.set(PropertyKey.USER_CLIENT_CACHE_STORE_TIMEOUT, \"10s\");", "originalCommit": "a4061ad19c7477d9ae9c6d1c7bbd5846d54cb2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNjY5OA==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512406698", "bodyText": "changed to 2sec", "author": "apc999", "createdAt": "2020-10-27T04:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NjI4Ng=="}], "type": "inlineReview"}, {"oid": "9e73c995959deee9a7cf1ffef85b6f3d2c51915e", "url": "https://github.com/Alluxio/alluxio/commit/9e73c995959deee9a7cf1ffef85b6f3d2c51915e", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T04:16:22Z", "type": "forcePushed"}, {"oid": "8ea8e4d7cef68e755e3bfea14afe3395dee807f4", "url": "https://github.com/Alluxio/alluxio/commit/8ea8e4d7cef68e755e3bfea14afe3395dee807f4", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T05:31:15Z", "type": "forcePushed"}, {"oid": "158944c0910b76313d99c317999af9e1ee8864ee", "url": "https://github.com/Alluxio/alluxio/commit/158944c0910b76313d99c317999af9e1ee8864ee", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T05:57:47Z", "type": "forcePushed"}, {"oid": "c4c47e5055de874435b4a47900817fd85e59fba1", "url": "https://github.com/Alluxio/alluxio/commit/c4c47e5055de874435b4a47900817fd85e59fba1", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T06:00:02Z", "type": "forcePushed"}, {"oid": "851ba3b3996c5686b18bef5e4faecab39ae0099e", "url": "https://github.com/Alluxio/alluxio/commit/851ba3b3996c5686b18bef5e4faecab39ae0099e", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T17:21:29Z", "type": "forcePushed"}, {"oid": "6955ba442b1bcda131777e39f85d23d9fae2c7dc", "url": "https://github.com/Alluxio/alluxio/commit/6955ba442b1bcda131777e39f85d23d9fae2c7dc", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T17:37:15Z", "type": "forcePushed"}, {"oid": "d4232dd2eded4d05a43e294f7dd45ff8ffa1bbe2", "url": "https://github.com/Alluxio/alluxio/commit/d4232dd2eded4d05a43e294f7dd45ff8ffa1bbe2", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T18:30:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTE5MA==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512939190", "bodyText": "NIT: spelling", "author": "gpang", "createdAt": "2020-10-27T18:39:11Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/TimeBoundPageStore.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache;\n+\n+import alluxio.client.file.cache.store.PageStoreOptions;\n+import alluxio.exception.PageNotFoundException;\n+import alluxio.metrics.MetricKey;\n+import alluxio.metrics.MetricsSystem;\n+\n+import com.codahale.metrics.Counter;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.SimpleTimeLimiter;\n+import com.google.common.util.concurrent.TimeLimiter;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Stream;\n+\n+/**\n+ * A wrapper class on PageStore with timeout. Note that, this page store will not queue any request.\n+ */\n+public class TimeBoundPageStore implements PageStore {\n+  private final PageStore mPageStore;\n+  private final long mTimeoutMs;\n+  private final TimeLimiter mTimeLimter;\n+  private final ExecutorService mExecuttorService;", "originalCommit": "d4232dd2eded4d05a43e294f7dd45ff8ffa1bbe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk3MDI4Mg==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512970282", "bodyText": "fixed", "author": "apc999", "createdAt": "2020-10-27T19:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MTYzOA==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512941638", "bodyText": "would it be easier to just have a timeout of -1 represent disabled, instead of 2 consistent parameters?", "author": "gpang", "createdAt": "2020-10-27T18:43:09Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3648,6 +3648,33 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.CLIENT)\n           .build();\n+  public static final PropertyKey USER_CLIENT_CACHE_TIMEOUT_DURATION =\n+      new Builder(Name.USER_CLIENT_CACHE_TIMEOUT_DURATION)\n+          .setDefaultValue(\"60sec\")\n+          .setDescription(\"The timeout duration for local I/O operations on \"\n+              + \"reading/writing/deleting in the cache. Local cache operations that time out will \"\n+              + \"fail and fallback to external file system.\")\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.CLIENT)\n+          .build();\n+  public static final PropertyKey USER_CLIENT_CACHE_TIMEOUT_ENABLED =\n+      new Builder(Name.USER_CLIENT_CACHE_TIMEOUT_ENABLED)", "originalCommit": "d4232dd2eded4d05a43e294f7dd45ff8ffa1bbe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk3NjM0MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r512976341", "bodyText": "that's my original way . but it was not a good practise as you need to be very careful to call\nconf.getMs(PropertyKey.USER_CLIENT_CACHE_TIMEOUT_DURATION) which will throw Exception when this is set to -1.\nthis will complicate the source code. IN this case, i prefer a bit more verbose but make sure the produciton\ncode is more type-safe", "author": "apc999", "createdAt": "2020-10-27T19:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MTYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzNDM4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r513034386", "bodyText": "Why will it throw an exception? We do this for sync interval: https://github.com/Alluxio/alluxio/blob/master/core/common/src/test/java/alluxio/conf/InstancedConfigurationTest.java#L395", "author": "gpang", "createdAt": "2020-10-27T21:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MTYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzOTU5NA==", "url": "https://github.com/Alluxio/alluxio/pull/12385#discussion_r513039594", "bodyText": "ah, sounds good", "author": "apc999", "createdAt": "2020-10-27T21:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0MTYzOA=="}], "type": "inlineReview"}, {"oid": "433534e09b84eab62aecb7b64f5132f6d5fd5411", "url": "https://github.com/Alluxio/alluxio/commit/433534e09b84eab62aecb7b64f5132f6d5fd5411", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T18:45:45Z", "type": "forcePushed"}, {"oid": "0658e9732bfb3cae900be8896d3f346c0391612f", "url": "https://github.com/Alluxio/alluxio/commit/0658e9732bfb3cae900be8896d3f346c0391612f", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T19:37:43Z", "type": "forcePushed"}, {"oid": "3ab52079245c87b0529aa2780f7aa77c761006af", "url": "https://github.com/Alluxio/alluxio/commit/3ab52079245c87b0529aa2780f7aa77c761006af", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T19:53:45Z", "type": "forcePushed"}, {"oid": "8ea39b01ce25438c5a39a0ccab93b0f76f2ccad8", "url": "https://github.com/Alluxio/alluxio/commit/8ea39b01ce25438c5a39a0ccab93b0f76f2ccad8", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T21:40:23Z", "type": "commit"}, {"oid": "8ea39b01ce25438c5a39a0ccab93b0f76f2ccad8", "url": "https://github.com/Alluxio/alluxio/commit/8ea39b01ce25438c5a39a0ccab93b0f76f2ccad8", "message": "Check and fail page store operation after timeout", "committedDate": "2020-10-27T21:40:23Z", "type": "forcePushed"}]}