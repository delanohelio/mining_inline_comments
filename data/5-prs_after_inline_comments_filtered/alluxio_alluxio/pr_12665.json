{"pr_number": 12665, "pr_title": "Fix ListBucket in S3 API v1 to return correct values", "pr_createdAt": "2020-12-18T19:39:00Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/12665", "timeline": [{"oid": "62823f632446e3786c819fe7ea9200f2c4e865e7", "url": "https://github.com/Alluxio/alluxio/commit/62823f632446e3786c819fe7ea9200f2c4e865e7", "message": "Authorization + ListAllMyBuckets for S3 Rest Api", "committedDate": "2020-12-16T01:03:05Z", "type": "commit"}, {"oid": "284658f9afc57ab6263cd5cf04e4facadec62d3b", "url": "https://github.com/Alluxio/alluxio/commit/284658f9afc57ab6263cd5cf04e4facadec62d3b", "message": "Remove log", "committedDate": "2020-12-16T01:10:29Z", "type": "commit"}, {"oid": "a2431b7d89180e922dafb2c7b7006c82d6828f09", "url": "https://github.com/Alluxio/alluxio/commit/a2431b7d89180e922dafb2c7b7006c82d6828f09", "message": "Fix checkstyle", "committedDate": "2020-12-16T18:31:52Z", "type": "commit"}, {"oid": "b7d3845a251c4646cc36c247e504bd3a10f8e377", "url": "https://github.com/Alluxio/alluxio/commit/b7d3845a251c4646cc36c247e504bd3a10f8e377", "message": "Merge remote-tracking branch 'upstream/master' into s3_api2", "committedDate": "2020-12-16T18:49:26Z", "type": "commit"}, {"oid": "2183a11f31549ebda7a729a48cabab81fe3585c5", "url": "https://github.com/Alluxio/alluxio/commit/2183a11f31549ebda7a729a48cabab81fe3585c5", "message": "Fix List Buckets to be more correct", "committedDate": "2020-12-18T19:35:03Z", "type": "commit"}, {"oid": "100aeaf50da50a70a635b15d3dc1bb82706188d2", "url": "https://github.com/Alluxio/alluxio/commit/100aeaf50da50a70a635b15d3dc1bb82706188d2", "message": "Merge remote-tracking branch 'upstream/master' into s3_api2", "committedDate": "2020-12-18T19:37:53Z", "type": "commit"}, {"oid": "82360a360ed0e09c6728308f16702ab62f33ab08", "url": "https://github.com/Alluxio/alluxio/commit/82360a360ed0e09c6728308f16702ab62f33ab08", "message": "Remove no longer accurate test", "committedDate": "2021-01-04T18:59:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYxOTk0MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551619941", "bodyText": "is the delimiter used anywhere?", "author": "gpang", "createdAt": "2021-01-04T23:03:33Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketOptions.java", "diffHunk": "@@ -18,9 +18,10 @@\n  * The options for list bucket operation.\n  */\n public final class ListBucketOptions {\n-  private String mContinuationToken = null;\n+  private String mMarker = null;\n   private String mMaxKeys = null;\n   private String mPrefix = null;\n+  private String mDelimiter = null;", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMDExNw==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551620117", "bodyText": "should delimiter be added to this?", "author": "gpang", "createdAt": "2021-01-04T23:03:55Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketOptions.java", "diffHunk": "@@ -93,20 +110,20 @@ public boolean equals(Object o) {\n       return false;\n     }\n     ListBucketOptions that = (ListBucketOptions) o;\n-    return Objects.equal(mContinuationToken, that.mContinuationToken)\n+    return Objects.equal(mMarker, that.mMarker)", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMDE3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551620172", "bodyText": "should delimiter be added to this?", "author": "gpang", "createdAt": "2021-01-04T23:04:03Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketOptions.java", "diffHunk": "@@ -93,20 +110,20 @@ public boolean equals(Object o) {\n       return false;\n     }\n     ListBucketOptions that = (ListBucketOptions) o;\n-    return Objects.equal(mContinuationToken, that.mContinuationToken)\n+    return Objects.equal(mMarker, that.mMarker)\n         && Objects.equal(mMaxKeys, that.mMaxKeys)\n         && Objects.equal(mPrefix, that.mPrefix);\n   }\n \n   @Override\n   public int hashCode() {\n-    return Objects.hashCode(mContinuationToken, mMaxKeys, mPrefix);\n+    return Objects.hashCode(mMarker, mMaxKeys, mPrefix);", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMDIzOA==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551620238", "bodyText": "should this field be called marker?\nShould delimiter be added to this?", "author": "gpang", "createdAt": "2021-01-04T23:04:18Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketOptions.java", "diffHunk": "@@ -93,20 +110,20 @@ public boolean equals(Object o) {\n       return false;\n     }\n     ListBucketOptions that = (ListBucketOptions) o;\n-    return Objects.equal(mContinuationToken, that.mContinuationToken)\n+    return Objects.equal(mMarker, that.mMarker)\n         && Objects.equal(mMaxKeys, that.mMaxKeys)\n         && Objects.equal(mPrefix, that.mPrefix);\n   }\n \n   @Override\n   public int hashCode() {\n-    return Objects.hashCode(mContinuationToken, mMaxKeys, mPrefix);\n+    return Objects.hashCode(mMarker, mMaxKeys, mPrefix);\n   }\n \n   @Override\n   public String toString() {\n     return MoreObjects.toStringHelper(this)\n-        .add(\"continuationToken\", mContinuationToken)\n+        .add(\"continuationToken\", mMarker)", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMDMyMA==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551620320", "bodyText": "I thought this was supposed to be the v1 version?", "author": "gpang", "createdAt": "2021-01-04T23:04:34Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "diffHunk": "@@ -11,56 +11,49 @@\n \n package alluxio.proxy.s3;\n \n-import alluxio.AlluxioURI;\n import alluxio.client.file.URIStatus;\n-import alluxio.wire.FileInfo;\n \n-import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n /**\n- * Get bucket result defined in http://docs.aws.amazon.com/AmazonS3/latest/API/v2-RESTBucketGET.html\n+ * Get bucket result defined in https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMDg0Mg==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551620842", "bodyText": "Can we keep this comment and the comment for continuation? (or an updated version of the comment)", "author": "gpang", "createdAt": "2021-01-04T23:05:57Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "diffHunk": "@@ -11,56 +11,49 @@\n \n package alluxio.proxy.s3;\n \n-import alluxio.AlluxioURI;\n import alluxio.client.file.URIStatus;\n-import alluxio.wire.FileInfo;\n \n-import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n /**\n- * Get bucket result defined in http://docs.aws.amazon.com/AmazonS3/latest/API/v2-RESTBucketGET.html\n+ * Get bucket result defined in https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html\n  * It will be encoded into an XML string to be returned as a response for the REST call.\n- *\n- * TODO(chaomin): consider add more required fields in S3 BucketGet API.\n  */\n @JacksonXmlRootElement(localName = \"ListBucketResult\")\n-@JsonPropertyOrder({ \"Name\", \"Prefix\", \"ContinuationToken\", \"NextContinuationToken\",\n-    \"KeyCount\", \"MaxKeys\", \"IsTruncated\", \"Contents\" })\n public class ListBucketResult {\n+  private static final Logger LOG = LoggerFactory.getLogger(ListBucketResult.class);\n+\n+  private static final int DEFAULT_MAX_KEYS = 1000;\n \n   /* Name of the bucket. */\n-  private String mName = \"\";\n-  /* Keys that begin with the indicated prefix. */\n-  private String mPrefix = null;\n-  /* ContinuationToken is included in the response if it was sent with the request. */\n-  private String mContinuationToken = null;\n+  private String mName;\n   /**\n    * Returns the number of keys included in the response. The value is always less than or equal\n    * to the mMaxKeys value.\n    */\n-  private int mKeyCount = 0;\n-  /* The maximum number of keys returned in the response body. */\n-  private int mMaxKeys = S3Constants.S3_DEFAULT_MAX_KEYS;\n-  /**\n-   * Specifies whether or not all of the results were returned. If the number of", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMTMxOA==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551621318", "bodyText": "Will there always be a marker defined?", "author": "gpang", "createdAt": "2021-01-04T23:06:58Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "diffHunk": "@@ -71,58 +64,56 @@ public ListBucketResult() {}\n    * Creates an {@link ListBucketResult}.\n    *\n    * @param bucketName the bucket name\n-   * @param objectsList a list of {@link URIStatus}, representing the objects\n+   * @param children a list of {@link URIStatus}, representing the objects and common prefixes\n    * @param options the list bucket options\n    */\n   public ListBucketResult(\n-      String bucketName, List<URIStatus> objectsList, ListBucketOptions options) {\n+      String bucketName, List<URIStatus> children, ListBucketOptions options) {\n     mName = bucketName;\n+    mMaxKeys = DEFAULT_MAX_KEYS;\n+\n     mPrefix = options.getPrefix();\n-    mKeyCount = 0;\n-    if (options.getMaxKeys() != null) {\n-      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n-    }\n-    mContents = new ArrayList<>();\n-    mContinuationToken = options.getContinuationToken();\n-\n-    Collections.sort(objectsList, new URIStatusComparator());\n-\n-    int startIndex = 0;\n-    if (options.getContinuationToken() != null) {\n-      URIStatus tokenStatus = new URIStatus(new FileInfo().setPath(\n-          mName + AlluxioURI.SEPARATOR + mContinuationToken));\n-      startIndex = Collections.binarySearch(objectsList, tokenStatus, new URIStatusComparator());\n-      if (startIndex < 0) {\n-        // If continuation token does not exist in the object list, find the first element which is\n-        // greater than the token.\n-        startIndex = (-1) * startIndex - 1;\n-      }\n+    mMarker = options.getMarker();\n+\n+    Collections.sort(children, new URIStatusComparator());\n+\n+    final List<URIStatus> keys = children.stream()\n+        .filter((status) -> status.getPath().compareTo(mMarker) > 0)", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNjc2Nw==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551636767", "bodyText": "Marker is set to be an empty string is the rest api implementation itself.", "author": "bradyoo", "createdAt": "2021-01-04T23:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMTMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMTU0OA==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551621548", "bodyText": "is it ever possible that the keys.size() == 0?", "author": "gpang", "createdAt": "2021-01-04T23:07:33Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "diffHunk": "@@ -71,58 +64,56 @@ public ListBucketResult() {}\n    * Creates an {@link ListBucketResult}.\n    *\n    * @param bucketName the bucket name\n-   * @param objectsList a list of {@link URIStatus}, representing the objects\n+   * @param children a list of {@link URIStatus}, representing the objects and common prefixes\n    * @param options the list bucket options\n    */\n   public ListBucketResult(\n-      String bucketName, List<URIStatus> objectsList, ListBucketOptions options) {\n+      String bucketName, List<URIStatus> children, ListBucketOptions options) {\n     mName = bucketName;\n+    mMaxKeys = DEFAULT_MAX_KEYS;\n+\n     mPrefix = options.getPrefix();\n-    mKeyCount = 0;\n-    if (options.getMaxKeys() != null) {\n-      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n-    }\n-    mContents = new ArrayList<>();\n-    mContinuationToken = options.getContinuationToken();\n-\n-    Collections.sort(objectsList, new URIStatusComparator());\n-\n-    int startIndex = 0;\n-    if (options.getContinuationToken() != null) {\n-      URIStatus tokenStatus = new URIStatus(new FileInfo().setPath(\n-          mName + AlluxioURI.SEPARATOR + mContinuationToken));\n-      startIndex = Collections.binarySearch(objectsList, tokenStatus, new URIStatusComparator());\n-      if (startIndex < 0) {\n-        // If continuation token does not exist in the object list, find the first element which is\n-        // greater than the token.\n-        startIndex = (-1) * startIndex - 1;\n-      }\n+    mMarker = options.getMarker();\n+\n+    Collections.sort(children, new URIStatusComparator());\n+\n+    final List<URIStatus> keys = children.stream()\n+        .filter((status) -> status.getPath().compareTo(mMarker) > 0)\n+        .limit(mMaxKeys)\n+        .collect(Collectors.toList());\n+\n+    mKeyCount = keys.size();\n+    mIsTruncated = mKeyCount == mMaxKeys;\n+\n+    if (mIsTruncated) {\n+      mNextMarker = keys.get(keys.size() - 1).getPath();", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNDA3MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551634071", "bodyText": "not if mIsTruncated is True unless mMaxKeys is 0.", "author": "bradyoo", "createdAt": "2021-01-04T23:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMTU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMzM5Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551623393", "bodyText": "I think both of these can be Collections.emptyList()", "author": "gpang", "createdAt": "2021-01-04T23:12:46Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "diffHunk": "@@ -71,58 +64,56 @@ public ListBucketResult() {}\n    * Creates an {@link ListBucketResult}.\n    *\n    * @param bucketName the bucket name\n-   * @param objectsList a list of {@link URIStatus}, representing the objects\n+   * @param children a list of {@link URIStatus}, representing the objects and common prefixes\n    * @param options the list bucket options\n    */\n   public ListBucketResult(\n-      String bucketName, List<URIStatus> objectsList, ListBucketOptions options) {\n+      String bucketName, List<URIStatus> children, ListBucketOptions options) {\n     mName = bucketName;\n+    mMaxKeys = DEFAULT_MAX_KEYS;\n+\n     mPrefix = options.getPrefix();\n-    mKeyCount = 0;\n-    if (options.getMaxKeys() != null) {\n-      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n-    }\n-    mContents = new ArrayList<>();\n-    mContinuationToken = options.getContinuationToken();\n-\n-    Collections.sort(objectsList, new URIStatusComparator());\n-\n-    int startIndex = 0;\n-    if (options.getContinuationToken() != null) {\n-      URIStatus tokenStatus = new URIStatus(new FileInfo().setPath(\n-          mName + AlluxioURI.SEPARATOR + mContinuationToken));\n-      startIndex = Collections.binarySearch(objectsList, tokenStatus, new URIStatusComparator());\n-      if (startIndex < 0) {\n-        // If continuation token does not exist in the object list, find the first element which is\n-        // greater than the token.\n-        startIndex = (-1) * startIndex - 1;\n-      }\n+    mMarker = options.getMarker();\n+\n+    Collections.sort(children, new URIStatusComparator());\n+\n+    final List<URIStatus> keys = children.stream()\n+        .filter((status) -> status.getPath().compareTo(mMarker) > 0)\n+        .limit(mMaxKeys)\n+        .collect(Collectors.toList());\n+\n+    mKeyCount = keys.size();\n+    mIsTruncated = mKeyCount == mMaxKeys;\n+\n+    if (mIsTruncated) {\n+      mNextMarker = keys.get(keys.size() - 1).getPath();\n     }\n \n-    for (int i = startIndex; i < objectsList.size(); i++) {\n+    final Map<Boolean, List<URIStatus>> typeToStatus = keys.stream()\n+        .collect(Collectors.groupingBy((status) -> status.isFolder()));\n+    final List<URIStatus> objectsList = typeToStatus.getOrDefault(false, new ArrayList<>());", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMzYwMg==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551623602", "bodyText": "can this loop be for (URIStatus status : objectsList) {?", "author": "gpang", "createdAt": "2021-01-04T23:13:25Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "diffHunk": "@@ -71,58 +64,56 @@ public ListBucketResult() {}\n    * Creates an {@link ListBucketResult}.\n    *\n    * @param bucketName the bucket name\n-   * @param objectsList a list of {@link URIStatus}, representing the objects\n+   * @param children a list of {@link URIStatus}, representing the objects and common prefixes\n    * @param options the list bucket options\n    */\n   public ListBucketResult(\n-      String bucketName, List<URIStatus> objectsList, ListBucketOptions options) {\n+      String bucketName, List<URIStatus> children, ListBucketOptions options) {\n     mName = bucketName;\n+    mMaxKeys = DEFAULT_MAX_KEYS;\n+\n     mPrefix = options.getPrefix();\n-    mKeyCount = 0;\n-    if (options.getMaxKeys() != null) {\n-      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n-    }\n-    mContents = new ArrayList<>();\n-    mContinuationToken = options.getContinuationToken();\n-\n-    Collections.sort(objectsList, new URIStatusComparator());\n-\n-    int startIndex = 0;\n-    if (options.getContinuationToken() != null) {\n-      URIStatus tokenStatus = new URIStatus(new FileInfo().setPath(\n-          mName + AlluxioURI.SEPARATOR + mContinuationToken));\n-      startIndex = Collections.binarySearch(objectsList, tokenStatus, new URIStatusComparator());\n-      if (startIndex < 0) {\n-        // If continuation token does not exist in the object list, find the first element which is\n-        // greater than the token.\n-        startIndex = (-1) * startIndex - 1;\n-      }\n+    mMarker = options.getMarker();\n+\n+    Collections.sort(children, new URIStatusComparator());\n+\n+    final List<URIStatus> keys = children.stream()\n+        .filter((status) -> status.getPath().compareTo(mMarker) > 0)\n+        .limit(mMaxKeys)\n+        .collect(Collectors.toList());\n+\n+    mKeyCount = keys.size();\n+    mIsTruncated = mKeyCount == mMaxKeys;\n+\n+    if (mIsTruncated) {\n+      mNextMarker = keys.get(keys.size() - 1).getPath();\n     }\n \n-    for (int i = startIndex; i < objectsList.size(); i++) {\n+    final Map<Boolean, List<URIStatus>> typeToStatus = keys.stream()\n+        .collect(Collectors.groupingBy((status) -> status.isFolder()));\n+    final List<URIStatus> objectsList = typeToStatus.getOrDefault(false, new ArrayList<>());\n+    final List<URIStatus> prefixList = typeToStatus.getOrDefault(true, new ArrayList<>());\n+\n+    mContents = new ArrayList<>();\n+    for (int i = 0; i < objectsList.size(); i++) {", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMzc2OA==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551623768", "bodyText": "why is this + 2 and not + 1 as before?", "author": "gpang", "createdAt": "2021-01-04T23:13:53Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "diffHunk": "@@ -71,58 +64,56 @@ public ListBucketResult() {}\n    * Creates an {@link ListBucketResult}.\n    *\n    * @param bucketName the bucket name\n-   * @param objectsList a list of {@link URIStatus}, representing the objects\n+   * @param children a list of {@link URIStatus}, representing the objects and common prefixes\n    * @param options the list bucket options\n    */\n   public ListBucketResult(\n-      String bucketName, List<URIStatus> objectsList, ListBucketOptions options) {\n+      String bucketName, List<URIStatus> children, ListBucketOptions options) {\n     mName = bucketName;\n+    mMaxKeys = DEFAULT_MAX_KEYS;\n+\n     mPrefix = options.getPrefix();\n-    mKeyCount = 0;\n-    if (options.getMaxKeys() != null) {\n-      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n-    }\n-    mContents = new ArrayList<>();\n-    mContinuationToken = options.getContinuationToken();\n-\n-    Collections.sort(objectsList, new URIStatusComparator());\n-\n-    int startIndex = 0;\n-    if (options.getContinuationToken() != null) {\n-      URIStatus tokenStatus = new URIStatus(new FileInfo().setPath(\n-          mName + AlluxioURI.SEPARATOR + mContinuationToken));\n-      startIndex = Collections.binarySearch(objectsList, tokenStatus, new URIStatusComparator());\n-      if (startIndex < 0) {\n-        // If continuation token does not exist in the object list, find the first element which is\n-        // greater than the token.\n-        startIndex = (-1) * startIndex - 1;\n-      }\n+    mMarker = options.getMarker();\n+\n+    Collections.sort(children, new URIStatusComparator());\n+\n+    final List<URIStatus> keys = children.stream()\n+        .filter((status) -> status.getPath().compareTo(mMarker) > 0)\n+        .limit(mMaxKeys)\n+        .collect(Collectors.toList());\n+\n+    mKeyCount = keys.size();\n+    mIsTruncated = mKeyCount == mMaxKeys;\n+\n+    if (mIsTruncated) {\n+      mNextMarker = keys.get(keys.size() - 1).getPath();\n     }\n \n-    for (int i = startIndex; i < objectsList.size(); i++) {\n+    final Map<Boolean, List<URIStatus>> typeToStatus = keys.stream()\n+        .collect(Collectors.groupingBy((status) -> status.isFolder()));\n+    final List<URIStatus> objectsList = typeToStatus.getOrDefault(false, new ArrayList<>());\n+    final List<URIStatus> prefixList = typeToStatus.getOrDefault(true, new ArrayList<>());\n+\n+    mContents = new ArrayList<>();\n+    for (int i = 0; i < objectsList.size(); i++) {\n       URIStatus status = objectsList.get(i);\n-      String objectKey = status.getPath().substring(mName.length() + 1);\n-      if (mKeyCount >= mMaxKeys) {\n-        mIsTruncated = true;\n-        mNextContinuationToken = objectKey;\n-        return;\n-      }\n-      if (mContinuationToken != null && objectKey.compareTo(mContinuationToken) < 0) {\n-        continue;\n-      }\n-      if (mPrefix != null && !objectKey.startsWith(mPrefix)) {\n-        continue;\n-      }\n-      // TODO(chaomin): set ETag once there's a way to get MD5 hash of an Alluxio file.\n-      // TODO(chaomin): construct the response with CommonPrefixes when delimiter support is added.\n+\n       mContents.add(new Content(\n-          status.getPath().substring(mName.length() + 1),\n+          status.getPath().substring(mName.length() + 2),", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzMTgwOQ==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551631809", "bodyText": "because +1 was wrong and you got an extra character in your S3Browser result :/", "author": "bradyoo", "createdAt": "2021-01-04T23:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMzc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNjE4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551636187", "bodyText": "In particular, this needs to remove 2 slashes. The both ends of \"/mName/\"", "author": "bradyoo", "createdAt": "2021-01-04T23:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyMzc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNDA5OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551624099", "bodyText": "can this be for (URIStatus status : prefixList) {?", "author": "gpang", "createdAt": "2021-01-04T23:14:55Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "diffHunk": "@@ -71,58 +64,56 @@ public ListBucketResult() {}\n    * Creates an {@link ListBucketResult}.\n    *\n    * @param bucketName the bucket name\n-   * @param objectsList a list of {@link URIStatus}, representing the objects\n+   * @param children a list of {@link URIStatus}, representing the objects and common prefixes\n    * @param options the list bucket options\n    */\n   public ListBucketResult(\n-      String bucketName, List<URIStatus> objectsList, ListBucketOptions options) {\n+      String bucketName, List<URIStatus> children, ListBucketOptions options) {\n     mName = bucketName;\n+    mMaxKeys = DEFAULT_MAX_KEYS;\n+\n     mPrefix = options.getPrefix();\n-    mKeyCount = 0;\n-    if (options.getMaxKeys() != null) {\n-      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n-    }\n-    mContents = new ArrayList<>();\n-    mContinuationToken = options.getContinuationToken();\n-\n-    Collections.sort(objectsList, new URIStatusComparator());\n-\n-    int startIndex = 0;\n-    if (options.getContinuationToken() != null) {\n-      URIStatus tokenStatus = new URIStatus(new FileInfo().setPath(\n-          mName + AlluxioURI.SEPARATOR + mContinuationToken));\n-      startIndex = Collections.binarySearch(objectsList, tokenStatus, new URIStatusComparator());\n-      if (startIndex < 0) {\n-        // If continuation token does not exist in the object list, find the first element which is\n-        // greater than the token.\n-        startIndex = (-1) * startIndex - 1;\n-      }\n+    mMarker = options.getMarker();\n+\n+    Collections.sort(children, new URIStatusComparator());\n+\n+    final List<URIStatus> keys = children.stream()\n+        .filter((status) -> status.getPath().compareTo(mMarker) > 0)\n+        .limit(mMaxKeys)\n+        .collect(Collectors.toList());\n+\n+    mKeyCount = keys.size();\n+    mIsTruncated = mKeyCount == mMaxKeys;\n+\n+    if (mIsTruncated) {\n+      mNextMarker = keys.get(keys.size() - 1).getPath();\n     }\n \n-    for (int i = startIndex; i < objectsList.size(); i++) {\n+    final Map<Boolean, List<URIStatus>> typeToStatus = keys.stream()\n+        .collect(Collectors.groupingBy((status) -> status.isFolder()));\n+    final List<URIStatus> objectsList = typeToStatus.getOrDefault(false, new ArrayList<>());\n+    final List<URIStatus> prefixList = typeToStatus.getOrDefault(true, new ArrayList<>());\n+\n+    mContents = new ArrayList<>();\n+    for (int i = 0; i < objectsList.size(); i++) {\n       URIStatus status = objectsList.get(i);\n-      String objectKey = status.getPath().substring(mName.length() + 1);\n-      if (mKeyCount >= mMaxKeys) {\n-        mIsTruncated = true;\n-        mNextContinuationToken = objectKey;\n-        return;\n-      }\n-      if (mContinuationToken != null && objectKey.compareTo(mContinuationToken) < 0) {\n-        continue;\n-      }\n-      if (mPrefix != null && !objectKey.startsWith(mPrefix)) {\n-        continue;\n-      }\n-      // TODO(chaomin): set ETag once there's a way to get MD5 hash of an Alluxio file.\n-      // TODO(chaomin): construct the response with CommonPrefixes when delimiter support is added.\n+\n       mContents.add(new Content(\n-          status.getPath().substring(mName.length() + 1),\n+          status.getPath().substring(mName.length() + 2),\n           S3RestUtils.toS3Date(status.getLastModificationTimeMs()),\n-          S3Constants.S3_EMPTY_ETAG,\n-          String.valueOf(status.getLength()),\n-          S3Constants.S3_STANDARD_STORAGE_CLASS));\n-      mKeyCount++;\n+          String.valueOf(status.getLength())\n+      ));\n+    }\n+\n+    final ArrayList<String> commonPrefixes = new ArrayList<>();\n+    for (int i = 0; i < prefixList.size(); i++) {", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0NjM1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r552146359", "bodyText": "Can we do this here too?", "author": "gpang", "createdAt": "2021-01-05T19:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNDA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNDU2Nw==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551624567", "bodyText": "It looks like we group by if each status is a folder or not a folder, then process each group. Instead, can we just loop over each of these status once, and just check if it is a folder or not, and do the appropriate thing? It seems like we are looping over this list (and creating lists) more times than necessary.", "author": "gpang", "createdAt": "2021-01-04T23:16:09Z", "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/ListBucketResult.java", "diffHunk": "@@ -71,58 +64,56 @@ public ListBucketResult() {}\n    * Creates an {@link ListBucketResult}.\n    *\n    * @param bucketName the bucket name\n-   * @param objectsList a list of {@link URIStatus}, representing the objects\n+   * @param children a list of {@link URIStatus}, representing the objects and common prefixes\n    * @param options the list bucket options\n    */\n   public ListBucketResult(\n-      String bucketName, List<URIStatus> objectsList, ListBucketOptions options) {\n+      String bucketName, List<URIStatus> children, ListBucketOptions options) {\n     mName = bucketName;\n+    mMaxKeys = DEFAULT_MAX_KEYS;\n+\n     mPrefix = options.getPrefix();\n-    mKeyCount = 0;\n-    if (options.getMaxKeys() != null) {\n-      mMaxKeys = Integer.parseInt(options.getMaxKeys());\n-    }\n-    mContents = new ArrayList<>();\n-    mContinuationToken = options.getContinuationToken();\n-\n-    Collections.sort(objectsList, new URIStatusComparator());\n-\n-    int startIndex = 0;\n-    if (options.getContinuationToken() != null) {\n-      URIStatus tokenStatus = new URIStatus(new FileInfo().setPath(\n-          mName + AlluxioURI.SEPARATOR + mContinuationToken));\n-      startIndex = Collections.binarySearch(objectsList, tokenStatus, new URIStatusComparator());\n-      if (startIndex < 0) {\n-        // If continuation token does not exist in the object list, find the first element which is\n-        // greater than the token.\n-        startIndex = (-1) * startIndex - 1;\n-      }\n+    mMarker = options.getMarker();\n+\n+    Collections.sort(children, new URIStatusComparator());\n+\n+    final List<URIStatus> keys = children.stream()\n+        .filter((status) -> status.getPath().compareTo(mMarker) > 0)\n+        .limit(mMaxKeys)\n+        .collect(Collectors.toList());\n+\n+    mKeyCount = keys.size();\n+    mIsTruncated = mKeyCount == mMaxKeys;\n+\n+    if (mIsTruncated) {\n+      mNextMarker = keys.get(keys.size() - 1).getPath();\n     }\n \n-    for (int i = startIndex; i < objectsList.size(); i++) {\n+    final Map<Boolean, List<URIStatus>> typeToStatus = keys.stream()", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzMzM4NA==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551633384", "bodyText": "I thought the code was a lot cleaner when i do it this way because the things that get done for folder vs files are very different.", "author": "bradyoo", "createdAt": "2021-01-04T23:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNDU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNzE0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551637147", "bodyText": "I just don't think this is much of a big deal because it's only 2 extra lists that is getting created.", "author": "bradyoo", "createdAt": "2021-01-04T23:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNDU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNDkwNw==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551624907", "bodyText": "why are all of these tests removed?", "author": "gpang", "createdAt": "2021-01-04T23:17:03Z", "path": "tests/src/test/java/alluxio/client/rest/S3ClientRestApiTest.java", "diffHunk": "@@ -353,228 +331,6 @@ public void putObjectWithNoMD5() throws Exception {\n     new TestCase(mHostname, mPort, uri, NO_PARAMS, HttpMethod.PUT, null, options).run();\n   }\n \n-  @Test\n-  public void getBucket() throws Exception {\n-    final String bucket = \"bucket-to-get\";\n-    createBucketRestCall(bucket);\n-\n-    AlluxioURI uri = new AlluxioURI(AlluxioURI.SEPARATOR + bucket + AlluxioURI.SEPARATOR);\n-    // Verify the directory is created for the new bucket.\n-    Assert.assertTrue(mFileSystemMaster\n-        .listStatus(uri, ListStatusContext.defaults()).isEmpty());\n-\n-    // Prepare a bucket with direct child objects and objects within sub directories:\n-    // - /file1\n-    // - /file2\n-    // - /dir1/subdir1/file3\n-    // - /dir2/\n-    AlluxioURI file1 = new AlluxioURI(uri.getPath() + \"/file1\");\n-    mFileSystemMaster.createFile(file1, CreateFileContext.defaults());\n-    AlluxioURI file2 = new AlluxioURI(uri.getPath() + \"/file2\");\n-    mFileSystemMaster.createFile(file2, CreateFileContext.defaults());\n-    AlluxioURI dir1 = new AlluxioURI(uri.getPath() + \"/dir1\");\n-    mFileSystemMaster.createDirectory(dir1, CreateDirectoryContext.defaults());\n-    AlluxioURI dir2 = new AlluxioURI(uri.getPath() + \"/dir2\");\n-    mFileSystemMaster.createDirectory(dir2, CreateDirectoryContext.defaults());\n-    AlluxioURI subdir1 = new AlluxioURI(uri.getPath() + \"/dir1/subdir1\");\n-    mFileSystemMaster.createDirectory(subdir1, CreateDirectoryContext.defaults());\n-    AlluxioURI file3 = new AlluxioURI(subdir1.getPath() + \"/file3\");\n-    mFileSystemMaster.createFile(file3, CreateFileContext.defaults());\n-\n-    // Expected result.\n-    List<URIStatus> objectsList = new ArrayList<>();\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file1, GetStatusContext.defaults())));\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file2, GetStatusContext.defaults())));\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file3, GetStatusContext.defaults())));\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(dir2, GetStatusContext.defaults())));\n-    ListBucketResult expected = new ListBucketResult(\n-        AlluxioURI.SEPARATOR + bucket, objectsList, ListBucketOptions.defaults());\n-\n-    // Verify op with no param\n-    new TestCase(mHostname, mPort, S3_SERVICE_PREFIX + AlluxioURI.SEPARATOR + bucket, NO_PARAMS,\n-        HttpMethod.GET, expected,\n-        TestCaseOptions.defaults().setContentType(TestCaseOptions.XML_CONTENT_TYPE)).run();\n-  }\n-\n-  @Test\n-  public void getBucketWithPrefix() throws Exception {\n-    final String bucket = \"bucket-to-get-with-prefix\";\n-    createBucketRestCall(bucket);\n-\n-    AlluxioURI uri = new AlluxioURI(AlluxioURI.SEPARATOR + bucket + AlluxioURI.SEPARATOR);\n-    // Verify the directory is created for the new bucket.\n-    Assert.assertTrue(mFileSystemMaster\n-        .listStatus(uri, ListStatusContext.defaults()).isEmpty());\n-\n-    // Prepare a bucket with direct child objects and objects within sub directories:\n-    // - /file1\n-    // - /file2\n-    // - /dir1/subdir1/file3\n-    // - /dir2/\n-    AlluxioURI file1 = new AlluxioURI(uri.getPath() + \"/file1\");\n-    mFileSystemMaster.createFile(file1, CreateFileContext.defaults());\n-    AlluxioURI file2 = new AlluxioURI(uri.getPath() + \"/file2\");\n-    mFileSystemMaster.createFile(file2, CreateFileContext.defaults());\n-    AlluxioURI dir1 = new AlluxioURI(uri.getPath() + \"/dir1\");\n-    mFileSystemMaster.createDirectory(dir1, CreateDirectoryContext.defaults());\n-    AlluxioURI dir2 = new AlluxioURI(uri.getPath() + \"/dir2\");\n-    mFileSystemMaster.createDirectory(dir2, CreateDirectoryContext.defaults());\n-    AlluxioURI subdir1 = new AlluxioURI(uri.getPath() + \"/dir1/subdir1\");\n-    mFileSystemMaster.createDirectory(subdir1, CreateDirectoryContext.defaults());\n-    AlluxioURI file3 = new AlluxioURI(subdir1.getPath() + \"/file3\");\n-    mFileSystemMaster.createFile(file3, CreateFileContext.defaults());\n-\n-    // Verify op with prefix\n-    final String prefix = \"dir\";\n-    Map<String, String> prefixParam = new HashMap<>();\n-    prefixParam.put(\"prefix\", prefix);\n-    List<URIStatus> filteredObjectsList = new ArrayList<>();\n-    filteredObjectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file3, GetStatusContext.defaults())));\n-    filteredObjectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(dir2, GetStatusContext.defaults())));\n-    ListBucketResult expected = new ListBucketResult(AlluxioURI.SEPARATOR + bucket,\n-        filteredObjectsList, ListBucketOptions.defaults().setPrefix(prefix));\n-    new TestCase(mHostname, mPort, S3_SERVICE_PREFIX + AlluxioURI.SEPARATOR + bucket,\n-        prefixParam, HttpMethod.GET, expected,\n-        TestCaseOptions.defaults().setContentType(TestCaseOptions.XML_CONTENT_TYPE)).run();\n-  }\n-\n-  @Test\n-  public void getBucketWithMaxKeys() throws Exception {\n-    final String bucket = \"bucket-to-get-with-max-keys\";\n-    createBucketRestCall(bucket);\n-\n-    AlluxioURI uri = new AlluxioURI(AlluxioURI.SEPARATOR + bucket + AlluxioURI.SEPARATOR);\n-    // Verify the directory is created for the new bucket.\n-    Assert.assertTrue(mFileSystemMaster\n-        .listStatus(uri, ListStatusContext.defaults()).isEmpty());\n-\n-    // Prepare a bucket with two objects:\n-    // - /file1\n-    // - /file2\n-    AlluxioURI file1 = new AlluxioURI(uri.getPath() + \"/file1\");\n-    mFileSystemMaster.createFile(file1, CreateFileContext.defaults());\n-    AlluxioURI file2 = new AlluxioURI(uri.getPath() + \"/file2\");\n-    mFileSystemMaster.createFile(file2, CreateFileContext.defaults());\n-\n-    // Expected result, with max-keys = 1.\n-    List<URIStatus> objectsList = new ArrayList<>();\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file1, GetStatusContext.defaults())));\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file2, GetStatusContext.defaults())));\n-    ListBucketResult expected = new ListBucketResult(\n-        AlluxioURI.SEPARATOR + bucket, objectsList, ListBucketOptions.defaults().setMaxKeys(\"1\"));\n-\n-    // Verify\n-    HashMap<String, String> maxKeysParam = new HashMap<>();\n-    maxKeysParam.put(\"max-keys\", \"1\");\n-    new TestCase(mHostname, mPort, S3_SERVICE_PREFIX + AlluxioURI.SEPARATOR + bucket, maxKeysParam,\n-        HttpMethod.GET, expected,\n-        TestCaseOptions.defaults().setContentType(TestCaseOptions.XML_CONTENT_TYPE)).run();\n-  }\n-\n-  @Test\n-  public void getBucketWithMaxKeysAndContinuationToken() throws Exception {\n-    final String bucket = \"bucket-to-get-with-max-keys-and-token\";\n-    createBucketRestCall(bucket);\n-\n-    AlluxioURI uri = new AlluxioURI(AlluxioURI.SEPARATOR + bucket + AlluxioURI.SEPARATOR);\n-    // Verify the directory is created for the new bucket.\n-    Assert.assertTrue(mFileSystemMaster\n-        .listStatus(uri, ListStatusContext.defaults()).isEmpty());\n-\n-    // Prepare a bucket with two objects:\n-    // - /file1\n-    // - /file2\n-    AlluxioURI file1 = new AlluxioURI(uri.getPath() + \"/file1\");\n-    mFileSystemMaster.createFile(file1, CreateFileContext.defaults());\n-    AlluxioURI file2 = new AlluxioURI(uri.getPath() + \"/file2\");\n-    mFileSystemMaster.createFile(file2, CreateFileContext.defaults());\n-\n-    // Expected result, with max-keys = 1.\n-    List<URIStatus> objectsList = new ArrayList<>();\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file1, GetStatusContext.defaults())));\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file2, GetStatusContext.defaults())));\n-    String maxKeys = \"1\";\n-    String continuationToken = file1.getPath();\n-    ListBucketResult expected = new ListBucketResult(\n-        AlluxioURI.SEPARATOR + bucket, objectsList,\n-        ListBucketOptions.defaults().setMaxKeys(\"1\").setContinuationToken(continuationToken));\n-\n-    // Verify\n-    HashMap<String, String> maxKeysParam = new HashMap<>();\n-    maxKeysParam.put(\"max-keys\", maxKeys);\n-    maxKeysParam.put(\"continuation-token\", continuationToken);\n-    new TestCase(mHostname, mPort, S3_SERVICE_PREFIX + AlluxioURI.SEPARATOR + bucket, maxKeysParam,\n-        HttpMethod.GET, expected,\n-        TestCaseOptions.defaults().setContentType(TestCaseOptions.XML_CONTENT_TYPE)).run();\n-  }\n-\n-  @Test\n-  public void getBucketWithNonExistingContinuationToken() throws Exception {\n-    final String bucket = \"bucket-to-get-with-non-existing-token\";\n-    createBucketRestCall(bucket);\n-\n-    AlluxioURI uri = new AlluxioURI(AlluxioURI.SEPARATOR + bucket + AlluxioURI.SEPARATOR);\n-    // Verify the directory is created for the new bucket.\n-    Assert.assertTrue(mFileSystemMaster\n-        .listStatus(uri, ListStatusContext.defaults()).isEmpty());\n-\n-    // Prepare a bucket with two objects:\n-    // - /file1\n-    // - /file2\n-    AlluxioURI file1 = new AlluxioURI(uri.getPath() + \"/file1\");\n-    mFileSystemMaster.createFile(file1, CreateFileContext.defaults());\n-    AlluxioURI file2 = new AlluxioURI(uri.getPath() + \"/file2\");\n-    mFileSystemMaster.createFile(file2, CreateFileContext.defaults());\n-\n-    // Expected result, with max-keys = 1.\n-    List<URIStatus> objectsList = new ArrayList<>();\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file1, GetStatusContext.defaults())));\n-    objectsList.add(new URIStatus(\n-        mFileSystemMaster.getFileInfo(file2, GetStatusContext.defaults())));\n-    String continuationToken = file1.getPath() + \"random-tail\";\n-    ListBucketResult expected = new ListBucketResult(\n-        AlluxioURI.SEPARATOR + bucket, objectsList,\n-        ListBucketOptions.defaults().setContinuationToken(continuationToken));\n-\n-    // Verify\n-    HashMap<String, String> maxKeysParam = new HashMap<>();\n-    maxKeysParam.put(\"continuation-token\", continuationToken);\n-    new TestCase(mHostname, mPort, S3_SERVICE_PREFIX + AlluxioURI.SEPARATOR + bucket, maxKeysParam,\n-        HttpMethod.GET, expected,\n-        TestCaseOptions.defaults().setContentType(TestCaseOptions.XML_CONTENT_TYPE)).run();\n-  }\n-\n-  @Test\n-  public void listEmptyBucket() throws Exception {", "originalCommit": "82360a360ed0e09c6728308f16702ab62f33ab08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzMDg0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/12665#discussion_r551630847", "bodyText": "Almost none of the tests were correct and as noted in standup. I'm taking the time to write new tests for all of the behaviors here in the next PR.", "author": "bradyoo", "createdAt": "2021-01-04T23:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYyNDkwNw=="}], "type": "inlineReview"}, {"oid": "ac1238a4c3e3b480e6c273e698c363befba508aa", "url": "https://github.com/Alluxio/alluxio/commit/ac1238a4c3e3b480e6c273e698c363befba508aa", "message": "feedback", "committedDate": "2021-01-04T23:52:31Z", "type": "commit"}, {"oid": "8b0edc80572c9fb3a8f9c43a551de0a6a3509d1a", "url": "https://github.com/Alluxio/alluxio/commit/8b0edc80572c9fb3a8f9c43a551de0a6a3509d1a", "message": "checkstyle + comments", "committedDate": "2021-01-05T17:06:49Z", "type": "commit"}, {"oid": "4a8885a0e35a4af632be2d515deccf046cfd5c6a", "url": "https://github.com/Alluxio/alluxio/commit/4a8885a0e35a4af632be2d515deccf046cfd5c6a", "message": "feedback", "committedDate": "2021-01-05T19:34:41Z", "type": "commit"}]}