{"pr_number": 11536, "pr_title": "Implement stress worker test", "pr_createdAt": "2020-06-09T22:54:55Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11536", "timeline": [{"oid": "306a0c651753cbb55cb4156ee87a3405c6b49c1b", "url": "https://github.com/Alluxio/alluxio/commit/306a0c651753cbb55cb4156ee87a3405c6b49c1b", "message": "[WIP] Add Stress worker test", "committedDate": "2020-06-09T22:51:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MDc1Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11536#discussion_r437770756", "bodyText": "This is a bit odd what's the use case for this?", "author": "bradyoo", "createdAt": "2020-06-09T23:08:01Z", "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "diffHunk": "@@ -66,12 +67,17 @@ public StressBenchDefinition() {\n \n     // sort copy of workers by hashcode\n     List<WorkerInfo> workerList = Lists.newArrayList(jobWorkerInfoList);\n-    workerList.sort(Comparator.comparingInt(w -> w.getAddress().hashCode()));\n+    workerList.sort(Comparator.comparing(w -> w.getAddress().getHost()));\n     // take the first subset, according to cluster limit\n     int clusterLimit = config.getClusterLimit();\n-    if (clusterLimit <= 0) {\n+    if (clusterLimit == 0) {\n       clusterLimit = workerList.size();\n     }\n+    if (clusterLimit < 0) {\n+      // if negative, reverse the list\n+      clusterLimit = -clusterLimit;\n+      Collections.reverse(workerList);", "originalCommit": "306a0c651753cbb55cb4156ee87a3405c6b49c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3Mzc4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11536#discussion_r438273787", "bodyText": "for worker tests, want to be able to partition the load generator nodes from the tested nodes. So, if we have M + N total workers, we can have the first M nodes all generate load, targeting the last N nodes, without overlap.", "author": "gpang", "createdAt": "2020-06-10T16:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MDc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NjQxMg==", "url": "https://github.com/Alluxio/alluxio/pull/11536#discussion_r437886412", "bodyText": "Is there a reason we don't use the default of 64m?", "author": "ZacBlanco", "createdAt": "2020-06-10T06:25:49Z", "path": "stress/common/src/main/java/alluxio/stress/worker/WorkerBenchParameters.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.worker;\n+\n+import alluxio.stress.Parameters;\n+\n+import com.beust.jcommander.DynamicParameter;\n+import com.beust.jcommander.Parameter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This holds all the parameters. All fields are public for easier json ser/de without all the\n+ * getters and setters.\n+ */\n+public final class WorkerBenchParameters extends Parameters {\n+  @Parameter(names = {\"--base\"},\n+      description = \"The base directory path URI to perform operations in\")\n+  @Parameters.PathDescription(aliasFieldName = \"mBaseAlias\")\n+  public String mBasePath = \"alluxio://localhost:19998/stress-worker-base\";\n+\n+  @Parameter(names = {\"--base-alias\"}, description = \"The alias for the base path, unused if empty\")\n+  @Parameters.KeylessDescription\n+  public String mBaseAlias = \"\";\n+\n+  @Parameter(names = {\"--tag\"}, description = \"A string to identify this run\")\n+  @Parameters.KeylessDescription\n+  public String mTag = \"\";\n+\n+  @Parameter(names = {\"--clients\"}, description = \"the number of fs clients to use\")\n+  public int mClients = 1;\n+\n+  @Parameter(names = {\"--threads\"}, description = \"the number of threads to use\")\n+  public int mThreads = 256;\n+\n+  @Parameter(names = {\"--duration\"},\n+      description = \"The length of time to run the benchmark. (1m, 10m, 60s, 10000ms, etc.)\")\n+  public String mDuration = \"30s\";\n+\n+  @Parameter(names = {\"--warmup\"},\n+      description = \"The length of time to warmup before recording measurements. (1m, 10m, 60s, \"\n+          + \"10000ms, etc.)\")\n+  public String mWarmup = \"30s\";\n+\n+  @Parameter(names = {\"--file-size\"},\n+      description = \"The files size for IO operations. (1g, 4g, etc.)\")\n+  public String mFileSize = \"128m\";\n+\n+  @Parameter(names = {\"--buffer-size\"},\n+      description = \"The buffer size for IO operations. (1k, 16k, etc.)\")\n+  public String mBufferSize = \"4k\";\n+\n+  @Parameter(names = {\"--block-size\"},\n+      description = \"The size of the file block. (16k, 64m, etc.)\")\n+  public String mBlockSize = \"32m\";", "originalCommit": "306a0c651753cbb55cb4156ee87a3405c6b49c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyODU0Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11536#discussion_r438328542", "bodyText": "There was no strong reason. I didn't want such a large file size, and I wanted 4+ blocks. But these have been largely arbitrary.", "author": "gpang", "createdAt": "2020-06-10T18:30:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NjQxMg=="}], "type": "inlineReview"}]}