{"pr_number": 10763, "pr_title": "Add positioned readable HDFS ufs input stream", "pr_createdAt": "2020-01-17T17:00:13Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10763", "timeline": [{"oid": "6d0c40e0a3c91873efd8e3a3e757652e672c8b10", "url": "https://github.com/Alluxio/alluxio/commit/6d0c40e0a3c91873efd8e3a3e757652e672c8b10", "message": "Add positioned readable HDFS ufs input stream", "committedDate": "2020-01-17T16:55:48Z", "type": "commit"}, {"oid": "a92b4df09b577659b3c90d12b21faf28cc1708f5", "url": "https://github.com/Alluxio/alluxio/commit/a92b4df09b577659b3c90d12b21faf28cc1708f5", "message": "Add newline", "committedDate": "2020-01-17T17:01:20Z", "type": "commit"}, {"oid": "5b6d23a50f1dc3b93b09e43401eefb883ed53ab5", "url": "https://github.com/Alluxio/alluxio/commit/5b6d23a50f1dc3b93b09e43401eefb883ed53ab5", "message": "Fix build", "committedDate": "2020-01-17T17:20:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0MjAzMw==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r368142033", "bodyText": "BufferUtils.byteToInt?", "author": "calvinjia", "createdAt": "2020-01-17T21:23:38Z", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);\n+    return available > 0 ? available : 0;\n+  }\n+\n+  @Override\n+  public long getPos() throws IOException {\n+    return mPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    byte[] buffer = new byte[1];\n+    int bytesRead = ((FSDataInputStream) in).read(mPos, buffer, 0, buffer.length);\n+    if (bytesRead > 0) {\n+      mPos += bytesRead;\n+    }\n+    return bytesRead < 0 ? bytesRead : (int) buffer[0];", "originalCommit": "5b6d23a50f1dc3b93b09e43401eefb883ed53ab5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "51ebc6194006819264ae4fe65917db2a83158bfa", "url": "https://github.com/Alluxio/alluxio/commit/51ebc6194006819264ae4fe65917db2a83158bfa", "message": "Address comment", "committedDate": "2020-01-21T20:58:07Z", "type": "commit"}, {"oid": "c96797092f107cfe3d5a17b14e460e82af5a7032", "url": "https://github.com/Alluxio/alluxio/commit/c96797092f107cfe3d5a17b14e460e82af5a7032", "message": "Make positioned read HDFS in stream the default", "committedDate": "2020-01-21T21:03:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTcwOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369251709", "bodyText": "Could you explain the logic here?", "author": "calvinjia", "createdAt": "2020-01-21T21:27:14Z", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);", "originalCommit": "c96797092f107cfe3d5a17b14e460e82af5a7032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2OTMwNg==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369269306", "bodyText": "Calling seek in this stream doesn't change the wrapped FSDataInputStream and the number of bytes remaining would never be negative", "author": "madanadit", "createdAt": "2020-01-21T22:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3MDk4MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369270981", "bodyText": "in.available + in.getPos = estimate of total bytes", "author": "madanadit", "createdAt": "2020-01-21T22:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NjU4Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369296583", "bodyText": "thx, fixed this method", "author": "madanadit", "createdAt": "2020-01-21T23:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MjgzMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369252831", "bodyText": "Is it valid to hit EOS here and return -1?", "author": "calvinjia", "createdAt": "2020-01-21T21:29:51Z", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);\n+    return available > 0 ? available : 0;\n+  }\n+\n+  @Override\n+  public long getPos() throws IOException {\n+    return mPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    byte[] buffer = new byte[1];\n+    int bytesRead = ((FSDataInputStream) in).read(mPos, buffer, 0, buffer.length);\n+    if (bytesRead > 0) {\n+      mPos += bytesRead;\n+      return BufferUtils.byteToInt(buffer[0]);\n+    }\n+    Preconditions.checkArgument(bytesRead != 0,\n+        \"Expected a non-zero value if end of stream has not been reached\");", "originalCommit": "c96797092f107cfe3d5a17b14e460e82af5a7032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2OTk5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369269996", "bodyText": "yes, -1 is valid return value for this method", "author": "madanadit", "createdAt": "2020-01-21T22:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MjgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MzE2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369253163", "bodyText": "Perhaps change this comment to say why positionedRead is better than seeking in some cases?", "author": "calvinjia", "createdAt": "2020-01-21T21:30:30Z", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "diffHunk": "@@ -563,13 +563,8 @@ public InputStream open(String path, OpenOptions options) throws IOException {\n     while (retryPolicy.attempt()) {\n       try {\n         FSDataInputStream inputStream = hdfs.open(new Path(path));\n-        try {\n-          inputStream.seek(options.getOffset());\n-        } catch (IOException e) {\n-          inputStream.close();\n-          throw e;\n-        }\n-        return new HdfsUnderFileInputStream(inputStream);\n+        // For remote HDFS, use positionedRead instead of seek", "originalCommit": "c96797092f107cfe3d5a17b14e460e82af5a7032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3MzUxNA==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369273514", "bodyText": "done", "author": "madanadit", "createdAt": "2020-01-21T22:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MzE2Mw=="}], "type": "inlineReview"}, {"oid": "b600770782fefa61522d23f41872fc7e0c85b0ea", "url": "https://github.com/Alluxio/alluxio/commit/b600770782fefa61522d23f41872fc7e0c85b0ea", "message": "Update comments", "committedDate": "2020-01-21T22:17:41Z", "type": "commit"}, {"oid": "4c45f2ed6bd50c851a39631bd9cf8fbd7f97f39f", "url": "https://github.com/Alluxio/alluxio/commit/4c45f2ed6bd50c851a39631bd9cf8fbd7f97f39f", "message": "Address comment", "committedDate": "2020-01-21T23:20:23Z", "type": "commit"}, {"oid": "d84fe85bfd07f7c476a4d32a1e077ecd0b8e8bf0", "url": "https://github.com/Alluxio/alluxio/commit/d84fe85bfd07f7c476a4d32a1e077ecd0b8e8bf0", "message": "Remove unused stream implementation", "committedDate": "2020-01-21T23:24:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMzQ4OA==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369303488", "bodyText": "Consider using this class's read(byte[]) method? Then we should only need to bookkeep mPos in one place", "author": "calvinjia", "createdAt": "2020-01-21T23:43:24Z", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    if (mPos != ((FSDataInputStream) in).getPos()) {\n+      return 0;\n+    }\n+    return in.available();\n+  }\n+\n+  @Override\n+  public long getPos() throws IOException {\n+    return mPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    byte[] buffer = new byte[1];\n+    int bytesRead = ((FSDataInputStream) in).read(mPos, buffer, 0, buffer.length);\n+    if (bytesRead > 0) {\n+      mPos += bytesRead;", "originalCommit": "d84fe85bfd07f7c476a4d32a1e077ecd0b8e8bf0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMyMDYwNw==", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369320607", "bodyText": "thx, done", "author": "madanadit", "createdAt": "2020-01-22T00:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMzQ4OA=="}], "type": "inlineReview"}, {"oid": "8e1abe3eed5ef5959aaab9f6f6bdee8c33170539", "url": "https://github.com/Alluxio/alluxio/commit/8e1abe3eed5ef5959aaab9f6f6bdee8c33170539", "message": "Address comment", "committedDate": "2020-01-22T00:46:15Z", "type": "commit"}]}