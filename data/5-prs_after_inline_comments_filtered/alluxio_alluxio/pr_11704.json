{"pr_number": 11704, "pr_title": "Optimize UFS access on missing paths", "pr_createdAt": "2020-07-01T23:15:18Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11704", "timeline": [{"oid": "e03a6fefc5395521cb1d3beedb834a176ad9e692", "url": "https://github.com/Alluxio/alluxio/commit/e03a6fefc5395521cb1d3beedb834a176ad9e692", "message": "Optimize UFS access on missing paths", "committedDate": "2020-07-01T23:14:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTM2NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11704#discussion_r449951365", "bodyText": "is this retried on caller site?", "author": "ggezer", "createdAt": "2020-07-06T02:06:20Z", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -152,15 +153,15 @@ public UfsStatus fetchStatusIfAbsent(AlluxioURI path, MountTable mountTable)\n       UnderFileSystem ufs = ufsResource.get();\n       UfsStatus ufsStatus = ufs.getStatus(ufsUri.toString());\n       if (ufsStatus == null) {\n-        return null;\n+        throw new FileNotFoundException(\"fetched status is null for: \" + ufsUri);\n       }\n       ufsStatus.setName(path.getName());\n       addStatus(path, ufsStatus);\n       return ufsStatus;\n     } catch (IllegalArgumentException | IOException e) {\n       LogUtils.warnWithException(LOG, \"Failed to fetch status for {}\", path, e);\n     }\n-    return null;\n+    throw new FileNotFoundException(\"Failed to fetch status of \" + ufsUri);", "originalCommit": "e03a6fefc5395521cb1d3beedb834a176ad9e692", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3MTgwNg==", "url": "https://github.com/Alluxio/alluxio/pull/11704#discussion_r450371806", "bodyText": "no", "author": "ZacBlanco", "createdAt": "2020-07-06T17:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTM2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTQ2NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11704#discussion_r449951465", "bodyText": "Can you replace these withExpectedException rule?", "author": "ggezer", "createdAt": "2020-07-06T02:06:52Z", "path": "core/server/master/src/test/java/alluxio/underfs/UfsStatusCacheTest.java", "diffHunk": "@@ -371,18 +372,26 @@ public void testFetchExistingSingleStatus() throws Exception {\n   @Test\n   public void testFetchSingleStatusNonExistingPath() throws Exception {\n     spyUfs();\n-    UfsStatus fetched = mCache.fetchStatusIfAbsent(new AlluxioURI(\"/testFile\"), mMountTable);\n+    try {\n+      UfsStatus fetched = mCache.fetchStatusIfAbsent(new AlluxioURI(\"/testFile\"), mMountTable);\n+      fail(\"Should have thrown FileNotFoundException\");", "originalCommit": "e03a6fefc5395521cb1d3beedb834a176ad9e692", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NzUxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11704#discussion_r450377515", "bodyText": "Using the ExpectedException rule I can't use Mockito.verify afterwards", "author": "ZacBlanco", "createdAt": "2020-07-06T17:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDA5NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11704#discussion_r450374095", "bodyText": "Will this exception be thrown to the client? If so we should make it more explanatory (ie. what does null status mean?)", "author": "calvinjia", "createdAt": "2020-07-06T17:28:39Z", "path": "core/server/master/src/main/java/alluxio/underfs/UfsStatusCache.java", "diffHunk": "@@ -152,15 +153,15 @@ public UfsStatus fetchStatusIfAbsent(AlluxioURI path, MountTable mountTable)\n       UnderFileSystem ufs = ufsResource.get();\n       UfsStatus ufsStatus = ufs.getStatus(ufsUri.toString());\n       if (ufsStatus == null) {\n-        return null;\n+        throw new FileNotFoundException(\"fetched status is null for: \" + ufsUri);", "originalCommit": "e03a6fefc5395521cb1d3beedb834a176ad9e692", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NTgyMw==", "url": "https://github.com/Alluxio/alluxio/pull/11704#discussion_r450375823", "bodyText": "No, this is not returned to the client", "author": "ZacBlanco", "createdAt": "2020-07-06T17:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNzA4MA==", "url": "https://github.com/Alluxio/alluxio/pull/11704#discussion_r451007080", "bodyText": "Just want to double check, I don't see FileNotFoundException being caught by the callers? ie. processSyncPath\nIs it handled in InodeSyncStream#loadMetadata (~line 695)?", "author": "calvinjia", "createdAt": "2020-07-07T16:52:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MzY2NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11704#discussion_r451043665", "bodyText": "FileNotFoundException extends from IOException which is in the method definition of the caller loadMetadataForPath as a part of it's throws declarations.\nIOException is then caught by the try-catch block on line 422 in processSyncPath or if the root path is missing, then it is caught in the handler on line 300", "author": "ZacBlanco", "createdAt": "2020-07-07T17:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDA5NQ=="}], "type": "inlineReview"}, {"oid": "41eeea029ed5bce469ad6a1f9951c2d7fd0d0ce4", "url": "https://github.com/Alluxio/alluxio/commit/41eeea029ed5bce469ad6a1f9951c2d7fd0d0ce4", "message": "Remove optimizations", "committedDate": "2020-07-06T17:38:56Z", "type": "commit"}]}