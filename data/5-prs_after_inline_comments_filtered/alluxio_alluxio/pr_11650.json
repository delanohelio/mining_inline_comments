{"pr_number": 11650, "pr_title": "Refactor stream reader/writer tracking", "pr_createdAt": "2020-06-26T00:15:57Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11650", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNjU2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r445906562", "bodyText": "can we encapsulate this into some kind of object so that we can keep the open/close messages consistent?", "author": "ZacBlanco", "createdAt": "2020-06-26T00:22:33Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/management/DefaultStoreLoadTracker.java", "diffHunk": "@@ -96,6 +101,8 @@ public void writerClosed(BlockWriter writer, BlockStoreLocation location) {\n    * Used to activate stream reader/writer for load tracking.\n    */\n   private void streamOpened(Object stream, BlockStoreLocation location) {\n+    LOG.debug(\"Stream opened. Type: {}, Id: {}, Location: {}\",\n+        stream.getClass().getSimpleName(), System.identityHashCode(stream), location);", "originalCommit": "222159dcdb3d834202a46f86e259cb393acde6d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3aeae322bdbef3c077cc5746b55b0cfd7c8e31d9", "url": "https://github.com/Alluxio/alluxio/commit/3aeae322bdbef3c077cc5746b55b0cfd7c8e31d9", "message": "Refactor block reader/writer tracking", "committedDate": "2020-06-26T00:47:11Z", "type": "commit"}, {"oid": "3aeae322bdbef3c077cc5746b55b0cfd7c8e31d9", "url": "https://github.com/Alluxio/alluxio/commit/3aeae322bdbef3c077cc5746b55b0cfd7c8e31d9", "message": "Refactor block reader/writer tracking", "committedDate": "2020-06-26T00:47:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NDMyOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r445974329", "bodyText": "Do the BlockClientListener implementations implement hashCode and equals?", "author": "ZacBlanco", "createdAt": "2020-06-26T05:26:53Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/io/BlockStreamTracker.java", "diffHunk": "@@ -21,14 +21,14 @@\n  */\n public class BlockStreamTracker {\n   /** List of listeners for this tracker. */\n-  private static Set<BlockStreamListener> sListeners = new ConcurrentHashSet<>();\n+  private static Set<BlockClientListener> sListeners = new ConcurrentHashSet<>();", "originalCommit": "3aeae322bdbef3c077cc5746b55b0cfd7c8e31d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NTQyMA==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r445985420", "bodyText": "It doesn't and there is only 1 registrar.\nChanged it to a synchronized list anyways.", "author": "ggezer", "createdAt": "2020-06-26T06:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NDMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAwNDc1MA==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r446004750", "bodyText": "won't adding/removing be slow then? Under heavy load we'd have to iterate over at minimum, the current number of concurrent block requests. With current defaults that's 3k (2k reads, 1k writes)", "author": "ZacBlanco", "createdAt": "2020-06-26T07:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NDMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NzQ5NA==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r446357494", "bodyText": "there is only 1 registrar.", "author": "ggezer", "createdAt": "2020-06-26T18:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NDMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NzgyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r446357825", "bodyText": "and current defaults are not sane.", "author": "ggezer", "createdAt": "2020-06-26T18:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NDMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MDMxNw==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r446360317", "bodyText": "in other words, if this causes an i/o bottleneck then it's a good bottleneck.", "author": "ggezer", "createdAt": "2020-06-26T19:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NDMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MjM3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r446362379", "bodyText": "Changed it to cow list anyway.", "author": "ggezer", "createdAt": "2020-06-26T19:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NDMyOQ=="}], "type": "inlineReview"}, {"oid": "cf99d6f10c3d6fa381413742c2b56c18f4cf1db0", "url": "https://github.com/Alluxio/alluxio/commit/cf99d6f10c3d6fa381413742c2b56c18f4cf1db0", "message": "fix listener registry", "committedDate": "2020-06-26T06:07:08Z", "type": "commit"}, {"oid": "6029d6bf0745dc7887a36324462f67e244ecac50", "url": "https://github.com/Alluxio/alluxio/commit/6029d6bf0745dc7887a36324462f67e244ecac50", "message": "fix style", "committedDate": "2020-06-26T07:09:58Z", "type": "commit"}, {"oid": "7cc6c317009a413f9f240dfa57c9655fd35b879e", "url": "https://github.com/Alluxio/alluxio/commit/7cc6c317009a413f9f240dfa57c9655fd35b879e", "message": "Extend more block clients", "committedDate": "2020-06-26T18:45:50Z", "type": "commit"}, {"oid": "5bfa723351ec5b77dccf935aad4b44a245ec4567", "url": "https://github.com/Alluxio/alluxio/commit/5bfa723351ec5b77dccf935aad4b44a245ec4567", "message": "use cow list", "committedDate": "2020-06-26T19:09:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMjM0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r448012343", "bodyText": "I think the code would be cleaner if BlockReader and BlockWriter were an abstract classes which extended AbstractBlockClient so that is wouldn't require both an extends and implements here. Then we could just have the default constructor for the Reader/writer set its type to READER/WRITER and you wouldn't need super(READER)/super(WRITER) everywhere since it would be taken care of by the class def extending BlockReader or BlockWriter", "author": "ZacBlanco", "createdAt": "2020-06-30T22:22:27Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/RemoteBlockReader.java", "diffHunk": "@@ -29,7 +30,7 @@\n /**\n  * Reads a block from a remote worker node. This should only be used for reading entire blocks.\n  */\n-public class RemoteBlockReader implements BlockReader {\n+public class RemoteBlockReader extends AbstractBlockClient implements BlockReader {", "originalCommit": "5bfa723351ec5b77dccf935aad4b44a245ec4567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NTA1NA==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r448545054", "bodyText": "I didn't want to change the existing class names.\nHowever, I think it's OK to make them abstract without stating in their class name...", "author": "ggezer", "createdAt": "2020-07-01T18:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMjM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMzQ1OA==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r448013458", "bodyText": "I would prefer using AutoCloseable unless you think there is a reason we shouldn't? It will make these all compatible with the try-with-resources pattern", "author": "ZacBlanco", "createdAt": "2020-06-30T22:25:28Z", "path": "core/common/src/main/java/alluxio/worker/block/io/BlockClient.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.worker.block.io;\n+\n+import java.io.Closeable;\n+\n+/**\n+ * Base interface for block reader/writers.\n+ */\n+public interface BlockClient extends Closeable {", "originalCommit": "5bfa723351ec5b77dccf935aad4b44a245ec4567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MDIyNA==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r448540224", "bodyText": "Closeable is also an AutoCloseable. So it should be fine to use it in try-with-resources right?", "author": "ggezer", "createdAt": "2020-07-01T18:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMzQ1OA=="}], "type": "inlineReview"}, {"oid": "854a15ebc15bb31f7ed63d6f55ded57a3d63c812", "url": "https://github.com/Alluxio/alluxio/commit/854a15ebc15bb31f7ed63d6f55ded57a3d63c812", "message": "Change class composition", "committedDate": "2020-07-01T18:37:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MzkzOA==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r448563938", "bodyText": "this should be final?", "author": "ZacBlanco", "createdAt": "2020-07-01T19:10:54Z", "path": "core/common/src/main/java/alluxio/worker/block/io/BlockClient.java", "diffHunk": "@@ -11,10 +11,57 @@\n \n package alluxio.worker.block.io;\n \n+import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n- * Base interface for block reader/writers.\n+ * Provides basic tracking and representation for block reader/writer clients.\n  */\n-public interface BlockClient extends Closeable {\n+public abstract class BlockClient implements Closeable {\n+  private static final Logger LOG = LoggerFactory.getLogger(BlockClient.class);\n+\n+  /** Used to keep unique client ids. */\n+  private static AtomicInteger sNextClientId = new AtomicInteger(0);\n+\n+  /** Internal client id. */\n+  private int mClientId;", "originalCommit": "854a15ebc15bb31f7ed63d6f55ded57a3d63c812", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2Mzk4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r448563986", "bodyText": "This should be final?", "author": "ZacBlanco", "createdAt": "2020-07-01T19:11:00Z", "path": "core/common/src/main/java/alluxio/worker/block/io/BlockClient.java", "diffHunk": "@@ -11,10 +11,57 @@\n \n package alluxio.worker.block.io;\n \n+import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n- * Base interface for block reader/writers.\n+ * Provides basic tracking and representation for block reader/writer clients.\n  */\n-public interface BlockClient extends Closeable {\n+public abstract class BlockClient implements Closeable {\n+  private static final Logger LOG = LoggerFactory.getLogger(BlockClient.class);\n+\n+  /** Used to keep unique client ids. */\n+  private static AtomicInteger sNextClientId = new AtomicInteger(0);\n+\n+  /** Internal client id. */\n+  private int mClientId;\n+  /** the client type. */\n+  private Type mClientType;", "originalCommit": "854a15ebc15bb31f7ed63d6f55ded57a3d63c812", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NDE3OA==", "url": "https://github.com/Alluxio/alluxio/pull/11650#discussion_r448564178", "bodyText": "I think this should also be final since it's the reference to the AtomicInteger object", "author": "ZacBlanco", "createdAt": "2020-07-01T19:11:19Z", "path": "core/common/src/main/java/alluxio/worker/block/io/BlockClient.java", "diffHunk": "@@ -11,10 +11,57 @@\n \n package alluxio.worker.block.io;\n \n+import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n- * Base interface for block reader/writers.\n+ * Provides basic tracking and representation for block reader/writer clients.\n  */\n-public interface BlockClient extends Closeable {\n+public abstract class BlockClient implements Closeable {\n+  private static final Logger LOG = LoggerFactory.getLogger(BlockClient.class);\n+\n+  /** Used to keep unique client ids. */\n+  private static AtomicInteger sNextClientId = new AtomicInteger(0);", "originalCommit": "854a15ebc15bb31f7ed63d6f55ded57a3d63c812", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "65b2d803effc46ca0d44d47ab1eb1411f9f2c9d3", "url": "https://github.com/Alluxio/alluxio/commit/65b2d803effc46ca0d44d47ab1eb1411f9f2c9d3", "message": "minor fix", "committedDate": "2020-07-01T21:54:16Z", "type": "commit"}, {"oid": "09af0e3e659a8d0dca4802e4b395256c81a88ae9", "url": "https://github.com/Alluxio/alluxio/commit/09af0e3e659a8d0dca4802e4b395256c81a88ae9", "message": "fix style", "committedDate": "2020-07-01T22:28:19Z", "type": "commit"}]}