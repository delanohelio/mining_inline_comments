{"pr_number": 10970, "pr_title": "Fix potential resource leak issues in LocalPageStore", "pr_createdAt": "2020-02-21T17:36:06Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10970", "timeline": [{"oid": "af969558636dd767248bb815a57642a4a0226fbb", "url": "https://github.com/Alluxio/alluxio/commit/af969558636dd767248bb815a57642a4a0226fbb", "message": "Close Files.walk stream resource in LocalPageStore", "committedDate": "2020-02-21T17:34:54Z", "type": "commit"}, {"oid": "523d6d2210af40c2eb230b2f9ab510158a04de75", "url": "https://github.com/Alluxio/alluxio/commit/523d6d2210af40c2eb230b2f9ab510158a04de75", "message": "Make the channel returned by LocalPageStore.get also close the input stream on close", "committedDate": "2020-02-21T17:54:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NTA0OA==", "url": "https://github.com/Alluxio/alluxio/pull/10970#discussion_r382765048", "bodyText": "Make a vanilla delegating file channel and then a subclass that does the closing? This also will fix the strangeness of having the delegating filechannel require an inputstream in the constructor.", "author": "calvinjia", "createdAt": "2020-02-21T19:29:44Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/DelegatingFileChannel.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.store;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+\n+/**\n+ * A delegating {@link FileChannel} that also closes the FileInputStream as well.\n+ */\n+public class DelegatingFileChannel extends FileChannel {", "originalCommit": "523d6d2210af40c2eb230b2f9ab510158a04de75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NTMxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10970#discussion_r382765315", "bodyText": "Do you mind doing the filter outside of the try? (See #getPages)", "author": "calvinjia", "createdAt": "2020-02-21T19:30:23Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -69,9 +69,12 @@ public LocalPageStore(LocalPageStoreOptions options) throws IOException {\n     mPagePattern = Pattern.compile(\n         String.format(\"%s/%d/(\\\\d+)/(\\\\d+)\", Pattern.quote(rootDir.toString()), mPageSize));\n     try {\n-      boolean invalidPage = Files.exists(rootDir) && Files.walk(rootDir)\n-          .filter(Files::isRegularFile)\n-          .anyMatch(path -> {\n+\n+      boolean invalidPage = false;\n+\n+      if (Files.exists(rootDir)) {\n+        try (Stream<Path> pathStream = Files.walk(rootDir).filter(Files::isRegularFile)) {", "originalCommit": "523d6d2210af40c2eb230b2f9ab510158a04de75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32934e9b28fc0b83efcfc64b68ce872e55b986a0", "url": "https://github.com/Alluxio/alluxio/commit/32934e9b28fc0b83efcfc64b68ce872e55b986a0", "message": "Feedback + Undo DelegatingFileChannel changes", "committedDate": "2020-02-21T20:53:59Z", "type": "commit"}, {"oid": "0acdb8ff0d1dce44287fe3c8640a03f1dc439a99", "url": "https://github.com/Alluxio/alluxio/commit/0acdb8ff0d1dce44287fe3c8640a03f1dc439a99", "message": "fix formatting", "committedDate": "2020-02-21T21:52:57Z", "type": "commit"}]}