{"pr_number": 9006, "pr_title": "Issue #6722: new check JavadocMissingLeadingAsteriskCheck", "pr_createdAt": "2020-11-21T12:20:18Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/9006", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NDI1MA==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528244250", "bodyText": "Leading", "author": "romani", "createdAt": "2020-11-21T21:21:46Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,204 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * </p>\n+ * <p>\n+ * The following Javadoc comments are valid:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * No asterisks on first and last line.\n+ *  *&#47;\n+ * class Foo {}\n+ * &#47;** **\n+ *  * Some asterisks on first and last line.\n+ *  * *&#47;\n+ * class Bar {}\n+ * </pre>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations if the\n+ * Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingLeadingAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * Some description here. // OK\n+ *    Another line of description. // violation, javadoc has lines without leading asterisk.\n+ *  *&#47;\n+ * public class Test {\n+ *    &#47;** // violation on next line, javadoc has lines without leading asterisk.\n+ *\n+ *     * Some description here.\n+ *     *&#47;\n+ *   public void test() {}\n+ *\n+ *   &#47;** Some description here. *&#47; // OK\n+ *   public void test1() {}\n+ *\n+ *   &#47;** // OK\n+ *     * Some description here.\n+ *     * Another line of description.\n+ *     *&#47;\n+ *   public void test2() {}\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.missing.asterisk}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.38\n+ */\n+@StatelessCheck\n+public class JavadocMissingLeadingAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_MISSING_ASTERISK = \"javadoc.missing.asterisk\";\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.NEWLINE,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getAcceptableJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        DetailNode nextSibling = getNextNode(detailNode);\n+\n+        // Till https://github.com/checkstyle/checkstyle/issues/9005\n+        // Due to bug in the Javadoc parser there may be phantom description nodes.\n+        while (nextSibling.getType() == JavadocTokenTypes.DESCRIPTION\n+                || nextSibling.getType() == JavadocTokenTypes.WS) {\n+            nextSibling = getNextNode(nextSibling);\n+        }\n+\n+        if (!isLoadingAsterisk(nextSibling) && !isLastLine(nextSibling)) {\n+            log(nextSibling.getLineNumber(), MSG_MISSING_ASTERISK);\n+        }\n+    }\n+\n+    /**\n+     * Gets next node in the ast (sibling or parent sibling for the last node).\n+     *\n+     * @param detailNode the node to process\n+     * @return next node.\n+     */\n+    private static DetailNode getNextNode(DetailNode detailNode) {\n+        DetailNode node = JavadocUtil.getFirstChild(detailNode);\n+        if (node == null) {\n+            node = JavadocUtil.getNextSibling(detailNode);\n+            if (node == null) {\n+                DetailNode parent = detailNode;\n+                do {\n+                    parent = parent.getParent();\n+                    node = JavadocUtil.getNextSibling(parent);\n+                } while (node == null);\n+            }\n+        }\n+        return node;\n+    }\n+\n+    /**\n+     * Checks whether the given node is a leading asterisk.\n+     *\n+     * @param detailNode the node to process\n+     * @return {@code true} if the node is {@link JavadocTokenTypes#LEADING_ASTERISK}\n+     */\n+    private static boolean isLoadingAsterisk(DetailNode detailNode) {", "originalCommit": "3b97b3d49b6af181f87136f123aee490a9462dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5NTc5MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528295791", "bodyText": "nice :)\ndone.", "author": "pbludov", "createdAt": "2020-11-22T07:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NDI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NTc5NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528245795", "bodyText": "I think we should not have code examples in description, they are copied to  metadata.\nI am not strong here, what do you think ?", "author": "romani", "createdAt": "2020-11-21T21:39:21Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,204 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * </p>\n+ * <p>\n+ * The following Javadoc comments are valid:", "originalCommit": "3b97b3d49b6af181f87136f123aee490a9462dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5NTgxNA==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528295814", "bodyText": "Makes sense. Moved to examples section.", "author": "pbludov", "createdAt": "2020-11-22T07:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NTc5NQ=="}], "type": "inlineReview"}, {"oid": "8e8e4f511e730c9f70600018ba13bdb8846fb897", "url": "https://github.com/checkstyle/checkstyle/commit/8e8e4f511e730c9f70600018ba13bdb8846fb897", "message": "Issue #6722: new check MissingLeadingAsteriskCheck", "committedDate": "2020-11-22T07:26:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNDQ4Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528324482", "bodyText": "{@code javadoc.wrong.singleton.html.tag}\n{@code javadoc.missed.html.close}\nThese messages does not make sense for this check. Is it required to list them?\nsame for {@code javadoc.parse.rule.error}, I dont think it is necessary", "author": "strkkk", "createdAt": "2020-11-22T11:54:56Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,209 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * All other lines in a Javadoc should start with {@code *}, including blank lines and code blocks.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations if the\n+ * Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingLeadingAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * Valid Java-style comment.\n+ *  *\n+ *  * &lt;pre&gt;\n+ *  *   int value = 0;\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class JavaStyle {} // ok\n+ *\n+ * &#47;** Valid Scala-style comment.\n+ *   * Some description here.\n+ *   **&#47;\n+ * class ScalaStyle {} // ok\n+ *\n+ * &#47;** **\n+ *  * Asterisks on first and last lines are optional.\n+ *  * *&#47;\n+ * class Asterisks {} // ok\n+ *\n+ * &#47;** No asterisks are required for single-line comments. *&#47;\n+ * class SingleLine {} // ok\n+ *\n+ * &#47;** // violation on next blank line, javadoc has lines without leading asterisk.\n+ *\n+ *  *&#47;\n+ * class BlankLine {}\n+ *\n+ * &#47;** Wrapped\n+ *     single-line comment *&#47; // violation, javadoc has lines without leading asterisk.\n+ * class Wrapped {}\n+ *\n+ * &#47;**\n+ *  * &lt;pre&gt;\n+ *     int value; // violation, javadoc has lines without leading asterisk.\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class Code {}\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.missing.asterisk}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}", "originalCommit": "8e8e4f511e730c9f70600018ba13bdb8846fb897", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNjU3MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528326571", "bodyText": "All Javadoc checks works this way. For example:\nhttps://checkstyle.org/config_javadoc.html#JavadocMissingWhitespaceAfterAsterisk_Violation_Messages\nhttps://checkstyle.org/config_javadoc.html#JavadocParagraph_Violation_Messages", "author": "pbludov", "createdAt": "2020-11-22T12:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNDQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNTg5Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528325893", "bodyText": "Please change to TokenUtil.isOfType method", "author": "strkkk", "createdAt": "2020-11-22T12:06:55Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,209 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * All other lines in a Javadoc should start with {@code *}, including blank lines and code blocks.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations if the\n+ * Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingLeadingAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * Valid Java-style comment.\n+ *  *\n+ *  * &lt;pre&gt;\n+ *  *   int value = 0;\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class JavaStyle {} // ok\n+ *\n+ * &#47;** Valid Scala-style comment.\n+ *   * Some description here.\n+ *   **&#47;\n+ * class ScalaStyle {} // ok\n+ *\n+ * &#47;** **\n+ *  * Asterisks on first and last lines are optional.\n+ *  * *&#47;\n+ * class Asterisks {} // ok\n+ *\n+ * &#47;** No asterisks are required for single-line comments. *&#47;\n+ * class SingleLine {} // ok\n+ *\n+ * &#47;** // violation on next blank line, javadoc has lines without leading asterisk.\n+ *\n+ *  *&#47;\n+ * class BlankLine {}\n+ *\n+ * &#47;** Wrapped\n+ *     single-line comment *&#47; // violation, javadoc has lines without leading asterisk.\n+ * class Wrapped {}\n+ *\n+ * &#47;**\n+ *  * &lt;pre&gt;\n+ *     int value; // violation, javadoc has lines without leading asterisk.\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class Code {}\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.missing.asterisk}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.38\n+ */\n+@StatelessCheck\n+public class JavadocMissingLeadingAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_MISSING_ASTERISK = \"javadoc.missing.asterisk\";\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.NEWLINE,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getAcceptableJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        DetailNode nextSibling = getNextNode(detailNode);\n+\n+        // Till https://github.com/checkstyle/checkstyle/issues/9005\n+        // Due to bug in the Javadoc parser there may be phantom description nodes.\n+        while (nextSibling.getType() == JavadocTokenTypes.DESCRIPTION\n+                || nextSibling.getType() == JavadocTokenTypes.WS) {", "originalCommit": "8e8e4f511e730c9f70600018ba13bdb8846fb897", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNzczMA==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528327730", "bodyText": "done", "author": "pbludov", "createdAt": "2020-11-22T12:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyNTg5Mw=="}], "type": "inlineReview"}, {"oid": "0799c048cdd1ac73d3c77ccafd9a0ce37ad7eb44", "url": "https://github.com/checkstyle/checkstyle/commit/0799c048cdd1ac73d3c77ccafd9a0ce37ad7eb44", "message": "Issue #6722: new check MissingLeadingAsteriskCheck", "committedDate": "2020-11-22T12:18:43Z", "type": "forcePushed"}, {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd", "url": "https://github.com/checkstyle/checkstyle/commit/96c654a34a3af8136b8825d4096cae61b339aebd", "message": "Issue #6722: new check MissingLeadingAsteriskCheck", "committedDate": "2020-11-22T12:22:34Z", "type": "commit"}, {"oid": "96c654a34a3af8136b8825d4096cae61b339aebd", "url": "https://github.com/checkstyle/checkstyle/commit/96c654a34a3af8136b8825d4096cae61b339aebd", "message": "Issue #6722: new check MissingLeadingAsteriskCheck", "committedDate": "2020-11-22T12:22:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMzcwNw==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r528933707", "bodyText": "This whole method looks weird. I would have thought it would look something similar to how we traverse through the AST.\nMy main question is the do loop. This shouldn't be a nested call to getNextNode? We truthfully only look 1 child deep?", "author": "rnveach", "createdAt": "2020-11-23T19:08:23Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingLeadingAsteriskCheck.java", "diffHunk": "@@ -0,0 +1,210 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.javadoc;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n+import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Checks if the javadoc has\n+ * <a href=\"https://docs.oracle.com/en/java/javase/14/docs/specs/javadoc/doc-comment-spec.html#leading-asterisks\">\n+ * leading asterisks</a> on each line.\n+ * </p>\n+ * <p>\n+ * The check does not require asterisks on the first line, nor on the last line if it is blank.\n+ * All other lines in a Javadoc should start with {@code *}, including blank lines and code blocks.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code violateExecutionOnNonTightHtml} - Control when to print violations if the\n+ * Javadoc being examined by this check violates the tight html rules defined at\n+ * <a href=\"https://checkstyle.org/writingjavadocchecks.html#Tight-HTML_rules\">Tight-HTML Rules</a>.\n+ * Type is {@code boolean}. Default value is {@code false}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"JavadocMissingLeadingAsterisk\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * &#47;**\n+ *  * Valid Java-style comment.\n+ *  *\n+ *  * &lt;pre&gt;\n+ *  *   int value = 0;\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class JavaStyle {} // ok\n+ *\n+ * &#47;** Valid Scala-style comment.\n+ *   * Some description here.\n+ *   **&#47;\n+ * class ScalaStyle {} // ok\n+ *\n+ * &#47;** **\n+ *  * Asterisks on first and last lines are optional.\n+ *  * *&#47;\n+ * class Asterisks {} // ok\n+ *\n+ * &#47;** No asterisks are required for single-line comments. *&#47;\n+ * class SingleLine {} // ok\n+ *\n+ * &#47;** // violation on next blank line, javadoc has lines without leading asterisk.\n+ *\n+ *  *&#47;\n+ * class BlankLine {}\n+ *\n+ * &#47;** Wrapped\n+ *     single-line comment *&#47; // violation, javadoc has lines without leading asterisk.\n+ * class Wrapped {}\n+ *\n+ * &#47;**\n+ *  * &lt;pre&gt;\n+ *     int value; // violation, javadoc has lines without leading asterisk.\n+ *  * &lt;/pre&gt;\n+ *  *&#47;\n+ * class Code {}\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code javadoc.missed.html.close}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.missing.asterisk}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.parse.rule.error}\n+ * </li>\n+ * <li>\n+ * {@code javadoc.wrong.singleton.html.tag}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.38\n+ */\n+@StatelessCheck\n+public class JavadocMissingLeadingAsteriskCheck extends AbstractJavadocCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_MISSING_ASTERISK = \"javadoc.missing.asterisk\";\n+\n+    @Override\n+    public int[] getRequiredJavadocTokens() {\n+        return new int[] {\n+            JavadocTokenTypes.NEWLINE,\n+        };\n+    }\n+\n+    @Override\n+    public int[] getAcceptableJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public int[] getDefaultJavadocTokens() {\n+        return getRequiredJavadocTokens();\n+    }\n+\n+    @Override\n+    public void visitJavadocToken(DetailNode detailNode) {\n+        DetailNode nextSibling = getNextNode(detailNode);\n+\n+        // Till https://github.com/checkstyle/checkstyle/issues/9005\n+        // Due to bug in the Javadoc parser there may be phantom description nodes.\n+        while (TokenUtil.isOfType(nextSibling.getType(),\n+                JavadocTokenTypes.DESCRIPTION, JavadocTokenTypes.WS)) {\n+            nextSibling = getNextNode(nextSibling);\n+        }\n+\n+        if (!isLeadingAsterisk(nextSibling) && !isLastLine(nextSibling)) {\n+            log(nextSibling.getLineNumber(), MSG_MISSING_ASTERISK);\n+        }\n+    }\n+\n+    /**\n+     * Gets next node in the ast (sibling or parent sibling for the last node).\n+     *\n+     * @param detailNode the node to process\n+     * @return next node.\n+     */\n+    private static DetailNode getNextNode(DetailNode detailNode) {\n+        DetailNode node = JavadocUtil.getFirstChild(detailNode);\n+        if (node == null) {\n+            node = JavadocUtil.getNextSibling(detailNode);\n+            if (node == null) {\n+                DetailNode parent = detailNode;\n+                do {\n+                    parent = parent.getParent();\n+                    node = JavadocUtil.getNextSibling(parent);", "originalCommit": "96c654a34a3af8136b8825d4096cae61b339aebd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzMDI2NA==", "url": "https://github.com/checkstyle/checkstyle/pull/9006#discussion_r532030264", "bodyText": "This is workaround for #9005 where NEWLINE may be too deep in the AST, for example:\n  /**\n   *\n     @deprecated block tag\n   */\nAST is\n|   |--BLOCK_COMMENT_BEGIN -> /* [1:2]\n|   |   |--COMMENT_CONTENT -> *\\n   *\\n     @deprecated block tag\\n    [1:4]\n|   |   |   `--JAVADOC -> JAVADOC [1:5]\n|   |   |       |--NEWLINE -> \\n [1:5]\n|   |   |       |--LEADING_ASTERISK ->    * [2:0]\n|   |   |       |--NEWLINE -> \\n [2:4]\n|   |   |       |--TEXT ->       [3:0]\n|   |   |       |--JAVADOC_TAG -> JAVADOC_TAG [3:5]\n|   |   |       |   |--DEPRECATED_LITERAL -> @deprecated [3:5]\n|   |   |       |   |--WS ->   [3:16]\n|   |   |       |   `--DESCRIPTION -> DESCRIPTION [3:17]\n|   |   |       |       |--TEXT -> block tag [3:17]\n|   |   |       |       |--NEWLINE -> \\n [3:26]                         // NEWLINE HERE\n|   |   |       |       `--TEXT ->     [4:0]                                  // Blank text, ignored in isLastLine\n|   |   |       `--EOF -> <EOF> [4:3]                                   // Next node, that is next sibling of grandparent\n|   |   `--BLOCK_COMMENT_END -> */ [4:3]\n\nIf #9005 can be solved, your comment will be correct: no more than one node deep", "author": "pbludov", "createdAt": "2020-11-28T11:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMzcwNw=="}], "type": "inlineReview"}]}