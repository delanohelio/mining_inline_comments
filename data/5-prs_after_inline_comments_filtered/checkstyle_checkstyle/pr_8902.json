{"pr_number": 8902, "pr_title": "Issue #6481: Generic XPath check", "pr_createdAt": "2020-10-18T19:29:59Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8902", "timeline": [{"oid": "d91d6f4a4e3f9055db4ba84b99075ddb60d9430b", "url": "https://github.com/checkstyle/checkstyle/commit/d91d6f4a4e3f9055db4ba84b99075ddb60d9430b", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-10-23T20:07:44Z", "type": "forcePushed"}, {"oid": "a3e35b746c1aa25c362bc41c72824491ae903c43", "url": "https://github.com/checkstyle/checkstyle/commit/a3e35b746c1aa25c362bc41c72824491ae903c43", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-10-29T20:33:30Z", "type": "forcePushed"}, {"oid": "71d2b56cc522d25a354464332dd621674c0d2d6e", "url": "https://github.com/checkstyle/checkstyle/commit/71d2b56cc522d25a354464332dd621674c0d2d6e", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-10-30T07:18:16Z", "type": "forcePushed"}, {"oid": "11aeb5f49242b680df7171370b84b70d2d8b817b", "url": "https://github.com/checkstyle/checkstyle/commit/11aeb5f49242b680df7171370b84b70d2d8b817b", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-10-30T20:50:40Z", "type": "forcePushed"}, {"oid": "6f6392976d5e255456ff3e53e2b7344fe40c2ee3", "url": "https://github.com/checkstyle/checkstyle/commit/6f6392976d5e255456ff3e53e2b7344fe40c2ee3", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-10-30T20:51:09Z", "type": "forcePushed"}, {"oid": "7db89665c4256bb3286b248b721129c66f649046", "url": "https://github.com/checkstyle/checkstyle/commit/7db89665c4256bb3286b248b721129c66f649046", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-10-31T04:52:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NTk5Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515485996", "bodyText": "xPath -> XPath", "author": "pbludov", "createdAt": "2020-10-31T11:12:43Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates XPath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by XPath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using XPath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - XPath query. Type is {@code java.lang.String}. Default value\n+ * is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"xpath.finding\";\n+\n+    /** XPath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluatexPathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluatexPathQuery(DetailAST rootAST) {", "originalCommit": "7db89665c4256bb3286b248b721129c66f649046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUwMDgxMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515500813", "bodyText": "rewrote to evaluateXpathQuery", "author": "timurt", "createdAt": "2020-10-31T14:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NTk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NjQyOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515486429", "bodyText": "Xpath -> XPath", "author": "pbludov", "createdAt": "2020-10-31T11:17:14Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates XPath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by XPath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using XPath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - XPath query. Type is {@code java.lang.String}. Default value\n+ * is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {", "originalCommit": "7db89665c4256bb3286b248b721129c66f649046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUwMDQ1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515500454", "bodyText": "In our source base we use Xpath, for example SuppressionXpathFilter or XpathRegressionAnnotationUseStyleTest, do you think we need to use another way here?", "author": "timurt", "createdAt": "2020-10-31T14:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwMjg2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515602865", "bodyText": "I just want consistency in the names. If we already use Xpath prefix, well, we should always use Xpath.", "author": "pbludov", "createdAt": "2020-11-01T10:16:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyOTQzOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r516129438", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-02T17:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NjQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NjgyMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515486823", "bodyText": "To make Pitest happy, call getRequiredTokens here. Like in this Check:\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/NoCodeInFileCheck.java#L93", "author": "pbludov", "createdAt": "2020-10-31T11:21:27Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates XPath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by XPath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using XPath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - XPath query. Type is {@code java.lang.String}. Default value\n+ * is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"xpath.finding\";\n+\n+    /** XPath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluatexPathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluatexPathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n+            final XPathDynamicContext xpathDynamicContext =\n+                    xpathExpression.createDynamicContext(rootNode);\n+            final List<Item> matchingItems = xpathExpression.evaluate(xpathDynamicContext);\n+\n+            matchingItems.forEach(node -> {\n+                final AbstractNode xpathNode = (AbstractNode) node;\n+                log(xpathNode.getUnderlyingNode(), MSG_KEY);\n+            });\n+        }\n+        catch (XPathException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return CommonUtil.EMPTY_INT_ARRAY;", "originalCommit": "7db89665c4256bb3286b248b721129c66f649046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUwMDgxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r515500818", "bodyText": "done", "author": "timurt", "createdAt": "2020-10-31T14:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4NjgyMw=="}], "type": "inlineReview"}, {"oid": "3a5eaddc74ca1f3eedc7c399a975fb1dc369a879", "url": "https://github.com/checkstyle/checkstyle/commit/3a5eaddc74ca1f3eedc7c399a975fb1dc369a879", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-10-31T14:08:04Z", "type": "forcePushed"}, {"oid": "e465b660b08360ece479648941dda80f69bc4581", "url": "https://github.com/checkstyle/checkstyle/commit/e465b660b08360ece479648941dda80f69bc4581", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-02T17:15:32Z", "type": "forcePushed"}, {"oid": "b71e7850c8ea5a18e8beea0003a42c203c776259", "url": "https://github.com/checkstyle/checkstyle/commit/b71e7850c8ea5a18e8beea0003a42c203c776259", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-02T17:59:33Z", "type": "forcePushed"}, {"oid": "8d6d8283f71f86eed2904b3a49c43b3d3abe483e", "url": "https://github.com/checkstyle/checkstyle/commit/8d6d8283f71f86eed2904b3a49c43b3d3abe483e", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-07T20:26:41Z", "type": "forcePushed"}, {"oid": "b8c6390ed2052a1e36547e366cce800789ef6ba2", "url": "https://github.com/checkstyle/checkstyle/commit/b8c6390ed2052a1e36547e366cce800789ef6ba2", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-08T13:01:19Z", "type": "forcePushed"}, {"oid": "a0626b838c04ef0f1ad36c80f98e287a4137d1df", "url": "https://github.com/checkstyle/checkstyle/commit/a0626b838c04ef0f1ad36c80f98e287a4137d1df", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-09T15:43:46Z", "type": "forcePushed"}, {"oid": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "url": "https://github.com/checkstyle/checkstyle/commit/1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-11T16:57:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjYwNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523706605", "bodyText": "Evaluates Xpath query and report violation on matching AST nodes.", "author": "romani", "createdAt": "2020-11-15T04:38:21Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes", "originalCommit": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcyMjUxNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523722516", "bodyText": "Done", "author": "timurt", "createdAt": "2020-11-15T07:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjc4MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523706780", "bodyText": "Name is too generic.\nWhat about MatchXpathCheck ?", "author": "romani", "createdAt": "2020-11-15T04:40:26Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {", "originalCommit": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcxNjkzMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523716932", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-15T06:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjkzMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523706932", "bodyText": "All config should have example of behavior.", "author": "romani", "createdAt": "2020-11-15T04:42:17Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;", "originalCommit": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNzk4NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523707985", "bodyText": "We need some advanced xpath query example, for example like https://github.com/checkstyle/checkstyle/pull/7676/files#diff-1fbb96c1b95e79400bf472812ee8646c92e4566b73ffc5edc83ecf146008bc23R101", "author": "romani", "createdAt": "2020-11-15T04:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjkzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTQwMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523775401", "bodyText": "not done.", "author": "romani", "createdAt": "2020-11-15T15:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjkzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzMDMzNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528230335", "bodyText": "done, added more complex queries", "author": "timurt", "createdAt": "2020-11-21T18:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwODE0MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523708141", "bodyText": "Why violation ?\nPlease share CLI output for each example.", "author": "romani", "createdAt": "2020-11-15T04:59:19Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation", "originalCommit": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1NzI4MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523757281", "bodyText": "Sorry my mistake, copy pasted a wrong sample\nFixed", "author": "timurt", "createdAt": "2020-11-15T13:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwODE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwODQ1Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523708452", "bodyText": "matchxpath.match\nI think it is good practice to name message resources  by name of check.\nCan you write xpath query to validate this rule over Check fields that are named MSG_ ?", "author": "romani", "createdAt": "2020-11-15T05:03:46Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/GenericXpathCheck.java", "diffHunk": "@@ -0,0 +1,149 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and verifies absence of the corresponding nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"GenericXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void func1() throws RuntimeException {} // violation\n+ *  public void func2() throws Exception {} // ok\n+ *  public void func3() throws Error {} // violation\n+ *  public void func4() throws Throwable {} // violation\n+ *  public void func5() throws NullPointerException {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code xpath.finding}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class GenericXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"xpath.finding\";", "originalCommit": "1618a4618ff4b9b6ac566b5517a5aa12b436a0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMDE3Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523730172", "bodyText": "I think it is good practice to name message resources by name of check.\n\ndone\n\nCan you write xpath query to validate this rule over Check fields that are named MSG_ ?\n\nI hope yes :) i will try", "author": "timurt", "createdAt": "2020-11-15T09:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwODQ1Mg=="}], "type": "inlineReview"}, {"oid": "2f86064c8d9dc5d9399a765b863cac508042d125", "url": "https://github.com/checkstyle/checkstyle/commit/2f86064c8d9dc5d9399a765b863cac508042d125", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-15T06:53:41Z", "type": "forcePushed"}, {"oid": "1990a639fbb18235aab4d243a43e4dd0f8a3c8be", "url": "https://github.com/checkstyle/checkstyle/commit/1990a639fbb18235aab4d243a43e4dd0f8a3c8be", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-15T07:54:26Z", "type": "forcePushed"}, {"oid": "bde00b21f3c1ae7e433fecd780d53c83b43c292f", "url": "https://github.com/checkstyle/checkstyle/commit/bde00b21f3c1ae7e433fecd780d53c83b43c292f", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-15T09:05:55Z", "type": "forcePushed"}, {"oid": "3d977b79dad7650a2e57309be626153a92f1d3c3", "url": "https://github.com/checkstyle/checkstyle/commit/3d977b79dad7650a2e57309be626153a92f1d3c3", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-15T10:47:49Z", "type": "forcePushed"}, {"oid": "1587f798bee5c72cf4bf1585f5f0b58cbe60b176", "url": "https://github.com/checkstyle/checkstyle/commit/1587f798bee5c72cf4bf1585f5f0b58cbe60b176", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-15T13:03:35Z", "type": "forcePushed"}, {"oid": "2267648a1fc389a8cd06473075da142bf677523d", "url": "https://github.com/checkstyle/checkstyle/commit/2267648a1fc389a8cd06473075da142bf677523d", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-15T13:14:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3Mzg4Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523773886", "bodyText": "move this setter on top of methods.\nthen should be all getXXXxxxToken\nthen should be beginTree", "author": "romani", "createdAt": "2020-11-15T15:30:52Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluateXpathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluateXpathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n+            final XPathDynamicContext xpathDynamicContext =\n+                    xpathExpression.createDynamicContext(rootNode);\n+            final List<Item> matchingItems = xpathExpression.evaluate(xpathDynamicContext);\n+\n+            matchingItems.forEach(node -> {\n+                final AbstractNode xpathNode = (AbstractNode) node;\n+                log(xpathNode.getUnderlyingNode(), MSG_KEY);\n+            });\n+        }\n+        catch (XPathException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return CommonUtil.EMPTY_INT_ARRAY;\n+    }\n+\n+    /**\n+     * Setter to xpath query.\n+     *\n+     * @param query xpath query.\n+     */\n+    public void setQuery(String query) {", "originalCommit": "2267648a1fc389a8cd06473075da142bf677523d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxMzQ4Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528213486", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-21T16:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3Mzg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDY5MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523774690", "bodyText": "please try to move log to beginTree", "author": "romani", "createdAt": "2020-11-15T15:38:08Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluateXpathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluateXpathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n+            final XPathDynamicContext xpathDynamicContext =\n+                    xpathExpression.createDynamicContext(rootNode);\n+            final List<Item> matchingItems = xpathExpression.evaluate(xpathDynamicContext);\n+\n+            matchingItems.forEach(node -> {\n+                final AbstractNode xpathNode = (AbstractNode) node;\n+                log(xpathNode.getUnderlyingNode(), MSG_KEY);", "originalCommit": "2267648a1fc389a8cd06473075da142bf677523d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxMzQzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528213431", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-21T16:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDg2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523774865", "bodyText": "wrapping of exception should always take come context of execution\nplease put query in exception message at least.", "author": "romani", "createdAt": "2020-11-15T15:39:36Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            evaluateXpathQuery(rootAST);\n+        }\n+    }\n+\n+    private void evaluateXpathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n+            final XPathDynamicContext xpathDynamicContext =\n+                    xpathExpression.createDynamicContext(rootNode);\n+            final List<Item> matchingItems = xpathExpression.evaluate(xpathDynamicContext);\n+\n+            matchingItems.forEach(node -> {\n+                final AbstractNode xpathNode = (AbstractNode) node;\n+                log(xpathNode.getUnderlyingNode(), MSG_KEY);\n+            });\n+        }\n+        catch (XPathException ex) {\n+            throw new IllegalStateException(ex);", "originalCommit": "2267648a1fc389a8cd06473075da142bf677523d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxMzQyNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528213427", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-21T16:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTAzOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523775038", "bodyText": "Evaluates Xpath query and report violation on all matching AST nodes.\nsecond sentence might be removed, as it duplicates first.", "author": "romani", "createdAt": "2020-11-15T15:41:01Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes", "originalCommit": "2267648a1fc389a8cd06473075da142bf677523d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxMzQyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528213422", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-21T16:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTIyNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r523775225", "bodyText": "we need to put here some links of what is Xpath and how to get checkstyle's AST .", "author": "romani", "createdAt": "2020-11-15T15:42:42Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,148 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on matching AST nodes. All nodes\n+ * retrieved by Xpath evaluator will be logged as violations. Current check allows\n+ * user to implement custom checks using Xpath.", "originalCommit": "2267648a1fc389a8cd06473075da142bf677523d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxMzQxMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528213412", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-21T16:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1OTgwOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528259809", "bodyText": "not done.\nPlease explain use how to get checkstyl's AST. By GUI or by CLI.\nCheckstyle AST is very specific to checkstyle, nobody knows it, not that much user even know our AST.", "author": "romani", "createdAt": "2020-11-22T00:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY0NDU3Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528644573", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-23T11:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTIyNQ=="}], "type": "inlineReview"}, {"oid": "b160d69b10d01276e2ee3a04439677d58db6d6d6", "url": "https://github.com/checkstyle/checkstyle/commit/b160d69b10d01276e2ee3a04439677d58db6d6d6", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-21T16:15:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxNzkwOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528217908", "bodyText": "Please bump the version.", "author": "pbludov", "createdAt": "2020-11-21T16:59:06Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,150 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check with default configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"/&gt;\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37", "originalCommit": "b160d69b10d01276e2ee3a04439677d58db6d6d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMjk3OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528222978", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-21T17:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxNzkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxOTg4MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528219880", "bodyText": "ex -> ignored. This is common naming convention for such cases.\nAnother (preferred) option is to assert the exception message.", "author": "pbludov", "createdAt": "2020-11-21T17:18:12Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheckTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.DetailAstImpl;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+public class MatchXpathCheckTest\n+    extends AbstractModuleTestSupport {\n+\n+    @Override\n+    protected String getPackageLocation() {\n+        return \"com/puppycrawl/tools/checkstyle/checks/coding/matchxpath\";\n+    }\n+\n+    @Test\n+    public void testCheckWithEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithMatchingMethodNames()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+            createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\");\n+        final String[] expected = {\n+            \"8:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+            \"10:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithNoMatchingMethodName()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='wrongName' or \"\n+                + \"@text='nonExistingMethod']]\");\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithDoubleBraceInitialization()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+\n+        checkConfig.addAttribute(\"query\", \"//INSTANCE_INIT[not(../*[not(\\n\"\n+                + \"                    self::LCURLY or\\n\"\n+                + \"                    self::INSTANCE_INIT or\\n\"\n+                + \"                    self::RCURLY or\\n\"\n+                + \"                    self::SINGLE_LINE_COMMENT or\\n\"\n+                + \"                    self::BLOCK_COMMENT_BEGIN\\n\"\n+                + \"                )])]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Do not use double-brace initialization\");\n+        final String[] expected = {\n+            \"11:35: Do not use double-brace initialization\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathDoubleBrace.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testImitateIllegalThrowsCheck()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//LITERAL_THROWS[./IDENT[@text='Throwable' or \"\n+                + \"@text='RuntimeException' or ends-with(@text, 'Error')]]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Illegal throws statement\");\n+        final String[] expected = {\n+            \"8:25: Illegal throws statement\",\n+            \"10:25: Illegal throws statement\",\n+            \"11:25: Illegal throws statement\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathIllegalThrows.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testImitateExecutableStatementCountCheck()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[count(./SLIST/*) > 2]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Executable number of statements \"\n+                + \"exceed threshold\");\n+        final String[] expected = {\n+            \"21:5: Executable number of statements exceed threshold\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathExecutableStatementCount.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testInvalidQuery() {\n+        final MatchXpathCheck matchXpathCheck = new MatchXpathCheck();\n+        matchXpathCheck.setQuery(\"!@#%^\");\n+\n+        final DetailAstImpl detailAST = new DetailAstImpl();\n+        detailAST.setType(TokenTypes.CLASS_DEF);\n+        detailAST.setText(\"Class Def\");\n+        detailAST.setLineNo(0);\n+        detailAST.setColumnNo(0);\n+\n+        try {\n+            matchXpathCheck.beginTree(detailAST);\n+            fail(\"Exception was expected\");\n+        }\n+        catch (IllegalStateException ex) {", "originalCommit": "b160d69b10d01276e2ee3a04439677d58db6d6d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMjg4OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528222888", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-21T17:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxOTg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMDE1OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528220158", "bodyText": "Please use Truth assertions here and below:\n        assertWithMessage(\"Expected empty array\")\n                .that(matchXpathCheck.getDefaultTokens())\n                .isEmpty();", "author": "pbludov", "createdAt": "2020-11-21T17:21:00Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheckTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.DetailAstImpl;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+public class MatchXpathCheckTest\n+    extends AbstractModuleTestSupport {\n+\n+    @Override\n+    protected String getPackageLocation() {\n+        return \"com/puppycrawl/tools/checkstyle/checks/coding/matchxpath\";\n+    }\n+\n+    @Test\n+    public void testCheckWithEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithMatchingMethodNames()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+            createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\");\n+        final String[] expected = {\n+            \"8:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+            \"10:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithNoMatchingMethodName()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='wrongName' or \"\n+                + \"@text='nonExistingMethod']]\");\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithDoubleBraceInitialization()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+\n+        checkConfig.addAttribute(\"query\", \"//INSTANCE_INIT[not(../*[not(\\n\"\n+                + \"                    self::LCURLY or\\n\"\n+                + \"                    self::INSTANCE_INIT or\\n\"\n+                + \"                    self::RCURLY or\\n\"\n+                + \"                    self::SINGLE_LINE_COMMENT or\\n\"\n+                + \"                    self::BLOCK_COMMENT_BEGIN\\n\"\n+                + \"                )])]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Do not use double-brace initialization\");\n+        final String[] expected = {\n+            \"11:35: Do not use double-brace initialization\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathDoubleBrace.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testImitateIllegalThrowsCheck()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//LITERAL_THROWS[./IDENT[@text='Throwable' or \"\n+                + \"@text='RuntimeException' or ends-with(@text, 'Error')]]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Illegal throws statement\");\n+        final String[] expected = {\n+            \"8:25: Illegal throws statement\",\n+            \"10:25: Illegal throws statement\",\n+            \"11:25: Illegal throws statement\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathIllegalThrows.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testImitateExecutableStatementCountCheck()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[count(./SLIST/*) > 2]\");\n+        checkConfig.addMessage(\"matchxpath.match\", \"Executable number of statements \"\n+                + \"exceed threshold\");\n+        final String[] expected = {\n+            \"21:5: Executable number of statements exceed threshold\",\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpathExecutableStatementCount.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testInvalidQuery() {\n+        final MatchXpathCheck matchXpathCheck = new MatchXpathCheck();\n+        matchXpathCheck.setQuery(\"!@#%^\");\n+\n+        final DetailAstImpl detailAST = new DetailAstImpl();\n+        detailAST.setType(TokenTypes.CLASS_DEF);\n+        detailAST.setText(\"Class Def\");\n+        detailAST.setLineNo(0);\n+        detailAST.setColumnNo(0);\n+\n+        try {\n+            matchXpathCheck.beginTree(detailAST);\n+            fail(\"Exception was expected\");\n+        }\n+        catch (IllegalStateException ex) {\n+            // it is OK\n+        }\n+    }\n+\n+    @Test\n+    public void testGetDefaultTokens() {\n+        final MatchXpathCheck matchXpathCheck = new MatchXpathCheck();\n+        assertThat(\"Expected empty array\",", "originalCommit": "b160d69b10d01276e2ee3a04439677d58db6d6d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMjg2Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528222866", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-21T17:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIyMDE1OA=="}], "type": "inlineReview"}, {"oid": "62d46df5422fa835617c4ed5590c0cf91c957cad", "url": "https://github.com/checkstyle/checkstyle/commit/62d46df5422fa835617c4ed5590c0cf91c957cad", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-21T17:33:53Z", "type": "forcePushed"}, {"oid": "1c5f49e06aa42057039b0d3a7d338b89b34ccacf", "url": "https://github.com/checkstyle/checkstyle/commit/1c5f49e06aa42057039b0d3a7d338b89b34ccacf", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-21T17:43:39Z", "type": "forcePushed"}, {"oid": "795f68df7d2c6b057eccd077792f9f4e2b17ec33", "url": "https://github.com/checkstyle/checkstyle/commit/795f68df7d2c6b057eccd077792f9f4e2b17ec33", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-21T17:45:23Z", "type": "forcePushed"}, {"oid": "8fad2ea3298598420b722276642a561d7354daae", "url": "https://github.com/checkstyle/checkstyle/commit/8fad2ea3298598420b722276642a561d7354daae", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-21T17:47:10Z", "type": "forcePushed"}, {"oid": "0048d3c62b044d9a64ca089bd8bc89a68dffe434", "url": "https://github.com/checkstyle/checkstyle/commit/0048d3c62b044d9a64ca089bd8bc89a68dffe434", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-21T18:56:35Z", "type": "forcePushed"}, {"oid": "7e743152a64676ae8eda0bd2a0c0ac0d3834ce94", "url": "https://github.com/checkstyle/checkstyle/commit/7e743152a64676ae8eda0bd2a0c0ac0d3834ce94", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-21T21:03:54Z", "type": "forcePushed"}, {"oid": "9f995a66d5b9ef4668f0db1f64a85754146de039", "url": "https://github.com/checkstyle/checkstyle/commit/9f995a66d5b9ef4668f0db1f64a85754146de039", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-21T22:16:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MDc1OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528260758", "bodyText": "final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\nfinal XPathExpression xpathExpression = xpathEvaluator.createExpression(query);\n\ncan we make this execution to be done ones for whole Checkstyle execution ?\nfor example in \"setQuery\".", "author": "romani", "createdAt": "2020-11-22T00:21:18Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,184 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>.\n+ * If xpath query is not specified explicitly, then check does nothing.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ * following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.38\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    /**\n+     * Setter to xpath query.\n+     *\n+     * @param query xpath query.\n+     */\n+    public void setQuery(String query) {\n+        this.query = query;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return CommonUtil.EMPTY_INT_ARRAY;\n+    }\n+\n+    @Override\n+    public void beginTree(DetailAST rootAST) {\n+        if (!query.isEmpty()) {\n+            final List<DetailAST> matchingNodes = findMatchingNodesByXpathQuery(rootAST);\n+            matchingNodes.forEach(node -> log(node, MSG_KEY));\n+        }\n+    }\n+\n+    private List<DetailAST> findMatchingNodesByXpathQuery(DetailAST rootAST) {\n+        final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+        try {\n+            final RootNode rootNode = new RootNode(rootAST);\n+            final XPathExpression xpathExpression = xpathEvaluator.createExpression(query);", "originalCommit": "9f995a66d5b9ef4668f0db1f64a85754146de039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM4NzU5Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528387593", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-22T18:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MDc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MTA0OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528261048", "bodyText": "please update all Inputs to place there query that you used.\nYou used default only over one Input.", "author": "romani", "createdAt": "2020-11-22T00:25:07Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/InputMatchXpathIllegalThrows.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\n+\n+/* Config:\n+ *\n+ * default", "originalCommit": "9f995a66d5b9ef4668f0db1f64a85754146de039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM4NzU4OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528387588", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-22T18:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2MTA0OA=="}], "type": "inlineReview"}, {"oid": "219aabea1932961c2922b4380cfbd45e06b76e97", "url": "https://github.com/checkstyle/checkstyle/commit/219aabea1932961c2922b4380cfbd45e06b76e97", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-22T18:45:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMTg0MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528421841", "bodyText": "To violate ...", "author": "romani", "createdAt": "2020-11-22T23:25:03Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,215 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * If xpath query is not specified explicitly, then check does nothing.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ * following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if there are any parametrized constructors", "originalCommit": "219aabea1932961c2922b4380cfbd45e06b76e97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY0MzIzNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528643237", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-23T11:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMTg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMTkwMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528421903", "bodyText": "put property on new line.\nPlease keep pretty print of XML in javadoc in this and other examples.", "author": "romani", "createdAt": "2020-11-22T23:25:22Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,215 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * If xpath query is not specified explicitly, then check does nothing.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ * following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"", "originalCommit": "219aabea1932961c2922b4380cfbd45e06b76e97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY0MzExOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528643119", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-23T11:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMTkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMjEzNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528422136", "bodyText": "To violate ...\nwe do not fail anything, we just put some severity of events and plugin configuration usually do decision to fail or .... .", "author": "romani", "createdAt": "2020-11-22T23:27:13Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,215 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath.\n+ * Please read more about xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * If xpath query is not specified explicitly, then check does nothing.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ * following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt; &lt;property name=\"query\"\n+ * value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt; &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method name is 'test' or 'foo'", "originalCommit": "219aabea1932961c2922b4380cfbd45e06b76e97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY0MzAxNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528643016", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-23T11:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyMjEzNg=="}], "type": "inlineReview"}, {"oid": "b93183cab9a1469c5ee3a7d7c10aae35f6fc73d0", "url": "https://github.com/checkstyle/checkstyle/commit/b93183cab9a1469c5ee3a7d7c10aae35f6fc73d0", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-23T11:39:32Z", "type": "forcePushed"}, {"oid": "0efacee151891f9d47fca5171aea33a1a08f9b81", "url": "https://github.com/checkstyle/checkstyle/commit/0efacee151891f9d47fca5171aea33a1a08f9b81", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-23T12:37:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NzcxNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528777717", "bodyText": "it works, but better to suggest\n..... -b \".....\"", "author": "romani", "createdAt": "2020-11-23T15:17:01Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -t Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b //METHOD_DEF[./IDENT[@text='sayHello']]", "originalCommit": "0efacee151891f9d47fca5171aea33a1a08f9b81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1Nzg2OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529557868", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-24T13:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NzcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4OTEyOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529589129", "bodyText": "not done.", "author": "romani", "createdAt": "2020-11-24T14:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NzcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5NDk1Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529594957", "bodyText": "it is done, maybe page needs to be refreshed", "author": "timurt", "createdAt": "2020-11-24T14:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NzcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3NDUyOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529674529", "bodyText": "see item below", "author": "romani", "createdAt": "2020-11-24T15:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NzcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MDA1OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528780059", "bodyText": "* Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a> and \n * <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\"\n *   GUI application</a> with options to\n * shown AST to ease usage of Xpath queries.", "author": "romani", "createdAt": "2020-11-23T15:20:19Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found", "originalCommit": "0efacee151891f9d47fca5171aea33a1a08f9b81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NzgyMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529557821", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-24T13:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MDA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MTM1Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528781353", "bodyText": "-T, as we are about to make it comments also.\nif you want to keep -t, please add one more acceptance criteria to #9009", "author": "romani", "createdAt": "2020-11-23T15:22:05Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>", "originalCommit": "0efacee151891f9d47fca5171aea33a1a08f9b81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1Nzc2Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529557762", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-24T13:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MTM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MjAzNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528782035", "bodyText": "to violate", "author": "romani", "createdAt": "2020-11-23T15:22:57Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -t Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b //METHOD_DEF[./IDENT[@text='sayHello']]\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method has more than two statements inside", "originalCommit": "0efacee151891f9d47fca5171aea33a1a08f9b81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NzY1MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529557651", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-24T13:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MjAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4NTM3NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528785374", "bodyText": "please add example with var to xdoc", "author": "romani", "createdAt": "2020-11-23T15:27:20Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -t Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b //METHOD_DEF[./IDENT[@text='sayHello']]\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To fail with violation if method has more than two statements inside\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[count(./SLIST/*) &gt; 2]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() { // violation\n+ *   int a = 1;\n+ *   int b = 2;\n+ *   int c = 3;\n+ *  }\n+ *  public void test() { // ok\n+ *   int a = 1;\n+ *   int b = 2;\n+ *  }\n+ * }\n+ * </pre>", "originalCommit": "0efacee151891f9d47fca5171aea33a1a08f9b81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NzUxNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529557515", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-24T13:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4NTM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4NTgzOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528785838", "bodyText": "why node is required here and not required in counts of statements examples ?", "author": "romani", "createdAt": "2020-11-23T15:28:00Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,274 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides own cmd tool and here the basic options will be\n+ * shown to ease usage of Xpath queries. More options and detailed information can be found\n+ * at <a href=\"https://checkstyle.org/cmdline.html\">Command Line</a>.\n+ * </p>\n+ * <p><b>-t</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -t Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b //METHOD_DEF[./IDENT[@text='sayHello']]\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/node()) &gt; 0]\"/&gt;", "originalCommit": "0efacee151891f9d47fca5171aea33a1a08f9b81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NzMzNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529557337", "bodyText": "my mistake * is more suitable here", "author": "timurt", "createdAt": "2020-11-24T13:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4NTgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NzQwNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529557407", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-24T13:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4NTgzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4ODI5MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r528788290", "bodyText": "please add leading asterisk, we almost merged Checks for this - #9006.", "author": "romani", "createdAt": "2020-11-23T15:30:59Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/InputMatchXpathDoubleBrace.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\n+\n+import java.util.ArrayList;\n+\n+/* Config:\n+ *\n+ * query: //INSTANCE_INIT[not(../*[not(self::LCURLY or self::INSTANCE_INIT or self::RCURLY or\n+ self::SINGLE_LINE_COMMENT or self::BLOCK_COMMENT_BEGIN)])]", "originalCommit": "0efacee151891f9d47fca5171aea33a1a08f9b81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1Njk2Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529556967", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-24T13:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4ODI5MA=="}], "type": "inlineReview"}, {"oid": "f367bb8ccfa9af8a3d9504ec7503118978c495d1", "url": "https://github.com/checkstyle/checkstyle/commit/f367bb8ccfa9af8a3d9504ec7503118978c495d1", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-23T18:36:19Z", "type": "forcePushed"}, {"oid": "02ceed6aa52d5d566794028bd7d353ad46b5031c", "url": "https://github.com/checkstyle/checkstyle/commit/02ceed6aa52d5d566794028bd7d353ad46b5031c", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-24T13:46:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MTE2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529591165", "bodyText": "please remove this example as it become same as\n//CTOR_DEF[count(./PARAMETERS/*", "author": "romani", "createdAt": "2020-11-24T14:34:57Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,294 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -b Main.java //METHOD_DEF[./IDENT[@text='\"sayHello\"']]\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/*) &gt; 0]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method has more than two statements inside\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[count(./SLIST/*) &gt; 2]\"/&gt;", "originalCommit": "02ceed6aa52d5d566794028bd7d353ad46b5031c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5NzQxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529597418", "bodyText": "done", "author": "timurt", "createdAt": "2020-11-24T14:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MTE2NQ=="}], "type": "inlineReview"}, {"oid": "44ad38619d804a2b93b0aa6f9f460da02b3c9d2b", "url": "https://github.com/checkstyle/checkstyle/commit/44ad38619d804a2b93b0aa6f9f460da02b3c9d2b", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-24T14:43:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MzUxNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r529673515", "bodyText": "java -jar checkstyle-X.XX-all.jar Main.java -b \"//METHOD_DEF[./IDENT[@text='\"sayHello\"']]\"", "author": "romani", "createdAt": "2020-11-24T15:55:13Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,271 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -> + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -> } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -b Main.java //METHOD_DEF[./IDENT[@text='\"sayHello\"']]", "originalCommit": "44ad38619d804a2b93b0aa6f9f460da02b3c9d2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc5MTIzNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r530791236", "bodyText": "sorry, my bad\ndone", "author": "timurt", "createdAt": "2020-11-26T06:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MzUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4Mjk2MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r531182960", "bodyText": "Please do it like:\njava -jar checkstyle-X.XX-all.jar Main.java -b \"//METHOD_DEF[./IDENT[@text='sayHello']]\"", "author": "romani", "createdAt": "2020-11-26T18:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MzUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1NjcxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r531656718", "bodyText": "-_- sorry, done", "author": "timurt", "createdAt": "2020-11-27T15:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MzUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NzA3MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532297070", "bodyText": "Still not done, before reply please make sure you see it in github your self", "author": "romani", "createdAt": "2020-11-30T00:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MzUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyNjkxNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532326916", "bodyText": "Misunderstanding, I was thinking that you are referring the order of options, but only today noticed quotes", "author": "timurt", "createdAt": "2020-11-30T03:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MzUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMjc0OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532332748", "bodyText": "I hope now it is fixed", "author": "timurt", "createdAt": "2020-11-30T03:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MzUxNQ=="}], "type": "inlineReview"}, {"oid": "3c0c38dd37040950a5a4d547c19ec9e35c598626", "url": "https://github.com/checkstyle/checkstyle/commit/3c0c38dd37040950a5a4d547c19ec9e35c598626", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-26T06:04:59Z", "type": "forcePushed"}, {"oid": "bef6d33b45a05ef3372ce7a84a4eb101aaa04227", "url": "https://github.com/checkstyle/checkstyle/commit/bef6d33b45a05ef3372ce7a84a4eb101aaa04227", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-26T06:10:26Z", "type": "forcePushed"}, {"oid": "98d0bdbf28bdde2f2f042441f4924c2fcaf3df06", "url": "https://github.com/checkstyle/checkstyle/commit/98d0bdbf28bdde2f2f042441f4924c2fcaf3df06", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-27T12:18:45Z", "type": "forcePushed"}, {"oid": "2aac97f4bed9f5219540afbd413a1389fd326742", "url": "https://github.com/checkstyle/checkstyle/commit/2aac97f4bed9f5219540afbd413a1389fd326742", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-27T14:07:10Z", "type": "forcePushed"}, {"oid": "93919dadbb9079b4502b0f91f70c833d8509ccd9", "url": "https://github.com/checkstyle/checkstyle/commit/93919dadbb9079b4502b0f91f70c833d8509ccd9", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-27T14:16:53Z", "type": "forcePushed"}, {"oid": "84f1cf194bc5977c180b0a78c9c21da95e695cad", "url": "https://github.com/checkstyle/checkstyle/commit/84f1cf194bc5977c180b0a78c9c21da95e695cad", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-27T14:32:03Z", "type": "forcePushed"}, {"oid": "2c24b9fa77538b7c026a4daf5531d198c06556ab", "url": "https://github.com/checkstyle/checkstyle/commit/2c24b9fa77538b7c026a4daf5531d198c06556ab", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-27T14:44:36Z", "type": "forcePushed"}, {"oid": "d9b6e2aba0df527bbac0605ece3052d8bef81b79", "url": "https://github.com/checkstyle/checkstyle/commit/d9b6e2aba0df527bbac0605ece3052d8bef81b79", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-27T15:16:06Z", "type": "forcePushed"}, {"oid": "6f6be0fafba51f5ff74d70baa5fa3a736b22827a", "url": "https://github.com/checkstyle/checkstyle/commit/6f6be0fafba51f5ff74d70baa5fa3a736b22827a", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-28T17:10:13Z", "type": "forcePushed"}, {"oid": "1aa332b576a5cc50119c19e2e94186fcf41a64fd", "url": "https://github.com/checkstyle/checkstyle/commit/1aa332b576a5cc50119c19e2e94186fcf41a64fd", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-28T17:34:17Z", "type": "forcePushed"}, {"oid": "5a772c70c1c0dd5f086881ef698ac3e030a10f68", "url": "https://github.com/checkstyle/checkstyle/commit/5a772c70c1c0dd5f086881ef698ac3e030a10f68", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-28T18:50:31Z", "type": "forcePushed"}, {"oid": "80083af269efaed9f2caad94904ccc56ed7fe1df", "url": "https://github.com/checkstyle/checkstyle/commit/80083af269efaed9f2caad94904ccc56ed7fe1df", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-29T12:51:33Z", "type": "forcePushed"}, {"oid": "cb4b32d84631dd2d05e674c0b8182526e743feb3", "url": "https://github.com/checkstyle/checkstyle/commit/cb4b32d84631dd2d05e674c0b8182526e743feb3", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-29T22:45:22Z", "type": "forcePushed"}, {"oid": "e478a24150435adc6a395352af96128a056c7f8e", "url": "https://github.com/checkstyle/checkstyle/commit/e478a24150435adc6a395352af96128a056c7f8e", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-29T23:56:52Z", "type": "forcePushed"}, {"oid": "2091e03123c70e4cf4f35bee15e38cff3e4f567d", "url": "https://github.com/checkstyle/checkstyle/commit/2091e03123c70e4cf4f35bee15e38cff3e4f567d", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-30T03:13:41Z", "type": "forcePushed"}, {"oid": "f81578e153d11a24e95b217b5353aa666350d874", "url": "https://github.com/checkstyle/checkstyle/commit/f81578e153d11a24e95b217b5353aa666350d874", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-30T03:39:15Z", "type": "forcePushed"}, {"oid": "f3873d7a2af038f82ce0fa5c4eb4dd2815de24d2", "url": "https://github.com/checkstyle/checkstyle/commit/f3873d7a2af038f82ce0fa5c4eb4dd2815de24d2", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-30T04:01:44Z", "type": "forcePushed"}, {"oid": "8cd2ca07e29389c5bab7d2e4f24b76e8d860dc2d", "url": "https://github.com/checkstyle/checkstyle/commit/8cd2ca07e29389c5bab7d2e4f24b76e8d860dc2d", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-30T04:23:06Z", "type": "forcePushed"}, {"oid": "b1d8789735778a2041038d060d06469f49781324", "url": "https://github.com/checkstyle/checkstyle/commit/b1d8789735778a2041038d060d06469f49781324", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-30T04:25:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM1NDM2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532354365", "bodyText": "Just a suggestion for consistency, most Checkstyle UT's use final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;", "author": "nmancus1", "createdAt": "2020-11-30T05:25:13Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheckTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.DetailAstImpl;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+public class MatchXpathCheckTest\n+    extends AbstractModuleTestSupport {\n+\n+    @Override\n+    protected String getPackageLocation() {\n+        return \"com/puppycrawl/tools/checkstyle/checks/coding/matchxpath\";\n+    }\n+\n+    @Test\n+    public void testCheckWithEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithImplicitEmptyQuery()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"\");\n+        final String[] expected = {};\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithMatchingMethodNames()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+            createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\");\n+        final String[] expected = {\n+            \"8:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+            \"10:5: \" + getCheckMessage(MatchXpathCheck.MSG_KEY),\n+        };\n+        verify(checkConfig, getPath(\"InputMatchXpath.java\"), expected);\n+    }\n+\n+    @Test\n+    public void testCheckWithNoMatchingMethodName()\n+            throws Exception {\n+        final DefaultConfiguration checkConfig =\n+                createModuleConfig(MatchXpathCheck.class);\n+        checkConfig.addAttribute(\"query\", \"//METHOD_DEF[./IDENT[@text='wrongName' or \"\n+                + \"@text='nonExistingMethod']]\");\n+        final String[] expected = {};", "originalCommit": "b1d8789735778a2041038d060d06469f49781324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM1NDY0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532354647", "bodyText": "Same for line 45, 55", "author": "nmancus1", "createdAt": "2020-11-30T05:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM1NDM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MDI5NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532360294", "bodyText": "Thank you very much :)\nFixed mentioned lines", "author": "timurt", "createdAt": "2020-11-30T05:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM1NDM2NQ=="}], "type": "inlineReview"}, {"oid": "e24a9c86f4963cfb7ac3a1ff1799ed45bb695acf", "url": "https://github.com/checkstyle/checkstyle/commit/e24a9c86f4963cfb7ac3a1ff1799ed45bb695acf", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-30T05:47:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODY5Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532398696", "bodyText": "Why Java14? I see only type inference here. It is available since Java10", "author": "pbludov", "createdAt": "2020-11-30T07:47:31Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/InputMatchXpathAvoidInstanceCreationWithoutVar.java", "diffHunk": "@@ -0,0 +1,15 @@\n+//non-compiled with javac: Compilable with Java14", "originalCommit": "e24a9c86f4963cfb7ac3a1ff1799ed45bb695acf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2MjUxNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532462515", "bodyText": "I took as an example some other test files,\nmodified to Java10", "author": "timurt", "createdAt": "2020-11-30T09:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUwODAyOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532508029", "bodyText": "Why Java14? I see only type inference here. It is available since Java10\n\n@pbludov What is the policy on this? I am wondering because I faced the same decision in #9060. There is two different ways to approach this:\n\nUse highest version number that code compiles on at the time of writing the test case.\nLowest possible version that code compiles on (basically targeting the release version that the specific feature that makes it non-compilable first appeared in).\n\nFor #9060 , I went with 1, thinking that we are guaranteed that the code is compilable up to at least Java 15. Is it better to do 2?\nI guess one day, when Checkstyle itself is compilable by newer versions of Java, we can move those test case files with versions <= new Checkstyle version to compilable?", "author": "nmancus1", "createdAt": "2020-11-30T10:53:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MzYxNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r532663617", "bodyText": "Reason of this comment is to define what CI job should try to compile it.\nExact minimum version was good approach when java was less frequent in releases and we just used next version. Right now situation is different. We will upgrade to jdk11, so we will skip 9 and 10. So on upgrade to use jdk11 as minimum required version for project compilation we will move all jdk9, jdk10, jdk11 to compilable folder.\nSo, it is always ok to use minimum version in this comment, as we have bunch of CIs to execute compilation on each version. We can use our next target jdk - 11.\nAs we have no limits in CI execution, I would keep minimum version required for Input.", "author": "romani", "createdAt": "2020-11-30T15:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODY5Ng=="}], "type": "inlineReview"}, {"oid": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0", "url": "https://github.com/checkstyle/checkstyle/commit/812a3b74497d1fadffd1dc6b9b8bb2964511c2a0", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-11-30T09:42:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0MjA5MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534142091", "bodyText": "This is why property descriptions must start with a verb in the singular tense.", "author": "rnveach", "createdAt": "2020-12-02T12:50:53Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,270 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. Current check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at <a href=\"https://www.w3schools.com/xml/xpath_syntax.asp\">\n+ * W3Schools Xpath Syntax</a>. Information regarding Xpath functions can be found at\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java#L101\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -&gt; + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -&gt; } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b \"//METHOD_DEF[./IDENT[@text='sayHello']]\"\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/*) &gt; 0]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if new instance creation was done without <b>var</b> type\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;MatchXpath&quot;&gt;\n+ *  &lt;property name=&quot;query&quot; value=&quot;//VARIABLE_DEF[./ASSIGN/EXPR/LITERAL_NEW\n+ *  and not(./TYPE/IDENT[@text='var'])]&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *   public void foo() {\n+ *     SomeObject a = new SomeObject(); // violation\n+ *     var b = new SomeObject(); // OK\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code matchxpath.match}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.39\n+ */\n+@StatelessCheck\n+public class MatchXpathCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text provided by user.\n+     */\n+    public static final String MSG_KEY = \"matchxpath.match\";\n+\n+    /** Xpath query. */\n+    private String query = \"\";\n+\n+    /** Xpath expression. */\n+    private XPathExpression xpathExpression;\n+\n+    /**\n+     * Setter to xpath query.", "originalCommit": "812a3b74497d1fadffd1dc6b9b8bb2964511c2a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5MDc3OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534190778", "bodyText": "changed to Setter to specify xpath query.", "author": "timurt", "createdAt": "2020-12-02T14:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0MjA5MQ=="}], "type": "inlineReview"}, {"oid": "82cb91712edc254bbcf78d0eae7f38d1cbc55459", "url": "https://github.com/checkstyle/checkstyle/commit/82cb91712edc254bbcf78d0eae7f38d1cbc55459", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-02T14:04:20Z", "type": "forcePushed"}, {"oid": "8c0f0a1fdcb42485ee100fd356ac840d6746df6a", "url": "https://github.com/checkstyle/checkstyle/commit/8c0f0a1fdcb42485ee100fd356ac840d6746df6a", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-02T14:15:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyMjQ4NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534222484", "bodyText": "please add new paragraph to encourage use to define custom message matchxpath.match for each instance of Check to explain what Check try to find and why it is not good. Default message might be too abstract and not informative.\nPlease add such property in each example.", "author": "romani", "createdAt": "2020-12-02T14:45:36Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,271 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>", "originalCommit": "8c0f0a1fdcb42485ee100fd356ac840d6746df6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIzOTUzNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535239537", "bodyText": "done, please check\n@rnveach could you also check my English writings :)", "author": "timurt", "createdAt": "2020-12-03T13:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyMjQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyOTE3Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r534229172", "bodyText": "@timurt , please recheck  rendering of  <b>@text</b> you might need to escape @", "author": "romani", "createdAt": "2020-12-02T14:54:05Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,271 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at\n+ * <a href=\"https://www.saxonica.com/html/documentation/expressions/\">Xpath Syntax</a>.\n+ * Information regarding Xpath functions can be found at\n+ * <a href=\"https://www.saxonica.com/html/documentation/functions/fn/\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in", "originalCommit": "8c0f0a1fdcb42485ee100fd356ac840d6746df6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0MDY4MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535240680", "bodyText": "yeah, I have generated sites and it looks fine as javadoc and as checkstyle site as well, do you want me to upload this htmls to pages?", "author": "timurt", "createdAt": "2020-12-03T13:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyOTE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0ODQyNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535248427", "bodyText": "looks good", "author": "romani", "createdAt": "2020-12-03T13:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyOTE3Mg=="}], "type": "inlineReview"}, {"oid": "ddee7ab61f97d52f24ff71cd2634cadd3e9207fc", "url": "https://github.com/checkstyle/checkstyle/commit/ddee7ab61f97d52f24ff71cd2634cadd3e9207fc", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-03T12:20:42Z", "type": "forcePushed"}, {"oid": "876cb9d74668e869d7369772923b96afcdf70ef1", "url": "https://github.com/checkstyle/checkstyle/commit/876cb9d74668e869d7369772923b96afcdf70ef1", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-03T13:35:53Z", "type": "forcePushed"}, {"oid": "094fe8ff44dbda2da1f6d859c5dc5ab94448e916", "url": "https://github.com/checkstyle/checkstyle/commit/094fe8ff44dbda2da1f6d859c5dc5ab94448e916", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-03T13:45:13Z", "type": "forcePushed"}, {"oid": "c1e5fd9fbd7f67d598507771e191d9083ffd8567", "url": "https://github.com/checkstyle/checkstyle/commit/c1e5fd9fbd7f67d598507771e191d9083ffd8567", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-03T13:51:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1MzY5NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535253694", "bodyText": "please remove \"If there are more than one check of this type,\" it should recommended to do always.\nIt is better to define custom messages for violations to explain what is not allowed and what to use instead, default message might be too abstract", "author": "romani", "createdAt": "2020-12-03T14:06:14Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,285 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>\n+ * <p>\n+ * If there are more than one check of this type, it is better to define custom messages for", "originalCommit": "c1e5fd9fbd7f67d598507771e191d9083ffd8567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI4MTU0MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535281541", "bodyText": "done", "author": "timurt", "createdAt": "2020-12-03T14:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1MzY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1NTIxMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535255212", "bodyText": "Parameterized constructors are not allowed, there should be only default ctor\nthis is the only imaginary reason I can think of.", "author": "romani", "createdAt": "2020-12-03T14:08:15Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,285 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>\n+ * <p>\n+ * If there are more than one check of this type, it is better to define custom messages for\n+ * violations since default message might be too abstract. To customize a message you need to\n+ * add <code>message</code> element with <b>matchxpath.match</b> as <code>key</code> attribute and\n+ * desired message as <code>value</code> attribute.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at\n+ * <a href=\"https://www.saxonica.com/html/documentation/expressions/\">Xpath Syntax</a>.\n+ * Information regarding Xpath functions can be found at\n+ * <a href=\"https://www.saxonica.com/html/documentation/functions/fn/\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/search?q=%22TOKEN_TYPES_WITH_TEXT_ATTRIBUTE+%3D+Arrays.asList%22\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Specify Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -&gt; + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -&gt; } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b \"//METHOD_DEF[./IDENT[@text='sayHello']]\"\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Private methods must appear after public methods&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/*) &gt; 0]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Parameterized constructors are not allowed&quot;/&gt;", "originalCommit": "c1e5fd9fbd7f67d598507771e191d9083ffd8567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI4MTQyMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535281423", "bodyText": "done", "author": "timurt", "createdAt": "2020-12-03T14:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1NTIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1NjQ2OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535256469", "bodyText": "New instances should be created via 'var' keyword to avoid duplication of type reference in statement", "author": "romani", "createdAt": "2020-12-03T14:09:53Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java", "diffHunk": "@@ -0,0 +1,285 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n+import net.sf.saxon.Configuration;\n+import net.sf.saxon.om.Item;\n+import net.sf.saxon.sxpath.XPathDynamicContext;\n+import net.sf.saxon.sxpath.XPathEvaluator;\n+import net.sf.saxon.sxpath.XPathExpression;\n+import net.sf.saxon.trans.XPathException;\n+\n+/**\n+ * <p>\n+ * Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n+ * user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n+ * then the check does nothing.\n+ * </p>\n+ * <p>\n+ * If there are more than one check of this type, it is better to define custom messages for\n+ * violations since default message might be too abstract. To customize a message you need to\n+ * add <code>message</code> element with <b>matchxpath.match</b> as <code>key</code> attribute and\n+ * desired message as <code>value</code> attribute.\n+ * </p>\n+ * <p>\n+ * Please read more about Xpath syntax at\n+ * <a href=\"https://www.saxonica.com/html/documentation/expressions/\">Xpath Syntax</a>.\n+ * Information regarding Xpath functions can be found at\n+ * <a href=\"https://www.saxonica.com/html/documentation/functions/fn/\">XSLT/XPath Reference</a>.\n+ * Note, that <b>@text</b> attribute can used only with token types that are listed in\n+ * <a href=\"https://github.com/checkstyle/checkstyle/search?q=%22TOKEN_TYPES_WITH_TEXT_ATTRIBUTE+%3D+Arrays.asList%22\">\n+ *     XpathUtil</a>.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code query} - Specify Xpath query.\n+ * Type is {@code java.lang.String}.\n+ * Default value is {@code \"\"}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * Checkstyle provides <a href=\"https://checkstyle.org/cmdline.html\">command line tool</a>\n+ * and <a href=\"https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui\">GUI\n+ * application</a> with options to show AST and to ease usage of Xpath queries.\n+ * </p>\n+ * <p><b>-T</b> option prints AST tree of the checked file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar -T Main.java\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * |--MODIFIERS -&gt; MODIFIERS [1:0]\n+ * |   `--LITERAL_PUBLIC -&gt; public [1:0]\n+ * |--LITERAL_CLASS -&gt; class [1:7]\n+ * |--IDENT -&gt; Main [1:13]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--LCURLY -&gt; { [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * |   |--MODIFIERS -&gt; MODIFIERS [2:4]\n+ * |   |   `--LITERAL_PUBLIC -&gt; public [2:4]\n+ * |   |--TYPE -&gt; TYPE [2:11]\n+ * |   |   `--IDENT -&gt; String [2:11]\n+ * |   |--IDENT -&gt; sayHello [2:18]\n+ * |   |--LPAREN -&gt; ( [2:26]\n+ * |   |--PARAMETERS -&gt; PARAMETERS [2:27]\n+ * |   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]\n+ * |   |       |--MODIFIERS -&gt; MODIFIERS [2:27]\n+ * |   |       |--TYPE -&gt; TYPE [2:27]\n+ * |   |       |   `--IDENT -&gt; String [2:27]\n+ * |   |       `--IDENT -&gt; name [2:34]\n+ * |   |--RPAREN -&gt; ) [2:38]\n+ * |   `--SLIST -&gt; { [2:40]\n+ * |       |--LITERAL_RETURN -&gt; return [3:8]\n+ * |       |   |--EXPR -&gt; EXPR [3:25]\n+ * |       |   |   `--PLUS -&gt; + [3:25]\n+ * |       |   |       |--STRING_LITERAL -&gt; \"Hello, \" [3:15]\n+ * |       |   |       `--IDENT -&gt; name [3:27]\n+ * |       |   `--SEMI -&gt; ; [3:31]\n+ * |       `--RCURLY -&gt; } [4:4]\n+ * `--RCURLY -&gt; } [5:0]\n+ * </pre>\n+ * <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be used to\n+ * validate accuracy of Xpath query against given file.</p>\n+ * <pre>\n+ * $ java -jar checkstyle-X.XX-all.jar Main.java -b \"//METHOD_DEF[./IDENT[@text='sayHello']]\"\n+ * CLASS_DEF -&gt; CLASS_DEF [1:0]\n+ * `--OBJBLOCK -&gt; OBJBLOCK [1:18]\n+ * |--METHOD_DEF -&gt; METHOD_DEF [2:4]\n+ * </pre>\n+ * <p>\n+ * The following example demonstrates validation of methods order, so that public methods should\n+ * come before the private ones:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[.//LITERAL_PRIVATE and\n+ *  following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Private methods must appear after public methods&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void method1() { }\n+ *  private void method2() { } // violation\n+ *  public void method3() { }\n+ *  private void method4() { } // violation\n+ *  public void method5() { }\n+ *  private void method6() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if there are any parametrized constructors\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//CTOR_DEF[count(./PARAMETERS/*) &gt; 0]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Parameterized constructors are not allowed&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public Test(Object c) { } // violation\n+ *  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation\n+ *  public Test() { } // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if method name is 'test' or 'foo'\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"MatchXpath\"&gt;\n+ *  &lt;property name=\"query\" value=\"//METHOD_DEF[./IDENT[@text='test' or @text='foo']]\"/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;Method name should not be 'test' or 'foo'&quot;/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class Test {\n+ *  public void test() {} // violation\n+ *  public void getName() {} // ok\n+ *  public void foo() {} // violation\n+ *  public void sayHello() {} // ok\n+ * }\n+ * </pre>\n+ * <p>\n+ * To violate if new instance creation was done without <b>var</b> type\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;MatchXpath&quot;&gt;\n+ *  &lt;property name=&quot;query&quot; value=&quot;//VARIABLE_DEF[./ASSIGN/EXPR/LITERAL_NEW\n+ *  and not(./TYPE/IDENT[@text='var'])]&quot;/&gt;\n+ *  &lt;message key=&quot;matchxpath.match&quot;\n+ *  value=&quot;New instances should be created via 'var' keyword&quot;/&gt;", "originalCommit": "c1e5fd9fbd7f67d598507771e191d9083ffd8567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI4MTI0NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8902#discussion_r535281245", "bodyText": "done", "author": "timurt", "createdAt": "2020-12-03T14:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1NjQ2OQ=="}], "type": "inlineReview"}, {"oid": "d6684c1c9a56157a552d3b9a378c24a40dafb9a4", "url": "https://github.com/checkstyle/checkstyle/commit/d6684c1c9a56157a552d3b9a378c24a40dafb9a4", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-03T14:36:49Z", "type": "forcePushed"}, {"oid": "3a7d352676bf3492a36a0ae6a0256a688a3d9b4f", "url": "https://github.com/checkstyle/checkstyle/commit/3a7d352676bf3492a36a0ae6a0256a688a3d9b4f", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-03T14:47:24Z", "type": "forcePushed"}, {"oid": "a7a5b03ba3fecb2caf7036b0937144f3bb2c9d6f", "url": "https://github.com/checkstyle/checkstyle/commit/a7a5b03ba3fecb2caf7036b0937144f3bb2c9d6f", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-03T15:08:17Z", "type": "forcePushed"}, {"oid": "a1b342dc4a9e8fff560555a05dd27c48d4bd3b8a", "url": "https://github.com/checkstyle/checkstyle/commit/a1b342dc4a9e8fff560555a05dd27c48d4bd3b8a", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-03T15:33:53Z", "type": "forcePushed"}, {"oid": "daaae34177074ce130df15bf1662d023ac7f7d3b", "url": "https://github.com/checkstyle/checkstyle/commit/daaae34177074ce130df15bf1662d023ac7f7d3b", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-04T08:46:03Z", "type": "commit"}, {"oid": "daaae34177074ce130df15bf1662d023ac7f7d3b", "url": "https://github.com/checkstyle/checkstyle/commit/daaae34177074ce130df15bf1662d023ac7f7d3b", "message": "Issue #6481: Generic XPath check", "committedDate": "2020-12-04T08:46:03Z", "type": "forcePushed"}]}