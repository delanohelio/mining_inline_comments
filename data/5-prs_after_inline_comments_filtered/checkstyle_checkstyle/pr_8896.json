{"pr_number": 8896, "pr_title": "Issue #8341: add LambdaBodyLengthCheck", "pr_createdAt": "2020-10-13T14:00:34Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8896", "timeline": [{"oid": "c702f2180cf77ea24617e7663d9c3fd6cc76bbc0", "url": "https://github.com/checkstyle/checkstyle/commit/c702f2180cf77ea24617e7663d9c3fd6cc76bbc0", "message": "Issue #8341: Add LambdaBodyLengthCheck", "committedDate": "2020-10-13T15:04:17Z", "type": "forcePushed"}, {"oid": "6d691839156b97daa76607bc4be00f008ce33773", "url": "https://github.com/checkstyle/checkstyle/commit/6d691839156b97daa76607bc4be00f008ce33773", "message": "Issue #8341: Add LambdaBodyLengthCheck", "committedDate": "2020-10-15T13:52:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2MjgyNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r505562826", "bodyText": "// line 2 what for this ?\ndo you mean // line 2 of lambda, if yes , please update a comment.", "author": "romani", "createdAt": "2020-10-15T13:55:48Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -> { // violation, 11 lines\n+ *       System.out.println(2); // line 2\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *       System.out.println(10);\n+ *   }; // line 11\n+ *\n+ *   Runnable r2 = () -> // violation, 11 lines\n+ *       \"someString\".trim() // line 1\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim(); // line 11\n+ *\n+ *   Runnable r3 = () -> { // ok, 10 lines\n+ *       System.out.println(2); // line 2\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *   }; // line 10\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to accept lambda bodies with max 5 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -> { // violation, 6 lines\n+ *       System.out.println(2); // line 2", "originalCommit": "6d691839156b97daa76607bc4be00f008ce33773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3ODgyNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506178825", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-16T08:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2MjgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NjAzMA==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r505566030", "bodyText": "we keep setters after fields usually, strange that non of Check of methods order is not complaining on this.", "author": "romani", "createdAt": "2020-10-15T13:59:38Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -> { // violation, 11 lines\n+ *       System.out.println(2); // line 2\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *       System.out.println(10);\n+ *   }; // line 11\n+ *\n+ *   Runnable r2 = () -> // violation, 11 lines\n+ *       \"someString\".trim() // line 1\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim(); // line 11\n+ *\n+ *   Runnable r3 = () -> { // ok, 10 lines\n+ *       System.out.println(2); // line 2\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *   }; // line 10\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to accept lambda bodies with max 5 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -> { // violation, 6 lines\n+ *       System.out.println(2); // line 2\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *   };\n+ *\n+ *   Runnable r2 = () -> // violation, 6 lines\n+ *       \"someString\".trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim();\n+ *\n+ *   Runnable r3 = () -> { // ok, 5 lines\n+ *       System.out.println(2);\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code maxLen.lambdaBody}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class LambdaBodyLengthCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"maxLen.lambdaBody\";\n+\n+    /** Default maximum number of lines. */\n+    private static final int DEFAULT_MAX = 10;\n+\n+    /** Specify the maximum number of lines allowed. */\n+    private int max = DEFAULT_MAX;\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.LAMBDA};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() != TokenTypes.SWITCH_RULE) {\n+            final int length = getLength(ast);\n+            if (length > max) {\n+                log(ast, MSG_KEY, length, max);\n+            }\n+        }\n+    }\n+\n+    private static int getLength(DetailAST ast) {\n+        final DetailAST lambdaBody = ast.getLastChild();\n+        final int length;\n+        if (lambdaBody.getType() == TokenTypes.SLIST) {\n+            length = lambdaBody.getLastChild().getLineNo() - lambdaBody.getLineNo();\n+        }\n+        else {\n+            length = getLastNodeLineNumber(lambdaBody) - getFirstNodeLineNumber(lambdaBody);\n+        }\n+        return length + 1;\n+    }\n+\n+    /**\n+     * Get last node line number.\n+     *\n+     * @param lambdaBody lambda body node.\n+     * @return last node line number.\n+     */\n+    private static int getLastNodeLineNumber(DetailAST lambdaBody) {\n+        DetailAST node = lambdaBody.getLastChild();\n+        int result = node.getLineNo();\n+        while (node != null) {\n+            result = node.getLineNo();\n+            node = node.getLastChild();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get first node line number.\n+     *\n+     * @param lambdaBody lambda body node.\n+     * @return first node line number.\n+     */\n+    private static int getFirstNodeLineNumber(DetailAST lambdaBody) {\n+        DetailAST node = lambdaBody.getFirstChild();\n+        int result = node.getLineNo();\n+        while (node != null) {\n+            result = node.getLineNo();\n+            node = node.getFirstChild();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Setter to specify the maximum number of lines allowed.\n+     *\n+     * @param length the maximum length of lambda body.\n+     */\n+    public void setMax(int length) {", "originalCommit": "6d691839156b97daa76607bc4be00f008ce33773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2ODgyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r505568822", "bodyText": "I copied it from AnonInnerLengthCheck, so it remained in same place (may be some other checks have same issue).\nWill move it.", "author": "strkkk", "createdAt": "2020-10-15T14:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NjAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3ODY5MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506178690", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-16T08:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NjAzMA=="}], "type": "inlineReview"}, {"oid": "b5a97e2c3a74e15a67a6387c20e81ebce0da8298", "url": "https://github.com/checkstyle/checkstyle/commit/b5a97e2c3a74e15a67a6387c20e81ebce0da8298", "message": "Issue #8341: Add LambdaBodyLengthCheck", "committedDate": "2020-10-16T08:40:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0OTIxNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506349216", "bodyText": "please use .concat(\"2\")..concat(\"3\") , same idea as in previous example, I like it , it is very visual.", "author": "romani", "createdAt": "2020-10-16T12:08:49Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 11 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *       System.out.println(10);\n+ *   }; // line 11\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 11 lines\n+ *       \"someString\".trim() // line 1 of lambda\n+ *                   .trim()", "originalCommit": "b5a97e2c3a74e15a67a6387c20e81ebce0da8298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NDQyNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506544424", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-16T15:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0OTIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjA4Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506356082", "bodyText": "please confirm that we count lines with curly braces in other Checks.\nUsers might find it not obvious that counting is different for cases with and without curly braces.\nthey are visually take the same size on screen, so might have same way of counting.", "author": "romani", "createdAt": "2020-10-16T12:18:44Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 11 lines\n+ *       System.out.println(2); // line 2 of lambda", "originalCommit": "b5a97e2c3a74e15a67a6387c20e81ebce0da8298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMzAxNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506533017", "bodyText": "MethodLengthCheck\n\n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java\n    \n    \n        Lines 160 to 161\n      in\n      3c2249b\n    \n    \n    \n    \n\n        \n          \n           private int getLengthOfBlock(DetailAST openingBrace, DetailAST closingBrace) { \n        \n\n        \n          \n               int length = closingBrace.getLineNo() - openingBrace.getLineNo() + 1; \n        \n    \n  \n\n\nAnonInnerLengthCheck\n\n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java\n    \n    \n        Lines 109 to 110\n      in\n      3c2249b\n    \n    \n    \n    \n\n        \n          \n           final int length = \n        \n\n        \n          \n               closingBrace.getLineNo() - openingBrace.getLineNo() + 1;", "author": "strkkk", "createdAt": "2020-10-16T15:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3Njc5Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r509276792", "bodyText": "but all such cases cannot skip { and identification(name of class, method) usually stay on same line as {.\nSo we count them as they are part of what user has to read/view.\nthe same for lambda as arguments  () -> are also part that use must see/read/...", "author": "romani", "createdAt": "2020-10-21T13:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1OTQ2MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506359460", "bodyText": "please use line number of lamba in argument of method , it is really cool idea to make it more visual.", "author": "romani", "createdAt": "2020-10-16T12:23:17Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/lambdabodylength/InputLambdaBodyLengthSwitchExps.java", "diffHunk": "@@ -0,0 +1,34 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.sizes.lambdabodylength;\n+\n+import java.util.stream.Stream;\n+\n+/* Config: default\n+ */\n+public class InputLambdaBodyLengthSwitchExps {\n+\n+    boolean method1(Nums k, String string) {\n+        switch (k) {\n+        case ONE -> { // ok\n+            Stream.of(string.split(\" \"))\n+                .anyMatch(Word -> \"in\".equals(Word));\n+            System.out.println(1);", "originalCommit": "b5a97e2c3a74e15a67a6387c20e81ebce0da8298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NDU4NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506544584", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-16T15:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1OTQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1OTk1MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506359950", "bodyText": "\"10\"", "author": "romani", "createdAt": "2020-10-16T12:23:55Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/lambdabodylength/InputLambdaBodyLengthDefault.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.puppycrawl.tools.checkstyle.checks.sizes.lambdabodylength;\n+\n+import java.util.List;\n+import java.util.function.*;\n+\n+/*\n+* Config = default\n+ */\n+public class InputLambdaBodyLengthDefault {\n+    {\n+        List<String> list = null;\n+        list.forEach(item -> { // violation\n+            System.out.println(1);\n+            System.out.println(2);\n+            System.out.println(3);\n+            System.out.println(4);\n+            System.out.println(5);\n+            System.out.println(6);\n+            System.out.println(7);\n+            System.out.println(8);\n+            System.out.println(9);\n+            System.out.println(10);\n+        });\n+        list.forEach(item -> System.out.println( // violation\n+            item.trim()\n+                .trim()\n+                .trim()\n+                .trim()\n+                .trim()\n+                .trim()\n+                .trim()\n+                .trim()\n+                .trim()\n+                .trim()\n+            )\n+        );\n+        list.forEach(item -> // violation\n+            System\n+\n+                .\n+\n+                    out\n+\n+                .\n+                    println\n+                        (\n+                            item\n+                        )\n+        );\n+        Supplier<Runnable> s = () -> // violation\n+            (\n+\n+            ) -> { // violation\n+\n+                // some lambda body code\n+\n+\n+\n+\n+\n+\n+\n+            };\n+        Supplier<String> s1 = () -> // violation, 11 lines\n+            \"1\"\n+                + \"2\"\n+                + \"3\"\n+                + \"4\"\n+                + \"5\"\n+                + \"6\"\n+                + \"7\"\n+                + \"8\"\n+                + \"9\"\n+                + \"0\"\n+                + \"1\"\n+            ;\n+        Supplier<String> s2 = () -> // ok, 10 lines\n+            \"1\"\n+                + \"2\"\n+                + \"3\"\n+                + \"4\"\n+                + \"5\"\n+                + \"6\"\n+                + \"7\"\n+                + \"8\"\n+                + \"9\"\n+                + \"0\"", "originalCommit": "b5a97e2c3a74e15a67a6387c20e81ebce0da8298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NDc5Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506544797", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-16T15:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1OTk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MDU2Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506360563", "bodyText": "please add line number in argument here too.\nPlease do this for all cases where applicable.", "author": "romani", "createdAt": "2020-10-16T12:24:43Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/lambdabodylength/InputLambdaBodyLengthDefault.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.puppycrawl.tools.checkstyle.checks.sizes.lambdabodylength;\n+\n+import java.util.List;\n+import java.util.function.*;\n+\n+/*\n+* Config = default\n+ */\n+public class InputLambdaBodyLengthDefault {\n+    {\n+        List<String> list = null;\n+        list.forEach(item -> { // violation\n+            System.out.println(1);\n+            System.out.println(2);\n+            System.out.println(3);\n+            System.out.println(4);\n+            System.out.println(5);\n+            System.out.println(6);\n+            System.out.println(7);\n+            System.out.println(8);\n+            System.out.println(9);\n+            System.out.println(10);\n+        });\n+        list.forEach(item -> System.out.println( // violation\n+            item.trim()\n+                .trim()", "originalCommit": "b5a97e2c3a74e15a67a6387c20e81ebce0da8298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NTIyNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506545225", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-16T15:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MDU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2MDU2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506460565", "bodyText": "Please change this loop to do { ... } while(). It is strange to see node != null after node.getLineNo().", "author": "pbludov", "createdAt": "2020-10-16T14:04:19Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 11 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *       System.out.println(10);\n+ *   }; // line 11\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 11 lines\n+ *       \"someString\".trim() // line 1 of lambda\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim(); // line 11\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 10 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *   }; // line 10\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to accept lambda bodies with max 5 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 6 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *   };\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 6 lines\n+ *       \"someString\".trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim();\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 5 lines\n+ *       System.out.println(2);\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code maxLen.lambdaBody}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class LambdaBodyLengthCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"maxLen.lambdaBody\";\n+\n+    /** Default maximum number of lines. */\n+    private static final int DEFAULT_MAX = 10;\n+\n+    /** Specify the maximum number of lines allowed. */\n+    private int max = DEFAULT_MAX;\n+\n+    /**\n+     * Setter to specify the maximum number of lines allowed.\n+     *\n+     * @param length the maximum length of lambda body.\n+     */\n+    public void setMax(int length) {\n+        max = length;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.LAMBDA};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() != TokenTypes.SWITCH_RULE) {\n+            final int length = getLength(ast);\n+            if (length > max) {\n+                log(ast, MSG_KEY, length, max);\n+            }\n+        }\n+    }\n+\n+    private static int getLength(DetailAST ast) {\n+        final DetailAST lambdaBody = ast.getLastChild();\n+        final int length;\n+        if (lambdaBody.getType() == TokenTypes.SLIST) {\n+            length = lambdaBody.getLastChild().getLineNo() - lambdaBody.getLineNo();\n+        }\n+        else {\n+            length = getLastNodeLineNumber(lambdaBody) - getFirstNodeLineNumber(lambdaBody);\n+        }\n+        return length + 1;\n+    }\n+\n+    /**\n+     * Get last node line number.\n+     *\n+     * @param lambdaBody lambda body node.\n+     * @return last node line number.\n+     */\n+    private static int getLastNodeLineNumber(DetailAST lambdaBody) {\n+        DetailAST node = lambdaBody.getLastChild();\n+        int result = node.getLineNo();\n+        while (node != null) {", "originalCommit": "b5a97e2c3a74e15a67a6387c20e81ebce0da8298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NTMxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506545318", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-16T15:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2MDU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2MjA3OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506462079", "bodyText": "Same here", "author": "pbludov", "createdAt": "2020-10-16T14:05:29Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 11 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *       System.out.println(10);\n+ *   }; // line 11\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 11 lines\n+ *       \"someString\".trim() // line 1 of lambda\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim(); // line 11\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 10 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *   }; // line 10\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to accept lambda bodies with max 5 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 6 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *   };\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 6 lines\n+ *       \"someString\".trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim()\n+ *                   .trim();\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 5 lines\n+ *       System.out.println(2);\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code maxLen.lambdaBody}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class LambdaBodyLengthCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"maxLen.lambdaBody\";\n+\n+    /** Default maximum number of lines. */\n+    private static final int DEFAULT_MAX = 10;\n+\n+    /** Specify the maximum number of lines allowed. */\n+    private int max = DEFAULT_MAX;\n+\n+    /**\n+     * Setter to specify the maximum number of lines allowed.\n+     *\n+     * @param length the maximum length of lambda body.\n+     */\n+    public void setMax(int length) {\n+        max = length;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.LAMBDA};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() != TokenTypes.SWITCH_RULE) {\n+            final int length = getLength(ast);\n+            if (length > max) {\n+                log(ast, MSG_KEY, length, max);\n+            }\n+        }\n+    }\n+\n+    private static int getLength(DetailAST ast) {\n+        final DetailAST lambdaBody = ast.getLastChild();\n+        final int length;\n+        if (lambdaBody.getType() == TokenTypes.SLIST) {\n+            length = lambdaBody.getLastChild().getLineNo() - lambdaBody.getLineNo();\n+        }\n+        else {\n+            length = getLastNodeLineNumber(lambdaBody) - getFirstNodeLineNumber(lambdaBody);\n+        }\n+        return length + 1;\n+    }\n+\n+    /**\n+     * Get last node line number.\n+     *\n+     * @param lambdaBody lambda body node.\n+     * @return last node line number.\n+     */\n+    private static int getLastNodeLineNumber(DetailAST lambdaBody) {\n+        DetailAST node = lambdaBody.getLastChild();\n+        int result = node.getLineNo();\n+        while (node != null) {\n+            result = node.getLineNo();\n+            node = node.getLastChild();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get first node line number.\n+     *\n+     * @param lambdaBody lambda body node.\n+     * @return first node line number.\n+     */\n+    private static int getFirstNodeLineNumber(DetailAST lambdaBody) {\n+        DetailAST node = lambdaBody.getFirstChild();\n+        int result = node.getLineNo();\n+        while (node != null) {", "originalCommit": "b5a97e2c3a74e15a67a6387c20e81ebce0da8298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NTM3Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r506545376", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-16T15:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2MjA3OQ=="}], "type": "inlineReview"}, {"oid": "a7d8641103adf2abc63be45df91133019bbd3489", "url": "https://github.com/checkstyle/checkstyle/commit/a7d8641103adf2abc63be45df91133019bbd3489", "message": "Issue #8341: Add LambdaBodyLengthCheck", "committedDate": "2020-10-16T15:22:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjAxNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r512356014", "bodyText": "How sure are we can always use last node? Some nodes like + re-arrange the tokens so the last may not always have the max line number.", "author": "rnveach", "createdAt": "2020-10-27T01:04:33Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 11 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *       System.out.println(10);\n+ *   }; // line 11\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 11 lines\n+ *       \"someString\".concat(\"1\") // line 1 of lambda\n+ *                   .concat(\"2\")\n+ *                   .concat(\"3\")\n+ *                   .concat(\"4\")\n+ *                   .concat(\"5\")\n+ *                   .concat(\"6\")\n+ *                   .concat(\"7\")\n+ *                   .concat(\"8\")\n+ *                   .concat(\"9\")\n+ *                   .concat(\"10\")\n+ *                   .concat(\"11\"); // line 11\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 10 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *   }; // line 10\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to accept lambda bodies with max 5 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 6 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *   };\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 6 lines\n+ *       \"someString\".concat(\"1\")\n+ *                   .concat(\"2\")\n+ *                   .concat(\"3\")\n+ *                   .concat(\"4\")\n+ *                   .concat(\"5\")\n+ *                   .concat(\"6\");\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 5 lines\n+ *       System.out.println(2);\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code maxLen.lambdaBody}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class LambdaBodyLengthCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"maxLen.lambdaBody\";\n+\n+    /** Default maximum number of lines. */\n+    private static final int DEFAULT_MAX = 10;\n+\n+    /** Specify the maximum number of lines allowed. */\n+    private int max = DEFAULT_MAX;\n+\n+    /**\n+     * Setter to specify the maximum number of lines allowed.\n+     *\n+     * @param length the maximum length of lambda body.\n+     */\n+    public void setMax(int length) {\n+        max = length;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.LAMBDA};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() != TokenTypes.SWITCH_RULE) {\n+            final int length = getLength(ast);\n+            if (length > max) {\n+                log(ast, MSG_KEY, length, max);\n+            }\n+        }\n+    }\n+\n+    private static int getLength(DetailAST ast) {\n+        final DetailAST lambdaBody = ast.getLastChild();\n+        final int length;\n+        if (lambdaBody.getType() == TokenTypes.SLIST) {\n+            length = lambdaBody.getLastChild().getLineNo() - lambdaBody.getLineNo();\n+        }\n+        else {\n+            length = getLastNodeLineNumber(lambdaBody) - getFirstNodeLineNumber(lambdaBody);\n+        }\n+        return length + 1;\n+    }\n+\n+    /**\n+     * Get last node line number.\n+     *\n+     * @param lambdaBody lambda body node.\n+     * @return last node line number.\n+     */\n+    private static int getLastNodeLineNumber(DetailAST lambdaBody) {\n+        DetailAST node = lambdaBody;\n+        int result;\n+        do {\n+            result = node.getLineNo();\n+            node = node.getLastChild();", "originalCommit": "a7d8641103adf2abc63be45df91133019bbd3489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyMjkwNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r512722907", "bodyText": "I am not sure how I can prove it, it just seems reasonable.\nCan you give examples of specific tokens in expression, where left outmost child can have not lowest line and right outmost can have not biggest?", "author": "strkkk", "createdAt": "2020-10-27T14:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NjMyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r513086322", "bodyText": "I am not sure what you mean by \"left\" child, but here is an example tree that applies to one of these comments and not the other. I don't have any examples of the reverse off the top of my head. It may not happen. Note its not a lambda, as I am not very familar with them but it should be possible to create one from it.\nString s\n=\n\"a\"\n+\n\"b\"\n;\n\n    |      |--VARIABLE_DEF -> VARIABLE_DEF [3:0]\n    |      |  |--MODIFIERS -> MODIFIERS [3:0]\n    |      |  |--TYPE -> TYPE [3:0]\n    |      |  |  `--IDENT -> String [3:0]\n    |      |  |--IDENT -> s [3:7]\n    |      |  `--ASSIGN -> = [4:0]\n    |      |      `--EXPR -> EXPR [6:0]\n    |      |          `--PLUS -> + [6:0]\n    |      |              |--STRING_LITERAL -> \"a\" [5:0]\n    |      |              `--STRING_LITERAL -> \"b\" [7:0]\n    |      |--SEMI -> ; [8:0]\n\nNote \"a\" and \"b\" are not in line order compared to PLUS token.", "author": "rnveach", "createdAt": "2020-10-27T23:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzNDg5Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r513234892", "bodyText": "yes, but it should not be a problem, since code digs down to lowest level and checking outmost left leaf of the tree to outmost right leaf of the tree.\nEven if this case order of PLUS token does not matter since code goes down to STRING_LITERAL tokens, which are ordered correctly. Also, there is a test case for plus expression.", "author": "strkkk", "createdAt": "2020-10-28T07:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyNDc2OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r513524768", "bodyText": "Also there is same way to get lambda last child in other check and there is no issues (code was added more than year ago)\n\n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n    \n    \n        Lines 485 to 491\n      in\n      de2f537\n    \n    \n    \n    \n\n        \n          \n           private static DetailAST getLastLambdaToken(DetailAST lambda) { \n        \n\n        \n          \n               DetailAST node = lambda; \n        \n\n        \n          \n               do { \n        \n\n        \n          \n                   node = node.getLastChild(); \n        \n\n        \n          \n               } while (node.getLastChild() != null); \n        \n\n        \n          \n               return node; \n        \n\n        \n          \n           }", "author": "strkkk", "createdAt": "2020-10-28T15:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjIwNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r512356205", "bodyText": "please expand description to say we last child node in the tree.", "author": "rnveach", "createdAt": "2020-10-27T01:05:15Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 11 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *       System.out.println(10);\n+ *   }; // line 11\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 11 lines\n+ *       \"someString\".concat(\"1\") // line 1 of lambda\n+ *                   .concat(\"2\")\n+ *                   .concat(\"3\")\n+ *                   .concat(\"4\")\n+ *                   .concat(\"5\")\n+ *                   .concat(\"6\")\n+ *                   .concat(\"7\")\n+ *                   .concat(\"8\")\n+ *                   .concat(\"9\")\n+ *                   .concat(\"10\")\n+ *                   .concat(\"11\"); // line 11\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 10 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *   }; // line 10\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to accept lambda bodies with max 5 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 6 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *   };\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 6 lines\n+ *       \"someString\".concat(\"1\")\n+ *                   .concat(\"2\")\n+ *                   .concat(\"3\")\n+ *                   .concat(\"4\")\n+ *                   .concat(\"5\")\n+ *                   .concat(\"6\");\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 5 lines\n+ *       System.out.println(2);\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code maxLen.lambdaBody}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class LambdaBodyLengthCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"maxLen.lambdaBody\";\n+\n+    /** Default maximum number of lines. */\n+    private static final int DEFAULT_MAX = 10;\n+\n+    /** Specify the maximum number of lines allowed. */\n+    private int max = DEFAULT_MAX;\n+\n+    /**\n+     * Setter to specify the maximum number of lines allowed.\n+     *\n+     * @param length the maximum length of lambda body.\n+     */\n+    public void setMax(int length) {\n+        max = length;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.LAMBDA};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() != TokenTypes.SWITCH_RULE) {\n+            final int length = getLength(ast);\n+            if (length > max) {\n+                log(ast, MSG_KEY, length, max);\n+            }\n+        }\n+    }\n+\n+    private static int getLength(DetailAST ast) {\n+        final DetailAST lambdaBody = ast.getLastChild();\n+        final int length;\n+        if (lambdaBody.getType() == TokenTypes.SLIST) {\n+            length = lambdaBody.getLastChild().getLineNo() - lambdaBody.getLineNo();\n+        }\n+        else {\n+            length = getLastNodeLineNumber(lambdaBody) - getFirstNodeLineNumber(lambdaBody);\n+        }\n+        return length + 1;\n+    }\n+\n+    /**\n+     * Get last node line number.", "originalCommit": "a7d8641103adf2abc63be45df91133019bbd3489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyMDg0MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r512720841", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-27T14:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjI3NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r512356275", "bodyText": "Similar.", "author": "rnveach", "createdAt": "2020-10-27T01:05:32Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 11 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *       System.out.println(10);\n+ *   }; // line 11\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 11 lines\n+ *       \"someString\".concat(\"1\") // line 1 of lambda\n+ *                   .concat(\"2\")\n+ *                   .concat(\"3\")\n+ *                   .concat(\"4\")\n+ *                   .concat(\"5\")\n+ *                   .concat(\"6\")\n+ *                   .concat(\"7\")\n+ *                   .concat(\"8\")\n+ *                   .concat(\"9\")\n+ *                   .concat(\"10\")\n+ *                   .concat(\"11\"); // line 11\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 10 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *   }; // line 10\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to accept lambda bodies with max 5 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 6 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *   };\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 6 lines\n+ *       \"someString\".concat(\"1\")\n+ *                   .concat(\"2\")\n+ *                   .concat(\"3\")\n+ *                   .concat(\"4\")\n+ *                   .concat(\"5\")\n+ *                   .concat(\"6\");\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 5 lines\n+ *       System.out.println(2);\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code maxLen.lambdaBody}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class LambdaBodyLengthCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"maxLen.lambdaBody\";\n+\n+    /** Default maximum number of lines. */\n+    private static final int DEFAULT_MAX = 10;\n+\n+    /** Specify the maximum number of lines allowed. */\n+    private int max = DEFAULT_MAX;\n+\n+    /**\n+     * Setter to specify the maximum number of lines allowed.\n+     *\n+     * @param length the maximum length of lambda body.\n+     */\n+    public void setMax(int length) {\n+        max = length;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.LAMBDA};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() != TokenTypes.SWITCH_RULE) {\n+            final int length = getLength(ast);\n+            if (length > max) {\n+                log(ast, MSG_KEY, length, max);\n+            }\n+        }\n+    }\n+\n+    private static int getLength(DetailAST ast) {\n+        final DetailAST lambdaBody = ast.getLastChild();\n+        final int length;\n+        if (lambdaBody.getType() == TokenTypes.SLIST) {\n+            length = lambdaBody.getLastChild().getLineNo() - lambdaBody.getLineNo();\n+        }\n+        else {\n+            length = getLastNodeLineNumber(lambdaBody) - getFirstNodeLineNumber(lambdaBody);\n+        }\n+        return length + 1;\n+    }\n+\n+    /**\n+     * Get last node line number.\n+     *\n+     * @param lambdaBody lambda body node.\n+     * @return last node line number.\n+     */\n+    private static int getLastNodeLineNumber(DetailAST lambdaBody) {\n+        DetailAST node = lambdaBody;\n+        int result;\n+        do {\n+            result = node.getLineNo();\n+            node = node.getLastChild();\n+        } while (node != null);\n+        return result;\n+    }\n+\n+    /**\n+     * Get first node line number.", "originalCommit": "a7d8641103adf2abc63be45df91133019bbd3489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyMDk0Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r512720946", "bodyText": "done", "author": "strkkk", "createdAt": "2020-10-27T14:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjMwMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r512356301", "bodyText": "Similar.", "author": "rnveach", "createdAt": "2020-10-27T01:05:43Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LambdaBodyLengthCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.sizes;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+\n+/**\n+ * <p>\n+ * Checks lambda body length.\n+ * </p>\n+ * <p>\n+ * Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n+ * it is hard to understand and to see the flow of the method\n+ * where the lambda is defined. Therefore long lambda body\n+ * should usually be extracted to method.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code max} - Specify the maximum number of lines allowed.\n+ * Type is {@code int}.\n+ * Default value is {@code 10}.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check to accept lambda bodies with up to 10 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 11 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *       System.out.println(10);\n+ *   }; // line 11\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 11 lines\n+ *       \"someString\".concat(\"1\") // line 1 of lambda\n+ *                   .concat(\"2\")\n+ *                   .concat(\"3\")\n+ *                   .concat(\"4\")\n+ *                   .concat(\"5\")\n+ *                   .concat(\"6\")\n+ *                   .concat(\"7\")\n+ *                   .concat(\"8\")\n+ *                   .concat(\"9\")\n+ *                   .concat(\"10\")\n+ *                   .concat(\"11\"); // line 11\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 10 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *       System.out.println(6);\n+ *       System.out.println(7);\n+ *       System.out.println(8);\n+ *       System.out.println(9);\n+ *   }; // line 10\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to accept lambda bodies with max 5 lines:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"LambdaBodyLength\"&gt;\n+ *   &lt;property name=\"max\" value=\"5\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class Test {\n+ *   Runnable r = () -&gt; { // violation, 6 lines\n+ *       System.out.println(2); // line 2 of lambda\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *       System.out.println(5);\n+ *   };\n+ *\n+ *   Runnable r2 = () -&gt; // violation, 6 lines\n+ *       \"someString\".concat(\"1\")\n+ *                   .concat(\"2\")\n+ *                   .concat(\"3\")\n+ *                   .concat(\"4\")\n+ *                   .concat(\"5\")\n+ *                   .concat(\"6\");\n+ *\n+ *   Runnable r3 = () -&gt; { // ok, 5 lines\n+ *       System.out.println(2);\n+ *       System.out.println(3);\n+ *       System.out.println(4);\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code maxLen.lambdaBody}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.37\n+ */\n+@StatelessCheck\n+public class LambdaBodyLengthCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"maxLen.lambdaBody\";\n+\n+    /** Default maximum number of lines. */\n+    private static final int DEFAULT_MAX = 10;\n+\n+    /** Specify the maximum number of lines allowed. */\n+    private int max = DEFAULT_MAX;\n+\n+    /**\n+     * Setter to specify the maximum number of lines allowed.\n+     *\n+     * @param length the maximum length of lambda body.\n+     */\n+    public void setMax(int length) {\n+        max = length;\n+    }\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.LAMBDA};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() != TokenTypes.SWITCH_RULE) {\n+            final int length = getLength(ast);\n+            if (length > max) {\n+                log(ast, MSG_KEY, length, max);\n+            }\n+        }\n+    }\n+\n+    private static int getLength(DetailAST ast) {\n+        final DetailAST lambdaBody = ast.getLastChild();\n+        final int length;\n+        if (lambdaBody.getType() == TokenTypes.SLIST) {\n+            length = lambdaBody.getLastChild().getLineNo() - lambdaBody.getLineNo();\n+        }\n+        else {\n+            length = getLastNodeLineNumber(lambdaBody) - getFirstNodeLineNumber(lambdaBody);\n+        }\n+        return length + 1;\n+    }\n+\n+    /**\n+     * Get last node line number.\n+     *\n+     * @param lambdaBody lambda body node.\n+     * @return last node line number.\n+     */\n+    private static int getLastNodeLineNumber(DetailAST lambdaBody) {\n+        DetailAST node = lambdaBody;\n+        int result;\n+        do {\n+            result = node.getLineNo();\n+            node = node.getLastChild();\n+        } while (node != null);\n+        return result;\n+    }\n+\n+    /**\n+     * Get first node line number.\n+     *\n+     * @param lambdaBody lambda body node.\n+     * @return first node line number.\n+     */\n+    private static int getFirstNodeLineNumber(DetailAST lambdaBody) {\n+        DetailAST node = lambdaBody;\n+        int result;\n+        do {\n+            result = node.getLineNo();\n+            node = node.getFirstChild();", "originalCommit": "a7d8641103adf2abc63be45df91133019bbd3489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyNjI2MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8896#discussion_r512726261", "bodyText": "replied above", "author": "strkkk", "createdAt": "2020-10-27T14:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1NjMwMQ=="}], "type": "inlineReview"}, {"oid": "4b55958f140df7f98e9530c089b6321b04d76ddc", "url": "https://github.com/checkstyle/checkstyle/commit/4b55958f140df7f98e9530c089b6321b04d76ddc", "message": "Issue #8341: Add LambdaBodyLengthCheck", "committedDate": "2020-10-27T14:05:44Z", "type": "commit"}, {"oid": "4b55958f140df7f98e9530c089b6321b04d76ddc", "url": "https://github.com/checkstyle/checkstyle/commit/4b55958f140df7f98e9530c089b6321b04d76ddc", "message": "Issue #8341: Add LambdaBodyLengthCheck", "committedDate": "2020-10-27T14:05:44Z", "type": "forcePushed"}]}