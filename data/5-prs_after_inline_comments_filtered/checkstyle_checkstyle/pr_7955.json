{"pr_number": 7955, "pr_title": "Issue #7473: JavadocMethod: false positive with validateThrows", "pr_createdAt": "2020-03-24T18:59:26Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/7955", "timeline": [{"oid": "7a5698cc1153cec24078c4c0e3c52be269d5bc51", "url": "https://github.com/checkstyle/checkstyle/commit/7a5698cc1153cec24078c4c0e3c52be269d5bc51", "message": "Issue #7473: JavadocMethod: false positive with validateThrows if catched inside the method", "committedDate": "2020-03-25T04:16:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MTQyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r398951422", "bodyText": "DetailAST ancestor = throwAst;\n\n-->\nDetailAST ancestor = throwAst.getParent();\n\nWe do not need to check throw AST itself in while as I understand", "author": "baratali", "createdAt": "2020-03-26T23:28:23Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -701,12 +701,29 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n             final List<DetailAST> throwLiterals = findTokensInAstByType(blockAst,\n                     TokenTypes.LITERAL_THROW);\n             for (DetailAST throwAst : throwLiterals) {\n-                final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n-                if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n-                    final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n-                    final ExceptionInfo exceptionInfo = new ExceptionInfo(\n-                            createClassInfo(new Token(ident), currentClassName));\n-                    returnValue.add(exceptionInfo);\n+                DetailAST ancestor = throwAst;", "originalCommit": "7a5698cc1153cec24078c4c0e3c52be269d5bc51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNzc2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r399217765", "bodyText": "Makes sense. Changed and will update regression soon.", "author": "wltan", "createdAt": "2020-03-27T12:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Mjc0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r398952747", "bodyText": "It's better to extract this part to a method. And I would rename blockAst to methodBodyAst (or something similar).\nAnd then:\nif (!isInTryOrLambda(methodBodyAst, throwAst)) {\n...\n}", "author": "baratali", "createdAt": "2020-03-26T23:32:08Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -701,12 +701,29 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n             final List<DetailAST> throwLiterals = findTokensInAstByType(blockAst,\n                     TokenTypes.LITERAL_THROW);\n             for (DetailAST throwAst : throwLiterals) {\n-                final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n-                if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n-                    final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n-                    final ExceptionInfo exceptionInfo = new ExceptionInfo(\n-                            createClassInfo(new Token(ident), currentClassName));\n-                    returnValue.add(exceptionInfo);\n+                DetailAST ancestor = throwAst;\n+                while (ancestor != blockAst) {\n+                    if (ancestor.getType() == TokenTypes.LITERAL_TRY\n+                            || ancestor.getType() == TokenTypes.LAMBDA) {\n+                        // if the throw is inside a try block or lambda, ignore it\n+                        break;\n+                    }\n+                    if (ancestor.getType() == TokenTypes.LITERAL_CATCH\n+                            || ancestor.getType() == TokenTypes.LITERAL_FINALLY) {\n+                        // if the throw is inside a catch or finally block,\n+                        // skip the immediate ancestor (try token)\n+                        ancestor = ancestor.getParent();\n+                    }\n+                    ancestor = ancestor.getParent();\n+                }\n+                if (ancestor == blockAst) {", "originalCommit": "7a5698cc1153cec24078c4c0e3c52be269d5bc51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTg1Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r399219856", "bodyText": "This section is now on its own method, with methodBodyAst as one of the parameter names.\nBut for the getThrowed method I feel it might be better to keep the existing name and avoid renaming it unnecessarily.", "author": "wltan", "createdAt": "2020-03-27T12:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Mjc0Nw=="}], "type": "inlineReview"}, {"oid": "6b89b3666871547f3cd61fcdb163e6a284fa8025", "url": "https://github.com/checkstyle/checkstyle/commit/6b89b3666871547f3cd61fcdb163e6a284fa8025", "message": "Issue #7473: JavadocMethod: false positive with validateThrows if catched inside the method", "committedDate": "2020-03-27T12:06:04Z", "type": "forcePushed"}, {"oid": "6b37779e37526001b87ee13d165a29069c4c07fb", "url": "https://github.com/checkstyle/checkstyle/commit/6b37779e37526001b87ee13d165a29069c4c07fb", "message": "minor: typo in exceptionInfo", "committedDate": "2020-03-27T14:03:29Z", "type": "forcePushed"}, {"oid": "812601d228334ca2fb2608463d6366cb6a2e1ff2", "url": "https://github.com/checkstyle/checkstyle/commit/812601d228334ca2fb2608463d6366cb6a2e1ff2", "message": "minor: typo in exceptionInfo", "committedDate": "2020-03-29T05:35:03Z", "type": "forcePushed"}, {"oid": "353d3e5354f81cc26264edcf777977cf016a701f", "url": "https://github.com/checkstyle/checkstyle/commit/353d3e5354f81cc26264edcf777977cf016a701f", "message": "minor: typo in exceptionInfo", "committedDate": "2020-03-29T05:39:32Z", "type": "forcePushed"}, {"oid": "a39a36058db911c150b8150b83094fa9477909c5", "url": "https://github.com/checkstyle/checkstyle/commit/a39a36058db911c150b8150b83094fa9477909c5", "message": "minor: typo in exceptionInfo", "committedDate": "2020-03-29T07:15:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1OTc0OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r401259748", "bodyText": "Please rename method to state that we check only try with catch.\nisInTryWithCatchOrLambda or isInTryCatchOrLambda or something else", "author": "baratali", "createdAt": "2020-03-31T22:48:08Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -701,18 +701,48 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n             final List<DetailAST> throwLiterals = findTokensInAstByType(blockAst,\n                     TokenTypes.LITERAL_THROW);\n             for (DetailAST throwAst : throwLiterals) {\n-                final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n-                if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n-                    final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n-                    final ExceptionInfo exceptionInfo = new ExceptionInfo(\n-                            createClassInfo(new Token(ident), currentClassName));\n-                    returnValue.add(exceptionInfo);\n+                if (!isInTryOrLambda(blockAst, throwAst)) {\n+                    final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n+                    if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n+                        final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n+                        final ExceptionInfo exceptionInfo = new ExceptionInfo(\n+                                createClassInfo(new Token(ident), currentClassName));\n+                        returnValue.add(exceptionInfo);\n+                    }\n                 }\n             }\n         }\n         return returnValue;\n     }\n \n+    /**\n+     * Checks if a 'throw' usage is contained within a try block or lambda expression.\n+     * Note that a try block without catch is not considered.\n+     * @param methodBodyAst DetailAST node representing the method body\n+     * @param throwAst DetailAST node representing the 'throw' literal\n+     * @return true if throwAst is inside a try block or lambda\n+     */\n+    private static boolean isInTryOrLambda(DetailAST methodBodyAst, DetailAST throwAst) {", "originalCommit": "92b4f931fc78cceb7c4a0ef46f506284338c0248", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NTQwNg==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r401345406", "bodyText": "Changed to isInTryCatchOrLambda", "author": "wltan", "createdAt": "2020-04-01T04:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1OTc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MDk3Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r401260972", "bodyText": "you should throw exception from try to test the check", "author": "baratali", "createdAt": "2020-03-31T22:51:42Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodIgnoreThrows.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmethod;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Scanner;\n+import java.util.function.Function;\n+\n+public class InputJavadocMethodIgnoreThrows {\n+\n+   /**\n+     * Ignore try block, but keep catch and finally blocks.\n+     *\n+     * @param s String to parse\n+     * @return A positive integer\n+     */\n+    private static int parsePositiveInt(String s) {\n+        try {\n+            int value = Integer.parseInt(s);\n+            if (value <= 0) {\n+                throw new NumberFormatException(value + \" is negative/zero\"); // ok, try\n+            }\n+            return value;\n+        } catch (NumberFormatException ex) {\n+            throw new IllegalArgumentException(\"Invalid number\", ex); // violation, catch\n+        } finally {\n+            throw new IllegalStateException(\"Should never reach here\"); // violation, finally\n+        }\n+    }\n+\n+    /**\n+     * Ignore everything inside lambda.\n+     *\n+     * @param maxLength Max length\n+     * @return A function to truncate string\n+     */\n+    private static Function<String, String> getTruncateFunction(int maxLength) {\n+        return s -> {\n+            if (s == null) {\n+                throw new IllegalArgumentException(\"Cannot truncate null\"); // ok, inside lambda\n+            }\n+            return s.length() > maxLength ? s.substring(0, maxLength) : s;\n+        };\n+    }\n+\n+    /**\n+     * Try-with-resources should also be ignored if there is a catch block.\n+     *\n+     * @param input file to read\n+     */\n+    private static void ignoreTryWithResources(String input) {\n+        try (BufferedReader in = new BufferedReader(new FileReader(input))) {\n+            System.out.println(in.readLine());\n+        } catch (IOException e) {", "originalCommit": "92b4f931fc78cceb7c4a0ef46f506284338c0248", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NTcxNw==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r401345717", "bodyText": "Added 2 types of throws, an IOException which is to be caught and an IllegalArgumentException which is a false negative example.", "author": "wltan", "createdAt": "2020-04-01T04:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MDk3Mg=="}], "type": "inlineReview"}, {"oid": "1dfaf1e7fa8b93d4be93abe7b3c91baa88719a92", "url": "https://github.com/checkstyle/checkstyle/commit/1dfaf1e7fa8b93d4be93abe7b3c91baa88719a92", "message": "spelling: typo in exceptionInfo", "committedDate": "2020-04-01T04:08:34Z", "type": "forcePushed"}, {"oid": "6794c603f52cedf916528c055fb295cbdb5f60ee", "url": "https://github.com/checkstyle/checkstyle/commit/6794c603f52cedf916528c055fb295cbdb5f60ee", "message": "spelling: typo in exceptionInfo", "committedDate": "2020-04-02T04:00:11Z", "type": "forcePushed"}, {"oid": "272f87f98e74b888ba3d02d4f906c959fb56108d", "url": "https://github.com/checkstyle/checkstyle/commit/272f87f98e74b888ba3d02d4f906c959fb56108d", "message": "spelling: typo in exceptionInfo", "committedDate": "2020-04-07T06:18:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NDE2MA==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r409554160", "bodyText": "please put \"// violation\" comment on the same line where violation is placed. One day we will make test to validate this.\nExtra explanation you can put in other lines, but it is better to shorten code new Exception(\"\"); // violation ....", "author": "romani", "createdAt": "2020-04-16T13:26:45Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodIgnoreThrows.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmethod;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Scanner;\n+import java.util.function.Function;\n+\n+public class InputJavadocMethodIgnoreThrows {\n+\n+   /**\n+     * Ignore try block, but keep catch and finally blocks.\n+     *\n+     * @param s String to parse\n+     * @return A positive integer\n+     */\n+    private static int parsePositiveInt(String s) {\n+        try {\n+            int value = Integer.parseInt(s);\n+            if (value <= 0) {\n+                throw new NumberFormatException(value + \" is negative/zero\"); // ok, try\n+            }\n+            return value;\n+        } catch (NumberFormatException ex) {\n+            throw new IllegalArgumentException(\"Invalid number\", ex); // violation, catch\n+        } finally {\n+            throw new IllegalStateException(\"Should never reach here\"); // violation, finally\n+        }\n+    }\n+\n+    /**\n+     * Ignore everything inside lambda.\n+     *\n+     * @param maxLength Max length\n+     * @return A function to truncate string\n+     */\n+    private static Function<String, String> getTruncateFunction(int maxLength) {\n+        return s -> {\n+            if (s == null) {\n+                throw new IllegalArgumentException(\"Cannot truncate null\"); // ok, inside lambda\n+            }\n+            return s.length() > maxLength ? s.substring(0, maxLength) : s;\n+        };\n+    }\n+\n+    /**\n+     * Try-with-resources should also be ignored if there is a catch block.\n+     *\n+     * @param input file to read\n+     */\n+    private static void ignoreTryWithResources(String input) {\n+        try (BufferedReader in = new BufferedReader(new FileReader(input))) {\n+            String s = in.readLine();\n+            System.out.println(s);\n+            if (s.length() == 0) {\n+                // false negative, unable to tell what was caught\n+                throw new IllegalArgumentException(\"empty input\");\n+            }\n+            else {\n+                throw new IOException(); // ok, exception was caught\n+            }\n+        } catch (IOException e) {\n+            System.out.println(\"Error reading file\");\n+        }\n+    }\n+\n+    /**\n+     * However, do not ignore try block without catch.\n+     */\n+    private static void keepTryWithoutCatch() {\n+        try (Scanner sc = new Scanner(System.in)) {\n+            if (sc.nextInt() <= 0) {\n+                // violation, not caught and no @param\n+                throw new IllegalArgumentException(\"Please enter a positive integer\");", "originalCommit": "272f87f98e74b888ba3d02d4f906c959fb56108d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkxMDA0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r410910047", "bodyText": "Fixed", "author": "wltan", "createdAt": "2020-04-19T13:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NDE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NTE5Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r409555197", "bodyText": "This PR will not be simple and quick.\nPlease move  this already separated commit to separate PR, we will merge it quicker. So it will help us to keep this PR more focused on functional changes.", "author": "romani", "createdAt": "2020-04-16T13:28:15Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -718,9 +748,9 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n     private static List<ExceptionInfo> combineExceptionInfo(List<ExceptionInfo> list1,\n                                                      List<ExceptionInfo> list2) {\n         final List<ExceptionInfo> result = new ArrayList<>(list1);\n-        for (ExceptionInfo expectionInfo : list2) {\n-            if (result.stream().noneMatch(item -> isExceptionInfoSame(item, expectionInfo))) {\n-                result.add(expectionInfo);\n+        for (ExceptionInfo exceptionInfo : list2) {\n+            if (result.stream().noneMatch(item -> isExceptionInfoSame(item, exceptionInfo))) {\n+                result.add(exceptionInfo);", "originalCommit": "272f87f98e74b888ba3d02d4f906c959fb56108d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMzA5OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r410103099", "bodyText": "Done #8114", "author": "wltan", "createdAt": "2020-04-17T09:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NTE5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1ODA1NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r409558055", "bodyText": "We probably should make example in xdoc to explain user that ignore lambdas at all because we do not know for sure when it will be evaluated (in method or later on smoewhere else) as it is kind-of-anonymous-class with method, so it should have its own javadoc (but nobody do javadocs for lambda .... so we ignore it).", "author": "romani", "createdAt": "2020-04-16T13:32:17Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -697,18 +697,48 @@ private static int calculateTagColumn(Matcher javadocTagMatcher,\n             final List<DetailAST> throwLiterals = findTokensInAstByType(blockAst,\n                     TokenTypes.LITERAL_THROW);\n             for (DetailAST throwAst : throwLiterals) {\n-                final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n-                if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n-                    final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n-                    final ExceptionInfo exceptionInfo = new ExceptionInfo(\n-                            createClassInfo(new Token(ident), currentClassName));\n-                    returnValue.add(exceptionInfo);\n+                if (!isInTryCatchOrLambda(blockAst, throwAst)) {\n+                    final DetailAST newAst = throwAst.getFirstChild().getFirstChild();\n+                    if (newAst.getType() == TokenTypes.LITERAL_NEW) {\n+                        final FullIdent ident = FullIdent.createFullIdent(newAst.getFirstChild());\n+                        final ExceptionInfo exceptionInfo = new ExceptionInfo(\n+                                createClassInfo(new Token(ident), currentClassName));\n+                        returnValue.add(exceptionInfo);\n+                    }\n                 }\n             }\n         }\n         return returnValue;\n     }\n \n+    /**\n+     * Checks if a 'throw' usage is contained within a try block or lambda expression.\n+     * Note that a try block without catch is not considered.", "originalCommit": "272f87f98e74b888ba3d02d4f906c959fb56108d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkxMDk0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r410910947", "bodyText": "Added some notes in the check description:\n\nThe ATTENTION: part was originally from the examples below, I moved it up here so it's all in one place.\nAdded examples:", "author": "wltan", "createdAt": "2020-04-19T13:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1ODA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkxMzkxMA==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r410913910", "bodyText": "Sample run for the new examples:\nD:\\checkstyletest>type config.xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"https://checkstyle.org/dtds/configuration_1_3.dtd\">\n\n<module name=\"Checker\">\n    <property name=\"severity\" value=\"error\"/>\n    <module name=\"TreeWalker\">\n        <module name=\"JavadocMethod\">\n            <property name=\"validateThrows\" value=\"true\"/>\n        </module>\n\n    </module>\n</module>\n\nD:\\checkstyletest>type test\\Test.java\nclass Test {\n\n    /**\n     * Ignore try block, but keep catch and finally blocks.\n     *\n     * @param s String to parse\n     * @return A positive integer\n     */\n    public int parsePositiveInt(String s) {\n        try {\n            int value = Integer.parseInt(s);\n            if (value <= 0) {\n                throw new NumberFormatException(value + \" is negative/zero\"); // ok, try\n            }\n            return value;\n        } catch (NumberFormatException ex) {\n            throw new IllegalArgumentException(\"Invalid number\", ex); // violation, catch\n        } finally {\n            throw new IllegalStateException(\"Should never reach here\"); // violation, finally\n        }\n    }\n\n    /**\n     * Try block without catch is not ignored.\n     *\n     * @return a String from standard input, if there is one\n     */\n    public String readLine() {\n        try (Scanner sc = new Scanner(System.in)) {\n            if (!sc.hasNext()) {\n                throw new IllegalStateException(\"Empty input\"); // violation, not caught\n            }\n            return sc.next();\n        }\n    }\n\n    /**\n     * Lambda expressions are ignored as we do not know when the exception will be thrown.\n     *\n     * @param s a String to be printed at some point in the future\n     * @return a Runnable to be executed when the string is to be printed\n     */\n    public Runnable printLater(String s) {\n        return () -> {\n            if (s == null) {\n                throw new NullPointerException(); // ok\n            }\n            System.out.println(s);\n        };\n    }\n\n}\n\nD:\\checkstyletest>java -jar -Duser.language=en -Duser.country=US checkstyle-8.32-SNAPSHOT-all.jar -c config.xml test\\Test.java\nStarting audit...\n[ERROR] D:\\checkstyletest\\test\\Test.java:17:23: Expected @throws tag for 'IllegalArgumentException'. [JavadocMethod]\n[ERROR] D:\\checkstyletest\\test\\Test.java:19:23: Expected @throws tag for 'IllegalStateException'. [JavadocMethod]\n[ERROR] D:\\checkstyletest\\test\\Test.java:31:27: Expected @throws tag for 'IllegalStateException'. [JavadocMethod]\nAudit done.\nCheckstyle ends with 3 errors.", "author": "wltan", "createdAt": "2020-04-19T14:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1ODA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDIyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r409560222", "bodyText": "please add above comment and place there config as we do in others recent Inputs.\nplease also add to our Inputs a bit more test cases,  3 test cases is not enough for such controversial issue.\nPlease take bunch of interesting cases from your regression report. We should not rely on regression testing that much, we need to grow out Inputs code base.", "author": "romani", "createdAt": "2020-04-16T13:35:26Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodIgnoreThrows.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocmethod;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Scanner;\n+import java.util.function.Function;\n+\n+public class InputJavadocMethodIgnoreThrows {", "originalCommit": "272f87f98e74b888ba3d02d4f906c959fb56108d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMDAwNA==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r410710004", "bodyText": "I tried to add more tests but some of the results were not what I was expecting, opened issue #8117 for it.\nI'll hold on to this change until #8117 is confirmed or resolved.", "author": "wltan", "createdAt": "2020-04-18T15:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMDcxMw==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r410710713", "bodyText": "issue is approved.", "author": "romani", "createdAt": "2020-04-18T15:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkxNDc4OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r410914789", "bodyText": "Unfortunately I can't wait for #8117 to be fixed first because it also causes some false positives within Checkstyle itself as well, using anonymous classes. So fix for this issue needs to be merged first. \n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/JavaParser.java\n    \n    \n        Lines 91 to 96\n      in\n      2e8c277\n    \n    \n    \n    \n\n        \n          \n           final GeneratedJavaRecognizer parser = new GeneratedJavaRecognizer(filter) { \n        \n\n        \n          \n               @Override \n        \n\n        \n          \n               public void reportError(RecognitionException ex) { \n        \n\n        \n          \n                   throw new IllegalStateException(ex); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           }; \n        \n    \n  \n\n\nI've updated this PR to exclude anonymous and local classes as well (previously covered only lambdas), regression will be up soon.\nIt's a bit hard to come up with more complex input cases as violations keep getting ignored due to the problem in #8117. I'll do what I can, meanwhile fixes for the other points have been pushed and ready for review.\nedit: https://wltan.github.io/checkstyle-reports/2020-04-20/javadocmethod-throws/index", "author": "wltan", "createdAt": "2020-04-19T14:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3MDQ2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r412170465", "bodyText": "JavadocMethod is kind deprecated Check, that waits time to be reimplemented to AST based validation, because current implementation is prone to false-positives and complications in analysis. But UTs and inputs will be reused.", "author": "romani", "createdAt": "2020-04-21T13:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3ODg5MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r412178891", "bodyText": "ok, but each Input still need config copy in comment over class.\nOne day in future we will have UT that takes Input file , take config from it, run, and check that violations are on the same lines. So maintainers primary role will be to simply review Inputs.", "author": "romani", "createdAt": "2020-04-21T13:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5NjY4Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r412296683", "bodyText": "But UTs and inputs will be reused.\n\nI was thinking of adding cases such as try/catch inside lambda or vice versa, but #8117 makes everything show as negative anyway so there is no point adding cases like that yet. What I can do is that once this is merged, I can continue on #8117 and add new UTs to check for this sort of cases.\n\nok, but each Input still need config copy in comment over class.\n\nFixed", "author": "wltan", "createdAt": "2020-04-21T15:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDIyMg=="}], "type": "inlineReview"}, {"oid": "35846db7189f0924f0040a6000bc1e6f9b73b397", "url": "https://github.com/checkstyle/checkstyle/commit/35846db7189f0924f0040a6000bc1e6f9b73b397", "message": "Issue #7473: JavadocMethod: false positive with validateThrows", "committedDate": "2020-04-19T13:47:39Z", "type": "forcePushed"}, {"oid": "e927eebaafc87cec9392f6edda620df6c1c5fdb4", "url": "https://github.com/checkstyle/checkstyle/commit/e927eebaafc87cec9392f6edda620df6c1c5fdb4", "message": "Issue #7473: JavadocMethod: false positive with validateThrows", "committedDate": "2020-04-22T03:39:51Z", "type": "forcePushed"}, {"oid": "4e6d9baf64552580876a756fc7696cdf310686c5", "url": "https://github.com/checkstyle/checkstyle/commit/4e6d9baf64552580876a756fc7696cdf310686c5", "message": "Issue #7473: JavadocMethod: false positive with validateThrows", "committedDate": "2020-04-22T07:04:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyNTAxNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r414525015", "bodyText": "Should Note be separated from Attention? Attention is talking about class heirarchy and note is talking about when throw new is not checked.", "author": "rnveach", "createdAt": "2020-04-24T12:08:08Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -55,14 +55,35 @@\n  * a different <a href=\"https://checkstyle.org/property_types.html#scope\">scope</a>.\n  * </p>\n  * <p>\n- * Violates parameters and type parameters for which no param tags are present\n- * can be suppressed by defining property {@code allowMissingParamTags}.\n- * Violates methods which return non-void but for which no return tag is present\n- * can be suppressed by defining property {@code allowMissingReturnTag}.\n- * Violates exceptions which are declared to be thrown, but for which no throws\n- * tag is present by activation of property {@code validateThrows}.\n+ * Violates parameters and type parameters for which no param tags are present can\n+ * be suppressed by defining property {@code allowMissingParamTags}.\n  * </p>\n  * <p>\n+ * Violates methods which return non-void but for which no return tag is present can\n+ * be suppressed by defining property {@code allowMissingReturnTag}.\n+ * </p>\n+ * <p>\n+ * Violates exceptions which are declared to be thrown (by 'throws' in the method\n+ * signature or by 'throw new' in the method body), but for which no throws tag is\n+ * present by activation of property {@code validateThrows}.\n+ * ATTENTION: Checkstyle does not have information about hierarchy of exception types\n+ * so usage of base class is considered as separate exception type.\n+ * As workaround you need to specify both types in javadoc (parent and exact type).\n+ * Note that 'throw new' is not checked in the following places:", "originalCommit": "4e6d9baf64552580876a756fc7696cdf310686c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3ODQ2MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r417078461", "bodyText": "Yes, I suppose it should. To make it more obvious that they are separate things I moved the Attention part below the list, so that it is clearly on its own paragraph.\nNew site preview:", "author": "wltan", "createdAt": "2020-04-29T05:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyNTAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyNTg0Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r414525842", "bodyText": "Place throw new in a code block.", "author": "rnveach", "createdAt": "2020-04-24T12:09:23Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -55,14 +55,35 @@\n  * a different <a href=\"https://checkstyle.org/property_types.html#scope\">scope</a>.\n  * </p>\n  * <p>\n- * Violates parameters and type parameters for which no param tags are present\n- * can be suppressed by defining property {@code allowMissingParamTags}.\n- * Violates methods which return non-void but for which no return tag is present\n- * can be suppressed by defining property {@code allowMissingReturnTag}.\n- * Violates exceptions which are declared to be thrown, but for which no throws\n- * tag is present by activation of property {@code validateThrows}.\n+ * Violates parameters and type parameters for which no param tags are present can\n+ * be suppressed by defining property {@code allowMissingParamTags}.\n  * </p>\n  * <p>\n+ * Violates methods which return non-void but for which no return tag is present can\n+ * be suppressed by defining property {@code allowMissingReturnTag}.\n+ * </p>\n+ * <p>\n+ * Violates exceptions which are declared to be thrown (by 'throws' in the method\n+ * signature or by 'throw new' in the method body), but for which no throws tag is\n+ * present by activation of property {@code validateThrows}.\n+ * ATTENTION: Checkstyle does not have information about hierarchy of exception types\n+ * so usage of base class is considered as separate exception type.\n+ * As workaround you need to specify both types in javadoc (parent and exact type).\n+ * Note that 'throw new' is not checked in the following places:", "originalCommit": "4e6d9baf64552580876a756fc7696cdf310686c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3OTk4NA==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r417079984", "bodyText": "Fixed. Changed the throws and throw new a few lines above as well.\nNew site preview above at #7955 (comment)", "author": "wltan", "createdAt": "2020-04-29T05:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyNTg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMjEwMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r416802101", "bodyText": "Should attention be separated from the rest. Site was not generated but I believe \"ATTENTION\" will appear mid-line and not at the start.", "author": "rnveach", "createdAt": "2020-04-28T17:41:03Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "diffHunk": "@@ -55,14 +55,35 @@\n  * a different <a href=\"https://checkstyle.org/property_types.html#scope\">scope</a>.\n  * </p>\n  * <p>\n- * Violates parameters and type parameters for which no param tags are present\n- * can be suppressed by defining property {@code allowMissingParamTags}.\n- * Violates methods which return non-void but for which no return tag is present\n- * can be suppressed by defining property {@code allowMissingReturnTag}.\n- * Violates exceptions which are declared to be thrown, but for which no throws\n- * tag is present by activation of property {@code validateThrows}.\n+ * Violates parameters and type parameters for which no param tags are present can\n+ * be suppressed by defining property {@code allowMissingParamTags}.\n  * </p>\n  * <p>\n+ * Violates methods which return non-void but for which no return tag is present can\n+ * be suppressed by defining property {@code allowMissingReturnTag}.\n+ * </p>\n+ * <p>\n+ * Violates exceptions which are declared to be thrown (by 'throws' in the method\n+ * signature or by 'throw new' in the method body), but for which no throws tag is\n+ * present by activation of property {@code validateThrows}.\n+ * ATTENTION: Checkstyle does not have information about hierarchy of exception types", "originalCommit": "4e6d9baf64552580876a756fc7696cdf310686c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA4MDEyMw==", "url": "https://github.com/checkstyle/checkstyle/pull/7955#discussion_r417080123", "bodyText": "Fixed @ #7955 (comment)", "author": "wltan", "createdAt": "2020-04-29T05:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMjEwMQ=="}], "type": "inlineReview"}, {"oid": "47ca1820016f958189c6637792f75e57ce0abaf2", "url": "https://github.com/checkstyle/checkstyle/commit/47ca1820016f958189c6637792f75e57ce0abaf2", "message": "Issue #7473: JavadocMethod: false positive with validateThrows", "committedDate": "2020-04-29T05:57:54Z", "type": "commit"}, {"oid": "47ca1820016f958189c6637792f75e57ce0abaf2", "url": "https://github.com/checkstyle/checkstyle/commit/47ca1820016f958189c6637792f75e57ce0abaf2", "message": "Issue #7473: JavadocMethod: false positive with validateThrows", "committedDate": "2020-04-29T05:57:54Z", "type": "forcePushed"}]}