{"pr_number": 3044, "pr_title": "initial Cognos OMAS implementation", "pr_createdAt": "2020-05-11T16:51:37Z", "pr_url": "https://github.com/odpi/egeria/pull/3044", "timeline": [{"oid": "4ca123e0cecb20684fc0a18c68d4db743af70f5c", "url": "https://github.com/odpi/egeria/commit/4ca123e0cecb20684fc0a18c68d4db743af70f5c", "message": "initial Cognos OMAS implementation\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-11T18:45:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNjc2MA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423216760", "bodyText": "Needs to implement ExceptionMessageSet and include HTTP erro codes.\nThe descriptions need to provide enough information for the external user of your service to fix the problem - for example what for you need to verify in the topic event?", "author": "mandy-chessell", "createdAt": "2020-05-11T17:55:12Z", "path": "open-metadata-implementation/access-services/cognos/cognos-api/src/main/java/org/odpi/openmetadata/accessservices/cognos/ffdc/CognosErrorCode.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.ffdc;\n+\n+import java.text.MessageFormat;\n+\n+public enum CognosErrorCode {", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NjQ3MQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r424556471", "bodyText": "fixed in c8c01d0", "author": "yevgenmar", "createdAt": "2020-05-13T16:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNjc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyMDM5OA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r425420398", "bodyText": "IMO either is fine .", "author": "planetf1", "createdAt": "2020-05-14T20:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNjc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNzI5MA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423217290", "bodyText": "This is all deprecated", "author": "mandy-chessell", "createdAt": "2020-05-11T17:56:04Z", "path": "open-metadata-implementation/access-services/cognos/cognos-api/src/main/java/org/odpi/openmetadata/accessservices/cognos/ffdc/CognosErrorCode.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.ffdc;\n+\n+import java.text.MessageFormat;\n+\n+public enum CognosErrorCode {\n+\n+\tADD_RELATIONSHIP_EXCEPTION(\n+\t\t\t\"OMAS-COGNOS-005\", \n+\t\t\t\"Relationship {0} could not be added. Error: {1}\",\n+\t\t\t\"The system is unable to process the request.\", \n+\t\t\t\"Verify the topic event.\"),\n+\tGET_ENTITY_EXCEPTION(\n+\t\t\t\"OMAS-COGNOS-006\", \n+\t\t\t\"Entity matching criteria [{0}={1}] could not be fetched. Error: {2}\",\n+\t\t\t\"The system is unable to process the request.\", \n+\t\t\t\"Verify the topic event.\"),\n+\tGET_RELATIONSHIP_EXCEPTION(\n+\t\t\t\"OMAS-COGNOS-007\", \n+\t\t\t\"Relationship {0} for entity {1} could not be fetched. Error: {2}\",\n+\t\t\t\"The system is unable to process the request.\", \n+\t\t\t\"Verify the topic event.\"),\n+\tSERVICE_NOT_INITIALIZED(\n+\t\t\t\"OMAS-COGNOS-012\",\n+\t\t\t\"The access service has not been initialized for server {0} and can not support REST API calls\",\n+\t\t\t\"The server has received a call to one of its open metadata access services but is unable to process it because the access service is not active for the requested server.\",\n+\t\t\t\"If the server is supposed to have this access service activated, correct the server configuration and restart the server.\"),\n+\tBAD_CONFIG(\n+\t\t\t\"OMAS-COGNOS-013\",\n+\t\t\t\"The Information View Open Metadata Access Service (OMAS) has been passed an invalid value of {0} in the {1} property.  The resulting exception of {2} included the following message: {3}\",\n+\t\t\t\"The access service has not been passed valid configuration.\",\n+\t\t\t\"Correct the configuration and restart the service.\"),\n+\tENTITY_NOT_FOUND_EXCEPTION(404,\n+\t\t\t\"OMAS-COGNOS-014\", \n+\t\t\t\"The entity matching criteria [{0}={1}] was not found.\",\n+\t\t\t\"The system is unable to process the request.\", \n+\t\t\t\"Correct the request payload submitted.\"),\n+\n+\tINCORRECT_MODEL_EXCEPTION(\n+\t\t\t\"OMAS-COGNOS-016\", \n+\t\t\t\"The model for entity {0} is not correct: {1}\",\n+\t\t\t\"The system is unable to process the request.\", \n+\t\t\t\"Correct the metadata model.\"),\n+\n+\tDELETE_ENTITY_EXCEPTION(\n+\t\t\t\"OMAS-COGNOS-026\",\n+\t\t\t\"Entity matching criteria [{0}={1}] could not be deleted. Error: {2}\",\n+\t\t\t\"The system is unable to process the request.\",\n+\t\t\t\"Verify the topic event.\"),\n+\tNULL_TOPIC_CONNECTOR(400, \n+\t\t\t\"OMAS-COGNOS-029\",\n+\t\t\t\"Unable to send or receive events for source {0} because the connector to the OMRS Topic failed to initialize\",\n+\t\t\t\"The local server will not connect to the cohort.\",\n+\t\t\t\"The connection to the connector is configured in the server configuration.  \"\n+\t\t\t\t\t+ \"Review previous error messages to determine the precise error in the \"\n+\t\t\t\t\t+ \"start up configuration. \"\n+\t\t\t\t\t+ \"Correct the configuration and reconnect the server to the cohort. \"),\n+\tSCHEMA_UNKNOWN(403, \n+\t\t\t\"OMAS-COGNOS-031\", \n+\t\t\t\"Requested schema {0} does not exist.\",\n+\t\t\t\"The system is unable to process the request.\",\n+\t\t\t\"Refresh data.\"),\n+\tUPDATE_PROPERTY_EXCEPTION( \n+\t\t\t\"OMAS-COGNOS-032\", \n+\t\t\t\"Propertyies for entity {0} can not be updated with properties {1}. Error {2}\",\n+\t\t\t\"The system is unable to process the request.\",\n+\t\t\t\"Refresh data.\"),\n+\tCLASSIFICATION_EXCEPTION(\n+\t\t\t\"OMAS-COGNOS-033\", \n+\t\t\t\"Classification for entity {0} failed with {1}. Error {2}\",\n+\t\t\t\"The system is unable to process the request.\",\n+\t\t\t\"Refresh data.\"),\n+\n+\tUNKNOWN_ERROR(\n+\t\t\t\"OMAS-COGNOS-500\", \n+\t\t\t\"Server failed to execute request with unknown reason.\",\n+\t\t\t\"The system is unable to process the request.\", \n+\t\t\t\"Report the error to administrator.\");\n+\n+\tprivate int httpErrorCode;\n+\tprivate String errorMessageId;\n+\tprivate String errorMessage;\n+\tprivate String systemAction;\n+\tprivate String userAction;\n+\n+\tCognosErrorCode(int httpErrorCode, String errorMessageId, String errorMessage, String systemAction,", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NjcxMw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r424556713", "bodyText": "fixed in c8c01d0", "author": "yevgenmar", "createdAt": "2020-05-13T16:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNzI5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNzY3NA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423217674", "bodyText": "Do not pass the code to the exception because it prevents codes from external components from being passed.", "author": "mandy-chessell", "createdAt": "2020-05-11T17:56:43Z", "path": "open-metadata-implementation/access-services/cognos/cognos-api/src/main/java/org/odpi/openmetadata/accessservices/cognos/ffdc/exceptions/CognosCheckedException.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions;\n+\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+\n+public class CognosCheckedException extends Exception {\n+\t\n+\tprivate CognosErrorCode errorCode;\n+\t\n+\t\n+    public CognosCheckedException(CognosErrorCode code, Throwable caughtError) {", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1Njg3Mg==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r424556872", "bodyText": "fixed in c8c01d0", "author": "yevgenmar", "createdAt": "2020-05-13T16:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNzY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxODA5OA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423218098", "bodyText": "Typically avoid runtime exceptions except for logic errors", "author": "mandy-chessell", "createdAt": "2020-05-11T17:57:27Z", "path": "open-metadata-implementation/access-services/cognos/cognos-api/src/main/java/org/odpi/openmetadata/accessservices/cognos/ffdc/exceptions/CognosRuntimeException.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions;\n+\n+import java.text.MessageFormat;\n+\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+\n+public class CognosRuntimeException extends RuntimeException {\n+\t", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NzAzNg==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r424557036", "bodyText": "fixed in c8c01d0", "author": "yevgenmar", "createdAt": "2020-05-13T16:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxODA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxODI1MA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423218250", "bodyText": "Javadoc?", "author": "mandy-chessell", "createdAt": "2020-05-11T17:57:42Z", "path": "open-metadata-implementation/access-services/cognos/cognos-api/src/main/java/org/odpi/openmetadata/accessservices/cognos/model/Attributes.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.model;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@JsonAutoDetect(getterVisibility = PUBLIC_ONLY, setterVisibility = PUBLIC_ONLY, fieldVisibility = NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2MjE5Mg==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r427562192", "bodyText": "Attribute.java was deleted, but Javadocs were added to most of classes by 356d9dd.\nMissing javadocs will be added in progress of the review.", "author": "yevgenmar", "createdAt": "2020-05-19T19:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxODI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxOTI4OQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423219289", "bodyText": "Are these rest API response object - don't then need Jackson annotations?", "author": "mandy-chessell", "createdAt": "2020-05-11T17:59:19Z", "path": "open-metadata-implementation/access-services/cognos/cognos-api/src/main/java/org/odpi/openmetadata/accessservices/cognos/model/ResponseContainerDatabase.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.model;\n+", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIzNjk0MA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r425236940", "bodyText": "Jackson annotation defined in the base class applied to these objects. I've kept it one place and want to use in derived classes if something special is required to override behaviour.", "author": "yevgenmar", "createdAt": "2020-05-14T15:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxOTI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMTE5OA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423221198", "bodyText": "This is the deprecated method", "author": "mandy-chessell", "createdAt": "2020-05-11T18:02:44Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/admin/CognosAdmin.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.admin;\n+\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.odpi.openmetadata.accessservices.cognos.assets.DatabaseContextHandler;\n+import org.odpi.openmetadata.accessservices.cognos.auditlog.CognosAuditCode;\n+import org.odpi.openmetadata.accessservices.cognos.contentmanager.OMEntityDao;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.listeners.CognosEnterpriseOmrsEventListener;\n+import org.odpi.openmetadata.accessservices.cognos.server.CognosServicesInstance;\n+import org.odpi.openmetadata.adminservices.configuration.properties.AccessServiceConfig;\n+import org.odpi.openmetadata.adminservices.configuration.registration.AccessServiceAdmin;\n+import org.odpi.openmetadata.adminservices.ffdc.exception.OMAGConfigurationErrorException;\n+import org.odpi.openmetadata.frameworks.connectors.ConnectorBroker;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.ConnectorCheckedException;\n+import org.odpi.openmetadata.frameworks.connectors.properties.beans.Connection;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditingComponent;\n+import org.odpi.openmetadata.repositoryservices.connectors.omrstopic.OMRSTopicConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.openmetadatatopic.OpenMetadataTopicConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryConnector;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.OMRSConfigErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class CognosAdmin extends AccessServiceAdmin\n+{\n+\n+    private static final Logger log = LoggerFactory.getLogger(CognosAdmin.class);\n+    private OpenMetadataTopicConnector cognosOutTopicConnector;\n+    private OMRSAuditLog auditLog;\n+    private String serverName = null;\n+    private CognosServicesInstance instance = null;\n+\n+\n+    /**\n+     * Initialize the access service.\n+     *\n+     * @param accessServiceConfigurationProperties  specific configuration properties for this access service.\n+     * @param enterpriseOMRSTopicConnector          connector for receiving OMRS Events from the cohorts\n+     * @param enterpriseConnector     connector for querying the cohort repositories\n+     * @param auditLog                              audit log component for logging messages.\n+     * @param serverUserName                        user id to use on OMRS calls where there is no end user.\n+     * @throws OMAGConfigurationErrorException invalid parameters in the configuration properties.\n+     */\n+    @Override\n+    public void initialize(AccessServiceConfig accessServiceConfigurationProperties, OMRSTopicConnector enterpriseOMRSTopicConnector, OMRSRepositoryConnector enterpriseConnector, OMRSAuditLog auditLog, String serverUserName) throws OMAGConfigurationErrorException {\n+        final String actionDescription = \"initialize\";\n+        CognosAuditCode auditCode;\n+\n+        auditCode = CognosAuditCode.SERVICE_INITIALIZING;\n+        auditLog.logRecord(actionDescription,", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzI3Nw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r426187277", "bodyText": "fixed 3e350a8", "author": "yevgenmar", "createdAt": "2020-05-16T20:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMTE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMTYwMw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423221603", "bodyText": "This is handled in the superclass", "author": "mandy-chessell", "createdAt": "2020-05-11T18:03:30Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/admin/CognosAdmin.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.admin;\n+\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.odpi.openmetadata.accessservices.cognos.assets.DatabaseContextHandler;\n+import org.odpi.openmetadata.accessservices.cognos.auditlog.CognosAuditCode;\n+import org.odpi.openmetadata.accessservices.cognos.contentmanager.OMEntityDao;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.listeners.CognosEnterpriseOmrsEventListener;\n+import org.odpi.openmetadata.accessservices.cognos.server.CognosServicesInstance;\n+import org.odpi.openmetadata.adminservices.configuration.properties.AccessServiceConfig;\n+import org.odpi.openmetadata.adminservices.configuration.registration.AccessServiceAdmin;\n+import org.odpi.openmetadata.adminservices.ffdc.exception.OMAGConfigurationErrorException;\n+import org.odpi.openmetadata.frameworks.connectors.ConnectorBroker;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.ConnectorCheckedException;\n+import org.odpi.openmetadata.frameworks.connectors.properties.beans.Connection;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditingComponent;\n+import org.odpi.openmetadata.repositoryservices.connectors.omrstopic.OMRSTopicConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.openmetadatatopic.OpenMetadataTopicConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryConnector;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.OMRSConfigErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class CognosAdmin extends AccessServiceAdmin\n+{\n+\n+    private static final Logger log = LoggerFactory.getLogger(CognosAdmin.class);\n+    private OpenMetadataTopicConnector cognosOutTopicConnector;\n+    private OMRSAuditLog auditLog;\n+    private String serverName = null;\n+    private CognosServicesInstance instance = null;\n+\n+\n+    /**\n+     * Initialize the access service.\n+     *\n+     * @param accessServiceConfigurationProperties  specific configuration properties for this access service.\n+     * @param enterpriseOMRSTopicConnector          connector for receiving OMRS Events from the cohorts\n+     * @param enterpriseConnector     connector for querying the cohort repositories\n+     * @param auditLog                              audit log component for logging messages.\n+     * @param serverUserName                        user id to use on OMRS calls where there is no end user.\n+     * @throws OMAGConfigurationErrorException invalid parameters in the configuration properties.\n+     */\n+    @Override\n+    public void initialize(AccessServiceConfig accessServiceConfigurationProperties, OMRSTopicConnector enterpriseOMRSTopicConnector, OMRSRepositoryConnector enterpriseConnector, OMRSAuditLog auditLog, String serverUserName) throws OMAGConfigurationErrorException {\n+        final String actionDescription = \"initialize\";\n+        CognosAuditCode auditCode;\n+\n+        auditCode = CognosAuditCode.SERVICE_INITIALIZING;\n+        auditLog.logRecord(actionDescription,\n+                auditCode.getLogMessageId(),\n+                auditCode.getSeverity(),\n+                auditCode.getFormattedLogMessage(),\n+                null,\n+                auditCode.getSystemAction(),\n+                auditCode.getUserAction());\n+\n+        this.auditLog = auditLog;\n+\n+        if (enterpriseConnector != null)\n+        {\n+            serverName = enterpriseConnector.getServerName();\n+        }\n+\n+        String outTopicName = getTopicName(accessServiceConfigurationProperties.getAccessServiceOutTopic());\n+        cognosOutTopicConnector = initializeCognosTopicConnector(accessServiceConfigurationProperties.getAccessServiceOutTopic());\n+        List<String> supportedZones = this.extractSupportedZones(accessServiceConfigurationProperties.getAccessServiceOptions());\n+        OMEntityDao omEntityDao = new OMEntityDao(enterpriseConnector, supportedZones, auditLog);\n+\n+        if (cognosOutTopicConnector != null) {\n+            startConnector(CognosAuditCode.SERVICE_REGISTERED_WITH_IV_OUT_TOPIC, actionDescription, outTopicName, cognosOutTopicConnector);\n+        }\n+\n+        DatabaseContextHandler contextBuilders = new DatabaseContextHandler(omEntityDao);\n+        instance = new CognosServicesInstance(contextBuilders, serverName);\n+\n+        auditCode = CognosAuditCode.SERVICE_INITIALIZED;\n+        auditLog.logRecord(actionDescription,\n+                auditCode.getLogMessageId(),\n+                auditCode.getSeverity(),\n+                auditCode.getFormattedLogMessage(serverName),\n+                accessServiceConfigurationProperties.toString(),\n+                auditCode.getSystemAction(),\n+                auditCode.getUserAction());\n+    }\n+\n+    private void startConnector(CognosAuditCode auditCode, String actionDescription, String topicName, OpenMetadataTopicConnector topicConnector) throws OMAGConfigurationErrorException {\n+\n+        auditLog.logRecord(actionDescription,\n+                auditCode.getLogMessageId(),\n+                auditCode.getSeverity(),\n+                auditCode.getFormattedLogMessage(topicName),\n+                null,\n+                auditCode.getSystemAction(),\n+                auditCode.getUserAction());\n+\n+\n+        try {\n+            topicConnector.start();\n+        } catch (ConnectorCheckedException e) {\n+            auditCode = CognosAuditCode.ERROR_INITIALIZING_COGNOS_TOPIC_CONNECTION;\n+            auditLog.logException(actionDescription,\n+                    auditCode.getLogMessageId(),\n+                    auditCode.getSeverity(),\n+                    auditCode.getFormattedLogMessage(topicName, serverName),\n+                    null,\n+                    auditCode.getSystemAction(),\n+                    auditCode.getUserAction(),\n+                    e);\n+            throw new OMAGConfigurationErrorException(400,\n+                    CognosAdmin.class.getSimpleName(),\n+                    actionDescription,\n+                    auditCode.getFormattedLogMessage(),\n+                    auditCode.getSystemAction(),\n+                    auditCode.getUserAction(),\n+                    e);\n+        }\n+    }\n+\n+\n+\n+\n+    /**\n+     * Returns the topic created based on connection properties\n+     *\n+     * @param topicConnection  properties of the topic\n+     * @return the topic created based on the connection properties\n+     */\n+    private OpenMetadataTopicConnector initializeCognosTopicConnector(Connection topicConnection) {\n+        final String actionDescription = \"initialize\";\n+        if (topicConnection != null) {\n+            try {\n+                return getTopicConnector(topicConnection);\n+            } catch (Exception e) {\n+                CognosAuditCode auditCode = CognosAuditCode.ERROR_INITIALIZING_CONNECTION;\n+                auditLog.logException(actionDescription,\n+                        auditCode.getLogMessageId(),\n+                        auditCode.getSeverity(),\n+                        auditCode.getFormattedLogMessage(topicConnection.toString(), serverName, e.getMessage()),\n+                        topicConnection.toString(),\n+                        auditCode.getSystemAction(),\n+                        auditCode.getUserAction(),\n+                        e);\n+                throw e;\n+            }\n+\n+        }\n+        return null;\n+\n+    }\n+\n+\n+    /**\n+     * Returns the connector created from topic connection properties\n+     *\n+     * @param topicConnection  properties of the topic connection\n+     * @return the connector created based on the topic connection properties\n+     */\n+    private OpenMetadataTopicConnector getTopicConnector(Connection topicConnection) {", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyOTMwMQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r427029301", "bodyText": "fixed f0b22ac", "author": "yevgenmar", "createdAt": "2020-05-19T04:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMTYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMTc0OQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423221749", "bodyText": "This is handled in the superclass", "author": "mandy-chessell", "createdAt": "2020-05-11T18:03:46Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/admin/CognosAdmin.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.admin;\n+\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.odpi.openmetadata.accessservices.cognos.assets.DatabaseContextHandler;\n+import org.odpi.openmetadata.accessservices.cognos.auditlog.CognosAuditCode;\n+import org.odpi.openmetadata.accessservices.cognos.contentmanager.OMEntityDao;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.listeners.CognosEnterpriseOmrsEventListener;\n+import org.odpi.openmetadata.accessservices.cognos.server.CognosServicesInstance;\n+import org.odpi.openmetadata.adminservices.configuration.properties.AccessServiceConfig;\n+import org.odpi.openmetadata.adminservices.configuration.registration.AccessServiceAdmin;\n+import org.odpi.openmetadata.adminservices.ffdc.exception.OMAGConfigurationErrorException;\n+import org.odpi.openmetadata.frameworks.connectors.ConnectorBroker;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.ConnectorCheckedException;\n+import org.odpi.openmetadata.frameworks.connectors.properties.beans.Connection;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditingComponent;\n+import org.odpi.openmetadata.repositoryservices.connectors.omrstopic.OMRSTopicConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.openmetadatatopic.OpenMetadataTopicConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryConnector;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.OMRSConfigErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class CognosAdmin extends AccessServiceAdmin\n+{\n+\n+    private static final Logger log = LoggerFactory.getLogger(CognosAdmin.class);\n+    private OpenMetadataTopicConnector cognosOutTopicConnector;\n+    private OMRSAuditLog auditLog;\n+    private String serverName = null;\n+    private CognosServicesInstance instance = null;\n+\n+\n+    /**\n+     * Initialize the access service.\n+     *\n+     * @param accessServiceConfigurationProperties  specific configuration properties for this access service.\n+     * @param enterpriseOMRSTopicConnector          connector for receiving OMRS Events from the cohorts\n+     * @param enterpriseConnector     connector for querying the cohort repositories\n+     * @param auditLog                              audit log component for logging messages.\n+     * @param serverUserName                        user id to use on OMRS calls where there is no end user.\n+     * @throws OMAGConfigurationErrorException invalid parameters in the configuration properties.\n+     */\n+    @Override\n+    public void initialize(AccessServiceConfig accessServiceConfigurationProperties, OMRSTopicConnector enterpriseOMRSTopicConnector, OMRSRepositoryConnector enterpriseConnector, OMRSAuditLog auditLog, String serverUserName) throws OMAGConfigurationErrorException {\n+        final String actionDescription = \"initialize\";\n+        CognosAuditCode auditCode;\n+\n+        auditCode = CognosAuditCode.SERVICE_INITIALIZING;\n+        auditLog.logRecord(actionDescription,\n+                auditCode.getLogMessageId(),\n+                auditCode.getSeverity(),\n+                auditCode.getFormattedLogMessage(),\n+                null,\n+                auditCode.getSystemAction(),\n+                auditCode.getUserAction());\n+\n+        this.auditLog = auditLog;\n+\n+        if (enterpriseConnector != null)\n+        {\n+            serverName = enterpriseConnector.getServerName();\n+        }\n+\n+        String outTopicName = getTopicName(accessServiceConfigurationProperties.getAccessServiceOutTopic());\n+        cognosOutTopicConnector = initializeCognosTopicConnector(accessServiceConfigurationProperties.getAccessServiceOutTopic());\n+        List<String> supportedZones = this.extractSupportedZones(accessServiceConfigurationProperties.getAccessServiceOptions());\n+        OMEntityDao omEntityDao = new OMEntityDao(enterpriseConnector, supportedZones, auditLog);\n+\n+        if (cognosOutTopicConnector != null) {\n+            startConnector(CognosAuditCode.SERVICE_REGISTERED_WITH_IV_OUT_TOPIC, actionDescription, outTopicName, cognosOutTopicConnector);\n+        }\n+\n+        DatabaseContextHandler contextBuilders = new DatabaseContextHandler(omEntityDao);\n+        instance = new CognosServicesInstance(contextBuilders, serverName);\n+\n+        auditCode = CognosAuditCode.SERVICE_INITIALIZED;\n+        auditLog.logRecord(actionDescription,\n+                auditCode.getLogMessageId(),\n+                auditCode.getSeverity(),\n+                auditCode.getFormattedLogMessage(serverName),\n+                accessServiceConfigurationProperties.toString(),\n+                auditCode.getSystemAction(),\n+                auditCode.getUserAction());\n+    }\n+\n+    private void startConnector(CognosAuditCode auditCode, String actionDescription, String topicName, OpenMetadataTopicConnector topicConnector) throws OMAGConfigurationErrorException {\n+\n+        auditLog.logRecord(actionDescription,\n+                auditCode.getLogMessageId(),\n+                auditCode.getSeverity(),\n+                auditCode.getFormattedLogMessage(topicName),\n+                null,\n+                auditCode.getSystemAction(),\n+                auditCode.getUserAction());\n+\n+\n+        try {\n+            topicConnector.start();\n+        } catch (ConnectorCheckedException e) {\n+            auditCode = CognosAuditCode.ERROR_INITIALIZING_COGNOS_TOPIC_CONNECTION;\n+            auditLog.logException(actionDescription,\n+                    auditCode.getLogMessageId(),\n+                    auditCode.getSeverity(),\n+                    auditCode.getFormattedLogMessage(topicName, serverName),\n+                    null,\n+                    auditCode.getSystemAction(),\n+                    auditCode.getUserAction(),\n+                    e);\n+            throw new OMAGConfigurationErrorException(400,\n+                    CognosAdmin.class.getSimpleName(),\n+                    actionDescription,\n+                    auditCode.getFormattedLogMessage(),\n+                    auditCode.getSystemAction(),\n+                    auditCode.getUserAction(),\n+                    e);\n+        }\n+    }\n+\n+\n+\n+\n+    /**\n+     * Returns the topic created based on connection properties\n+     *\n+     * @param topicConnection  properties of the topic\n+     * @return the topic created based on the connection properties\n+     */\n+    private OpenMetadataTopicConnector initializeCognosTopicConnector(Connection topicConnection) {\n+        final String actionDescription = \"initialize\";\n+        if (topicConnection != null) {\n+            try {\n+                return getTopicConnector(topicConnection);\n+            } catch (Exception e) {\n+                CognosAuditCode auditCode = CognosAuditCode.ERROR_INITIALIZING_CONNECTION;\n+                auditLog.logException(actionDescription,\n+                        auditCode.getLogMessageId(),\n+                        auditCode.getSeverity(),\n+                        auditCode.getFormattedLogMessage(topicConnection.toString(), serverName, e.getMessage()),\n+                        topicConnection.toString(),\n+                        auditCode.getSystemAction(),\n+                        auditCode.getUserAction(),\n+                        e);\n+                throw e;\n+            }\n+\n+        }\n+        return null;\n+\n+    }\n+\n+\n+    /**\n+     * Returns the connector created from topic connection properties\n+     *\n+     * @param topicConnection  properties of the topic connection\n+     * @return the connector created based on the topic connection properties\n+     */\n+    private OpenMetadataTopicConnector getTopicConnector(Connection topicConnection) {\n+        try {\n+            ConnectorBroker connectorBroker = new ConnectorBroker();\n+\n+            OpenMetadataTopicConnector topicConnector = (OpenMetadataTopicConnector) connectorBroker.getConnector(topicConnection);\n+\n+            topicConnector.setAuditLog(auditLog.createNewAuditLog(OMRSAuditingComponent.OPEN_METADATA_TOPIC_CONNECTOR));\n+\n+            return topicConnector;\n+        } catch (Throwable error) {\n+            String methodName = \"getTopicConnector\";\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unable to create topic connector: \" + error.toString());\n+            }\n+\n+            CognosErrorCode errorCode = CognosErrorCode.NULL_TOPIC_CONNECTOR;\n+            String errorMessage = errorCode.getErrorMessageId()\n+                    + errorCode.getFormattedErrorMessage(\"getTopicConnector\");\n+\n+            throw new OMRSConfigErrorException(errorCode.getHttpErrorCode(),\n+                    this.getClass().getName(),\n+                    methodName,\n+                    errorMessage,\n+                    errorCode.getSystemAction(),\n+                    errorCode.getUserAction(),\n+                    error);\n+\n+        }\n+    }\n+\n+\n+    private List<String> extractSupportedZones(Map<String, Object> accessServiceOptions) throws OMAGConfigurationErrorException\n+    {", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NTcyOQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r424655729", "bodyText": "Superclass method is used. Fixed by c8c01d0", "author": "yevgenmar", "createdAt": "2020-05-13T18:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMTc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMjI2Nw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423222267", "bodyText": "Needs to implement AuditLogMessageSet.", "author": "mandy-chessell", "createdAt": "2020-05-11T18:04:44Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/auditlog/CognosAuditCode.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.auditlog;\n+\n+\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLogRecordSeverity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+\n+\n+public enum CognosAuditCode {", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzMxMA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r426187310", "bodyText": "fixed 3e350a8", "author": "yevgenmar", "createdAt": "2020-05-16T20:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMjI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMjUzNw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423222537", "bodyText": "This is a STARTUP message not INFO message", "author": "mandy-chessell", "createdAt": "2020-05-11T18:05:11Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/auditlog/CognosAuditCode.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.auditlog;\n+\n+\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLogRecordSeverity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+\n+\n+public enum CognosAuditCode {\n+\n+    SERVICE_INITIALIZING(\"OMAS-COGNOS-0001\",\n+            OMRSAuditLogRecordSeverity.INFO,", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyOTY3NA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r427029674", "bodyText": "fixed f0b22ac", "author": "yevgenmar", "createdAt": "2020-05-19T04:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMjUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMjczMw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423222733", "bodyText": "Handles by the admin superclass", "author": "mandy-chessell", "createdAt": "2020-05-11T18:05:30Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/auditlog/CognosAuditCode.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.auditlog;\n+\n+\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLogRecordSeverity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+\n+\n+public enum CognosAuditCode {\n+\n+    SERVICE_INITIALIZING(\"OMAS-COGNOS-0001\",\n+            OMRSAuditLogRecordSeverity.INFO,\n+            \"The Cognos Open Metadata Access Service (OMAS) is initializing a new server instance\",\n+            \"The local server has started up a new instance of the Cognos OMAS.\",\n+            \"No action is required.  This is part of the normal operation of the server.\"),\n+\n+    SERVICE_REGISTERED_WITH_ENTERPRISE_TOPIC(\"OMAS-COGNOS-0002\",", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyOTc1Ng==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r427029756", "bodyText": "removed by f0b22ac", "author": "yevgenmar", "createdAt": "2020-05-19T04:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMjczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMjkwMw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423222903", "bodyText": "IV OUT TOPIC?", "author": "mandy-chessell", "createdAt": "2020-05-11T18:05:48Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/auditlog/CognosAuditCode.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.auditlog;\n+\n+\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLogRecordSeverity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+\n+\n+public enum CognosAuditCode {\n+\n+    SERVICE_INITIALIZING(\"OMAS-COGNOS-0001\",\n+            OMRSAuditLogRecordSeverity.INFO,\n+            \"The Cognos Open Metadata Access Service (OMAS) is initializing a new server instance\",\n+            \"The local server has started up a new instance of the Cognos OMAS.\",\n+            \"No action is required.  This is part of the normal operation of the server.\"),\n+\n+    SERVICE_REGISTERED_WITH_ENTERPRISE_TOPIC(\"OMAS-COGNOS-0002\",\n+            OMRSAuditLogRecordSeverity.INFO,\n+            \"The Cognos Open Metadata Access Service (OMAS) is registering a listener with the OMRS Topic for server {0}\",\n+            \"The Cognos OMAS is registering to receive events from the connected open metadata repositories.\",\n+            \"No action is required.  This is part of the normal operation of the server.\"),\n+\n+    SERVICE_REGISTERED_WITH_IV_IN_TOPIC(\"OMAS-COGNOS-0003\",\n+            OMRSAuditLogRecordSeverity.INFO,\n+            \"The Cognos Open Metadata Access Service (OMAS) is registering a listener with the Cognos In topic {0}\",\n+            \"The Cognos OMAS is registering to receive incoming events from external tools and applications.\",\n+            \"No action is required.  This is part of the normal operation of the server.\"),\n+\n+    SERVICE_REGISTERED_WITH_IV_OUT_TOPIC(\"OMAS-COGNOS-0004\",", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzM4MA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r426187380", "bodyText": "fixed 3e350a8", "author": "yevgenmar", "createdAt": "2020-05-16T20:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMjkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMzI0NQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423223245", "bodyText": "Need to work on these messages - should be explaining what the service does and what to look out for in the start up", "author": "mandy-chessell", "createdAt": "2020-05-11T18:06:27Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/auditlog/CognosAuditCode.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.auditlog;\n+\n+\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLogRecordSeverity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+\n+\n+public enum CognosAuditCode {\n+\n+    SERVICE_INITIALIZING(\"OMAS-COGNOS-0001\",\n+            OMRSAuditLogRecordSeverity.INFO,\n+            \"The Cognos Open Metadata Access Service (OMAS) is initializing a new server instance\",\n+            \"The local server has started up a new instance of the Cognos OMAS.\",\n+            \"No action is required.  This is part of the normal operation of the server.\"),", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMzY4OA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423223688", "bodyText": "There are handlers in the common services that do this - better to use them rather than creating own implementation.", "author": "mandy-chessell", "createdAt": "2020-05-11T18:07:17Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/contentmanager/OMEntityDao.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.contentmanager;\n+\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.utils.Constants;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.MatchCriteria;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.SequencingOrder;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstancePropertyValue;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceStatus;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.TypeDef;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryHelper;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityNotKnownException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityProxyOnlyException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.FunctionNotSupportedException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.InvalidParameterException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PagingErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PropertyErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.RepositoryErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.TypeErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.UserNotAuthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OMEntityDao {\n+\n+    private static final Logger log = LoggerFactory.getLogger(OMEntityDao.class);\n+    protected final OMRSRepositoryConnector enterpriseConnector;\n+    protected List<String> supportedZones;\n+    private final OMRSAuditLog auditLog;\n+    \n+    private String context;\n+    \n+\tprivate static final List<InstanceStatus> FILTER_ACTIVE = Arrays.asList(InstanceStatus.ACTIVE);\n+\n+    public OMEntityDao(OMRSRepositoryConnector enterpriseConnector, List<String> supportedZones, OMRSAuditLog auditLog) {\n+        this.enterpriseConnector = enterpriseConnector;\n+        this.auditLog = auditLog;\n+        this.supportedZones = supportedZones;\n+    }\n+\n+    public void setContext(String value) {\n+    \tcontext = value;\n+    }\n+    \n+    public List<EntityDetail> findEntities(InstanceProperties matchProperties, String typeName, int fromElement, int pageSize) {", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNDI5NA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423224294", "bodyText": "Need to pass the server userId or end user's id - not a fixed value.", "author": "mandy-chessell", "createdAt": "2020-05-11T18:08:20Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/contentmanager/OMEntityDao.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.contentmanager;\n+\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.utils.Constants;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.MatchCriteria;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.SequencingOrder;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstancePropertyValue;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceStatus;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.TypeDef;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryHelper;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityNotKnownException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityProxyOnlyException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.FunctionNotSupportedException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.InvalidParameterException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PagingErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PropertyErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.RepositoryErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.TypeErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.UserNotAuthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OMEntityDao {\n+\n+    private static final Logger log = LoggerFactory.getLogger(OMEntityDao.class);\n+    protected final OMRSRepositoryConnector enterpriseConnector;\n+    protected List<String> supportedZones;\n+    private final OMRSAuditLog auditLog;\n+    \n+    private String context;\n+    \n+\tprivate static final List<InstanceStatus> FILTER_ACTIVE = Arrays.asList(InstanceStatus.ACTIVE);\n+\n+    public OMEntityDao(OMRSRepositoryConnector enterpriseConnector, List<String> supportedZones, OMRSAuditLog auditLog) {\n+        this.enterpriseConnector = enterpriseConnector;\n+        this.auditLog = auditLog;\n+        this.supportedZones = supportedZones;\n+    }\n+\n+    public void setContext(String value) {\n+    \tcontext = value;\n+    }\n+    \n+    public List<EntityDetail> findEntities(InstanceProperties matchProperties, String typeName, int fromElement, int pageSize) {\n+        // GDW the matchProperties passed to this method should have already converted any exact match string\n+        // using the getExactMatchRegex repository helper method\n+        OMRSRepositoryHelper repositoryHelper = enterpriseConnector.getRepositoryHelper();\n+        TypeDef typeDef = repositoryHelper.getTypeDefByName(Constants.COGNOS_USER_ID, typeName);", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNDgwMQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423224801", "bodyText": "Extend the base class rather than implement the interface", "author": "mandy-chessell", "createdAt": "2020-05-11T18:09:12Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/listeners/CognosEnterpriseOmrsEventListener.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.listeners;\n+\n+import org.odpi.openmetadata.accessservices.cognos.auditlog.CognosAuditCode;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.connectors.omrstopic.OMRSTopicListener;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSEventOriginator;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSInstanceEvent;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSInstanceEventProcessor;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSInstanceEventType;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSRegistryEvent;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSTypeDefEvent;\n+import org.odpi.openmetadata.repositoryservices.events.beans.v1.OMRSEventV1;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CognosEnterpriseOmrsEventListener implements OMRSTopicListener {", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2MzA1Mw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r427563053", "bodyText": "class is removed till event implementation", "author": "yevgenmar", "createdAt": "2020-05-19T19:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNDgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTA3Ng==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423225076", "bodyText": "Asset or Database handler?", "author": "mandy-chessell", "createdAt": "2020-05-11T18:09:45Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/server/CognosInstanceHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.server;\n+\n+import org.odpi.openmetadata.accessservices.cognos.assets.DatabaseContextHandler;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+\n+/**\n+ * CognosInstanceHandler retrieves information from the instance map for the\n+ * access service instances. The instance map is thread-safe. Instances are\n+ * added and removed by the CognosAdmin class.\n+ */\n+class CognosInstanceHandler {\n+\tprivate static CognosServicesInstanceMap instanceMap = new CognosServicesInstanceMap();\n+\n+\t/**\n+\t * Default constructor registers the access service\n+\t */\n+\tCognosInstanceHandler() {\n+\t\tnew CognosOMASRegistration();\n+\t}\n+\n+\t/**\n+\t * Retrieve the handler for retrieving assets details for the access service.\n+\t *\n+\t * @param serverName name of the server tied to the request\n+\t * @return assetsHandler for exclusive use by the requested instance\n+\t */\n+\tDatabaseContextHandler getAssetContextHandler(String serverName) {", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxODc0NQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r429018745", "bodyText": "fixed", "author": "yevgenmar", "createdAt": "2020-05-22T03:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTgxMg==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423225812", "bodyText": "Need to handle runtime exceptions and get them to the audit log - no exception class should leave the server because it has a stack trace in it.", "author": "mandy-chessell", "createdAt": "2020-05-11T18:11:05Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/server/CognosRestServices.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.server;\n+\n+import java.util.List;\n+\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabase;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabaseSchema;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerModule;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerSchemaTables;\n+import org.odpi.openmetadata.accessservices.cognos.responses.CognosOMASAPIResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.DatabasesResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.ErrorResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.ModuleResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.SchemaTablesResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.SchemasResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class CognosRestServices {\n+\n+    CognosInstanceHandler  instanceHandler = new CognosInstanceHandler();\n+\n+\n+    private static final Logger log = LoggerFactory.getLogger(CognosRestServices.class);\n+\n+\tpublic CognosOMASAPIResponse getDatabases(String serverName) {\n+\n+\t\ttry {\n+\t\t\tDatabasesResponse response = new DatabasesResponse();\n+\t\t\tList<ResponseContainerDatabase> databases = instanceHandler.getAssetContextHandler(serverName)\n+\t\t\t\t\t.getDatabases();\n+        \tresponse.setDatabasesList(databases);\n+        \treturn response;\n+        }\n+        catch (CognosRuntimeException e) {\n+            log.error(e.getMessage(), e);\n+            return handleErrorResponse(e);", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5OTQxMA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423499410", "bodyText": "Typically APIs support 3 checked exceptions - InvalidParameterException, UserNotAuthorizedException and PropertyServerException.  This enables the caller to work out if it is a coding error, set up error (ie user not set up correctly) or a deeper issue in the metadata ecosystem.", "author": "mandy-chessell", "createdAt": "2020-05-12T06:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNjYzOQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423226639", "bodyText": "Should be using the platform services - not having your own map since your service will not be listed in the platform API query of the server's active services", "author": "mandy-chessell", "createdAt": "2020-05-11T18:12:34Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/server/CognosServicesInstanceMap.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.server;\n+\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * CognosServicesInstanceMap provides the mapping for inbound REST requests to the appropriate instances\n+ * for the requested server.  The map is maintained in a static so it is scoped to the class loader.\n+ *\n+ * Instances of this class call the synchronized static methods to work with the map.\n+ */\n+public class CognosServicesInstanceMap", "originalCommit": "6dc09fd86313c8ef4ac72e5bc41012d891304988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NDQ4NQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r427564485", "bodyText": "fixed by 0c4d72f", "author": "yevgenmar", "createdAt": "2020-05-19T19:59:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNjYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODE3NA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423288174", "bodyText": "Spelling mistake?", "author": "mandy-chessell", "createdAt": "2020-05-11T20:06:50Z", "path": "open-metadata-implementation/access-services/cognos/cognos-api/src/test/java/org/odpi/openmetadata/accessservices/cognos/test/model/module/DataSourceTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.test.model.module;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.DataSource;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Table;\n+import org.odpi.openmetadata.accessservices.cognos.test.utils.TestUtilities;\n+\n+public class DataSourceTest {\n+\n+\tprivate static final String DTASOURCE_NAME = \"DTASOURCE_NAME\";\n+\tprivate static final String SCHEMA = \"SCHEMA\";\n+\tprivate static final String CATALOG = \"CATALOG\";\n+\n+\tString master = \"{\\r\\n\" +\n+\t\t\t\"  \\\"schema\\\" : \\\"SCHEMA\\\",\\r\\n\" +\n+\t\t\t\"  \\\"catalog\\\" : \\\"CATALOG\\\",\\r\\n\" +\n+\t\t\t\"  \\\"name\\\" : \\\"DTASOURCE_NAME\\\",\\r\\n\" +", "originalCommit": "4ca123e0cecb20684fc0a18c68d4db743af70f5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNzk3Mw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r429017973", "bodyText": "fixed 7e3da50", "author": "yevgenmar", "createdAt": "2020-05-22T02:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4OTgyOA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423289828", "bodyText": "Should log each REST call - see RESTCallLogger", "author": "mandy-chessell", "createdAt": "2020-05-11T20:10:08Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/server/CognosRestServices.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.server;\n+\n+import java.util.List;\n+\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabase;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabaseSchema;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerModule;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerSchemaTables;\n+import org.odpi.openmetadata.accessservices.cognos.responses.CognosOMASAPIResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.DatabasesResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.ErrorResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.ModuleResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.SchemaTablesResponse;\n+import org.odpi.openmetadata.accessservices.cognos.responses.SchemasResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class CognosRestServices {\n+\n+    CognosInstanceHandler  instanceHandler = new CognosInstanceHandler();\n+\n+\n+    private static final Logger log = LoggerFactory.getLogger(CognosRestServices.class);\n+\n+\tpublic CognosOMASAPIResponse getDatabases(String serverName) {\n+\n+\t\ttry {\n+\t\t\tDatabasesResponse response = new DatabasesResponse();\n+\t\t\tList<ResponseContainerDatabase> databases = instanceHandler.getAssetContextHandler(serverName)\n+\t\t\t\t\t.getDatabases();\n+        \tresponse.setDatabasesList(databases);\n+        \treturn response;\n+        }\n+        catch (CognosRuntimeException e) {\n+            log.error(e.getMessage(), e);\n+            return handleErrorResponse(e);\n+        }\n+\t}\n+\t\n+\tpublic CognosOMASAPIResponse getSchemas(String serverName, String dataSource) {\n+        try {\n+        \tSchemasResponse response = new SchemasResponse();\n+        \tList<ResponseContainerDatabaseSchema> databasesSchemas = instanceHandler.getAssetContextHandler(serverName)\n+\t\t\t\t\t\t.getDatabaseSchemas(dataSource);\n+        \tresponse.setSchemaList(databasesSchemas);\n+        \treturn response;\n+        } catch (CognosRuntimeException e) {\n+            log.error(e.getMessage(), e);\n+            return handleErrorResponse(e);\n+        }\n+\t}\n+\n+\tpublic CognosOMASAPIResponse getTables(String serverName, String databaseGuid, String schema) {\n+        try {\n+        \tSchemaTablesResponse response = new SchemaTablesResponse();\n+        \tResponseContainerSchemaTables tables = instanceHandler.getAssetContextHandler(serverName)\n+        \t\t\t.getSchemaTables(databaseGuid, schema);\n+        \tresponse.setTableList(tables);\n+        \treturn response;\n+       } catch (CognosRuntimeException e) {\n+            log.error(e.getMessage(), e);\n+            return handleErrorResponse(e);\n+        }\n+\t}\n+\n+\tpublic CognosOMASAPIResponse getModule(String serverName, String databaseGuid, String catalog, String schema) {\n+        try {", "originalCommit": "4ca123e0cecb20684fc0a18c68d4db743af70f5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4OTQzMQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r428689431", "bodyText": "done in 093cf1f", "author": "yevgenmar", "createdAt": "2020-05-21T14:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4OTgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDI4Nw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423290287", "bodyText": "Needs to inherit from OMASSerivceInstance - or subclass", "author": "mandy-chessell", "createdAt": "2020-05-11T20:10:54Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/server/CognosServicesInstance.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.server;\n+\n+\n+import org.odpi.openmetadata.accessservices.cognos.assets.DatabaseContextHandler;\n+\n+/**\n+ * CognosServicesInstance caches references to OMRS objects for a specific server.\n+ * It is also responsible for registering itself in the instance map.\n+ */\n+public class CognosServicesInstance", "originalCommit": "4ca123e0cecb20684fc0a18c68d4db743af70f5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NDc2NA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r427564764", "bodyText": "implemented by 0c4d72f", "author": "yevgenmar", "createdAt": "2020-05-19T20:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MjA1Mg==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423292052", "bodyText": "Covered by the repository helper and common services", "author": "mandy-chessell", "createdAt": "2020-05-11T20:14:21Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/utils/EntityPropertiesBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.utils;\n+\n+\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+\n+\n+public class EntityPropertiesBuilder {\n+", "originalCommit": "4ca123e0cecb20684fc0a18c68d4db743af70f5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MjM0Mw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423292343", "bodyText": "Simialrly see common services and repository helper", "author": "mandy-chessell", "createdAt": "2020-05-11T20:14:52Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/utils/EntityPropertiesUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.utils;\n+\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstancePropertyValue;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.MapPropertyValue;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.PrimitivePropertyValue;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.PrimitiveDefCategory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+public class EntityPropertiesUtils {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EntityPropertiesUtils.class);\n+\n+\n+    public static PrimitivePropertyValue createPrimitiveStringPropertyValue(String value) {", "originalCommit": "4ca123e0cecb20684fc0a18c68d4db743af70f5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNTQ2MA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r429015460", "bodyText": "replaced with calls to OMRSRepositoryPropertiesUtilities in the class\nEntityPropertiesBuilder 39c84a6", "author": "yevgenmar", "createdAt": "2020-05-22T02:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MjM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MzI3NA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423293274", "bodyText": "Add paging properties", "author": "mandy-chessell", "createdAt": "2020-05-11T20:16:41Z", "path": "open-metadata-implementation/access-services/cognos/cognos-spring/src/main/java/org/odpi/openmetadata/accessservices/cognos/server/spring/CognosOMASResource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.server.spring;\n+\n+import io.swagger.v3.oas.annotations.ExternalDocumentation;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.odpi.openmetadata.accessservices.cognos.responses.CognosOMASAPIResponse;\n+import org.odpi.openmetadata.accessservices.cognos.server.CognosRestServices;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+\n+@RestController\n+@RequestMapping(\"/servers/{serverName}/open-metadata/access-services/cognos/users/{userId}/\")\n+\n+@Tag(name=\"Cognos OMAS\",\n+\tdescription=\"The Cognos OMAS queries RDBMS metadata and creates modules for IBM Cognos Analytics.\",\n+\texternalDocs=@ExternalDocumentation(description=\"Cognos Open Metadata Access Service (OMAS)\",\n+\turl=\"https://egeria.odpi.org/open-metadata-implementation/access-services/cognos/\"))\n+\n+\n+public class CognosOMASResource {\n+\n+    private final CognosRestServices restAPI = new CognosRestServices();\n+\n+\t/**\n+\t * Get list of databases.\n+     * @param serverName  unique identifier for requested server.\n+     * @param userId      the unique identifier for the user\n+\t * @return Cognos response contains list of databases.\n+\t */\n+\t@GetMapping(path = \"/databases\")\n+\tpublic CognosOMASAPIResponse getDatabases(\n+\t\t\t@PathVariable(\"serverName\") String serverName,\n+            @PathVariable(\"userId\") String userId", "originalCommit": "4ca123e0cecb20684fc0a18c68d4db743af70f5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MzYzOQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423293639", "bodyText": "Paging properties", "author": "mandy-chessell", "createdAt": "2020-05-11T20:17:28Z", "path": "open-metadata-implementation/access-services/cognos/cognos-spring/src/main/java/org/odpi/openmetadata/accessservices/cognos/server/spring/CognosOMASResource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.server.spring;\n+\n+import io.swagger.v3.oas.annotations.ExternalDocumentation;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.odpi.openmetadata.accessservices.cognos.responses.CognosOMASAPIResponse;\n+import org.odpi.openmetadata.accessservices.cognos.server.CognosRestServices;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+\n+@RestController\n+@RequestMapping(\"/servers/{serverName}/open-metadata/access-services/cognos/users/{userId}/\")\n+\n+@Tag(name=\"Cognos OMAS\",\n+\tdescription=\"The Cognos OMAS queries RDBMS metadata and creates modules for IBM Cognos Analytics.\",\n+\texternalDocs=@ExternalDocumentation(description=\"Cognos Open Metadata Access Service (OMAS)\",\n+\turl=\"https://egeria.odpi.org/open-metadata-implementation/access-services/cognos/\"))\n+\n+\n+public class CognosOMASResource {\n+\n+    private final CognosRestServices restAPI = new CognosRestServices();\n+\n+\t/**\n+\t * Get list of databases.\n+     * @param serverName  unique identifier for requested server.\n+     * @param userId      the unique identifier for the user\n+\t * @return Cognos response contains list of databases.\n+\t */\n+\t@GetMapping(path = \"/databases\")\n+\tpublic CognosOMASAPIResponse getDatabases(\n+\t\t\t@PathVariable(\"serverName\") String serverName,\n+            @PathVariable(\"userId\") String userId\n+\t\t\t)\n+\t{\n+\t\treturn restAPI.getDatabases(serverName);\n+\t}\n+\n+\t/**\n+\t * Get list of schemas of a given dataSource.\n+     * @param serverName  unique identifier for requested server.\n+     * @param userId      the unique identifier for the user\n+\t * @param dataSource data source GUID.\n+\t * @return Cognos response contains list of database schemas.\n+\t */\n+\t@GetMapping(path = \"/{dataSourceGUID}/schemas\")\n+\tpublic CognosOMASAPIResponse getSchemas(\n+\t\t\t@PathVariable(\"serverName\") String serverName,\n+            @PathVariable(\"userId\") String userId,", "originalCommit": "4ca123e0cecb20684fc0a18c68d4db743af70f5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NDExOQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423294119", "bodyText": "Need a specialized response object for each type of response - otherwise can not see what is returned.", "author": "mandy-chessell", "createdAt": "2020-05-11T20:18:21Z", "path": "open-metadata-implementation/access-services/cognos/cognos-spring/src/main/java/org/odpi/openmetadata/accessservices/cognos/server/spring/CognosOMASResource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.server.spring;\n+\n+import io.swagger.v3.oas.annotations.ExternalDocumentation;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.odpi.openmetadata.accessservices.cognos.responses.CognosOMASAPIResponse;\n+import org.odpi.openmetadata.accessservices.cognos.server.CognosRestServices;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+\n+@RestController\n+@RequestMapping(\"/servers/{serverName}/open-metadata/access-services/cognos/users/{userId}/\")\n+\n+@Tag(name=\"Cognos OMAS\",\n+\tdescription=\"The Cognos OMAS queries RDBMS metadata and creates modules for IBM Cognos Analytics.\",\n+\texternalDocs=@ExternalDocumentation(description=\"Cognos Open Metadata Access Service (OMAS)\",\n+\turl=\"https://egeria.odpi.org/open-metadata-implementation/access-services/cognos/\"))\n+\n+\n+public class CognosOMASResource {\n+\n+    private final CognosRestServices restAPI = new CognosRestServices();\n+\n+\t/**\n+\t * Get list of databases.\n+     * @param serverName  unique identifier for requested server.\n+     * @param userId      the unique identifier for the user\n+\t * @return Cognos response contains list of databases.\n+\t */\n+\t@GetMapping(path = \"/databases\")\n+\tpublic CognosOMASAPIResponse getDatabases(\n+\t\t\t@PathVariable(\"serverName\") String serverName,\n+            @PathVariable(\"userId\") String userId\n+\t\t\t)\n+\t{\n+\t\treturn restAPI.getDatabases(serverName);\n+\t}\n+\n+\t/**\n+\t * Get list of schemas of a given dataSource.\n+     * @param serverName  unique identifier for requested server.\n+     * @param userId      the unique identifier for the user\n+\t * @param dataSource data source GUID.\n+\t * @return Cognos response contains list of database schemas.\n+\t */\n+\t@GetMapping(path = \"/{dataSourceGUID}/schemas\")\n+\tpublic CognosOMASAPIResponse getSchemas(", "originalCommit": "4ca123e0cecb20684fc0a18c68d4db743af70f5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "url": "https://github.com/odpi/egeria/commit/f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "message": "fix junit tests for OS independent EOL\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-11T21:41:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NzQxNw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423497417", "bodyText": "Write audit log record of type \"EVENT\"", "author": "mandy-chessell", "createdAt": "2020-05-12T06:44:49Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/listeners/CognosEnterpriseOmrsEventListener.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.listeners;\n+\n+import org.odpi.openmetadata.accessservices.cognos.auditlog.CognosAuditCode;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.connectors.omrstopic.OMRSTopicListener;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSEventOriginator;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSInstanceEvent;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSInstanceEventProcessor;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSInstanceEventType;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSRegistryEvent;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSTypeDefEvent;\n+import org.odpi.openmetadata.repositoryservices.events.beans.v1.OMRSEventV1;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CognosEnterpriseOmrsEventListener implements OMRSTopicListener {\n+\n+\n+    private static final Logger log = LoggerFactory.getLogger(CognosEnterpriseOmrsEventListener.class);\n+    private OMRSInstanceEventProcessor instanceEventProcessor;\n+    private OMRSAuditLog auditLog;\n+\n+    /**\n+     * Object constructor\n+     * @param instanceEventProcessor to process e=incoming events.\n+     * @param auditLog for logging.\n+     */\n+    public CognosEnterpriseOmrsEventListener(OMRSInstanceEventProcessor instanceEventProcessor, OMRSAuditLog auditLog) {\n+\n+        this.instanceEventProcessor = instanceEventProcessor;\n+        this.auditLog = auditLog;\n+    }\n+\n+\n+    /**\n+     * @param event - inbound event\n+     */\n+    public void processEvent(OMRSEventV1 event) {\n+        String actionDescription = \"Process Incoming Event\";\n+\n+        /*\n+         * The event should not be null but worth checking.\n+         */\n+        if (event != null) {\n+            /*\n+             * Determine the category of event to process.\n+             */\n+            switch (event.getEventCategory()) {\n+\n+                case INSTANCE:\n+                    this.processInstanceEvent(new OMRSInstanceEvent(event));\n+                    break;\n+\n+                default:\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(\"This event should not be handled by cognos omas:{0} \", event.getEventCategory());\n+                    }\n+            }\n+        } else {\n+            /*\n+             * A null event was passed - probably should not happen so log audit record.\n+             */\n+            CognosAuditCode auditCode = CognosAuditCode.NULL_OMRS_EVENT_RECEIVED;\n+\n+            auditLog.logRecord(actionDescription,\n+                    auditCode.getLogMessageId(),\n+                    auditCode.getSeverity(),\n+                    auditCode.getFormattedLogMessage(),\n+                    null,\n+                    auditCode.getSystemAction(),\n+                    auditCode.getUserAction());\n+\n+\n+            log.debug(\"Null OMRS Event received \");\n+        }\n+\n+    }\n+\n+\n+    @Override\n+    public void processRegistryEvent(OMRSRegistryEvent event) {\n+\n+    }\n+\n+    @Override\n+    public void processTypeDefEvent(OMRSTypeDefEvent event) {\n+\n+    }\n+\n+    /**\n+     * @param instanceEvent - the event coming from enterprise topic\n+     */\n+    public void processInstanceEvent(OMRSInstanceEvent instanceEvent) {\n+\n+        if(log.isDebugEnabled()) {", "originalCommit": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzYyOA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r426187628", "bodyText": "class removed in abfeb80", "author": "yevgenmar", "createdAt": "2020-05-16T20:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NzQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5ODExMA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423498110", "bodyText": "Not interested in new entities? Or reclassified entities that could indicate that an asset has moved into a supported zone?", "author": "mandy-chessell", "createdAt": "2020-05-12T06:46:21Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/listeners/CognosEnterpriseOmrsEventListener.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.listeners;\n+\n+import org.odpi.openmetadata.accessservices.cognos.auditlog.CognosAuditCode;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.connectors.omrstopic.OMRSTopicListener;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSEventOriginator;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSInstanceEvent;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSInstanceEventProcessor;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSInstanceEventType;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSRegistryEvent;\n+import org.odpi.openmetadata.repositoryservices.events.OMRSTypeDefEvent;\n+import org.odpi.openmetadata.repositoryservices.events.beans.v1.OMRSEventV1;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CognosEnterpriseOmrsEventListener implements OMRSTopicListener {\n+\n+\n+    private static final Logger log = LoggerFactory.getLogger(CognosEnterpriseOmrsEventListener.class);\n+    private OMRSInstanceEventProcessor instanceEventProcessor;\n+    private OMRSAuditLog auditLog;\n+\n+    /**\n+     * Object constructor\n+     * @param instanceEventProcessor to process e=incoming events.\n+     * @param auditLog for logging.\n+     */\n+    public CognosEnterpriseOmrsEventListener(OMRSInstanceEventProcessor instanceEventProcessor, OMRSAuditLog auditLog) {\n+\n+        this.instanceEventProcessor = instanceEventProcessor;\n+        this.auditLog = auditLog;\n+    }\n+\n+\n+    /**\n+     * @param event - inbound event\n+     */\n+    public void processEvent(OMRSEventV1 event) {\n+        String actionDescription = \"Process Incoming Event\";\n+\n+        /*\n+         * The event should not be null but worth checking.\n+         */\n+        if (event != null) {\n+            /*\n+             * Determine the category of event to process.\n+             */\n+            switch (event.getEventCategory()) {\n+\n+                case INSTANCE:\n+                    this.processInstanceEvent(new OMRSInstanceEvent(event));\n+                    break;\n+\n+                default:\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(\"This event should not be handled by cognos omas:{0} \", event.getEventCategory());\n+                    }\n+            }\n+        } else {\n+            /*\n+             * A null event was passed - probably should not happen so log audit record.\n+             */\n+            CognosAuditCode auditCode = CognosAuditCode.NULL_OMRS_EVENT_RECEIVED;\n+\n+            auditLog.logRecord(actionDescription,\n+                    auditCode.getLogMessageId(),\n+                    auditCode.getSeverity(),\n+                    auditCode.getFormattedLogMessage(),\n+                    null,\n+                    auditCode.getSystemAction(),\n+                    auditCode.getUserAction());\n+\n+\n+            log.debug(\"Null OMRS Event received \");\n+        }\n+\n+    }\n+\n+\n+    @Override\n+    public void processRegistryEvent(OMRSRegistryEvent event) {\n+\n+    }\n+\n+    @Override\n+    public void processTypeDefEvent(OMRSTypeDefEvent event) {\n+\n+    }\n+\n+    /**\n+     * @param instanceEvent - the event coming from enterprise topic\n+     */\n+    public void processInstanceEvent(OMRSInstanceEvent instanceEvent) {\n+\n+        if(log.isDebugEnabled()) {\n+            log.debug(\"Processing instance event\", instanceEvent);\n+        }\n+\n+        if (instanceEvent == null) {\n+            log.debug(\"Null instance event - ignoring event\");\n+        } else {\n+            OMRSInstanceEventType instanceEventType = instanceEvent.getInstanceEventType();\n+            OMRSEventOriginator instanceEventOriginator = instanceEvent.getEventOriginator();\n+\n+            if ((instanceEventType != null) && (instanceEventOriginator != null)) {\n+                switch (instanceEventType) {\n+\n+                    //More events will be added\n+                    case NEW_RELATIONSHIP_EVENT:\n+                        instanceEventProcessor.processNewRelationshipEvent(\"EnterpriseOMRSTopic\",\n+                                instanceEventOriginator.getMetadataCollectionId(),\n+                                instanceEventOriginator.getServerName(),\n+                                instanceEventOriginator.getServerType(),\n+                                instanceEventOriginator.getOrganizationName(),\n+                                instanceEvent.getRelationship());\n+                        break;\n+\n+                    case UPDATED_ENTITY_EVENT:", "originalCommit": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzU1Mg==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r426187552", "bodyText": "class removed in abfeb80", "author": "yevgenmar", "createdAt": "2020-05-16T20:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5ODExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDMzMA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423500330", "bodyText": "Should not be wrapping checked exceptions in a runtime exception - need to let them flow to client.", "author": "mandy-chessell", "createdAt": "2020-05-12T06:51:26Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/contentmanager/OMEntityDao.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.contentmanager;\n+\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.utils.Constants;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.MatchCriteria;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.SequencingOrder;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstancePropertyValue;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceStatus;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.TypeDef;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryHelper;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityNotKnownException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityProxyOnlyException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.FunctionNotSupportedException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.InvalidParameterException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PagingErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PropertyErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.RepositoryErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.TypeErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.UserNotAuthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OMEntityDao {\n+\n+    private static final Logger log = LoggerFactory.getLogger(OMEntityDao.class);\n+    protected final OMRSRepositoryConnector enterpriseConnector;\n+    protected List<String> supportedZones;\n+    private final OMRSAuditLog auditLog;\n+    \n+    private String context;\n+    \n+\tprivate static final List<InstanceStatus> FILTER_ACTIVE = Arrays.asList(InstanceStatus.ACTIVE);\n+\n+    public OMEntityDao(OMRSRepositoryConnector enterpriseConnector, List<String> supportedZones, OMRSAuditLog auditLog) {\n+        this.enterpriseConnector = enterpriseConnector;\n+        this.auditLog = auditLog;\n+        this.supportedZones = supportedZones;\n+    }\n+\n+    public void setContext(String value) {\n+    \tcontext = value;\n+    }\n+    \n+    public List<EntityDetail> findEntities(InstanceProperties matchProperties, String typeName, int fromElement, int pageSize) {\n+        // GDW the matchProperties passed to this method should have already converted any exact match string\n+        // using the getExactMatchRegex repository helper method\n+        OMRSRepositoryHelper repositoryHelper = enterpriseConnector.getRepositoryHelper();\n+        TypeDef typeDef = repositoryHelper.getTypeDefByName(Constants.COGNOS_USER_ID, typeName);\n+        List<EntityDetail> existingEntities;\n+        try {\n+            log.debug(\"Retrieving entities of type {} with properties {}\", typeDef.getName(),  matchProperties);\n+            existingEntities = enterpriseConnector.getMetadataCollection()\n+            \t\t.findEntitiesByProperty(Constants.COGNOS_USER_ID,\n+                                            typeDef.getGUID(),\n+                                            matchProperties,\n+                                            MatchCriteria.ALL,\n+                                            fromElement,\n+                                            Collections.singletonList(InstanceStatus.ACTIVE),\n+                                            null,\n+                                            null,\n+                                            null,\n+                                            SequencingOrder.ANY,\n+                                            pageSize);\n+        } catch (InvalidParameterException | PropertyErrorException | TypeErrorException | FunctionNotSupportedException | UserNotAuthorizedException | RepositoryErrorException | PagingErrorException e) {\n+            String keys = String.join(\",\", matchProperties.getInstanceProperties().keySet());\n+            String values = matchProperties.getInstanceProperties().values().stream().map(InstancePropertyValue::valueAsString).collect(Collectors.joining(\",\"));\n+            throw new CognosRuntimeException(CognosErrorCode.GET_ENTITY_EXCEPTION, e, ", "originalCommit": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTgxNg==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423501816", "bodyText": "Use repository handler because it has error handling in it.\nIf the GUID is not valid, the result is EntityNotKnownException.  This is being mapped to a get entity exception and the null reponse is being mapped to an entity not found error code - I think this might be confusing to debug.", "author": "mandy-chessell", "createdAt": "2020-05-12T06:54:46Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/contentmanager/OMEntityDao.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.cognos.contentmanager;\n+\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.utils.Constants;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLog;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.MatchCriteria;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.SequencingOrder;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstancePropertyValue;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceStatus;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.TypeDef;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryHelper;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityNotKnownException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityProxyOnlyException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.FunctionNotSupportedException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.InvalidParameterException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PagingErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PropertyErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.RepositoryErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.TypeErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.UserNotAuthorizedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OMEntityDao {\n+\n+    private static final Logger log = LoggerFactory.getLogger(OMEntityDao.class);\n+    protected final OMRSRepositoryConnector enterpriseConnector;\n+    protected List<String> supportedZones;\n+    private final OMRSAuditLog auditLog;\n+    \n+    private String context;\n+    \n+\tprivate static final List<InstanceStatus> FILTER_ACTIVE = Arrays.asList(InstanceStatus.ACTIVE);\n+\n+    public OMEntityDao(OMRSRepositoryConnector enterpriseConnector, List<String> supportedZones, OMRSAuditLog auditLog) {\n+        this.enterpriseConnector = enterpriseConnector;\n+        this.auditLog = auditLog;\n+        this.supportedZones = supportedZones;\n+    }\n+\n+    public void setContext(String value) {\n+    \tcontext = value;\n+    }\n+    \n+    public List<EntityDetail> findEntities(InstanceProperties matchProperties, String typeName, int fromElement, int pageSize) {\n+        // GDW the matchProperties passed to this method should have already converted any exact match string\n+        // using the getExactMatchRegex repository helper method\n+        OMRSRepositoryHelper repositoryHelper = enterpriseConnector.getRepositoryHelper();\n+        TypeDef typeDef = repositoryHelper.getTypeDefByName(Constants.COGNOS_USER_ID, typeName);\n+        List<EntityDetail> existingEntities;\n+        try {\n+            log.debug(\"Retrieving entities of type {} with properties {}\", typeDef.getName(),  matchProperties);\n+            existingEntities = enterpriseConnector.getMetadataCollection()\n+            \t\t.findEntitiesByProperty(Constants.COGNOS_USER_ID,\n+                                            typeDef.getGUID(),\n+                                            matchProperties,\n+                                            MatchCriteria.ALL,\n+                                            fromElement,\n+                                            Collections.singletonList(InstanceStatus.ACTIVE),\n+                                            null,\n+                                            null,\n+                                            null,\n+                                            SequencingOrder.ANY,\n+                                            pageSize);\n+        } catch (InvalidParameterException | PropertyErrorException | TypeErrorException | FunctionNotSupportedException | UserNotAuthorizedException | RepositoryErrorException | PagingErrorException e) {\n+            String keys = String.join(\",\", matchProperties.getInstanceProperties().keySet());\n+            String values = matchProperties.getInstanceProperties().values().stream().map(InstancePropertyValue::valueAsString).collect(Collectors.joining(\",\"));\n+            throw new CognosRuntimeException(CognosErrorCode.GET_ENTITY_EXCEPTION, e, \n+            \t\tkeys, values, this.getClass().getName());\n+\n+       }\n+        return existingEntities;\n+    }\n+\n+    /**\n+     * Returns the properties object for the given pair of key - value that can be used for retrieving\n+     *\n+     * @param properties - all properties to use for matching\n+     * @param zoneRestricted to take into account zones.\n+     * @return properties with the given key - value pair\n+     */\n+    public InstanceProperties buildMatchingInstanceProperties(Map<String, String> properties, boolean zoneRestricted) {\n+        InstanceProperties instanceProperties = new InstanceProperties();\n+        if(properties != null && properties.size() > 0) {\n+            for(Map.Entry<String, String> entry :  properties.entrySet()){\n+                instanceProperties = enterpriseConnector.getRepositoryHelper().addStringPropertyToInstance(Constants.COGNOS_OMAS_NAME, instanceProperties, entry.getKey(), entry.getValue(), \"throw buildMatchingInstanceProperties\");\n+            }\n+        }\n+        if(zoneRestricted && supportedZones != null && !supportedZones.isEmpty()){\n+            instanceProperties = enterpriseConnector.getRepositoryHelper().addStringArrayPropertyToInstance(Constants.COGNOS_OMAS_NAME, instanceProperties, Constants.ZONE_MEMBERSHIP, supportedZones, \"throw buildMatchingInstanceProperties\");\n+        }\n+\n+        return instanceProperties;\n+    }\n+    \n+\t/**\n+\t * Helper function to fetch entity by GUID from repository.\n+\t * \n+\t * @param guid of the entity to fetch.\n+\t * @return entity with required GUID.\n+\t * \n+\t * @throws CognosRuntimeException if entity cannot be fetched.\n+\t */\n+    public EntityDetail getEntityByGuid(String guid)  {\n+        EntityDetail entity = null;\n+        try {", "originalCommit": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzcyMQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423503721", "bodyText": "What if there are 4000 databases to return - need paging.\nThis is a general comment - all of the APIs that retrieve a list need paging parameters.\nIn addition the userId need to be passed so it can be used on the call to the repository connector - otherwise the repositroy connector will throw an exception if the user is not correct when security is turned on.", "author": "mandy-chessell", "createdAt": "2020-05-12T06:58:38Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/assets/DatabaseContextHandler.java", "diffHunk": "@@ -0,0 +1,500 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.assets;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+\n+import org.odpi.openmetadata.accessservices.cognos.contentmanager.OMEntityDao;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabase;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabaseSchema;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerModule;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerSchemaTables;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Column;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.DataSource;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignColumn;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Module;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.PrimaryKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Table;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.TableItem;\n+import org.odpi.openmetadata.accessservices.cognos.utils.Constants;\n+\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatabaseContextHandler {\n+\n+\n+\tprivate static final Logger log = LoggerFactory.getLogger(DatabaseContextHandler.class);\n+\tprivate OMEntityDao omEntityDao;\n+\n+\tpublic DatabaseContextHandler(OMEntityDao omEntityDao) {\n+\t\tthis.omEntityDao = omEntityDao;\n+\t}\n+\t\n+\t/**\n+\t * Set context of the execution.\n+\t * Every public method should call the method setContext() first to set the context.\n+\t */\n+\tvoid setContext() {\n+\t\tomEntityDao.setContext(new Throwable().getStackTrace()[1].getMethodName());\n+\t}\n+\n+\n+\t/**\n+\t * Get list of databases on the server.\n+\t * @return list of database descriptors.\n+\t */\n+\tpublic List<ResponseContainerDatabase> getDatabases() {\n+\t\t", "originalCommit": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzk5Mw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423503993", "bodyText": "Need to validate that GUID is not null - in fact this is a general comment that parameters coming from the API need to be policed both client side and server side.  The server side parameter validation is typically done in the handler layer.", "author": "mandy-chessell", "createdAt": "2020-05-12T06:59:12Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/assets/DatabaseContextHandler.java", "diffHunk": "@@ -0,0 +1,500 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.assets;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+\n+import org.odpi.openmetadata.accessservices.cognos.contentmanager.OMEntityDao;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabase;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabaseSchema;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerModule;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerSchemaTables;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Column;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.DataSource;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignColumn;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Module;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.PrimaryKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Table;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.TableItem;\n+import org.odpi.openmetadata.accessservices.cognos.utils.Constants;\n+\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatabaseContextHandler {\n+\n+\n+\tprivate static final Logger log = LoggerFactory.getLogger(DatabaseContextHandler.class);\n+\tprivate OMEntityDao omEntityDao;\n+\n+\tpublic DatabaseContextHandler(OMEntityDao omEntityDao) {\n+\t\tthis.omEntityDao = omEntityDao;\n+\t}\n+\t\n+\t/**\n+\t * Set context of the execution.\n+\t * Every public method should call the method setContext() first to set the context.\n+\t */\n+\tvoid setContext() {\n+\t\tomEntityDao.setContext(new Throwable().getStackTrace()[1].getMethodName());\n+\t}\n+\n+\n+\t/**\n+\t * Get list of databases on the server.\n+\t * @return list of database descriptors.\n+\t */\n+\tpublic List<ResponseContainerDatabase> getDatabases() {\n+\t\t\n+\t\tsetContext();\n+\n+\t\tInstanceProperties instanceProperties = omEntityDao.buildMatchingInstanceProperties(Collections.emptyMap(), true);\n+\t\tList<EntityDetail> entities = omEntityDao.findEntities(instanceProperties, Constants.DATABASE, 0, 0);\n+\t\treturn Optional.ofNullable(entities).map(Collection::stream).orElseGet(Stream::empty)\n+\t\t\t\t.parallel()\n+\t\t\t\t.map(this::buildDatabase)\n+\t\t\t\t.filter(Objects::nonNull).collect(Collectors.toList());\n+\t}\n+\t\n+\tprivate ResponseContainerDatabase buildDatabase(EntityDetail e) {\n+\t\tResponseContainerDatabase ret = new ResponseContainerDatabase();\n+\t\tret.setDbName(this.getEntityStringProperty(e, Constants.NAME));\n+\t\tret.setDbType(this.getEntityStringProperty(e, Constants.TYPE));\n+\t\tret.setDbVersion(this.getEntityStringProperty(e, Constants.VERSION));\n+\t\tret.setGUID(e.getGUID());\n+\t\treturn ret;\n+\t}\n+\n+\n+\n+\t/**\n+\t * Retrieve schemas for given database from repository.\n+\t * \n+\t * @param guidDataSource defines database\n+\t * @return list of schemas attributes.\n+\t */\n+\tpublic List<ResponseContainerDatabaseSchema> getDatabaseSchemas(String guidDataSource) {", "originalCommit": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNzgwMQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423507801", "bodyText": "This is an expensive way to get the method name - typically we set up a static final string in the REST services layer and pass it down - it means that the method name in externalised messages and exceptions is a method name that is meaningful to the consumer.\nFor logic/unexpected errors the stack trace is logged to the audit log in an EXCEPTION message.\nFor checked exceptions, the error handling values should have enough information to debug the problem without the stack trace.", "author": "mandy-chessell", "createdAt": "2020-05-12T07:07:01Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/assets/DatabaseContextHandler.java", "diffHunk": "@@ -0,0 +1,500 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.assets;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+\n+import org.odpi.openmetadata.accessservices.cognos.contentmanager.OMEntityDao;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabase;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabaseSchema;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerModule;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerSchemaTables;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Column;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.DataSource;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignColumn;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Module;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.PrimaryKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Table;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.TableItem;\n+import org.odpi.openmetadata.accessservices.cognos.utils.Constants;\n+\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatabaseContextHandler {\n+\n+\n+\tprivate static final Logger log = LoggerFactory.getLogger(DatabaseContextHandler.class);\n+\tprivate OMEntityDao omEntityDao;\n+\n+\tpublic DatabaseContextHandler(OMEntityDao omEntityDao) {\n+\t\tthis.omEntityDao = omEntityDao;\n+\t}\n+\t\n+\t/**\n+\t * Set context of the execution.\n+\t * Every public method should call the method setContext() first to set the context.\n+\t */\n+\tvoid setContext() {\n+\t\tomEntityDao.setContext(new Throwable().getStackTrace()[1].getMethodName());", "originalCommit": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MDQ3NA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r428990474", "bodyText": "fixed", "author": "yevgenmar", "createdAt": "2020-05-22T00:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNzgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwOTA1NQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423509055", "bodyText": "Debug logging should not be used for error handling.  This logging will be turned off in a production environment.\nWe also avoid using variable names of a single letter because it makes it harder for someone else to read.", "author": "mandy-chessell", "createdAt": "2020-05-12T07:09:36Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/assets/DatabaseContextHandler.java", "diffHunk": "@@ -0,0 +1,500 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.assets;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+\n+import org.odpi.openmetadata.accessservices.cognos.contentmanager.OMEntityDao;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabase;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabaseSchema;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerModule;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerSchemaTables;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Column;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.DataSource;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignColumn;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Module;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.PrimaryKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Table;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.TableItem;\n+import org.odpi.openmetadata.accessservices.cognos.utils.Constants;\n+\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatabaseContextHandler {\n+\n+\n+\tprivate static final Logger log = LoggerFactory.getLogger(DatabaseContextHandler.class);\n+\tprivate OMEntityDao omEntityDao;\n+\n+\tpublic DatabaseContextHandler(OMEntityDao omEntityDao) {\n+\t\tthis.omEntityDao = omEntityDao;\n+\t}\n+\t\n+\t/**\n+\t * Set context of the execution.\n+\t * Every public method should call the method setContext() first to set the context.\n+\t */\n+\tvoid setContext() {\n+\t\tomEntityDao.setContext(new Throwable().getStackTrace()[1].getMethodName());\n+\t}\n+\n+\n+\t/**\n+\t * Get list of databases on the server.\n+\t * @return list of database descriptors.\n+\t */\n+\tpublic List<ResponseContainerDatabase> getDatabases() {\n+\t\t\n+\t\tsetContext();\n+\n+\t\tInstanceProperties instanceProperties = omEntityDao.buildMatchingInstanceProperties(Collections.emptyMap(), true);\n+\t\tList<EntityDetail> entities = omEntityDao.findEntities(instanceProperties, Constants.DATABASE, 0, 0);\n+\t\treturn Optional.ofNullable(entities).map(Collection::stream).orElseGet(Stream::empty)\n+\t\t\t\t.parallel()\n+\t\t\t\t.map(this::buildDatabase)\n+\t\t\t\t.filter(Objects::nonNull).collect(Collectors.toList());\n+\t}\n+\t\n+\tprivate ResponseContainerDatabase buildDatabase(EntityDetail e) {\n+\t\tResponseContainerDatabase ret = new ResponseContainerDatabase();\n+\t\tret.setDbName(this.getEntityStringProperty(e, Constants.NAME));\n+\t\tret.setDbType(this.getEntityStringProperty(e, Constants.TYPE));\n+\t\tret.setDbVersion(this.getEntityStringProperty(e, Constants.VERSION));\n+\t\tret.setGUID(e.getGUID());\n+\t\treturn ret;\n+\t}\n+\n+\n+\n+\t/**\n+\t * Retrieve schemas for given database from repository.\n+\t * \n+\t * @param guidDataSource defines database\n+\t * @return list of schemas attributes.\n+\t */\n+\tpublic List<ResponseContainerDatabaseSchema> getDatabaseSchemas(String guidDataSource) {\n+\n+\t\tsetContext();\n+\n+\t\tEntityDetail db = omEntityDao.getEntityByGuid(guidDataSource);\n+\t\tString catalogName = getEntityStringProperty(db, Constants.ATTRIBUTE_NAME);\n+\n+\t\tList<Relationship> db2SchemaRelationships = omEntityDao.getRelationshipsForEntity(db, Constants.DATA_CONTENT_FOR_DATASET);\n+\n+\t\tif (db2SchemaRelationships == null) {\n+\t\t\treturn Collections.emptyList();\t// no schemas\n+\t\t}\n+\t\t\n+\t\tList<ResponseContainerDatabaseSchema> ret = db2SchemaRelationships.parallelStream()\n+\t\t\t\t.map(this::getSchemaEntityFromRelationship)\n+\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t.map(e->buildSchemaForRelationship(catalogName, e))\n+\t\t\t\t.filter(Objects::nonNull).collect(Collectors.toList());\n+\t\t\n+\t\tret.sort(Comparator.comparing(e->e.getSchema()));\n+\n+\t\treturn ret;\n+\t}\n+\n+\tprivate ResponseContainerDatabaseSchema buildSchemaForRelationship(String catalogName, EntityDetail dbSchemaEntity) {\n+\t\t\tString schemaName = getEntityStringProperty(dbSchemaEntity, Constants.ATTRIBUTE_NAME);\n+\t\t\tResponseContainerDatabaseSchema schema = new ResponseContainerDatabaseSchema();\n+\t\t\tschema.setCatalog(catalogName);\n+\t\t\tschema.setSchema(schemaName);\n+\t\t\tschema.setId(schema.buildId());\n+\t\treturn schema;\n+\t}\n+\n+\t/**\n+\t * Get schema entity from relationship catalog->schema\n+\t * @param r relationship\n+\t * @return schema entity.\n+\t */\n+\tprivate EntityDetail getSchemaEntityFromRelationship(Relationship r) {\n+\t\ttry {\n+\t\t\treturn omEntityDao.getEntityByGuid(r.getEntityTwoProxy().getGUID());\n+\t\t} catch (CognosRuntimeException e) {\n+\t\t\t// don't throw \n+\t\t\tlog.warn(e.getMessage(), e);", "originalCommit": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxMTg3OA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r423511878", "bodyText": "Need to filter returned assets to removed those not in the supported zones.\n(This is done for you if you use the relationalDatabaseHandler - or if you don't like that, the more primitive asset handler)", "author": "mandy-chessell", "createdAt": "2020-05-12T07:14:51Z", "path": "open-metadata-implementation/access-services/cognos/cognos-server/src/main/java/org/odpi/openmetadata/accessservices/cognos/assets/DatabaseContextHandler.java", "diffHunk": "@@ -0,0 +1,500 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.cognos.assets;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+\n+import org.odpi.openmetadata.accessservices.cognos.contentmanager.OMEntityDao;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.CognosErrorCode;\n+import org.odpi.openmetadata.accessservices.cognos.ffdc.exceptions.CognosRuntimeException;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabase;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerDatabaseSchema;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerModule;\n+import org.odpi.openmetadata.accessservices.cognos.model.ResponseContainerSchemaTables;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Column;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.DataSource;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignColumn;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.ForeignKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Module;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.PrimaryKey;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.Table;\n+import org.odpi.openmetadata.accessservices.cognos.model.module.TableItem;\n+import org.odpi.openmetadata.accessservices.cognos.utils.Constants;\n+\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatabaseContextHandler {\n+\n+\n+\tprivate static final Logger log = LoggerFactory.getLogger(DatabaseContextHandler.class);\n+\tprivate OMEntityDao omEntityDao;\n+\n+\tpublic DatabaseContextHandler(OMEntityDao omEntityDao) {\n+\t\tthis.omEntityDao = omEntityDao;\n+\t}\n+\t\n+\t/**\n+\t * Set context of the execution.\n+\t * Every public method should call the method setContext() first to set the context.\n+\t */\n+\tvoid setContext() {\n+\t\tomEntityDao.setContext(new Throwable().getStackTrace()[1].getMethodName());\n+\t}\n+\n+\n+\t/**\n+\t * Get list of databases on the server.\n+\t * @return list of database descriptors.\n+\t */\n+\tpublic List<ResponseContainerDatabase> getDatabases() {\n+\t\t\n+\t\tsetContext();\n+\n+\t\tInstanceProperties instanceProperties = omEntityDao.buildMatchingInstanceProperties(Collections.emptyMap(), true);\n+\t\tList<EntityDetail> entities = omEntityDao.findEntities(instanceProperties, Constants.DATABASE, 0, 0);", "originalCommit": "f5a6767ea2d79ff6686a0f3fd0c9f2aa3db0f374", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c8c01d03abbe54945ca1b10179edd0066ce19aa7", "url": "https://github.com/odpi/egeria/commit/c8c01d03abbe54945ca1b10179edd0066ce19aa7", "message": "fix error handling:\n1. Runtime exceptions are replaced with checked\n2. CognosErrorCode implements ExceptionMessageSet\n\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-13T16:01:12Z", "type": "commit"}, {"oid": "b391b1c85308b6ec85ce7ca893a205b36e922db1", "url": "https://github.com/odpi/egeria/commit/b391b1c85308b6ec85ce7ca893a205b36e922db1", "message": "switched to junit4 from junit5\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-13T18:16:53Z", "type": "commit"}, {"oid": "2c7f52af9a67feb496eedd853b634a9b5f478b2f", "url": "https://github.com/odpi/egeria/commit/2c7f52af9a67feb496eedd853b634a9b5f478b2f", "message": "clean pom files:\n1. add scm element\n2. replace local version dependency with the version from\ndependencyManagement\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-13T19:42:13Z", "type": "commit"}, {"oid": "0e5b70c37236726ec3a327a879fd7b45d02a42ce", "url": "https://github.com/odpi/egeria/commit/0e5b70c37236726ec3a327a879fd7b45d02a42ce", "message": "dependency on spring-core removed for server module\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-14T18:29:23Z", "type": "commit"}, {"oid": "abfeb80befc735f25bce8094690054910ba8a957", "url": "https://github.com/odpi/egeria/commit/abfeb80befc735f25bce8094690054910ba8a957", "message": "Simplified Response container,\nEvent listener removed, will be added as part event implementation\n\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-14T21:51:36Z", "type": "commit"}, {"oid": "1eef3f3c31278b630500dd20fdb96adac9084371", "url": "https://github.com/odpi/egeria/commit/1eef3f3c31278b630500dd20fdb96adac9084371", "message": "move tests to testNG framework since junit4 tests are skipped\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-15T18:22:50Z", "type": "commit"}, {"oid": "3e350a8565dba9e743c9270f540eadfc16ba2b25", "url": "https://github.com/odpi/egeria/commit/3e350a8565dba9e743c9270f540eadfc16ba2b25", "message": "Audit code enum implements AuditLogMessageSet\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-16T19:43:09Z", "type": "commit"}, {"oid": "f0b22ac93e4d2f67fbb0188540fc990d12587547", "url": "https://github.com/odpi/egeria/commit/f0b22ac93e4d2f67fbb0188540fc990d12587547", "message": "use superclass implementations for Admin\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-19T03:45:08Z", "type": "commit"}, {"oid": "60a002493d6d31e485831ce873cc6f3efb9e9b73", "url": "https://github.com/odpi/egeria/commit/60a002493d6d31e485831ce873cc6f3efb9e9b73", "message": "set context for logging from constant\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-19T13:39:43Z", "type": "commit"}, {"oid": "6a949e66f30ac571db24dc6c9eac8dd88db9db9e", "url": "https://github.com/odpi/egeria/commit/6a949e66f30ac571db24dc6c9eac8dd88db9db9e", "message": "fix ambiguous Module reference for java 11.\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-19T14:31:49Z", "type": "commit"}, {"oid": "356d9ddce36b4c0adcd1e7af32bb738b0dee1477", "url": "https://github.com/odpi/egeria/commit/356d9ddce36b4c0adcd1e7af32bb738b0dee1477", "message": "add Javadocs\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-19T15:03:41Z", "type": "commit"}, {"oid": "5349698f036b7f7b43c984006465e3fa1b1a139c", "url": "https://github.com/odpi/egeria/commit/5349698f036b7f7b43c984006465e3fa1b1a139c", "message": "fix Model class reference ambiguity.\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-19T15:48:42Z", "type": "commit"}, {"oid": "0c4d72f309938f86e2c3a8830dec3e2002e47a5f", "url": "https://github.com/odpi/egeria/commit/0c4d72f309938f86e2c3a8830dec3e2002e47a5f", "message": "use OCF base classes for Cognos OMAS Service instance, instance handler\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-19T18:28:43Z", "type": "commit"}, {"oid": "39c84a6c031f3af741e34a79ef77bab68549f5cb", "url": "https://github.com/odpi/egeria/commit/39c84a6c031f3af741e34a79ef77bab68549f5cb", "message": "use OMRSRepositoryPropertiesUtilities to create  property values\nmove testing code\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-20T20:53:49Z", "type": "commit"}, {"oid": "093cf1fb52c06600366ee4af5d9d089208219703", "url": "https://github.com/odpi/egeria/commit/093cf1fb52c06600366ee4af5d9d089208219703", "message": "logging REST calls\nremove slf4j logging\nhandle exceptions with standard handler at API level\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-21T14:28:35Z", "type": "commit"}, {"oid": "9e0d7848abc0dd23daf2825bdd0e2dfdcab27edf", "url": "https://github.com/odpi/egeria/commit/9e0d7848abc0dd23daf2825bdd0e2dfdcab27edf", "message": "rename Cognos to AnalyticsModeling: classes renaming\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-21T15:41:44Z", "type": "commit"}, {"oid": "b27b4f9ae40d8875bc7d8ad2492e76010ef39b4f", "url": "https://github.com/odpi/egeria/commit/b27b4f9ae40d8875bc7d8ad2492e76010ef39b4f", "message": "rename Cognos to AnalyticsModeling: packages renaming\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-21T15:53:00Z", "type": "commit"}, {"oid": "2e57ec13aacee7a80b3f2b7a9b0c177344b63a16", "url": "https://github.com/odpi/egeria/commit/2e57ec13aacee7a80b3f2b7a9b0c177344b63a16", "message": "rename Cognos to AnalyticsModeling: remove references of Cognos from\nsource code\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-21T16:53:58Z", "type": "commit"}, {"oid": "28f6562729c3930aa8acd2688f8e79e133cadb52", "url": "https://github.com/odpi/egeria/commit/28f6562729c3930aa8acd2688f8e79e133cadb52", "message": "rename Cognos to AnalyticsModeling: AccessServiceDescription and\nreferences\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-21T17:18:47Z", "type": "commit"}, {"oid": "8a052e5edb2bbe27f5fab8a8d88429c9236a8f1b", "url": "https://github.com/odpi/egeria/commit/8a052e5edb2bbe27f5fab8a8d88429c9236a8f1b", "message": "rename plugin for parent project\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-21T23:41:22Z", "type": "commit"}, {"oid": "ca4f952fdd51d7764f1b56ba0599a5d6502d01cb", "url": "https://github.com/odpi/egeria/commit/ca4f952fdd51d7764f1b56ba0599a5d6502d01cb", "message": "fix Java 11 class ambiguity\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-22T00:16:30Z", "type": "commit"}, {"oid": "97426501de85b93b80f7daa5a479599b282a600b", "url": "https://github.com/odpi/egeria/commit/97426501de85b93b80f7daa5a479599b282a600b", "message": "fix attribute name in the module response\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-22T00:24:01Z", "type": "commit"}, {"oid": "7e3da50956120aa07bdf90ea3dfc169353600551", "url": "https://github.com/odpi/egeria/commit/7e3da50956120aa07bdf90ea3dfc169353600551", "message": "fix typo\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-22T00:26:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNTQ5NQ==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r431325495", "bodyText": "This audit log entry is an INFO not DEBUG - this means it should not be putput one each requests.  Either use SLF4J or turn the Category to be DEBUG", "author": "mandy-chessell", "createdAt": "2020-05-27T17:42:15Z", "path": "open-metadata-implementation/access-services/analytics-modeling/analytics-modeling-server/src/main/java/org/odpi/openmetadata/accessservices/analyticsmodeling/contentmanager/OMEntityDao.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.analyticsmodeling.contentmanager;\n+\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.auditlog.AnalyticsModelingAuditCode;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.ffdc.AnalyticsModelingErrorCode;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.ffdc.exceptions.AnalyticsModelingCheckedException;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.utils.Constants;\n+import org.odpi.openmetadata.frameworks.auditlog.AuditLog;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.MatchCriteria;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.SequencingOrder;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstancePropertyValue;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceStatus;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.TypeDef;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryConnector;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryHelper;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityNotKnownException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.EntityProxyOnlyException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.FunctionNotSupportedException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.InvalidParameterException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PagingErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.PropertyErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.RepositoryErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.TypeErrorException;\n+import org.odpi.openmetadata.repositoryservices.ffdc.exception.UserNotAuthorizedException;\n+\n+/**\n+ * The class implements access wrapper to retrieve data OMRS.\n+ * \n+ */\n+public class OMEntityDao {\n+\n+    protected final OMRSRepositoryConnector enterpriseConnector;\n+    protected List<String> supportedZones;\n+    private final AuditLog auditLog;\n+    \n+    private String context;\n+    \n+\tprivate static final List<InstanceStatus> FILTER_ACTIVE = Arrays.asList(InstanceStatus.ACTIVE);\n+\n+    public OMEntityDao(OMRSRepositoryConnector enterpriseConnector, List<String> supportedZones, AuditLog auditLog) {\n+        this.enterpriseConnector = enterpriseConnector;\n+        this.auditLog = auditLog;\n+        this.supportedZones = supportedZones;\n+    }\n+\n+    /**\n+     * Set context of the execution for logging.\n+     * @param value high level method/operation requested by user.\n+     */\n+    public void setContext(String value) {\n+    \tcontext = value;\n+    }\n+    \n+    /**\n+     * Find entities matching criteria.\n+     * @param matchProperties filter.\n+     * @param typeName of the requested entity.\n+     * @param fromElement index of the first entity.\n+     * @param pageSize number of entities to return.\n+     * @return list of matching entities\n+     * @throws AnalyticsModelingCheckedException in case repository fails.\n+     */\n+    public List<EntityDetail> findEntities(InstanceProperties matchProperties, String typeName, int fromElement, int pageSize) throws AnalyticsModelingCheckedException {\n+        // GDW the matchProperties passed to this method should have already converted any exact match string\n+        // using the getExactMatchRegex repository helper method\n+        OMRSRepositoryHelper repositoryHelper = enterpriseConnector.getRepositoryHelper();\n+        TypeDef typeDef = repositoryHelper.getTypeDefByName(Constants.ANALYTICS_MODELING_USER_ID, typeName);\n+        List<EntityDetail> existingEntities;\n+        try {\n+            auditLog.logMessage(context, AnalyticsModelingAuditCode.FIND_ENTITIES.getMessageDefinition(typeDef.getName(),  matchProperties.toString()));", "originalCommit": "7e3da50956120aa07bdf90ea3dfc169353600551", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNjE4MA==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r431326180", "bodyText": "These message descriptions will not pass the audit log unit test.  It is ok for an initial drop but needs to be improved - look at unit test for the Audit log and exceptions in Asset Owner OMAS", "author": "mandy-chessell", "createdAt": "2020-05-27T17:43:25Z", "path": "open-metadata-implementation/access-services/analytics-modeling/analytics-modeling-server/src/main/java/org/odpi/openmetadata/accessservices/analyticsmodeling/auditlog/AnalyticsModelingAuditCode.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.analyticsmodeling.auditlog;\n+\n+\n+import org.odpi.openmetadata.frameworks.auditlog.messagesets.AuditLogMessageDefinition;\n+import org.odpi.openmetadata.frameworks.auditlog.messagesets.AuditLogMessageSet;\n+import org.odpi.openmetadata.frameworks.auditlog.messagesets.MessageDefinition;\n+import org.odpi.openmetadata.repositoryservices.auditlog.OMRSAuditLogRecordSeverity;\n+\n+/**\n+ * The AnalyticsModelingAuditCode is used to define the message content for the OMRS Audit Log.\n+ * <p>\n+ * The 5 fields in the enum are:\n+ * <ul>\n+ * <li>Log Message Id - to uniquely identify the message</li>\n+ * <li>Severity - is this an event, decision, action, error or exception</li>\n+ * <li>Log Message Text - includes placeholder to allow additional values to be captured</li>\n+ * <li>Additional Information - further parameters and data relating to the audit message (optional)</li>\n+ * <li>SystemAction - describes the result of the situation</li>\n+ * <li>UserAction - describes how a user should correct the situation</li>\n+ * </ul>\n+ */\n+public enum AnalyticsModelingAuditCode implements AuditLogMessageSet {\n+\n+    SERVICE_INITIALIZING(\"OMAS-ANALYTICS-MODELING-0001\",\n+            OMRSAuditLogRecordSeverity.STARTUP,", "originalCommit": "7e3da50956120aa07bdf90ea3dfc169353600551", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyODM1Nw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r431328357", "bodyText": "This error handling is merging errors due to bad parameters, security errors and errors in the repositorys into a single exception.  This makes it hard for the client to recover.  See https://egeria.odpi.org/open-metadata-publication/website/diagnostic-guide/", "author": "mandy-chessell", "createdAt": "2020-05-27T17:47:00Z", "path": "open-metadata-implementation/access-services/analytics-modeling/analytics-modeling-server/src/main/java/org/odpi/openmetadata/accessservices/analyticsmodeling/server/AnalyticsModelingInstanceHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.analyticsmodeling.server;\n+\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.assets.DatabaseContextHandler;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.ffdc.AnalyticsModelingErrorCode;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.ffdc.exceptions.AnalyticsModelingCheckedException;\n+import org.odpi.openmetadata.adminservices.configuration.registration.AccessServiceDescription;\n+import org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException;\n+import org.odpi.openmetadata.commonservices.ffdc.exceptions.PropertyServerException;\n+import org.odpi.openmetadata.commonservices.ffdc.exceptions.UserNotAuthorizedException;\n+import org.odpi.openmetadata.commonservices.multitenant.OCFOMASServiceInstanceHandler;\n+\n+/**\n+ * AnalyticsModelingInstanceHandler retrieves information from the instance map for the\n+ * access service instances. The instance map is thread-safe. Instances are\n+ * added and removed by the AnalyticsModelingAdmin class.\n+ */\n+class AnalyticsModelingInstanceHandler extends OCFOMASServiceInstanceHandler {\n+\n+\t/**\n+\t * Default constructor registers the access service\n+\t */\n+\tAnalyticsModelingInstanceHandler() {\n+        super(AccessServiceDescription.ANALYTICS_MODELING_OMAS.getAccessServiceFullName());\n+\n+        AnalyticsModelingOMASRegistration.registerAccessService();\n+\t}\n+\n+\t/**\n+\t * Retrieve the handler for retrieving assets details for the access service.\n+\t *\n+\t * @param serverName name of the server tied to the request\n+\t * @param userId of the request\n+\t * @param serviceOperationName context\n+\t * @return database handler for exclusive use by the requested instance\n+\t * @throws AnalyticsModelingCheckedException if server is not initialized.\n+\t */\n+\n+\tDatabaseContextHandler getDatabaseContextHandler(String serverName, String userId, String serviceOperationName)\n+\t\t\tthrows AnalyticsModelingCheckedException {\n+\t\t\n+\t\ttry {\n+\t\t\tAnalyticsModelingServicesInstance instance = (AnalyticsModelingServicesInstance)\n+\t\t\t\t\tsuper.getServerServiceInstance(userId, serverName, serviceOperationName);\n+\t\t\tif (instance != null) {\n+\t\t\t\treturn instance.getContextBuilder();\n+\t\t\t}\n+\t\t} catch (InvalidParameterException | UserNotAuthorizedException | PropertyServerException error) {\n+\t\t\tthrow new AnalyticsModelingCheckedException(\n+\t\t\t\t\tAnalyticsModelingErrorCode.SERVICE_INSTANCE_FAILURE.getMessageDefinition(serverName, userId, serviceOperationName),\n+\t\t\t\t\tthis.getClass().getSimpleName(),\n+\t\t\t\t\tserviceOperationName, \n+\t\t\t\t\terror);\n+\t\t}\n+\n+\t\tthrow new AnalyticsModelingCheckedException(", "originalCommit": "7e3da50956120aa07bdf90ea3dfc169353600551", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyOTI3Mg==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r431329272", "bodyText": "I can not see 1) where the security verifier is called to check the user has access to the asset - or the supportedZones are checked.", "author": "mandy-chessell", "createdAt": "2020-05-27T17:48:21Z", "path": "open-metadata-implementation/access-services/analytics-modeling/analytics-modeling-server/src/main/java/org/odpi/openmetadata/accessservices/analyticsmodeling/server/AnalyticsModelingRestServices.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.analyticsmodeling.server;\n+\n+import java.util.List;\n+\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.ffdc.exceptions.AnalyticsModelingCheckedException;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.model.ResponseContainerDatabase;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.model.ResponseContainerDatabaseSchema;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.model.ResponseContainerModule;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.model.ResponseContainerSchemaTables;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.responses.AnalyticsModelingOMASAPIResponse;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.responses.DatabasesResponse;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.responses.ErrorResponse;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.responses.ModuleResponse;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.responses.SchemaTablesResponse;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.responses.SchemasResponse;\n+import org.odpi.openmetadata.adminservices.configuration.registration.AccessServiceDescription;\n+import org.odpi.openmetadata.commonservices.ffdc.RESTCallLogger;\n+import org.odpi.openmetadata.commonservices.ffdc.RESTCallToken;\n+import org.odpi.openmetadata.commonservices.ffdc.RESTExceptionHandler;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Server-side implementation of the Analytics Modeling OMAS interface for modeling.\n+ */\n+public class AnalyticsModelingRestServices {\n+\n+\tAnalyticsModelingInstanceHandler instanceHandler = new AnalyticsModelingInstanceHandler();\n+\n+\tprivate static RESTCallLogger restCallLogger = new RESTCallLogger(LoggerFactory.getLogger(AnalyticsModelingRestServices.class),\n+\t\t\tAccessServiceDescription.ANALYTICS_MODELING_OMAS.getAccessServiceFullName());\n+\tprivate RESTExceptionHandler restExceptionHandler = new RESTExceptionHandler();\n+\n+\t/**\n+\t * Get databases available on the server for the user.\n+\t * \n+\t * @param serverName of the server.\n+\t * @param userId     of the user.\n+\t * @return list of databases for the requested server/user.\n+\t */\n+\tpublic AnalyticsModelingOMASAPIResponse getDatabases(String serverName, String userId) {\n+\n+\t\tString methodName = \"getDatabases\";\n+\t\tAnalyticsModelingOMASAPIResponse ret;\n+\t\tRESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n+\t\ttry {\n+\t\t\tDatabasesResponse response = new DatabasesResponse();\n+\t\t\tList<ResponseContainerDatabase> databases = instanceHandler\n+\t\t\t\t\t.getDatabaseContextHandler(serverName, userId, methodName).getDatabases();", "originalCommit": "7e3da50956120aa07bdf90ea3dfc169353600551", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "77fc36a7106b93ea9a33658b6d7bb309e9ce2ad6", "url": "https://github.com/odpi/egeria/commit/77fc36a7106b93ea9a33658b6d7bb309e9ce2ad6", "message": "Merge branch 'master' into initial_cognos_omas", "committedDate": "2020-05-27T17:51:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1MTkwMw==", "url": "https://github.com/odpi/egeria/pull/3044#discussion_r431651903", "bodyText": "remove cognos", "author": "planetf1", "createdAt": "2020-05-28T08:00:45Z", "path": "open-metadata-implementation/access-services/analytics-modeling/analytics-modeling-server/src/main/java/org/odpi/openmetadata/accessservices/analyticsmodeling/server/AnalyticsModelingServicesInstance.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.analyticsmodeling.server;\n+\n+\n+import java.util.List;\n+\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.assets.DatabaseContextHandler;\n+import org.odpi.openmetadata.accessservices.analyticsmodeling.contentmanager.OMEntityDao;\n+import org.odpi.openmetadata.adminservices.configuration.registration.AccessServiceDescription;\n+import org.odpi.openmetadata.commonservices.multitenant.OCFOMASServiceInstance;\n+import org.odpi.openmetadata.commonservices.multitenant.ffdc.exceptions.NewInstanceException;\n+import org.odpi.openmetadata.frameworks.auditlog.AuditLog;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.repositoryconnector.OMRSRepositoryConnector;\n+\n+/**\n+ * CognosServicesInstance caches references to OMRS objects for a specific server.", "originalCommit": "77fc36a7106b93ea9a33658b6d7bb309e9ce2ad6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "df73d4c22610e7c6a1efa5dbe0c3b2907d1e10fc", "url": "https://github.com/odpi/egeria/commit/df73d4c22610e7c6a1efa5dbe0c3b2907d1e10fc", "message": "Merge branch 'master' into initial_cognos_omas", "committedDate": "2020-05-29T09:59:25Z", "type": "commit"}, {"oid": "5b15ffd0673142af0e012f3478a2dc5e8a5fd0c7", "url": "https://github.com/odpi/egeria/commit/5b15ffd0673142af0e012f3478a2dc5e8a5fd0c7", "message": "rename missed names\n\nSigned-off-by: Yevgeniy Marchenko <yevgeniy.marchenko@ca.ibm.com>", "committedDate": "2020-05-29T17:21:29Z", "type": "commit"}, {"oid": "a7fd8267d5b8be3ee6d53119e32a1c45174e3c85", "url": "https://github.com/odpi/egeria/commit/a7fd8267d5b8be3ee6d53119e32a1c45174e3c85", "message": "Merge branch 'initial_cognos_omas' of https://github.com/yevgenmar/egeria into initial_cognos_omas", "committedDate": "2020-05-29T17:35:54Z", "type": "commit"}, {"oid": "56e978e5ace233d52f3735ae93fa045ef1be7863", "url": "https://github.com/odpi/egeria/commit/56e978e5ace233d52f3735ae93fa045ef1be7863", "message": "Merge branch 'master' into initial_cognos_omas", "committedDate": "2020-05-30T13:31:41Z", "type": "commit"}]}