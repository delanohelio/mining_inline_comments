{"pr_number": 7888, "pr_title": "SAK-40672 New Site Group Manager helper including the auto-groups wizard.", "pr_createdAt": "2020-02-13T17:38:01Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/7888", "timeline": [{"oid": "66435dee249a03f31bdf4d700eacda115f0017a6", "url": "https://github.com/sakaiproject/sakai/commit/66435dee249a03f31bdf4d700eacda115f0017a6", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties", "committedDate": "2020-02-14T08:19:07Z", "type": "forcePushed"}, {"oid": "a34d1276a6996c210c50423bdd4cc5b3b6cf1d8c", "url": "https://github.com/sakaiproject/sakai/commit/a34d1276a6996c210c50423bdd4cc5b3b6cf1d8c", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties", "committedDate": "2020-02-17T09:04:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODI2Mg==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380148262", "bodyText": "Need to wrap this a bit!", "author": "adrianfish", "createdAt": "2020-02-17T12:15:27Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNzIxMA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380527210", "bodyText": "formatted as Multi-Line Statement", "author": "mpellicer", "createdAt": "2020-02-18T08:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MDA1MQ==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380150051", "bodyText": "Don't need <Group>", "author": "adrianfish", "createdAt": "2020-02-17T12:19:19Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNzUwMQ==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380527501", "bodyText": "ok", "author": "mpellicer", "createdAt": "2020-02-18T08:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MDA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzMDAyNA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380530024", "bodyText": "Well, eclipse complaints about this, I will leave the type here.", "author": "mpellicer", "createdAt": "2020-02-18T08:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MDA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Mjk0NQ==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380152945", "bodyText": "List selectedSectionList = selectedSectionIdList.stream().map(sakaiService::findByGroupId).filter(Objects::nonNull).collect(Collectors.toList());\nMaybe a bit slower. Your choice, of course :)", "author": "adrianfish", "createdAt": "2020-02-17T12:25:56Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzMDE0MA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380530140", "bodyText": "Sure, replaced the for loop by the stream alternative.", "author": "mpellicer", "createdAt": "2020-02-18T08:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Mjk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Mzc1Ng==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380153756", "bodyText": "You can remove the types on these.", "author": "adrianfish", "createdAt": "2020-02-17T12:27:48Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzMDQxNg==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380530416", "bodyText": "Eclipse complains about this, throws warnings, I'll leave the types.", "author": "mpellicer", "createdAt": "2020-02-18T08:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Mzc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NDIwMQ==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380154201", "bodyText": "whitespace police here ... we've had reports of a lack of spaces around a + sign.", "author": "adrianfish", "createdAt": "2020-02-17T12:28:51Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();\n+\n+        // Remove any potential empty id\n+        selectedRoleList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+        selectedSectionList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+\n+        // Build the list of users that will compose the groups.\n+        // If the user decided to not use sections, pick all the members of the site. \n+        // If the user decided to use sections, pick all the members of the site that belongs to those sections.\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == sectionsOption || selectedSectionList.isEmpty()) {\n+            // Do not filter by section, use all the members of the site filtering by the selected roles\n+            filteredMembers = site.getMembers().stream().filter(m -> selectedRoleList.contains(m.getRole().getId())).collect(Collectors.toList());\n+        } else {\n+            // Pick the members that belong to the selected sections and have the selected roles.\n+            for (String sectionId : selectedSectionList) {\n+                Group existingGroup = sakaiService.findGroupById(sectionId);\n+\n+                if (existingGroup == null) {\n+                    continue;\n+                }\n+\n+                for (Member member : existingGroup.getMembers()) {\n+                    if (selectedRoleList.contains(member.getRole().getId())) {\n+                        String currentSections = sectionMemberMap.get(member.getUserId());\n+                        // Append any section that the user belongs to\n+                        if (StringUtils.isBlank(currentSections)) {\n+                            currentSections = existingGroup.getTitle();\n+                            filteredMembers.add(member);\n+                        } else {\n+                            currentSections += \", \"+existingGroup.getTitle();", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NzIxOA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380587218", "bodyText": "Done", "author": "mpellicer", "createdAt": "2020-02-18T10:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NDIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NDQ4OA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380154488", "bodyText": "No type needed. I realise you've probably lifted this code from the RSF stuff.", "author": "adrianfish", "createdAt": "2020-02-17T12:29:33Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();\n+\n+        // Remove any potential empty id\n+        selectedRoleList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+        selectedSectionList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+\n+        // Build the list of users that will compose the groups.\n+        // If the user decided to not use sections, pick all the members of the site. \n+        // If the user decided to use sections, pick all the members of the site that belongs to those sections.\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == sectionsOption || selectedSectionList.isEmpty()) {\n+            // Do not filter by section, use all the members of the site filtering by the selected roles\n+            filteredMembers = site.getMembers().stream().filter(m -> selectedRoleList.contains(m.getRole().getId())).collect(Collectors.toList());\n+        } else {\n+            // Pick the members that belong to the selected sections and have the selected roles.\n+            for (String sectionId : selectedSectionList) {\n+                Group existingGroup = sakaiService.findGroupById(sectionId);\n+\n+                if (existingGroup == null) {\n+                    continue;\n+                }\n+\n+                for (Member member : existingGroup.getMembers()) {\n+                    if (selectedRoleList.contains(member.getRole().getId())) {\n+                        String currentSections = sectionMemberMap.get(member.getUserId());\n+                        // Append any section that the user belongs to\n+                        if (StringUtils.isBlank(currentSections)) {\n+                            currentSections = existingGroup.getTitle();\n+                            filteredMembers.add(member);\n+                        } else {\n+                            currentSections += \", \"+existingGroup.getTitle();\n+                        }\n+                        sectionMemberMap.put(member.getUserId(), currentSections);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Fill the user and the member objects to display the names and the eid in the UI.\n+        for (Member member : filteredMembers) {\n+            userRoleMap.put(member.getUserId(), member.getRole().getId());\n+            User user = sakaiService.getUser(member.getUserId());\n+            if (user != null) {\n+                userMap.put(user.getId(), user);\n+            }\n+        }\n+\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_PURE == structureConfigurationOption) {\n+            // Pure configuration, create one group per role.\n+            // Create a group per role using the filtered list of the previous step.\n+            for (String roleId : selectedRoleList) {\n+                List<String> usersWithRoleList = new ArrayList<String>();", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzMDc0OA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380530748", "bodyText": "Not really, is new code, however, Eclipse complains about this.", "author": "mpellicer", "createdAt": "2020-02-18T08:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NDQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTk4MA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380155980", "bodyText": "Just stick this on one line", "author": "adrianfish", "createdAt": "2020-02-17T12:32:57Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();\n+\n+        // Remove any potential empty id\n+        selectedRoleList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+        selectedSectionList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+\n+        // Build the list of users that will compose the groups.\n+        // If the user decided to not use sections, pick all the members of the site. \n+        // If the user decided to use sections, pick all the members of the site that belongs to those sections.\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == sectionsOption || selectedSectionList.isEmpty()) {\n+            // Do not filter by section, use all the members of the site filtering by the selected roles\n+            filteredMembers = site.getMembers().stream().filter(m -> selectedRoleList.contains(m.getRole().getId())).collect(Collectors.toList());\n+        } else {\n+            // Pick the members that belong to the selected sections and have the selected roles.\n+            for (String sectionId : selectedSectionList) {\n+                Group existingGroup = sakaiService.findGroupById(sectionId);\n+\n+                if (existingGroup == null) {\n+                    continue;\n+                }\n+\n+                for (Member member : existingGroup.getMembers()) {\n+                    if (selectedRoleList.contains(member.getRole().getId())) {\n+                        String currentSections = sectionMemberMap.get(member.getUserId());\n+                        // Append any section that the user belongs to\n+                        if (StringUtils.isBlank(currentSections)) {\n+                            currentSections = existingGroup.getTitle();\n+                            filteredMembers.add(member);\n+                        } else {\n+                            currentSections += \", \"+existingGroup.getTitle();\n+                        }\n+                        sectionMemberMap.put(member.getUserId(), currentSections);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Fill the user and the member objects to display the names and the eid in the UI.\n+        for (Member member : filteredMembers) {\n+            userRoleMap.put(member.getUserId(), member.getRole().getId());\n+            User user = sakaiService.getUser(member.getUserId());\n+            if (user != null) {\n+                userMap.put(user.getId(), user);\n+            }\n+        }\n+\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_PURE == structureConfigurationOption) {\n+            // Pure configuration, create one group per role.\n+            // Create a group per role using the filtered list of the previous step.\n+            for (String roleId : selectedRoleList) {\n+                List<String> usersWithRoleList = new ArrayList<String>();\n+                List<Member> membersWithRole = filteredMembers.stream().filter(member -> roleId.equals(member.getRole().getId())).collect(Collectors.toList());\n+                membersWithRole.forEach(member -> {\n+                    usersWithRoleList.add(member.getUserId());\n+                });", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzMTMzNg==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380531336", "bodyText": "done", "author": "mpellicer", "createdAt": "2020-02-18T08:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2Mjc5Mg==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380162792", "bodyText": "Why GSON and not Jackson, just out of interest?", "author": "adrianfish", "createdAt": "2020-02-17T12:48:43Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();\n+\n+        // Remove any potential empty id\n+        selectedRoleList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+        selectedSectionList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+\n+        // Build the list of users that will compose the groups.\n+        // If the user decided to not use sections, pick all the members of the site. \n+        // If the user decided to use sections, pick all the members of the site that belongs to those sections.\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == sectionsOption || selectedSectionList.isEmpty()) {\n+            // Do not filter by section, use all the members of the site filtering by the selected roles\n+            filteredMembers = site.getMembers().stream().filter(m -> selectedRoleList.contains(m.getRole().getId())).collect(Collectors.toList());\n+        } else {\n+            // Pick the members that belong to the selected sections and have the selected roles.\n+            for (String sectionId : selectedSectionList) {\n+                Group existingGroup = sakaiService.findGroupById(sectionId);\n+\n+                if (existingGroup == null) {\n+                    continue;\n+                }\n+\n+                for (Member member : existingGroup.getMembers()) {\n+                    if (selectedRoleList.contains(member.getRole().getId())) {\n+                        String currentSections = sectionMemberMap.get(member.getUserId());\n+                        // Append any section that the user belongs to\n+                        if (StringUtils.isBlank(currentSections)) {\n+                            currentSections = existingGroup.getTitle();\n+                            filteredMembers.add(member);\n+                        } else {\n+                            currentSections += \", \"+existingGroup.getTitle();\n+                        }\n+                        sectionMemberMap.put(member.getUserId(), currentSections);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Fill the user and the member objects to display the names and the eid in the UI.\n+        for (Member member : filteredMembers) {\n+            userRoleMap.put(member.getUserId(), member.getRole().getId());\n+            User user = sakaiService.getUser(member.getUserId());\n+            if (user != null) {\n+                userMap.put(user.getId(), user);\n+            }\n+        }\n+\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_PURE == structureConfigurationOption) {\n+            // Pure configuration, create one group per role.\n+            // Create a group per role using the filtered list of the previous step.\n+            for (String roleId : selectedRoleList) {\n+                List<String> usersWithRoleList = new ArrayList<String>();\n+                List<Member> membersWithRole = filteredMembers.stream().filter(member -> roleId.equals(member.getRole().getId())).collect(Collectors.toList());\n+                membersWithRole.forEach(member -> {\n+                    usersWithRoleList.add(member.getUserId());\n+                });\n+                autoGroupsMap.put(roleId, usersWithRoleList);\n+            }\n+        } else {\n+            // Mixture configuration\n+\n+            // Shuffle the list first\n+            Collections.shuffle(filteredMembers);\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == splitOption) {\n+                // Split by group\n+                String groupPrefix = autoGroupsForm.getGroupTitleByGroup();\n+                int groupNumber = autoGroupsForm.getGroupNumberByGroup();\n+                int groupSize = filteredMembers.size() / groupNumber;\n+\n+                for (int groupIndex = 1 ; groupIndex <= groupNumber; groupIndex++) {\n+                    String groupTitle = String.format(\"%s-%d\", groupPrefix, groupIndex);\n+                    List<String> randomMemberList = new ArrayList<String>();\n+                    List<Member> memberSubList = filteredMembers.stream().limit(groupSize).collect(Collectors.toList());\n+                    filteredMembers.removeAll(memberSubList);\n+                    // If there are remaining members, assign them to the last group.\n+                    if(groupIndex == groupNumber && !filteredMembers.isEmpty()) {\n+                        memberSubList.addAll(filteredMembers);\n+                    }\n+                    memberSubList.forEach(member -> {\n+                        randomMemberList.add(member.getUserId());\n+                    });\n+                    autoGroupsMap.put(groupTitle, randomMemberList);\n+                }\n+            } else {\n+                // Split by number of users.\n+                String groupPrefix = autoGroupsForm.getGroupTitleByUser();\n+                int groupNumber = autoGroupsForm.getGroupNumberByUser();\n+                List<List<Member>> partitionedMemberList = ListUtils.partition(filteredMembers, groupNumber);\n+                int groupIndex = 1;\n+                for (List<Member> groupMembers : partitionedMemberList) {\n+                    String groupTitle = String.format(\"%s-%d\", groupPrefix, groupIndex);\n+                    groupIndex++;\n+                    List<String> randomMemberList = new ArrayList<String>();\n+                    groupMembers.forEach(member -> {\n+                        randomMemberList.add(member.getUserId());\n+                    });\n+                    autoGroupsMap.put(groupTitle, randomMemberList);\n+                }\n+            }\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"autoGroupsMap\", autoGroupsMap);\n+        model.addAttribute(\"userMap\", userMap);\n+        model.addAttribute(\"userRoleMap\", userRoleMap);\n+        model.addAttribute(\"sectionMemberMap\", sectionMemberMap);\n+        //Serialize as json the group map to send it back to the controller after the confirmation.\n+        model.addAttribute(\"serializedAutoGroupsMap\", new Gson().toJson(autoGroupsMap));\n+        return GroupManagerConstants.AUTO_GROUPS_STEP4_TEMPLATE;\n+    }\n+\n+    @PostMapping(value=\"/autogroups/confirmAutoGroups\")\n+    public String confirmAutoGroups(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String serializedAutoGroupsMap, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"confirmAutoGroups() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP3_ACTION:\n+                    return showStep3(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        if (StringUtils.isBlank(serializedAutoGroupsMap)) {\n+            log.error(\"The auto groups map is empty, aborting the confirmation.\");\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Deserialize the autogroups map and create the site groups with the members.\n+        Map<String, List<String>> autoGroupsMap = new Gson().fromJson(serializedAutoGroupsMap, Map.class);", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU5NTUwMw==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380595503", "bodyText": "Yeah, why not Jackson? Replaced the implementation by Jackson and removed a dependency, thanks.", "author": "mpellicer", "createdAt": "2020-02-18T10:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2Mjc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzE2OQ==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380163169", "bodyText": "No need for the types", "author": "adrianfish", "createdAt": "2020-02-17T12:49:37Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/ImportController.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n+import java.util.Optional;\n+import java.util.Scanner;\n+import java.util.StringJoiner;\n+\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import com.google.gson.Gson;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.fileupload.FileItem;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+@Slf4j\n+@Controller\n+public class ImportController {\n+\n+    private final String BULK_LINE_DELIMITER = \"\\r\\n\";\n+    private final String BULK_FIELD_DELIMITER = \",\";\n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/import\")\n+    public String showImport(Model model) {\n+        log.debug(\"showImport()\");\n+        return GroupManagerConstants.IMPORT_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/importGroups\", consumes = \"multipart/form-data\")\n+    public String showImportGroups(@RequestParam(required=false) String groupUploadedText, Model model, HttpServletRequest req) {\n+        log.debug(\"showImportGroups called with value {}\", groupUploadedText);\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+        Map<String, List<String>> importedGroupMap = new HashMap<String, List<String>>();", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzMTc1OQ==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380531759", "bodyText": "Eclipse complains about this, I'll leave the types.", "author": "mpellicer", "createdAt": "2020-02-18T08:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MjIxMA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380842210", "bodyText": "You should just be able to go Map<String, List> importedGroupMap = new HashMap<>(). Eclipse should be cool with that.", "author": "adrianfish", "createdAt": "2020-02-18T18:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NDUyOQ==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380164529", "bodyText": "No need for the types", "author": "adrianfish", "createdAt": "2020-02-17T12:52:56Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/ImportController.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n+import java.util.Optional;\n+import java.util.Scanner;\n+import java.util.StringJoiner;\n+\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import com.google.gson.Gson;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.fileupload.FileItem;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+@Slf4j\n+@Controller\n+public class ImportController {\n+\n+    private final String BULK_LINE_DELIMITER = \"\\r\\n\";\n+    private final String BULK_FIELD_DELIMITER = \",\";\n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/import\")\n+    public String showImport(Model model) {\n+        log.debug(\"showImport()\");\n+        return GroupManagerConstants.IMPORT_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/importGroups\", consumes = \"multipart/form-data\")\n+    public String showImportGroups(@RequestParam(required=false) String groupUploadedText, Model model, HttpServletRequest req) {\n+        log.debug(\"showImportGroups called with value {}\", groupUploadedText);\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+        Map<String, List<String>> importedGroupMap = new HashMap<String, List<String>>();\n+        String uploadedText = StringUtils.EMPTY;\n+        String groupFileUploadedText = StringUtils.EMPTY;\n+\n+        //Check the uploaded file and contents.\n+        FileItem uploadedFileItem = (FileItem) req.getAttribute(\"groupUploadFile\");\n+        if (uploadedFileItem.getSize() > 0) {\n+            try (Scanner scanner = new Scanner(uploadedFileItem.getInputStream(), StandardCharsets.UTF_8.name())) {\n+                groupFileUploadedText = scanner.useDelimiter(\"\\\\A\").next();\n+            } catch (Exception e) {\n+                log.error(\"The file {} provided is not valid.\", uploadedFileItem.getName());\n+            }\n+        }\n+\n+        // Check if both options are blank and return an error message\n+        if (StringUtils.isAllBlank(groupUploadedText, groupFileUploadedText)) {\n+            return returnImportError(model, \"import.error.inputrequired\", userLocale);\n+        }        \n+\n+        // Process the submitted texts, combine the uploaded and the file into one String\n+        uploadedText = String.format(\"%s\\r\\n%s\", groupUploadedText, groupFileUploadedText);\n+\n+        String[] lineArray = uploadedText.split(BULK_LINE_DELIMITER);\n+        for (String line : lineArray) {\n+\n+            if (StringUtils.isBlank(line)) {\n+                continue;\n+            }\n+\n+            String[] lineContentArray = line.split(BULK_FIELD_DELIMITER);\n+\n+            //Each line must contain a groupTitle and a userEid\n+            if (lineContentArray.length == 2) {\n+                String groupTitle = StringUtils.trimToNull(lineContentArray[0]);\n+                String userEid = StringUtils.trimToNull(lineContentArray[1]);\n+\n+                if (StringUtils.isAnyBlank(groupTitle, userEid)) {\n+                    // One of the items of the line is blank, redirect to the import form again displaying an error. \n+                    return returnImportError(model, \"import.error.wrongformat\", userLocale);\n+                }\n+\n+                if (groupTitle.length() > 99) {\n+                    // One of the items of the line has more than 99 characters, redirect to the import form again displaying an error. \n+                    return returnImportError(model, \"import.error.titlelength\", userLocale);\n+                }\n+\n+                if (importedGroupMap.get(groupTitle) != null) {\n+                    // If the map contains an entry for that group, add the user to the list\n+                    importedGroupMap.get(groupTitle).add(userEid);\n+                } else {\n+                    // If the map does not contain an entry for that group, create a list and add the member to the list\n+                    List<String> newUserlist = new ArrayList<String>();\n+                    newUserlist.add(userEid);\n+                    importedGroupMap.put(groupTitle, newUserlist);\n+                }\n+            } else {\n+                // One line does not contain two items, redirect to the import form again displaying an error.\n+                return returnImportError(model, \"import.error.wrongformat\", userLocale);\n+            }\n+        }\n+\n+        //Redirect to the confirmation page once the map are correct\n+        return showImportConfirmation(model, importedGroupMap);\n+    }\n+    \n+    @RequestMapping(value = \"/importConfirmation\")\n+    public String showImportConfirmation(Model model, Map<String, List<String>> importedGroupMap) {\n+        log.debug(\"showImportConfirmation() called with {} items to import.\", importedGroupMap.entrySet().size());\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // List of groups of the site, excluding the ones which GROUP_PROP_WSETUP_CREATED property is false.\n+        List<Group> groupList = (List<Group>) site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) != null && Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+        // Variable definition that will be sent to the model\n+        Map<String, Boolean> importedGroups = new HashMap<String, Boolean>();\n+        Map<String, String> nonExistingMemberMap = new HashMap<String, String>();\n+        Map<String, String> nonMemberMap = new HashMap<String, String>();\n+        Map<String, String> existingMemberMap = new HashMap<String, String>();\n+        Map<String, String> newMemberMap = new HashMap<String, String>();\n+        boolean membershipErrors = false;", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzMTkxNg==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380531916", "bodyText": "Eclipse complains about the types, I'll leave them.", "author": "mpellicer", "createdAt": "2020-02-18T08:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NDUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2Nzk0OA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380167948", "bodyText": "No need the types", "author": "adrianfish", "createdAt": "2020-02-17T13:00:16Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/JoinableSetController.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.JoinableSetForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class JoinableSetController {    \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/joinableset\")\n+    public String showJoinableSet(Model model, @RequestParam(value=\"joinableSetId\", required = false) String joinableSetId) {\n+        log.debug(\"showJoinableSet()\");\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Variable definition\n+        JoinableSetForm joinableSetForm = new JoinableSetForm();\n+        List<Group> joinableSetGroups = new ArrayList<Group>();\n+        List<User> notJoinedUserList = new ArrayList<User>();\n+\n+        if (StringUtils.isNotBlank(joinableSetId)) {\n+            //Set the joinable set Id\n+            joinableSetForm.setJoinableSetId(joinableSetId);\n+            //Set the joinable set title\n+            joinableSetForm.setGroupTitle(joinableSetId);\n+            // Get the groups associated to the existing joinable set\n+            joinableSetGroups = site.getGroups().stream().filter(g -> joinableSetId.equalsIgnoreCase(g.getProperties().getProperty(Group.GROUP_PROP_JOINABLE_SET))).collect(Collectors.toList());\n+            boolean allowUnjoin = !joinableSetGroups.isEmpty() ? joinableSetGroups.get(0).getProperties().getProperty(Group.GROUP_PROP_JOINABLE_UNJOINABLE) != null ? Boolean.valueOf(joinableSetGroups.get(0).getProperties().getProperty(Group.GROUP_PROP_JOINABLE_UNJOINABLE)) : false : false;\n+            joinableSetForm.setAllowUnjoin(allowUnjoin);\n+            // Get all the members of the groups that belongs to the joinable set. \n+            List<Member> joinedUserList = new ArrayList<Member>();\n+            joinableSetGroups.forEach(group -> {\n+                joinedUserList.addAll(group.getMembers());\n+            });\n+\n+            // Put all the members of the site that does not belong to any group of the set in a list.\n+            site.getUsers().forEach( userId -> {\n+                if (!joinedUserList.stream().anyMatch(member -> userId.equals(member.getUserId()))) {\n+                    notJoinedUserList.add(sakaiService.getUser(userId));\n+                }\n+\n+            });\n+\n+            joinableSetForm.setGroupNumber(0);\n+            joinableSetForm.setGroupMaxMembers(1);\n+        }\n+\n+        // Fill the model with the variables.\n+        model.addAttribute(\"joinableSetForm\", joinableSetForm);\n+        model.addAttribute(\"joinableSetGroups\", joinableSetGroups);\n+        model.addAttribute(\"notJoinedUserList\", notJoinedUserList);\n+\n+        return GroupManagerConstants.JOINABLE_SET_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/saveJoinableSet\")\n+    public String saveJoinableSet(@ModelAttribute JoinableSetForm joinableSetForm, Model model) {\n+        log.debug(\"saveJoinableSet called, saving a group with title {}\", joinableSetForm.getGroupTitle());\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+        String joinableSetId = joinableSetForm.getJoinableSetId();\n+        String joinableSetTitle = joinableSetForm.getGroupTitle();\n+        boolean editingJoinableSet = StringUtils.isNotBlank(joinableSetId);\n+        int joinableSetGroupNumber = joinableSetForm.getGroupNumber();\n+        int joinableSetMaxMembers = joinableSetForm.getGroupMaxMembers();\n+        String allowPreviewMembership = Boolean.toString(joinableSetForm.isAllowPreviewMembership());\n+        String allowUnjoin = Boolean.toString(joinableSetForm.isAllowUnjoin());\n+        String allowViewMembership = Boolean.toString(joinableSetForm.isAllowViewMembership());\n+        List<String> groupTitles = new ArrayList<String>();\n+        List<Group> siteGroups = new ArrayList<Group>(site.getGroups());", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTQ3MA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380169470", "bodyText": "tut tut", "author": "adrianfish", "createdAt": "2020-02-17T13:03:30Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/MainController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.sakaiproject.authz.api.AuthzGroup.RealmLockMode;\n+import org.sakaiproject.authz.api.AuthzRealmLockException;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.MainForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.util.SiteComparator;\n+import org.sakaiproject.site.util.SiteConstants;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class MainController {\n+    \n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = {\"/\", \"/index\"})\n+    public String showIndex(Model model) {\n+        log.debug(\"showIndex()\");\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if(site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Group members for each group, separated by comma\n+        Map<String, String> groupMemberMap = new HashMap<String, String>();\n+        // Joinable sets for each group\n+        Map<String, String> groupJoinableSetMap = new HashMap<String, String>();\n+        // Joinable sets size for each group\n+        Map<String, String> groupJoinableSetSizeMap = new HashMap<String, String>();\n+        // List of groups of the site, excluding the ones which GROUP_PROP_WSETUP_CREATED property is false.\n+        List<Group> groupList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) != null && Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+        // Sort the group list by title.\n+        Collections.sort(groupList, new Comparator<Group>(){\n+            public int compare(Group g1, Group g2){\n+                return g1.getTitle().compareToIgnoreCase(g2.getTitle());\n+        }});\n+\n+        List<Group> lockedGroupList = site.getGroups().stream().filter(group -> RealmLockMode.ALL.equals(group.getRealmLock()) || RealmLockMode.MODIFY.equals(group.getRealmLock())).collect(Collectors.toList());\n+        List<Group> lockedForDeletionGroupList = site.getGroups().stream().filter(group -> RealmLockMode.ALL.equals(group.getRealmLock()) || RealmLockMode.DELETE.equals(group.getRealmLock())).collect(Collectors.toList());\n+\n+        // For each group of the site, get the members separated by comma, the joinable sets and the size of the joinable sets.\n+        for(Group group: groupList) {", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzMTk3OQ==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380531979", "bodyText": "Eclipse complains about the types, I'll leave them.", "author": "mpellicer", "createdAt": "2020-02-18T08:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTc0Mg==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380169742", "bodyText": "What is this? Two space indentation? My Lord.", "author": "adrianfish", "createdAt": "2020-02-17T13:04:05Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/MainController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.sakaiproject.authz.api.AuthzGroup.RealmLockMode;\n+import org.sakaiproject.authz.api.AuthzRealmLockException;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.MainForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.util.SiteComparator;\n+import org.sakaiproject.site.util.SiteConstants;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class MainController {\n+    \n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = {\"/\", \"/index\"})\n+    public String showIndex(Model model) {\n+        log.debug(\"showIndex()\");\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if(site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Group members for each group, separated by comma\n+        Map<String, String> groupMemberMap = new HashMap<String, String>();\n+        // Joinable sets for each group\n+        Map<String, String> groupJoinableSetMap = new HashMap<String, String>();\n+        // Joinable sets size for each group\n+        Map<String, String> groupJoinableSetSizeMap = new HashMap<String, String>();\n+        // List of groups of the site, excluding the ones which GROUP_PROP_WSETUP_CREATED property is false.\n+        List<Group> groupList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) != null && Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+        // Sort the group list by title.\n+        Collections.sort(groupList, new Comparator<Group>(){\n+            public int compare(Group g1, Group g2){\n+                return g1.getTitle().compareToIgnoreCase(g2.getTitle());\n+        }});\n+\n+        List<Group> lockedGroupList = site.getGroups().stream().filter(group -> RealmLockMode.ALL.equals(group.getRealmLock()) || RealmLockMode.MODIFY.equals(group.getRealmLock())).collect(Collectors.toList());\n+        List<Group> lockedForDeletionGroupList = site.getGroups().stream().filter(group -> RealmLockMode.ALL.equals(group.getRealmLock()) || RealmLockMode.DELETE.equals(group.getRealmLock())).collect(Collectors.toList());\n+\n+        // For each group of the site, get the members separated by comma, the joinable sets and the size of the joinable sets.\n+        for(Group group: groupList) {\n+            // Get the group members separated by comma\n+            StringJoiner stringJoiner = new StringJoiner(\", \");\n+            List<User> groupMemberList = new ArrayList<User>(); \n+            group.getMembers().forEach(member -> {\n+            \tUser memberUser = sakaiService.getUser(member.getUserId());", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzMzMwOA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380533308", "bodyText": "you got me!", "author": "mpellicer", "createdAt": "2020-02-18T08:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MDkzOA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380170938", "bodyText": "I would personally return an Optional from this.", "author": "adrianfish", "createdAt": "2020-02-17T13:06:39Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/service/SakaiService.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.service;\n+\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.event.api.EventTrackingService;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.tool.api.SessionManager;\n+import org.sakaiproject.tool.api.ToolManager;\n+import org.sakaiproject.user.api.PreferencesService;\n+import org.sakaiproject.user.api.User;\n+import org.sakaiproject.user.api.UserDirectoryService;\n+import org.sakaiproject.user.api.UserNotDefinedException;\n+import org.springframework.stereotype.Service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Service\n+@Slf4j\n+public class SakaiService  {\n+\n+    @Inject\n+    private EventTrackingService eventTrackingService;\n+\n+    @Inject\n+    private SiteService siteService;\n+\n+    @Inject\n+    private PreferencesService preferencesService;\n+\n+    @Inject\n+    private ServerConfigurationService serverConfigurationService;\n+\n+    @Inject\n+    private SessionManager sessionManager;\n+\n+    @Inject\n+    private ToolManager toolManager;\n+\n+    @Inject\n+    private UserDirectoryService userDirectoryService;\n+\n+    public Site getCurrentSite() {\n+        String siteId = toolManager.getCurrentPlacement().getContext();\n+        Site site = null;\n+        try {\n+            site = siteService.getSite(siteId);\n+        } catch (Exception ex) {\n+            log.error(\"Unable to find the site with Id {}.\", siteId);\n+            return null;\n+        }\n+        return site;\n+    }\n+\n+    public Locale getCurrentUserLocale() {\n+        String userId = sessionManager.getCurrentSessionUserId();\n+        return preferencesService.getLocale(userId);\n+    }\n+\n+    public String getCurrentUserId() {\n+        return sessionManager.getCurrentSessionUserId();\n+    }\n+\n+    public boolean saveSite(Site site) {\n+        try {\n+            siteService.save(site);\n+        } catch (IdUnusedException | PermissionException e) {\n+            log.error(\"Error saving the site {}.\", site.getId());\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public User getUser(String userId) {\n+        try {\n+            return userDirectoryService.getUser(userId);\n+        } catch (UserNotDefinedException e) {\n+            log.error(\"Unable to get user by id {}.\", userId);\n+        }\n+        return null;", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3ODc3NA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380578774", "bodyText": "sure, good pattern.", "author": "mpellicer", "createdAt": "2020-02-18T10:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MDkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MTEzMw==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380171133", "bodyText": "I'd make this an Optional.", "author": "adrianfish", "createdAt": "2020-02-17T13:07:06Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/service/SakaiService.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.service;\n+\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.event.api.EventTrackingService;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.tool.api.SessionManager;\n+import org.sakaiproject.tool.api.ToolManager;\n+import org.sakaiproject.user.api.PreferencesService;\n+import org.sakaiproject.user.api.User;\n+import org.sakaiproject.user.api.UserDirectoryService;\n+import org.sakaiproject.user.api.UserNotDefinedException;\n+import org.springframework.stereotype.Service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Service\n+@Slf4j\n+public class SakaiService  {\n+\n+    @Inject\n+    private EventTrackingService eventTrackingService;\n+\n+    @Inject\n+    private SiteService siteService;\n+\n+    @Inject\n+    private PreferencesService preferencesService;\n+\n+    @Inject\n+    private ServerConfigurationService serverConfigurationService;\n+\n+    @Inject\n+    private SessionManager sessionManager;\n+\n+    @Inject\n+    private ToolManager toolManager;\n+\n+    @Inject\n+    private UserDirectoryService userDirectoryService;\n+\n+    public Site getCurrentSite() {\n+        String siteId = toolManager.getCurrentPlacement().getContext();\n+        Site site = null;\n+        try {\n+            site = siteService.getSite(siteId);\n+        } catch (Exception ex) {\n+            log.error(\"Unable to find the site with Id {}.\", siteId);\n+            return null;\n+        }\n+        return site;", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3ODgzNQ==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380578835", "bodyText": "sure, good pattern.", "author": "mpellicer", "createdAt": "2020-02-18T10:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MTEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MTMyNA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380171324", "bodyText": "I'd make this an optional.", "author": "adrianfish", "createdAt": "2020-02-17T13:07:32Z", "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/service/SakaiService.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.service;\n+\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.event.api.EventTrackingService;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.tool.api.SessionManager;\n+import org.sakaiproject.tool.api.ToolManager;\n+import org.sakaiproject.user.api.PreferencesService;\n+import org.sakaiproject.user.api.User;\n+import org.sakaiproject.user.api.UserDirectoryService;\n+import org.sakaiproject.user.api.UserNotDefinedException;\n+import org.springframework.stereotype.Service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Service\n+@Slf4j\n+public class SakaiService  {\n+\n+    @Inject\n+    private EventTrackingService eventTrackingService;\n+\n+    @Inject\n+    private SiteService siteService;\n+\n+    @Inject\n+    private PreferencesService preferencesService;\n+\n+    @Inject\n+    private ServerConfigurationService serverConfigurationService;\n+\n+    @Inject\n+    private SessionManager sessionManager;\n+\n+    @Inject\n+    private ToolManager toolManager;\n+\n+    @Inject\n+    private UserDirectoryService userDirectoryService;\n+\n+    public Site getCurrentSite() {\n+        String siteId = toolManager.getCurrentPlacement().getContext();\n+        Site site = null;\n+        try {\n+            site = siteService.getSite(siteId);\n+        } catch (Exception ex) {\n+            log.error(\"Unable to find the site with Id {}.\", siteId);\n+            return null;\n+        }\n+        return site;\n+    }\n+\n+    public Locale getCurrentUserLocale() {\n+        String userId = sessionManager.getCurrentSessionUserId();\n+        return preferencesService.getLocale(userId);\n+    }\n+\n+    public String getCurrentUserId() {\n+        return sessionManager.getCurrentSessionUserId();\n+    }\n+\n+    public boolean saveSite(Site site) {\n+        try {\n+            siteService.save(site);\n+        } catch (IdUnusedException | PermissionException e) {\n+            log.error(\"Error saving the site {}.\", site.getId());\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public User getUser(String userId) {\n+        try {\n+            return userDirectoryService.getUser(userId);\n+        } catch (UserNotDefinedException e) {\n+            log.error(\"Unable to get user by id {}.\", userId);\n+        }\n+        return null;\n+    }\n+\n+    public User getUserByEid(String userEid) {\n+        try {\n+            return userDirectoryService.getUserByEid(userEid);\n+        } catch (UserNotDefinedException e) {\n+            log.error(\"Unable to get user by eid {}.\", userEid);\n+        }\n+        return null;", "originalCommit": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3ODg4NA==", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380578884", "bodyText": "sure, good pattern.", "author": "mpellicer", "createdAt": "2020-02-18T10:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MTMyNA=="}], "type": "inlineReview"}, {"oid": "ae85c43959c2daf4318aee4b65a405f804e17537", "url": "https://github.com/sakaiproject/sakai/commit/ae85c43959c2daf4318aee4b65a405f804e17537", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties", "committedDate": "2020-02-18T10:59:39Z", "type": "forcePushed"}, {"oid": "3a627d7e4e920d7b64fd22c5b8f9c061f09bad72", "url": "https://github.com/sakaiproject/sakai/commit/3a627d7e4e920d7b64fd22c5b8f9c061f09bad72", "message": "SAK-40672 New Site Group Manager helper including the auto-groups wizard.", "committedDate": "2020-02-18T11:39:50Z", "type": "commit"}, {"oid": "a55b4f5882bc1975f6839715c91fe3fb3ecb0058", "url": "https://github.com/sakaiproject/sakai/commit/a55b4f5882bc1975f6839715c91fe3fb3ecb0058", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties", "committedDate": "2020-02-18T11:40:06Z", "type": "commit"}, {"oid": "a55b4f5882bc1975f6839715c91fe3fb3ecb0058", "url": "https://github.com/sakaiproject/sakai/commit/a55b4f5882bc1975f6839715c91fe3fb3ecb0058", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties", "committedDate": "2020-02-18T11:40:06Z", "type": "forcePushed"}]}