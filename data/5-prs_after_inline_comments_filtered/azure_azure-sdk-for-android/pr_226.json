{"pr_number": 226, "pr_title": "Enable block blob downloads in TransferManager", "pr_createdAt": "2020-04-20T22:48:27Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/226", "timeline": [{"oid": "f9d6dd8d331a7a904a9e49bba9c8b9e07d069215", "url": "https://github.com/Azure/azure-sdk-for-android/commit/f9d6dd8d331a7a904a9e49bba9c8b9e07d069215", "message": "Added classes, methods and the API specification required to download blobs using the StorageBlobClient.", "committedDate": "2020-03-25T23:09:53Z", "type": "commit"}, {"oid": "8101d5e8398e38e1d62df9f0e5c8c5c99795424f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8101d5e8398e38e1d62df9f0e5c8c5c99795424f", "message": "Created classes to download blobs using TransferClient (no paralellism for now). Modified some existing classes to be used for both upload and download operations.", "committedDate": "2020-03-26T00:36:56Z", "type": "commit"}, {"oid": "0bc3a9ffc1cdb1a7723902cfa89d6a1a9913b8f1", "url": "https://github.com/Azure/azure-sdk-for-android/commit/0bc3a9ffc1cdb1a7723902cfa89d6a1a9913b8f1", "message": "Added the ability to cancel a transfer operation. Refactored part of the download Javadoc for better readability.", "committedDate": "2020-03-30T23:41:25Z", "type": "commit"}, {"oid": "b879ced00683d3466e61c26b823d44d5e33a8c7b", "url": "https://github.com/Azure/azure-sdk-for-android/commit/b879ced00683d3466e61c26b823d44d5e33a8c7b", "message": "Added a public API to call Get Blob Properties (https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties).", "committedDate": "2020-04-03T22:05:14Z", "type": "commit"}, {"oid": "5eb47ae6843ed99cf4319b945ae0ca1d1691b9f4", "url": "https://github.com/Azure/azure-sdk-for-android/commit/5eb47ae6843ed99cf4319b945ae0ca1d1691b9f4", "message": "Enabled parallel block downloads instead of downloading an entire blob in one go. Renamed some artifacts that can be used for both upload and download operations.", "committedDate": "2020-04-03T22:09:32Z", "type": "commit"}, {"oid": "995985396607a43d3957d0dd5602faa81cfb114d", "url": "https://github.com/Azure/azure-sdk-for-android/commit/995985396607a43d3957d0dd5602faa81cfb114d", "message": "Modified sample app to use the TransferClient for blob uploads and downloads.", "committedDate": "2020-04-03T22:12:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NzIwNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412567204", "bodyText": "I think this should be called getBlobPropertiesWithHeaders? provided that's the service method this uses.", "author": "anuchandy", "createdAt": "2020-04-21T23:45:44Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -146,6 +149,249 @@ public void getBlobsInPageWithRestResponse(String pageId,\n             callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     */\n+    public BlobDownloadHeaders getBlobProperties(String containerName,\n+                                                 String blobName) {\n+        return storageBlobServiceClient.getBlobProperties(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    public ServiceCall getBlobProperties(String containerName,\n+                                         String blobName,\n+                                         Callback<BlobDownloadHeaders> callback) {\n+        return storageBlobServiceClient.getBlobProperties(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * Reads a blob's metadata & properties.\n+     *\n+     * @param containerName         The container name.\n+     * @param blobName              The blob name.\n+     * @param snapshot              The snapshot parameter is an opaque DateTime value that, when present, specifies\n+     *                              the blob snapshot to retrieve. For more information on working with blob snapshots,\n+     *                              see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout               The timeout parameter is expressed in seconds. For more information, see\n+     *                              &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param version               Specifies the version of the operation to use for this request.\n+     * @param blobRequestConditions Object that contains values which will restrict the successful operation of a\n+     *                              variety of requests to the conditions present. These conditions are entirely\n+     *                              optional.\n+     * @param requestId             Provides a client-generated, opaque value with a 1 KB character limit that is\n+     *                              recorded in the analytics logs when storage analytics logging is enabled.\n+     * @param cpkInfo               Additional parameters for the operation.\n+     * @return The response information returned from the server when downloading a blob.\n+     */\n+    public BlobDownloadHeaders downloadWithHeaders(String containerName,", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2Nzg3Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412567876", "bodyText": "nit; the new short url for snapshot is - https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob", "author": "anuchandy", "createdAt": "2020-04-21T23:47:21Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -146,6 +149,249 @@ public void getBlobsInPageWithRestResponse(String pageId,\n             callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     */\n+    public BlobDownloadHeaders getBlobProperties(String containerName,\n+                                                 String blobName) {\n+        return storageBlobServiceClient.getBlobProperties(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    public ServiceCall getBlobProperties(String containerName,\n+                                         String blobName,\n+                                         Callback<BlobDownloadHeaders> callback) {\n+        return storageBlobServiceClient.getBlobProperties(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * Reads a blob's metadata & properties.\n+     *\n+     * @param containerName         The container name.\n+     * @param blobName              The blob name.\n+     * @param snapshot              The snapshot parameter is an opaque DateTime value that, when present, specifies\n+     *                              the blob snapshot to retrieve. For more information on working with blob snapshots,\n+     *                              see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2ODI0Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412568243", "bodyText": "nit; new reference url is - https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations", "author": "anuchandy", "createdAt": "2020-04-21T23:48:23Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/StorageBlobClient.java", "diffHunk": "@@ -146,6 +149,249 @@ public void getBlobsInPageWithRestResponse(String pageId,\n             callback);\n     }\n \n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     */\n+    public BlobDownloadHeaders getBlobProperties(String containerName,\n+                                                 String blobName) {\n+        return storageBlobServiceClient.getBlobProperties(containerName,\n+            blobName);\n+    }\n+\n+    /**\n+     * Reads the blob's metadata & properties.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName      The blob name.\n+     * @param callback      Callback that receives the response.\n+     */\n+    public ServiceCall getBlobProperties(String containerName,\n+                                         String blobName,\n+                                         Callback<BlobDownloadHeaders> callback) {\n+        return storageBlobServiceClient.getBlobProperties(containerName,\n+            blobName,\n+            callback);\n+    }\n+\n+    /**\n+     * Reads a blob's metadata & properties.\n+     *\n+     * @param containerName         The container name.\n+     * @param blobName              The blob name.\n+     * @param snapshot              The snapshot parameter is an opaque DateTime value that, when present, specifies\n+     *                              the blob snapshot to retrieve. For more information on working with blob snapshots,\n+     *                              see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;.\n+     * @param timeout               The timeout parameter is expressed in seconds. For more information, see\n+     *                              &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;.\n+     * @param version               Specifies the version of the operation to use for this request.", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MzIyMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412663220", "bodyText": "there are also other places in doc containing links, just double check all.", "author": "anuchandy", "createdAt": "2020-04-22T04:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2ODI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3NTQ3NQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412575475", "bodyText": "nit; comment refers upload, commit", "author": "anuchandy", "createdAt": "2020-04-22T00:08:34Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/BlobDownloadEntity.java", "diffHunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import androidx.room.ColumnInfo;\n+import androidx.room.Entity;\n+import androidx.room.Ignore;\n+import androidx.room.PrimaryKey;\n+import androidx.room.TypeConverters;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+/**\n+ * Package private.\n+ *\n+ * Represents metadata for a single blob download.\n+ *\n+ * The Data Access Object type {@link DownloadDao} exposes the DB store and read methods on this model.\n+ *\n+ * @see TransferDatabase\n+ */\n+@Entity(tableName = \"blobdownloads\")\n+final class BlobDownloadEntity {\n+    /**\n+     * A unique key for the blob download metadata.\n+     *\n+     * Also referred as downloadId that users use to identify and manage the download operation.\n+     */\n+    @PrimaryKey(autoGenerate = true)\n+    @ColumnInfo(name = \"key\")\n+    public Long key;\n+\n+    /**\n+     * The name of the Azure Storage Container to download the blob from.\n+     */\n+    @ColumnInfo(name = \"container_name\")\n+    public String containerName;\n+\n+    /**\n+     * The name of the Azure Storage blob to download.\n+     */\n+    @ColumnInfo(name = \"blob_name\")\n+    public String blobName;\n+\n+    /**\n+     * The blob size in bytes.\n+     */\n+    @ColumnInfo(name = \"blob_size\")\n+    public long blobSize;\n+\n+    /**\n+     * The absolute path to the file to be uploaded as blob.\n+     */\n+    @ColumnInfo(name = \"file_path\")\n+    public String filePath;\n+\n+    /**\n+     * The current state of the blob download operation.\n+     */\n+    @ColumnInfo(name = \"blob_download_state\")\n+    @TypeConverters(ColumnConverter.class)\n+    public volatile BlobTransferState state;\n+\n+    /**\n+     * Indicate the reason for interrupting (stopping) blob download.\n+     */\n+    @ColumnInfo(name = \"transfer_interrupt_state\")\n+    @TypeConverters(ColumnConverter.class)\n+    public TransferInterruptState interruptState;\n+\n+    /**\n+     * Holds the exception indicating the reason for download failure.\n+     *\n+     * This is not persisted.\n+     */\n+    @Ignore\n+    private Throwable downloadError;\n+\n+    /**\n+     * Creates BlobDownloadEntity, this constructor is used by Room library\n+     * when re-hydrating metadata from local store.\n+     */\n+    public BlobDownloadEntity() {}\n+\n+    /**\n+     * Create a new BlobDownloadEntity to persist in local store.\n+     *\n+     * @param containerName The container name.\n+     * @param blobName The blob name.\n+     * @param file The local file.\n+     */\n+    @Ignore\n+    BlobDownloadEntity(String containerName,\n+                       String blobName,\n+                       File file) {\n+        Objects.requireNonNull(containerName);\n+        Objects.requireNonNull(blobName);\n+        Objects.requireNonNull(file);\n+\n+        this.containerName = containerName;\n+        this.blobName = blobName;\n+        filePath = file.getAbsolutePath();\n+        state = BlobTransferState.WAIT_TO_BEGIN;\n+        interruptState = TransferInterruptState.NONE;\n+    }\n+\n+    /**\n+     * Set the commit (the last stage of upload) failure error.", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3NjEwNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412576107", "bodyText": "we should update the comments for enum values, upload -> transfer.", "author": "anuchandy", "createdAt": "2020-04-22T00:10:27Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/BlobTransferState.java", "diffHunk": "@@ -8,7 +8,7 @@\n  *\n  * Describes blob upload state.\n  */\n-enum BlobUploadState {\n+enum BlobTransferState {", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3ODk3MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412578971", "bodyText": "nit; the blob key", "author": "anuchandy", "createdAt": "2020-04-22T00:18:19Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/BlockDownloadEntity.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import androidx.room.ColumnInfo;\n+import androidx.room.Entity;\n+import androidx.room.ForeignKey;\n+import androidx.room.Ignore;\n+import androidx.room.Index;\n+import androidx.room.PrimaryKey;\n+import androidx.room.TypeConverters;\n+\n+import com.azure.android.core.util.Base64Util;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static androidx.room.ForeignKey.CASCADE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Package private.\n+ *\n+ * Represents metadata for a block download.\n+ *\n+ * There is one-to-many relationship between a {@link BlobDownloadEntity} and a set of {@link BlockDownloadEntity}.\n+ * Each {@link BlockDownloadEntity} in the set describes a chunk of the file referenced by the\n+ * {@link BlobDownloadEntity}\n+ *\n+ * The Data Access Object type {@link DownloadDao} exposes DB store and read methods on this model.\n+ *\n+ * @see TransferDatabase\n+ */\n+@Entity(tableName = \"blockdownloads\",\n+    foreignKeys = @ForeignKey(entity = BlobDownloadEntity.class,\n+        parentColumns = \"key\",\n+        childColumns = \"blob_key\",\n+        onDelete = CASCADE),\n+    indices = {@Index(\"blob_key\")})\n+final class BlockDownloadEntity {\n+    /**\n+     * A unique key for the block download metadata.\n+     *\n+     * This key identifies the metadata in the local store, which is different from\n+     * {@link BlockDownloadEntity#blockId}. Block ID is used by the storage service to uniquely identify the block.\n+     */\n+    @PrimaryKey(autoGenerate = true)\n+    @ColumnInfo(name = \"key\")\n+    public Long key;\n+\n+    /**\n+     * The key of {@link BlobDownloadEntity} that this {@link BlockDownloadEntity} belongs to.\n+     */\n+    @ColumnInfo(name = \"blob_key\")\n+    public long blobKey;\n+\n+    /**\n+     * The absolute path to the file that the block is a part of.\n+     */\n+    @ColumnInfo(name = \"file_path\")\n+    public String filePath;\n+\n+    /**\n+     * The offset in the file from which block contents starts.\n+     */\n+    @ColumnInfo(name = \"blob_offset\")\n+    public long blobOffset;\n+\n+    /**\n+     * The block size in bytes.\n+     */\n+    @ColumnInfo(name = \"block_size\")\n+    public long blockSize;\n+\n+    /**\n+     * The base64 block ID used by the storage service to uniquely identify the block.\n+     */\n+    @ColumnInfo(name = \"block_id\")\n+    public String blockId;\n+\n+    /**\n+     * The current state of the block download operation.\n+     */\n+    @ColumnInfo(name = \"block_download_state\")\n+    @TypeConverters(ColumnConverter.class)\n+    public volatile BlockTransferState state;\n+\n+    /**\n+     * Holds the exception indicating the reason for block download failure.\n+     *\n+     * This is not persisted.\n+     */\n+    @Ignore\n+    private Throwable downloadError;\n+\n+    /**\n+     * Creates BlockDownloadEntity, this constructor is used by Room library when re-hydrating metadata from local\n+     * store.\n+     */\n+    public BlockDownloadEntity() {}\n+\n+    /**\n+     * Create a new BlockDownloadEntity to persist in local store.\n+     *\n+     * @param blockId The base64 block ID\n+     * @param filePath The absolute path to the file that the block is a part of.\n+     * @param blobOffset The offset in the file from which block contents starts.\n+     * @param blockSize The block size in bytes.\n+     */\n+    private BlockDownloadEntity(String blockId, String filePath, long blobOffset, long blockSize) {\n+        Objects.requireNonNull(blockId);\n+        Objects.requireNonNull(filePath);\n+\n+        this.blockId = blockId;\n+        this.filePath = filePath;\n+        this.blobOffset = blobOffset;\n+        this.blockSize = blockSize;\n+        this.state = BlockTransferState.WAIT_TO_BEGIN;\n+    }\n+\n+    /**\n+     * Set the {@link BlobDownloadEntity#key} for this block. This is the foreign key referring\n+     * the BlobDownloadEntity this block is a part of.\n+     *\n+     * @param blobKey the block key (aka downloadId)", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3OTM5OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412579399", "bodyText": "nit; this.cursor", "author": "anuchandy", "createdAt": "2020-04-22T00:19:46Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/BlockDownloadRecordsEnumerator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Package private.\n+ *\n+ * Type to enumerate collection of {@link BlockDownloadEntity} describing the blocks of a file to download.\n+ */\n+final class BlockDownloadRecordsEnumerator {\n+    private final TransferDatabase db;\n+    private final long downloadId;\n+    private final List<BlockTransferState> skipStates;\n+    private List<BlockDownloadEntity> blocks;\n+    private int cursor;\n+    private int size;\n+\n+    /**\n+     * Create {@link BlockDownloadRecordsEnumerator} to enumerate the set of {@link BlockDownloadEntity} for the\n+     * given download ID.\n+     *\n+     * @param db The local store to read the entities from.\n+     * @param downloadId The download ID.\n+     * @param skipStates The state of the entities to be skipped from enumeration.\n+     */\n+    BlockDownloadRecordsEnumerator(TransferDatabase db, long downloadId, List<BlockTransferState> skipStates) {\n+        cursor = 0;", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2NTgwMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r413265803", "bodyText": "@anuchandy Across multiple places I've seen you and others use the keyword this even when there is no chance for the variable to get confused with anything else in the same scope, why is that? Just curious, is it so that it's easier to understand who that belongs to when not reading the code using an IDE? Personally I prefer to use this only when there's another variable with the same name in the scope.", "author": "vcolin7", "createdAt": "2020-04-22T19:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3OTM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3OTk1MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412579950", "bodyText": "nit; need to update enum values comments (upload -> transfer).", "author": "anuchandy", "createdAt": "2020-04-22T00:21:13Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/BlockTransferState.java", "diffHunk": "@@ -8,7 +8,7 @@\n  *\n  * Describes block upload state.\n  */\n-enum BlockUploadState {\n+enum BlockTransferState {", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4MzU1Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412583552", "bodyText": "Any reason to set public visibility for DownloadWorker? so far package internal visibility for UploadWorker worked for me in emulator.", "author": "anuchandy", "createdAt": "2020-04-22T00:31:29Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadWorker.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.concurrent.futures.CallbackToFutureAdapter;\n+import androidx.work.Data;\n+import androidx.work.ListenableWorker;\n+import androidx.work.WorkerParameters;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+\n+/**\n+ * Package private.\n+ * <p>\n+ * {@link ListenableWorker} for performing a single blob download using {@link DownloadHandler}.\n+ */\n+public class DownloadWorker extends ListenableWorker {", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3MDUzNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r413270535", "bodyText": "@anuchandy When I was testing on the emulator WorkManager would throw an error if this was not public. I will check again and corroborate this.", "author": "vcolin7", "createdAt": "2020-04-22T19:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4MzU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3ODYyNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r413278624", "bodyText": "Just checked and I do get the following error if I make the class package private:\nE/WM-WorkerFactory: Could not instantiate com.azure.android.storage.blob.transfer.DownloadWorker java.lang.IllegalAccessException: java.lang.Class<com.azure.android.storage.blob.transfer.DownloadWorker> is not accessible from java.lang.Class<androidx.work.WorkerFactory> at java.lang.reflect.Constructor.newInstance0(Native Method) at java.lang.reflect.Constructor.newInstance(Constructor.java:343) at androidx.work.WorkerFactory.createWorkerWithDefaultFallback(WorkerFactory.java:96) at androidx.work.impl.WorkerWrapper.runWorker(WorkerWrapper.java:242) at androidx.work.impl.WorkerWrapper.run(WorkerWrapper.java:136) at androidx.work.impl.utils.SerialExecutor$Task.run(SerialExecutor.java:91) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641) at java.lang.Thread.run(Thread.java:919) E/WM-WorkerWrapper: Could not create Worker com.azure.android.storage.blob.transfer.DownloadWorker", "author": "vcolin7", "createdAt": "2020-04-22T19:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4MzU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NDAyMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412584023", "bodyText": "nit; Data Access Object for download.", "author": "anuchandy", "createdAt": "2020-04-22T00:32:56Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferDatabase.java", "diffHunk": "@@ -36,6 +38,13 @@\n      */\n     public abstract UploadDao uploadDao();\n \n+    /**\n+     * Get the Data Access Object that exposes operations to store and retrieve download metadata.\n+     *\n+     * @return Data Access Object for upload.", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NDI1Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412584256", "bodyText": "nit; when handler transfer a single file", "author": "anuchandy", "createdAt": "2020-04-22T00:33:29Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferHandlerListener.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+/**\n+ * Package private.\n+ *\n+ * Contract to listen for various events from {@link UploadHandler} or {@link DownloadHandler} when handler upload a", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1MDkyMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412650920", "bodyText": "nit; typo runningBlockDownloads", "author": "anuchandy", "createdAt": "2020-04-22T03:58:18Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/DownloadHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import android.content.Context;\n+import android.os.Handler;\n+import android.os.HandlerThread;\n+import android.os.Looper;\n+import android.os.Message;\n+import android.util.Log;\n+import android.util.Pair;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.azure.android.core.http.ServiceCall;\n+import com.azure.android.storage.blob.StorageBlobClient;\n+import com.azure.android.storage.blob.models.BlobDownloadAsyncResponse;\n+import com.azure.android.storage.blob.models.BlobRange;\n+\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Package private.\n+ * <p>\n+ * Handler that manages a single blob download.\n+ * <p>\n+ * Handler is a state machine, {@link DownloadHandlerMessage.Type} represents various stages that the state machine\n+ * goes through. Handler reacts to each stage appropriately. Reacting to a stage includes: initialization, starting\n+ * async block download operations, handling failure in operations, parking the work if the handler reaches stop state.\n+ * <p>\n+ * Additionally Handler is responsible for notifying the {@link TransferHandlerListener} on various events. Calls to\n+ * this listener methods are serialized, i.e. these methods won't be called concurrently.\n+ */\n+final class DownloadHandler extends Handler {\n+    private static final String TAG = DownloadHandler.class.getSimpleName();\n+    private static final int BUFFER_SIZE = 2048; // Max allowed OkHttp buffer size.\n+\n+    private final Context appContext;\n+    private final int blocksDownloadConcurrency;\n+    private final long downloadId;\n+    private final HashMap<String, Pair<BlockDownloadEntity, ServiceCall>> runningBlockDonwloads;", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MTg5OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412661898", "bodyText": "this comment may not be applicable for download since we never have to send it to service.", "author": "anuchandy", "createdAt": "2020-04-22T04:32:23Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/BlockDownloadEntity.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import androidx.room.ColumnInfo;\n+import androidx.room.Entity;\n+import androidx.room.ForeignKey;\n+import androidx.room.Ignore;\n+import androidx.room.Index;\n+import androidx.room.PrimaryKey;\n+import androidx.room.TypeConverters;\n+\n+import com.azure.android.core.util.Base64Util;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static androidx.room.ForeignKey.CASCADE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Package private.\n+ *\n+ * Represents metadata for a block download.\n+ *\n+ * There is one-to-many relationship between a {@link BlobDownloadEntity} and a set of {@link BlockDownloadEntity}.\n+ * Each {@link BlockDownloadEntity} in the set describes a chunk of the file referenced by the\n+ * {@link BlobDownloadEntity}\n+ *\n+ * The Data Access Object type {@link DownloadDao} exposes DB store and read methods on this model.\n+ *\n+ * @see TransferDatabase\n+ */\n+@Entity(tableName = \"blockdownloads\",\n+    foreignKeys = @ForeignKey(entity = BlobDownloadEntity.class,\n+        parentColumns = \"key\",\n+        childColumns = \"blob_key\",\n+        onDelete = CASCADE),\n+    indices = {@Index(\"blob_key\")})\n+final class BlockDownloadEntity {\n+    /**\n+     * A unique key for the block download metadata.\n+     *\n+     * This key identifies the metadata in the local store, which is different from\n+     * {@link BlockDownloadEntity#blockId}. Block ID is used by the storage service to uniquely identify the block.", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MjI4Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r412662287", "bodyText": "we don't send it to service in download case, this will be used only for tracking running calls", "author": "anuchandy", "createdAt": "2020-04-22T04:33:32Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/BlockDownloadEntity.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.android.storage.blob.transfer;\n+\n+import androidx.room.ColumnInfo;\n+import androidx.room.Entity;\n+import androidx.room.ForeignKey;\n+import androidx.room.Ignore;\n+import androidx.room.Index;\n+import androidx.room.PrimaryKey;\n+import androidx.room.TypeConverters;\n+\n+import com.azure.android.core.util.Base64Util;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static androidx.room.ForeignKey.CASCADE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Package private.\n+ *\n+ * Represents metadata for a block download.\n+ *\n+ * There is one-to-many relationship between a {@link BlobDownloadEntity} and a set of {@link BlockDownloadEntity}.\n+ * Each {@link BlockDownloadEntity} in the set describes a chunk of the file referenced by the\n+ * {@link BlobDownloadEntity}\n+ *\n+ * The Data Access Object type {@link DownloadDao} exposes DB store and read methods on this model.\n+ *\n+ * @see TransferDatabase\n+ */\n+@Entity(tableName = \"blockdownloads\",\n+    foreignKeys = @ForeignKey(entity = BlobDownloadEntity.class,\n+        parentColumns = \"key\",\n+        childColumns = \"blob_key\",\n+        onDelete = CASCADE),\n+    indices = {@Index(\"blob_key\")})\n+final class BlockDownloadEntity {\n+    /**\n+     * A unique key for the block download metadata.\n+     *\n+     * This key identifies the metadata in the local store, which is different from\n+     * {@link BlockDownloadEntity#blockId}. Block ID is used by the storage service to uniquely identify the block.\n+     */\n+    @PrimaryKey(autoGenerate = true)\n+    @ColumnInfo(name = \"key\")\n+    public Long key;\n+\n+    /**\n+     * The key of {@link BlobDownloadEntity} that this {@link BlockDownloadEntity} belongs to.\n+     */\n+    @ColumnInfo(name = \"blob_key\")\n+    public long blobKey;\n+\n+    /**\n+     * The absolute path to the file that the block is a part of.\n+     */\n+    @ColumnInfo(name = \"file_path\")\n+    public String filePath;\n+\n+    /**\n+     * The offset in the file from which block contents starts.\n+     */\n+    @ColumnInfo(name = \"blob_offset\")\n+    public long blobOffset;\n+\n+    /**\n+     * The block size in bytes.\n+     */\n+    @ColumnInfo(name = \"block_size\")\n+    public long blockSize;\n+\n+    /**\n+     * The base64 block ID used by the storage service to uniquely identify the block.\n+     */\n+    @ColumnInfo(name = \"block_id\")\n+    public String blockId;", "originalCommit": "995985396607a43d3957d0dd5602faa81cfb114d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aa09a83ad2b9581c1c524e25f25f039511936bb9", "url": "https://github.com/Azure/azure-sdk-for-android/commit/aa09a83ad2b9581c1c524e25f25f039511936bb9", "message": "Addressed comments by @anuchandy in PR #226 (https://github.com/Azure/azure-sdk-for-android/pull/226#pullrequestreview-397750378).", "committedDate": "2020-04-22T19:55:31Z", "type": "commit"}, {"oid": "9b2e3e046dd0c031450f4da1a16db1ff3dbc8ede", "url": "https://github.com/Azure/azure-sdk-for-android/commit/9b2e3e046dd0c031450f4da1a16db1ff3dbc8ede", "message": "Merge branch 'dev' into transfer-manager-download\n\n# Conflicts:\n#\tsamples/sample-app-storage/src/main/java/com/azure/android/storage/sample/ListAndDownloadBlobsActivity.java\n#\tsdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java\n#\tsdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferIdMappedToTransferInfo.java\n#\tsdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/UploadWorker.java", "committedDate": "2020-04-22T23:23:03Z", "type": "commit"}, {"oid": "0670b130f960974c529c487869df6dc8018d0472", "url": "https://github.com/Azure/azure-sdk-for-android/commit/0670b130f960974c529c487869df6dc8018d0472", "message": "Solved some build and runtime problems caused by merging the dev branch. Added the download part of pause() and resume(), also modified cancel() to be in line with the former operations in TransferClient. Made modifications to the sample app to account for all these changes.", "committedDate": "2020-04-23T01:17:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0Mzc2Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r414743762", "bodyText": "can we do extra DB call only if needed? i.e.\nBlobTransferState blobTransferState = null;\nBlobUploadEntity uploadBlob = db.uploadDao().getBlob(transferId);\nif (uploadBlob != null) {\n   blobTransferState = uploadBlob.state;\n} else {\n   BlobDownloadEntity downloadBlob = db.downloadDao().getBlob(transferId);\n   if (downloadBlob != null) {\n       blobTransferState = downloadBlob.state;   \n   }\n}\nif (blbTransferState == null) {\n    transferOpResultLiveData.postValue(TransferOperationResult.notFoundError(transferId));\n    return return new ResumeCheck(false, false);\n} else {\n   // Look for failed, completed etc..\n}", "author": "anuchandy", "createdAt": "2020-04-24T17:30:16Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java", "diffHunk": "@@ -341,19 +372,30 @@ static String toTransferUniqueWorkName(long transferId) {\n      */\n     private ResumeCheck checkResumeable(long transferId,\n                                         MutableLiveData<TransferOperationResult> transferOpResultLiveData) {\n-        // Check for Upload Record\n+        // Check for transfer record\n         BlobUploadEntity uploadBlob = db.uploadDao().getBlob(transferId);\n+        BlobDownloadEntity downloadBlob = db.downloadDao().getBlob(transferId);", "originalCommit": "0670b130f960974c529c487869df6dc8018d0472", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MzkxMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r414753913", "bodyText": "nit; flag indicating whether the transfer can be paused or canceled", "author": "anuchandy", "createdAt": "2020-04-24T17:47:07Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java", "diffHunk": "@@ -374,37 +416,46 @@ private ResumeCheck checkResumeable(long transferId,\n     }\n \n     /**\n-     * Do pre-validations to see a transfer can be paused.\n+     * Do pre-validations to see a transfer can be stopped (paused/cancelled).\n      *\n-     * @param transferId identifies the transfer to check for pause eligibility\n-     * @return result of check\n+     * @param transferId Identifies the transfer to check for stopping eligibility.\n+     * @return Result of check.\n      */\n-    private PauseCheck checkPauseable(long transferId) {\n-        // Check for Upload Record\n-        BlobUploadEntity blob = db.uploadDao().getBlob(transferId);\n-        if (blob != null) {\n-            if (blob.state == BlobUploadState.FAILED) {\n-                return new PauseCheck(false, true);\n-            } else if (blob.state == BlobUploadState.COMPLETED) {\n-                return new PauseCheck(false, true);\n+    private StopCheck checkStoppable(long transferId) {\n+        // Check for transfer record\n+        BlobUploadEntity uploadBlob = db.uploadDao().getBlob(transferId);\n+        BlobDownloadEntity downloadBlob = db.downloadDao().getBlob(transferId);\n+        BlobTransferState blobTransferState = null;\n+\n+        if (uploadBlob != null) {\n+            blobTransferState = uploadBlob.state;\n+        } else if (downloadBlob != null) {\n+            blobTransferState = downloadBlob.state;\n+        }\n+\n+        if (blobTransferState != null) {\n+            if (blobTransferState == BlobTransferState.FAILED) {\n+                return new StopCheck(false, true);\n+            } else if (blobTransferState == BlobTransferState.COMPLETED) {\n+                return new StopCheck(false, true);\n             }\n-            return new PauseCheck(true, true);\n+\n+            return new StopCheck(true, true);\n         }\n-        // TODO: Check for Download Record\n \n         // No upload or download transfer found.\n-        return new PauseCheck(false, false);\n+        return new StopCheck(false, false);\n     }\n \n-    /** Result of {@link this#checkPauseable(long)}} **/\n-    private static final class PauseCheck {\n+    /** Result of {@link this#checkStoppable(long)}} **/\n+    private static final class StopCheck {\n         // flag indicating whether transfer is pause-able or not.", "originalCommit": "0670b130f960974c529c487869df6dc8018d0472", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1NDE4MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/226#discussion_r414754181", "bodyText": "nit; if the transfer can be paused or canceled then this flag indicates the transfer type (upload|download)", "author": "anuchandy", "createdAt": "2020-04-24T17:47:35Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/android/storage/blob/transfer/TransferClient.java", "diffHunk": "@@ -374,37 +416,46 @@ private ResumeCheck checkResumeable(long transferId,\n     }\n \n     /**\n-     * Do pre-validations to see a transfer can be paused.\n+     * Do pre-validations to see a transfer can be stopped (paused/cancelled).\n      *\n-     * @param transferId identifies the transfer to check for pause eligibility\n-     * @return result of check\n+     * @param transferId Identifies the transfer to check for stopping eligibility.\n+     * @return Result of check.\n      */\n-    private PauseCheck checkPauseable(long transferId) {\n-        // Check for Upload Record\n-        BlobUploadEntity blob = db.uploadDao().getBlob(transferId);\n-        if (blob != null) {\n-            if (blob.state == BlobUploadState.FAILED) {\n-                return new PauseCheck(false, true);\n-            } else if (blob.state == BlobUploadState.COMPLETED) {\n-                return new PauseCheck(false, true);\n+    private StopCheck checkStoppable(long transferId) {\n+        // Check for transfer record\n+        BlobUploadEntity uploadBlob = db.uploadDao().getBlob(transferId);\n+        BlobDownloadEntity downloadBlob = db.downloadDao().getBlob(transferId);\n+        BlobTransferState blobTransferState = null;\n+\n+        if (uploadBlob != null) {\n+            blobTransferState = uploadBlob.state;\n+        } else if (downloadBlob != null) {\n+            blobTransferState = downloadBlob.state;\n+        }\n+\n+        if (blobTransferState != null) {\n+            if (blobTransferState == BlobTransferState.FAILED) {\n+                return new StopCheck(false, true);\n+            } else if (blobTransferState == BlobTransferState.COMPLETED) {\n+                return new StopCheck(false, true);\n             }\n-            return new PauseCheck(true, true);\n+\n+            return new StopCheck(true, true);\n         }\n-        // TODO: Check for Download Record\n \n         // No upload or download transfer found.\n-        return new PauseCheck(false, false);\n+        return new StopCheck(false, false);\n     }\n \n-    /** Result of {@link this#checkPauseable(long)}} **/\n-    private static final class PauseCheck {\n+    /** Result of {@link this#checkStoppable(long)}} **/\n+    private static final class StopCheck {\n         // flag indicating whether transfer is pause-able or not.\n-        private final boolean canPause;\n+        private final boolean canStop;\n         // if pause-able then this flag indicates the transfer type (upload|download)", "originalCommit": "0670b130f960974c529c487869df6dc8018d0472", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c1ad6b950414550a1b651d2cc22c1a01487ee97f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/c1ad6b950414550a1b651d2cc22c1a01487ee97f", "message": "Addressed some comments left by @anuchandy.", "committedDate": "2020-04-24T19:10:59Z", "type": "commit"}]}