{"pr_number": 370, "pr_title": "Create initial version of Chat SDK for Android", "pr_createdAt": "2020-10-01T01:00:16Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/370", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk1Mjg2Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r497952866", "bodyText": "Actual tests coming ?", "author": "juancamilor", "createdAt": "2020-10-01T02:40:15Z", "path": "sdk/communication/chat/src/test/java/com/azure/communication/chat/ExampleUnitTest.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.azure.communication.chat;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Example local unit test, which will execute on the development machine (host).\n+ *\n+ * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n+ */\n+public class ExampleUnitTest {\n+    @Test\n+    public void addition_isCorrect() {", "originalCommit": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNzU2NQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498437565", "bodyText": "I'll delete this one.", "author": "JianpingChen", "createdAt": "2020-10-01T18:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk1Mjg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4NTc0NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498385744", "bodyText": "Is this an Android requirement, that all responses come via callbacks?", "author": "angiurgiu", "createdAt": "2020-10-01T16:51:34Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {", "originalCommit": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTE5Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498405196", "bodyText": "that's right, the guideline for async output is via \"Callback\"", "author": "anuchandy", "createdAt": "2020-10-01T17:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4NTc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MjExNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498392117", "bodyText": "I think these should be in an Options class, but I guess that can't be achieved with the autogenerated tool", "author": "angiurgiu", "createdAt": "2020-10-01T17:02:52Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {", "originalCommit": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwODEzNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498408137", "bodyText": "Emitting \"Option\" is not supported in the codegen yet, there are discussions on whether it should be core codegen or android codegen. For the first preview, we'll not have it.", "author": "anuchandy", "createdAt": "2020-10-01T17:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MjExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzODc5Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498438793", "bodyText": "We can achieve anything given enough time. For now, null for optional parameters should do. :-)", "author": "JianpingChen", "createdAt": "2020-10-01T18:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MjExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzA5MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498397090", "bodyText": "It's not ideal that we are returning this class (it's a list of mapping between id - status), so it won't be easy for the client to parse the thread id out of it.\nBut I know that it's something we can't do with auto-generated code :)", "author": "angiurgiu", "createdAt": "2020-10-01T17:12:18Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);", "originalCommit": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwOTgxOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498409818", "bodyText": "that's right, API exactly map to what swagger define, so any such filtering should be on the consuming side.", "author": "anuchandy", "createdAt": "2020-10-01T17:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzY0MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498397640", "bodyText": "I think these should be private or protected, no?", "author": "angiurgiu", "createdAt": "2020-10-01T17:13:18Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatThreadsPagesAsync(collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Updates a thread's properties.\n+     * \n+     * @param chatThreadId The id of the thread to update.\n+     * @param body Request payload for updating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatThread(String chatThreadId, UpdateChatThreadOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatThread(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a chat thread.\n+     * \n+     * @param chatThreadId Thread id to get.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatThread(String chatThreadId, final Callback<ChatThread> callback) {\n+        this.serviceClient.getChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Deletes a thread.\n+     * \n+     * @param chatThreadId Thread id to delete.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatThread(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsNext(String nextLink, final Callback<Page<ReadReceipt>> callback) {", "originalCommit": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxOTAxNw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498419017", "bodyText": "it could be, as long as page retriever can access with strict modifiers. Currently, it's following the visibility of autogen Java.", "author": "anuchandy", "createdAt": "2020-10-01T17:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzOTc1OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498439758", "bodyText": "We have to decide whether to expose these pairs for pagination: list and listNext. For now more is better IMHO.", "author": "JianpingChen", "createdAt": "2020-10-01T18:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5ODI1Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498398257", "bodyText": "What will the user agent be?", "author": "angiurgiu", "createdAt": "2020-10-01T17:14:23Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatThreadsPagesAsync(collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Updates a thread's properties.\n+     * \n+     * @param chatThreadId The id of the thread to update.\n+     * @param body Request payload for updating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatThread(String chatThreadId, UpdateChatThreadOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatThread(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a chat thread.\n+     * \n+     * @param chatThreadId Thread id to get.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatThread(String chatThreadId, final Callback<ChatThread> callback) {\n+        this.serviceClient.getChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Deletes a thread.\n+     * \n+     * @param chatThreadId Thread id to delete.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatThread(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsNext(String nextLink, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceiptsNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesNext(String nextLink, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessagesNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersNext(String nextLink, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembersNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsNext(String nextLink, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreadsNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * A builder for creating a new instance of the AzureCommunicationChatServiceAsyncClient type.\n+     */\n+    public static final class Builder {", "originalCommit": "8021fdd8fe5372465b5bc9ef8588fb014a2432bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxOTc3Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498419776", "bodyText": "that's will probably need to handwritten into the builder, given we don't have the convenience layer for the first go.", "author": "anuchandy", "createdAt": "2020-10-01T17:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5ODI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MDIyMQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498440221", "bodyText": "Good point. We need to know what else we are missing and try to address them", "author": "JianpingChen", "createdAt": "2020-10-01T18:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5ODI1Nw=="}], "type": "inlineReview"}, {"oid": "e16941c69999f1126cd586a1c46673fc8debf32d", "url": "https://github.com/Azure/azure-sdk-for-android/commit/e16941c69999f1126cd586a1c46673fc8debf32d", "message": "Rebase from master after paging code merge", "committedDate": "2020-10-01T20:55:20Z", "type": "commit"}, {"oid": "5b8139d9070439d132267c4379e462021af7fb52", "url": "https://github.com/Azure/azure-sdk-for-android/commit/5b8139d9070439d132267c4379e462021af7fb52", "message": "Remove page size from retriever constructors since it only makes it harder for autorest.android", "committedDate": "2020-10-01T20:58:35Z", "type": "commit"}, {"oid": "902c180f84aed5033cbae0cd8633b908137da5df", "url": "https://github.com/Azure/azure-sdk-for-android/commit/902c180f84aed5033cbae0cd8633b908137da5df", "message": "Create preview version of Chat sdk for Android", "committedDate": "2020-10-01T20:58:35Z", "type": "commit"}, {"oid": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/8396102e0d92f4773206520d9ba9d8ec697c3d4f", "message": "Update with latest swagger", "committedDate": "2020-10-01T20:58:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTg0MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498529841", "bodyText": "non-null pageId is for the first page I assume?", "author": "anuchandy", "createdAt": "2020-10-01T21:47:42Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -51,7 +51,6 @@ public P getFirstPage() {\n      * @return a page that matches the given id\n      */\n     public P getPage(@NonNull String pageId) {\n-        Objects.requireNonNull(pageId);", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0Njk2OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498546969", "bodyText": "No. We use pageId as key for caching. Allow null key would be risky. Consider the case when more than one pages return null key, it can get really confusing for the client.", "author": "JianpingChen", "createdAt": "2020-10-01T22:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTE3NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498529174", "bodyText": "Why was this null check removed? All other PagedCollections check for nullness if I am not mistaken.", "author": "vcolin7", "createdAt": "2020-10-01T21:45:54Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/util/paging/PagedDataCollection.java", "diffHunk": "@@ -51,7 +51,6 @@ public P getFirstPage() {\n      * @return a page that matches the given id\n      */\n     public P getPage(@NonNull String pageId) {\n-        Objects.requireNonNull(pageId);", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MTg4Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498561883", "bodyText": "Sorry, could be a merge error. Let me check again.", "author": "JianpingChen", "createdAt": "2020-10-01T23:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2OTczNg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498569736", "bodyText": "Reverted the change", "author": "JianpingChen", "createdAt": "2020-10-02T00:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTY3Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498529676", "bodyText": "We probably want to rename this to something more specific like ChatErrorException or CommunicationChatErrorException to avoid collisions in the future.", "author": "vcolin7", "createdAt": "2020-10-01T21:47:14Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/models/ErrorException.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.models;\n+\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import okhttp3.Response;\n+\n+/**\n+ * Exception thrown for an invalid response with Error information.\n+ */\n+public final class ErrorException extends HttpResponseException {", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MjEwNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498562105", "bodyText": "Agreed but that's the problem in swagger. I won't modify generated code for this PR.", "author": "JianpingChen", "createdAt": "2020-10-01T23:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MzAxNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498563014", "bodyText": "make sense. Good feedback for swagger author for all languages.", "author": "anuchandy", "createdAt": "2020-10-01T23:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTg4Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498529883", "bodyText": "Error is too vague. We probably want to rename this to something more specific like ChatError or CommunicationChatError to avoid collisions in the future.", "author": "vcolin7", "createdAt": "2020-10-01T21:47:49Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/models/Error.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.models;\n+\n+import com.azure.android.core.annotation.Immutable;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/**\n+ * The Error model.\n+ */\n+@Immutable\n+public final class Error {", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MjI5Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498562296", "bodyText": "Agreed. It is better we provide feedback to the swagger owner. But I'll not take any action in this PR.", "author": "JianpingChen", "createdAt": "2020-10-01T23:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2Mjg2Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498562863", "bodyText": "We should let the swagger author know the feedback so that it can be fixed for all languages.", "author": "anuchandy", "createdAt": "2020-10-01T23:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyOTg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDU0Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498530543", "bodyText": "nit; It's interesting that this is the only package-info file where the first line had to be broken into 2 lines. What's the character limit in the code-gen tool for this?", "author": "vcolin7", "createdAt": "2020-10-01T21:49:38Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/implementation/package-info.java", "diffHunk": "@@ -0,0 +1,10 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/**\n+ * Package containing the implementations and inner classes for\n+ * AzureCommunicationChatService.", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNDc5OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498534799", "bodyText": "We may want to have a later talk about the guidelines on how to name these options bags for our public methods. I feel like it would be clearer for the user if this was called sendChatMessageOptions or something along those lines instead of body.\nAlso, I know that having all optional parameters in the options or not has been a contentious topic among our architects, so we might want to revisit this once there's a conclusion to that discussion.\nThese comments apply to all other places where we have options bags, also where they are named body.", "author": "vcolin7", "createdAt": "2020-10-01T22:02:01Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MjQ4Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498562487", "bodyText": "just to clarify: there is a discussion on \"deriving\" and generating Option model, by \"deriving\" I mean, a model not coming from swagger but we compute at codegen level, that's the one we want to eventually hold the non-required params. This is not done in codegen yet.\nHere \"SendChatMessageOptions\" is a model coming from swagger not derived, its that swagger author / service named the model like that, which created the confusion.", "author": "anuchandy", "createdAt": "2020-10-01T23:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNDc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNTMzMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498535330", "bodyText": "I think the callbacks should always be the last parameter in async calls, it would also stay consistent with the overload from line 128.", "author": "vcolin7", "createdAt": "2020-10-01T22:03:42Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MTQwMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498561400", "bodyText": "Good catch, seems a codegen bug in the paging part. There is a core logic where we put all required args first then optional later, callback is required, so something to handle in codgen.", "author": "anuchandy", "createdAt": "2020-10-01T23:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNTMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNTc3MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498535771", "bodyText": "Same think about having callbacks at the end of method signatures. I believe iOS does this as well.", "author": "vcolin7", "createdAt": "2020-10-01T22:05:01Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjQ3Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498536473", "bodyText": "Would we want to allow for users to provide other types of interceptors or would that be achieved by them adding them to the serviceClientBuilder and then passing that object to this builder?", "author": "vcolin7", "createdAt": "2020-10-01T22:07:18Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageOptions body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersOptions body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadOptions body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatThreadsPagesAsync(collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Updates a thread's properties.\n+     * \n+     * @param chatThreadId The id of the thread to update.\n+     * @param body Request payload for updating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatThread(String chatThreadId, UpdateChatThreadOptions body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatThread(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a chat thread.\n+     * \n+     * @param chatThreadId Thread id to get.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatThread(String chatThreadId, final Callback<ChatThread> callback) {\n+        this.serviceClient.getChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Deletes a thread.\n+     * \n+     * @param chatThreadId Thread id to delete.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatThread(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatThread(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsNext(String nextLink, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceiptsNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesNext(String nextLink, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessagesNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersNext(String nextLink, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembersNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     * \n+     * @param nextLink null\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsNext(String nextLink, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreadsNext(nextLink, callback);\n+    }\n+\n+    /**\n+     * A builder for creating a new instance of the AzureCommunicationChatServiceAsyncClient type.\n+     */\n+    public static final class Builder {", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1NzMyNg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498557326", "bodyText": "that's correct, for any additional interceptor customization, the user should use the core service-client.", "author": "anuchandy", "createdAt": "2020-10-01T23:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjkwOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498536908", "bodyText": "In the future we might want to provide passing ServiceVersions types to our clients (e.g. ChatServiceVersion) type to allow for supporting multiple service versions, just like Java SDKs do.", "author": "vcolin7", "createdAt": "2020-10-01T22:08:46Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/implementation/AzureCommunicationChatServiceImpl.java", "diffHunk": "@@ -0,0 +1,2309 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.implementation;\n+\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerFormat;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceImpl {\n+    /**\n+     * The proxy service used to perform REST calls.\n+     */\n+    private final AzureCommunicationChatServiceService service;\n+\n+    /**\n+     * The serializer.\n+     */\n+    final SerializerAdapter serializerAdapter = SerializerAdapter.createDefault();\n+\n+    /**\n+     * The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     */\n+    private ServiceClient serviceClient;\n+\n+    /**\n+     * Gets The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * \n+     * @return the serviceClient value.\n+     */\n+    public ServiceClient getServiceClient() {\n+        return this.serviceClient;\n+    }\n+\n+    /**\n+     * The endpoint of the Azure Communication resource.\n+     */\n+    private final String endpoint;\n+\n+    /**\n+     * Gets The endpoint of the Azure Communication resource.\n+     * \n+     * @return the endpoint value.\n+     */\n+    public String getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    /**\n+     * Api Version.\n+     */\n+    private final String apiVersion;\n+\n+    /**\n+     * Gets Api Version.\n+     * \n+     * @return the apiVersion value.\n+     */\n+    public String getApiVersion() {\n+        return this.apiVersion;\n+    }\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     * \n+     * @param serviceClient The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * @param endpoint The endpoint of the Azure Communication resource.\n+     */\n+    public AzureCommunicationChatServiceImpl(ServiceClient serviceClient, String endpoint) {\n+        this.serviceClient = serviceClient;\n+        this.endpoint = endpoint;\n+        this.apiVersion = \"2020-09-21-preview2\";", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1OTE0OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498559149", "bodyText": "Make sense. I think in JavaSDK, it's in the convenience layer. The first release will be AutoGen and future release there is plans to add a convenience layer.", "author": "anuchandy", "createdAt": "2020-10-01T23:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzOTMwNQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498539305", "bodyText": "How sure are we that some of these calls won't throw a NullPointerException at some point?", "author": "vcolin7", "createdAt": "2020-10-01T22:16:14Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/implementation/AzureCommunicationChatServiceImpl.java", "diffHunk": "@@ -0,0 +1,2309 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.implementation;\n+\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerFormat;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceImpl {\n+    /**\n+     * The proxy service used to perform REST calls.\n+     */\n+    private final AzureCommunicationChatServiceService service;\n+\n+    /**\n+     * The serializer.\n+     */\n+    final SerializerAdapter serializerAdapter = SerializerAdapter.createDefault();\n+\n+    /**\n+     * The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     */\n+    private ServiceClient serviceClient;\n+\n+    /**\n+     * Gets The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * \n+     * @return the serviceClient value.\n+     */\n+    public ServiceClient getServiceClient() {\n+        return this.serviceClient;\n+    }\n+\n+    /**\n+     * The endpoint of the Azure Communication resource.\n+     */\n+    private final String endpoint;\n+\n+    /**\n+     * Gets The endpoint of the Azure Communication resource.\n+     * \n+     * @return the endpoint value.\n+     */\n+    public String getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    /**\n+     * Api Version.\n+     */\n+    private final String apiVersion;\n+\n+    /**\n+     * Gets Api Version.\n+     * \n+     * @return the apiVersion value.\n+     */\n+    public String getApiVersion() {\n+        return this.apiVersion;\n+    }\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     * \n+     * @param serviceClient The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * @param endpoint The endpoint of the Azure Communication resource.\n+     */\n+    public AzureCommunicationChatServiceImpl(ServiceClient serviceClient, String endpoint) {\n+        this.serviceClient = serviceClient;\n+        this.endpoint = endpoint;\n+        this.apiVersion = \"2020-09-21-preview2\";\n+        this.service = serviceClient.getRetrofit().create(AzureCommunicationChatServiceService.class);\n+    }\n+\n+    /**\n+     * The interface defining all the services for\n+     * AzureCommunicationChatService to be used by the proxy service to perform\n+     * REST calls.\n+     */\n+    private interface AzureCommunicationChatServiceService {\n+        @GET(\"/chat/threads/{chatThreadId}/readreceipts\")\n+        Call<ResponseBody> listChatReadReceipts(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/readreceipts\")\n+        Call<ResponseBody> sendChatReadReceipt(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/messages\")\n+        Call<ResponseBody> sendChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/messages\")\n+        Call<ResponseBody> listChatMessages(@Path(\"chatThreadId\") String chatThreadId, @Query(\"maxPageSize\") Integer maxPageSize, @Query(\"startTime\") OffsetDateTime startTime, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> getChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion);\n+\n+        @PATCH(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> updateChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> deleteChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/typing\")\n+        Call<ResponseBody> sendTypingNotification(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/members\")\n+        Call<ResponseBody> listChatThreadMembers(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/members\")\n+        Call<ResponseBody> addChatThreadMembers(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}/members/{chatMemberId}\")\n+        Call<ResponseBody> removeChatThreadMember(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMemberId\") String chatMemberId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads\")\n+        Call<ResponseBody> createChatThread(@Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads\")\n+        Call<ResponseBody> listChatThreads(@Query(\"maxPageSize\") Integer maxPageSize, @Query(\"startTime\") OffsetDateTime startTime, @Query(\"api-version\") String apiVersion);\n+\n+        @PATCH(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> updateChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> getChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> deleteChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatReadReceiptsNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatMessagesNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatThreadMembersNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatThreadsNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        Call<ResponseBody> call = service.listChatReadReceipts(chatThreadId, this.getApiVersion());\n+        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {\n+            @Override\n+            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {\n+                if (response.isSuccessful()) {\n+                    if (response.code() == 200) {\n+                        final ReadReceiptsCollection decodedResult;\n+                        try {\n+                            decodedResult = deserializeContent(response.headers(), response.body(), ReadReceiptsCollection.class);\n+                        } catch(Exception ex) {\n+                            callback.onFailure(ex, response.raw());\n+                            return;\n+                        }\n+                        callback.onSuccess(new Page<ReadReceipt>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()), response.raw());", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MDQ5MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498560490", "bodyText": "it shouldn't, provided we arrived at this point means, we manage to make a request to an endpoint i.e. to a valid URI.", "author": "anuchandy", "createdAt": "2020-10-01T23:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzOTMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MzA1MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498563050", "bodyText": "Good point. We need to address that in codegen", "author": "JianpingChen", "createdAt": "2020-10-01T23:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzOTMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzOTc5OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498539799", "bodyText": "nit; Indentation turned out a little weird in methods like this one.", "author": "vcolin7", "createdAt": "2020-10-01T22:17:44Z", "path": "sdk/communication/chat/src/main/java/com/azure/android/communication/chat/implementation/AzureCommunicationChatServiceImpl.java", "diffHunk": "@@ -0,0 +1,2309 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat.implementation;\n+\n+import com.azure.android.communication.chat.models.AddChatThreadMembersOptions;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadOptions;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageOptions;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageOptions;\n+import com.azure.android.communication.chat.models.UpdateChatThreadOptions;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.internal.util.serializer.SerializerAdapter;\n+import com.azure.android.core.internal.util.serializer.SerializerFormat;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceImpl {\n+    /**\n+     * The proxy service used to perform REST calls.\n+     */\n+    private final AzureCommunicationChatServiceService service;\n+\n+    /**\n+     * The serializer.\n+     */\n+    final SerializerAdapter serializerAdapter = SerializerAdapter.createDefault();\n+\n+    /**\n+     * The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     */\n+    private ServiceClient serviceClient;\n+\n+    /**\n+     * Gets The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * \n+     * @return the serviceClient value.\n+     */\n+    public ServiceClient getServiceClient() {\n+        return this.serviceClient;\n+    }\n+\n+    /**\n+     * The endpoint of the Azure Communication resource.\n+     */\n+    private final String endpoint;\n+\n+    /**\n+     * Gets The endpoint of the Azure Communication resource.\n+     * \n+     * @return the endpoint value.\n+     */\n+    public String getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    /**\n+     * Api Version.\n+     */\n+    private final String apiVersion;\n+\n+    /**\n+     * Gets Api Version.\n+     * \n+     * @return the apiVersion value.\n+     */\n+    public String getApiVersion() {\n+        return this.apiVersion;\n+    }\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     * \n+     * @param serviceClient The Azure Core generic ServiceClient to setup interceptors and produce retrofit proxy.\n+     * @param endpoint The endpoint of the Azure Communication resource.\n+     */\n+    public AzureCommunicationChatServiceImpl(ServiceClient serviceClient, String endpoint) {\n+        this.serviceClient = serviceClient;\n+        this.endpoint = endpoint;\n+        this.apiVersion = \"2020-09-21-preview2\";\n+        this.service = serviceClient.getRetrofit().create(AzureCommunicationChatServiceService.class);\n+    }\n+\n+    /**\n+     * The interface defining all the services for\n+     * AzureCommunicationChatService to be used by the proxy service to perform\n+     * REST calls.\n+     */\n+    private interface AzureCommunicationChatServiceService {\n+        @GET(\"/chat/threads/{chatThreadId}/readreceipts\")\n+        Call<ResponseBody> listChatReadReceipts(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/readreceipts\")\n+        Call<ResponseBody> sendChatReadReceipt(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/messages\")\n+        Call<ResponseBody> sendChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/messages\")\n+        Call<ResponseBody> listChatMessages(@Path(\"chatThreadId\") String chatThreadId, @Query(\"maxPageSize\") Integer maxPageSize, @Query(\"startTime\") OffsetDateTime startTime, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> getChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion);\n+\n+        @PATCH(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> updateChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}/messages/{chatMessageId}\")\n+        Call<ResponseBody> deleteChatMessage(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMessageId\") String chatMessageId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/typing\")\n+        Call<ResponseBody> sendTypingNotification(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"/chat/threads/{chatThreadId}/members\")\n+        Call<ResponseBody> listChatThreadMembers(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads/{chatThreadId}/members\")\n+        Call<ResponseBody> addChatThreadMembers(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}/members/{chatMemberId}\")\n+        Call<ResponseBody> removeChatThreadMember(@Path(\"chatThreadId\") String chatThreadId, @Path(\"chatMemberId\") String chatMemberId, @Query(\"api-version\") String apiVersion);\n+\n+        @POST(\"/chat/threads\")\n+        Call<ResponseBody> createChatThread(@Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads\")\n+        Call<ResponseBody> listChatThreads(@Query(\"maxPageSize\") Integer maxPageSize, @Query(\"startTime\") OffsetDateTime startTime, @Query(\"api-version\") String apiVersion);\n+\n+        @PATCH(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> updateChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion, @Body RequestBody body);\n+\n+        @GET(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> getChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @DELETE(\"/chat/threads/{chatThreadId}\")\n+        Call<ResponseBody> deleteChatThread(@Path(\"chatThreadId\") String chatThreadId, @Query(\"api-version\") String apiVersion);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatReadReceiptsNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatMessagesNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatThreadMembersNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+\n+        @GET(\"{nextLink}\")\n+        Call<ResponseBody> listChatThreadsNext(@Path(value = \"nextLink\", encoded = true) String nextLink);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        Call<ResponseBody> call = service.listChatReadReceipts(chatThreadId, this.getApiVersion());\n+        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {\n+            @Override\n+            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {\n+                if (response.isSuccessful()) {\n+                    if (response.code() == 200) {\n+                        final ReadReceiptsCollection decodedResult;\n+                        try {\n+                            decodedResult = deserializeContent(response.headers(), response.body(), ReadReceiptsCollection.class);\n+                        } catch(Exception ex) {\n+                            callback.onFailure(ex, response.raw());\n+                            return;\n+                        }\n+                        callback.onSuccess(new Page<ReadReceipt>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()), response.raw());\n+                    } else {\n+                        final String strContent = readAsString(response.body());\n+                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());\n+                    }\n+                } else {\n+                    final String strContent = readAsString(response.errorBody());\n+                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());\n+                }\n+            }\n+\n+            @Override\n+            public void onFailure(Call<ResponseBody> call, Throwable t) {\n+                callback.onFailure(t, null);\n+            }\n+        };\n+        call.enqueue(retrofitCallback);\n+    }\n+\n+    private static final class ReadReceiptPageAsyncRetriever extends AsyncPagedDataRetriever<ReadReceipt, Page<ReadReceipt>> {\n+        private final String chatThreadId;\n+\n+        private final AzureCommunicationChatServiceImpl serviceClient;\n+\n+        public ReadReceiptPageAsyncRetriever(String chatThreadId, AzureCommunicationChatServiceImpl serviceClient) {\n+            this.chatThreadId = chatThreadId;\n+            this.serviceClient = serviceClient;\n+        }\n+\n+        public void getFirstPage(Callback<Page<ReadReceipt>> callback) {\n+            serviceClient.listChatReadReceipts(chatThreadId, callback);\n+        }\n+\n+        public void getPage(String pageId, Callback<Page<ReadReceipt>> callback) {\n+            serviceClient.listChatReadReceiptsNext(pageId, callback);\n+        }\n+    }\n+\n+    private static final class ReadReceiptPageResponseRetriever extends PagedDataResponseRetriever<ReadReceipt, Page<ReadReceipt>> {\n+        private final String chatThreadId;\n+\n+        private final AzureCommunicationChatServiceImpl serviceClient;\n+\n+        public ReadReceiptPageResponseRetriever(String chatThreadId, AzureCommunicationChatServiceImpl serviceClient) {\n+            this.chatThreadId = chatThreadId;\n+            this.serviceClient = serviceClient;\n+        }\n+\n+        public Response<Page<ReadReceipt>> getFirstPage() {\n+             return serviceClient.listChatReadReceiptsWithRestResponse(chatThreadId);\n+        }\n+\n+        public Response<Page<ReadReceipt>> getPage(String pageId) {\n+            return serviceClient.listChatReadReceiptsNextWithRestResponse(pageId);\n+        }\n+    }\n+\n+    private static final class ReadReceiptPageRetriever extends PagedDataRetriever<ReadReceipt, Page<ReadReceipt>> {\n+        private final String chatThreadId;\n+\n+        private final AzureCommunicationChatServiceImpl serviceClient;\n+\n+        public ReadReceiptPageRetriever(String chatThreadId, AzureCommunicationChatServiceImpl serviceClient) {\n+            this.chatThreadId = chatThreadId;\n+            this.serviceClient = serviceClient;\n+        }\n+\n+        public Page<ReadReceipt> getFirstPage() {\n+             return serviceClient.listChatReadReceiptsWithRestResponse(chatThreadId).getValue();\n+        }\n+\n+        public Page<ReadReceipt> getPage(String pageId) {\n+            return serviceClient.listChatReadReceiptsNextWithRestResponse(pageId).getValue();\n+        }\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return read receipts for a thread.\n+     */\n+    public Response<Page<ReadReceipt>> listChatReadReceiptsWithRestResponse(String chatThreadId) {\n+        final retrofit2.Response<ResponseBody> response = this.executeRetrofitCall(service.listChatReadReceipts(chatThreadId, this.getApiVersion()));\n+        if (response.isSuccessful()) {\n+            if (response.code() == 200) {\n+                final ReadReceiptsCollection decodedResult;\n+                try {\n+                    decodedResult = this.deserializeContent(response.headers(), response.body(), ReadReceiptsCollection.class);\n+                } catch(Exception ex) {\n+                    final String strContent = this.readAsString(response.body());\n+                    throw new ErrorException(strContent, response.raw());\n+                }\n+                return new Response<>(response.raw().request(),", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MzE5Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498563192", "bodyText": "Agreed. Will improve in the codegen", "author": "JianpingChen", "createdAt": "2020-10-01T23:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzOTc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTQyMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498541423", "bodyText": "I noticed the other (unit) test will be deleted, will we do that for this one as well?", "author": "vcolin7", "createdAt": "2020-10-01T22:22:52Z", "path": "sdk/communication/chat/src/androidTest/java/com/azure/communication/chat/ExampleInstrumentedTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.azure.communication.chat;\n+", "originalCommit": "8396102e0d92f4773206520d9ba9d8ec697c3d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498544985", "bodyText": "deleted now", "author": "JianpingChen", "createdAt": "2020-10-01T22:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTQyMw=="}], "type": "inlineReview"}, {"oid": "b1af3a56e9230ef0ac8a6a4ae982bd333986973d", "url": "https://github.com/Azure/azure-sdk-for-android/commit/b1af3a56e9230ef0ac8a6a4ae982bd333986973d", "message": "Add basic CRUD tests for thread, message, member", "committedDate": "2020-10-01T22:29:41Z", "type": "commit"}, {"oid": "dfa981bb59fd051a1b7a44ac11384d36bdce7b70", "url": "https://github.com/Azure/azure-sdk-for-android/commit/dfa981bb59fd051a1b7a44ac11384d36bdce7b70", "message": "Remove sample test file", "committedDate": "2020-10-01T22:34:13Z", "type": "commit"}, {"oid": "bae6f1cbae4f7b8f4c5d2b5b985f719f7194a76a", "url": "https://github.com/Azure/azure-sdk-for-android/commit/bae6f1cbae4f7b8f4c5d2b5b985f719f7194a76a", "message": "Update sdk/communication/chat/swagger/README.md\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-10-01T22:35:10Z", "type": "commit"}, {"oid": "0303e221e07b317e6ffb52e653946cba826a58ec", "url": "https://github.com/Azure/azure-sdk-for-android/commit/0303e221e07b317e6ffb52e653946cba826a58ec", "message": "Update sdk/communication/chat/build.gradle\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-10-01T22:42:23Z", "type": "commit"}, {"oid": "10bd9ae54c71528c724e6ec0cb0ed660d4ec6c5b", "url": "https://github.com/Azure/azure-sdk-for-android/commit/10bd9ae54c71528c724e6ec0cb0ed660d4ec6c5b", "message": "Fix android manifest for Chat", "committedDate": "2020-10-01T23:46:38Z", "type": "commit"}, {"oid": "dd109f931da51887c416febd34767086c8862fc0", "url": "https://github.com/Azure/azure-sdk-for-android/commit/dd109f931da51887c416febd34767086c8862fc0", "message": "revert a merge error", "committedDate": "2020-10-01T23:58:51Z", "type": "commit"}, {"oid": "288751cabba7103e1880bca876c808976cf10ec5", "url": "https://github.com/Azure/azure-sdk-for-android/commit/288751cabba7103e1880bca876c808976cf10ec5", "message": "revert a mistaken change to root gradle", "committedDate": "2020-10-02T00:04:14Z", "type": "commit"}, {"oid": "13924627028833d4ecea57297e7e7873b51812ce", "url": "https://github.com/Azure/azure-sdk-for-android/commit/13924627028833d4ecea57297e7e7873b51812ce", "message": "revert a mistaken change to root gradle", "committedDate": "2020-10-02T00:06:58Z", "type": "commit"}, {"oid": "c5844d66c34e644a6b501f2a2a574a723b3135f0", "url": "https://github.com/Azure/azure-sdk-for-android/commit/c5844d66c34e644a6b501f2a2a574a723b3135f0", "message": "Add unit tests for different paging collections; remove integration tests since the token will expire", "committedDate": "2020-10-02T16:56:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0OTkxOQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498949919", "bodyText": "It looks like this works but later we can probably look to make these tests more readable without nesting so many callbacks that are declared in place.", "author": "vcolin7", "createdAt": "2020-10-02T17:19:08Z", "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;\n+                asyncPagedDataCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+                    @Override\n+                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {", "originalCommit": "c5844d66c34e644a6b501f2a2a574a723b3135f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTU1Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498951556", "bodyText": "I believe there's a JUnit method that's called fail() for cases like this.", "author": "vcolin7", "createdAt": "2020-10-02T17:22:34Z", "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;\n+                asyncPagedDataCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+                    @Override\n+                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                        assertEquals(5, result.getItems().size());\n+                        mockThreadsResponse(3);\n+                        asyncPagedDataCollection.getPage(result.getNextPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                            @Override\n+                            public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                assertEquals(3, result.getItems().size());\n+\n+                                 asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                                    @Override\n+                                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                        assertEquals(5, result.getItems().size());\n+                                    }\n+\n+                                    @Override\n+                                    public void onFailure(Throwable throwable, Response response) {\n+                                        assertTrue(false);", "originalCommit": "c5844d66c34e644a6b501f2a2a574a723b3135f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MjE1Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498952152", "bodyText": "nit; Indentation's funky here. Nothing major.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {\n          \n          \n            \n                                            asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {", "author": "vcolin7", "createdAt": "2020-10-02T17:23:51Z", "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;\n+                asyncPagedDataCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+                    @Override\n+                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                        assertEquals(5, result.getItems().size());\n+                        mockThreadsResponse(3);\n+                        asyncPagedDataCollection.getPage(result.getNextPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                            @Override\n+                            public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                assertEquals(3, result.getItems().size());\n+\n+                                 asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {", "originalCommit": "c5844d66c34e644a6b501f2a2a574a723b3135f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MjU4Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498952587", "bodyText": "I don't think we need to define this variable if we have result already. We could rename result in the callback declaration to something like pagedCollection.", "author": "vcolin7", "createdAt": "2020-10-02T17:24:46Z", "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;", "originalCommit": "c5844d66c34e644a6b501f2a2a574a723b3135f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1NDM1OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498954359", "bodyText": "Same comment about declaring a new variable based on result.", "author": "vcolin7", "createdAt": "2020-10-02T17:28:24Z", "path": "sdk/communication/chat/src/test/java/com/azure/android/communication/chat/chatAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.util.paging.Page;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.Response;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+public class chatAsyncClientTest {\n+\n+    private static final MockWebServer mockWebServer = new MockWebServer();\n+    private static final String BASE_URL = mockWebServer.url(\"/\").toString();\n+    private static AzureCommunicationChatServiceAsyncClient chatServiceAsyncClient =\n+        new AzureCommunicationChatServiceAsyncClient.Builder()\n+            .serviceClientBuilder(new ServiceClient.Builder().setBaseUrl(BASE_URL))\n+            .build();\n+\n+    @After\n+    public void tearDown() throws InterruptedException {\n+        // For ensuring the responses enqueued are consumed before making the next call.\n+        mockWebServer.takeRequest(20, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Test\n+    public void listThreadPages() {\n+        mockThreadsResponse(5);\n+\n+        chatServiceAsyncClient.listChatThreadsPages(new Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> result, Response response) {\n+                AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> asyncPagedDataCollection = result;\n+                asyncPagedDataCollection.getFirstPage(new Callback<Page<ChatThreadInfo>>() {\n+                    @Override\n+                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                        assertEquals(5, result.getItems().size());\n+                        mockThreadsResponse(3);\n+                        asyncPagedDataCollection.getPage(result.getNextPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                            @Override\n+                            public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                assertEquals(3, result.getItems().size());\n+\n+                                 asyncPagedDataCollection.getPage(result.getPreviousPageId(), new Callback<Page<ChatThreadInfo>>() {\n+                                    @Override\n+                                    public void onSuccess(Page<ChatThreadInfo> result, Response response) {\n+                                        assertEquals(5, result.getItems().size());\n+                                    }\n+\n+                                    @Override\n+                                    public void onFailure(Throwable throwable, Response response) {\n+                                        assertTrue(false);\n+                                    }\n+                                });\n+                            }\n+\n+                            @Override\n+                            public void onFailure(Throwable throwable, Response response) {\n+                                assertTrue(false);\n+                            }\n+                        });\n+                    }\n+\n+                    @Override\n+                    public void onFailure(Throwable throwable, Response response) {\n+                        assertTrue(false);\n+                    }\n+                });\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable throwable, Response response) {\n+                assertTrue(false);\n+            }\n+        }, 5, OffsetDateTime.now());\n+\n+    }\n+\n+    @Test\n+    public void listThreadMessagePages() {\n+        mockMessagesResponse(5);\n+\n+        chatServiceAsyncClient.listChatMessagesPages(\"threadId\", new Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>>() {\n+            @Override\n+            public void onSuccess(AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> result, Response response) {\n+                AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>> asyncPagedDataCollection = result;", "originalCommit": "c5844d66c34e644a6b501f2a2a574a723b3135f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3530f1b0782bbd71cb1f8b242127cf6d129190b8", "url": "https://github.com/Azure/azure-sdk-for-android/commit/3530f1b0782bbd71cb1f8b242127cf6d129190b8", "message": "Rename chat folder to azure-communication-chat; Update swagger README.md to link to swagger; Regenerate with swagger link", "committedDate": "2020-10-02T17:52:05Z", "type": "commit"}, {"oid": "180f46e8cf305095aa0595a1280017d8d70f1f4f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/180f46e8cf305095aa0595a1280017d8d70f1f4f", "message": "Update ci.yml to publish chat sdk", "committedDate": "2020-10-02T18:05:52Z", "type": "commit"}, {"oid": "6cccd63b6b6eb4af70e178dca0c50481ed561dc7", "url": "https://github.com/Azure/azure-sdk-for-android/commit/6cccd63b6b6eb4af70e178dca0c50481ed561dc7", "message": "Minor changes in test code according to review feedback", "committedDate": "2020-10-02T18:15:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODk0Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498988943", "bodyText": "should we manually move the Callback as the last param for now and fix codegen later.", "author": "anuchandy", "createdAt": "2020-10-02T18:37:52Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -0,0 +1,490 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.android.communication.chat;\n+\n+import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n+import com.azure.android.communication.chat.models.AddChatThreadMembersRequest;\n+import com.azure.android.communication.chat.models.ChatMessage;\n+import com.azure.android.communication.chat.models.ChatMessagesCollection;\n+import com.azure.android.communication.chat.models.ChatThread;\n+import com.azure.android.communication.chat.models.ChatThreadInfo;\n+import com.azure.android.communication.chat.models.ChatThreadMember;\n+import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n+import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n+import com.azure.android.communication.chat.models.CreateChatThreadRequest;\n+import com.azure.android.communication.chat.models.ErrorException;\n+import com.azure.android.communication.chat.models.MultiStatusResponse;\n+import com.azure.android.communication.chat.models.ReadReceipt;\n+import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n+import com.azure.android.communication.chat.models.SendChatMessageRequest;\n+import com.azure.android.communication.chat.models.SendChatMessageResult;\n+import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n+import com.azure.android.communication.chat.models.UpdateChatMessageRequest;\n+import com.azure.android.communication.chat.models.UpdateChatThreadRequest;\n+import com.azure.android.core.http.Callback;\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.ServiceClient;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;\n+import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;\n+import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;\n+import com.azure.android.core.util.paging.Page;\n+import com.azure.android.core.util.paging.PagedDataCollection;\n+import com.azure.android.core.util.paging.PagedDataRetriever;\n+import okhttp3.Interceptor;\n+import okhttp3.RequestBody;\n+import okhttp3.ResponseBody;\n+import org.threeten.bp.OffsetDateTime;\n+import retrofit2.Call;\n+import retrofit2.http.Body;\n+import retrofit2.http.DELETE;\n+import retrofit2.http.GET;\n+import retrofit2.http.PATCH;\n+import retrofit2.http.Path;\n+import retrofit2.http.POST;\n+import retrofit2.http.Query;\n+\n+/**\n+ * Initializes a new instance of the asynchronous AzureCommunicationChatService type.\n+ */\n+public final class AzureCommunicationChatServiceAsyncClient {\n+    private AzureCommunicationChatServiceImpl serviceClient;\n+\n+    /**\n+     * Initializes an instance of AzureCommunicationChatService client.\n+     */\n+    AzureCommunicationChatServiceAsyncClient(AzureCommunicationChatServiceImpl serviceClient) {\n+        this.serviceClient = serviceClient;\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n+        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets read receipts for a thread.\n+     * \n+     * @param chatThreadId Thread id to get the read receipts for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Sends a read receipt event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Thread id to send the read receipt event to.\n+     * @param body Request payload for sending a read receipt.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Sends a message to a thread.\n+     * \n+     * @param chatThreadId The thread id to send the message to.\n+     * @param body Details of the message to send.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendChatMessage(String chatThreadId, SendChatMessageRequest body, final Callback<SendChatMessageResult> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n+        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets a list of messages from a thread.\n+     * \n+     * @param chatThreadId The thread id of the message.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of messages to be returned per page.\n+     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatMessagesPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {\n+        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, collectionCallback, maxPageSize, startTime);\n+    }\n+\n+    /**\n+     * Gets a message by id.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {\n+        this.serviceClient.getChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Updates a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param body Details of the request to update the message.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageRequest body, final Callback<Void> callback) {\n+        this.serviceClient.updateChatMessage(chatThreadId, chatMessageId, body, callback);\n+    }\n+\n+    /**\n+     * Deletes a message.\n+     * \n+     * @param chatThreadId The thread id to which the message was sent.\n+     * @param chatMessageId The message id.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {\n+        this.serviceClient.deleteChatMessage(chatThreadId, chatMessageId, callback);\n+    }\n+\n+    /**\n+     * Posts a typing event to a thread, on behalf of a user.\n+     * \n+     * @param chatThreadId Id of the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {\n+        this.serviceClient.sendTypingNotification(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n+        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    }\n+\n+    /**\n+     * Gets the members of a thread.\n+     * \n+     * @param chatThreadId Thread id to get members for.\n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n+        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n+    }\n+\n+    /**\n+     * Adds thread members to a thread. If members already exist, no change occurs.\n+     * \n+     * @param chatThreadId Id of the thread to add members to.\n+     * @param body Thread members to be added to the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersRequest body, final Callback<Void> callback) {\n+        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    }\n+\n+    /**\n+     * Remove a member from a thread.\n+     * \n+     * @param chatThreadId Thread id to remove the member from.\n+     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    }\n+\n+    /**\n+     * Creates a chat thread.\n+     * \n+     * @param body Request payload for creating a chat thread.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void createChatThread(CreateChatThreadRequest body, final Callback<MultiStatusResponse> callback) {\n+        this.serviceClient.createChatThread(body, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param callback the Callback that receives the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n+        this.serviceClient.listChatThreads(callback);\n+    }\n+\n+    /**\n+     * Gets the list of chat threads of a user.\n+     * \n+     * @param collectionCallback the Callback that receives the response collection.\n+     * @param maxPageSize The maximum number of chat threads returned per page.\n+     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ErrorException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    public void listChatThreadsPages(final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback, Integer maxPageSize, OffsetDateTime startTime) {", "originalCommit": "6cccd63b6b6eb4af70e178dca0c50481ed561dc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4OTAzOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r498989038", "bodyText": "same comment for other affected places", "author": "anuchandy", "createdAt": "2020-10-02T18:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNDIxMg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/370#discussion_r499004212", "bodyText": "Done moving callback to end", "author": "JianpingChen", "createdAt": "2020-10-02T19:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODk0Mw=="}], "type": "inlineReview"}, {"oid": "2dd6298de177eff041c91349e7d70b5f6606dcc7", "url": "https://github.com/Azure/azure-sdk-for-android/commit/2dd6298de177eff041c91349e7d70b5f6606dcc7", "message": "Manually fix a codegen issue with parameter sequence", "committedDate": "2020-10-02T19:11:48Z", "type": "commit"}, {"oid": "ca811dd21175b1ef5bbbcb6956b4c4a94aa6eb92", "url": "https://github.com/Azure/azure-sdk-for-android/commit/ca811dd21175b1ef5bbbcb6956b4c4a94aa6eb92", "message": "ACS Chat SDK Readme", "committedDate": "2020-10-02T21:14:47Z", "type": "commit"}, {"oid": "1c739751951371b645255371b9008db8859096a8", "url": "https://github.com/Azure/azure-sdk-for-android/commit/1c739751951371b645255371b9008db8859096a8", "message": "Merge pull request #1 from anuchandy/readme-chat\n\nACS Chat SDK Readme", "committedDate": "2020-10-02T21:21:56Z", "type": "commit"}, {"oid": "50b499f8d153441c69f146a77bab4f2f18c3a9a1", "url": "https://github.com/Azure/azure-sdk-for-android/commit/50b499f8d153441c69f146a77bab4f2f18c3a9a1", "message": "Add change log", "committedDate": "2020-10-02T21:55:32Z", "type": "commit"}, {"oid": "0c573b5db32478fcbf94b2bc951bea8601426d28", "url": "https://github.com/Azure/azure-sdk-for-android/commit/0c573b5db32478fcbf94b2bc951bea8601426d28", "message": "Update changelog for the release", "committedDate": "2020-10-02T22:32:01Z", "type": "commit"}, {"oid": "b8ee94873993ac87ede033159abde15b3038f6dc", "url": "https://github.com/Azure/azure-sdk-for-android/commit/b8ee94873993ac87ede033159abde15b3038f6dc", "message": "Update chat gradle and changelog for correct version", "committedDate": "2020-10-02T22:45:24Z", "type": "commit"}, {"oid": "77224ae47ed6674258a55526e4dd772b1e6336dd", "url": "https://github.com/Azure/azure-sdk-for-android/commit/77224ae47ed6674258a55526e4dd772b1e6336dd", "message": "Apply README review suggestions\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>\nCo-authored-by: Brandon Siegel <96068+bsiegel@users.noreply.github.com>", "committedDate": "2020-10-02T23:13:26Z", "type": "commit"}, {"oid": "c605eb27023610978815d1215d85e002bc0a9065", "url": "https://github.com/Azure/azure-sdk-for-android/commit/c605eb27023610978815d1215d85e002bc0a9065", "message": "Update changelog", "committedDate": "2020-10-02T23:24:30Z", "type": "commit"}, {"oid": "5e729456186922fcab4eba2f1158cbab3694d174", "url": "https://github.com/Azure/azure-sdk-for-android/commit/5e729456186922fcab4eba2f1158cbab3694d174", "message": "Merge branch 'jiach/chatSdk' of https://github.com/JianpingChen/azure-sdk-for-android into jiach/chatSdk", "committedDate": "2020-10-02T23:24:54Z", "type": "commit"}, {"oid": "3156092136752b777ad4af7cd7af8afa3924386e", "url": "https://github.com/Azure/azure-sdk-for-android/commit/3156092136752b777ad4af7cd7af8afa3924386e", "message": "Readme: cleanup", "committedDate": "2020-10-02T23:53:55Z", "type": "commit"}, {"oid": "633db281a391fbef9b463bf0eafea7b634c9e804", "url": "https://github.com/Azure/azure-sdk-for-android/commit/633db281a391fbef9b463bf0eafea7b634c9e804", "message": "Merge pull request #3 from anuchandy/readme-update-3\n\nReadme: cleanup", "committedDate": "2020-10-02T23:56:10Z", "type": "commit"}, {"oid": "b8364424432166930561b2856ae35d14d39520f3", "url": "https://github.com/Azure/azure-sdk-for-android/commit/b8364424432166930561b2856ae35d14d39520f3", "message": "removing locale from readme link", "committedDate": "2020-10-03T00:09:40Z", "type": "commit"}, {"oid": "bae2e3158868d9765c2e0294a466f5eeef25c564", "url": "https://github.com/Azure/azure-sdk-for-android/commit/bae2e3158868d9765c2e0294a466f5eeef25c564", "message": "last touch for the changelog", "committedDate": "2020-10-03T00:38:00Z", "type": "commit"}, {"oid": "43bb7ebf521c6c316a869da37e6871de9cc46d7a", "url": "https://github.com/Azure/azure-sdk-for-android/commit/43bb7ebf521c6c316a869da37e6871de9cc46d7a", "message": "README details and gradle comment should be consistent", "committedDate": "2020-10-03T01:15:34Z", "type": "commit"}, {"oid": "e76cd9b9e017884a443f20302fbc1aafca0215b9", "url": "https://github.com/Azure/azure-sdk-for-android/commit/e76cd9b9e017884a443f20302fbc1aafca0215b9", "message": "README updates according to feedback", "committedDate": "2020-10-03T01:58:34Z", "type": "commit"}]}