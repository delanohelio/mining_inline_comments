{"pr_number": 5371, "pr_title": "feat(client): support push query termination in Java client", "pr_createdAt": "2020-05-15T03:03:32Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5371", "timeline": [{"oid": "52e8a1d9d22542bf321e0cfeefecd23030038067", "url": "https://github.com/confluentinc/ksql/commit/52e8a1d9d22542bf321e0cfeefecd23030038067", "message": "feat(client): support push query termination in Java client", "committedDate": "2020-05-15T03:01:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNzA0MA==", "url": "https://github.com/confluentinc/ksql/pull/5371#discussion_r425637040", "bodyText": "These methods and the one above seem like overkill - I'd probably just put them in the lambda.", "author": "purplefox", "createdAt": "2020-05-15T08:10:28Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -180,6 +205,23 @@ private HttpClientRequest configureBasicAuth(final HttpClientRequest request) {\n     }\n   }\n \n+  private static <T> void handleSuccessfulQueryResponse(\n+      final HttpClientResponse response,\n+      final CompletableFuture<T> cf,\n+      final ResponseHandlerSupplier<T> responseHandlerSupplier) {\n+    final RecordParser recordParser = RecordParser.newDelimited(\"\\n\", response);\n+    final QueryResponseHandler<T> responseHandler =\n+        responseHandlerSupplier.get(Vertx.currentContext(), recordParser, cf);\n+\n+    recordParser.handler(responseHandler::handleBodyBuffer);\n+    recordParser.endHandler(responseHandler::handleBodyEnd);\n+    recordParser.exceptionHandler(responseHandler::handleException);\n+  }\n+\n+  private static void handleSuccessfulCloseQueryResponse(final CompletableFuture<Void> cf) {", "originalCommit": "52e8a1d9d22542bf321e0cfeefecd23030038067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExNTUyOA==", "url": "https://github.com/confluentinc/ksql/pull/5371#discussion_r426115528", "bodyText": "As above, I've refactored this. Hopefully your concerns have been addressed indirectly.", "author": "vcrfxia", "createdAt": "2020-05-16T04:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNzA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzODI5Mw==", "url": "https://github.com/confluentinc/ksql/pull/5371#discussion_r425638293", "bodyText": "Seems odd to pass in both a cf and a Handler to signal back both exceptionally and successful results. Can't the cf do both?", "author": "purplefox", "createdAt": "2020-05-15T08:13:01Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -158,15 +188,10 @@ private HttpClientRequest configureBasicAuth(final HttpClientRequest request) {\n   private static <T> void handleResponse(\n       final HttpClientResponse response,\n       final CompletableFuture<T> cf,", "originalCommit": "52e8a1d9d22542bf321e0cfeefecd23030038067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExNTUwOA==", "url": "https://github.com/confluentinc/ksql/pull/5371#discussion_r426115508", "bodyText": "Refactored this to be less convoluted.", "author": "vcrfxia", "createdAt": "2020-05-16T04:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzODI5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzOTg0Mw==", "url": "https://github.com/confluentinc/ksql/pull/5371#discussion_r425639843", "bodyText": "I don't think you need to pass in successfulResponseHandler here, you can just call cf.thenAccept(this::successfulResponseHandler) (or similar) in this method.", "author": "purplefox", "createdAt": "2020-05-15T08:16:02Z", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -133,22 +139,46 @@ public void close() {\n       final Map<String, Object> properties,\n       final ResponseHandlerSupplier<T> responseHandlerSupplier\n   ) {\n-\n     final JsonObject requestBody = new JsonObject().put(\"sql\", sql).put(\"properties\", properties);\n \n     final CompletableFuture<T> cf = new CompletableFuture<>();\n+    makeRequest(\n+        \"/query-stream\",\n+        requestBody,\n+        cf,\n+        response -> handleSuccessfulQueryResponse(response, cf, responseHandlerSupplier)\n+    );\n+\n+    return cf;\n+  }\n+\n+  private CompletableFuture<Void> makeCloseQueryRequest(final String queryId) {\n+    final CompletableFuture<Void> cf = new CompletableFuture<>();\n+\n+    makeRequest(\n+        \"/close-query\",\n+        new JsonObject().put(\"queryId\", queryId),\n+        cf,\n+        response -> handleSuccessfulCloseQueryResponse(cf)\n+    );\n+\n+    return cf;\n+  }\n \n+  private <T> void makeRequest(\n+      final String path,\n+      final JsonObject requestBody,\n+      final CompletableFuture<T> cf,\n+      final Handler<HttpClientResponse> successfulResponseHandler) {\n     HttpClientRequest request = httpClient.request(HttpMethod.POST,\n         serverSocketAddress, clientOptions.getPort(), clientOptions.getHost(),\n-        \"/query-stream\",\n-        response -> handleResponse(response, cf, responseHandlerSupplier))\n+        path,\n+        response -> handleResponse(response, cf, successfulResponseHandler))", "originalCommit": "52e8a1d9d22542bf321e0cfeefecd23030038067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExNTQ5NA==", "url": "https://github.com/confluentinc/ksql/pull/5371#discussion_r426115494", "bodyText": "Not quite. The CompletableFuture will succeed even if the response status is not 200. The successful response handler is only meant to be called if the response status is 200, else the error handling logic should be called. I realize the way this is currently set up is a bit convoluted, though, so I've refactored it to be more readable.", "author": "vcrfxia", "createdAt": "2020-05-16T04:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzOTg0Mw=="}], "type": "inlineReview"}, {"oid": "8e49c9f876b551f03e633866fd11a17661886496", "url": "https://github.com/confluentinc/ksql/commit/8e49c9f876b551f03e633866fd11a17661886496", "message": "refactor: make ClientImpl more readable", "committedDate": "2020-05-16T04:02:21Z", "type": "commit"}, {"oid": "ceeee5b48a18375b115353c1ef83e93b71e63368", "url": "https://github.com/confluentinc/ksql/commit/ceeee5b48a18375b115353c1ef83e93b71e63368", "message": "Merge branch 'master' into java-client-terminate-query", "committedDate": "2020-05-16T06:47:29Z", "type": "commit"}, {"oid": "ca272a19b286bb82ed9f91a12fa334e859c7e75f", "url": "https://github.com/confluentinc/ksql/commit/ca272a19b286bb82ed9f91a12fa334e859c7e75f", "message": "Merge branch 'master' into java-client-terminate-query", "committedDate": "2020-05-16T19:31:29Z", "type": "commit"}]}