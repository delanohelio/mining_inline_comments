{"pr_number": 4977, "pr_title": "fix: generated aliases for struct field access no longer require quoting", "pr_createdAt": "2020-04-02T10:50:39Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4977", "timeline": [{"oid": "b16b8d5907b2b9be93f46f06c32cc42c432887bd", "url": "https://github.com/confluentinc/ksql/commit/b16b8d5907b2b9be93f46f06c32cc42c432887bd", "message": "fix: generated aliases for struct field access no longer require quoting\n\nfixes: https://github.com/confluentinc/ksql/issues/4911\n\nWith this change there will no longer be the need to quote the column names generated for struct fields, unless the struct field name itself requires quoting. For example:\n\n```sql\nSELECT someStruct->mapOfStructsField['someKey']->arrayOfStructsFields[10]->someField FROM FOO;\n```\n\nPreviously the above would generate a column name that would require quoting to be used: `SOMESTRUCT__MAPOFSTRUCTSFIELD['someKey']__ARRAYOFSTRUCTSFIELD[10]__SOMEFIELD`. It will now generate the name `SOMEFIELD`.\n\nBREAKING CHANGE: This commit changes the system generated column name for any columns in projections that are struct field dereferences. Previously, the full path was used when generating the name, now only the final field name is used. For example, `SELECT someStruct->someField, ...` would previously of generated a column name of `SOMESTRUCT__SOMEFIELD`, and will now generate a name of `SOMEFIELD`. Generated column names may have a numeric appended to the end to ensure uniqueness, for example `SOMEFIELD_2`.\n\nNote: it is recommended that you do not rely on system generated column names for production systems as there naming may change between releases. Providing an explict alias ensures consistent naming across releases. For example, `SELECT someStruct->someField AS someField`.\n\nBackwards compatibility: existing running queries will not be affected by this change: they will continue to run with the same column names. Any statements executed after the upgrade will use the new names where no explicit alias is provided. Add explicit aliases to your statements if you require the old names, for example: `SELECT someStruct->someField AS SOMESTRUCT__SOMEFIELD, ...`", "committedDate": "2020-04-02T10:43:13Z", "type": "commit"}, {"oid": "0af1f411aba82e88d9e166e133fde70ca68f6b63", "url": "https://github.com/confluentinc/ksql/commit/0af1f411aba82e88d9e166e133fde70ca68f6b63", "message": "chore: updated tests", "committedDate": "2020-04-02T10:44:38Z", "type": "commit"}, {"oid": "1e029bee60fcb4a66d08cdd7409a4daeb4e8202c", "url": "https://github.com/confluentinc/ksql/commit/1e029bee60fcb4a66d08cdd7409a4daeb4e8202c", "message": "chore: updated historical plans", "committedDate": "2020-04-02T10:44:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNDU5OQ==", "url": "https://github.com/confluentinc/ksql/pull/4977#discussion_r402224599", "bodyText": "This hasn't been deleted. Git just hasn't picked up the file move...", "author": "big-andy-coates", "createdAt": "2020-04-02T10:54:19Z", "path": "ksqldb-common/src/test/java/io/confluent/ksql/name/ColumnNamesTest.java", "diffHunk": "@@ -1,90 +0,0 @@\n-/*\n- * Copyright 2020 Confluent Inc.\n- *\n- * Licensed under the Confluent Community License (the \"License\"); you may not use\n- * this file except in compliance with the License.  You may obtain a copy of the\n- * License at\n- *\n- * http://www.confluent.io/confluent-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations under the License.\n- */\n-\n-package io.confluent.ksql.name;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThrows;\n-\n-import com.google.common.collect.ImmutableSet;\n-import io.confluent.ksql.name.ColumnNames.AliasGenerator;\n-import io.confluent.ksql.schema.ksql.LogicalSchema;\n-import io.confluent.ksql.schema.ksql.types.SqlTypes;\n-import io.confluent.ksql.util.KsqlException;\n-import java.util.List;\n-import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-import java.util.stream.Stream;\n-import org.junit.Test;\n-\n-public class ColumnNamesTest {", "originalCommit": "1e029bee60fcb4a66d08cdd7409a4daeb4e8202c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxOTk2NQ==", "url": "https://github.com/confluentinc/ksql/pull/4977#discussion_r404219965", "bodyText": "can we have a comment explaining the regex? also instead of relying on ?: and indexed groups we should take advantages of named groups (https://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html#group%28java.lang.String%29)", "author": "agavra", "createdAt": "2020-04-06T16:19:53Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/name/ColumnNames.java", "diffHunk": "@@ -17,28 +17,30 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.confluent.ksql.execution.expression.tree.DereferenceExpression;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n import io.confluent.ksql.schema.ksql.Column;\n import io.confluent.ksql.schema.ksql.LogicalSchema;\n-import io.confluent.ksql.util.KsqlConstants;\n import io.confluent.ksql.util.KsqlException;\n+import java.util.HashMap;\n import java.util.List;\n-import java.util.OptionalInt;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n import java.util.Set;\n-import java.util.function.Supplier;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n public final class ColumnNames {\n \n   private static final String AGGREGATE_COLUMN_PREFIX = \"KSQL_AGG_VARIABLE_\";\n-  private static final String GENERATED_ALIAS_PREFIX = \"KSQL_COL_\";\n+  private static final String GENERATED_ALIAS_PREFIX = \"KSQL_COL\";\n   private static final String SYNTHESISED_COLUMN_PREFIX = \"KSQL_SYNTH_\";\n \n-  private static final Pattern GENERATED_ALIAS_PATTERN = Pattern\n-      .compile(GENERATED_ALIAS_PREFIX + \"(\\\\d+)\");\n+  private static final Pattern NUMBERED_COLUMN_PATTERN = Pattern.compile(\"(.*?)?(?:_(\\\\d+))?\");", "originalCommit": "b16b8d5907b2b9be93f46f06c32cc42c432887bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4ODExOQ==", "url": "https://github.com/confluentinc/ksql/pull/4977#discussion_r404688119", "bodyText": "Your wish....", "author": "big-andy-coates", "createdAt": "2020-04-07T10:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxOTk2NQ=="}], "type": "inlineReview"}, {"oid": "5efe1f3b4b888cb368efb42e61affdddd1e8f8be", "url": "https://github.com/confluentinc/ksql/commit/5efe1f3b4b888cb368efb42e61affdddd1e8f8be", "message": "chore: almog's requested changes", "committedDate": "2020-04-07T10:01:50Z", "type": "commit"}]}