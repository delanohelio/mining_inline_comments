{"pr_number": 5911, "pr_title": "test: fix JoinIntTest by changing generated timestamp for table source", "pr_createdAt": "2020-07-30T17:39:57Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5911", "timeline": [{"oid": "094f751d3719b1c2bcd2b0ed3779ba642b4e6db3", "url": "https://github.com/confluentinc/ksql/commit/094f751d3719b1c2bcd2b0ed3779ba642b4e6db3", "message": "test: fix JoinIntTest by changing generated timestamp for table source", "committedDate": "2020-07-30T17:36:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2ODY1Ng==", "url": "https://github.com/confluentinc/ksql/pull/5911#discussion_r463168656", "bodyText": "Judging by your description, any stream event with timestamp greater than 0 shouldn't be able to join with this, right?\nAre you assuming that once you address the other bug, this should fail?  (That would validate the assertion that the join shouldn't happen with this timestamp)", "author": "AlanConfluent", "createdAt": "2020-07-30T17:49:46Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/integration/JoinIntTest.java", "diffHunk": "@@ -82,8 +85,10 @@ public void before() {\n     TEST_HARNESS.ensureTopics(itemTableTopicJson, itemTableTopicAvro,\n         orderStreamTopicJson, orderStreamTopicAvro);\n \n-    TEST_HARNESS.produceRows(itemTableTopicJson, ITEM_DATA_PROVIDER, JSON, () -> now - 500);\n-    TEST_HARNESS.produceRows(itemTableTopicAvro, ITEM_DATA_PROVIDER, AVRO, () -> now - 500);\n+    // we want the table events to always be present (less than the ts in the stream\n+    // including the time extractor)\n+    TEST_HARNESS.produceRows(itemTableTopicJson, ITEM_DATA_PROVIDER, JSON, () -> 0L);", "originalCommit": "094f751d3719b1c2bcd2b0ed3779ba642b4e6db3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3MTA2Mg==", "url": "https://github.com/confluentinc/ksql/pull/5911#discussion_r463171062", "bodyText": "Judging by your description, any stream event with timestamp greater than 0 shouldn't be able to join with this, right?\n\nI'm not sure I understand - it would logically be the opposite? If the timestamp of the table event is less than the stream event timestamp then it should be able to see the table entry.\n\nAre you assuming that once you address the other bug, this should fail? (That would validate the assertion that the join shouldn't happen with this timestamp)\n\nWhat other bug? I'm not sure there is a bug, something changed in behavior and I'm trying to understand if what changed is a bug or not.", "author": "agavra", "createdAt": "2020-07-30T17:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2ODY1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTk4OQ==", "url": "https://github.com/confluentinc/ksql/pull/5911#discussion_r463175989", "bodyText": "You're right, I got that backward.\nThe other bug I was referring to was this:\n\nThe weird part, is that it works if we set the timestamp to anything less than 9L - meaning that if my stream event has timestamp 1L it can join with a table entry that has timestamp 8L only if there exists an event in the stream that has a timestamp greater than or equal to 8L.\n\nI was mainly pointing out that if this was a bug, it might make sense to set a value that should not work (but does!), so that if this is uncovered in the future, the test will break.  Or maybe that should be its own test.\nJust a thought.", "author": "AlanConfluent", "createdAt": "2020-07-30T18:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2ODY1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3ODg4MQ==", "url": "https://github.com/confluentinc/ksql/pull/5911#discussion_r463178881", "bodyText": "I was mainly pointing out that if this was a bug, it might make sense to set a value that should not work (but does!), so that if this is uncovered in the future, the test will break. Or maybe that should be its own test.\n\nah, got it! yeah that would be a valuable test to add once we understand what's going on.", "author": "agavra", "createdAt": "2020-07-30T18:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2ODY1Ng=="}], "type": "inlineReview"}]}