{"pr_number": 6043, "pr_title": "test: capture key schemas in QTT historic plans", "pr_createdAt": "2020-08-18T05:12:31Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6043", "timeline": [{"oid": "ed540563d235e75388bfcecbc2ed5ebb7dfc91b9", "url": "https://github.com/confluentinc/ksql/commit/ed540563d235e75388bfcecbc2ed5ebb7dfc91b9", "message": "refactor: move PhysicalSchema to common module", "committedDate": "2020-08-18T02:05:04Z", "type": "commit"}, {"oid": "09a77824466dbca8a17ef6c95d2b884b9913646d", "url": "https://github.com/confluentinc/ksql/commit/09a77824466dbca8a17ef6c95d2b884b9913646d", "message": "chore: update QuerySchemas to contain physical schema", "committedDate": "2020-08-18T05:01:56Z", "type": "commit"}, {"oid": "59aecf53ca2c4236464f8872a49c5973222c469d", "url": "https://github.com/confluentinc/ksql/commit/59aecf53ca2c4236464f8872a49c5973222c469d", "message": "chore: fix spec files with malformed names", "committedDate": "2020-08-18T05:01:59Z", "type": "commit"}, {"oid": "ef945bb2ea96dac7a945311ef04d185437ec5b6c", "url": "https://github.com/confluentinc/ksql/commit/ef945bb2ea96dac7a945311ef04d185437ec5b6c", "message": "chore: correct directory naming for historic plans", "committedDate": "2020-08-18T05:01:59Z", "type": "commit"}, {"oid": "82f162405acbe4210cf407ace11245935b73e239", "url": "https://github.com/confluentinc/ksql/commit/82f162405acbe4210cf407ace11245935b73e239", "message": "chore: regenerate specs with new format", "committedDate": "2020-08-18T05:01:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyNDYzNw==", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472024637", "bodyText": "NON_EMPTY would be better, so it's only included in the plan if something is set.  You'll need to change the constructor to take:\n@JsonProperty(\"serdeOptions\") final Optional<Set<SerdeOption>> serdeOptions\nand then default it to an empty set if nothing provided.", "author": "big-andy-coates", "createdAt": "2020-08-18T08:56:22Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/SchemaNode.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.confluent.ksql.serde.PhysicalSchema;\n+import io.confluent.ksql.serde.SerdeOption;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class SchemaNode {\n+\n+  private String logicalSchema;\n+  private Set<SerdeOption> serdeOptions;\n+\n+  public SchemaNode(\n+      @JsonProperty(\"schema\") final String logicalSchema,\n+      @JsonProperty(\"serdeOptions\") final Set<SerdeOption> serdeOptions\n+  ) {\n+    this.logicalSchema = Objects.requireNonNull(logicalSchema, \"logicalSchema\");\n+    this.serdeOptions = Objects.requireNonNull(serdeOptions, \"serdeOptions\");\n+  }\n+\n+  @JsonProperty(\"schema\")\n+  public String getLogicalSchema() {\n+    return logicalSchema;\n+  }\n+\n+  @JsonInclude(JsonInclude.Include.NON_NULL)", "originalCommit": "09a77824466dbca8a17ef6c95d2b884b9913646d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MTkyMQ==", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472141921", "bodyText": "serdeOptions is meant to always be in the serialization, even if the set is empty. Empty set has meaning for verification: it means to verify that the set of serde options in the source is empty. If someone introduces a change in the code that causes one of the sources that previously had no custom serde options to suddenly have one, a QTT should fail.\nThis fits with your suggestion to serialize PhysicalSchema directly rather than introducing SchemaNode, so I'll go with that.", "author": "vcrfxia", "createdAt": "2020-08-18T12:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyNDYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyNTQ1Ng==", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472025456", "bodyText": "There's already a Jackson  serializer and deserializer for LogicalSchema, so you can probably just use LogicalSchema rather than toString it.", "author": "big-andy-coates", "createdAt": "2020-08-18T08:57:42Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/SchemaNode.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.confluent.ksql.serde.PhysicalSchema;\n+import io.confluent.ksql.serde.SerdeOption;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class SchemaNode {\n+\n+  private String logicalSchema;\n+  private Set<SerdeOption> serdeOptions;\n+\n+  public SchemaNode(\n+      @JsonProperty(\"schema\") final String logicalSchema,\n+      @JsonProperty(\"serdeOptions\") final Set<SerdeOption> serdeOptions\n+  ) {\n+    this.logicalSchema = Objects.requireNonNull(logicalSchema, \"logicalSchema\");\n+    this.serdeOptions = Objects.requireNonNull(serdeOptions, \"serdeOptions\");\n+  }\n+\n+  @JsonProperty(\"schema\")\n+  public String getLogicalSchema() {\n+    return logicalSchema;\n+  }\n+\n+  @JsonInclude(JsonInclude.Include.NON_NULL)\n+  public Set<SerdeOption> getSerdeOptions() {\n+    return serdeOptions;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    final SchemaNode that = (SchemaNode) o;\n+    return logicalSchema.equals(that.logicalSchema)\n+        && serdeOptions.equals(that.serdeOptions);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(logicalSchema, serdeOptions);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"SchemaNode{\"\n+            + \"logicalSchema='\" + logicalSchema + '\\''\n+            + \", serdeOptions=\" + serdeOptions\n+            + '}';\n+  }\n+\n+  public static SchemaNode fromPhysicalSchema(final PhysicalSchema physicalSchema) {\n+    return new SchemaNode(\n+        physicalSchema.logicalSchema().toString(),", "originalCommit": "09a77824466dbca8a17ef6c95d2b884b9913646d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyNzE4MQ==", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472027181", "bodyText": "Rather than converting the the PhysicalSchema into a SchemaNode, would it not be better to convert the SchemaNode into the PhysicalSchema and then compare?  I guess it doesn't make much difference, just feels more type safe...\ne.g. if someone came along and added a new field to PhysicalSchema, then the comparison would still pass if comparing strings, but would fail if comparing PhysicalSchemas.\nSchemaNode is basically only there to serialize the parts of PhysicalSchema.  So, I'd suggest writing a Jackson serializer and deserializer for PhysicalSchema, and dropping SchemaNode.  Worth thinking about anyway.  Take a look at LogicalSchemaSerializer and LogicalSchemaDeserializer for examples of how this is done if you've not done it before.", "author": "big-andy-coates", "createdAt": "2020-08-18T09:00:30Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestExecutor.java", "diffHunk": "@@ -302,15 +305,23 @@ private static void verifyTopology(final TestCase testCase) {\n               + \"THIS IS BAD!\",\n           actualTopology, is(expectedTopology));\n \n-      final Map<String, String> generated = testCase.getGeneratedSchemas();\n-      for (final Map.Entry<String, String> e : expected.getSchemas().entrySet()) {\n+      final Map<String, SchemaNode> generatedSchemas =\n+          testCase.getGeneratedSchemas().entrySet().stream()\n+              .collect(Collectors.toMap(\n+                  Entry::getKey,\n+                  e -> SchemaNode.fromPhysicalSchema(e.getValue())));\n+      for (final Map.Entry<String, SchemaNode> e : expected.getSchemas().entrySet()) {", "originalCommit": "09a77824466dbca8a17ef6c95d2b884b9913646d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NDg1OA==", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472144858", "bodyText": "Sounds good, I'll drop SchemaNode in favor of PhysicalSchema. I didn't do that initially since I didn't want to add Jackson annotations to PhysicalSchema, but your suggestion of introducing separate serializers and deserializers works around that. Thanks!", "author": "vcrfxia", "createdAt": "2020-08-18T12:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyNzE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMDgwOQ==", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472030809", "bodyText": "Can you move this back to the io.confluent.ksql.schema.ksql package please?", "author": "big-andy-coates", "createdAt": "2020-08-18T09:06:24Z", "path": "ksqldb-api-client/src/test/java/io/confluent/ksql/api/client/integration/ClientIntegrationTest.java", "diffHunk": "@@ -64,7 +64,7 @@\n import io.confluent.ksql.rest.integration.RestIntegrationTestUtil;\n import io.confluent.ksql.rest.server.TestKsqlRestApp;\n import io.confluent.ksql.schema.ksql.LogicalSchema;\n-import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.PhysicalSchema;", "originalCommit": "82f162405acbe4210cf407ace11245935b73e239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NTI1OQ==", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472145259", "bodyText": "You mean leave PhysicalSchema in ksqldb-common but keep the old package? That makes sense, will do.", "author": "vcrfxia", "createdAt": "2020-08-18T12:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMDgwOQ=="}], "type": "inlineReview"}, {"oid": "a2dea35209b25de93b18b58a7dfbd9069d6ab1bc", "url": "https://github.com/confluentinc/ksql/commit/a2dea35209b25de93b18b58a7dfbd9069d6ab1bc", "message": "refactor: update PhysicalSchema package", "committedDate": "2020-08-18T16:23:22Z", "type": "commit"}, {"oid": "147c16e03465f01ef39413ac1bd80335297947e8", "url": "https://github.com/confluentinc/ksql/commit/147c16e03465f01ef39413ac1bd80335297947e8", "message": "test: update test specs to new format", "committedDate": "2020-08-18T19:11:42Z", "type": "commit"}, {"oid": "ce78d49bfef129c51f31d0d89a779cc2b281ca6d", "url": "https://github.com/confluentinc/ksql/commit/ce78d49bfef129c51f31d0d89a779cc2b281ca6d", "message": "Merge branch 'master' into qtt-key-schema-2", "committedDate": "2020-08-19T14:19:00Z", "type": "commit"}, {"oid": "ead537bc3e8f4e584677d88354db9aed367d0abf", "url": "https://github.com/confluentinc/ksql/commit/ead537bc3e8f4e584677d88354db9aed367d0abf", "message": "chore: update another QTT to new format", "committedDate": "2020-08-19T14:45:30Z", "type": "commit"}, {"oid": "ead537bc3e8f4e584677d88354db9aed367d0abf", "url": "https://github.com/confluentinc/ksql/commit/ead537bc3e8f4e584677d88354db9aed367d0abf", "message": "chore: update another QTT to new format", "committedDate": "2020-08-19T14:45:30Z", "type": "forcePushed"}]}