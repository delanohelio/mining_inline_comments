{"pr_number": 4594, "pr_title": "chore: support PROTOBUF for PRINT TOPIC", "pr_createdAt": "2020-02-19T18:38:04Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4594", "timeline": [{"oid": "b48ec0ed0d518649ab121728fbfe35994c31a6df", "url": "https://github.com/confluentinc/ksql/commit/b48ec0ed0d518649ab121728fbfe35994c31a6df", "message": "chore: support PROTOBUF for PRINT TOPIC", "committedDate": "2020-02-21T19:02:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4MzM0Mw==", "url": "https://github.com/confluentinc/ksql/pull/4594#discussion_r381983343", "bodyText": "nit: generally avoid logging and throwing - it's an anti-pattern.  Why isn't it sufficient just to throw here? Does the calling code not log it?", "author": "big-andy-coates", "createdAt": "2020-02-20T13:01:09Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java", "diffHunk": "@@ -453,6 +456,7 @@ private static SqlType columnType(final ColumnName column, final LogicalSchema s\n         }\n       }\n \n+      LOG.error(\"Could not serialize row.\", e);", "originalCommit": "b0ee3473c66aaf3e4e28af447fa06663e948feb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NzMwNg==", "url": "https://github.com/confluentinc/ksql/pull/4594#discussion_r383987306", "bodyText": "the calling code doesn't log it - it gets returned to the user in the CLI as \"could not serialize row\" but it doesn't give the full trace. This has bit me several times so I'd rather keep it here as at some point we should log it (we can debate where, I don't care that much)", "author": "agavra", "createdAt": "2020-02-25T16:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4MzM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNDkyNg==", "url": "https://github.com/confluentinc/ksql/pull/4594#discussion_r383914926", "bodyText": "This call to format seems completely superfluous.  This method now calls deserialize on the deserializer and then immediately passes the result back  to format on the same deserializer.  Why not just have deserialize return the formatted result?\nIn the case of the new protobuf format, all we need to do is pass a factory method to the constructor of the PROTOBUF enum that wraps the KafkaProtobufDeserializer instance in one that applies the format, in a similar way to newJsonDeserializer.\n   private static Deserializer<?> newProtobufDeserializer(final SchemaRegistryClient srClient) {\n\n    final Printer printer = TextFormat.printer();\n    final KafkaProtobufDeserializer<?> inner = new KafkaProtobufDeserializer<>(srClient);\n    \n    return (Deserializer<Object>) (topic, data) -> {\n      final Message msg = inner.deserialize(topic, data);\n      if (msg == null) {\n        return null;\n      }\n      \n      return printer.shortDebugString(msg);\n    };\n  }\n\n...\n\n enum Format {\n    AVRO(0, KafkaAvroDeserializer::new),\n    PROTOBUF(0, RecordFormatter::newAvroDeserializer),\n    JSON(RecordFormatter::newJsonDeserializer),\n ...\n } \nThis avoids the need to complicate the code with another function call on all deserializers...", "author": "big-andy-coates", "createdAt": "2020-02-25T14:33:04Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/RecordFormatter.java", "diffHunk": "@@ -248,7 +251,7 @@ String format(final Bytes bytes) {\n     ) {\n       try {\n         final Object result = deserializer.deserializer.deserialize(topicName, bytes.get());\n-        return Optional.of(result == null ? \"<null>\" : result.toString());\n+        return Optional.of(result == null ? \"<null>\" : deserializer.format(result));", "originalCommit": "b48ec0ed0d518649ab121728fbfe35994c31a6df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNTc2OQ==", "url": "https://github.com/confluentinc/ksql/pull/4594#discussion_r383915769", "bodyText": "Off-topic, but just wanted to check you have it on your radar to split out a SR_JSON out of the JSON format?", "author": "big-andy-coates", "createdAt": "2020-02-25T14:34:33Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/RecordFormatter.java", "diffHunk": "@@ -257,39 +260,59 @@ String format(final Bytes bytes) {\n \n   enum WindowSchema {\n \n-    SESSION(SessionWindowedDeserializer::new),\n+    SESSION(WindowSchema::newSessionWindowedDeserializer),\n     HOPPING(WindowSchema::newTimeWindowedDeserializer),\n     TUMBLING(WindowSchema::newTimeWindowedDeserializer);\n \n-    private final Function<Deserializer<?>, Deserializer<?>> mapper;\n+    private final Function<NamedDeserializer, Deserializer<?>> mapper;\n \n-    WindowSchema(final Function<Deserializer<?>, Deserializer<?>> mapper) {\n+    WindowSchema(final Function<NamedDeserializer, Deserializer<?>> mapper) {\n       this.mapper = requireNonNull(mapper, \"mapper\");\n     }\n \n     public NamedDeserializer wrap(final NamedDeserializer inner) {\n \n       final String name = name() + \"(\" + inner.name + \")\";\n \n-      final Deserializer<?> deserializer = mapper.apply(inner.deserializer);\n+      final Deserializer<?> deserializer = mapper.apply(inner);\n \n-      return new NamedDeserializer(name, inner.doNotWrap, deserializer);\n+      return new NamedDeserializer(name, inner.doNotWrap, deserializer, inner::format);\n     }\n \n-    private static Deserializer<?> newTimeWindowedDeserializer(final Deserializer<?> inner) {\n-      final TimeWindowedDeserializer<?> windowedDeser = new TimeWindowedDeserializer<>(inner);\n+    private static Deserializer<?> newSessionWindowedDeserializer(\n+        final NamedDeserializer inner\n+    ) {\n+      final SessionWindowedDeserializer<?> sessionDeser\n+          = new SessionWindowedDeserializer<>(inner.deserializer);\n+\n+      return (topic, data) -> {\n+        final Windowed<?> windowed = sessionDeser.deserialize(topic, data);\n+        return \"[\" + inner.format(windowed.key())\n+            + \"@\" + windowed.window().start() + \"/\" + windowed.window().end() + \"]\";\n+      };\n+    }\n+\n+    private static Deserializer<?> newTimeWindowedDeserializer(\n+        final NamedDeserializer inner\n+    ) {\n+      final TimeWindowedDeserializer<?> windowedDeser\n+          = new TimeWindowedDeserializer<>(inner.deserializer);\n \n       return (topic, data) -> {\n         final Windowed<?> windowed = windowedDeser.deserialize(topic, data);\n \n         // Exclude window end time for time-windowed as the end time is not in the serialized data:\n-        return \"[\" + windowed.key() + \"@\" + windowed.window().start() + \"/-]\";\n+        return \"[\" + inner.format(windowed.key()) + \"@\" + windowed.window().start() + \"/-]\";\n       };\n     }\n   }\n \n   enum Format {\n-    AVRO(0, KafkaAvroDeserializer::new),\n+    AVRO(0, KafkaAvroDeserializer::new, Object::toString),\n+    PROTOBUF(\n+        0,\n+        KafkaProtobufDeserializer::new,\n+            o -> TextFormat.printer().shortDebugString((Message) o)),", "originalCommit": "b48ec0ed0d518649ab121728fbfe35994c31a6df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNDU5OA==", "url": "https://github.com/confluentinc/ksql/pull/4594#discussion_r383924598", "bodyText": "Found it: #4596", "author": "big-andy-coates", "createdAt": "2020-02-25T14:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNTc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNjE0Mg==", "url": "https://github.com/confluentinc/ksql/pull/4594#discussion_r383916142", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldNotExcludeAvroOnValidProtobuf() {\n          \n          \n            \n                public void shouldNotExcludeProtobufOnValidProtobuf() {", "author": "big-andy-coates", "createdAt": "2020-02-25T14:35:10Z", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/RecordFormatterTest.java", "diffHunk": "@@ -526,6 +547,95 @@ public void shouldFormatValidSessionWindowedAvro() {\n       assertThat(formatted, is(\"[{\\\"str1\\\": \\\"My first string\\\"}@1534567890123/1534567899999]\"));\n     }\n \n+    @Test\n+    public void shouldExcludeProtobufNoSchema() {\n+      // Given:\n+      // not: givenProtoSchemaRegistered();\n+\n+      // When:\n+      deserializers.format(SERIALIZED_PROTOBUF_RECORD);\n+\n+      // Then:\n+      assertThat(deserializers.getPossibleFormats(), not(hasItem(\"PROTOBUF\")));\n+    }\n+\n+    @Test\n+    public void shouldNotExcludeAvroOnValidProtobuf() {", "originalCommit": "b48ec0ed0d518649ab121728fbfe35994c31a6df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNjM5NQ==", "url": "https://github.com/confluentinc/ksql/pull/4594#discussion_r383916395", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldNotExcludeTimeWindowedProtobufOnValidTimeWindowedAvro() {\n          \n          \n            \n                public void shouldNotExcludeTimeWindowedProtobufOnValidTimeWindowedProtobuf() {", "author": "big-andy-coates", "createdAt": "2020-02-25T14:35:36Z", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/RecordFormatterTest.java", "diffHunk": "@@ -526,6 +547,95 @@ public void shouldFormatValidSessionWindowedAvro() {\n       assertThat(formatted, is(\"[{\\\"str1\\\": \\\"My first string\\\"}@1534567890123/1534567899999]\"));\n     }\n \n+    @Test\n+    public void shouldExcludeProtobufNoSchema() {\n+      // Given:\n+      // not: givenProtoSchemaRegistered();\n+\n+      // When:\n+      deserializers.format(SERIALIZED_PROTOBUF_RECORD);\n+\n+      // Then:\n+      assertThat(deserializers.getPossibleFormats(), not(hasItem(\"PROTOBUF\")));\n+    }\n+\n+    @Test\n+    public void shouldNotExcludeAvroOnValidProtobuf() {\n+      // Given:\n+      givenProtoSchemaRegistered();\n+\n+      // When:\n+      deserializers.format(SERIALIZED_PROTOBUF_RECORD);\n+\n+      // Then:\n+      assertThat(deserializers.getPossibleFormats(), hasItems(\n+          \"PROTOBUF\"\n+      ));\n+    }\n+\n+    @Test\n+    public void shouldFormatValidProtobuf() {\n+      // Given:\n+      givenProtoSchemaRegistered();\n+\n+      // When:\n+      final String formatted = deserializers.format(SERIALIZED_PROTOBUF_RECORD);\n+\n+      // Then:\n+      assertThat(formatted, is(\"str1: \\\"My first string\\\" str2: \\\"My second string\\\"\"));\n+    }\n+\n+    @Test\n+    public void shouldNotExcludeTimeWindowedProtobufOnValidTimeWindowedAvro() {", "originalCommit": "b48ec0ed0d518649ab121728fbfe35994c31a6df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxNjU0OQ==", "url": "https://github.com/confluentinc/ksql/pull/4594#discussion_r383916549", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldNotExcludeSessionWindowedProtobufOnValidTimeWindowedAvro() {\n          \n          \n            \n                public void shouldNotExcludeSessionWindowedProtobufOnValidTimeWindowedProtobuf() {", "author": "big-andy-coates", "createdAt": "2020-02-25T14:35:50Z", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/RecordFormatterTest.java", "diffHunk": "@@ -526,6 +547,95 @@ public void shouldFormatValidSessionWindowedAvro() {\n       assertThat(formatted, is(\"[{\\\"str1\\\": \\\"My first string\\\"}@1534567890123/1534567899999]\"));\n     }\n \n+    @Test\n+    public void shouldExcludeProtobufNoSchema() {\n+      // Given:\n+      // not: givenProtoSchemaRegistered();\n+\n+      // When:\n+      deserializers.format(SERIALIZED_PROTOBUF_RECORD);\n+\n+      // Then:\n+      assertThat(deserializers.getPossibleFormats(), not(hasItem(\"PROTOBUF\")));\n+    }\n+\n+    @Test\n+    public void shouldNotExcludeAvroOnValidProtobuf() {\n+      // Given:\n+      givenProtoSchemaRegistered();\n+\n+      // When:\n+      deserializers.format(SERIALIZED_PROTOBUF_RECORD);\n+\n+      // Then:\n+      assertThat(deserializers.getPossibleFormats(), hasItems(\n+          \"PROTOBUF\"\n+      ));\n+    }\n+\n+    @Test\n+    public void shouldFormatValidProtobuf() {\n+      // Given:\n+      givenProtoSchemaRegistered();\n+\n+      // When:\n+      final String formatted = deserializers.format(SERIALIZED_PROTOBUF_RECORD);\n+\n+      // Then:\n+      assertThat(formatted, is(\"str1: \\\"My first string\\\" str2: \\\"My second string\\\"\"));\n+    }\n+\n+    @Test\n+    public void shouldNotExcludeTimeWindowedProtobufOnValidTimeWindowedAvro() {\n+      // Given:\n+      givenProtoSchemaRegistered();\n+\n+      // When:\n+      deserializers.format(SERIALIZED_TIME_WINDOWED_PROTOBUF_RECORD);\n+\n+      // Then:\n+      assertThat(deserializers.getPossibleFormats(), hasItems(\n+          \"TUMBLING(PROTOBUF)\", \"HOPPING(PROTOBUF)\"\n+      ));\n+    }\n+\n+    @Test\n+    public void shouldFormatValidTimeWindowedProtobuf() {\n+      // Given:\n+      givenProtoSchemaRegistered();\n+\n+      // When:\n+      final String formatted = deserializers.format(SERIALIZED_TIME_WINDOWED_PROTOBUF_RECORD);\n+\n+      assertThat(formatted, is(\"[str1: \\\"My first string\\\" str2: \\\"My second string\\\"@1234567890123/-]\"));\n+    }\n+\n+    @Test\n+    public void shouldNotExcludeSessionWindowedProtobufOnValidTimeWindowedAvro() {", "originalCommit": "b48ec0ed0d518649ab121728fbfe35994c31a6df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "254cc9bcefa576cc21ec99ccc497dc58b29184ce", "url": "https://github.com/confluentinc/ksql/commit/254cc9bcefa576cc21ec99ccc497dc58b29184ce", "message": "chore: support PROTOBUF for PRINT TOPIC", "committedDate": "2020-02-25T17:34:02Z", "type": "commit"}, {"oid": "1f2dc7a95ccc0dd65deb5c22de605977c3a73a4e", "url": "https://github.com/confluentinc/ksql/commit/1f2dc7a95ccc0dd65deb5c22de605977c3a73a4e", "message": "fix: andys comments", "committedDate": "2020-02-25T17:45:42Z", "type": "commit"}, {"oid": "1f2dc7a95ccc0dd65deb5c22de605977c3a73a4e", "url": "https://github.com/confluentinc/ksql/commit/1f2dc7a95ccc0dd65deb5c22de605977c3a73a4e", "message": "fix: andys comments", "committedDate": "2020-02-25T17:45:42Z", "type": "forcePushed"}]}