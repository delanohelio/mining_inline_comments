{"pr_number": 6051, "pr_title": "feat: introduce the sql-based testing tool (YATT)", "pr_createdAt": "2020-08-19T18:15:39Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6051", "timeline": [{"oid": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc", "url": "https://github.com/confluentinc/ksql/commit/fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc", "message": "feat: introduce yet-another-testing-tool (YATT)", "committedDate": "2020-08-19T18:10:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzMTI3MQ==", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473231271", "bodyText": "removed this because it's not super easy to implement cleanly given the iterative nature of the tests. since the sql file supports multiline comments, it's easy enough to disable a test like this:\n/* (disabled)\n--@test: foo bar\nCREATE STREAM foo...;\nINSERT INTO ...;\nASSERT VALUES ...;\n*/", "author": "agavra", "createdAt": "2020-08-19T18:17:10Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/TestDirective.java", "diffHunk": "@@ -79,21 +83,13 @@ public int hashCode() {\n \n   @Override\n   public String toString() {\n-    return \"TestDirective{\"\n-        + \"type=\" + type\n-        + \", contents='\" + contents + '\\''\n-        + '}';\n-  }\n-\n-  public NodeLocation getLocation() {\n-    return location;\n+    return \"--@\" + type.getTypeName() + \": \" + contents;\n   }\n \n   public enum Type {\n     TEST(\"test\"),\n     EXPECTED_ERROR(\"expected.error\"),\n     EXPECTED_MESSAGE(\"expected.message\"),\n-    ENABLED(\"enabled\"),", "originalCommit": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzMTY2NA==", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473231664", "bodyText": "I'll implement these in a future PR since to do it \"right\" involves some engine refactoring to leverage what we already have in production code", "author": "agavra", "createdAt": "2020-08-19T18:17:57Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/driver/AssertExecutor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.driver;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.KsqlExecutionContext;\n+import io.confluent.ksql.engine.generic.GenericRecordFactory;\n+import io.confluent.ksql.engine.generic.KsqlGenericRecord;\n+import io.confluent.ksql.metastore.model.DataSource;\n+import io.confluent.ksql.parser.AssertTable;\n+import io.confluent.ksql.parser.tree.AssertStream;\n+import io.confluent.ksql.parser.tree.AssertValues;\n+import io.confluent.ksql.parser.tree.InsertValues;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Iterator;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.test.TestRecord;\n+\n+/**\n+ * {@code AssertExecutor} handles the assertion statements for the Sql-based\n+ * testing tool.\n+ */\n+public final class AssertExecutor {\n+\n+  private AssertExecutor() {\n+  }\n+\n+  public static void assertValues(\n+      final KsqlExecutionContext engine,\n+      final KsqlConfig config,\n+      final AssertValues assertValues,\n+      final TestDriverPipeline driverPipeline\n+  ) {\n+    final InsertValues values = assertValues.getStatement();\n+    final boolean compareTimestamp = values\n+        .getColumns()\n+        .stream()\n+        .anyMatch(SystemColumns.ROWTIME_NAME::equals);\n+\n+    final DataSource dataSource = engine.getMetaStore().getSource(values.getTarget());\n+    final KsqlGenericRecord expected = new GenericRecordFactory(\n+        config, engine.getMetaStore(), System::currentTimeMillis\n+    ).build(\n+        values.getColumns(),\n+        values.getValues(),\n+        dataSource.getSchema(),\n+        dataSource.getDataSourceType()\n+    );\n+\n+    final Iterator<TestRecord<Struct, GenericRow>> records = driverPipeline\n+        .getRecordsForTopic(dataSource.getKafkaTopicName());\n+    if (!records.hasNext()) {\n+      throw new KsqlException(\n+          String.format(\n+              \"Expected another record (%s) for %s but already read all records: %s\",\n+              expected,\n+              dataSource.getName(),\n+              driverPipeline.getAllRecordsForTopic(dataSource.getKafkaTopicName())\n+          )\n+      );\n+    }\n+\n+    final TestRecord<Struct, GenericRow> actualTestRecord = records.next();\n+    final KsqlGenericRecord actual = KsqlGenericRecord.of(\n+        actualTestRecord.key(),\n+        actualTestRecord.value(),\n+        compareTimestamp ? actualTestRecord.timestamp() : expected.ts\n+    );\n+\n+    if (!actual.equals(expected)) {\n+      throw new KsqlException(\n+          String.format(\n+              \"Expected record does not match actual. Expected: %s vs. Actual: %s\",\n+              expected,\n+              actual\n+          )\n+      );\n+    }\n+  }\n+\n+  public static void assertStream(final AssertStream assertStatement) {", "originalCommit": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNjAzNQ==", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473236035", "bodyText": "I'm currently refactoring this to use TestLoader", "author": "agavra", "createdAt": "2020-08-19T18:26:12Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/SqlTestLoader.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.parser;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.test.KsqlTestException;\n+import io.confluent.ksql.test.parser.TestDirective.Type;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The {@code SqlTestLoader} loads the test files that should be run\n+ * by the Ksql testing tool based on a path and optional filters.\n+ */\n+public class SqlTestLoader {", "originalCommit": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "216d8640707cf0ed3e2c08881531730f4507d8c8", "url": "https://github.com/confluentinc/ksql/commit/216d8640707cf0ed3e2c08881531730f4507d8c8", "message": "refactor: use TestLoader", "committedDate": "2020-08-19T18:36:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NjQ2OA==", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473256468", "bodyText": "How would the shouldRun be used? Will there be tests in a test file that one can indicate that they should be skipped? If so, should we add an example to test.sql?", "author": "vpapavas", "createdAt": "2020-08-19T19:04:59Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/SqlTestLoader.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.parser;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.test.KsqlTestException;\n+import io.confluent.ksql.test.loader.TestLoader;\n+import io.confluent.ksql.test.model.TestLocation;\n+import io.confluent.ksql.test.parser.SqlTestLoader.SqlTest;\n+import io.confluent.ksql.test.parser.TestDirective.Type;\n+import io.confluent.ksql.test.tools.Test;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@code SqlTestLoader} loads the test files that should be run\n+ * by the Ksql testing tool based on a path and optional filters.\n+ */\n+public class SqlTestLoader implements TestLoader<SqlTest> {\n+\n+  private final Predicate<SqlTest> shouldRun;\n+  private final Path path;\n+\n+  public SqlTestLoader(final Path path) {\n+    this(t -> true, path);\n+  }\n+\n+  /**\n+   * @param testFilter filters out which tests to run\n+   * @param path       the top-level dir to load\n+   */\n+  public SqlTestLoader(final Predicate<SqlTest> testFilter, final Path path) {\n+    this.shouldRun = Objects.requireNonNull(testFilter, \"testFilter\");", "originalCommit": "216d8640707cf0ed3e2c08881531730f4507d8c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODIwOA==", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473258208", "bodyText": "the idea was to use shouldRun to filter tests to run or not run based on some regex exp. I wasn't going to implement it in this PR quite yet but I figured I might as well set it up here", "author": "agavra", "createdAt": "2020-08-19T19:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NjQ2OA=="}], "type": "inlineReview"}, {"oid": "96abb8c59f8f9a4d6c8f208659f783bc2d2afd97", "url": "https://github.com/confluentinc/ksql/commit/96abb8c59f8f9a4d6c8f208659f783bc2d2afd97", "message": "chore: fix findbugs", "committedDate": "2020-08-19T19:50:28Z", "type": "commit"}, {"oid": "1a16081468fac86ad36891ffd253b6088cc690ea", "url": "https://github.com/confluentinc/ksql/commit/1a16081468fac86ad36891ffd253b6088cc690ea", "message": "chore: actually fix findbugs", "committedDate": "2020-08-19T19:51:11Z", "type": "commit"}]}