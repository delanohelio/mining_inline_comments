{"pr_number": 5134, "pr_title": "refactor: Remove jetty", "pr_createdAt": "2020-04-21T20:15:32Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5134", "timeline": [{"oid": "b86bda59a637400c71f6470b534f419735c93b21", "url": "https://github.com/confluentinc/ksql/commit/b86bda59a637400c71f6470b534f419735c93b21", "message": "Remove Jetty and final bits of jax rs", "committedDate": "2020-04-22T07:53:03Z", "type": "forcePushed"}, {"oid": "0f61404dc77e0860dcd5fc13a8ce8a310bf9ee37", "url": "https://github.com/confluentinc/ksql/commit/0f61404dc77e0860dcd5fc13a8ce8a310bf9ee37", "message": "Remove Jetty and final bits of jax rs", "committedDate": "2020-04-22T10:35:30Z", "type": "forcePushed"}, {"oid": "3c18a6724a27a8d7bd7f407a6f0f49695ac608bf", "url": "https://github.com/confluentinc/ksql/commit/3c18a6724a27a8d7bd7f407a6f0f49695ac608bf", "message": "Remove Jetty and final bits of jax rs", "committedDate": "2020-04-22T11:56:35Z", "type": "forcePushed"}, {"oid": "203525bd7072185460d4827095a035b0dfc76e8f", "url": "https://github.com/confluentinc/ksql/commit/203525bd7072185460d4827095a035b0dfc76e8f", "message": "Remove Jetty and final bits of jax rs", "committedDate": "2020-04-22T18:59:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0Nzg5NA==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413547894", "bodyText": "This should not be removed. LoginModules use ObjectCallback for the password. Some fallback to PasswordCallback for old CallbackHandlers that don't support ObjectCallback but newer versions of some LoginModules don't fall back to PasswordCallback (e.g., link), so removing this breaks support.\nLet's also add support for ObjectCallback back in the unit tests in BasicCallbackHandlerTest.java.\nFeel free to add a comment into the code here so others looking at the code aren't similarly confused and tempted to remove ObjectCallback support?", "author": "vcrfxia", "createdAt": "2020-04-23T06:38:46Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/BasicCallbackHandler.java", "diffHunk": "@@ -44,13 +43,10 @@ public void handle(final Callback[] callbacks)\n       throws IOException, UnsupportedCallbackException {\n     for (final Callback callback : callbacks) {\n       if (callback instanceof NameCallback) {\n-        final NameCallback nc = (NameCallback)callback;\n+        final NameCallback nc = (NameCallback) callback;\n         nc.setName(username);\n-      } else if (callback instanceof ObjectCallback) {", "originalCommit": "203525bd7072185460d4827095a035b0dfc76e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2MjMzMA==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413562330", "bodyText": "We can't add ObjectCallback as it's not a standard callback - it's a jetty extension", "author": "purplefox", "createdAt": "2020-04-23T07:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0Nzg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3MjQwNg==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413572406", "bodyText": "Let's chat about this later - I'd rather not have an explicit dependency to Jetty in the code (I think it's ok to bundle jetty-jaas so users can use login modules though)", "author": "purplefox", "createdAt": "2020-04-23T07:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0Nzg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0ODE5Mg==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413548192", "bodyText": "Can we add a log message if this happens? At least a warning, maybe even an error.", "author": "vcrfxia", "createdAt": "2020-04-23T06:39:30Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/BasicCallbackHandler.java", "diffHunk": "@@ -68,7 +64,8 @@ public void handle(final Callback[] callbacks)\n             throw new IOException(\"Unsupported message type: \" + toc.getMessageType());\n         }\n       } else {\n-        throw new UnsupportedCallbackException(callback);\n+        // We ignore unknown callback types - e.g. Jetty implementation might pass us Jetty specific", "originalCommit": "203525bd7072185460d4827095a035b0dfc76e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3MjU2Ng==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413572566", "bodyText": "Let's chat later", "author": "purplefox", "createdAt": "2020-04-23T07:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0ODE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0OTA0OQ==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413549049", "bodyText": "We don't actually support this, right? I think it can be removed (and from the validator and doc string too).", "author": "vcrfxia", "createdAt": "2020-04-23T06:41:10Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -21,26 +21,101 @@\n import io.confluent.ksql.rest.ErrorMessages;\n import io.confluent.ksql.util.KsqlException;\n import io.confluent.ksql.util.KsqlServerException;\n-import io.confluent.rest.RestConfig;\n import java.net.InetAddress;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.UnknownHostException;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.function.Function;\n+import org.apache.kafka.common.config.AbstractConfig;\n import org.apache.kafka.common.config.ConfigDef;\n import org.apache.kafka.common.config.ConfigDef.Importance;\n import org.apache.kafka.common.config.ConfigDef.Type;\n+import org.apache.kafka.common.config.ConfigDef.ValidString;\n import org.apache.kafka.common.config.ConfigException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class KsqlRestConfig extends RestConfig {\n+public class KsqlRestConfig extends AbstractConfig {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(KsqlRestConfig.class);\n \n+  public static final String LISTENERS_CONFIG = \"listeners\";\n+  protected static final String LISTENERS_DOC =\n+      \"List of listeners. http and https are supported. Each listener must include the protocol, \"\n+          + \"hostname, and port. For example: http://myhost:8080, https://0.0.0.0:8081\";\n+  protected static final String LISTENERS_DEFAULT = \"http://0.0.0.0:8088\";\n+\n+  public static final String AUTHENTICATION_SKIP_PATHS = \"authentication.skip.paths\";\n+  public static final String AUTHENTICATION_SKIP_PATHS_DOC = \"Comma separated list of paths that \"\n+      + \"can be \"\n+      + \"accessed without authentication\";\n+  public static final String AUTHENTICATION_SKIP_PATHS_DEFAULT = \"\";\n+\n+  public static final String ACCESS_CONTROL_ALLOW_ORIGIN_CONFIG = \"access.control.allow.origin\";\n+  protected static final String ACCESS_CONTROL_ALLOW_ORIGIN_DOC = \"Set value for \"\n+      + \"Access-Control-Allow-Origin header\";\n+  protected static final String ACCESS_CONTROL_ALLOW_ORIGIN_DEFAULT = \"\";\n+\n+  public static final String ACCESS_CONTROL_ALLOW_METHODS = \"access.control.allow.methods\";\n+  protected static final String ACCESS_CONTROL_ALLOW_METHODS_DOC = \"Set value to \"\n+      + \"Access-Control-Allow-Origin header for specified methods\";\n+  protected static final String ACCESS_CONTROL_ALLOW_METHODS_DEFAULT = \"\";\n+\n+  public static final String ACCESS_CONTROL_ALLOW_HEADERS = \"access.control.allow.headers\";\n+  protected static final String ACCESS_CONTROL_ALLOW_HEADERS_DOC = \"Set value to \"\n+      + \"Access-Control-Allow-Origin header for specified headers. Leave blank to use \"\n+      + \"default.\";\n+  protected static final String ACCESS_CONTROL_ALLOW_HEADERS_DEFAULT = \"\";\n+\n+  public static final String AUTHENTICATION_METHOD_CONFIG = \"authentication.method\";\n+  public static final String AUTHENTICATION_METHOD_NONE = \"NONE\";\n+  public static final String AUTHENTICATION_METHOD_BASIC = \"BASIC\";\n+  public static final String AUTHENTICATION_METHOD_BEARER = \"BEARER\";", "originalCommit": "203525bd7072185460d4827095a035b0dfc76e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3MzYyMA==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413573620", "bodyText": "We use the config in the convert function, and convert it to the api server config equivalent. But.... in the next PR it all gets consolidated anyway.", "author": "purplefox", "createdAt": "2020-04-23T07:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0OTA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDMxNA==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r414254314", "bodyText": "The next PR does not address my question. The only values for this config we support are NONE and BASIC. We should remove BEARER here, and also from the validator for this config, as well as the doc string.", "author": "vcrfxia", "createdAt": "2020-04-24T02:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0OTA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MTUxOA==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r414351518", "bodyText": "Ack, addressed in follow ups to next PR.", "author": "purplefox", "createdAt": "2020-04-24T07:19:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0OTA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MDE0NQ==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413550145", "bodyText": "Can we add logging for various states of the server starting, similar to this? The old superclass from rest-utils did this for us but we've lost it as we no longer extend that class. I find these info messages extremely useful for debugging startup issues.", "author": "vcrfxia", "createdAt": "2020-04-23T06:43:21Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -433,36 +413,6 @@ void startKsql(final KsqlConfig ksqlConfigWithPort) {\n     initialize(ksqlConfigWithPort);\n   }\n \n-  void startApiServer(final KsqlConfig ksqlConfigWithPort) {\n-    vertx = Vertx.vertx(\n-        new VertxOptions().setMaxWorkerExecuteTimeUnit(TimeUnit.MILLISECONDS)\n-            .setMaxWorkerExecuteTime(Long.MAX_VALUE));\n-    vertx.exceptionHandler(t -> log.error(\"Unhandled exception in Vert.x\", t));\n-\n-    final Endpoints endpoints = new KsqlServerEndpoints(\n-        ksqlEngine,\n-        ksqlConfigWithPort,\n-        pullQueryExecutor,\n-        ksqlSecurityContextProvider,\n-        ksqlResource,\n-        streamedQueryResource,\n-        serverInfoResource,\n-        heartbeatResource,\n-        clusterStatusResource,\n-        statusResource,\n-        lagReportingResource,\n-        healthCheckResource,\n-        serverMetadataResource,\n-        wsQueryEndpoint\n-    );\n-    apiServerConfig = new ApiServerConfig(ksqlConfigWithPort.originals());\n-    apiServer = new Server(vertx, apiServerConfig, endpoints, true, securityExtension,\n-        authenticationPlugin, serverState);\n-    apiServer.setJettyPort(getJettyPort());\n-    apiServer.start();\n-    log.info(\"KSQL New API Server started\");", "originalCommit": "203525bd7072185460d4827095a035b0dfc76e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3NjY2NA==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413576664", "bodyText": "Ack", "author": "purplefox", "createdAt": "2020-04-23T07:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MDE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MDU4NQ==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413550585", "bodyText": "nit: Is there a reason this can't be integrated with WebsocketUtils#makeWsRequest()?", "author": "vcrfxia", "createdAt": "2020-04-23T06:44:15Z", "path": "ksqldb-cli/src/test/java/io/confluent/ksql/cli/BasicAuthFunctionalTest.java", "diffHunk": "@@ -165,44 +164,55 @@ private static int canMakeCliRequest(final BasicCredentials credentials) {\n     )) {\n       final RestResponse<ServerInfo> response = restClient.getServerInfo();\n       if (response.isSuccessful()) {\n-        return Code.OK.getCode();\n+        return OK.code();\n       }\n \n       return response.getErrorMessage().getErrorCode();\n     }\n   }\n \n-  private static Code makeWsRequest(final Optional<BasicCredentials> creds) throws Exception {\n-    final WebSocketClient wsClient = new WebSocketClient();\n-    wsClient.start();\n+  private static int makeWsRequest(final Optional<BasicCredentials> creds) throws Exception {\n \n+    Vertx vertx = Vertx.vertx();\n+    HttpClient httpClient = null;\n     try {\n-      final ClientUpgradeRequest request = new ClientUpgradeRequest();\n-      creds.ifPresent(c -> {\n-        final String authHeader = \"Basic \" + buildBasicAuthHeader(c.username(), c.password());\n-        request.setHeader(HttpHeaders.AUTHORIZATION, authHeader);\n-      });\n+      httpClient = vertx.createHttpClient();\n \n-      final WebSocketListener listener = new WebSocketListener();\n-      final URI wsUri = REST_APP.getWsListener().resolve(\"/ws/query\");\n+      final URI uri = REST_APP.getWsListener().resolve(\"/ws/query\");\n \n-      wsClient.connect(listener, wsUri, request);\n+      final MultiMap headers = MultiMap.caseInsensitiveMultiMap();\n \n-      assertThat(\"Response received\",\n-          listener.latch.await(30, TimeUnit.SECONDS), is(true));\n+      creds.ifPresent(c -> {\n+        final String authHeader = \"Basic \" + buildBasicAuthHeader(c.username(), c.password());\n+        headers.add(AUTHORIZATION.toString(), authHeader);\n+      });\n \n-      final Throwable error = listener.error.get();\n-      return error == null ? Code.OK : extractStatusCode(error);\n+      CompletableFuture<Integer> completableFuture = new CompletableFuture<>();\n+\n+      httpClient.webSocketAbs(uri.toString(), headers, WebsocketVersion.V07,", "originalCommit": "203525bd7072185460d4827095a035b0dfc76e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4OTQ1OQ==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413589459", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-04-23T07:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MDU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MTAxOQ==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413551019", "bodyText": "Is there an equivalent of this 30 second timeout we can use in the new implementation? Or is 30 seconds the default test timeout, in which case this might not matter", "author": "vcrfxia", "createdAt": "2020-04-23T06:45:09Z", "path": "ksqldb-cli/src/test/java/io/confluent/ksql/cli/BasicAuthFunctionalTest.java", "diffHunk": "@@ -165,44 +164,55 @@ private static int canMakeCliRequest(final BasicCredentials credentials) {\n     )) {\n       final RestResponse<ServerInfo> response = restClient.getServerInfo();\n       if (response.isSuccessful()) {\n-        return Code.OK.getCode();\n+        return OK.code();\n       }\n \n       return response.getErrorMessage().getErrorCode();\n     }\n   }\n \n-  private static Code makeWsRequest(final Optional<BasicCredentials> creds) throws Exception {\n-    final WebSocketClient wsClient = new WebSocketClient();\n-    wsClient.start();\n+  private static int makeWsRequest(final Optional<BasicCredentials> creds) throws Exception {\n \n+    Vertx vertx = Vertx.vertx();\n+    HttpClient httpClient = null;\n     try {\n-      final ClientUpgradeRequest request = new ClientUpgradeRequest();\n-      creds.ifPresent(c -> {\n-        final String authHeader = \"Basic \" + buildBasicAuthHeader(c.username(), c.password());\n-        request.setHeader(HttpHeaders.AUTHORIZATION, authHeader);\n-      });\n+      httpClient = vertx.createHttpClient();\n \n-      final WebSocketListener listener = new WebSocketListener();\n-      final URI wsUri = REST_APP.getWsListener().resolve(\"/ws/query\");\n+      final URI uri = REST_APP.getWsListener().resolve(\"/ws/query\");\n \n-      wsClient.connect(listener, wsUri, request);\n+      final MultiMap headers = MultiMap.caseInsensitiveMultiMap();\n \n-      assertThat(\"Response received\",\n-          listener.latch.await(30, TimeUnit.SECONDS), is(true));", "originalCommit": "203525bd7072185460d4827095a035b0dfc76e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5MDUzNg==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413590536", "bodyText": "ack", "author": "purplefox", "createdAt": "2020-04-23T07:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MTAxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MTgzNA==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413551834", "bodyText": "Out of curiosity, do you understand what these were originally for?", "author": "vcrfxia", "createdAt": "2020-04-23T06:46:46Z", "path": "ksqldb-test-util/src/test/java/io/confluent/ksql/test/util/ZooKeeperEmbeddedTest.java", "diffHunk": "@@ -34,14 +34,6 @@\n   private static final long CONNECT_TIMEOUT_MS = (int) EmbeddedSingleNodeKafkaCluster\n       .ZK_CONNECT_TIMEOUT.toMillis();\n \n-  /**\n-   * Test is only valid if Jetty is on the class path:\n-   */\n-  @SuppressWarnings(\"unused\")\n-  private final org.eclipse.jetty.server.Connector ensureClassOnClassPath = null;", "originalCommit": "203525bd7072185460d4827095a035b0dfc76e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5MTUxOQ==", "url": "https://github.com/confluentinc/ksql/pull/5134#discussion_r413591519", "bodyText": "Don't know really but I think it's trying to verify that the old API server is on the classpath.", "author": "purplefox", "createdAt": "2020-04-23T07:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MTgzNA=="}], "type": "inlineReview"}, {"oid": "6a91761ed9a0659aaa6eb9070c5897d0be0e9025", "url": "https://github.com/confluentinc/ksql/commit/6a91761ed9a0659aaa6eb9070c5897d0be0e9025", "message": "review updates", "committedDate": "2020-04-23T08:03:37Z", "type": "forcePushed"}, {"oid": "a241f2e83f03d02c26ee2f1f45ebc6699d8d8df9", "url": "https://github.com/confluentinc/ksql/commit/a241f2e83f03d02c26ee2f1f45ebc6699d8d8df9", "message": "Remove Jetty and final bits of jax rs", "committedDate": "2020-04-23T10:21:09Z", "type": "commit"}, {"oid": "a241f2e83f03d02c26ee2f1f45ebc6699d8d8df9", "url": "https://github.com/confluentinc/ksql/commit/a241f2e83f03d02c26ee2f1f45ebc6699d8d8df9", "message": "Remove Jetty and final bits of jax rs", "committedDate": "2020-04-23T10:21:09Z", "type": "forcePushed"}]}