{"pr_number": 6149, "pr_title": "feat: Support Comparisons on complex types", "pr_createdAt": "2020-09-03T11:13:55Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6149", "timeline": [{"oid": "5fc9c11851106ba7ffb2c6d56951777e9180b4dd", "url": "https://github.com/confluentinc/ksql/commit/5fc9c11851106ba7ffb2c6d56951777e9180b4dd", "message": "feat: Support Comparisons on complex types", "committedDate": "2020-09-03T11:12:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMzE2Mg==", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r486723162", "bodyText": "is there any reason to convert to an array? I believe we could just use List#equals", "author": "agavra", "createdAt": "2020-09-11T01:38:32Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -478,6 +478,42 @@ private String visitStringComparisonExpression(final ComparisonExpression.Type t\n       }\n     }\n \n+    private String visitArrayComparisonExpression(final ComparisonExpression.Type type) {\n+      switch (type) {\n+        case EQUAL:\n+          return \"java.util.Arrays.deepEquals(%1$s.toArray(), %2$s.toArray())\";", "originalCommit": "5fc9c11851106ba7ffb2c6d56951777e9180b4dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NjUzMQ==", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r486956531", "bodyText": "+1", "author": "big-andy-coates", "createdAt": "2020-09-11T10:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMzE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1ODczMg==", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r486958732", "bodyText": "These all need to handle Type.IS_DISTINCT_FROM as well.\nThis also suggests you're missing QTT test cases covering IS NOT DISTINCT FROM and IS DISTINCT FROM for these three complex types.", "author": "big-andy-coates", "createdAt": "2020-09-11T10:32:57Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/ComparisonUtil.java", "diffHunk": "@@ -81,6 +84,21 @@ private static boolean handleBoolean(final Type operator, final SqlType right) {\n         && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n   }\n \n+  private static boolean handleArray(final Type operator, final SqlType right) {\n+    return right.baseType() == SqlBaseType.ARRAY\n+        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n+  }\n+\n+  private static boolean handleMap(final Type operator, final SqlType right) {\n+    return right.baseType() == SqlBaseType.MAP\n+        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n+  }\n+\n+  private static boolean handleStruct(final Type operator, final SqlType right) {\n+    return right.baseType() == SqlBaseType.STRUCT\n+        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n+  }", "originalCommit": "5fc9c11851106ba7ffb2c6d56951777e9180b4dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "208c481a3b936185c418f720da336efc19cf21c4", "url": "https://github.com/confluentinc/ksql/commit/208c481a3b936185c418f720da336efc19cf21c4", "message": "feat: Support Comparisons on complex types 2", "committedDate": "2020-09-16T13:41:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMTE1OA==", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r493921158", "bodyText": "nit: can we put all of these into a method so that we can repeat it below? (e.g. isEqualityOperator(operator)) if we do that we might even be able to dismiss the checkstyle suppressions", "author": "agavra", "createdAt": "2020-09-23T22:03:24Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/ComparisonUtil.java", "diffHunk": "@@ -76,9 +79,32 @@ private static boolean handleString(final Type operator, final SqlType right) {\n     return right.baseType() == SqlBaseType.STRING;\n   }\n \n+  @SuppressWarnings({\"checkstyle:BooleanExpressionComplexity\", \"checkstyle:LineLength\"})\n   private static boolean handleBoolean(final Type operator, final SqlType right) {\n     return right.baseType() == SqlBaseType.BOOLEAN\n-        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n+        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL\n+            || operator == Type.IS_DISTINCT_FROM || operator == Type.IS_NOT_DISTINCT_FROM);", "originalCommit": "208c481a3b936185c418f720da336efc19cf21c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4NDIxNA==", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r495884214", "bodyText": "Refactored", "author": "uurl", "createdAt": "2020-09-28T11:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMTE1OA=="}], "type": "inlineReview"}, {"oid": "b81b29433cfb8f01dad7bfe73dd349602bd85df6", "url": "https://github.com/confluentinc/ksql/commit/b81b29433cfb8f01dad7bfe73dd349602bd85df6", "message": "feat: Support Comparisons on complex types 3", "committedDate": "2020-09-28T11:49:14Z", "type": "commit"}, {"oid": "99caf7a67b05266d6b30994ae7ea0d015a15e317", "url": "https://github.com/confluentinc/ksql/commit/99caf7a67b05266d6b30994ae7ea0d015a15e317", "message": "feat: Support Comparisons on complex types 3", "committedDate": "2020-09-28T11:51:55Z", "type": "commit"}]}