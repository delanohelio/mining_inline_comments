{"pr_number": 4335, "pr_title": "feat: improve the semantics around decimal/floating point literals", "pr_createdAt": "2020-01-16T21:21:59Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4335", "timeline": [{"oid": "0c8ae58fe1c670a500827e896ff62b9de16d4960", "url": "https://github.com/confluentinc/ksql/commit/0c8ae58fe1c670a500827e896ff62b9de16d4960", "message": "feat: improve the semantics around decimal/floating point literals\n\nBREAKING CHANGE: standalone literals that used to be doubles will now be\ninterpreted as BigDecimal. In most scenarios, this won't affect any\nqueries as the DECIMAL can auto-cast to DOUBLE; in the case were the\nliteral standsalone, the output schema will be a DECIMAL instead of a\nDOUBLE. To specify a DOUBLE literal, use scientific notation (e.g.\n1.234E-5).", "committedDate": "2020-01-21T18:48:42Z", "type": "forcePushed"}, {"oid": "c38e4249c167fe360de11c3e3391ec901942825f", "url": "https://github.com/confluentinc/ksql/commit/c38e4249c167fe360de11c3e3391ec901942825f", "message": "feat: improve the semantics around decimal/floating point literals\n\nBREAKING CHANGE: standalone literals that used to be doubles may now be\ninterpreted as BigDecimal. In most scenarios, this won't affect any\nqueries as the DECIMAL can auto-cast to DOUBLE; in the case were the\nliteral stands alone, the output schema will be a DECIMAL instead of a\nDOUBLE. To specify a DOUBLE literal, use scientific notation (e.g.\n1.234E-5).", "committedDate": "2020-01-21T21:00:18Z", "type": "commit"}, {"oid": "c38e4249c167fe360de11c3e3391ec901942825f", "url": "https://github.com/confluentinc/ksql/commit/c38e4249c167fe360de11c3e3391ec901942825f", "message": "feat: improve the semantics around decimal/floating point literals\n\nBREAKING CHANGE: standalone literals that used to be doubles may now be\ninterpreted as BigDecimal. In most scenarios, this won't affect any\nqueries as the DECIMAL can auto-cast to DOUBLE; in the case were the\nliteral stands alone, the output schema will be a DECIMAL instead of a\nDOUBLE. To specify a DOUBLE literal, use scientific notation (e.g.\n1.234E-5).", "committedDate": "2020-01-21T21:00:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3Njg0MQ==", "url": "https://github.com/confluentinc/ksql/pull/4335#discussion_r369276841", "bodyText": "nit: the error contract for this method seems a bit weird now. If the value cannot be coerced return empty, but if the value can't be coerced due to being a decimal that doesn't fit we return an error. Consider changing this to just throw if coercing fails.", "author": "rodesai", "createdAt": "2020-01-21T22:26:22Z", "path": "ksql-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "diffHunk": "@@ -23,28 +23,28 @@\n import io.confluent.ksql.schema.ksql.types.SqlStruct;\n import io.confluent.ksql.schema.ksql.types.SqlType;\n import io.confluent.ksql.schema.ksql.types.SqlTypes;\n-import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.DecimalUtil;\n import java.math.BigDecimal;\n-import java.math.MathContext;\n-import java.math.RoundingMode;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.function.Function;\n+import java.util.function.BiFunction;\n import org.apache.kafka.connect.data.Field;\n import org.apache.kafka.connect.data.Struct;\n \n public enum DefaultSqlValueCoercer implements SqlValueCoercer {\n \n   INSTANCE;\n \n-  private static final Map<SqlBaseType, Function<Number, Number>> UPCASTER =\n-      ImmutableMap.<SqlBaseType, Function<Number, Number>>builder()\n-          .put(SqlBaseType.INTEGER, Number::intValue)\n-          .put(SqlBaseType.BIGINT, Number::longValue)\n-          .put(SqlBaseType.DOUBLE, Number::doubleValue)\n-          .build();\n+  private static final Map<SqlBaseType, BiFunction<Number, SqlType, Number>> UPCASTER =\n+      ImmutableMap.<SqlBaseType, BiFunction<Number, SqlType, Number>>builder()\n+          .put(SqlBaseType.INTEGER, (num, type) -> num.intValue())\n+          .put(SqlBaseType.BIGINT, (num, type) -> num.longValue())\n+          .put(SqlBaseType.DOUBLE, (num, type) -> num.doubleValue())\n+          .put(SqlBaseType.DECIMAL, (num, type) ->\n+              DecimalUtil.ensureFit(new BigDecimal(String.format(\"%s\", num)), (SqlDecimal) type)\n+          ).build();\n \n   @Override\n   public Optional<?> coerce(final Object value, final SqlType targetType) {", "originalCommit": "c38e4249c167fe360de11c3e3391ec901942825f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxNTM4OA==", "url": "https://github.com/confluentinc/ksql/pull/4335#discussion_r369715388", "bodyText": "I will return empty - callers of this class map the optionals to specific, actionable errors. Good catch!", "author": "agavra", "createdAt": "2020-01-22T18:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3Njg0MQ=="}], "type": "inlineReview"}, {"oid": "18a9f6814349774ba87346db633408edc5ddf0fb", "url": "https://github.com/confluentinc/ksql/commit/18a9f6814349774ba87346db633408edc5ddf0fb", "message": "fix: rohan's comments", "committedDate": "2020-01-22T18:17:07Z", "type": "commit"}]}