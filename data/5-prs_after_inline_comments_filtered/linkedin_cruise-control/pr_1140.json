{"pr_number": 1140, "pr_title": "Use AdminClient for topic creation and config updates.", "pr_createdAt": "2020-03-10T22:36:36Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1140", "timeline": [{"oid": "cb54abb98302e2abb172e940d36736adcd417a51", "url": "https://github.com/linkedin/cruise-control/commit/cb54abb98302e2abb172e940d36736adcd417a51", "message": "Use AdminClient for topic creation and config updates.", "committedDate": "2020-03-10T22:40:37Z", "type": "commit"}, {"oid": "cb54abb98302e2abb172e940d36736adcd417a51", "url": "https://github.com/linkedin/cruise-control/commit/cb54abb98302e2abb172e940d36736adcd417a51", "message": "Use AdminClient for topic creation and config updates.", "committedDate": "2020-03-10T22:40:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NjQ1OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401276459", "bodyText": "nit: bad indention.", "author": "kidkun", "createdAt": "2020-03-31T23:40:48Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/SamplingUtils.java", "diffHunk": "@@ -324,4 +344,127 @@ private static boolean skipBuildingBrokerMetricSample(BrokerLoad brokerLoad, int\n \n     return false;\n   }\n+\n+  /**\n+   * Build a wrapper around the topic with the given desired properties and {@link #DEFAULT_CLEANUP_POLICY}.\n+   *\n+   * @param topic The name of the topic.\n+   * @param partitionCount Desired partition count.\n+   * @param replicationFactor Desired replication factor.\n+   * @param retentionMs Desired retention in milliseconds.\n+   * @return A wrapper around the topic with the given desired properties.\n+   */\n+  public static NewTopic wrapTopic(String topic, int partitionCount, short replicationFactor, long retentionMs) {\n+    if (partitionCount <= 0 || replicationFactor <= 0 || retentionMs <= 0) {\n+      throw new IllegalArgumentException(String.format(\"Partition count (%d), replication factor (%d), and retention ms (%d)\"\n+                                                       + \" must be positive for the topic (%s).\", partitionCount,\n+                                                       replicationFactor, retentionMs, topic));\n+    }\n+\n+    NewTopic newTopic = new NewTopic(topic, partitionCount, replicationFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(RetentionMsProp(), Long.toString(retentionMs));\n+    config.put(CleanupPolicyProp(), DEFAULT_CLEANUP_POLICY);\n+    newTopic.configs(config);\n+\n+    return newTopic;\n+  }\n+\n+  /**\n+   * Add config altering operations to the given configs to alter for configs that differ between current and desired.\n+   *\n+   * @param configsToAlter A set of config altering operations to be populated.\n+   * @param desiredConfig Desired config value by name.\n+   * @param currentConfig Current config.\n+   */\n+  private static void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter, Map<String, String> desiredConfig, Config currentConfig) {\n+    for (Map.Entry<String, String> entry : desiredConfig.entrySet()) {\n+      String configName = entry.getKey();\n+      String targetConfigValue = entry.getValue();\n+      ConfigEntry currentConfigEntry = currentConfig.get(configName);\n+      if (currentConfigEntry == null || !currentConfigEntry.value().equals(targetConfigValue)) {\n+        configsToAlter.add(new AlterConfigOp(new ConfigEntry(configName, targetConfigValue), AlterConfigOp.OpType.SET));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Update topic configurations with the desired configs specified in the given topicToUpdateConfigs.\n+   *\n+   * @param adminClient The adminClient to send describeConfigs and incrementalAlterConfigs requests.\n+   * @param topicToUpdateConfigs Existing topic to update selected configs if needed -- cannot be {@code null}.\n+   * @return {@code true} if the request is completed successfully, {@code false} if there are any exceptions.\n+   */\n+  public static boolean maybeUpdateTopicConfig(AdminClient adminClient, NewTopic topicToUpdateConfigs) {\n+    String topicName = topicToUpdateConfigs.name();\n+    // Retrieve topic config to check if it needs an update.\n+    ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, topicName);\n+    DescribeConfigsResult describeConfigsResult = adminClient.describeConfigs(Collections.singleton(topicResource));\n+    Config topicConfig;\n+    try {\n+      topicConfig = describeConfigsResult.values().get(topicResource).get(CLIENT_REQUEST_TIMEOUT_MS,\n+                                                                          TimeUnit.MILLISECONDS);\n+    } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+      LOG.warn(\"Config check for topic {} failed due to failure to describe its configs.\", topicName, e);\n+      return false;\n+    }\n+\n+    // Update configs if needed.\n+    Map<String, String> desiredConfig = topicToUpdateConfigs.configs();\n+    if (desiredConfig != null) {\n+      Set<AlterConfigOp> alterConfigOps = new HashSet<>(desiredConfig.size());\n+      maybeUpdateConfig(alterConfigOps, desiredConfig, topicConfig);\n+      if (!alterConfigOps.isEmpty()) {\n+        AlterConfigsResult\n+            alterConfigsResult = adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, alterConfigOps));", "originalCommit": "cb54abb98302e2abb172e940d36736adcd417a51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NzU0OA==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401277548", "bodyText": "should we also log the error if cause is not ReassignmentInProgressException here?", "author": "kidkun", "createdAt": "2020-03-31T23:44:22Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/SamplingUtils.java", "diffHunk": "@@ -324,4 +344,127 @@ private static boolean skipBuildingBrokerMetricSample(BrokerLoad brokerLoad, int\n \n     return false;\n   }\n+\n+  /**\n+   * Build a wrapper around the topic with the given desired properties and {@link #DEFAULT_CLEANUP_POLICY}.\n+   *\n+   * @param topic The name of the topic.\n+   * @param partitionCount Desired partition count.\n+   * @param replicationFactor Desired replication factor.\n+   * @param retentionMs Desired retention in milliseconds.\n+   * @return A wrapper around the topic with the given desired properties.\n+   */\n+  public static NewTopic wrapTopic(String topic, int partitionCount, short replicationFactor, long retentionMs) {\n+    if (partitionCount <= 0 || replicationFactor <= 0 || retentionMs <= 0) {\n+      throw new IllegalArgumentException(String.format(\"Partition count (%d), replication factor (%d), and retention ms (%d)\"\n+                                                       + \" must be positive for the topic (%s).\", partitionCount,\n+                                                       replicationFactor, retentionMs, topic));\n+    }\n+\n+    NewTopic newTopic = new NewTopic(topic, partitionCount, replicationFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(RetentionMsProp(), Long.toString(retentionMs));\n+    config.put(CleanupPolicyProp(), DEFAULT_CLEANUP_POLICY);\n+    newTopic.configs(config);\n+\n+    return newTopic;\n+  }\n+\n+  /**\n+   * Add config altering operations to the given configs to alter for configs that differ between current and desired.\n+   *\n+   * @param configsToAlter A set of config altering operations to be populated.\n+   * @param desiredConfig Desired config value by name.\n+   * @param currentConfig Current config.\n+   */\n+  private static void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter, Map<String, String> desiredConfig, Config currentConfig) {\n+    for (Map.Entry<String, String> entry : desiredConfig.entrySet()) {\n+      String configName = entry.getKey();\n+      String targetConfigValue = entry.getValue();\n+      ConfigEntry currentConfigEntry = currentConfig.get(configName);\n+      if (currentConfigEntry == null || !currentConfigEntry.value().equals(targetConfigValue)) {\n+        configsToAlter.add(new AlterConfigOp(new ConfigEntry(configName, targetConfigValue), AlterConfigOp.OpType.SET));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Update topic configurations with the desired configs specified in the given topicToUpdateConfigs.\n+   *\n+   * @param adminClient The adminClient to send describeConfigs and incrementalAlterConfigs requests.\n+   * @param topicToUpdateConfigs Existing topic to update selected configs if needed -- cannot be {@code null}.\n+   * @return {@code true} if the request is completed successfully, {@code false} if there are any exceptions.\n+   */\n+  public static boolean maybeUpdateTopicConfig(AdminClient adminClient, NewTopic topicToUpdateConfigs) {\n+    String topicName = topicToUpdateConfigs.name();\n+    // Retrieve topic config to check if it needs an update.\n+    ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, topicName);\n+    DescribeConfigsResult describeConfigsResult = adminClient.describeConfigs(Collections.singleton(topicResource));\n+    Config topicConfig;\n+    try {\n+      topicConfig = describeConfigsResult.values().get(topicResource).get(CLIENT_REQUEST_TIMEOUT_MS,\n+                                                                          TimeUnit.MILLISECONDS);\n+    } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+      LOG.warn(\"Config check for topic {} failed due to failure to describe its configs.\", topicName, e);\n+      return false;\n+    }\n+\n+    // Update configs if needed.\n+    Map<String, String> desiredConfig = topicToUpdateConfigs.configs();\n+    if (desiredConfig != null) {\n+      Set<AlterConfigOp> alterConfigOps = new HashSet<>(desiredConfig.size());\n+      maybeUpdateConfig(alterConfigOps, desiredConfig, topicConfig);\n+      if (!alterConfigOps.isEmpty()) {\n+        AlterConfigsResult\n+            alterConfigsResult = adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, alterConfigOps));\n+        try {\n+          alterConfigsResult.values().get(topicResource).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+          LOG.warn(\"Config change for topic {} failed.\", topicName, e);\n+          return false;\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  /**\n+   * Increase the partition count of the given existing topic to the desired partition count (if needed).\n+   *\n+   * @param adminClient The adminClient to send describeTopics and createPartitions requests.\n+   * @param topicToAddPartitions Existing topic to add more partitions if needed -- cannot be {@code null}.\n+   * @return {@code true} if the request is completed successfully, {@code false} if there are any exceptions.\n+   */\n+  public static boolean maybeIncreasePartitionCount(AdminClient adminClient, NewTopic topicToAddPartitions) {\n+    String topicName = topicToAddPartitions.name();\n+\n+    // Retrieve partition count of topic to check if it needs a partition count update.\n+    TopicDescription topicDescription;\n+    try {\n+      topicDescription = adminClient.describeTopics(Collections.singletonList(topicName)).values()\n+                                    .get(topicName).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+    } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+      LOG.warn(\"Partition count increase check for topic {} failed due to failure to describe cluster.\", topicName, e);\n+      return false;\n+    }\n+\n+    // Update partition count of topic if needed.\n+    if (topicDescription.partitions().size() < topicToAddPartitions.numPartitions()) {\n+      CreatePartitionsResult createPartitionsResult = adminClient.createPartitions(\n+          Collections.singletonMap(topicName, NewPartitions.increaseTo(topicToAddPartitions.numPartitions())));\n+\n+      try {\n+        createPartitionsResult.values().get(topicName).get(CLIENT_REQUEST_TIMEOUT_MS,\n+                                                           TimeUnit.MILLISECONDS);\n+      } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+        if (e.getCause() instanceof ReassignmentInProgressException) {\n+          LOG.warn(\"Partition count increase for topic {} failed due to ongoing reassignment.\", topicName, e);", "originalCommit": "cb54abb98302e2abb172e940d36736adcd417a51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MTA0Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401281042", "bodyText": "should we also have special handling of ReassignmentInProgressException like SamplingUtils?", "author": "kidkun", "createdAt": "2020-03-31T23:55:19Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -220,18 +217,19 @@ protected void maybeUpdateTopicConfig() {\n   }\n \n   protected void maybeIncreaseTopicPartitionCount() {\n+    String cruiseControlMetricsTopic = _metricsTopic.name();\n     try {\n       // Retrieve topic partition count to check and update.\n       TopicDescription topicDescription =\n-          _adminClient.describeTopics(Collections.singletonList(_cruiseControlMetricsTopic)).values()\n-                      .get(_cruiseControlMetricsTopic).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+          _adminClient.describeTopics(Collections.singletonList(cruiseControlMetricsTopic)).values()\n+                      .get(cruiseControlMetricsTopic).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n       if (topicDescription.partitions().size() < _metricsTopic.numPartitions()) {\n-        _adminClient.createPartitions(Collections.singletonMap(_cruiseControlMetricsTopic,\n+        _adminClient.createPartitions(Collections.singletonMap(cruiseControlMetricsTopic,\n                                                                NewPartitions.increaseTo(_metricsTopic.numPartitions())));\n       }\n     } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-      LOG.warn(\"Unable to increase Cruise Cruise Control metrics topic {} partition number to {}\",", "originalCommit": "cb54abb98302e2abb172e940d36736adcd417a51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MTgxOA==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401281818", "bodyText": "what's the benefit of use local variable instead of the field _cruiseControlMetricsTopic here?", "author": "kidkun", "createdAt": "2020-03-31T23:57:59Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -220,18 +217,19 @@ protected void maybeUpdateTopicConfig() {\n   }\n \n   protected void maybeIncreaseTopicPartitionCount() {\n+    String cruiseControlMetricsTopic = _metricsTopic.name();", "originalCommit": "cb54abb98302e2abb172e940d36736adcd417a51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjA4OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401306089", "bodyText": "Just for making implementations of this function and the maybeIncreasePartitionCount in SamplingUtils more consistent with each other.  Ideally, a future patch should create a module to combine such common util logic to be used everywhere else. -- having different implementations for the same functionality is error-prone.", "author": "efeg", "createdAt": "2020-04-01T01:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MTgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4Mzg5NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401283895", "bodyText": "if we reaches here numberOfBrokersInCluster is guaranteed to be equal or larger than DEFAULT_SAMPLE_STORE_TOPIC_REPLICATION_FACTOR(which is 2), looks the  Math.min() is redundant here.", "author": "kidkun", "createdAt": "2020-04-01T00:05:34Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/KafkaSampleStore.java", "diffHunk": "@@ -168,6 +168,56 @@ public void configure(Map<String, ?> config) {\n     ensureTopicsCreated(config);\n   }\n \n+  /**\n+   * Retrieve the desired replication factor of sample store topics.\n+   *\n+   * @param config The configurations for Cruise Control.\n+   * @param adminClient The adminClient to send describeCluster request.\n+   * @return Desired replication factor of sample store topics, or {@link null} if failed to resolve replication factor.\n+   */\n+  protected Short sampleStoreTopicReplicationFactor(Map<String, ?> config, AdminClient adminClient) {\n+    if (_sampleStoreTopicReplicationFactor == null) {\n+      short numberOfBrokersInCluster;\n+      try {\n+        numberOfBrokersInCluster = (short) adminClient.describeCluster().nodes().get(CLIENT_REQUEST_TIMEOUT_MS,\n+                                                                                     TimeUnit.MILLISECONDS).size();\n+      } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+        LOG.warn(\"Auto creation of sample store topics failed due to failure to describe cluster.\", e);\n+        return null;\n+      }\n+      if (numberOfBrokersInCluster <= 1) {\n+        throw new IllegalStateException(String.format(\"Kafka cluster has less than 2 brokers (brokers in cluster=%d, zookeeper.connect=%s)\",\n+                                                      numberOfBrokersInCluster, config.get(ExecutorConfig.ZOOKEEPER_CONNECT_CONFIG)));\n+      }\n+\n+      return (short) Math.min(DEFAULT_SAMPLE_STORE_TOPIC_REPLICATION_FACTOR, numberOfBrokersInCluster);", "originalCommit": "cb54abb98302e2abb172e940d36736adcd417a51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjEwMw==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401306103", "bodyText": "Doesn't this assume that DEFAULT_SAMPLE_STORE_TOPIC_REPLICATION_FACTOR will always be 2? -- i.e. would it still be correct if we change the default RF to 3 or make it configurable in the future?", "author": "efeg", "createdAt": "2020-04-01T01:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4Mzg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4NDk5OA==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401284998", "bodyText": "If we are unable to create topic here, shouldn't we throw out exception? I think if this topic does not exist and is fail to be created,  KafkaSampleStore is unable to work.", "author": "kidkun", "createdAt": "2020-04-01T00:09:28Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/KafkaSampleStore.java", "diffHunk": "@@ -168,6 +168,56 @@ public void configure(Map<String, ?> config) {\n     ensureTopicsCreated(config);\n   }\n \n+  /**\n+   * Retrieve the desired replication factor of sample store topics.\n+   *\n+   * @param config The configurations for Cruise Control.\n+   * @param adminClient The adminClient to send describeCluster request.\n+   * @return Desired replication factor of sample store topics, or {@link null} if failed to resolve replication factor.\n+   */\n+  protected Short sampleStoreTopicReplicationFactor(Map<String, ?> config, AdminClient adminClient) {\n+    if (_sampleStoreTopicReplicationFactor == null) {\n+      short numberOfBrokersInCluster;\n+      try {\n+        numberOfBrokersInCluster = (short) adminClient.describeCluster().nodes().get(CLIENT_REQUEST_TIMEOUT_MS,\n+                                                                                     TimeUnit.MILLISECONDS).size();\n+      } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+        LOG.warn(\"Auto creation of sample store topics failed due to failure to describe cluster.\", e);\n+        return null;\n+      }\n+      if (numberOfBrokersInCluster <= 1) {\n+        throw new IllegalStateException(String.format(\"Kafka cluster has less than 2 brokers (brokers in cluster=%d, zookeeper.connect=%s)\",\n+                                                      numberOfBrokersInCluster, config.get(ExecutorConfig.ZOOKEEPER_CONNECT_CONFIG)));\n+      }\n+\n+      return (short) Math.min(DEFAULT_SAMPLE_STORE_TOPIC_REPLICATION_FACTOR, numberOfBrokersInCluster);\n+    }\n+\n+    return _sampleStoreTopicReplicationFactor;\n+  }\n+\n+  /**\n+   * Creates the given topic if it does not exist.\n+   *\n+   * @param adminClient The adminClient to send createTopics request.\n+   * @param topicToBeCreated A wrapper around the topic to be created.\n+   * @return {@code false} if the topic to be created already exists, {@code true} otherwise.\n+   */\n+  protected static boolean createTopic(AdminClient adminClient, NewTopic topicToBeCreated) {\n+    try {\n+      CreateTopicsResult createTopicsResult = adminClient.createTopics(Collections.singletonList(topicToBeCreated));\n+      createTopicsResult.values().get(topicToBeCreated.name()).get(CruiseControlMetricsUtils.CLIENT_REQUEST_TIMEOUT_MS,\n+                                                                   TimeUnit.MILLISECONDS);\n+      LOG.info(\"Topic {} has been created.\", topicToBeCreated.name());\n+    } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+      if (e.getCause() instanceof TopicExistsException) {\n+        return false;\n+      }\n+      LOG.warn(\"Unable to create topic {}.\", topicToBeCreated.name(), e);", "originalCommit": "cb54abb98302e2abb172e940d36736adcd417a51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4NTQyMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401285421", "bodyText": "Looks like sampleStoreTopicReplicationFactor(config, adminClient) could return null here, will this be an issue in unboxing?", "author": "kidkun", "createdAt": "2020-04-01T00:11:01Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/KafkaSampleStore.java", "diffHunk": "@@ -215,16 +265,11 @@ public void configure(Map<String, ?> config) {\n \n   @SuppressWarnings(\"unchecked\")\n   protected void ensureTopicsCreated(Map<String, ?> config) {\n-    String connectString = (String) config.get(ExecutorConfig.ZOOKEEPER_CONNECT_CONFIG);\n-    boolean zkSecurityEnabled = (Boolean) config.get(ExecutorConfig.ZOOKEEPER_SECURITY_ENABLED_CONFIG);\n-    KafkaZkClient kafkaZkClient = KafkaCruiseControlUtils.createKafkaZkClient(connectString,\n-                                                                              \"KafkaSampleStore\",\n-                                                                              \"EnsureTopicCreated\",\n-                                                                              zkSecurityEnabled);\n-    AdminZkClient adminZkClient = new AdminZkClient(kafkaZkClient);\n     AdminClient adminClient = KafkaCruiseControlUtils.createAdminClient((Map<String, Object>) config);\n     try {\n-      Map<String, List<PartitionInfo>> topics = _consumers.get(0).listTopics();\n+      short replicationFactor = sampleStoreTopicReplicationFactor(config, adminClient);", "originalCommit": "cb54abb98302e2abb172e940d36736adcd417a51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e67d8b5018a084a31fb605aa5a2edcf11c8c5785", "url": "https://github.com/linkedin/cruise-control/commit/e67d8b5018a084a31fb605aa5a2edcf11c8c5785", "message": "Address the feedback.", "committedDate": "2020-04-01T01:29:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxOTg2Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1140#discussion_r401719863", "bodyText": "Why don't you just rethrow e.getCause()?", "author": "viktorsomogyi", "createdAt": "2020-04-01T15:48:44Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -182,15 +183,12 @@ protected void createCruiseControlMetricsTopic() throws TopicExistsException {\n     try {\n       CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_metricsTopic));\n       createTopicsResult.values().get(_metricsTopic.name()).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n-      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n-    } catch (ExecutionException e) {\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _metricsTopic.name());\n+    } catch (InterruptedException | ExecutionException | TimeoutException e) {\n       if (e.getCause() instanceof TopicExistsException) {\n         throw new TopicExistsException(e.getMessage());", "originalCommit": "e67d8b5018a084a31fb605aa5a2edcf11c8c5785", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e23f8ea71009ca20b338d6999b2b78930a74f62a", "url": "https://github.com/linkedin/cruise-control/commit/e23f8ea71009ca20b338d6999b2b78930a74f62a", "message": "Address the feedback.", "committedDate": "2020-04-01T17:42:31Z", "type": "commit"}]}