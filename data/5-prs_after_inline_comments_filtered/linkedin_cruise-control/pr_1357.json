{"pr_number": 1357, "pr_title": "Add check to validate that time range start time is smaller than end time", "pr_createdAt": "2020-10-16T20:07:55Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1357", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MzIyMA==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506763220", "bodyText": "Repeated code (also applies to endMsOrDefault) -- please see comment on removing startMs and endMs.", "author": "efeg", "createdAt": "2020-10-16T23:36:57Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -408,16 +409,31 @@ static Long time(HttpServletRequest request) {\n     return timeString.toUpperCase().equals(\"NOW\") ? System.currentTimeMillis() : Long.parseLong(timeString);\n   }\n \n-  static long startMs(HttpServletRequest request) {\n-    String parameterString = caseSensitiveParameterName(request.getParameterMap(), START_MS_PARAM);\n-    return parameterString == null ? DEFAULT_START_TIME_FOR_CLUSTER_MODEL\n-                                   : Long.parseLong(request.getParameter(parameterString));\n+  @Nullable\n+  static Long startMs(HttpServletRequest request) {\n+    return parseParamAsLong(request, START_MS_PARAM);\n   }\n \n-  static long endMs(HttpServletRequest request) {\n-    String parameterString = caseSensitiveParameterName(request.getParameterMap(), END_MS_PARAM);\n-    return parameterString == null ? System.currentTimeMillis()\n-                                   : Long.parseLong(request.getParameter(parameterString));\n+  @Nullable\n+  static Long endMs(HttpServletRequest request) {\n+    return parseParamAsLong(request, END_MS_PARAM);\n+  }\n+\n+  static long startMsOrDefault(HttpServletRequest request, long defaultStartMs) {\n+    Long startMs = parseParamAsLong(request, START_MS_PARAM);", "originalCommit": "b35d593d947cb1eb6c3a401b8199f9c2506fcfa5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NjI1NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506766255", "bodyText": "Nit: For consistency across util functions, can we implement this similar to we parse a Boolean -- e.g.replace parseParamAsLong with getLongParam\n  public static long getLongParam(HttpServletRequest request, String parameter, long defaultIfMissing) {\n    String parameterString = caseSensitiveParameterName(request.getParameterMap(), parameter);\n    return parameterString == null ? defaultIfMissing : Long.parseLong(request.getParameter(parameterString));\n  }", "author": "efeg", "createdAt": "2020-10-16T23:54:30Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -1058,6 +1074,12 @@ static boolean fetchCompletedTask(HttpServletRequest request) {\n     return getBooleanParam(request, FETCH_COMPLETED_TASK_PARAM, false);\n   }\n \n+  @Nullable\n+  private static Long parseParamAsLong(HttpServletRequest request, String paramName) {\n+    String parameterString = caseSensitiveParameterName(request.getParameterMap(), paramName);\n+    return parameterString == null ? null : Long.parseLong(request.getParameter(parameterString));\n+  }\n+", "originalCommit": "b35d593d947cb1eb6c3a401b8199f9c2506fcfa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4NTUyNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506785525", "bodyText": "Cool. I added the below method:\n  public static Long getLongParam(HttpServletRequest request, String parameter, @Nullable Long defaultIfMissing) {\n    String parameterString = caseSensitiveParameterName(request.getParameterMap(), parameter);\n\n    if (parameterString == null) {\n      return defaultIfMissing;\n    }\n    return Long.parseLong(request.getParameter(parameterString));\n  }\n\nNote that the below statement does not work since defaultIfMissing is nullable and the implicit unboxing process might get NPE\nreturn parameterString == null ? defaultIfMissing : Long.parseLong...", "author": "Lincong", "createdAt": "2020-10-17T02:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NjI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4NjkxNw==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506786917", "bodyText": "More specifically, when we use condition ? a : b, it tries to find the common denominator between a type and b type. In the below case, the common type denominator is primitive long. That means it will try to unbox defaultIfMissing which could be null in this case.\nparameterString == null ? defaultIfMissing : Long.parseLong(...)", "author": "Lincong", "createdAt": "2020-10-17T03:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NjI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4NzU5NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506787595", "bodyText": "@Lincong Thanks for the explanation.\nI guess what you are looking for is the following:\nreturn parameterString == null ? defaultIfMissing : Long.valueOf(request.getParameter(parameterString));\n\nThis has the benefit of\n\nnot doing the extra boxing to return Long value of parsed long, and\nbeing more concise", "author": "efeg", "createdAt": "2020-10-17T03:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NjI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4Nzk1MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506787951", "bodyText": "Right. This one works since Long.valueOf(...) return Long instead of long. So defaultIfMissing does not get unboxed", "author": "Lincong", "createdAt": "2020-10-17T03:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NjI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2ODU3NA==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506768574", "bodyText": "Having separate functions for startMs and startMsOrDefault (same issue for end) seems a little redundant (e.g. see code repetition for parseParamAsLong(request, START_MS_PARAM) between these functions).\nI wonder if we can make it more concise by dropping endMs and startMs functions. Their callers can call startMsOrDefault and endMsOrDefault with null as the default parameter.", "author": "efeg", "createdAt": "2020-10-17T00:09:09Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -408,16 +409,31 @@ static Long time(HttpServletRequest request) {\n     return timeString.toUpperCase().equals(\"NOW\") ? System.currentTimeMillis() : Long.parseLong(timeString);\n   }\n \n-  static long startMs(HttpServletRequest request) {\n-    String parameterString = caseSensitiveParameterName(request.getParameterMap(), START_MS_PARAM);\n-    return parameterString == null ? DEFAULT_START_TIME_FOR_CLUSTER_MODEL\n-                                   : Long.parseLong(request.getParameter(parameterString));\n+  @Nullable\n+  static Long startMs(HttpServletRequest request) {\n+    return parseParamAsLong(request, START_MS_PARAM);\n   }\n \n-  static long endMs(HttpServletRequest request) {\n-    String parameterString = caseSensitiveParameterName(request.getParameterMap(), END_MS_PARAM);\n-    return parameterString == null ? System.currentTimeMillis()\n-                                   : Long.parseLong(request.getParameter(parameterString));\n+  @Nullable\n+  static Long endMs(HttpServletRequest request) {\n+    return parseParamAsLong(request, END_MS_PARAM);\n+  }", "originalCommit": "b35d593d947cb1eb6c3a401b8199f9c2506fcfa5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2OTA1NA==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506769054", "bodyText": "For consistency of the parameter name for missing default values defaultEndMs -> defaultIfMissing.\nAlso, can we make the return type and the type of the default parameter Long? Clearly, if the response is null, it would only be possible via a null default parameter passed to this function.", "author": "efeg", "createdAt": "2020-10-17T00:11:58Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -408,16 +409,31 @@ static Long time(HttpServletRequest request) {\n     return timeString.toUpperCase().equals(\"NOW\") ? System.currentTimeMillis() : Long.parseLong(timeString);\n   }\n \n-  static long startMs(HttpServletRequest request) {\n-    String parameterString = caseSensitiveParameterName(request.getParameterMap(), START_MS_PARAM);\n-    return parameterString == null ? DEFAULT_START_TIME_FOR_CLUSTER_MODEL\n-                                   : Long.parseLong(request.getParameter(parameterString));\n+  @Nullable\n+  static Long startMs(HttpServletRequest request) {\n+    return parseParamAsLong(request, START_MS_PARAM);\n   }\n \n-  static long endMs(HttpServletRequest request) {\n-    String parameterString = caseSensitiveParameterName(request.getParameterMap(), END_MS_PARAM);\n-    return parameterString == null ? System.currentTimeMillis()\n-                                   : Long.parseLong(request.getParameter(parameterString));\n+  @Nullable\n+  static Long endMs(HttpServletRequest request) {\n+    return parseParamAsLong(request, END_MS_PARAM);\n+  }\n+\n+  static long startMsOrDefault(HttpServletRequest request, long defaultStartMs) {\n+    Long startMs = parseParamAsLong(request, START_MS_PARAM);\n+    return startMs == null ? defaultStartMs : startMs;\n+  }\n+\n+  static long endMsOrDefault(HttpServletRequest request, long defaultEndMs) {", "originalCommit": "b35d593d947cb1eb6c3a401b8199f9c2506fcfa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4MjgwMg==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506782802", "bodyText": "OK, that makes sense", "author": "Lincong", "createdAt": "2020-10-17T02:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2OTA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2OTk1Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506769956", "bodyText": "2017 -> 2020 (i.e. date of creation)", "author": "efeg", "createdAt": "2020-10-17T00:18:06Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.", "originalCommit": "b35d593d947cb1eb6c3a401b8199f9c2506fcfa5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MDUxOA==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506770518", "bodyText": "Is it acceptable for these mocked responses to be called anyTimes? Is it possible to be more specific?", "author": "efeg", "createdAt": "2020-10-17T00:21:58Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.parameters;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class ParameterUtilsTest {\n+\n+  private static final Long DEFAULT_START_TIME_MS = -1L;\n+  private static final Long DEFAULT_END_TIME_MS = -2L;\n+\n+  @Test\n+  public void testParseTimeRangeSet() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    String startTimeString = \"12345\";\n+    String endTimeString = \"23456\";\n+    Map<String, String[]> paramMap = new HashMap<>();\n+    paramMap.put(ParameterUtils.START_MS_PARAM, new String[]{ParameterUtils.START_MS_PARAM});\n+    paramMap.put(ParameterUtils.END_MS_PARAM, new String[]{ParameterUtils.END_MS_PARAM});\n+\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(paramMap).anyTimes();\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.START_MS_PARAM)).andReturn(startTimeString).anyTimes();\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.END_MS_PARAM)).andReturn(endTimeString).anyTimes();", "originalCommit": "b35d593d947cb1eb6c3a401b8199f9c2506fcfa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4NDMzOA==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506784338", "bodyText": "Sure. I made it specific", "author": "Lincong", "createdAt": "2020-10-17T02:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MDUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MDgyNw==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506770827", "bodyText": "Why don't we use the .longValue() of start and endMs?", "author": "efeg", "createdAt": "2020-10-17T00:24:32Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.parameters;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class ParameterUtilsTest {\n+\n+  private static final Long DEFAULT_START_TIME_MS = -1L;\n+  private static final Long DEFAULT_END_TIME_MS = -2L;\n+\n+  @Test\n+  public void testParseTimeRangeSet() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    String startTimeString = \"12345\";\n+    String endTimeString = \"23456\";\n+    Map<String, String[]> paramMap = new HashMap<>();\n+    paramMap.put(ParameterUtils.START_MS_PARAM, new String[]{ParameterUtils.START_MS_PARAM});\n+    paramMap.put(ParameterUtils.END_MS_PARAM, new String[]{ParameterUtils.END_MS_PARAM});\n+\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(paramMap).anyTimes();\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.START_MS_PARAM)).andReturn(startTimeString).anyTimes();\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.END_MS_PARAM)).andReturn(endTimeString).anyTimes();\n+    EasyMock.replay(mockRequest);\n+\n+    Long startMs = ParameterUtils.startMs(mockRequest);\n+    Long endMs = ParameterUtils.endMs(mockRequest);\n+    Assert.assertNotNull(startMs);\n+    Assert.assertNotNull(endMs);\n+    Assert.assertEquals((Long) Long.parseLong(startTimeString), startMs);\n+    Assert.assertEquals((Long) Long.parseLong(endTimeString), endMs);", "originalCommit": "b35d593d947cb1eb6c3a401b8199f9c2506fcfa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4NDA3Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506784076", "bodyText": "I changed it to:\nAssert.assertEquals(Long.parseLong(START_TIME_STRING), startMs.longValue());\nIs the reason why you suggested to use longValue() to avoid casting?", "author": "Lincong", "createdAt": "2020-10-17T02:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MDgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MTI0MA==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506771240", "bodyText": "Can we avoid hardcoding test values and move them to static variables?", "author": "efeg", "createdAt": "2020-10-17T00:27:08Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.parameters;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class ParameterUtilsTest {\n+\n+  private static final Long DEFAULT_START_TIME_MS = -1L;\n+  private static final Long DEFAULT_END_TIME_MS = -2L;\n+\n+  @Test\n+  public void testParseTimeRangeSet() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    String startTimeString = \"12345\";\n+    String endTimeString = \"23456\";", "originalCommit": "b35d593d947cb1eb6c3a401b8199f9c2506fcfa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4NDMxMg==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r506784312", "bodyText": "Sure", "author": "Lincong", "createdAt": "2020-10-17T02:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MTI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwMDExMw==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r507300113", "bodyText": "Should other Long parameters in this class also use of this function for parsing -- e.g. EXECUTION_PROGRESS_CHECK_INTERVAL_MS_PARAM?", "author": "efeg", "createdAt": "2020-10-19T00:56:48Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -246,6 +247,19 @@ public static boolean getBooleanParam(HttpServletRequest request, String paramet\n     return parameterString == null ? defaultIfMissing : Boolean.parseBoolean(request.getParameter(parameterString));\n   }\n \n+  /**\n+   * Get the long parameter parameter.\n+   *\n+   * @param request HTTP request received by Cruise Control.\n+   * @param parameter Parameter to parse from the request.\n+   * @param defaultIfMissing Default value to set if the request does not contain the parameter.\n+   * @return The specified value for the parameter, or defaultIfMissing if the parameter is missing.\n+   */\n+  public static Long getLongParam(HttpServletRequest request, String parameter, @Nullable Long defaultIfMissing) {", "originalCommit": "644e80a67b9fab367b26086e2213174a41a87c77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MzIwMw==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r508183203", "bodyText": "Yes, I applied this getLongParam method to executionProgressCheckIntervalMs and replicationThrottle and added unit tests", "author": "Lincong", "createdAt": "2020-10-20T03:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwMDExMw=="}], "type": "inlineReview"}, {"oid": "ab74edec730889bfd82978fe3740ed48a09d6662", "url": "https://github.com/linkedin/cruise-control/commit/ab74edec730889bfd82978fe3740ed48a09d6662", "message": "Add check to validate that time range start time is smaller than end time", "committedDate": "2020-10-21T23:23:58Z", "type": "commit"}, {"oid": "21dcf79a570d8ab4ff2e96ca14f63262967504be", "url": "https://github.com/linkedin/cruise-control/commit/21dcf79a570d8ab4ff2e96ca14f63262967504be", "message": "Add unit test", "committedDate": "2020-10-21T23:23:58Z", "type": "commit"}, {"oid": "abd34dfa010765f0812674341f60ca499ed2c571", "url": "https://github.com/linkedin/cruise-control/commit/abd34dfa010765f0812674341f60ca499ed2c571", "message": "Fixed issues", "committedDate": "2020-10-21T23:23:58Z", "type": "commit"}, {"oid": "d9e927cf1e00912127e9752176e8fbb352c8afc0", "url": "https://github.com/linkedin/cruise-control/commit/d9e927cf1e00912127e9752176e8fbb352c8afc0", "message": "Replace Long.parseLong with Long.valueOf", "committedDate": "2020-10-21T23:23:58Z", "type": "commit"}, {"oid": "b153fe1064f5db645ae9c4511732b4dfc81e78d8", "url": "https://github.com/linkedin/cruise-control/commit/b153fe1064f5db645ae9c4511732b4dfc81e78d8", "message": "Apply getLongParam method to more get long static method in ParamUtils", "committedDate": "2020-10-21T23:23:58Z", "type": "commit"}, {"oid": "b153fe1064f5db645ae9c4511732b4dfc81e78d8", "url": "https://github.com/linkedin/cruise-control/commit/b153fe1064f5db645ae9c4511732b4dfc81e78d8", "message": "Apply getLongParam method to more get long static method in ParamUtils", "committedDate": "2020-10-21T23:23:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzNTMzNA==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r510335334", "bodyText": "(Applies to other similar uses in this test):\nNit: times(1) -> once() -- i.e. calling one time is special :)", "author": "efeg", "createdAt": "2020-10-22T17:27:25Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.parameters;\n+\n+import com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class ParameterUtilsTest {\n+\n+  private static final Long DEFAULT_START_TIME_MS = -1L;\n+  private static final Long DEFAULT_END_TIME_MS = -2L;\n+  private static final String START_TIME_STRING = \"12345\";\n+  private static final String END_TIME_STRING = \"23456\";\n+  private static final String REPLICATION_THROTTLE_STRING = \"1000\";\n+  private static final String DEFAULT_REPLICATION_THROTTLE_STRING = \"2000\";\n+  private static final String EXECUTION_PROGRESS_CHECK_INTERVAL_STRING = \"1500\";\n+\n+  @Test\n+  public void testParseTimeRangeSet() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    Map<String, String[]> paramMap = new HashMap<>();\n+    paramMap.put(ParameterUtils.START_MS_PARAM, new String[]{ParameterUtils.START_MS_PARAM});\n+    paramMap.put(ParameterUtils.END_MS_PARAM, new String[]{ParameterUtils.END_MS_PARAM});\n+\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(paramMap).times(4);\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.START_MS_PARAM)).andReturn(START_TIME_STRING).times(2);\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.END_MS_PARAM)).andReturn(END_TIME_STRING).times(2);\n+    EasyMock.replay(mockRequest);\n+\n+    Long startMs = ParameterUtils.startMsOrDefault(mockRequest, null);\n+    Long endMs = ParameterUtils.endMsOrDefault(mockRequest, null);\n+    Assert.assertNotNull(startMs);\n+    Assert.assertNotNull(endMs);\n+    Assert.assertEquals(Long.valueOf(START_TIME_STRING), startMs);\n+    Assert.assertEquals(Long.valueOf(END_TIME_STRING), endMs);\n+    ParameterUtils.validateTimeRange(startMs, endMs);\n+\n+    startMs = ParameterUtils.startMsOrDefault(mockRequest, DEFAULT_START_TIME_MS);\n+    endMs = ParameterUtils.endMsOrDefault(mockRequest, DEFAULT_END_TIME_MS);\n+\n+    Assert.assertEquals(Long.valueOf(START_TIME_STRING), startMs);\n+    Assert.assertEquals(Long.valueOf(END_TIME_STRING), endMs);\n+  }\n+\n+  @Test\n+  public void testParseTimeRangeNotSet() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    // Mock the request so that it does not contain start/end time\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(Collections.emptyMap()).times(4);\n+    EasyMock.replay(mockRequest);\n+\n+    Long startMs = ParameterUtils.startMsOrDefault(mockRequest, null);\n+    Long endMs = ParameterUtils.endMsOrDefault(mockRequest, null);\n+    Assert.assertNull(startMs);\n+    Assert.assertNull(endMs);\n+\n+    startMs = ParameterUtils.startMsOrDefault(mockRequest, DEFAULT_START_TIME_MS);\n+    endMs = ParameterUtils.endMsOrDefault(mockRequest, DEFAULT_END_TIME_MS);\n+\n+    Assert.assertEquals(DEFAULT_START_TIME_MS, startMs);\n+    Assert.assertEquals(DEFAULT_END_TIME_MS, endMs);\n+  }\n+\n+  @Test\n+  public void testParseReplicationThrottleWithNoDefault() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    KafkaCruiseControlConfig controlConfig = EasyMock.mock(KafkaCruiseControlConfig.class);\n+\n+    Map<String, String[]> paramMap = new HashMap<>();\n+    paramMap.put(ParameterUtils.REPLICATION_THROTTLE_PARAM, new String[]{ParameterUtils.REPLICATION_THROTTLE_PARAM});\n+\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(paramMap).times(1);", "originalCommit": "b153fe1064f5db645ae9c4511732b4dfc81e78d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzNzc5Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r510337793", "bodyText": "(One more similar use above):\nNit: This is a map with a single element -- should we use a singletonMap? -- i.e.\n    Map<String, String[]> paramMap = Collections.singletonMap(ParameterUtils.EXECUTION_PROGRESS_CHECK_INTERVAL_MS_PARAM,\n                                                              new String[]{ParameterUtils.EXECUTION_PROGRESS_CHECK_INTERVAL_MS_PARAM});", "author": "efeg", "createdAt": "2020-10-22T17:31:28Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.parameters;\n+\n+import com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class ParameterUtilsTest {\n+\n+  private static final Long DEFAULT_START_TIME_MS = -1L;\n+  private static final Long DEFAULT_END_TIME_MS = -2L;\n+  private static final String START_TIME_STRING = \"12345\";\n+  private static final String END_TIME_STRING = \"23456\";\n+  private static final String REPLICATION_THROTTLE_STRING = \"1000\";\n+  private static final String DEFAULT_REPLICATION_THROTTLE_STRING = \"2000\";\n+  private static final String EXECUTION_PROGRESS_CHECK_INTERVAL_STRING = \"1500\";\n+\n+  @Test\n+  public void testParseTimeRangeSet() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    Map<String, String[]> paramMap = new HashMap<>();\n+    paramMap.put(ParameterUtils.START_MS_PARAM, new String[]{ParameterUtils.START_MS_PARAM});\n+    paramMap.put(ParameterUtils.END_MS_PARAM, new String[]{ParameterUtils.END_MS_PARAM});\n+\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(paramMap).times(4);\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.START_MS_PARAM)).andReturn(START_TIME_STRING).times(2);\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.END_MS_PARAM)).andReturn(END_TIME_STRING).times(2);\n+    EasyMock.replay(mockRequest);\n+\n+    Long startMs = ParameterUtils.startMsOrDefault(mockRequest, null);\n+    Long endMs = ParameterUtils.endMsOrDefault(mockRequest, null);\n+    Assert.assertNotNull(startMs);\n+    Assert.assertNotNull(endMs);\n+    Assert.assertEquals(Long.valueOf(START_TIME_STRING), startMs);\n+    Assert.assertEquals(Long.valueOf(END_TIME_STRING), endMs);\n+    ParameterUtils.validateTimeRange(startMs, endMs);\n+\n+    startMs = ParameterUtils.startMsOrDefault(mockRequest, DEFAULT_START_TIME_MS);\n+    endMs = ParameterUtils.endMsOrDefault(mockRequest, DEFAULT_END_TIME_MS);\n+\n+    Assert.assertEquals(Long.valueOf(START_TIME_STRING), startMs);\n+    Assert.assertEquals(Long.valueOf(END_TIME_STRING), endMs);\n+  }\n+\n+  @Test\n+  public void testParseTimeRangeNotSet() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    // Mock the request so that it does not contain start/end time\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(Collections.emptyMap()).times(4);\n+    EasyMock.replay(mockRequest);\n+\n+    Long startMs = ParameterUtils.startMsOrDefault(mockRequest, null);\n+    Long endMs = ParameterUtils.endMsOrDefault(mockRequest, null);\n+    Assert.assertNull(startMs);\n+    Assert.assertNull(endMs);\n+\n+    startMs = ParameterUtils.startMsOrDefault(mockRequest, DEFAULT_START_TIME_MS);\n+    endMs = ParameterUtils.endMsOrDefault(mockRequest, DEFAULT_END_TIME_MS);\n+\n+    Assert.assertEquals(DEFAULT_START_TIME_MS, startMs);\n+    Assert.assertEquals(DEFAULT_END_TIME_MS, endMs);\n+  }\n+\n+  @Test\n+  public void testParseReplicationThrottleWithNoDefault() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    KafkaCruiseControlConfig controlConfig = EasyMock.mock(KafkaCruiseControlConfig.class);\n+\n+    Map<String, String[]> paramMap = new HashMap<>();\n+    paramMap.put(ParameterUtils.REPLICATION_THROTTLE_PARAM, new String[]{ParameterUtils.REPLICATION_THROTTLE_PARAM});\n+\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(paramMap).times(1);\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.REPLICATION_THROTTLE_PARAM)).andReturn(REPLICATION_THROTTLE_STRING).times(1);\n+    EasyMock.expect(controlConfig.getLong(ExecutorConfig.DEFAULT_REPLICATION_THROTTLE_CONFIG)).andReturn(null); // No default\n+\n+    EasyMock.replay(mockRequest);\n+    EasyMock.replay(controlConfig);\n+\n+    Long replicationThrottle = ParameterUtils.replicationThrottle(mockRequest, controlConfig);\n+    Assert.assertEquals(Long.valueOf(REPLICATION_THROTTLE_STRING), replicationThrottle);\n+  }\n+\n+  @Test\n+  public void testParseReplicationThrottleWithDefault() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    KafkaCruiseControlConfig controlConfig = EasyMock.mock(KafkaCruiseControlConfig.class);\n+    // No parameter string value in the parameter map\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(Collections.emptyMap()).times(1);\n+    EasyMock.expect(controlConfig.getLong(ExecutorConfig.DEFAULT_REPLICATION_THROTTLE_CONFIG))\n+            .andReturn(Long.valueOf(DEFAULT_REPLICATION_THROTTLE_STRING));\n+\n+    EasyMock.replay(mockRequest);\n+    EasyMock.replay(controlConfig);\n+\n+    Long replicationThrottle = ParameterUtils.replicationThrottle(mockRequest, controlConfig);\n+    Assert.assertEquals(Long.valueOf(DEFAULT_REPLICATION_THROTTLE_STRING), replicationThrottle);\n+  }\n+\n+  @Test\n+  public void testParseExecutionProgressCheckIntervalMsNoValue() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(Collections.emptyMap()).times(1);\n+    EasyMock.replay(mockRequest);\n+    Assert.assertNull(ParameterUtils.executionProgressCheckIntervalMs(mockRequest));\n+  }\n+\n+  @Test\n+  public void testParseExecutionProgressCheckIntervalMsWithValue() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+\n+    Map<String, String[]> paramMap = new HashMap<>();\n+    paramMap.put(\n+        ParameterUtils.EXECUTION_PROGRESS_CHECK_INTERVAL_MS_PARAM,\n+        new String[]{ParameterUtils.EXECUTION_PROGRESS_CHECK_INTERVAL_MS_PARAM});", "originalCommit": "b153fe1064f5db645ae9c4511732b4dfc81e78d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzODk2OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r510338969", "bodyText": "Looks the mocks are not verified in tests -- i.e. there is no actual verification of whether mock functions are called or how many times they are called.\nCan we call EasyMock.verify(...) for each test after mocks are replayed and actual calls are made?", "author": "efeg", "createdAt": "2020-10-22T17:33:26Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.parameters;\n+\n+import com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class ParameterUtilsTest {", "originalCommit": "b153fe1064f5db645ae9c4511732b4dfc81e78d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MDEyMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1357#discussion_r510340121", "bodyText": "(There are other similar uses in this test):\nThis function takes Object... as input; hence, we can pass all mocks in a single call rather than sequential calls.", "author": "efeg", "createdAt": "2020-10-22T17:35:15Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.servlet.parameters;\n+\n+import com.linkedin.kafka.cruisecontrol.config.KafkaCruiseControlConfig;\n+import com.linkedin.kafka.cruisecontrol.config.constants.ExecutorConfig;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+\n+public class ParameterUtilsTest {\n+\n+  private static final Long DEFAULT_START_TIME_MS = -1L;\n+  private static final Long DEFAULT_END_TIME_MS = -2L;\n+  private static final String START_TIME_STRING = \"12345\";\n+  private static final String END_TIME_STRING = \"23456\";\n+  private static final String REPLICATION_THROTTLE_STRING = \"1000\";\n+  private static final String DEFAULT_REPLICATION_THROTTLE_STRING = \"2000\";\n+  private static final String EXECUTION_PROGRESS_CHECK_INTERVAL_STRING = \"1500\";\n+\n+  @Test\n+  public void testParseTimeRangeSet() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    Map<String, String[]> paramMap = new HashMap<>();\n+    paramMap.put(ParameterUtils.START_MS_PARAM, new String[]{ParameterUtils.START_MS_PARAM});\n+    paramMap.put(ParameterUtils.END_MS_PARAM, new String[]{ParameterUtils.END_MS_PARAM});\n+\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(paramMap).times(4);\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.START_MS_PARAM)).andReturn(START_TIME_STRING).times(2);\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.END_MS_PARAM)).andReturn(END_TIME_STRING).times(2);\n+    EasyMock.replay(mockRequest);\n+\n+    Long startMs = ParameterUtils.startMsOrDefault(mockRequest, null);\n+    Long endMs = ParameterUtils.endMsOrDefault(mockRequest, null);\n+    Assert.assertNotNull(startMs);\n+    Assert.assertNotNull(endMs);\n+    Assert.assertEquals(Long.valueOf(START_TIME_STRING), startMs);\n+    Assert.assertEquals(Long.valueOf(END_TIME_STRING), endMs);\n+    ParameterUtils.validateTimeRange(startMs, endMs);\n+\n+    startMs = ParameterUtils.startMsOrDefault(mockRequest, DEFAULT_START_TIME_MS);\n+    endMs = ParameterUtils.endMsOrDefault(mockRequest, DEFAULT_END_TIME_MS);\n+\n+    Assert.assertEquals(Long.valueOf(START_TIME_STRING), startMs);\n+    Assert.assertEquals(Long.valueOf(END_TIME_STRING), endMs);\n+  }\n+\n+  @Test\n+  public void testParseTimeRangeNotSet() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    // Mock the request so that it does not contain start/end time\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(Collections.emptyMap()).times(4);\n+    EasyMock.replay(mockRequest);\n+\n+    Long startMs = ParameterUtils.startMsOrDefault(mockRequest, null);\n+    Long endMs = ParameterUtils.endMsOrDefault(mockRequest, null);\n+    Assert.assertNull(startMs);\n+    Assert.assertNull(endMs);\n+\n+    startMs = ParameterUtils.startMsOrDefault(mockRequest, DEFAULT_START_TIME_MS);\n+    endMs = ParameterUtils.endMsOrDefault(mockRequest, DEFAULT_END_TIME_MS);\n+\n+    Assert.assertEquals(DEFAULT_START_TIME_MS, startMs);\n+    Assert.assertEquals(DEFAULT_END_TIME_MS, endMs);\n+  }\n+\n+  @Test\n+  public void testParseReplicationThrottleWithNoDefault() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    KafkaCruiseControlConfig controlConfig = EasyMock.mock(KafkaCruiseControlConfig.class);\n+\n+    Map<String, String[]> paramMap = new HashMap<>();\n+    paramMap.put(ParameterUtils.REPLICATION_THROTTLE_PARAM, new String[]{ParameterUtils.REPLICATION_THROTTLE_PARAM});\n+\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(paramMap).times(1);\n+    EasyMock.expect(mockRequest.getParameter(ParameterUtils.REPLICATION_THROTTLE_PARAM)).andReturn(REPLICATION_THROTTLE_STRING).times(1);\n+    EasyMock.expect(controlConfig.getLong(ExecutorConfig.DEFAULT_REPLICATION_THROTTLE_CONFIG)).andReturn(null); // No default\n+\n+    EasyMock.replay(mockRequest);\n+    EasyMock.replay(controlConfig);\n+\n+    Long replicationThrottle = ParameterUtils.replicationThrottle(mockRequest, controlConfig);\n+    Assert.assertEquals(Long.valueOf(REPLICATION_THROTTLE_STRING), replicationThrottle);\n+  }\n+\n+  @Test\n+  public void testParseReplicationThrottleWithDefault() {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    KafkaCruiseControlConfig controlConfig = EasyMock.mock(KafkaCruiseControlConfig.class);\n+    // No parameter string value in the parameter map\n+    EasyMock.expect(mockRequest.getParameterMap()).andReturn(Collections.emptyMap()).times(1);\n+    EasyMock.expect(controlConfig.getLong(ExecutorConfig.DEFAULT_REPLICATION_THROTTLE_CONFIG))\n+            .andReturn(Long.valueOf(DEFAULT_REPLICATION_THROTTLE_STRING));\n+\n+    EasyMock.replay(mockRequest);\n+    EasyMock.replay(controlConfig);", "originalCommit": "b153fe1064f5db645ae9c4511732b4dfc81e78d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fb653eac73493a95ecf40d68143809ef43ace5d4", "url": "https://github.com/linkedin/cruise-control/commit/fb653eac73493a95ecf40d68143809ef43ace5d4", "message": "Verify mocks in unit test", "committedDate": "2020-10-22T21:13:03Z", "type": "commit"}, {"oid": "0f9d423538a5c317d4160440185ae999607ba088", "url": "https://github.com/linkedin/cruise-control/commit/0f9d423538a5c317d4160440185ae999607ba088", "message": "Use singleton map", "committedDate": "2020-10-22T21:17:05Z", "type": "commit"}, {"oid": "4618f96f3c1a74697175980cd4299f51ccf3e9b2", "url": "https://github.com/linkedin/cruise-control/commit/4618f96f3c1a74697175980cd4299f51ccf3e9b2", "message": "Replace all times(1) with once()", "committedDate": "2020-10-22T21:24:05Z", "type": "commit"}]}