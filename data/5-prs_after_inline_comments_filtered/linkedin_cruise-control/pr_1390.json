{"pr_number": 1390, "pr_title": "Convert traditional null checks to use Utils.validateNotNull", "pr_createdAt": "2020-11-17T19:50:52Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1390", "timeline": [{"oid": "d245f49e766cb767a53cf44aa18b0289275678a3", "url": "https://github.com/linkedin/cruise-control/commit/d245f49e766cb767a53cf44aa18b0289275678a3", "message": "Converts traditional null checks to use Objects.requireNonNull where applicable. Issue #1387.", "committedDate": "2020-11-17T17:17:51Z", "type": "commit"}, {"oid": "eb777ac49973f2814f89e1c09aed4b91257cd431", "url": "https://github.com/linkedin/cruise-control/commit/eb777ac49973f2814f89e1c09aed4b91257cd431", "message": "Add two static methods to the Utils class that check object reference for nullity. Issue #1387.", "committedDate": "2020-11-19T14:23:52Z", "type": "commit"}, {"oid": "5a502098d4d93c09d0ad31d6da48fff324844079", "url": "https://github.com/linkedin/cruise-control/commit/5a502098d4d93c09d0ad31d6da48fff324844079", "message": "Modify the static methods validateNotNull to throw an IllegalArgumentException instead of a NullpointerException, if specified object reference is null. Issue #1387.", "committedDate": "2020-11-19T17:21:16Z", "type": "commit"}, {"oid": "bfe80c160802c8d85005a12f126e5ea773f39b85", "url": "https://github.com/linkedin/cruise-control/commit/bfe80c160802c8d85005a12f126e5ea773f39b85", "message": "Refactor static methods validateNotNull in Utils class. Issue #1387.", "committedDate": "2020-11-19T18:27:20Z", "type": "commit"}, {"oid": "053d1535d22775aef7171d40aab5409005f51658", "url": "https://github.com/linkedin/cruise-control/commit/053d1535d22775aef7171d40aab5409005f51658", "message": "Convert traditional null checks to use Utils.validateNotNull. Issue #1387", "committedDate": "2020-11-19T18:34:59Z", "type": "commit"}, {"oid": "504f696ebbdb98f9b4712e93c4d722a6f8510cbf", "url": "https://github.com/linkedin/cruise-control/commit/504f696ebbdb98f9b4712e93c4d722a6f8510cbf", "message": "Fix a typo.", "committedDate": "2020-11-19T18:52:06Z", "type": "commit"}, {"oid": "169fb36b7cda8c53d762868e83e4333c558418a4", "url": "https://github.com/linkedin/cruise-control/commit/169fb36b7cda8c53d762868e83e4333c558418a4", "message": "Remove unused import in Utils class.\nRevert back to using traditional null check in Broker constructor, due to failed checks.", "committedDate": "2020-11-19T19:42:58Z", "type": "commit"}, {"oid": "88d5af655a4c654d502cc432bdbada29c75fa799", "url": "https://github.com/linkedin/cruise-control/commit/88d5af655a4c654d502cc432bdbada29c75fa799", "message": "Refactor static validateNotNull methods in Utils class to comply to style rules.", "committedDate": "2020-11-19T19:51:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwOTYwMA==", "url": "https://github.com/linkedin/cruise-control/pull/1390#discussion_r527209600", "bodyText": "I think this is exactly the case where the lazy-evaluation validateNotNull(T obj, Supplier<String> errorMsgSupplier) method needs to be used since in the previous version, \"The destination broker cannot be null for balancing action \" + this does not get executed unless _destinationBrokerId == null is true. So, the change should be:\nvalidateNotNull(_destinationBrokerId, () -> \"The destination broker cannot be null for balancing action \" + this);", "author": "Lincong", "createdAt": "2020-11-19T21:26:57Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/BalancingAction.java", "diffHunk": "@@ -127,41 +129,29 @@ private BalancingAction(TopicPartition sourceTp,\n   private void validate() {\n     switch (_actionType) {\n       case REPLICA_ADDITION:\n-        if (_destinationBrokerId == null) {\n-          throw new IllegalArgumentException(\"The destination broker cannot be null for balancing action \" + this);\n-        } else if (_sourceBrokerId != null) {\n+        validateNotNull(_destinationBrokerId, \"The destination broker cannot be null for balancing action \" + this);", "originalCommit": "88d5af655a4c654d502cc432bdbada29c75fa799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwOTk5MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1390#discussion_r527209991", "bodyText": "Same issue. Use lazy evaluation.", "author": "Lincong", "createdAt": "2020-11-19T21:27:44Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/BalancingAction.java", "diffHunk": "@@ -127,41 +129,29 @@ private BalancingAction(TopicPartition sourceTp,\n   private void validate() {\n     switch (_actionType) {\n       case REPLICA_ADDITION:\n-        if (_destinationBrokerId == null) {\n-          throw new IllegalArgumentException(\"The destination broker cannot be null for balancing action \" + this);\n-        } else if (_sourceBrokerId != null) {\n+        validateNotNull(_destinationBrokerId, \"The destination broker cannot be null for balancing action \" + this);\n+        if (_sourceBrokerId != null) {\n           throw new IllegalArgumentException(\"The source broker should be null for balancing action \" + this);\n         }\n         break;\n       case REPLICA_DELETION:\n         if (_destinationBrokerId != null) {\n           throw new IllegalArgumentException(\"The destination broker should be null for balancing action \" + this);\n-        } else if (_sourceBrokerId == null) {\n-      throw new IllegalArgumentException(\"The source broker cannot be null for balancing action \" + this);\n         }\n+        validateNotNull(_sourceBrokerId, \"The source broker cannot be null for balancing action \" + this);", "originalCommit": "88d5af655a4c654d502cc432bdbada29c75fa799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxMDA1Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1390#discussion_r527210052", "bodyText": "Same issue. Use lazy evaluation.", "author": "Lincong", "createdAt": "2020-11-19T21:27:52Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/BalancingAction.java", "diffHunk": "@@ -127,41 +129,29 @@ private BalancingAction(TopicPartition sourceTp,\n   private void validate() {\n     switch (_actionType) {\n       case REPLICA_ADDITION:\n-        if (_destinationBrokerId == null) {\n-          throw new IllegalArgumentException(\"The destination broker cannot be null for balancing action \" + this);\n-        } else if (_sourceBrokerId != null) {\n+        validateNotNull(_destinationBrokerId, \"The destination broker cannot be null for balancing action \" + this);\n+        if (_sourceBrokerId != null) {\n           throw new IllegalArgumentException(\"The source broker should be null for balancing action \" + this);\n         }\n         break;\n       case REPLICA_DELETION:\n         if (_destinationBrokerId != null) {\n           throw new IllegalArgumentException(\"The destination broker should be null for balancing action \" + this);\n-        } else if (_sourceBrokerId == null) {\n-      throw new IllegalArgumentException(\"The source broker cannot be null for balancing action \" + this);\n         }\n+        validateNotNull(_sourceBrokerId, \"The source broker cannot be null for balancing action \" + this);\n         break;\n       case INTER_BROKER_REPLICA_MOVEMENT:\n       case LEADERSHIP_MOVEMENT:\n       case INTER_BROKER_REPLICA_SWAP:\n-        if (_destinationBrokerId == null) {\n-          throw new IllegalArgumentException(\"The destination broker cannot be null for balancing action \" + this);\n-        } else if (_sourceBrokerId == null) {\n-          throw new IllegalArgumentException(\"The source broker cannot be null for balancing action \" + this);\n-        }\n+        validateNotNull(_destinationBrokerId, \"The destination broker cannot be null for balancing action \" + this);", "originalCommit": "88d5af655a4c654d502cc432bdbada29c75fa799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxMDcyMg==", "url": "https://github.com/linkedin/cruise-control/pull/1390#discussion_r527210722", "bodyText": "Since validateNotNull  returns the object if it's not null, you can do:\n_excludedTopics = validateNotNull(excludedTopics, \"Excluded topics cannot be null.\");\n_excludedBrokersForLeadership = validateNotNull(excludedBrokersForLeadership, \"Excluded brokers for leadership cannot be null.\");\n...", "author": "Lincong", "createdAt": "2020-11-19T21:29:10Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/OptimizationOptions.java", "diffHunk": "@@ -73,15 +75,10 @@ public OptimizationOptions(Set<String> excludedTopics,\n                              boolean isTriggeredByGoalViolation,\n                              Set<Integer> requestedDestinationBrokerIds,\n                              boolean onlyMoveImmigrantReplicas) {\n-    if (excludedTopics == null) {\n-      throw new IllegalArgumentException(\"Excluded topics cannot be null.\");\n-    } else if (excludedBrokersForLeadership == null) {\n-      throw new IllegalArgumentException(\"Excluded brokers for leadership cannot be null.\");\n-    } else if (excludedBrokersForReplicaMove == null) {\n-      throw new IllegalArgumentException(\"Excluded brokers for replica move cannot be null.\");\n-    } else if (requestedDestinationBrokerIds == null) {\n-      throw new IllegalArgumentException(\"Requested destination broker ids cannot be null.\");\n-    }\n+    validateNotNull(excludedTopics, \"Excluded topics cannot be null.\");", "originalCommit": "88d5af655a4c654d502cc432bdbada29c75fa799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxMTIzMg==", "url": "https://github.com/linkedin/cruise-control/pull/1390#discussion_r527211232", "bodyText": "We can do return validateNotNull(...)", "author": "Lincong", "createdAt": "2020-11-19T21:30:04Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyUtils.java", "diffHunk": "@@ -35,10 +36,8 @@ private AnomalyUtils() {\n   public static KafkaCruiseControl extractKafkaCruiseControlObjectFromConfig(Map<String, ?> configs,\n                                                                             AnomalyType anomalyType) {\n     KafkaCruiseControl kafkaCruiseControl = (KafkaCruiseControl) configs.get(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG);\n-    if (kafkaCruiseControl == null) {\n-      throw new IllegalArgumentException(String.format(\"Missing %s when creating anomaly of type %s.\",\n-                                                       KAFKA_CRUISE_CONTROL_OBJECT_CONFIG, anomalyType));\n-    }\n+    validateNotNull(kafkaCruiseControl, String.format(\"Missing %s when creating anomaly of type %s.\",", "originalCommit": "88d5af655a4c654d502cc432bdbada29c75fa799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxMTQzOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1390#discussion_r527211439", "bodyText": "Same issue: _uuid  = validateNotNull(uuid, \"UUID of the execution cannot be null.\");", "author": "Lincong", "createdAt": "2020-11-19T21:30:29Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/Executor.java", "diffHunk": "@@ -739,12 +740,8 @@ public synchronized void setGeneratingProposalsForExecution(String uuid, Supplie\n     if (currentExecutorState != NO_TASK_IN_PROGRESS) {\n       throw new OngoingExecutionException(String.format(\"Cannot generate proposals while the executor is in %s state.\", currentExecutorState));\n     }\n-    if (uuid == null) {\n-      throw new IllegalArgumentException(\"UUID of the execution cannot be null.\");\n-    }\n-    if (reasonSupplier == null) {\n-      throw new IllegalArgumentException(\"Reason supplier cannot be null.\");\n-    }\n+    validateNotNull(uuid, \"UUID of the execution cannot be null.\");", "originalCommit": "88d5af655a4c654d502cc432bdbada29c75fa799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "179bd3d4acd6b268c715449b2414873693344f6a", "url": "https://github.com/linkedin/cruise-control/commit/179bd3d4acd6b268c715449b2414873693344f6a", "message": "Use lazy evaluation when error message is dynamically generated in ValidateNotNull method.\nUse the return value from the validateNotNull method directly where applicable.\nIssue #1387", "committedDate": "2020-11-20T00:31:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM3MTM2Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1390#discussion_r527371367", "bodyText": "Instead of reusing the error message, I think we can be more specific by:\n_recentlyRemovedBrokers = validateNotNull(recentlyRemovedBrokers, \"Attempt to set a null value for recent removed brokers.\");\n_recentlyDemotedBrokers = validateNotNull(recentlyDemotedBrokers, \"Attempt to set a null value for recent demoted brokers.\");", "author": "Lincong", "createdAt": "2020-11-20T03:31:09Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/handler/async/runnable/RunnableUtils.java", "diffHunk": "@@ -354,11 +355,9 @@ public static void sanityCheckOfflineReplicaPresence(ClusterModel clusterModel)\n     private final Set<Integer> _recentlyDemotedBrokers;\n \n     public RecentBrokers(Set<Integer> recentlyRemovedBrokers, Set<Integer> recentlyDemotedBrokers) {\n-      if (recentlyRemovedBrokers == null || recentlyDemotedBrokers == null) {\n-        throw new IllegalArgumentException(\"Attempt to set a null value for recent brokers.\");\n-      }\n-      _recentlyRemovedBrokers = recentlyRemovedBrokers;\n-      _recentlyDemotedBrokers = recentlyDemotedBrokers;\n+      String errorMsg = \"Attempt to set a null value for recent brokers.\";", "originalCommit": "179bd3d4acd6b268c715449b2414873693344f6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1NDMyMw==", "url": "https://github.com/linkedin/cruise-control/pull/1390#discussion_r527654323", "bodyText": "Thanks for your input. I've made the error message more specific.", "author": "MA-Burhan", "createdAt": "2020-11-20T12:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM3MTM2Nw=="}], "type": "inlineReview"}, {"oid": "3628bee6abec6e2edada10620290aa3a5cb22ede", "url": "https://github.com/linkedin/cruise-control/commit/3628bee6abec6e2edada10620290aa3a5cb22ede", "message": "Make error message for validateNotNoll method in RunnableUtils.RecentBrokers constructor more specific.", "committedDate": "2020-11-20T12:16:37Z", "type": "commit"}]}