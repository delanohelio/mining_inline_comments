{"pr_number": 1385, "pr_title": "Ensure that resource distribution goals compute balance constraints properly", "pr_createdAt": "2020-11-12T23:31:44Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1385", "timeline": [{"oid": "cdd28be34c154942e13e8306f3b184e6ce92599b", "url": "https://github.com/linkedin/cruise-control/commit/cdd28be34c154942e13e8306f3b184e6ce92599b", "message": "Ensure that resource distribution goals compute balance constraints properly\n* Ensure that CpuUsageDistributionGoal, DiskUsageDistributionGoal, NetworkInboundUsageDistributionGoal, NetworkOutboundUsageDistributionGoal, DiskCapacityGoal, NetworkInboundCapacityGoal, NetworkOutboundCapacityGoal, CpuCapacityGoal, LeaderBytesInDistributionGoal do not include brokers excluded for replica moves while computing balance constraints (PotentialNwOutGoal does not need further changes).", "committedDate": "2020-11-12T23:20:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4Mzc0Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1385#discussion_r523383747", "bodyText": "Nit: in another project of mine, I have the following util method since doing the null check is quite common.\n  public static <T> T validateNotNull(T obj, String objName) {\n    Objects.requireNonNull(obj, objName + \" cannot be null.\");\n    return obj;\n  }", "author": "Lincong", "createdAt": "2020-11-14T06:23:21Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/analyzer/OptimizationOptions.java", "diffHunk": "@@ -73,6 +73,15 @@ public OptimizationOptions(Set<String> excludedTopics,\n                              boolean isTriggeredByGoalViolation,\n                              Set<Integer> requestedDestinationBrokerIds,\n                              boolean onlyMoveImmigrantReplicas) {\n+    if (excludedTopics == null) {", "originalCommit": "cdd28be34c154942e13e8306f3b184e6ce92599b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5MzA5MA==", "url": "https://github.com/linkedin/cruise-control/pull/1385#discussion_r523793090", "bodyText": "Sure, that sounds good. Created #1387 to make this case globally rather than case by case.", "author": "efeg", "createdAt": "2020-11-15T18:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4Mzc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NDYwNg==", "url": "https://github.com/linkedin/cruise-control/pull/1385#discussion_r523384606", "bodyText": "Is there any chance for the denominator (return value of the below method) to be 0?\nclusterModel.capacityWithAllowedReplicaMovesFor(resource, optimizationOptions);", "author": "Lincong", "createdAt": "2020-11-14T06:33:57Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/model/ClusterModelStats.java", "diffHunk": "@@ -257,42 +248,48 @@ public String toString() {\n \n   /**\n    * Generate statistics of utilization for resources among alive brokers in the given cluster.\n+   * Average and standard deviation calculations are based on brokers not excluded for replica moves.\n    *\n    * @param clusterModel The state of the cluster.\n+   * @param optimizationOptions Options to take into account while retrieving cluster capacity.\n    */\n-  private void utilizationForResources(ClusterModel clusterModel) {\n+  private void utilizationForResources(ClusterModel clusterModel, OptimizationOptions optimizationOptions) {\n     // Average, maximum, and standard deviation of utilization by resource.\n-    Map<Resource, Double> avgUtilizationByResource = new HashMap<>();\n-    Map<Resource, Double> maxUtilizationByResource = new HashMap<>();\n-    Map<Resource, Double> minUtilizationByResource = new HashMap<>();\n-    Map<Resource, Double> stDevUtilizationByResource = new HashMap<>();\n+    Map<Resource, Double> avgUtilizationByResource = new HashMap<>(Resource.cachedValues().size());\n+    Map<Resource, Double> maxUtilizationByResource = new HashMap<>(Resource.cachedValues().size());\n+    Map<Resource, Double> minUtilizationByResource = new HashMap<>(Resource.cachedValues().size());\n+    Map<Resource, Double> stDevUtilizationByResource = new HashMap<>(Resource.cachedValues().size());\n     for (Resource resource : Resource.cachedValues()) {\n-      double avgUtilizationPercentage = clusterModel.load().expectedUtilizationFor(resource) / clusterModel.capacityFor(resource);\n+      double resourceUtilization = clusterModel.load().expectedUtilizationFor(resource);\n+      double avgUtilizationPercentage = resourceUtilization / clusterModel.capacityWithAllowedReplicaMovesFor(resource, optimizationOptions);", "originalCommit": "cdd28be34c154942e13e8306f3b184e6ce92599b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5MzA5Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1385#discussion_r523793093", "bodyText": "TL;DR. Yes, and that is expected and acceptable for cluster model stats.\n--\nModel stats for resource utilization presents min, max, std, and average. Division by zero makes the average and the std infinity. This can happen when the cluster has no load to balance. ExcludedBrokersForReplicaMoveTest has test cases that triggers this scenario (e.g. please see tid=2 for resource distribution goals).", "author": "efeg", "createdAt": "2020-11-15T18:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NDYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NDc0MA==", "url": "https://github.com/linkedin/cruise-control/pull/1385#discussion_r523384740", "bodyText": "Nit: I'd do:\nfinal int resourceCachedValueSize = Resource.cachedValues().size();\nMap<Resource, Double> maxUtilizationByResource = new HashMap<>(resourceCachedValueSize);\n...", "author": "Lincong", "createdAt": "2020-11-14T06:35:04Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/model/ClusterModelStats.java", "diffHunk": "@@ -257,42 +248,48 @@ public String toString() {\n \n   /**\n    * Generate statistics of utilization for resources among alive brokers in the given cluster.\n+   * Average and standard deviation calculations are based on brokers not excluded for replica moves.\n    *\n    * @param clusterModel The state of the cluster.\n+   * @param optimizationOptions Options to take into account while retrieving cluster capacity.\n    */\n-  private void utilizationForResources(ClusterModel clusterModel) {\n+  private void utilizationForResources(ClusterModel clusterModel, OptimizationOptions optimizationOptions) {\n     // Average, maximum, and standard deviation of utilization by resource.\n-    Map<Resource, Double> avgUtilizationByResource = new HashMap<>();\n-    Map<Resource, Double> maxUtilizationByResource = new HashMap<>();\n-    Map<Resource, Double> minUtilizationByResource = new HashMap<>();\n-    Map<Resource, Double> stDevUtilizationByResource = new HashMap<>();\n+    Map<Resource, Double> avgUtilizationByResource = new HashMap<>(Resource.cachedValues().size());", "originalCommit": "cdd28be34c154942e13e8306f3b184e6ce92599b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5MzA5OA==", "url": "https://github.com/linkedin/cruise-control/pull/1385#discussion_r523793098", "bodyText": "I'd prefer not using the proposed approach -- please see my answer on when I think we should use the final keyword.", "author": "efeg", "createdAt": "2020-11-15T18:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NDc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NTA0MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1385#discussion_r523385041", "bodyText": "Nit: Maybe it's a personal preference. But I'd name this variable numBalancedAllowedReplocaMoveBrokers", "author": "Lincong", "createdAt": "2020-11-14T06:38:28Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/model/ClusterModelStats.java", "diffHunk": "@@ -257,42 +248,48 @@ public String toString() {\n \n   /**\n    * Generate statistics of utilization for resources among alive brokers in the given cluster.\n+   * Average and standard deviation calculations are based on brokers not excluded for replica moves.\n    *\n    * @param clusterModel The state of the cluster.\n+   * @param optimizationOptions Options to take into account while retrieving cluster capacity.\n    */\n-  private void utilizationForResources(ClusterModel clusterModel) {\n+  private void utilizationForResources(ClusterModel clusterModel, OptimizationOptions optimizationOptions) {\n     // Average, maximum, and standard deviation of utilization by resource.\n-    Map<Resource, Double> avgUtilizationByResource = new HashMap<>();\n-    Map<Resource, Double> maxUtilizationByResource = new HashMap<>();\n-    Map<Resource, Double> minUtilizationByResource = new HashMap<>();\n-    Map<Resource, Double> stDevUtilizationByResource = new HashMap<>();\n+    Map<Resource, Double> avgUtilizationByResource = new HashMap<>(Resource.cachedValues().size());\n+    Map<Resource, Double> maxUtilizationByResource = new HashMap<>(Resource.cachedValues().size());\n+    Map<Resource, Double> minUtilizationByResource = new HashMap<>(Resource.cachedValues().size());\n+    Map<Resource, Double> stDevUtilizationByResource = new HashMap<>(Resource.cachedValues().size());\n     for (Resource resource : Resource.cachedValues()) {\n-      double avgUtilizationPercentage = clusterModel.load().expectedUtilizationFor(resource) / clusterModel.capacityFor(resource);\n+      double resourceUtilization = clusterModel.load().expectedUtilizationFor(resource);\n+      double avgUtilizationPercentage = resourceUtilization / clusterModel.capacityWithAllowedReplicaMovesFor(resource, optimizationOptions);\n       double balanceUpperThreshold = avgUtilizationPercentage * _balancingConstraint.resourceBalancePercentage(resource);\n       double balanceLowerThreshold = avgUtilizationPercentage * Math.max(0, (2 - _balancingConstraint.resourceBalancePercentage(resource)));\n       // Maximum, minimum, and standard deviation utilization for the resource.\n       double hottestBrokerUtilization = 0.0;\n       double coldestBrokerUtilization = Double.MAX_VALUE;\n       double varianceSum = 0.0;\n-      int numBalancedBrokers = 0;\n+      int numBalancedBrokersInBrokersAllowedReplicaMove = 0;", "originalCommit": "cdd28be34c154942e13e8306f3b184e6ce92599b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5MzEwMg==", "url": "https://github.com/linkedin/cruise-control/pull/1385#discussion_r523793102", "bodyText": "Since we are counting the number of balanced brokers in _brokersAllowedReplicaMove, I'd prefer to keep the current name.", "author": "efeg", "createdAt": "2020-11-15T18:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NTcwOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1385#discussion_r523385709", "bodyText": "I think we should change the comment to be Expected to look optimized (drop the \"Not\")", "author": "Lincong", "createdAt": "2020-11-14T06:46:33Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/analyzer/ExcludedBrokersForReplicaMoveTest.java", "diffHunk": "@@ -162,30 +165,30 @@\n                                                          CpuUsageDistributionGoal.class)) {\n       // Test: With single excluded broker, balance not satisfiable cluster, no dead broker (No exception, No proposal\n       // for excluded broker, Not expected to look optimized)", "originalCommit": "cdd28be34c154942e13e8306f3b184e6ce92599b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "044d67c96bb88d6e3049ef04047335872dbc4485", "url": "https://github.com/linkedin/cruise-control/commit/044d67c96bb88d6e3049ef04047335872dbc4485", "message": "Address the feedback", "committedDate": "2020-11-15T18:15:22Z", "type": "commit"}]}