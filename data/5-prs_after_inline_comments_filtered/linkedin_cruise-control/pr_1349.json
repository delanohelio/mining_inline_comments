{"pr_number": 1349, "pr_title": "Make MetricSampler more extensible.", "pr_createdAt": "2020-10-15T07:31:50Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1349", "timeline": [{"oid": "3e7db1afecb034f75b3137338cfbe4beb027f931", "url": "https://github.com/linkedin/cruise-control/commit/3e7db1afecb034f75b3137338cfbe4beb027f931", "message": "Make MetricSampler more extensible.", "committedDate": "2020-10-15T04:27:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5OTcxOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r505999719", "bodyText": "In addition to the @deprecated Javadoc tag, can we add @Deprecated annotation for the function?\n-- i.e. the @Deprecated annotation and the @deprecated Javadoc tag are both valid, and serve different purposes (so using both of them is useful). The former ensures that all compilers will issue warnings when code uses the deprecated program element. The latter explains why it has been deprecated, relevant limitations, and/or suggestions on what to use instead.\nSource: Deprecation", "author": "efeg", "createdAt": "2020-10-16T02:37:34Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSampler.java", "diffHunk": "@@ -27,6 +27,8 @@\n   Samples EMPTY_SAMPLES = new Samples(Collections.emptySet(), Collections.emptySet());\n \n   /**\n+   * @deprecated Please use {@link #getSamples(MetricSamplerOptions)}\n+   *", "originalCommit": "3e7db1afecb034f75b3137338cfbe4beb027f931", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0MzI1OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506043259", "bodyText": "Sure, that sounds like a good idea.", "author": "wyuka", "createdAt": "2020-10-16T04:22:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5OTcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxNjQ1Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506016453", "bodyText": "(Not introduced in this patch) I noticed that this JavaDoc is not fully accurate. Can we update it to reflect that it not only collects partition metrics, but any {@link CruiseControlMetric}?", "author": "efeg", "createdAt": "2020-10-16T03:07:31Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSampler.java", "diffHunk": "@@ -18,7 +18,7 @@\n  * The interface to get metric samples of given topic partitions.\n  * <p>\n  * Kafka Cruise Control periodically collects the metrics of all the partitions in the cluster, including the leader and follower\n- * replicas. The {@link #getSamples(Cluster, Set, long, long, SamplingMode, MetricDef, long)}\n+ * replicas. The {@link #getSamples(MetricSamplerOptions)}\n  * will be called for all the replicas of partitions in the cluster in one sampling period.\n  * The MetricSampler may be used by multiple threads at the same time, so the implementation need to be thread safe.\n  *", "originalCommit": "3e7db1afecb034f75b3137338cfbe4beb027f931", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1MDg0Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506050847", "bodyText": "I changed the JavaDoc, but avoided a direct mention of CruiseControlMetric, since this class is never used by MetricSampler.", "author": "wyuka", "createdAt": "2020-10-16T04:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxNjQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxNzQyNw==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506017427", "bodyText": "Nit: Incorrect description of return tag (we have the same issue in the deprecated function above).", "author": "efeg", "createdAt": "2020-10-16T03:09:56Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSampler.java", "diffHunk": "@@ -61,6 +63,95 @@ Samples getSamples(Cluster cluster,\n                      long timeout)\n       throws SamplingException;\n \n+  /**\n+   * Get the metric sample of the given topic partition and replica from the Kafka cluster.\n+   *\n+   * The samples include PartitionMetricSamples and BrokerMetricSamples.\n+   *\n+   * Due to the lack of direct metrics at partition level, Kafka Cruise Control needs to estimate the CPU\n+   * utilization for each partition by using the following formula:\n+   *\n+   *  BROKER_CPU_UTIL = a * ALL_TOPIC_BYTES_IN_RATE + b * ALL_TOPIC_BYTES_OUT_RATE + c * ALL_FOLLOWER_BYTES_IN_RATE\n+   *\n+   *  LEADER_PARTITION_CPU_UTIL = a * LEADER_PARTITION_BYTES_IN + b * LEADER_PARTITION_BYTES_OUT\n+   *\n+   *  FOLLOWER_PARTITION_CPU_UTIL = c * LEADER_PARTITION_BYTES_IN\n+   *\n+   * Kafka Cruise Control needs to know the parameters of a, b and c for cost evaluation of leader and\n+   * partition movement.\n+   *\n+   * @param metricSamplerOptions This class encapsulates all the arguments needed by MetricSampler to get samples.\n+   * @return The PartitionMetricSample of the topic partition and replica id", "originalCommit": "3e7db1afecb034f75b3137338cfbe4beb027f931", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0MzY4Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506043683", "bodyText": "Fixed.", "author": "wyuka", "createdAt": "2020-10-16T04:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxNzQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxNzkxMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506017911", "bodyText": "The JavaDoc seems outdated.", "author": "efeg", "createdAt": "2020-10-16T03:11:07Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSampler.java", "diffHunk": "@@ -61,6 +63,95 @@ Samples getSamples(Cluster cluster,\n                      long timeout)\n       throws SamplingException;\n \n+  /**\n+   * Get the metric sample of the given topic partition and replica from the Kafka cluster.", "originalCommit": "3e7db1afecb034f75b3137338cfbe4beb027f931", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTQ3OA==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506049478", "bodyText": "Changed it.", "author": "wyuka", "createdAt": "2020-10-16T04:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxNzkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAyMDE5NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506020195", "bodyText": "For cleanliness, can we move MetricSamplerOptions out of the interface?", "author": "efeg", "createdAt": "2020-10-16T03:17:06Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSampler.java", "diffHunk": "@@ -61,6 +63,95 @@ Samples getSamples(Cluster cluster,\n                      long timeout)\n       throws SamplingException;\n \n+  /**\n+   * Get the metric sample of the given topic partition and replica from the Kafka cluster.\n+   *\n+   * The samples include PartitionMetricSamples and BrokerMetricSamples.\n+   *\n+   * Due to the lack of direct metrics at partition level, Kafka Cruise Control needs to estimate the CPU\n+   * utilization for each partition by using the following formula:\n+   *\n+   *  BROKER_CPU_UTIL = a * ALL_TOPIC_BYTES_IN_RATE + b * ALL_TOPIC_BYTES_OUT_RATE + c * ALL_FOLLOWER_BYTES_IN_RATE\n+   *\n+   *  LEADER_PARTITION_CPU_UTIL = a * LEADER_PARTITION_BYTES_IN + b * LEADER_PARTITION_BYTES_OUT\n+   *\n+   *  FOLLOWER_PARTITION_CPU_UTIL = c * LEADER_PARTITION_BYTES_IN\n+   *\n+   * Kafka Cruise Control needs to know the parameters of a, b and c for cost evaluation of leader and\n+   * partition movement.\n+   *\n+   * @param metricSamplerOptions This class encapsulates all the arguments needed by MetricSampler to get samples.\n+   * @return The PartitionMetricSample of the topic partition and replica id\n+   */\n+  Samples getSamples(MetricSamplerOptions metricSamplerOptions) throws SamplingException;\n+\n+  /**\n+   * This class encapsulates the options that need to be passed to the {@link #getSamples(MetricSamplerOptions)}\n+   * method. Future use-cases may choose to extend this class and add more options.\n+   */\n+  public class MetricSamplerOptions {", "originalCommit": "3e7db1afecb034f75b3137338cfbe4beb027f931", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTIzMA==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506049230", "bodyText": "Done.", "author": "wyuka", "createdAt": "2020-10-16T04:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAyMDE5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAyMTU0Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506021546", "bodyText": "To avoid confusion, can we name\n\nthis parameter timeoutMs\nthe corresponding field _timeoutMs\nthe corresponding getter timeoutMs()?", "author": "efeg", "createdAt": "2020-10-16T03:20:37Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSampler.java", "diffHunk": "@@ -61,6 +63,95 @@ Samples getSamples(Cluster cluster,\n                      long timeout)\n       throws SamplingException;\n \n+  /**\n+   * Get the metric sample of the given topic partition and replica from the Kafka cluster.\n+   *\n+   * The samples include PartitionMetricSamples and BrokerMetricSamples.\n+   *\n+   * Due to the lack of direct metrics at partition level, Kafka Cruise Control needs to estimate the CPU\n+   * utilization for each partition by using the following formula:\n+   *\n+   *  BROKER_CPU_UTIL = a * ALL_TOPIC_BYTES_IN_RATE + b * ALL_TOPIC_BYTES_OUT_RATE + c * ALL_FOLLOWER_BYTES_IN_RATE\n+   *\n+   *  LEADER_PARTITION_CPU_UTIL = a * LEADER_PARTITION_BYTES_IN + b * LEADER_PARTITION_BYTES_OUT\n+   *\n+   *  FOLLOWER_PARTITION_CPU_UTIL = c * LEADER_PARTITION_BYTES_IN\n+   *\n+   * Kafka Cruise Control needs to know the parameters of a, b and c for cost evaluation of leader and\n+   * partition movement.\n+   *\n+   * @param metricSamplerOptions This class encapsulates all the arguments needed by MetricSampler to get samples.\n+   * @return The PartitionMetricSample of the topic partition and replica id\n+   */\n+  Samples getSamples(MetricSamplerOptions metricSamplerOptions) throws SamplingException;\n+\n+  /**\n+   * This class encapsulates the options that need to be passed to the {@link #getSamples(MetricSamplerOptions)}\n+   * method. Future use-cases may choose to extend this class and add more options.\n+   */\n+  public class MetricSamplerOptions {\n+    /**\n+     * @param cluster the metadata of the cluster.\n+     * @param assignedPartitions the topic partition\n+     * @param startTimeMs the start time of the sampling period.\n+     * @param endTimeMs the end time of the sampling period.\n+     * @param mode The sampling mode.\n+     * @param metricDef the metric definitions.\n+     * @param timeout The sampling timeout to stop sampling even if there is more data to get.", "originalCommit": "3e7db1afecb034f75b3137338cfbe4beb027f931", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTE0MA==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506049140", "bodyText": "Fixed. I changed the JavaDoc on the deprecated getSamples method too to mention that timeout is in milliseconds, but did not change the parameter name there to maintain compatibility.", "author": "wyuka", "createdAt": "2020-10-16T04:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAyMTU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAyNDE1MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506024151", "bodyText": "Nit: Cruise Control codebase typically uses class fields without this. (not enforced) and with _ prefix (enforced). For consistency with the typical use, can we drop the this prefix?", "author": "efeg", "createdAt": "2020-10-16T03:27:28Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSampler.java", "diffHunk": "@@ -61,6 +63,95 @@ Samples getSamples(Cluster cluster,\n                      long timeout)\n       throws SamplingException;\n \n+  /**\n+   * Get the metric sample of the given topic partition and replica from the Kafka cluster.\n+   *\n+   * The samples include PartitionMetricSamples and BrokerMetricSamples.\n+   *\n+   * Due to the lack of direct metrics at partition level, Kafka Cruise Control needs to estimate the CPU\n+   * utilization for each partition by using the following formula:\n+   *\n+   *  BROKER_CPU_UTIL = a * ALL_TOPIC_BYTES_IN_RATE + b * ALL_TOPIC_BYTES_OUT_RATE + c * ALL_FOLLOWER_BYTES_IN_RATE\n+   *\n+   *  LEADER_PARTITION_CPU_UTIL = a * LEADER_PARTITION_BYTES_IN + b * LEADER_PARTITION_BYTES_OUT\n+   *\n+   *  FOLLOWER_PARTITION_CPU_UTIL = c * LEADER_PARTITION_BYTES_IN\n+   *\n+   * Kafka Cruise Control needs to know the parameters of a, b and c for cost evaluation of leader and\n+   * partition movement.\n+   *\n+   * @param metricSamplerOptions This class encapsulates all the arguments needed by MetricSampler to get samples.\n+   * @return The PartitionMetricSample of the topic partition and replica id\n+   */\n+  Samples getSamples(MetricSamplerOptions metricSamplerOptions) throws SamplingException;\n+\n+  /**\n+   * This class encapsulates the options that need to be passed to the {@link #getSamples(MetricSamplerOptions)}\n+   * method. Future use-cases may choose to extend this class and add more options.\n+   */\n+  public class MetricSamplerOptions {\n+    /**\n+     * @param cluster the metadata of the cluster.\n+     * @param assignedPartitions the topic partition\n+     * @param startTimeMs the start time of the sampling period.\n+     * @param endTimeMs the end time of the sampling period.\n+     * @param mode The sampling mode.\n+     * @param metricDef the metric definitions.\n+     * @param timeout The sampling timeout to stop sampling even if there is more data to get.\n+     */\n+    public MetricSamplerOptions(Cluster cluster,\n+                                Set<TopicPartition> assignedPartitions,\n+                                long startTimeMs,\n+                                long endTimeMs,\n+                                SamplingMode mode,\n+                                MetricDef metricDef,\n+                                long timeout) {\n+      this._cluster = cluster;\n+      this._assignedPartitions = assignedPartitions;\n+      this._startTimeMs = startTimeMs;\n+      this._endTimeMs = endTimeMs;\n+      this._mode = mode;\n+      this._metricDef = metricDef;\n+      this._timeout = timeout;", "originalCommit": "3e7db1afecb034f75b3137338cfbe4beb027f931", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTE4Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506049187", "bodyText": "Fixed.", "author": "wyuka", "createdAt": "2020-10-16T04:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAyNDE1MQ=="}], "type": "inlineReview"}, {"oid": "2694523db8efafe85c0d2c8d09abd9626ef45c98", "url": "https://github.com/linkedin/cruise-control/commit/2694523db8efafe85c0d2c8d09abd9626ef45c98", "message": "Fixed Javadocs on MetricSampler, extracted MetricSamplerOptions to outer class, added Javadocs to AbstractMetricSampler.", "committedDate": "2020-10-16T07:05:07Z", "type": "commit"}, {"oid": "d19609d22b156d40363dbecc2ba95738ccdce96c", "url": "https://github.com/linkedin/cruise-control/commit/d19609d22b156d40363dbecc2ba95738ccdce96c", "message": "Added license header to MetricSamplerOptions.", "committedDate": "2020-10-16T07:09:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MDAyNg==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506690026", "bodyText": "Nit: The statement \"... with the options passed in {@link MetricSamplerOptions}\" does not apply to this function.", "author": "efeg", "createdAt": "2020-10-16T19:50:45Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSampler.java", "diffHunk": "@@ -17,18 +17,17 @@\n /**\n  * The interface to get metric samples of given topic partitions.\n  * <p>\n- * Kafka Cruise Control periodically collects the metrics of all the partitions in the cluster, including the leader and follower\n- * replicas. The {@link #getSamples(Cluster, Set, long, long, SamplingMode, MetricDef, long)}\n- * will be called for all the replicas of partitions in the cluster in one sampling period.\n+ * Kafka Cruise Control periodically collects the metrics of topics, brokers and partitions in the cluster.\n+ * The {@link #getSamples(MetricSamplerOptions)} is called periodically to collect metrics\n+ * of all these types from a cluster in one sampling period.\n  * The MetricSampler may be used by multiple threads at the same time, so the implementation need to be thread safe.\n  *\n  */\n public interface MetricSampler extends CruiseControlConfigurable, AutoCloseable {\n   Samples EMPTY_SAMPLES = new Samples(Collections.emptySet(), Collections.emptySet());\n \n   /**\n-   * Get the metric sample of the given topic partition and replica from the Kafka cluster.\n-   *\n+   * Get the metric samples from the Kafka cluster with the options passed in {@link MetricSamplerOptions}.", "originalCommit": "d19609d22b156d40363dbecc2ba95738ccdce96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyNzczMg==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r507027732", "bodyText": "Fixed.", "author": "wyuka", "createdAt": "2020-10-18T07:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MDAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyMDI4NA==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506720284", "bodyText": "Typo: overriden -> overridden", "author": "efeg", "createdAt": "2020-10-16T21:03:30Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/AbstractMetricSampler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.monitor.sampling;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.TopicPartition;\n+\n+import com.linkedin.cruisecontrol.metricdef.MetricDef;\n+import com.linkedin.kafka.cruisecontrol.config.BrokerCapacityConfigResolver;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.SamplingException;\n+import com.linkedin.kafka.cruisecontrol.metricsreporter.metric.CruiseControlMetric;\n+\n+import static com.linkedin.kafka.cruisecontrol.monitor.sampling.MetricFetcherManager.BROKER_CAPACITY_CONFIG_RESOLVER_OBJECT_CONFIG;\n+\n+/**\n+ * This is a base implementation of a MetricSampler that can be overriden by concrete Metric Sampler", "originalCommit": "d19609d22b156d40363dbecc2ba95738ccdce96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyOTY4MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r507029681", "bodyText": "Fixed.", "author": "wyuka", "createdAt": "2020-10-18T07:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyMDI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0Mjk1OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506742959", "bodyText": "I changed the JavaDoc on the deprecated getSamples method too to mention that timeout is in milliseconds, but did not change the parameter name there to maintain compatibility.\n\nNit: It is not clear why changing the parameter name from timeout to timeoutMs would break the compatibility. I feel unless a timeout has a specific type such as java.time.Duration, adding its unit as a suffix improves clarity.", "author": "efeg", "createdAt": "2020-10-16T22:11:50Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/MetricSampler.java", "diffHunk": "@@ -49,9 +48,10 @@\n    * @param endTimeMs the end time of the sampling period.\n    * @param mode The sampling mode.\n    * @param metricDef the metric definitions.\n-   * @param timeout The sampling timeout to stop sampling even if there is more data to get.\n-   * @return The PartitionMetricSample of the topic partition and replica id\n+   * @param timeout The sampling timeout in milliseconds to stop sampling even if there is more data to get.", "originalCommit": "d19609d22b156d40363dbecc2ba95738ccdce96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyNzkzMA==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r507027930", "bodyText": "I agree with you fully. Changed everywhere.", "author": "wyuka", "createdAt": "2020-10-18T07:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0Mjk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MzQ1Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506753453", "bodyText": "Nits and Typos\n\nConciseness: a single individual metric -> a metric\nMissing link: @param metric Individual CruiseControlMetric -> @param metric Individual {@link CruiseControlMetric}\nTypo: conrete -> concrete\nSimilar naming and JavaDoc issue as the previous function -- i.e. what does it mean to record a metric and if this function records a metric, why is it called add metric? Does this function addMetricForProcessing or recordMetricForProcessing?", "author": "efeg", "createdAt": "2020-10-16T22:52:26Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/AbstractMetricSampler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.monitor.sampling;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.TopicPartition;\n+\n+import com.linkedin.cruisecontrol.metricdef.MetricDef;\n+import com.linkedin.kafka.cruisecontrol.config.BrokerCapacityConfigResolver;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.SamplingException;\n+import com.linkedin.kafka.cruisecontrol.metricsreporter.metric.CruiseControlMetric;\n+\n+import static com.linkedin.kafka.cruisecontrol.monitor.sampling.MetricFetcherManager.BROKER_CAPACITY_CONFIG_RESOLVER_OBJECT_CONFIG;\n+\n+/**\n+ * This is a base implementation of a MetricSampler that can be overriden by concrete Metric Sampler\n+ * implementations. It takes care of the common logic of initializing a {@link CruiseControlMetricsProcessor},\n+ * and then using it to record every individual {@link CruiseControlMetric}, and finally convert all\n+ * of these into {@link com.linkedin.kafka.cruisecontrol.monitor.sampling.MetricSampler.Samples}.\n+ */\n+abstract public class AbstractMetricSampler implements MetricSampler {\n+    private CruiseControlMetricsProcessor _metricsProcessor;\n+\n+    @Override\n+    public void configure(Map<String, ?> configs) {\n+        BrokerCapacityConfigResolver capacityResolver =\n+            (BrokerCapacityConfigResolver) configs.get(BROKER_CAPACITY_CONFIG_RESOLVER_OBJECT_CONFIG);\n+        if (capacityResolver == null) {\n+            throw new IllegalArgumentException(\n+                \"Metrics reporter sampler configuration is missing broker capacity config resolver object.\");\n+        }\n+        boolean allowCpuCapacityEstimation = (Boolean) configs.get(\n+            MonitorConfig.SAMPLING_ALLOW_CPU_CAPACITY_ESTIMATION_CONFIG);\n+        _metricsProcessor = new CruiseControlMetricsProcessor(capacityResolver, allowCpuCapacityEstimation);\n+    }\n+\n+    @Override\n+    public Samples getSamples(Cluster cluster, Set<TopicPartition> assignedPartitions, long startTimeMs,\n+        long endTimeMs, SamplingMode mode, MetricDef metricDef, long timeout) throws SamplingException {\n+        MetricSamplerOptions metricSamplerOptions = new MetricSamplerOptions(\n+            cluster, assignedPartitions, startTimeMs, endTimeMs, mode, metricDef, timeout);\n+        return getSamples(metricSamplerOptions);\n+    }\n+\n+    @Override\n+    public Samples getSamples(MetricSamplerOptions metricSamplerOptions) throws SamplingException {\n+        int totalMetricsAdded = addMetrics(metricSamplerOptions);\n+\n+        try {\n+            if (totalMetricsAdded > 0) {\n+                return _metricsProcessor.process(metricSamplerOptions.cluster(),\n+                    metricSamplerOptions.assignedPartitions(), metricSamplerOptions.mode());\n+            } else {\n+                return MetricSampler.EMPTY_SAMPLES;\n+            }\n+        } finally {\n+            _metricsProcessor.clear();\n+        }\n+    }\n+\n+    /**\n+     * This method will be called to add all the {@link CruiseControlMetric}s\n+     * for a cluster in one sampling period.\n+     *\n+     * Concrete metric sampler implementations can implement this method according to\n+     * their corresponding business logic of fetching metrics for the cluster.\n+     *\n+     * @param metricSamplerOptions Object that encapsulates all the options to be used for sampling metrics.\n+     * @return Total number of metrics sampled.\n+     */\n+    abstract protected int addMetrics(MetricSamplerOptions metricSamplerOptions) throws SamplingException;\n+    /**\n+     * This method records a single individual metric obtained from the cluster during a sampling period.\n+     * The {@link #addMetrics(MetricSamplerOptions)} method implemented in the conrete metric sampler\n+     * class will call this method for every metric it obtains for a single sampling period for the cluster.\n+     *\n+     * @param metric Individual CruiseControlMetric being recorded by the Metric Sampler.", "originalCommit": "d19609d22b156d40363dbecc2ba95738ccdce96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyOTY3NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r507029675", "bodyText": "Changed the name to addMetricForProcessing and changed the JavaDoc accordingly.", "author": "wyuka", "createdAt": "2020-10-18T07:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MzQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1NTI5Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506755297", "bodyText": "The name of this function and its JavaDoc is not very clear -- i.e. what does it mean to add metrics?\nWould one of the following names make its purpose more clear: retrieveMetrics or retrieveMetricsForProcessing?", "author": "efeg", "createdAt": "2020-10-16T22:59:19Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/AbstractMetricSampler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.monitor.sampling;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.TopicPartition;\n+\n+import com.linkedin.cruisecontrol.metricdef.MetricDef;\n+import com.linkedin.kafka.cruisecontrol.config.BrokerCapacityConfigResolver;\n+import com.linkedin.kafka.cruisecontrol.config.constants.MonitorConfig;\n+import com.linkedin.kafka.cruisecontrol.exception.SamplingException;\n+import com.linkedin.kafka.cruisecontrol.metricsreporter.metric.CruiseControlMetric;\n+\n+import static com.linkedin.kafka.cruisecontrol.monitor.sampling.MetricFetcherManager.BROKER_CAPACITY_CONFIG_RESOLVER_OBJECT_CONFIG;\n+\n+/**\n+ * This is a base implementation of a MetricSampler that can be overriden by concrete Metric Sampler\n+ * implementations. It takes care of the common logic of initializing a {@link CruiseControlMetricsProcessor},\n+ * and then using it to record every individual {@link CruiseControlMetric}, and finally convert all\n+ * of these into {@link com.linkedin.kafka.cruisecontrol.monitor.sampling.MetricSampler.Samples}.\n+ */\n+abstract public class AbstractMetricSampler implements MetricSampler {\n+    private CruiseControlMetricsProcessor _metricsProcessor;\n+\n+    @Override\n+    public void configure(Map<String, ?> configs) {\n+        BrokerCapacityConfigResolver capacityResolver =\n+            (BrokerCapacityConfigResolver) configs.get(BROKER_CAPACITY_CONFIG_RESOLVER_OBJECT_CONFIG);\n+        if (capacityResolver == null) {\n+            throw new IllegalArgumentException(\n+                \"Metrics reporter sampler configuration is missing broker capacity config resolver object.\");\n+        }\n+        boolean allowCpuCapacityEstimation = (Boolean) configs.get(\n+            MonitorConfig.SAMPLING_ALLOW_CPU_CAPACITY_ESTIMATION_CONFIG);\n+        _metricsProcessor = new CruiseControlMetricsProcessor(capacityResolver, allowCpuCapacityEstimation);\n+    }\n+\n+    @Override\n+    public Samples getSamples(Cluster cluster, Set<TopicPartition> assignedPartitions, long startTimeMs,\n+        long endTimeMs, SamplingMode mode, MetricDef metricDef, long timeout) throws SamplingException {\n+        MetricSamplerOptions metricSamplerOptions = new MetricSamplerOptions(\n+            cluster, assignedPartitions, startTimeMs, endTimeMs, mode, metricDef, timeout);\n+        return getSamples(metricSamplerOptions);\n+    }\n+\n+    @Override\n+    public Samples getSamples(MetricSamplerOptions metricSamplerOptions) throws SamplingException {\n+        int totalMetricsAdded = addMetrics(metricSamplerOptions);\n+\n+        try {\n+            if (totalMetricsAdded > 0) {\n+                return _metricsProcessor.process(metricSamplerOptions.cluster(),\n+                    metricSamplerOptions.assignedPartitions(), metricSamplerOptions.mode());\n+            } else {\n+                return MetricSampler.EMPTY_SAMPLES;\n+            }\n+        } finally {\n+            _metricsProcessor.clear();\n+        }\n+    }\n+\n+    /**\n+     * This method will be called to add all the {@link CruiseControlMetric}s\n+     * for a cluster in one sampling period.\n+     *\n+     * Concrete metric sampler implementations can implement this method according to\n+     * their corresponding business logic of fetching metrics for the cluster.\n+     *\n+     * @param metricSamplerOptions Object that encapsulates all the options to be used for sampling metrics.\n+     * @return Total number of metrics sampled.\n+     */\n+    abstract protected int addMetrics(MetricSamplerOptions metricSamplerOptions) throws SamplingException;", "originalCommit": "d19609d22b156d40363dbecc2ba95738ccdce96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyOTU3OA==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r507029578", "bodyText": "Changed to retrieveMetricsForProcessing and changed the JavaDoc accordingly.", "author": "wyuka", "createdAt": "2020-10-18T07:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1NTI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1Njg5OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506756899", "bodyText": "Nit: Bad indentation -- the code style aligns when multiline.", "author": "efeg", "createdAt": "2020-10-16T23:06:31Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/CruiseControlMetricsReporterSampler.java", "diffHunk": "@@ -101,36 +91,30 @@ public Samples getSamples(Cluster cluster,\n           continue;\n         }\n         long recordTime = record.value().time();\n-        if (recordTime + _acceptableMetricRecordProduceDelayMs < startTimeMs) {\n+        if (recordTime + _acceptableMetricRecordProduceDelayMs < metricSamplerOptions.startTimeMs()) {\n           LOG.debug(\"Discarding metric {} because its timestamp is more than {} ms earlier than the start time of sampling period {}.\",\n-                    record.value(), _acceptableMetricRecordProduceDelayMs, startTimeMs);\n-        } else if (recordTime >= endTimeMs) {\n+              record.value(), _acceptableMetricRecordProduceDelayMs, metricSamplerOptions.startTimeMs());", "originalCommit": "d19609d22b156d40363dbecc2ba95738ccdce96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyOTU0Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r507029543", "bodyText": "Fixed.", "author": "wyuka", "createdAt": "2020-10-18T07:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1Njg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1Njk2MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506756961", "bodyText": "Nit: Bad indentation -- the code style aligns when multiline.", "author": "efeg", "createdAt": "2020-10-16T23:06:46Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/CruiseControlMetricsReporterSampler.java", "diffHunk": "@@ -101,36 +91,30 @@ public Samples getSamples(Cluster cluster,\n           continue;\n         }\n         long recordTime = record.value().time();\n-        if (recordTime + _acceptableMetricRecordProduceDelayMs < startTimeMs) {\n+        if (recordTime + _acceptableMetricRecordProduceDelayMs < metricSamplerOptions.startTimeMs()) {\n           LOG.debug(\"Discarding metric {} because its timestamp is more than {} ms earlier than the start time of sampling period {}.\",\n-                    record.value(), _acceptableMetricRecordProduceDelayMs, startTimeMs);\n-        } else if (recordTime >= endTimeMs) {\n+              record.value(), _acceptableMetricRecordProduceDelayMs, metricSamplerOptions.startTimeMs());\n+        } else if (recordTime >= metricSamplerOptions.endTimeMs()) {\n           TopicPartition tp = new TopicPartition(record.topic(), record.partition());\n           LOG.debug(\"Saw metric {} whose timestamp is larger than the end time of sampling period {}. Pausing \"\n-                    + \"partition {} at offset {}.\", record.value(), endTimeMs, tp, record.offset());\n+              + \"partition {} at offset {}.\", record.value(), metricSamplerOptions.endTimeMs(), tp, record.offset());", "originalCommit": "d19609d22b156d40363dbecc2ba95738ccdce96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyOTU0MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r507029541", "bodyText": "Fixed.", "author": "wyuka", "createdAt": "2020-10-18T07:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1Njk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1NzgwNg==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506757806", "bodyText": "Nit: Bad indentation -- the code style aligns when multiline.", "author": "efeg", "createdAt": "2020-10-16T23:10:29Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/CruiseControlMetricsReporterSampler.java", "diffHunk": "@@ -101,36 +91,30 @@ public Samples getSamples(Cluster cluster,\n           continue;\n         }\n         long recordTime = record.value().time();\n-        if (recordTime + _acceptableMetricRecordProduceDelayMs < startTimeMs) {\n+        if (recordTime + _acceptableMetricRecordProduceDelayMs < metricSamplerOptions.startTimeMs()) {\n           LOG.debug(\"Discarding metric {} because its timestamp is more than {} ms earlier than the start time of sampling period {}.\",\n-                    record.value(), _acceptableMetricRecordProduceDelayMs, startTimeMs);\n-        } else if (recordTime >= endTimeMs) {\n+              record.value(), _acceptableMetricRecordProduceDelayMs, metricSamplerOptions.startTimeMs());\n+        } else if (recordTime >= metricSamplerOptions.endTimeMs()) {\n           TopicPartition tp = new TopicPartition(record.topic(), record.partition());\n           LOG.debug(\"Saw metric {} whose timestamp is larger than the end time of sampling period {}. Pausing \"\n-                    + \"partition {} at offset {}.\", record.value(), endTimeMs, tp, record.offset());\n+              + \"partition {} at offset {}.\", record.value(), metricSamplerOptions.endTimeMs(), tp, record.offset());\n           partitionsToPause.add(tp);\n         } else {\n-          _metricsProcessor.addMetric(record.value());\n+          addMetric(record.value());\n           totalMetricsAdded++;\n         }\n       }\n       if (!partitionsToPause.isEmpty()) {\n         _metricConsumer.pause(partitionsToPause);\n         partitionsToPause.clear();\n       }\n-    } while (!consumptionDone(_metricConsumer, endOffsets) && System.currentTimeMillis() < timeout);\n+    } while (!consumptionDone(_metricConsumer, endOffsets) &&\n+        System.currentTimeMillis() < metricSamplerOptions.timeoutMs());", "originalCommit": "d19609d22b156d40363dbecc2ba95738ccdce96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyOTUzMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r507029531", "bodyText": "Fixed.", "author": "wyuka", "createdAt": "2020-10-18T07:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1NzgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1Nzg1NA==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r506757854", "bodyText": "Nit: Bad indentation -- the code style aligns when multiline.", "author": "efeg", "createdAt": "2020-10-16T23:10:45Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/CruiseControlMetricsReporterSampler.java", "diffHunk": "@@ -101,36 +91,30 @@ public Samples getSamples(Cluster cluster,\n           continue;\n         }\n         long recordTime = record.value().time();\n-        if (recordTime + _acceptableMetricRecordProduceDelayMs < startTimeMs) {\n+        if (recordTime + _acceptableMetricRecordProduceDelayMs < metricSamplerOptions.startTimeMs()) {\n           LOG.debug(\"Discarding metric {} because its timestamp is more than {} ms earlier than the start time of sampling period {}.\",\n-                    record.value(), _acceptableMetricRecordProduceDelayMs, startTimeMs);\n-        } else if (recordTime >= endTimeMs) {\n+              record.value(), _acceptableMetricRecordProduceDelayMs, metricSamplerOptions.startTimeMs());\n+        } else if (recordTime >= metricSamplerOptions.endTimeMs()) {\n           TopicPartition tp = new TopicPartition(record.topic(), record.partition());\n           LOG.debug(\"Saw metric {} whose timestamp is larger than the end time of sampling period {}. Pausing \"\n-                    + \"partition {} at offset {}.\", record.value(), endTimeMs, tp, record.offset());\n+              + \"partition {} at offset {}.\", record.value(), metricSamplerOptions.endTimeMs(), tp, record.offset());\n           partitionsToPause.add(tp);\n         } else {\n-          _metricsProcessor.addMetric(record.value());\n+          addMetric(record.value());\n           totalMetricsAdded++;\n         }\n       }\n       if (!partitionsToPause.isEmpty()) {\n         _metricConsumer.pause(partitionsToPause);\n         partitionsToPause.clear();\n       }\n-    } while (!consumptionDone(_metricConsumer, endOffsets) && System.currentTimeMillis() < timeout);\n+    } while (!consumptionDone(_metricConsumer, endOffsets) &&\n+        System.currentTimeMillis() < metricSamplerOptions.timeoutMs());\n     LOG.info(\"Finished sampling for topic partitions {} in time range [{},{}]. Collected {} metrics.\",\n-             _currentPartitionAssignment, startTimeMs, endTimeMs, totalMetricsAdded);\n+        _currentPartitionAssignment, metricSamplerOptions.startTimeMs(),\n+        metricSamplerOptions.endTimeMs(), totalMetricsAdded);", "originalCommit": "d19609d22b156d40363dbecc2ba95738ccdce96c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyOTUyMw==", "url": "https://github.com/linkedin/cruise-control/pull/1349#discussion_r507029523", "bodyText": "Fixed.", "author": "wyuka", "createdAt": "2020-10-18T07:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1Nzg1NA=="}], "type": "inlineReview"}, {"oid": "bf0032b00900f04ff229ae35d911b6cf5a0721b3", "url": "https://github.com/linkedin/cruise-control/commit/bf0032b00900f04ff229ae35d911b6cf5a0721b3", "message": "Fixed typos, javaDoc, changed method names.", "committedDate": "2020-10-18T07:28:23Z", "type": "commit"}]}