{"pr_number": 2758, "pr_title": "[cpd] Improve AnyTokenizer", "pr_createdAt": "2020-09-01T16:27:25Z", "pr_url": "https://github.com/pmd/pmd/pull/2758", "timeline": [{"oid": "b27ab97684b782062bc7a2c0b7de4c24fb0a717b", "url": "https://github.com/pmd/pmd/commit/b27ab97684b782062bc7a2c0b7de4c24fb0a717b", "message": "Improve AnyTokenizer", "committedDate": "2020-09-01T15:50:06Z", "type": "commit"}, {"oid": "bc0d9c781d6d7109ffe24d8959a833b710fa976f", "url": "https://github.com/pmd/pmd/commit/bc0d9c781d6d7109ffe24d8959a833b710fa976f", "message": "Use it to replace RubyTokenizer", "committedDate": "2020-09-01T15:50:21Z", "type": "commit"}, {"oid": "bc4b008b6e2d7e31410a1ac26715748b9eda8f85", "url": "https://github.com/pmd/pmd/commit/bc4b008b6e2d7e31410a1ac26715748b9eda8f85", "message": "Same for Fortran", "committedDate": "2020-09-01T15:50:29Z", "type": "commit"}, {"oid": "5331be392b0df11a0068fa5339717186c090b012", "url": "https://github.com/pmd/pmd/commit/5331be392b0df11a0068fa5339717186c090b012", "message": "Add perl tests", "committedDate": "2020-09-01T15:50:31Z", "type": "commit"}, {"oid": "5f4d489ec83b8da43702141a03159851c3670fdb", "url": "https://github.com/pmd/pmd/commit/5f4d489ec83b8da43702141a03159851c3670fdb", "message": "Fix tests", "committedDate": "2020-09-01T15:50:31Z", "type": "commit"}, {"oid": "9af59c503b4b193adeb01718fa4ea27ac180df8c", "url": "https://github.com/pmd/pmd/commit/9af59c503b4b193adeb01718fa4ea27ac180df8c", "message": "Fix linenos with multiline strings", "committedDate": "2020-09-01T15:50:31Z", "type": "commit"}, {"oid": "21aeabdf4547f2dd46e82badb065fc8bbc03e433", "url": "https://github.com/pmd/pmd/commit/21aeabdf4547f2dd46e82badb065fc8bbc03e433", "message": "Deprecate AbstractTokenizer", "committedDate": "2020-09-01T15:50:39Z", "type": "commit"}, {"oid": "251a217a5943444db642387090c5b9dfd3d5c865", "url": "https://github.com/pmd/pmd/commit/251a217a5943444db642387090c5b9dfd3d5c865", "message": "Checkout StringUtils parts from 7.0.x branch", "committedDate": "2020-09-01T15:53:33Z", "type": "commit"}, {"oid": "dd440eb14a32f27e7d7e5c655e7d78606ffee11f", "url": "https://github.com/pmd/pmd/commit/dd440eb14a32f27e7d7e5c655e7d78606ffee11f", "message": "Fix tests", "committedDate": "2020-09-01T16:11:05Z", "type": "commit"}, {"oid": "10b205b5e288bf40ddfdaf168ae3c091472d7e18", "url": "https://github.com/pmd/pmd/commit/10b205b5e288bf40ddfdaf168ae3c091472d7e18", "message": "REVERT ME Make end column inclusive\n\nThis is for consistency with PMD 6, on pmd 7 this commit\nmay be reverted", "committedDate": "2020-09-01T16:11:08Z", "type": "commit"}, {"oid": "24f3017109d46b1604da6a2a86cc66993bb6e2ee", "url": "https://github.com/pmd/pmd/commit/24f3017109d46b1604da6a2a86cc66993bb6e2ee", "message": "Update release notes", "committedDate": "2020-09-01T16:23:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3NzM4Mg==", "url": "https://github.com/pmd/pmd/pull/2758#discussion_r481277382", "bodyText": "Note that those utilities and their tests are already on the 7.0.x branch", "author": "oowekyala", "createdAt": "2020-09-01T16:27:48Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/util/StringUtil.java", "diffHunk": "@@ -38,6 +38,114 @@\n     private StringUtil() {\n     }\n \n+\n+    /**\n+     * Returns the (1-based) line number of the character at the given index.\n+     * Line terminators (\\r, \\n) are assumed to be on the line they *end*\n+     * and not on the following line. The method also accepts that the given\n+     * offset be the length of the string (in which case there's no targeted character),\n+     * to get the line number of a character that would be inserted at\n+     * the end of the string.\n+     *\n+     * <pre>\n+     *\n+     *     lineNumberAt(\"a\\nb\", 0)  = 1\n+     *     lineNumberAt(\"a\\nb\", 1)  = 1\n+     *     lineNumberAt(\"a\\nb\", 2)  = 2\n+     *     lineNumberAt(\"a\\nb\", 3)  = 2  // charAt(3) doesn't exist though\n+     *     lineNumberAt(\"a\\nb\", 4)  = -1\n+     *\n+     *     lineNumberAt(\"\", 0) = 1\n+     *     lineNumberAt(\"\", _) = -1\n+     *\n+     * </pre>\n+     *\n+     * @param charSeq         Char sequence\n+     * @param offsetInclusive Offset in the sequence of the targeted character.\n+     *                        May be the length of the sequence.\n+     * @return -1 if the offset is not in {@code [0, length]}, otherwise\n+     * the line number\n+     */\n+    public static int lineNumberAt(CharSequence charSeq, int offsetInclusive) {", "originalCommit": "24f3017109d46b1604da6a2a86cc66993bb6e2ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a43dea916deab5f271af430ef17b767dc37e4783", "url": "https://github.com/pmd/pmd/commit/a43dea916deab5f271af430ef17b767dc37e4783", "message": "Fix JS tests\n\nRewrite assertions for better error messages\nThe difference is 32 tokens instead of 30;\nthis is because previously, AnyTokenizer\ntokenized `window.alert` as a single token. Now\nit tokenizes it a `window`, `.`, `alert`.", "committedDate": "2020-09-03T09:40:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyODUzNg==", "url": "https://github.com/pmd/pmd/pull/2758#discussion_r487428536", "bodyText": "TODO", "author": "adangel", "createdAt": "2020-09-12T17:02:14Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/cpd/AnyTokenizer.java", "diffHunk": "@@ -4,44 +4,98 @@\n \n package net.sourceforge.pmd.cpd;\n \n-import java.io.BufferedReader;\n-import java.io.CharArrayReader;\n-import java.io.IOException;\n-import java.util.StringTokenizer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import net.sourceforge.pmd.util.StringUtil;\n \n /**\n- * This class does a best-guess try-anything tokenization.\n+ * Simple tokenization into words and separators. Can ignore end-of-line\n+ * comments and recognize double/single quoted string literals. It is\n+ * not a goal to be very customizable, or have very high quality.\n+ * Higher-quality lexers should be implemented with a lexer generator.\n  *\n- * @author jheintz\n+ * <p>In PMD 7, this replaces AbstractTokenizer, which provided nearly\n+ * no more functionality.\n  */\n public class AnyTokenizer implements Tokenizer {\n-    public static final String TOKENS = \" \\t!#$%^&*(){}-=+<>/\\\\`~;:\";\n+\n+    private static final Pattern DEFAULT_PATTERN = makePattern(\"\");\n+\n+    private static Pattern makePattern(String singleLineCommentStart) {\n+        return Pattern.compile(\n+            \"\\\\w++\" // either a word\n+                + eolCommentFragment(singleLineCommentStart) // a comment\n+                + \"|[^\\\"'\\\\s]\" // a single separator char\n+                + \"|\\\"(?:[^\\\"\\\\\\\\]++|\\\\\\\\.)*+\\\"\" // a double-quoted string\n+                + \"|'(?:[^'\\\\\\\\]++|\\\\\\\\.)*+'\" // a single-quoted string\n+                + \"|\\n\" // or a newline (to count lines), note that sourcecode normalizes line endings\n+        );\n+    }\n+\n+    private final Pattern pattern;\n+    private final String commentStart;\n+\n+    public AnyTokenizer() {\n+        this(DEFAULT_PATTERN, \"\");\n+    }\n+\n+    public AnyTokenizer(String eolCommentStart) {\n+        this(makePattern(eolCommentStart), eolCommentStart);\n+    }\n+\n+    private AnyTokenizer(Pattern pattern, String commentStart) {\n+        this.pattern = pattern;\n+        this.commentStart = commentStart;\n+    }\n+\n+    private static String eolCommentFragment(String start) {\n+        if (StringUtils.isBlank(start)) {\n+            return \"\";\n+        } else {\n+            return \"|(?:\" + Pattern.quote(start) + \"[^\\n]*+)\"; // note: sourcecode normalizes line endings\n+        }\n+    }\n \n     @Override\n     public void tokenize(SourceCode sourceCode, Tokens tokenEntries) {\n-        StringBuilder sb = sourceCode.getCodeBuffer();\n-        try (BufferedReader reader = new BufferedReader(new CharArrayReader(sb.toString().toCharArray()))) {\n-            int lineNumber = 1;\n-            int colNumber = 1;\n-            String line = reader.readLine();\n-            while (line != null) {\n-                StringTokenizer tokenizer = new StringTokenizer(line, TOKENS, true);\n-                while (tokenizer.hasMoreTokens()) {\n-                    String token = tokenizer.nextToken();\n-                    int endCol = colNumber + token.length() - 1; // -1 because inclusive\n-                    if (!\" \".equals(token) && !\"\\t\".equals(token)) {\n-                        tokenEntries.add(new TokenEntry(token, sourceCode.getFileName(), lineNumber, colNumber, endCol));\n-                    }\n-                    colNumber = endCol + 1;\n+        CharSequence text = sourceCode.getCodeBuffer();\n+        Matcher matcher = pattern.matcher(text);\n+        int lineNo = 1;\n+        int lastLineStart = 0;\n+        try {\n+            while (matcher.find()) {\n+                String image = matcher.group();\n+                if (isComment(image)) {\n+                    continue;\n+                } else if (StringUtils.isWhitespace(image)) {\n+                    lineNo++;\n+                    lastLineStart = matcher.end();\n+                    continue;\n                 }\n-                // advance iteration variables\n-                line = reader.readLine();\n-                lineNumber++;\n+\n+                int bline = lineNo;\n+                int bcol = 1 + matcher.start() - lastLineStart; // + 1 because columns are 1 based\n+                int ecol = StringUtil.columnNumberAt(image, image.length()); // this already outputs a 1-based column\n+                if (ecol == image.length() + 1) {\n+                    ecol = bcol + image.length(); // single-line token\n+                } else {\n+                    // multiline, need to update the line count\n+                    lineNo += StringUtil.lineNumberAt(image, image.length()) - 1;\n+                    lastLineStart = matcher.start() + image.length() - ecol + 1;\n+                }\n+                // note: remove this -1 on the 7.0.x branch, this is here because in PMD 6, end columns are inclusive", "originalCommit": "a43dea916deab5f271af430ef17b767dc37e4783", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}