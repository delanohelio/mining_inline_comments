{"pr_number": 2396, "pr_title": "[apex] New rule: field declarations should be at start", "pr_createdAt": "2020-04-01T10:56:36Z", "pr_url": "https://github.com/pmd/pmd/pull/2396", "timeline": [{"oid": "8acb63870cc6143130192ee7102959bde26da94b", "url": "https://github.com/pmd/pmd/commit/8acb63870cc6143130192ee7102959bde26da94b", "message": "Add basic implmentation of FieldDeclarationsShouldBeAtStart for apex", "committedDate": "2020-04-01T10:24:34Z", "type": "commit"}, {"oid": "1d62a1f984094621c5450e727f671ec5d523c6ec", "url": "https://github.com/pmd/pmd/commit/1d62a1f984094621c5450e727f671ec5d523c6ec", "message": "Add rule definition in codestyle.xml", "committedDate": "2020-04-01T10:28:14Z", "type": "commit"}, {"oid": "3f0dc27a4a77514ae73665823761cb9950f235fb", "url": "https://github.com/pmd/pmd/commit/3f0dc27a4a77514ae73665823761cb9950f235fb", "message": "Add tests for apex field declarations should be at start", "committedDate": "2020-04-01T10:47:32Z", "type": "commit"}, {"oid": "504cf440a32023d95e85488debcdde4a33f1df9d", "url": "https://github.com/pmd/pmd/commit/504cf440a32023d95e85488debcdde4a33f1df9d", "message": "Inculde field name in violation message", "committedDate": "2020-04-01T10:55:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5OTkyMg==", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402499922", "bodyText": "You could just use a Comparator<Node> here, defining it like so: Comparator.<Node>comparingInt(Node::getBeginLine).thenComparing(Node::getBeginColumn)", "author": "oowekyala", "createdAt": "2020-04-02T17:46:48Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);\n+\n+        Optional<NodeAndLocation> firstMethod =\n+            methods.stream()\n+                .filter(method -> method.hasRealLoc())\n+                .map(method -> new NodeAndLocation(method))\n+                .min(Comparator.naturalOrder());\n+\n+        if (!firstMethod.isPresent()) {\n+            // there are no methods so the field declaration has to come first\n+            return data;\n+        }\n+\n+        for (ASTFieldDeclaration field : fields) {\n+            NodeAndLocation fieldPosition = new NodeAndLocation(field);\n+            if (fieldPosition.compareTo(firstMethod.get()) > 0) {\n+                addViolation(data, field, field.getName());\n+            }\n+        }\n+\n+        return data;\n+    }\n+\n+    private static class NodeAndLocation implements Comparable<NodeAndLocation> {", "originalCommit": "504cf440a32023d95e85488debcdde4a33f1df9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDQxNA==", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402500414", "bodyText": "Then just do min(nodeComparator), with the comparator you defined, so firstMethod would be an Optional<ASTMethod>", "author": "oowekyala", "createdAt": "2020-04-02T17:47:38Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);\n+\n+        Optional<NodeAndLocation> firstMethod =\n+            methods.stream()\n+                .filter(method -> method.hasRealLoc())\n+                .map(method -> new NodeAndLocation(method))\n+                .min(Comparator.naturalOrder());", "originalCommit": "504cf440a32023d95e85488debcdde4a33f1df9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMTU0MQ==", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402501541", "bodyText": "Then here just do nodeComparator.compare(field, firstMethod.get()) > 0\nWith all of this you can get rid of NodeAndLocation", "author": "oowekyala", "createdAt": "2020-04-02T17:49:23Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);\n+\n+        Optional<NodeAndLocation> firstMethod =\n+            methods.stream()\n+                .filter(method -> method.hasRealLoc())\n+                .map(method -> new NodeAndLocation(method))\n+                .min(Comparator.naturalOrder());\n+\n+        if (!firstMethod.isPresent()) {\n+            // there are no methods so the field declaration has to come first\n+            return data;\n+        }\n+\n+        for (ASTFieldDeclaration field : fields) {\n+            NodeAndLocation fieldPosition = new NodeAndLocation(field);\n+            if (fieldPosition.compareTo(firstMethod.get()) > 0) {", "originalCommit": "504cf440a32023d95e85488debcdde4a33f1df9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwNDk5Nw==", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402504997", "bodyText": "Looking for descendants is a bad idea here. It will pick up on fields of any nested class. I think a test case should be added for that too.", "author": "oowekyala", "createdAt": "2020-04-02T17:55:17Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);", "originalCommit": "504cf440a32023d95e85488debcdde4a33f1df9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwNjM5NA==", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402506394", "bodyText": "Similarly, this will find all methods in the subtree, not just the methods of this class.\nFor both these problems, I think using findChildrenOfType would be enough.\nThere is also this problem: what if there are no methods, but a nested class? Fields should still be at the start right?", "author": "oowekyala", "createdAt": "2020-04-02T17:57:26Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        // Unfortunately the parser re-orders the AST to put field declarations before method declarations\n+        // so we have to rely on line numbers / positions to work out where the first method starts so we\n+        // can check if the fields are in acceptable places.\n+        List<ASTFieldDeclaration> fields = node.findDescendantsOfType(ASTFieldDeclaration.class);\n+        List<ASTMethod> methods = node.findDescendantsOfType(ASTMethod.class);", "originalCommit": "504cf440a32023d95e85488debcdde4a33f1df9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwODgzMA==", "url": "https://github.com/pmd/pmd/pull/2396#discussion_r402508830", "bodyText": "This rule could use the rulechain, since you're only visiting one node type, and the rule is not stateful. See https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain", "author": "oowekyala", "createdAt": "2020-04-02T18:01:29Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/codestyle/FieldDeclarationsShouldBeAtStartRule.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.codestyle;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTFieldDeclaration;\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class FieldDeclarationsShouldBeAtStartRule extends AbstractApexRule {\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {", "originalCommit": "504cf440a32023d95e85488debcdde4a33f1df9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9c13702e3971eead42526d420f8e8489749ff4e7", "url": "https://github.com/pmd/pmd/commit/9c13702e3971eead42526d420f8e8489749ff4e7", "message": "Massively simplify rule with custom comparator", "committedDate": "2020-04-03T12:38:40Z", "type": "commit"}, {"oid": "eb8e7eabd8a08d95bfe5ded004f7d3d7d73ff20b", "url": "https://github.com/pmd/pmd/commit/eb8e7eabd8a08d95bfe5ded004f7d3d7d73ff20b", "message": "Fix field declaration location rule around nested classes", "committedDate": "2020-04-03T12:45:34Z", "type": "commit"}, {"oid": "1359c88e90314e7aad49f5bc5335275e7371e8ab", "url": "https://github.com/pmd/pmd/commit/1359c88e90314e7aad49f5bc5335275e7371e8ab", "message": "Also produce errors in inner classes", "committedDate": "2020-04-03T12:48:31Z", "type": "commit"}, {"oid": "5d1ffa5a55e17cd8a03ce992d588a2653577a6ac", "url": "https://github.com/pmd/pmd/commit/5d1ffa5a55e17cd8a03ce992d588a2653577a6ac", "message": "Correctly detect fields after inner classes", "committedDate": "2020-04-03T12:57:34Z", "type": "commit"}, {"oid": "eeac5796614a83d2ebc170be33bb631ae4893ccf", "url": "https://github.com/pmd/pmd/commit/eeac5796614a83d2ebc170be33bb631ae4893ccf", "message": "Correctly detect properties before fields", "committedDate": "2020-04-03T12:58:49Z", "type": "commit"}, {"oid": "292bcbbf04eb395589ef1186ea1b2a1f6737bdf9", "url": "https://github.com/pmd/pmd/commit/292bcbbf04eb395589ef1186ea1b2a1f6737bdf9", "message": "Correctly detect that fields should go before block statements", "committedDate": "2020-04-03T14:01:56Z", "type": "commit"}, {"oid": "9e078366590b5efe2fc336c48fd863ded3e4b521", "url": "https://github.com/pmd/pmd/commit/9e078366590b5efe2fc336c48fd863ded3e4b521", "message": "Correctly detect fields that appear after static initialization blocks", "committedDate": "2020-04-03T14:10:30Z", "type": "commit"}, {"oid": "4aae0e2ebf6dc4466b3b74a1d986fe61361779f4", "url": "https://github.com/pmd/pmd/commit/4aae0e2ebf6dc4466b3b74a1d986fe61361779f4", "message": "Fix checkstyle violations", "committedDate": "2020-04-03T14:16:52Z", "type": "commit"}, {"oid": "1331eec2084d349b45ca4968603948131576af74", "url": "https://github.com/pmd/pmd/commit/1331eec2084d349b45ca4968603948131576af74", "message": "Make comment clearer", "committedDate": "2020-04-03T14:17:01Z", "type": "commit"}, {"oid": "58185fce2f70c8efa5efa93ef26beeca1dfec0bd", "url": "https://github.com/pmd/pmd/commit/58185fce2f70c8efa5efa93ef26beeca1dfec0bd", "message": "Extract constant", "committedDate": "2020-04-03T14:17:29Z", "type": "commit"}, {"oid": "e94db8bf2254271114b1cb85b84fc9890e2a412c", "url": "https://github.com/pmd/pmd/commit/e94db8bf2254271114b1cb85b84fc9890e2a412c", "message": "Make rule a RuleChain", "committedDate": "2020-04-03T14:18:22Z", "type": "commit"}, {"oid": "6a70bda5e6abff63e753457d5a4016792fd35229", "url": "https://github.com/pmd/pmd/commit/6a70bda5e6abff63e753457d5a4016792fd35229", "message": "Should be 6.23.0 for release", "committedDate": "2020-04-03T14:19:12Z", "type": "commit"}]}