{"pr_number": 2968, "pr_title": "[java] NPE in UseCollectionIsEmptyRule with enums", "pr_createdAt": "2020-12-12T01:00:35Z", "pr_url": "https://github.com/pmd/pmd/pull/2968", "timeline": [{"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8", "url": "https://github.com/pmd/pmd/commit/cce0a35cb132ac3ab3050caeff8a94e385fb81e8", "message": "[java] NPE in UseCollectionIsEmptyRule with enums #2833", "committedDate": "2020-12-12T00:43:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r554622752", "bodyText": "Is it the only case when classOrEnumBody can be null? Unfortunately I don't know.", "author": "KroArtem", "createdAt": "2021-01-10T21:05:48Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {", "originalCommit": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwODc4Mw==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555808783", "bodyText": "Technically it could also be in an annotation type, but I think it's ok, as annotations may not contain code (at least, not code that this rule would pick up on).", "author": "oowekyala", "createdAt": "2021-01-12T14:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwOTUwMQ==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555809501", "bodyText": "Technically it could also be in an annotation type, but I think it's ok, as annotations may not contain code (at least, not code that this rule would pick up on).\nIt could also be an ASTRecordBody", "author": "oowekyala", "createdAt": "2021-01-12T14:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY5MDU1NA==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r561690554", "bodyText": "I'll add a test case when merging", "author": "adangel", "createdAt": "2021-01-21T08:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r554622899", "bodyText": "What's the reason to go one level up in the hierarchy?", "author": "KroArtem", "createdAt": "2021-01-10T21:06:43Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {\n+            classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n+        }                 \n+        List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n         for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n             if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+                return varDeclarator.getParent().getFirstDescendantOfType(ASTClassOrInterfaceType.class);", "originalCommit": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwODgxMQ==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555808811", "bodyText": "This fetches a LocalVariableDeclaration or FieldDeclaration node. VariableDeclarator nodes never have themselves a type node child.\nBut the actual right way to do that is varDeclarator.getVariableId().getTypeNode().", "author": "oowekyala", "createdAt": "2021-01-12T14:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwOTcyOQ==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555809729", "bodyText": "This fetches a LocalVariableDeclaration or FieldDeclaration node. VariableDeclarator nodes never have themselves a type node child.\nBut the actual right way to do that is varDeclarator.getVariableId().getTypeNode().", "author": "oowekyala", "createdAt": "2021-01-12T14:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY5MDY1OA==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r561690658", "bodyText": "I'll fix that when merging", "author": "adangel", "createdAt": "2021-01-21T08:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ=="}], "type": "inlineReview"}, {"oid": "4be2562f01f90ece6a4ddad69c165b108b29b2b5", "url": "https://github.com/pmd/pmd/commit/4be2562f01f90ece6a4ddad69c165b108b29b2b5", "message": "Fixups for #2968\n\n- Use better typeres\n- Add test cases for records and local var", "committedDate": "2021-01-21T10:03:51Z", "type": "commit"}]}