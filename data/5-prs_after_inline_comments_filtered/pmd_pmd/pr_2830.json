{"pr_number": 2830, "pr_title": "[apex] Apexlink POC", "pr_createdAt": "2020-10-13T20:06:07Z", "pr_url": "https://github.com/pmd/pmd/pull/2830", "timeline": [{"oid": "7bf7b1a2c5f8a9d074117fb739092f72b67904c4", "url": "https://github.com/pmd/pmd/commit/7bf7b1a2c5f8a9d074117fb739092f72b67904c4", "message": "Add apexlink dependency", "committedDate": "2020-09-25T21:57:50Z", "type": "commit"}, {"oid": "c635d5389f597aad7bdae03c6d8f3f0869b3a516", "url": "https://github.com/pmd/pmd/commit/c635d5389f597aad7bdae03c6d8f3f0869b3a516", "message": "Add a configuration for requesting multi-file analysis", "committedDate": "2020-09-26T19:56:10Z", "type": "commit"}, {"oid": "d48c8a71adf640bd43991e9bad6f362819a64a81", "url": "https://github.com/pmd/pmd/commit/d48c8a71adf640bd43991e9bad6f362819a64a81", "message": "Hack in unused method rule", "committedDate": "2020-09-27T21:35:53Z", "type": "commit"}, {"oid": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "url": "https://github.com/pmd/pmd/commit/a5fe957b00e42076abd58cbe4faf28f60489ff26", "message": "Code tidy", "committedDate": "2020-10-13T19:47:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjEzMA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505716130", "bodyText": "This descriptor is unused, right?", "author": "oowekyala", "createdAt": "2020-10-15T17:28:15Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2MzkyMw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563923", "bodyText": "Yes it was so have removed", "author": "nawforce", "createdAt": "2020-10-25T08:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjEzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODUzNw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505718537", "bodyText": "There is a single RootNode per tree. You can just write node.getRoot()", "author": "oowekyala", "createdAt": "2020-10-15T17:32:19Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2Mzk0OQ==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563949", "bodyText": "Changed", "author": "nawforce", "createdAt": "2020-10-25T08:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMTAwNg==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505721006", "bodyText": "I think you should encapsulate that into a method like root.getGlobalIssues()", "author": "oowekyala", "createdAt": "2020-10-15T17:36:01Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {\n+                // Check for basic line alignment for now, Note: ASTMethod end line = block end line\n+                if (issue.diagnostic().location().startLine() == node.getBeginLine()\n+                        && issue.diagnostic().location().endLine() <= node.getEndLine()) {\n+                    addViolation(data, node);\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    private Issue[] getIssues(ASTMethod node) {\n+        // Locate multifileAnalysis handler via method root node\n+        List<RootNode> parents = node.getParentsOfType(RootNode.class);\n+        if (!parents.isEmpty()) {\n+            // This first parent is outermost\n+            ApexRootNode<?> root = (ApexRootNode<?>) parents.get(parents.size() - 1);\n+            return root.getMultifileAnalysis().getFileIssues(root.getFileName());", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2Mzk3Mw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511563973", "bodyText": "Done", "author": "nawforce", "createdAt": "2020-10-25T08:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMTAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjU3Nw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505722577", "bodyText": "Please return an unmodifiable List here (or even an Iterable<Issue>). We rarely use arrays in the codebase. You can write Collections.unmodifiableList(Arrays.asList(...))", "author": "oowekyala", "createdAt": "2020-10-15T17:38:47Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NDExNQ==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511564115", "bodyText": "Done (in ASTApexFile.getGlobalIssues() now)", "author": "nawforce", "createdAt": "2020-10-25T08:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjgyMA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505722820", "bodyText": "Is there a constant somewhere we could use instead of this hardcoded string?", "author": "oowekyala", "createdAt": "2020-10-15T17:39:12Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NDY2Ng==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511564666", "bodyText": "This is a 'case object' in Scala, I have swapped to use 'UNUSED_CATEGORY$.MODULE$ == issue.diagnostic().category()' but it's not very readable, I will introduce a proper Java enum for this in next release.", "author": "nawforce", "createdAt": "2020-10-25T08:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMjgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMzY3MA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r505723670", "bodyText": "Please make this class @Experimental", "author": "oowekyala", "createdAt": "2020-10-15T17:40:34Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@SuppressWarnings(\"PMD\")\n+public final class ApexMultifileAnalysis {", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NDY3Ng==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511564676", "bodyText": "Done", "author": "nawforce", "createdAt": "2020-10-25T08:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMzY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3NjU2NA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506376564", "bodyText": "What were the specific problems you got?", "author": "adangel", "createdAt": "2020-10-16T12:47:56Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java", "diffHunk": "@@ -7,16 +7,22 @@\n import java.util.Collections;\n import java.util.Map;\n \n+import net.sourceforge.pmd.lang.apex.multifile.ApexMultifileAnalysis;\n import net.sourceforge.pmd.lang.ast.RootNode;\n import net.sourceforge.pmd.lang.ast.SourceCodePositioner;\n \n import apex.jorje.semantic.ast.AstNode;\n import apex.jorje.services.Version;\n \n+@SuppressWarnings(\"PMD\")", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NTExMw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511565113", "bodyText": "I had a few issues getting IDE setup so I could understand why mvn build was failing, this was just left over from that. I have removed.", "author": "nawforce", "createdAt": "2020-10-25T08:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3NjU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4Njk0Ng==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506386946", "bodyText": "We can use in PMD 7 java8 features, e.g.\ngetIssues(node).stream()\n    .filter(issue -> \"Unused\".equals(issue.diagnostic().category().value())\n    .filter(issue -> issue.diagnostic().location().startLine() == node.getBeginLine())\n    .filter(issue -> issue.diagnostic().location().endLine() <= node.getEndLine())\n    .forEach(issue -> addViolation(data, node));", "author": "adangel", "createdAt": "2020-10-16T12:58:22Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/design/AvoidUnusedMethodRule.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.design;\n+\n+import static net.sourceforge.pmd.properties.constraints.NumericConstraints.positive;\n+\n+import java.util.List;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ApexRootNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+import net.sourceforge.pmd.lang.ast.RootNode;\n+import net.sourceforge.pmd.properties.PropertyDescriptor;\n+import net.sourceforge.pmd.properties.PropertyFactory;\n+\n+import com.nawforce.common.diagnostics.Issue;\n+\n+public class AvoidUnusedMethodRule extends AbstractApexRule {\n+\n+    private static final PropertyDescriptor<Integer> PROBLEM_DEPTH_DESCRIPTOR\n+            = PropertyFactory.intProperty(\"problemDepth\")\n+            .desc(\"The if statement depth reporting threshold\")\n+            .require(positive()).defaultValue(3).build();\n+\n+    public AvoidUnusedMethodRule() {\n+        definePropertyDescriptor(PROBLEM_DEPTH_DESCRIPTOR);\n+    }\n+\n+    @Override\n+    public Object visit(ASTMethod node, Object data) {\n+        // Check if any 'Unused' Issues align with this method\n+        for (Issue issue: getIssues(node)) {\n+            if (issue.diagnostic().category().value().equals(\"Unused\")) {", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2NTE0NA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r511565144", "bodyText": "Much nicer, have updated.", "author": "nawforce", "createdAt": "2020-10-25T08:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4Njk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg4MzIxOA==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r506883218", "bodyText": "This option is language dependent, I agree with @oowekyala that this would be a fit for language properties.\nSo that I understand, how this works: The directory, you specify here, contains the file \"sfdx-project.json\". Where does this file come from? Is it generated by an execution of ApexLink before executing PMD? Is this directory a different directory than you would specify using \"-dir\" (the \"Root directory for sources.\")? I'm unfamiliar with the structure of Apex projects.\nFor me, this looks like a property to enable/make use of ApexLink, rather than enabling multifileanalysis... and ApexLink happens to understand already the relationships between the files that are being analyzed (that's what we want with multifile analysis). PMD already has the knowledge where all files a located (-dir), but doesn't take advantage of this, because we analyze file by file and don't build up a global metadata structure like \"sfdx-project.json\". Hence my question: Who builds this file and when?\nOk, looking at e.g. https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json this file actually just contains the path to the sources (possibly multiple paths). So, ApexLink then builds the metadata structure, when creating the Org, right?\nI assume, if the paths specified by sfdx-project.json and the paths specified by \"-dir\" don't match, that would be a configuration error and I'm wondering, what we could do to make it easier for users to call PMD. For apex projects, that have a sfdx-project structure (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm) we could say, that you need to specify the directory where sfdx-project.json is located via \"-dir\" and PMD would then add the referenced directories, as if specified manually via \"-dir\". In that case, we might have instead a parameter to opt-in/opt-out for that feature (apex language property: consider directories specified in sfdx-project.json).", "author": "adangel", "createdAt": "2020-10-17T08:21:46Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDParameters.java", "diffHunk": "@@ -75,6 +75,10 @@\n             description = \"Specifies the string that marks a line which PMD should ignore; default is NOPMD.\")\n     private String suppressmarker = \"NOPMD\";\n \n+    @Parameter(names = \"-multifileanalysisdirectory\",\n+            description = \"Specifies a directory that contains sources the may be used in a multi-file analysis; default is empty.\")", "originalCommit": "a5fe957b00e42076abd58cbe4faf28f60489ff26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1NzIwNg==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r507057206", "bodyText": "Ok, looking at e.g. https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/sfdx-project.json this file actually just contains the path to the sources (possibly multiple paths). So, ApexLink then builds the metadata structure, when creating the Org, right?\n\nYes, it reads the directories from sfdx-project.json to work out what to include in the analysis. The handling of this used to be built into ApexLink but I recently split into a separate library. There is a bit more to the format than being multiple directories, it's really more like multiple modules with either implicit or explicit dependencies between them. Treating them as modules matters in a multi-file analysis because there are rules around visibility and duplicates etc that you can't handle if you think of them as just the sum of a set of directories. There is also .forceignore which is similar in nature to .gitignore, if present its in the same directory as sfdx-project.json.\nThe sfdx-project.json also contains a namespace for the project. It's critical this is available for multi-file work as it enables the analysis to understand package boundaries. For single file analysis I would imagine a few rules might find it also handy if it could be made available.\n\nI assume, if the paths specified by sfdx-project.json and the paths specified by \"-dir\" don't match, that would be a configuration error and I'm wondering, what we could do to make it easier for users to call PMD. For apex projects, that have a sfdx-project structure (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm) we could say, that you need to specify the directory where sfdx-project.json is located via \"-dir\" and PMD would then add the referenced directories, as if specified manually via \"-dir\". In that case, we might have instead a parameter to opt-in/opt-out for that feature (apex language property: consider directories specified in sfdx-project.json).\n\nHaving \"-dir\" understand sfdx-project.json makes sense to me as a general approach but likely you want to delegate resolving \"-dir\" to a set of class files for analysis to a Salesforce specific handler that works alongside the existing handling.\nThe library I have for this might be a bit overweight for what PMD needs as ApexLink is interested in other project files and they can have some quite unusual handling behaviours. The part I have that is probably most valuable to PMD is the forceignore handling which should be straight forward to port to Java from its current Scala implementation if that made sense.", "author": "nawforce", "createdAt": "2020-10-18T09:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg4MzIxOA=="}], "type": "inlineReview"}, {"oid": "eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "url": "https://github.com/pmd/pmd/commit/eb5a334a1352dfd0d8f2cc44f2358197fae83bcd", "message": "Merge remote-tracking branch 'upstream/pmd/7.0.x' into apexlink\n\n# Conflicts:\n#\tpmd-apex/pom.xml\n#\tpmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ApexParser.java\n#\tpmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexParser.java\n#\tpmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexRootNode.java\n#\tpmd-core/src/main/java/net/sourceforge/pmd/ant/internal/PMDTaskImpl.java\n#\tpmd-core/src/main/java/net/sourceforge/pmd/lang/ParserOptions.java\n#\tpom.xml", "committedDate": "2020-10-22T20:40:44Z", "type": "commit"}, {"oid": "279c673341335b138d1f31637a6613a0276f9882", "url": "https://github.com/pmd/pmd/commit/279c673341335b138d1f31637a6613a0276f9882", "message": "Resolve PR comments", "committedDate": "2020-10-24T20:08:58Z", "type": "commit"}, {"oid": "d98ec556c7281fd04765181ccc8a24a4f99548b0", "url": "https://github.com/pmd/pmd/commit/d98ec556c7281fd04765181ccc8a24a4f99548b0", "message": "Merge remote-tracking branch 'upstream/pmd/7.0.x' into apexlink\n\n# Conflicts:\n#\tpom.xml", "committedDate": "2020-10-24T20:11:49Z", "type": "commit"}, {"oid": "862ee7b236a379d39d7ced5131b90be6bb5e3030", "url": "https://github.com/pmd/pmd/commit/862ee7b236a379d39d7ced5131b90be6bb5e3030", "message": "Merge remote-tracking branch 'upstream/pmd/7.0.x' into apexlink", "committedDate": "2020-10-26T20:23:07Z", "type": "commit"}, {"oid": "7c427413a8a6c7cc3c5cc23f8d71ea2b16842373", "url": "https://github.com/pmd/pmd/commit/7c427413a8a6c7cc3c5cc23f8d71ea2b16842373", "message": "Merge branch '7.0.x' into pr/2830", "committedDate": "2021-02-13T20:02:09Z", "type": "commit"}, {"oid": "fb359c290eabe8093ad21e317a4c7d9d71d20287", "url": "https://github.com/pmd/pmd/commit/fb359c290eabe8093ad21e317a4c7d9d71d20287", "message": "Remove some things from pmd core", "committedDate": "2021-02-13T20:14:43Z", "type": "commit"}, {"oid": "8fb4a082d845e94a590185c331ddb057079e9c51", "url": "https://github.com/pmd/pmd/commit/8fb4a082d845e94a590185c331ddb057079e9c51", "message": "Remove sentinel value", "committedDate": "2021-02-13T20:18:47Z", "type": "commit"}, {"oid": "268f66f4cd1fa0cf72dc5473bacaddb146589f6b", "url": "https://github.com/pmd/pmd/commit/268f66f4cd1fa0cf72dc5473bacaddb146589f6b", "message": "Simplify tests", "committedDate": "2021-02-13T20:28:24Z", "type": "commit"}, {"oid": "e8ac569a59fa1ee58c890f38a89e3832bbd74e1f", "url": "https://github.com/pmd/pmd/commit/e8ac569a59fa1ee58c890f38a89e3832bbd74e1f", "message": "Update ApexLink to 1.2.2", "committedDate": "2021-02-23T18:24:00Z", "type": "commit"}, {"oid": "b2ab30a2f4f83dce2d437d0c6b1d446d98b953d5", "url": "https://github.com/pmd/pmd/commit/b2ab30a2f4f83dce2d437d0c6b1d446d98b953d5", "message": "Update ruledoc for AvoidUnusedMethod (apex)", "committedDate": "2021-02-23T18:25:29Z", "type": "commit"}, {"oid": "ee6e819ff77e8d2f607f3439d2af32738a389516", "url": "https://github.com/pmd/pmd/commit/ee6e819ff77e8d2f607f3439d2af32738a389516", "message": "[doc] Update release notes", "committedDate": "2021-02-23T18:29:31Z", "type": "commit"}, {"oid": "ae195a8179609240e408e942540b695266b9e615", "url": "https://github.com/pmd/pmd/commit/ae195a8179609240e408e942540b695266b9e615", "message": "Merge branch '7.0.x' into apexlink", "committedDate": "2021-04-06T23:01:25Z", "type": "commit"}, {"oid": "c314ba84b27911d5d4c8144dcc423e064bf24bc8", "url": "https://github.com/pmd/pmd/commit/c314ba84b27911d5d4c8144dcc423e064bf24bc8", "message": "Fix APEX_ROOT_DIRECTORY not being set", "committedDate": "2021-04-06T23:04:47Z", "type": "commit"}, {"oid": "77fbc0bb4465eac30f5f4612f179041990f43675", "url": "https://github.com/pmd/pmd/commit/77fbc0bb4465eac30f5f4612f179041990f43675", "message": "Merge branch '7.0.x' into apexlink", "committedDate": "2021-04-06T23:19:47Z", "type": "commit"}, {"oid": "862a320b7d5e2b3e8b4df8ce0eabead35810f730", "url": "https://github.com/pmd/pmd/commit/862a320b7d5e2b3e8b4df8ce0eabead35810f730", "message": "Add language attribute", "committedDate": "2021-04-06T23:20:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r609983883", "bodyText": "Should this be LOG.error?", "author": "jbartolotta-sfdc", "createdAt": "2021-04-08T18:26:29Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/multifile/ApexMultifileAnalysis.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.multifile;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+import com.nawforce.common.api.FileIssueOptions;\n+import com.nawforce.common.api.Org;\n+import com.nawforce.common.api.ServerOps;\n+import com.nawforce.common.diagnostics.Issue;\n+\n+/**\n+ * Stores multi-file analysis data. The 'Org' here is the primary ApexLink structure for maintaining information\n+ * about the Salesforce metadata. We load 'Packages' into it to perform analysis. Once constructed you\n+ * can get 'Issue' information from it on what was found. The 'Org' holds mutable state for IDE use that can get quite\n+ * large (a few hundred MB on very large projects). An alternative way to use this would be to cache the\n+ * issues after packages are loaded and throw away the 'Org'. That would be a better model if all you wanted was the\n+ * issues but more complex rules will need the ability to traverse the internal graph of the 'Org'.\n+ *\n+ * @author Kevin Jones\n+ */\n+@Experimental\n+public final class ApexMultifileAnalysis {\n+    private static final Logger LOG = Logger.getLogger(ApexMultifileAnalysis.class.getName());\n+\n+    private static Map<String, ApexMultifileAnalysis> instanceMap = new HashMap<>();\n+\n+    // An arbitrary large number of errors to report\n+    private static final Integer MAX_ERRORS_PER_FILE = 100;\n+\n+    // Create a new org for each analysis\n+    private Org org = Org.newOrg(true);\n+    private FileIssueOptions options = new FileIssueOptions();\n+\n+    private ApexMultifileAnalysis(String multiFileAnalysisDirectory) {\n+        LOG.fine(\"MultiFile Analysis created for \" + multiFileAnalysisDirectory);\n+        if (multiFileAnalysisDirectory != null && !multiFileAnalysisDirectory.isEmpty()) {\n+            // Default issue options, zombies gets us unused methods & fields as well as deploy problems\n+            options.includeZombies_$eq(true);\n+            options.maxErrorsPerFile_$eq(MAX_ERRORS_PER_FILE);\n+\n+            // Load the package into the org, this can take some time!\n+            org.newSFDXPackage(multiFileAnalysisDirectory);\n+            org.flush();\n+        }\n+    }\n+\n+    public Issue[] getFileIssues(String filename) {\n+        // Extract issues for a specific metadata file from the org\n+        return org.getFileIssues(filename, options);\n+    }\n+\n+    public static ApexMultifileAnalysis getAnalysisInstance(String multiFileAnalysisDirectory) {\n+        if (instanceMap.isEmpty()) {\n+            // Default some library wide settings\n+            ServerOps.setAutoFlush(false);\n+            ServerOps.setLogger(new AnalysisLogger());\n+            ServerOps.setDebugLogging(new String[] {\"ALL\"});\n+        }\n+\n+        return instanceMap.computeIfAbsent(multiFileAnalysisDirectory, ApexMultifileAnalysis::create);\n+    }\n+\n+    private static ApexMultifileAnalysis create(String multiFileAnalysisDirectory) {\n+        return new ApexMultifileAnalysis(multiFileAnalysisDirectory);\n+    }\n+\n+    /*\n+     * Very simple logger to aid debugging, relays ApexLink logging into PMD\n+     */\n+    private static class AnalysisLogger implements com.nawforce.common.api.Logger {\n+        @Override\n+        public void error(String message) {\n+            LOG.fine(message);", "originalCommit": "862a320b7d5e2b3e8b4df8ce0eabead35810f730", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDA1NzQxMg==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610057412", "bodyText": "At the moment the error & info levels are unused, there is interesting debug though that can be used to help diagnose. Does not look like there is a LOG.error but perhaps LOG.severe would be appropriate?", "author": "nawforce", "createdAt": "2021-04-08T20:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDU0ODY1NQ==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r610548655", "bodyText": "Yes LOG.severe is used for recoverable errors", "author": "oowekyala", "createdAt": "2021-04-09T11:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYxOTA2OQ==", "url": "https://github.com/pmd/pmd/pull/2830#discussion_r613619069", "bodyText": "I changed this.", "author": "nawforce", "createdAt": "2021-04-14T22:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTk4Mzg4Mw=="}], "type": "inlineReview"}, {"oid": "b2a421fed82f72f55066932c6731ab49d4230222", "url": "https://github.com/pmd/pmd/commit/b2a421fed82f72f55066932c6731ab49d4230222", "message": "Upgrade apex-link version", "committedDate": "2021-04-08T19:38:44Z", "type": "commit"}, {"oid": "97c8c3b365de224e785ee46504944f1e286165da", "url": "https://github.com/pmd/pmd/commit/97c8c3b365de224e785ee46504944f1e286165da", "message": "Extend description on AvoidUnusedMethod", "committedDate": "2021-04-08T20:38:50Z", "type": "commit"}, {"oid": "cf3ed1cd04901034458c9860df3c4b21bcccee0c", "url": "https://github.com/pmd/pmd/commit/cf3ed1cd04901034458c9860df3c4b21bcccee0c", "message": "Only attempt loading once", "committedDate": "2021-04-09T12:35:18Z", "type": "commit"}, {"oid": "1572484bf0d46c049660ecce6b41e9f6e7d7572b", "url": "https://github.com/pmd/pmd/commit/1572484bf0d46c049660ecce6b41e9f6e7d7572b", "message": "Merge branch '7.0.x' into apexlink", "committedDate": "2021-04-09T12:38:21Z", "type": "commit"}, {"oid": "1187b9e4e149582912c5dc649a3872e7d79a7e8c", "url": "https://github.com/pmd/pmd/commit/1187b9e4e149582912c5dc649a3872e7d79a7e8c", "message": "Add tests for logging behavior", "committedDate": "2021-04-09T14:19:57Z", "type": "commit"}, {"oid": "8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31", "url": "https://github.com/pmd/pmd/commit/8bc57f349a17dd48fc55bc47b64fd6b50ce5eb31", "message": "Change rule name to UnusedMethod, correct logging and add FIXME", "committedDate": "2021-04-14T21:29:05Z", "type": "commit"}]}