{"pr_number": 2714, "pr_title": "[java] Support JDK 15", "pr_createdAt": "2020-08-13T18:56:52Z", "pr_url": "https://github.com/pmd/pmd/pull/2714", "timeline": [{"oid": "02a78f5bea0189fbf9e25b383a9df18f2944f6b0", "url": "https://github.com/pmd/pmd/commit/02a78f5bea0189fbf9e25b383a9df18f2944f6b0", "message": "[java] Add versions 15 (new default) and 15-preview, remove 13-preview", "committedDate": "2020-08-13T17:15:02Z", "type": "commit"}, {"oid": "2a2fa20883f6d24df5e901967bd3b0297edb5182", "url": "https://github.com/pmd/pmd/commit/2a2fa20883f6d24df5e901967bd3b0297edb5182", "message": "[java] Update ASM for bytecode parsing", "committedDate": "2020-08-13T17:29:45Z", "type": "commit"}, {"oid": "40f0eedf888e8cca1218903bdfe59c3f47ad89bc", "url": "https://github.com/pmd/pmd/commit/40f0eedf888e8cca1218903bdfe59c3f47ad89bc", "message": "[java] Text Blocks are now a permanent language feature with JDK 15", "committedDate": "2020-08-13T18:05:54Z", "type": "commit"}, {"oid": "e596a6729789aec7c4b0dedd0f691657f246100a", "url": "https://github.com/pmd/pmd/commit/e596a6729789aec7c4b0dedd0f691657f246100a", "message": "[java] Support Pattern Matching for instanceof with Java 15 Preview.", "committedDate": "2020-08-13T18:11:25Z", "type": "commit"}, {"oid": "e51519c5fd90216c85b51e1fa0c2d39c13ecaaf8", "url": "https://github.com/pmd/pmd/commit/e51519c5fd90216c85b51e1fa0c2d39c13ecaaf8", "message": "[java] Support Records with Java 15 Preview", "committedDate": "2020-08-13T18:42:08Z", "type": "commit"}, {"oid": "0a297329098eb7d5f5ff9d31b1bc3ddb4ce6af00", "url": "https://github.com/pmd/pmd/commit/0a297329098eb7d5f5ff9d31b1bc3ddb4ce6af00", "message": "Fix Kotlin Tests", "committedDate": "2020-08-13T18:54:34Z", "type": "commit"}, {"oid": "4d2853ccc4377aaf8944d02937342f46c7efca43", "url": "https://github.com/pmd/pmd/commit/4d2853ccc4377aaf8944d02937342f46c7efca43", "message": "[java] Add support for local records (Java 15 Preview)", "committedDate": "2020-08-14T16:55:00Z", "type": "commit"}, {"oid": "cda155891ac20af53d6c550b254a91675935d6d2", "url": "https://github.com/pmd/pmd/commit/cda155891ac20af53d6c550b254a91675935d6d2", "message": "[java] Add ugly lookahead for local record declarations\n\nso that it can be distinguished from local var decl or other\nstatements.", "committedDate": "2020-08-14T18:56:26Z", "type": "commit"}, {"oid": "0d9b5a7c3b27063d4393de62d123d9ce3208d682", "url": "https://github.com/pmd/pmd/commit/0d9b5a7c3b27063d4393de62d123d9ce3208d682", "message": "[java] Support Sealed Classes with Java 15 Preview", "committedDate": "2020-08-14T20:16:41Z", "type": "commit"}, {"oid": "8b159f389a9614a88cf80038a9bd57af6c8bab0f", "url": "https://github.com/pmd/pmd/commit/8b159f389a9614a88cf80038a9bd57af6c8bab0f", "message": "[java] Remove Experimental for TextBlocks, Update javadoc for Java15 Preview", "committedDate": "2020-08-14T20:20:40Z", "type": "commit"}, {"oid": "28aaeefdd95fae504a57b88f54e36943dbf761c1", "url": "https://github.com/pmd/pmd/commit/28aaeefdd95fae504a57b88f54e36943dbf761c1", "message": "[doc] Update release notes, fixes #2646", "committedDate": "2020-08-14T20:26:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyMjE3Mw==", "url": "https://github.com/pmd/pmd/pull/2714#discussion_r470922173", "bodyText": "Do we need to continue writing grammar tests this way? This is really inferior to the kotlin tests, and hard to update to java-grammar...", "author": "oowekyala", "createdAt": "2020-08-15T01:37:39Z", "path": "pmd-java/src/test/java/net/sourceforge/pmd/lang/java/ast/Java15PreviewTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import java.util.List;\n+\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import net.sourceforge.pmd.lang.ast.ParseException;\n+import net.sourceforge.pmd.lang.java.JavaParsingHelper;\n+import net.sourceforge.pmd.lang.java.ast.ASTAnyTypeBodyDeclaration.DeclarationKind;\n+\n+public class Java15PreviewTest {\n+    private final JavaParsingHelper java15p =\n+            JavaParsingHelper.WITH_PROCESSING.withDefaultVersion(\"15-preview\")\n+                                             .withResourceContext(Java15PreviewTest.class, \"jdkversiontests/java15p/\");\n+\n+    private final JavaParsingHelper java15 = java15p.withDefaultVersion(\"15\");\n+\n+    @Test\n+    public void patternMatchingInstanceof() {\n+        ASTCompilationUnit compilationUnit = java15p.parseResource(\"PatternMatchingInstanceof.java\");\n+        List<ASTInstanceOfExpression> instanceOfExpressions = compilationUnit.findDescendantsOfType(ASTInstanceOfExpression.class);\n+        Assert.assertEquals(4, instanceOfExpressions.size());\n+        for (ASTInstanceOfExpression expr : instanceOfExpressions) {\n+            Assert.assertTrue(expr.getChild(1) instanceof ASTTypeTestPattern);\n+            ASTVariableDeclaratorId variable = expr.getChild(1).getFirstChildOfType(ASTVariableDeclaratorId.class);\n+            Assert.assertEquals(String.class, variable.getType());\n+            Assert.assertEquals(\"s\", variable.getVariableName());\n+            Assert.assertTrue(variable.isPatternBinding());\n+            Assert.assertTrue(variable.isFinal());\n+            // Note: these variables are not part of the symbol table\n+            // See ScopeAndDeclarationFinder#visit(ASTVariableDeclaratorId, Object)\n+            Assert.assertNull(variable.getNameDeclaration());\n+        }\n+    }\n+\n+    @Test(expected = ParseException.class)\n+    public void patternMatchingInstanceofBeforeJava15PreviewShouldFail() {\n+        java15.parseResource(\"PatternMatchingInstanceof.java\");\n+    }\n+\n+    @Test\n+    public void recordPoint() {\n+        ASTCompilationUnit compilationUnit = java15p.parseResource(\"Point.java\");\n+        ASTRecordDeclaration recordDecl = compilationUnit.getFirstDescendantOfType(ASTRecordDeclaration.class);\n+        Assert.assertEquals(\"Point\", recordDecl.getImage());\n+        Assert.assertFalse(recordDecl.isNested());\n+        Assert.assertFalse(recordDecl.isLocal());\n+        Assert.assertTrue(\"Records are implicitly always final\", recordDecl.isFinal());\n+        List<ASTRecordComponent> components = recordDecl.getFirstChildOfType(ASTRecordComponentList.class)\n+                                                        .findChildrenOfType(ASTRecordComponent.class);\n+        Assert.assertEquals(2, components.size());\n+        Assert.assertEquals(\"x\", components.get(0).getVarId().getImage());\n+        Assert.assertEquals(\"y\", components.get(1).getVarId().getImage());\n+        Assert.assertNull(components.get(0).getVarId().getNameDeclaration().getAccessNodeParent());\n+        Assert.assertEquals(Integer.TYPE, components.get(0).getVarId().getNameDeclaration().getType());\n+        Assert.assertEquals(\"int\", components.get(0).getVarId().getNameDeclaration().getTypeImage());\n+    }\n+\n+    @Test(expected = ParseException.class)\n+    public void recordPointBeforeJava15PreviewShouldFail() {\n+        java15.parseResource(\"Point.java\");\n+    }\n+\n+    @Test(expected = ParseException.class)\n+    public void recordCtorWithThrowsShouldFail() {\n+        java15p.parse(\"  record R {\"\n+                          + \"   R throws IOException {}\"\n+                          + \"  }\");\n+    }\n+\n+    @Test(expected = ParseException.class)\n+    public void recordMustNotExtend() {\n+        java15p.parse(\"record RecordEx(int x) extends Number { }\");\n+    }\n+\n+    @Test(expected = ParseException.class)\n+    @Ignore(\"Should we check this?\")\n+    public void recordCannotBeAbstract() {\n+        java15p.parse(\"abstract record RecordEx(int x) { }\");\n+    }\n+\n+    @Test(expected = ParseException.class)\n+    @Ignore(\"Should we check this?\")\n+    public void recordCannotHaveInstanceFields() {\n+        java15p.parse(\"record RecordFields(int x) { private int y = 1; }\");\n+    }\n+\n+    @Test\n+    public void innerRecords() {\n+        ASTCompilationUnit compilationUnit = java15p.parseResource(\"Records.java\");\n+        List<ASTRecordDeclaration> recordDecls = compilationUnit.findDescendantsOfType(ASTRecordDeclaration.class, true);", "originalCommit": "28aaeefdd95fae504a57b88f54e36943dbf761c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE1MDkyOQ==", "url": "https://github.com/pmd/pmd/pull/2714#discussion_r471150929", "bodyText": "I'll try tomorrow to write Kotlin - that basically entails that we ditch eclipse as a supported IDE for developing PMD (see https://github.com/pmd/pmd/wiki/Setup-IDE)... since Kotlin+Eclipse doesn't work.", "author": "adangel", "createdAt": "2020-08-16T19:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyMjE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0NzIwNg==", "url": "https://github.com/pmd/pmd/pull/2714#discussion_r472047206", "bodyText": "There's also the possibility of writing tests like #2445, which looks useful since your test data is already in separate files. This doesn't need to be in kotlin\nThese kind of java tests where you manually extract some nodes with eg findDescendantsOfType and hardcoded indices are very error prone to write, unreadable, and hard to update. They also don't test much of the structure compare to #2445 or a kotlin test. I think it would be better to use #2445 as a blanket test to assert the structure, and then some more focused unit tests to test the methods, if you want to write them in java.", "author": "oowekyala", "createdAt": "2020-08-18T09:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyMjE3Mw=="}], "type": "inlineReview"}, {"oid": "fceb474df00cbdf456b488188076d73b2d4c37b7", "url": "https://github.com/pmd/pmd/commit/fceb474df00cbdf456b488188076d73b2d4c37b7", "message": "[java] Remove \"non-sealed\" token and use semantic lookahead instead", "committedDate": "2020-08-16T16:22:45Z", "type": "commit"}, {"oid": "67b37de334fedd97bcefa8bb62c6318b56e82338", "url": "https://github.com/pmd/pmd/commit/67b37de334fedd97bcefa8bb62c6318b56e82338", "message": "[java] Rework BlockStatement to allow local interfaces, enums, ...", "committedDate": "2020-08-16T19:42:36Z", "type": "commit"}, {"oid": "04850c69bc2002aeef4dbd778771cd0d8fa4ba91", "url": "https://github.com/pmd/pmd/commit/04850c69bc2002aeef4dbd778771cd0d8fa4ba91", "message": "[java] Rework tests for Java 15 and Java 15 Preview", "committedDate": "2020-08-19T16:54:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3OTA3OA==", "url": "https://github.com/pmd/pmd/pull/2714#discussion_r475079078", "bodyText": "Maybe, this node should be renamed to ASTPermitsList. On the java-grammar branch we already have many kinds of *List: ExtendsList, ImplementsList, ArgumentsList, ThrowsList, ResourceList, etc. Those extend ASTList. The relation to ASTList will probably be more obvious if this node also ends with \"List\".", "author": "oowekyala", "createdAt": "2020-08-22T11:03:17Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTPermittedSubclasses.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.java.ast;\n+\n+import java.util.Iterator;\n+\n+import net.sourceforge.pmd.annotation.Experimental;\n+\n+\n+/**\n+ * Represents the {@code permits} clause of a (sealed) class declaration.\n+ *\n+ * <p>This is a Java 15 Preview feature.\n+ *\n+ * <p>See https://openjdk.java.net/jeps/360\n+ *\n+ * <pre class=\"grammar\">\n+ *  PermittedSubclasses ::= \"permits\" (TypeAnnotation)* ClassOrInterfaceType\n+ *                ( \",\" (TypeAnnotation)* ClassOrInterfaceType )*\n+ * </pre>\n+ */\n+@Experimental\n+public final class ASTPermittedSubclasses extends AbstractJavaNode implements Iterable<ASTClassOrInterfaceType> {", "originalCommit": "04850c69bc2002aeef4dbd778771cd0d8fa4ba91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExMDM4Ng==", "url": "https://github.com/pmd/pmd/pull/2714#discussion_r475110386", "bodyText": "Renaming it to ASTPermitsList makes sense, yes.\nShall I do it or will you rename it?", "author": "adangel", "createdAt": "2020-08-22T17:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3OTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExMDU2Nw==", "url": "https://github.com/pmd/pmd/pull/2714#discussion_r475110567", "bodyText": "I can do it when I merge", "author": "oowekyala", "createdAt": "2020-08-22T17:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3OTA3OA=="}], "type": "inlineReview"}]}