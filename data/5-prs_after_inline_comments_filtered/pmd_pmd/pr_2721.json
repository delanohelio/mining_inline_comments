{"pr_number": 2721, "pr_title": "[java] Deprecate old symbol table, add replacement for TypeHelper", "pr_createdAt": "2020-08-22T16:50:31Z", "pr_url": "https://github.com/pmd/pmd/pull/2721", "timeline": [{"oid": "ac94110fc4e7e40fa85bc0804abb22c54c5ccb0c", "url": "https://github.com/pmd/pmd/commit/ac94110fc4e7e40fa85bc0804abb22c54c5ccb0c", "message": "Mark symbol table classes as internal api", "committedDate": "2020-08-22T16:00:04Z", "type": "commit"}, {"oid": "30b76285e3d65ecc946ebeb7315e95abfda451b9", "url": "https://github.com/pmd/pmd/commit/30b76285e3d65ecc946ebeb7315e95abfda451b9", "message": "Add replacement for TypeHelper", "committedDate": "2020-08-22T16:17:08Z", "type": "commit"}, {"oid": "95140fc2cb7b13d609b954f68d602dbf09cf0c05", "url": "https://github.com/pmd/pmd/commit/95140fc2cb7b13d609b954f68d602dbf09cf0c05", "message": "Update release notes", "committedDate": "2020-08-22T16:17:11Z", "type": "commit"}, {"oid": "bee844d57d95f758216abddcf17426a38a368c64", "url": "https://github.com/pmd/pmd/commit/bee844d57d95f758216abddcf17426a38a368c64", "message": "Duplicate tests", "committedDate": "2020-08-22T16:25:42Z", "type": "commit"}, {"oid": "ab971f1c8f99b86c1696df23a3236e84a705997d", "url": "https://github.com/pmd/pmd/commit/ab971f1c8f99b86c1696df23a3236e84a705997d", "message": "Fix tests", "committedDate": "2020-08-22T16:48:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExMDg2Ng==", "url": "https://github.com/pmd/pmd/pull/2721#discussion_r475110866", "bodyText": "I think, this simplification is actually correct - junit3 test is always a subclass of TestCase, so the type check is sufficient.", "author": "adangel", "createdAt": "2020-08-22T17:13:38Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/AbstractJUnitRule.java", "diffHunk": "@@ -97,26 +95,7 @@ private boolean isJUnit3Method(ASTMethodDeclaration method) {\n \n     private boolean isJUnit3Class(ASTCompilationUnit node) {\n         ASTClassOrInterfaceDeclaration cid = node.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class);\n-        if (cid == null) {\n-            return false;\n-        }\n-\n-        if (node.getType() != null && TypeHelper.isA(node, JUNIT3_CLASS_NAME)) {\n-            return true;\n-        } else if (node.getType() == null) {\n-            ASTExtendsList extendsList = cid.getFirstChildOfType(ASTExtendsList.class);\n-            if (extendsList == null) {\n-                return false;\n-            }\n-            if (((ASTClassOrInterfaceType) extendsList.getChild(0)).getImage().endsWith(\"TestCase\")) {\n-                return true;\n-            }\n-            String className = cid.getSimpleName();\n-            return className.endsWith(\"Test\");\n-        } else if (hasImports(node, JUNIT3_CLASS_NAME)) {\n-            return cid.getSimpleName().endsWith(\"Test\");\n-        }\n-        return false;\n+        return TypeTestUtil.isA(JUNIT3_CLASS_NAME, cid);", "originalCommit": "ab971f1c8f99b86c1696df23a3236e84a705997d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}