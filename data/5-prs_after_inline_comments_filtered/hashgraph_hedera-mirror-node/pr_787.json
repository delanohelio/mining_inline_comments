{"pr_number": 787, "pr_title": "Add retry to PubSub send", "pr_createdAt": "2020-05-23T01:08:14Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/787", "timeline": [{"oid": "54685ee3b02869b4c9a12a920798f53aa74c10db", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/54685ee3b02869b4c9a12a920798f53aa74c10db", "message": "Add retry to PubSub send\n\nLast PagerDuty alert was due to send timeout when publishing message to PubSub.\nTimeout is 10sec. Messages usually take few ms to get published, so increasing\ntimeout won't do much good.\nAdding retry to build some resiliency against retrying errors.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-23T00:55:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMDcwNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429500706", "bodyText": "nit: Saying the attempt number is good for troubleshooting e.g. \"Attempt 1 timed out....\"", "author": "Nana-EC", "createdAt": "2020-05-23T01:11:52Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -79,6 +78,22 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         }\n     }\n \n+    // Publishes the PubSubMessage while retrying if a retryable error is encountered.\n+    private void sendPubSubMessage(PubSubMessage pubSubMessage) {\n+        for (int numRetries = 0; numRetries < pubSubProperties.getNumSendTries(); numRetries++) {\n+            try {\n+                pubsubOutputChannel.send(MessageBuilder\n+                        .withPayload(pubSubMessage)\n+                        .setHeader(\"consensusTimestamp\", pubSubMessage.getConsensusTimestamp())\n+                        .build());\n+            } catch (MessageTimeoutException e) {\n+                log.warn(\"Timed out sending message to PubSub\");", "originalCommit": "54685ee3b02869b4c9a12a920798f53aa74c10db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMTA5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429501093", "bodyText": "done.", "author": "apeksharma", "createdAt": "2020-05-23T01:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMDcwNg=="}], "type": "inlineReview"}, {"oid": "c9a6ae3431e6ae41f08117d9b76fa4e561913184", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c9a6ae3431e6ae41f08117d9b76fa4e561913184", "message": "address review\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-23T01:16:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTExNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429509117", "bodyText": "Would prefer we not to mix non-business logic in with business logic. Since you're using Spring Integration you should take advantage of the Enterprise Integration Patterns it provides and decouple the two. Besides always being better to delegate such common patterns to a well tested library, it also allows advanced features like customizing backoff policies. Can suggest at least two other ways:\n\nUse an interface annotated with @MessagingGateway as I originally suggested and just put @Retryable(include = MessageTimeoutException.class, maxAttemptsExpression = \"${hedera....maxAttempts}\"} on it\nUse Spring Integration DSL in PubSubAutoConfiguration with retry advice.", "author": "steven-sheehy", "createdAt": "2020-05-23T03:17:14Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -79,6 +78,22 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         }\n     }\n \n+    // Publishes the PubSubMessage while retrying if a retryable error is encountered.\n+    private void sendPubSubMessage(PubSubMessage pubSubMessage) {", "originalCommit": "c9a6ae3431e6ae41f08117d9b76fa4e561913184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTk1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429509957", "bodyText": "Won't be able to do this right now. I understand above suggestions might be better way of doing it, but right now i lack the bandwidth to learn springy way of doing things. Need to get this out.", "author": "apeksharma", "createdAt": "2020-05-23T03:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzA0Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429573047", "bodyText": "Fair enough. Let's create a ticket to track for later inclusion.", "author": "steven-sheehy", "createdAt": "2020-05-23T19:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MDI1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r430670258", "bodyText": "Thanks. Created #789  :)", "author": "apeksharma", "createdAt": "2020-05-26T19:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTExNw=="}], "type": "inlineReview"}, {"oid": "b54f1d4d366bbc779fbad2fdbd074fe9b8cb150a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b54f1d4d366bbc779fbad2fdbd074fe9b8cb150a", "message": "address comments\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-05-23T03:27:32Z", "type": "commit"}]}