{"pr_number": 696, "pr_title": "Address book fix", "pr_createdAt": "2020-04-20T17:35:16Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/696", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2ODg5MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/696#discussion_r411568891", "bodyText": "I don't think this method has test coverage.", "author": "Nana-EC", "createdAt": "2020-04-20T17:43:19Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -72,45 +72,58 @@ private void init() {\n     }\n \n     public void update(byte[] newContents) throws IOException {\n-        addressBookBytes = newContents;\n-        saveToDisk();\n+        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n     }\n \n     public void append(byte[] extraContents) throws IOException {\n-        byte[] newAddressBook = Arrays.copyOf(addressBookBytes, addressBookBytes.length + extraContents.length);\n-        System.arraycopy(extraContents, 0, newAddressBook, addressBookBytes.length, extraContents.length);\n-        addressBookBytes = newAddressBook;\n-        saveToDisk();\n+        saveToDisk(extraContents, StandardOpenOption.APPEND);", "originalCommit": "f36472b8a85379c813a7de96d154ea3fab3e4f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjUwMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/696#discussion_r411626502", "bodyText": "There is integration test coverage in RecordItemParserFileTest. Will add NetworkAddressBook unit tests when porting to master.", "author": "steven-sheehy", "createdAt": "2020-04-20T19:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2ODg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3OTEyNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/696#discussion_r411579125", "bodyText": "Since NetworkAddressBook \"owns\" underlying file, it doesn't need a disk IO every time Downloader needs list of nodes.\nWe can store Collection<NodeAddress> in local variable, initializing it in init() and updating it in saveToDisk in if (!nodeAddresses.isEmpty()) { condition", "author": "apeksharma", "createdAt": "2020-04-20T17:58:31Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -72,45 +72,58 @@ private void init() {\n     }\n \n     public void update(byte[] newContents) throws IOException {\n-        addressBookBytes = newContents;\n-        saveToDisk();\n+        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n     }\n \n     public void append(byte[] extraContents) throws IOException {\n-        byte[] newAddressBook = Arrays.copyOf(addressBookBytes, addressBookBytes.length + extraContents.length);\n-        System.arraycopy(extraContents, 0, newAddressBook, addressBookBytes.length, extraContents.length);\n-        addressBookBytes = newAddressBook;\n-        saveToDisk();\n+        saveToDisk(extraContents, StandardOpenOption.APPEND);\n     }\n \n-    private void saveToDisk() throws IOException {\n+    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n         Path path = mirrorProperties.getAddressBookPath();\n-        Files.write(path, addressBookBytes);\n-        log.info(\"New address book successfully saved to {}\", path);\n+        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n+        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n+        log.info(\"Saved temporary address book to {}\", tempPath);\n+\n+        try {\n+            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n+            if (!nodeAddresses.isEmpty()) {\n+                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n+                log.info(\"New address book successfully parsed and saved to {}\", path);\n+            }\n+        } catch (Exception e) {\n+            // Ignore partial update errors\n+        }\n     }\n \n-    public Collection<NodeAddress> load() {\n+    private Collection<NodeAddress> parse(Path path) throws Exception {\n+        byte[] addressBookBytes = Files.readAllBytes(path);\n+        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n+\n+        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                .getNodeAddressList()) {\n+            NodeAddress nodeAddress = NodeAddress.builder()\n+                    .id(nodeAddressProto.getMemo().toStringUtf8())\n+                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                    .port(nodeAddressProto.getPortno())\n+                    .publicKey(nodeAddressProto.getRSAPubKey())\n+                    .build();\n+            builder.add(nodeAddress);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    public Collection<NodeAddress> load() {\n         Path path = mirrorProperties.getAddressBookPath();\n \n         try {\n-            byte[] addressBookBytes = Files.readAllBytes(path);\n-            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n-\n-            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                    .getNodeAddressList()) {\n-                NodeAddress nodeAddress = NodeAddress.builder()\n-                        .id(nodeAddressProto.getMemo().toStringUtf8())\n-                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                        .port(nodeAddressProto.getPortno())\n-                        .publicKey(nodeAddressProto.getRSAPubKey())\n-                        .build();\n-                builder.add(nodeAddress);\n-            }\n+            return parse(path);", "originalCommit": "f36472b8a85379c813a7de96d154ea3fab3e4f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxOTQ2OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/696#discussion_r411619469", "bodyText": "We will defer this item to resolving it on master", "author": "steven-sheehy", "createdAt": "2020-04-20T19:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3OTEyNQ=="}], "type": "inlineReview"}, {"oid": "d703191c5641a2643fd0caed3c93df2fe4ac62b1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d703191c5641a2643fd0caed3c93df2fe4ac62b1", "message": "Fix address book updates\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-04-20T17:58:58Z", "type": "commit"}, {"oid": "13e0552c60a5d984daabc5f92b6dfe7ad9345ad0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/13e0552c60a5d984daabc5f92b6dfe7ad9345ad0", "message": "Update versions to 0.9.1\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-04-20T17:59:01Z", "type": "commit"}, {"oid": "13e0552c60a5d984daabc5f92b6dfe7ad9345ad0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/13e0552c60a5d984daabc5f92b6dfe7ad9345ad0", "message": "Update versions to 0.9.1\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-04-20T17:59:01Z", "type": "forcePushed"}]}