{"pr_number": 1090, "pr_title": "HTS: Support new balance file version", "pr_createdAt": "2020-09-30T14:40:39Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090", "timeline": [{"oid": "de727b1671e680ef7bc6a93d8b1bf762c6b80bf8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/de727b1671e680ef7bc6a93d8b1bf762c6b80bf8", "message": "Importer: Add support for new balance file version\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-09-29T17:30:23Z", "type": "commit"}, {"oid": "2e42b9f9084d6655bf7772b61964b9cd995e8a9e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2e42b9f9084d6655bf7772b61964b9cd995e8a9e", "message": "Add V2 classes to handle new files\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-09-30T14:38:37Z", "type": "commit"}, {"oid": "a65106c67174a54c8e47b457ebef65805771ad81", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a65106c67174a54c8e47b457ebef65805771ad81", "message": "Merge branch 'master' into support_new_balance_file_version", "committedDate": "2020-10-01T03:38:18Z", "type": "commit"}, {"oid": "f3654fd5e6a8a35d87e792ce9975f8dedb483442", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f3654fd5e6a8a35d87e792ce9975f8dedb483442", "message": "Add tests for new balance file\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-01T03:52:16Z", "type": "commit"}, {"oid": "b0f30c68ef7a89277176fb8751e6528dfab9db59", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b0f30c68ef7a89277176fb8751e6528dfab9db59", "message": "Fix FileLoader test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-01T03:57:41Z", "type": "commit"}, {"oid": "552801f4b2a63d039ae1fd0958f0907b0869874c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/552801f4b2a63d039ae1fd0958f0907b0869874c", "message": "Refactor and add tests\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-01T08:28:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3MjYzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498072633", "bodyText": "The FileLoader test seems to show these aren't actually being picked up by the repository, despite them being in the DB.  Need to investigate", "author": "ijungmann", "createdAt": "2020-10-01T08:30:31Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AccountBalance.java", "diffHunk": "@@ -43,6 +49,13 @@\n \n     private long balance;\n \n+    @OneToMany(cascade = {CascadeType.ALL}, orphanRemoval = true, fetch = FetchType.EAGER)\n+    @JoinColumns({\n+            @JoinColumn(name = \"consensusTimestamp\"),\n+            @JoinColumn(name = \"accountId\")\n+    })", "originalCommit": "552801f4b2a63d039ae1fd0958f0907b0869874c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1MTQ3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499851472", "bodyText": "There were flipped in the flyway script, so they weren't joining properly.  This has been fixed and tests confirm.", "author": "ijungmann", "createdAt": "2020-10-05T20:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3MjYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3Mjk4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498072985", "bodyText": "Add a test for this class", "author": "ijungmann", "createdAt": "2020-10-01T08:31:05Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.v1.BalanceFileReaderImplV1;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n+\n+@Named\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+    private static final String VERSION_010_HEADER_PREFIX = \"# 0.1.0\";", "originalCommit": "552801f4b2a63d039ae1fd0958f0907b0869874c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExOTQ4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499119488", "bodyText": "Done", "author": "ijungmann", "createdAt": "2020-10-03T05:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3Mjk4NQ=="}], "type": "inlineReview"}, {"oid": "47363c0779322d56febd4778de6d404046ce6598", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/47363c0779322d56febd4778de6d404046ce6598", "message": "Removed unused test resource\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-01T08:32:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MjAzMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498392033", "bodyText": "nit: can remove\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //import com.hedera.mirror.importer.converter.TokenIdConverter;", "author": "Nana-EC", "createdAt": "2020-10-01T17:02:42Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenBalance.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.hedera.mirror.importer.domain;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import java.io.Serializable;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.data.domain.Persistable;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+//import com.hedera.mirror.importer.converter.TokenIdConverter;", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMzA5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498923090", "bodyText": "Removed", "author": "ijungmann", "createdAt": "2020-10-02T16:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MjAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MjY0Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498392647", "bodyText": "nit: empty line between members for readability", "author": "Nana-EC", "createdAt": "2020-10-01T17:03:46Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenBalance.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.hedera.mirror.importer.domain;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import java.io.Serializable;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.data.domain.Persistable;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+//import com.hedera.mirror.importer.converter.TokenIdConverter;\n+\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Entity\n+public class TokenBalance implements Persistable<TokenBalance.Id> {\n+    private long balance;\n+    @EmbeddedId\n+    @JsonUnwrapped\n+    private TokenBalance.Id id;\n+\n+    @Override\n+    public boolean isNew() {\n+        return true; // Since we never update balances and use a natural ID, avoid Hibernate querying before insert\n+    }\n+\n+    @Data\n+    @AllArgsConstructor\n+    @NoArgsConstructor\n+    @Embeddable\n+    public static class Id implements Serializable {\n+        private static final long serialVersionUID = -8547332015249955424L;", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMzE3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498923171", "bodyText": "Added", "author": "ijungmann", "createdAt": "2020-10-02T16:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MjY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MzgwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498393803", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    tryExecuteBatchStatement(insertBalanceStatement, \"Some account balance insert statement in the \" +\n          \n          \n            \n                    tryExecuteBatchStatement(insertBalanceStatement, \"Some account balance insert statements in the \" +", "author": "Nana-EC", "createdAt": "2020-10-01T17:06:04Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/AccountBalancesFileLoader.java", "diffHunk": "@@ -175,31 +189,63 @@ private void insertAccountBalanceSet(PreparedStatement insertSetStatement, long\n         insertSetStatement.execute();\n     }\n \n-    private void tryInsertBatchAccountBalance(PreparedStatement insertBalanceStatement,\n-                                              List<AccountBalance> accountBalanceList, int threshold) throws SQLException {\n+    private void tryInsertBatchAccountBalanceAndTokenBalance(PreparedStatement insertBalanceStatement,\n+                                                             PreparedStatement insertBatchTokenBalanceStatement,\n+                                                             List<AccountBalance> accountBalanceList, int threshold) throws SQLException {\n         if (accountBalanceList.size() < threshold) {\n             return;\n         }\n-\n         for (var accountBalance : accountBalanceList) {\n-            AccountBalance.Id id = accountBalance.getId();\n-            insertBalanceStatement.setLong(F_INSERT_BALANCE.CONSENSUS_TIMESTAMP.ordinal(), id.getConsensusTimestamp());\n-            insertBalanceStatement.setLong(F_INSERT_BALANCE.ACCOUNT_ID.ordinal(), id.getAccountId().getId());\n-            insertBalanceStatement.setLong(F_INSERT_BALANCE.BALANCE.ordinal(), accountBalance.getBalance());\n-            insertBalanceStatement.addBatch();\n+            buildBatchAccountBalanceStatement(insertBalanceStatement, accountBalance);\n+            buildBatchAccountTokenBalanceStatement(insertBatchTokenBalanceStatement, accountBalance.getTokenBalances());\n         }\n-\n+        tryExecuteBatchStatement(insertBalanceStatement, \"Some account balance insert statement in the \" +", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMzIxNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498923216", "bodyText": "Fixed", "author": "ijungmann", "createdAt": "2020-10-02T16:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MzgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NDAxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498394011", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    tryExecuteBatchStatement(insertBatchTokenBalanceStatement, \"Some account token balance insert statement in \" +\n          \n          \n            \n                    tryExecuteBatchStatement(insertBatchTokenBalanceStatement, \"Some account token balance insert statements in \" +", "author": "Nana-EC", "createdAt": "2020-10-01T17:06:31Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/AccountBalancesFileLoader.java", "diffHunk": "@@ -175,31 +189,63 @@ private void insertAccountBalanceSet(PreparedStatement insertSetStatement, long\n         insertSetStatement.execute();\n     }\n \n-    private void tryInsertBatchAccountBalance(PreparedStatement insertBalanceStatement,\n-                                              List<AccountBalance> accountBalanceList, int threshold) throws SQLException {\n+    private void tryInsertBatchAccountBalanceAndTokenBalance(PreparedStatement insertBalanceStatement,\n+                                                             PreparedStatement insertBatchTokenBalanceStatement,\n+                                                             List<AccountBalance> accountBalanceList, int threshold) throws SQLException {\n         if (accountBalanceList.size() < threshold) {\n             return;\n         }\n-\n         for (var accountBalance : accountBalanceList) {\n-            AccountBalance.Id id = accountBalance.getId();\n-            insertBalanceStatement.setLong(F_INSERT_BALANCE.CONSENSUS_TIMESTAMP.ordinal(), id.getConsensusTimestamp());\n-            insertBalanceStatement.setLong(F_INSERT_BALANCE.ACCOUNT_ID.ordinal(), id.getAccountId().getId());\n-            insertBalanceStatement.setLong(F_INSERT_BALANCE.BALANCE.ordinal(), accountBalance.getBalance());\n-            insertBalanceStatement.addBatch();\n+            buildBatchAccountBalanceStatement(insertBalanceStatement, accountBalance);\n+            buildBatchAccountTokenBalanceStatement(insertBatchTokenBalanceStatement, accountBalance.getTokenBalances());\n         }\n-\n+        tryExecuteBatchStatement(insertBalanceStatement, \"Some account balance insert statement in the \" +\n+                \"batch failed to execute\");\n+        tryExecuteBatchStatement(insertBatchTokenBalanceStatement, \"Some account token balance insert statement in \" +", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NTU3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498395575", "bodyText": "This should be v2, service should have made that fix but you can verify\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String VERSION_010_HEADER_PREFIX = \"# 0.1.0\";\n          \n          \n            \n                private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";", "author": "Nana-EC", "createdAt": "2020-10-01T17:09:30Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.v1.BalanceFileReaderImplV1;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n+\n+@Named\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+    private static final String VERSION_010_HEADER_PREFIX = \"# 0.1.0\";", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMzg5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498923893", "bodyText": "Corrected", "author": "ijungmann", "createdAt": "2020-10-02T16:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NTU3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjU0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498436545", "bodyText": "Not needed. I think we had discussed being strict on this version of the file, so we expect line 1 to have the version", "author": "Nana-EC", "createdAt": "2020-10-01T18:25:32Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/v2/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceFileReader;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final int MAX_HEADER_ROWS = 10;", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNDA3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498924079", "bodyText": "Sure thing, fixed to only check line 2", "author": "ijungmann", "createdAt": "2020-10-02T16:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0ODUyMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498448521", "bodyText": "The source file TokenBalanceRepository.java is missing", "author": "xin-hedera", "createdAt": "2020-10-01T18:48:47Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/balance/AccountBalancesFileLoaderTest.java", "diffHunk": "@@ -47,9 +47,11 @@\n import com.hedera.mirror.importer.domain.AccountBalanceFile;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n import com.hedera.mirror.importer.repository.AccountBalanceFileRepository;\n import com.hedera.mirror.importer.repository.AccountBalanceRepository;\n import com.hedera.mirror.importer.repository.AccountBalanceSetRepository;\n+import com.hedera.mirror.importer.repository.TokenBalanceRepository;", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNDM0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498924346", "bodyText": "Added", "author": "ijungmann", "createdAt": "2020-10-02T16:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0ODUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMTM2Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498501367", "bodyText": "the number of token balances overall and the number of account balances will differ most likely, batching them together actually honor the batchSize for account balances but not for token balances. this will have an impact on performance", "author": "xin-hedera", "createdAt": "2020-10-01T20:40:51Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/AccountBalancesFileLoader.java", "diffHunk": "@@ -175,31 +189,63 @@ private void insertAccountBalanceSet(PreparedStatement insertSetStatement, long\n         insertSetStatement.execute();\n     }\n \n-    private void tryInsertBatchAccountBalance(PreparedStatement insertBalanceStatement,\n-                                              List<AccountBalance> accountBalanceList, int threshold) throws SQLException {\n+    private void tryInsertBatchAccountBalanceAndTokenBalance(PreparedStatement insertBalanceStatement,", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTM4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498619385", "bodyText": "Yes, I was a little worried about that, I wasn't sure if it was worth it to always insert TokenBalances at the same time as AccountBalances or to save them separately when the batch size is hit..  I can put it back to having them be separate methods.", "author": "ijungmann", "createdAt": "2020-10-02T05:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMTM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODU3Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498928573", "bodyText": "I've put it back to being separate calls, each looking at their respective list size.", "author": "ijungmann", "createdAt": "2020-10-02T16:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMTM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDY5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498510697", "bodyText": "should test both v1 and v2 balance files", "author": "xin-hedera", "createdAt": "2020-10-01T21:00:34Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/balance/AccountBalancesFileLoaderTest.java", "diffHunk": "@@ -65,37 +67,40 @@\n     @Resource\n     private AccountBalanceRepository accountBalanceRepository;\n \n+    @Resource\n+    private TokenBalanceRepository tokenBalanceRepository;\n+\n     @Resource\n     private AccountBalanceSetRepository accountBalanceSetRepository;\n \n     @Resource\n     private AccountBalanceFileRepository accountBalanceFileRepository;\n \n     @Resource\n-    private BalanceFileReaderImpl balanceFileReader;\n+    private BalanceFileReaderImplV2 balanceFileReader;\n \n     private FileCopier fileCopier;\n     private BalanceFile balanceFile;\n     private File testFile;\n \n     @BeforeEach\n     void setup() {\n-        balanceFile = new BalanceFile(1567188900016002001L, 25391, \"2019-08-30T18_15_00.016002001Z_Balances.csv\");\n+        balanceFile = new BalanceFile(1600748700083212003L, 106, \"2020-09-22T04_25_00.083212003Z_Balances.csv\");", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNzg4MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499717881", "bodyText": "Redid this test suite to make it easy to test multiple versions, it now tests v1 and v2", "author": "ijungmann", "createdAt": "2020-10-05T16:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNDU5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498514590", "bodyText": "the expected token balance list should be something like \",\" separated tokenid=balance string, not the base64 encoded protobuf", "author": "xin-hedera", "createdAt": "2020-10-01T21:09:28Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/balance/v2/AccountBalanceLineParserV2Test.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import com.hederahashgraph.api.proto.java.TokenBalances;\n+import com.hederahashgraph.api.proto.java.TokenID;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.TokenBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+class AccountBalanceLineParserV2Test {\n+\n+    private static final long timestamp = 1596340377922333444L;\n+    private static final long systemShardNum = 0;\n+\n+    @DisplayName(\"Parse account balance line\")\n+    @ParameterizedTest(name = \"from \\\"{0}\\\"\")\n+    @CsvSource(value = {\n+            \"'0,0,123,700,CggKAxjsBxCEBwoHCgMY7QcQGQoKCgMY7gcQwKilBAoICgMY8gcQhAcKBwoDGPMHEBkKCgoDGPQHEMCopQQ';false;\" +\n+                    \"0;123;700;CggKAxjsBxCEBwoHCgMY7QcQGQoKCgMY7gcQwKilBAoICgMY8gcQhAcKBwoDGPMHEBkKCgoDGPQHEMCopQQ\",", "originalCommit": "47363c0779322d56febd4778de6d404046ce6598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NzE0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499067144", "bodyText": "Converted test to use comma separated list of values.", "author": "ijungmann", "createdAt": "2020-10-02T21:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNDU5MA=="}], "type": "inlineReview"}, {"oid": "e320209d69a9ae6b2eabbe5949d3835e4919f444", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e320209d69a9ae6b2eabbe5949d3835e4919f444", "message": "Address PR comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-02T05:04:21Z", "type": "commit"}, {"oid": "e2c668358b16977fb2a3d82ea0f95d4bad1f11e2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e2c668358b16977fb2a3d82ea0f95d4bad1f11e2", "message": "Address PR comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-02T05:23:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwODA5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498908090", "bodyText": "tryInsertBatchAccountBalance  is called twice\ntryInsertBatchTokenBalance does nothing because accountBalanceList is cleared by tryInsertBatchAccountBalance this leads to loss of all token balances", "author": "xin-hedera", "createdAt": "2020-10-02T15:55:09Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/AccountBalancesFileLoader.java", "diffHunk": "@@ -148,11 +159,14 @@ public void loadAccountBalances(@NonNull File balanceFile, DateRangeFilter dateR\n                 if (!skip) {\n                     accountBalanceList.add(accountBalance);\n                     tryInsertBatchAccountBalance(insertBalanceStatement, accountBalanceList, insertBatchSize);\n+                    tryInsertBatchAccountBalance(insertBalanceStatement, accountBalanceList, insertBatchSize);\n+                    tryInsertBatchTokenBalance(insertTokenBalanceStatement, accountBalanceList, insertBatchSize);", "originalCommit": "e2c668358b16977fb2a3d82ea0f95d4bad1f11e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NzIxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499067215", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2020-10-02T21:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwODA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzY5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498913697", "bodyText": "should handle NPE", "author": "xin-hedera", "createdAt": "2020-10-02T16:05:51Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.v1.BalanceFileReaderImplV1;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n+\n+@Named\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final int fileBufferSize;\n+\n+    private final BalanceFileReaderImplV1 version1Reader;\n+    private final BalanceFileReaderImplV2 version2Reader;\n+\n+    public CompositeBalanceFileReader(BalanceParserProperties balanceParserProperties,\n+                                      BalanceFileReaderImplV1 balanceFileReaderImplV1,\n+                                      BalanceFileReaderImplV2 balanceFileReaderImplV2) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+        this.version1Reader = balanceFileReaderImplV1;\n+        this.version2Reader = balanceFileReaderImplV2;\n+    }\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    fileBufferSize);\n+            String line = Optional.of(reader.readLine()).get().trim();", "originalCommit": "e2c668358b16977fb2a3d82ea0f95d4bad1f11e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMjk3Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499112977", "bodyText": "Should now be handled", "author": "ijungmann", "createdAt": "2020-10-03T03:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMDQzNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498920437", "bodyText": "accountId created twice", "author": "xin-hedera", "createdAt": "2020-10-02T16:19:04Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/v2/AccountBalanceLineParserV2.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.hederahashgraph.api.proto.java.TokenBalances;\n+import com.hederahashgraph.api.proto.java.TokenID;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.inject.Named;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.TokenBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Named\n+public class AccountBalanceLineParserV2 {\n+\n+    /**\n+     * Parses an account balance line to extract shard, realm, account, and balance. If the shard matches\n+     * systemShardNum, creates and returns an {@code AccountBalance} entity object. The account balance line should be\n+     * in the format of \"shard,realm,account,balance\"\n+     *\n+     * @param line               The account balance line\n+     * @param consensusTimestamp The consensus timestamp of the account balance line\n+     * @param systemShardNum     The system shard number\n+     * @return {@code AccountBalance} entity object\n+     * @throws InvalidDatasetException if the line is malformed or the shard does not match {@code systemShardNum}\n+     */\n+    public AccountBalance parse(String line, long consensusTimestamp, long systemShardNum) {\n+        try {\n+            String[] parts = line.split(\",\");\n+            boolean hasTokenBalance;\n+            if (parts.length == 5) {\n+                hasTokenBalance = true;\n+            } else if (parts.length == 4) {\n+                hasTokenBalance = false;\n+            } else {\n+                throw new InvalidDatasetException(\"Invalid account balance line: \" + line);\n+            }\n+\n+            long shardNum = Long.parseLong(parts[0]);\n+            int realmNum = Integer.parseInt(parts[1]);\n+            int accountNum = Integer.parseInt(parts[2]);\n+            long balance = Long.parseLong(parts[3]);\n+\n+            if (shardNum < 0 || realmNum < 0 || accountNum < 0 || balance < 0) {\n+                throw new InvalidDatasetException(\"Invalid account balance line: \" + line);\n+            }\n+\n+            if (shardNum != systemShardNum) {\n+                throw new InvalidDatasetException(String.format(\"Invalid account balance line: %s. Expect \" +\n+                        \"shard (%d), got shard (%d)\", line, systemShardNum, shardNum));\n+            }\n+\n+            EntityId accountId = EntityId\n+                    .of(shardNum, realmNum, accountNum, EntityTypeEnum.ACCOUNT);\n+\n+            List<TokenBalance> tokenBalances = hasTokenBalance ? parseTokenBalanceList(parts[4], consensusTimestamp,\n+                    accountId) : Collections\n+                    .emptyList();\n+\n+            return new AccountBalance(balance, tokenBalances, new AccountBalance.Id(consensusTimestamp, EntityId", "originalCommit": "e2c668358b16977fb2a3d82ea0f95d4bad1f11e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExOTUxNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499119515", "bodyText": "Fixed", "author": "ijungmann", "createdAt": "2020-10-03T05:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMDQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNTU4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498925584", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new InvalidDatasetException(\"Timestamp / column header not found in account balance file\");\n          \n          \n            \n                            throw new InvalidDatasetException(\"Timestamp header not found in account balance file\");", "author": "xin-hedera", "createdAt": "2020-10-02T16:29:14Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/v2/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceFileReader;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"# timestamp:\";\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+\n+    private final int fileBufferSize;\n+    private final long systemShardNum;\n+    private final AccountBalanceLineParserV2 parser;\n+\n+    public BalanceFileReaderImplV2(BalanceParserProperties balanceParserProperties, AccountBalanceLineParserV2\n+            parser) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+        this.systemShardNum = balanceParserProperties.getMirrorProperties().getShard();\n+        this.parser = parser;\n+    }\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    fileBufferSize);\n+            long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            return reader.lines()\n+                    .map(line -> {\n+                        try {\n+                            return parser.parse(line, consensusTimestamp, systemShardNum);\n+                        } catch (InvalidDatasetException ex) {\n+                            log.error(ex);\n+                            return null;\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .onClose(() -> {\n+                        try {\n+                            reader.close();\n+                        } catch (Exception ex) {\n+                        }\n+                    });\n+        } catch (IOException ex) {\n+            throw new InvalidDatasetException(\"Error reading account balance file\", ex);\n+        }\n+    }\n+\n+    private long parseHeaderForConsensusTimestamp(BufferedReader reader) {\n+        String line = null;\n+        try {\n+            //Discard the first line/version number\n+            reader.readLine();\n+            line = Optional.of(reader.readLine()).get().trim();\n+            String lineLowered = line.toLowerCase();\n+            if (lineLowered.startsWith(TIMESTAMP_HEADER_PREFIX)) {\n+                return convertTimestampLine(line);\n+            } else {\n+                throw new InvalidDatasetException(\"Timestamp / column header not found in account balance file\");", "originalCommit": "e2c668358b16977fb2a3d82ea0f95d4bad1f11e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNjYzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498926639", "bodyText": "should read the column header after the timestamp line. otherwise the column header line is fed to the parser although the reader would just swallow the InvalidDataSetException and return a null which is then filtered in the streams pipeline.", "author": "xin-hedera", "createdAt": "2020-10-02T16:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNTU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1Njg0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499056845", "bodyText": "What he said.", "author": "steven-sheehy", "createdAt": "2020-10-02T21:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNTU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExOTU2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499119568", "bodyText": "Should be fixed, added a check as well to make sure the next line has the column headers", "author": "ijungmann", "createdAt": "2020-10-03T05:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNTU4NA=="}], "type": "inlineReview"}, {"oid": "0a8664ac75ae037a9df193da1c4a73373fcc5d62", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0a8664ac75ae037a9df193da1c4a73373fcc5d62", "message": "Correct token balance insert to use correct size for batching\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-02T16:34:50Z", "type": "commit"}, {"oid": "d378cbc01eec7592992b02aaf208b6a6eeb212a9", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d378cbc01eec7592992b02aaf208b6a6eeb212a9", "message": "Correct bad logic in loader\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-02T16:37:16Z", "type": "commit"}, {"oid": "31b80795d0a0591f2de99cd3290080b28453deee", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/31b80795d0a0591f2de99cd3290080b28453deee", "message": "Separate account balance list from token balance list\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-02T16:47:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNTIxNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499025214", "bodyText": "The test failure is caused by actual tokenBalances not equal to expected tokenBalances\nIn addition, since AccountBalance has oneToMany field List<TokenBalance>, we should test with token balance data instead of empty", "author": "xin-hedera", "createdAt": "2020-10-02T20:02:43Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/AccountBalanceRepositoryTest.java", "diffHunk": "@@ -39,7 +40,7 @@ void findByConsensusTimestamp() {\n         AccountBalance accountBalance1 = create(1L, 1, 100);\n         AccountBalance accountBalance2 = create(1L, 2, 200);\n         create(2L, 1, 50);\n-\n+        \n         assertThat(accountBalanceRepository.findByIdConsensusTimestamp(1L))", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyMDA3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499120079", "bodyText": "I've added the usingRecursiveFieldByFieldElementComparator to force the check to look at the tokenBalance fields instead of doing a basic ==.  Will work on adding token balance data.", "author": "ijungmann", "createdAt": "2020-10-03T06:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNTIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MzEyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499743120", "bodyText": "Added Token Balance data to this test, I'm seeing some very odd behavior with the repository that's causing this test to fail so I will continue investigating.", "author": "ijungmann", "createdAt": "2020-10-05T17:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNTIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1MjU4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499852583", "bodyText": "The issues with the join have been resolved, this is now fully fixed.", "author": "ijungmann", "createdAt": "2020-10-05T20:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNTIxNA=="}], "type": "inlineReview"}, {"oid": "e77159598afe0581227fcf06e9b85f0e316e8e2e", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e77159598afe0581227fcf06e9b85f0e316e8e2e", "message": "Add Composite Balance File Reader test and PR comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-02T20:08:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2Nzc4Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498967787", "bodyText": "Reader not being closed on unhappy path. Use try with resources", "author": "steven-sheehy", "createdAt": "2020-10-02T17:57:00Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.v1.BalanceFileReaderImplV1;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n+\n+@Named\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final int fileBufferSize;\n+\n+    private final BalanceFileReaderImplV1 version1Reader;\n+    private final BalanceFileReaderImplV2 version2Reader;\n+\n+    public CompositeBalanceFileReader(BalanceParserProperties balanceParserProperties,\n+                                      BalanceFileReaderImplV1 balanceFileReaderImplV1,\n+                                      BalanceFileReaderImplV2 balanceFileReaderImplV2) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+        this.version1Reader = balanceFileReaderImplV1;\n+        this.version2Reader = balanceFileReaderImplV2;\n+    }\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMjgzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499112831", "bodyText": "Wrapped in try with resources, also wrapped the two other Readers in a try with resources", "author": "ijungmann", "createdAt": "2020-10-03T03:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2Nzc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExNDUzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499114538", "bodyText": "Scratch that, I refactored this one to be a try with resource, I see the other two won't work with that because they are returning streams, I have put those back.", "author": "ijungmann", "createdAt": "2020-10-03T04:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2Nzc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2ODQ4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498968485", "bodyText": "The reader classes should go in com.hedera.mirror.importer.reader.balance so they can be later shared with downloader.", "author": "steven-sheehy", "createdAt": "2020-10-02T17:58:31Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMDY2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499110668", "bodyText": "All four Reader classes have been moved to that package", "author": "ijungmann", "createdAt": "2020-10-03T03:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2ODQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MDE4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498980183", "bodyText": "You don't need this. The composite only reads a single line so it's inefficient to tell the reader to load 200K characters. Can switch to @RequiredArgsConstructor once removed.", "author": "steven-sheehy", "createdAt": "2020-10-02T18:19:51Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.v1.BalanceFileReaderImplV1;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n+\n+@Named\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final int fileBufferSize;\n+\n+    private final BalanceFileReaderImplV1 version1Reader;\n+    private final BalanceFileReaderImplV2 version2Reader;\n+\n+    public CompositeBalanceFileReader(BalanceParserProperties balanceParserProperties,\n+                                      BalanceFileReaderImplV1 balanceFileReaderImplV1,\n+                                      BalanceFileReaderImplV2 balanceFileReaderImplV2) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMDY3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499110672", "bodyText": "Removed", "author": "ijungmann", "createdAt": "2020-10-03T03:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MDE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MDYzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498980639", "bodyText": "We don't need as much buffer as fileBufferSize property and even the default in BufferedReader might be too much. Please considering passing a reasonable value to read one line.", "author": "steven-sheehy", "createdAt": "2020-10-02T18:20:49Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.v1.BalanceFileReaderImplV1;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n+\n+@Named\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final int fileBufferSize;\n+\n+    private final BalanceFileReaderImplV1 version1Reader;\n+    private final BalanceFileReaderImplV2 version2Reader;\n+\n+    public CompositeBalanceFileReader(BalanceParserProperties balanceParserProperties,\n+                                      BalanceFileReaderImplV1 balanceFileReaderImplV1,\n+                                      BalanceFileReaderImplV2 balanceFileReaderImplV2) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+        this.version1Reader = balanceFileReaderImplV1;\n+        this.version2Reader = balanceFileReaderImplV2;\n+    }\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMjk0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499112945", "bodyText": "Knocked the buffer size down to 16, the smallest power of 2 to fit the Version 2 header in.  Since we're also only looking for those first characters, not even the entire first line, I added a BoundedInputStream so we're not reading the entire first line, and I added a test to confirm this works.", "author": "ijungmann", "createdAt": "2020-10-03T03:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MDYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4Mjk3Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498982973", "bodyText": "I'm not sure we should be so lenient with case or spaces. Maybe trailing spaces but not leading spaces. Recommend avoiding optional, trim, toLowerCase and just using StringUtils.startsWith(line, VERSION_2_HEADER_PREFIX).", "author": "steven-sheehy", "createdAt": "2020-10-02T18:25:37Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.v1.BalanceFileReaderImplV1;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n+\n+@Named\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final int fileBufferSize;\n+\n+    private final BalanceFileReaderImplV1 version1Reader;\n+    private final BalanceFileReaderImplV2 version2Reader;\n+\n+    public CompositeBalanceFileReader(BalanceParserProperties balanceParserProperties,\n+                                      BalanceFileReaderImplV1 balanceFileReaderImplV1,\n+                                      BalanceFileReaderImplV2 balanceFileReaderImplV2) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+        this.version1Reader = balanceFileReaderImplV1;\n+        this.version2Reader = balanceFileReaderImplV2;\n+    }\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    fileBufferSize);\n+            String line = Optional.of(reader.readLine()).get().trim();\n+            String lineLowered = line.toLowerCase();", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMjk5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499112995", "bodyText": "Removed all leniency.", "author": "ijungmann", "createdAt": "2020-10-03T03:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4Mjk3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTMzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498985339", "bodyText": "Duplicates call to read. Would be better to have a private BalanceFileReader getReader(file) method that encapsulates the reader selection.", "author": "steven-sheehy", "createdAt": "2020-10-02T18:30:18Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.v1.BalanceFileReaderImplV1;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n+\n+@Named\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final int fileBufferSize;\n+\n+    private final BalanceFileReaderImplV1 version1Reader;\n+    private final BalanceFileReaderImplV2 version2Reader;\n+\n+    public CompositeBalanceFileReader(BalanceParserProperties balanceParserProperties,\n+                                      BalanceFileReaderImplV1 balanceFileReaderImplV1,\n+                                      BalanceFileReaderImplV2 balanceFileReaderImplV2) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+        this.version1Reader = balanceFileReaderImplV1;\n+        this.version2Reader = balanceFileReaderImplV2;\n+    }\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    fileBufferSize);\n+            String line = Optional.of(reader.readLine()).get().trim();\n+            String lineLowered = line.toLowerCase();\n+            reader.close();\n+            if (lineLowered.startsWith(VERSION_2_HEADER_PREFIX)) {\n+                return version2Reader.read(file);", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMzA1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499113058", "bodyText": "Added that method to only call read() once", "author": "ijungmann", "createdAt": "2020-10-03T03:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NjU3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r498986572", "bodyText": "Please create an interface that these both implement.", "author": "steven-sheehy", "createdAt": "2020-10-02T18:32:53Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/v2/AccountBalanceLineParserV2.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.hederahashgraph.api.proto.java.TokenBalances;\n+import com.hederahashgraph.api.proto.java.TokenID;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.inject.Named;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.TokenBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Named\n+public class AccountBalanceLineParserV2 {", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyMTE4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499121184", "bodyText": "Created AccountBalanceLineParser interface", "author": "ijungmann", "createdAt": "2020-10-03T06:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NjU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNDYxMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499004612", "bodyText": "Comment out of date", "author": "steven-sheehy", "createdAt": "2020-10-02T19:13:28Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/v2/AccountBalanceLineParserV2.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.hederahashgraph.api.proto.java.TokenBalances;\n+import com.hederahashgraph.api.proto.java.TokenID;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.inject.Named;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.TokenBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Named\n+public class AccountBalanceLineParserV2 {\n+\n+    /**\n+     * Parses an account balance line to extract shard, realm, account, and balance. If the shard matches", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyMTIwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499121205", "bodyText": "Adjusted comment to mention token balances", "author": "ijungmann", "createdAt": "2020-10-03T06:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNDYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNjAzNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499006037", "bodyText": "Would be more robust to use Splitter.on(',').trimResults().omitEmptyStrings().splitToList(line).", "author": "steven-sheehy", "createdAt": "2020-10-02T19:16:52Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/v2/AccountBalanceLineParserV2.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.hederahashgraph.api.proto.java.TokenBalances;\n+import com.hederahashgraph.api.proto.java.TokenID;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.inject.Named;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.TokenBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Named\n+public class AccountBalanceLineParserV2 {\n+\n+    /**\n+     * Parses an account balance line to extract shard, realm, account, and balance. If the shard matches\n+     * systemShardNum, creates and returns an {@code AccountBalance} entity object. The account balance line should be\n+     * in the format of \"shard,realm,account,balance\"\n+     *\n+     * @param line               The account balance line\n+     * @param consensusTimestamp The consensus timestamp of the account balance line\n+     * @param systemShardNum     The system shard number\n+     * @return {@code AccountBalance} entity object\n+     * @throws InvalidDatasetException if the line is malformed or the shard does not match {@code systemShardNum}\n+     */\n+    public AccountBalance parse(String line, long consensusTimestamp, long systemShardNum) {\n+        try {\n+            String[] parts = line.split(\",\");", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyMTUzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499121530", "bodyText": "Done here and in the v1 parser", "author": "ijungmann", "createdAt": "2020-10-03T06:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNjAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwODEzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499008138", "bodyText": "We don't need to store these properties separately. Just store the BalanceParserProperties as a field. This allows these values to change without requiring a restart. We should probably change the other reader.", "author": "steven-sheehy", "createdAt": "2020-10-02T19:21:36Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/v2/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceFileReader;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"# timestamp:\";\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+\n+    private final int fileBufferSize;", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMzE0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499113146", "bodyText": "Removed from both readers", "author": "ijungmann", "createdAt": "2020-10-03T03:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwODEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxMzI5Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499013297", "bodyText": "This test doesn't need to copy any files and it doesn't need a temp path. Can remove fileCopier, sampleFile, testFile, mirrorProperties and dataPath. Just inject the example file and directly balanceFileReader.read(balanceFile). Inject like so:\n@Value(\"classpath:data/accountBalances/v2/2020-09-22T04_25_00.083212003Z_Balances.csv\")\nprivate File balanceFile;", "author": "steven-sheehy", "createdAt": "2020-10-02T19:33:48Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/balance/v2/BalanceFileReaderImplV2Test.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Path;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+class BalanceFileReaderImplV2Test {\n+    private static final String sampleBalanceFileName = \"2020-09-22T04_25_00.083212003Z_Balances.csv\";\n+\n+    @TempDir\n+    Path dataPath;\n+\n+    private MirrorProperties mirrorProperties;\n+    private BalanceFileReaderImplV2 balanceFileReader;\n+    private AccountBalanceLineParserV2 parser;\n+\n+    private long sampleConsensusTimestamp;\n+    private FileCopier fileCopier;\n+    private File sampleFile;\n+    private File testFile;\n+\n+    @BeforeEach\n+    void setup() throws IOException {\n+        mirrorProperties = new MirrorProperties();\n+        parser = new AccountBalanceLineParserV2();\n+        balanceFileReader = new BalanceFileReaderImplV2(new BalanceParserProperties(mirrorProperties), parser);\n+        var resource = new ClassPathResource(\"data\");\n+        StreamType streamType = StreamType.BALANCE;\n+        fileCopier = FileCopier", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExNDQxMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499114410", "bodyText": "Refactored this to not use the file copy.  Also refactored the V1Reader test to do the same.  Couple things:\n\nHad to make it a Spring Boot test to use the @Value, I extended the Integration Test since it seemed appropriate\nStill need the testFile to write temporary lines to so it doesn't destroy the sample file, I just converted this to a temp file\nThe mirror properties are being used in a couple places in the tests to get the shard num.", "author": "ijungmann", "createdAt": "2020-10-03T04:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxMzI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MjcyMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499052722", "bodyText": "Missing copyright. Please scan the other new files for the same.", "author": "steven-sheehy", "createdAt": "2020-10-02T21:12:50Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/TokenBalanceRepository.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.hedera.mirror.importer.repository;\n+", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExOTI4Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499119286", "bodyText": "Added copyright", "author": "ijungmann", "createdAt": "2020-10-03T05:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MjcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NTM0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499055346", "bodyText": "NPE. There's no point in using Optional here. StringUtils.defaultString(reader.readLine()) might be appropriate if you don't want to have to check for null.", "author": "steven-sheehy", "createdAt": "2020-10-02T21:20:30Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/v2/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceFileReader;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"# timestamp:\";\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+\n+    private final int fileBufferSize;\n+    private final long systemShardNum;\n+    private final AccountBalanceLineParserV2 parser;\n+\n+    public BalanceFileReaderImplV2(BalanceParserProperties balanceParserProperties, AccountBalanceLineParserV2\n+            parser) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+        this.systemShardNum = balanceParserProperties.getMirrorProperties().getShard();\n+        this.parser = parser;\n+    }\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    fileBufferSize);\n+            long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            return reader.lines()\n+                    .map(line -> {\n+                        try {\n+                            return parser.parse(line, consensusTimestamp, systemShardNum);\n+                        } catch (InvalidDatasetException ex) {\n+                            log.error(ex);\n+                            return null;\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .onClose(() -> {\n+                        try {\n+                            reader.close();\n+                        } catch (Exception ex) {\n+                        }\n+                    });\n+        } catch (IOException ex) {\n+            throw new InvalidDatasetException(\"Error reading account balance file\", ex);\n+        }\n+    }\n+\n+    private long parseHeaderForConsensusTimestamp(BufferedReader reader) {\n+        String line = null;\n+        try {\n+            //Discard the first line/version number\n+            reader.readLine();\n+            line = Optional.of(reader.readLine()).get().trim();", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExODg3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499118870", "bodyText": "Removed, and catching the NPE", "author": "ijungmann", "createdAt": "2020-10-03T05:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NTM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NTk2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499055965", "bodyText": "This constant belongs in BalanceFileReaderImplV2. BalanceFileReaderImplV2 should also probably be verifying this line so it can be encapsulated.", "author": "steven-sheehy", "createdAt": "2020-10-02T21:22:10Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.v1.BalanceFileReaderImplV1;\n+import com.hedera.mirror.importer.parser.balance.v2.BalanceFileReaderImplV2;\n+\n+@Named\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExODgxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499118819", "bodyText": "Moved to BalanceFileReaderImplV2", "author": "ijungmann", "createdAt": "2020-10-03T05:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NTk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NjI2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499056266", "bodyText": "Unused?", "author": "steven-sheehy", "createdAt": "2020-10-02T21:23:08Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/v2/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.parser.balance.v2;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceFileReader;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"# timestamp:\";\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";", "originalCommit": "31b80795d0a0591f2de99cd3290080b28453deee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMzEwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499113105", "bodyText": "Now being used to confirm column headers exist", "author": "ijungmann", "createdAt": "2020-10-03T03:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NjI2Ng=="}], "type": "inlineReview"}, {"oid": "2327b82f8cb742caa04117ad6942f175c9f87e96", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2327b82f8cb742caa04117ad6942f175c9f87e96", "message": "Change parser v2 token balances from base64 proto to list of values\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-02T21:54:40Z", "type": "commit"}, {"oid": "c7efba2a3a96b9dec6a4e1bd898d9fd7883fd6cb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c7efba2a3a96b9dec6a4e1bd898d9fd7883fd6cb", "message": "PR comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-02T22:03:11Z", "type": "commit"}, {"oid": "74acc9c7995dc0d42d6b336b0fd23d18b24bf062", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/74acc9c7995dc0d42d6b336b0fd23d18b24bf062", "message": "Check column header line in File Reader v2 and correct tests\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-02T22:30:52Z", "type": "commit"}, {"oid": "ed48cde4446d4fff0e347da4392fb7b77520f640", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ed48cde4446d4fff0e347da4392fb7b77520f640", "message": "PR Comments for file readers and tests\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T03:12:31Z", "type": "commit"}, {"oid": "56e4399dd7b3a71dc27ec286bbac41fbb6ec33da", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/56e4399dd7b3a71dc27ec286bbac41fbb6ec33da", "message": "Reduce composite file reader buffer size\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T03:50:38Z", "type": "commit"}, {"oid": "43ed8ccbbcc3f28c7d298ccde5a3ac1cbaaec99b", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/43ed8ccbbcc3f28c7d298ccde5a3ac1cbaaec99b", "message": "PR Comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T04:22:54Z", "type": "commit"}, {"oid": "0e01b1a9c486ef14f7e58083f3ad39c159b343be", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0e01b1a9c486ef14f7e58083f3ad39c159b343be", "message": "Add copyright to new files\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T05:49:27Z", "type": "commit"}, {"oid": "b274434717102f19529d798650b80db340e51170", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b274434717102f19529d798650b80db340e51170", "message": "Add copyright to new files\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T05:50:53Z", "type": "commit"}, {"oid": "72a675b470c635e3a8a41baa1cbd40d5eb86bd20", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/72a675b470c635e3a8a41baa1cbd40d5eb86bd20", "message": "Add copyright to new files\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T05:52:45Z", "type": "commit"}, {"oid": "921ffe8b9c2f64f70c77ad597db7a5c379f7000d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/921ffe8b9c2f64f70c77ad597db7a5c379f7000d", "message": "Refactor order of file reading\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T05:56:22Z", "type": "commit"}, {"oid": "ed0db2d38582810e06cc2835dae8907404560a58", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ed0db2d38582810e06cc2835dae8907404560a58", "message": "PR Comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T06:02:27Z", "type": "commit"}, {"oid": "983809cade2830f9c5a813d43f6a882630887014", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/983809cade2830f9c5a813d43f6a882630887014", "message": "PR comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T06:22:59Z", "type": "commit"}, {"oid": "61e6fa9d48d69c25ef98c31a5b26d92470537cfa", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/61e6fa9d48d69c25ef98c31a5b26d92470537cfa", "message": "PR Comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-03T06:28:41Z", "type": "commit"}, {"oid": "83ad9a3a67b8299e49d227bbad3faed2717c01bb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/83ad9a3a67b8299e49d227bbad3faed2717c01bb", "message": "Cleanup unused vars\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T15:28:05Z", "type": "commit"}, {"oid": "29de6e5ab780e293384811ea4e2d2f07f28a5115", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/29de6e5ab780e293384811ea4e2d2f07f28a5115", "message": "Refactor loader test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T16:02:46Z", "type": "commit"}, {"oid": "61c0297538487d7d960b69313d0de408cd7ee662", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/61c0297538487d7d960b69313d0de408cd7ee662", "message": "Add back test for File Loader v1\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T16:15:59Z", "type": "commit"}, {"oid": "3c6b8f8cdbd71f8ab7c6d6da2570d30ceb64dd81", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3c6b8f8cdbd71f8ab7c6d6da2570d30ceb64dd81", "message": "Add token balance data to repository test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T16:59:08Z", "type": "commit"}, {"oid": "80bac807ad166aa393fc319c853d69ba900a8f0d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/80bac807ad166aa393fc319c853d69ba900a8f0d", "message": "Refactor and move test files to v1\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T17:39:01Z", "type": "commit"}, {"oid": "fd0da3fc7cef6ce8510ffa59875fabb832f3a8bc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fd0da3fc7cef6ce8510ffa59875fabb832f3a8bc", "message": "Fix test failure\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T17:50:35Z", "type": "commit"}, {"oid": "6674b30f62ab66a9b018a7ac49399569517de3fc", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6674b30f62ab66a9b018a7ac49399569517de3fc", "message": "Reverse Account Balance Join Columns to fix join bug\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T20:15:13Z", "type": "commit"}, {"oid": "33c90abe9b043ea33c6c237a489992ddfeccece0", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/33c90abe9b043ea33c6c237a489992ddfeccece0", "message": "Add token balance repository test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T20:23:55Z", "type": "commit"}, {"oid": "d7ca1fb11f36879e03a66021b19da3b253088915", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d7ca1fb11f36879e03a66021b19da3b253088915", "message": "Document Account Balance file change in readme\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T20:35:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNjYzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499726638", "bodyText": "Catching NPE is an anti-pattern, in my opinion. The code should be fixed to handle all the null scenarios. Here, version2Reader.isFirstLineFromFileVersion(line) should be fixed to either check if line is not null before comparison or use a library like StringUtils.startsWith().", "author": "steven-sheehy", "createdAt": "2020-10-05T16:31:35Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/balance/CompositeBalanceFileReader.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.reader.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.commons.io.input.BoundedInputStream;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Named\n+@RequiredArgsConstructor\n+public class CompositeBalanceFileReader implements BalanceFileReader {\n+\n+    static final int BUFFER_SIZE = 16;\n+    private final BalanceFileReaderImplV1 version1Reader;\n+    private final BalanceFileReaderImplV2 version2Reader;\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        return getReader(file).read(file);\n+    }\n+\n+    private BalanceFileReader getReader(File file) {\n+        try (BufferedReader reader =\n+                     new BufferedReader(new InputStreamReader(new BoundedInputStream(new FileInputStream(file),\n+                             BUFFER_SIZE)), BUFFER_SIZE)) {\n+            String line = reader.readLine();\n+            if (version2Reader.isFirstLineFromFileVersion(line)) {\n+                return version2Reader;\n+            } else {\n+                return version1Reader;\n+            }\n+        } catch (IOException | NullPointerException ex) {", "originalCommit": "61c0297538487d7d960b69313d0de408cd7ee662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MTM3Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499941373", "bodyText": "I've switched isFirstLineFromFileVersion to use the StringUtils to be null safe.\n\n\nI've also added a check to the Composite Reader to see if the first line is null, as the documentation says that a null line would only be returned if the end of the stream is reached, which would mean we got an empty file that no reader would be able to do anything with.\n\n\nAlso added null checks for File at the beginning of each reader.\n\n\nRemoved all NPE catches", "author": "ijungmann", "createdAt": "2020-10-06T00:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNjYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNzM3Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499727373", "bodyText": "See previous comment about anti-pattern. Also because a null check is orders of magnitude faster than generating an exception. Please check if readLine() calls return null.", "author": "steven-sheehy", "createdAt": "2020-10-05T16:32:57Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.hedera.mirror.importer.reader.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.parser.balance.line.AccountBalanceLineParserV2;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"# TimeStamp:\";\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final BalanceParserProperties balanceParserProperties;\n+    private final AccountBalanceLineParserV2 parser;\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    balanceParserProperties.getFileBufferSize());\n+            long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            return reader.lines()\n+                    .map(line -> {\n+                        try {\n+                            return parser.parse(line, consensusTimestamp, balanceParserProperties.getMirrorProperties()\n+                                    .getShard());\n+                        } catch (InvalidDatasetException ex) {\n+                            log.error(ex);\n+                            return null;\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .onClose(() -> {\n+                        try {\n+                            reader.close();\n+                        } catch (Exception ex) {\n+                        }\n+                    });\n+        } catch (IOException ex) {\n+            throw new InvalidDatasetException(\"Error reading account balance file\", ex);\n+        }\n+    }\n+\n+    public boolean isFirstLineFromFileVersion(String firstLine) {\n+        return firstLine.startsWith(VERSION_2_HEADER_PREFIX);\n+    }\n+\n+    private long parseHeaderForConsensusTimestamp(BufferedReader reader) {\n+        String line = null;\n+        try {\n+            //Discard the first line/version number\n+            reader.readLine();\n+            line = reader.readLine();\n+            if (line.startsWith(TIMESTAMP_HEADER_PREFIX)) {\n+                long consensusTimestamp = convertTimestampLine(line);\n+                line = reader.readLine();\n+                if (line.startsWith(COLUMN_HEADER_PREFIX)) {\n+                    return consensusTimestamp;\n+                } else {\n+                    throw new InvalidDatasetException(\"Column header not found in account balance file\");\n+                }\n+            } else {\n+                throw new InvalidDatasetException(\"Timestamp not found in account balance file\");\n+            }\n+        } catch (NullPointerException ex) {", "originalCommit": "61c0297538487d7d960b69313d0de408cd7ee662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MTk0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499941944", "bodyText": "Removed NPE checks and added explicit null checks with clearer exceptions", "author": "ijungmann", "createdAt": "2020-10-06T00:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNzM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMDk2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499730966", "bodyText": "Since the line parsers are only used by the readers, they should probably be moved to the same package as the readers (or a sub-package).", "author": "steven-sheehy", "createdAt": "2020-10-05T16:39:11Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.hedera.mirror.importer.reader.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.parser.balance.line.AccountBalanceLineParserV2;", "originalCommit": "61c0297538487d7d960b69313d0de408cd7ee662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyOTQwMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499929401", "bodyText": "moved to reader.balance.line", "author": "ijungmann", "createdAt": "2020-10-05T23:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMDk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMjY2NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499732665", "bodyText": "Splitter is an immutable, stateless object so its construction can be moved to a class static constant. e.g.\nprivate static final Splitter SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();", "author": "steven-sheehy", "createdAt": "2020-10-05T16:42:05Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/line/AccountBalanceLineParserV2.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.hedera.mirror.importer.parser.balance.line;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Splitter;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.hederahashgraph.api.proto.java.TokenBalances;\n+import com.hederahashgraph.api.proto.java.TokenID;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.inject.Named;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.TokenBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Named\n+public class AccountBalanceLineParserV2 implements AccountBalanceLineParser {\n+\n+    /**\n+     * Parses an account balance line to extract shard, realm, account, balance, and token balances. If the shard\n+     * matches systemShardNum, creates and returns an {@code AccountBalance} entity object. The account balance line\n+     * should be in the format of \"shard,realm,account,balance\"\n+     *\n+     * @param line               The account balance line\n+     * @param consensusTimestamp The consensus timestamp of the account balance line\n+     * @param systemShardNum     The system shard number\n+     * @return {@code AccountBalance} entity object\n+     * @throws InvalidDatasetException if the line is malformed or the shard does not match {@code systemShardNum}\n+     */\n+    @Override\n+    public AccountBalance parse(String line, long consensusTimestamp, long systemShardNum) {\n+        try {\n+            List<String> parts = Splitter.on(',').trimResults().omitEmptyStrings().splitToList(line);", "originalCommit": "61c0297538487d7d960b69313d0de408cd7ee662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyOTU4NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499929585", "bodyText": "I've added the Splitter as a constant to both versions of the FileReader", "author": "ijungmann", "createdAt": "2020-10-05T23:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMjY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzI0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499733249", "bodyText": "nit: Both Files should be private.", "author": "steven-sheehy", "createdAt": "2020-10-05T16:43:05Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/reader/balance/BalanceFileReaderImplV2Test.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package com.hedera.mirror.importer.reader.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import javax.annotation.Resource;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.line.AccountBalanceLineParserV2;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+class BalanceFileReaderImplV2Test extends IntegrationTest {\n+\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+    private static final String VERSION_1_TIMESTAMP_HEADER_PREFIX = \"timestamp:\";\n+\n+    @Resource\n+    private MirrorProperties mirrorProperties;\n+    @Resource\n+    private BalanceFileReaderImplV2 balanceFileReader;\n+    @Resource\n+    private AccountBalanceLineParserV2 parser;\n+\n+    private long sampleConsensusTimestamp;\n+\n+    @Value(\"classpath:data/accountBalances/v2/2020-09-22T04_25_00.083212003Z_Balances.csv\")\n+    File balanceFile;", "originalCommit": "61c0297538487d7d960b69313d0de408cd7ee662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyOTgzNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499929836", "bodyText": "Made the files private here and in a few other places I spotted it", "author": "ijungmann", "createdAt": "2020-10-05T23:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzI0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMjU2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499902566", "bodyText": "Again, NPE should be avoided. Can simply wrap for loop in check for StringUtils.isNotBlank(line) and return empty tokenBalances.", "author": "steven-sheehy", "createdAt": "2020-10-05T22:16:59Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/line/AccountBalanceLineParserV2.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.hedera.mirror.importer.parser.balance.line;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Splitter;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.hederahashgraph.api.proto.java.TokenBalances;\n+import com.hederahashgraph.api.proto.java.TokenID;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.inject.Named;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.TokenBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+\n+@Named\n+public class AccountBalanceLineParserV2 implements AccountBalanceLineParser {\n+\n+    /**\n+     * Parses an account balance line to extract shard, realm, account, balance, and token balances. If the shard\n+     * matches systemShardNum, creates and returns an {@code AccountBalance} entity object. The account balance line\n+     * should be in the format of \"shard,realm,account,balance\"\n+     *\n+     * @param line               The account balance line\n+     * @param consensusTimestamp The consensus timestamp of the account balance line\n+     * @param systemShardNum     The system shard number\n+     * @return {@code AccountBalance} entity object\n+     * @throws InvalidDatasetException if the line is malformed or the shard does not match {@code systemShardNum}\n+     */\n+    @Override\n+    public AccountBalance parse(String line, long consensusTimestamp, long systemShardNum) {\n+        try {\n+            List<String> parts = Splitter.on(',').trimResults().omitEmptyStrings().splitToList(line);\n+            boolean hasTokenBalance;\n+            if (parts.size() == 5) {\n+                hasTokenBalance = true;\n+            } else if (parts.size() == 4) {\n+                hasTokenBalance = false;\n+            } else {\n+                throw new InvalidDatasetException(\"Invalid account balance line: \" + line);\n+            }\n+\n+            long shardNum = Long.parseLong(parts.get(0));\n+            int realmNum = Integer.parseInt(parts.get(1));\n+            int accountNum = Integer.parseInt(parts.get(2));\n+            long balance = Long.parseLong(parts.get(3));\n+\n+            if (shardNum < 0 || realmNum < 0 || accountNum < 0 || balance < 0) {\n+                throw new InvalidDatasetException(\"Invalid account balance line: \" + line);\n+            }\n+\n+            if (shardNum != systemShardNum) {\n+                throw new InvalidDatasetException(String.format(\"Invalid account balance line: %s. Expect \" +\n+                        \"shard (%d), got shard (%d)\", line, systemShardNum, shardNum));\n+            }\n+\n+            EntityId accountId = EntityId\n+                    .of(shardNum, realmNum, accountNum, EntityTypeEnum.ACCOUNT);\n+\n+            List<TokenBalance> tokenBalances = hasTokenBalance ? parseTokenBalanceList(parts.get(4), consensusTimestamp,\n+                    accountId) : Collections\n+                    .emptyList();\n+\n+            return new AccountBalance(balance, tokenBalances, new AccountBalance.Id(consensusTimestamp, accountId));\n+        } catch (NullPointerException | NumberFormatException | InvalidProtocolBufferException ex) {\n+            throw new InvalidDatasetException(\"Invalid account balance line: \" + line, ex);\n+        }\n+    }\n+\n+    private List<TokenBalance> parseTokenBalanceList(String tokenBalancesProtoString, long consensusTimestamp,\n+                                                     EntityId accountId) throws InvalidProtocolBufferException {\n+        List<com.hederahashgraph.api.proto.java.TokenBalance> tokenBalanceProtoList =", "originalCommit": "d7ca1fb11f36879e03a66021b19da3b253088915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0ODIxNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499948217", "bodyText": "I think the NPE catch was meant for the line splitter when it was still doing line.split(\",\").  If it gets to this point in the code it should have a non-null string, which means if it fails it will be because it can't decode the protobuf, from there protobuf should always return a non-null list so we should be safe unless I'm missing something.\nI've removed the NPE catch and did an explicit check on the line not being null, if you want to have it swallow/log the InvalidProtocolBufferException and return an empty list I can do that, but I think NPE-wise we're safe.", "author": "ijungmann", "createdAt": "2020-10-06T00:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMjU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMzEzNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499903134", "bodyText": "Would prefer version check is repeated here for encapsulation in case this class is ever used outside the composite in the future.", "author": "steven-sheehy", "createdAt": "2020-10-05T22:18:39Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.hedera.mirror.importer.reader.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.parser.balance.line.AccountBalanceLineParserV2;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"# TimeStamp:\";\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final BalanceParserProperties balanceParserProperties;\n+    private final AccountBalanceLineParserV2 parser;\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    balanceParserProperties.getFileBufferSize());\n+            long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            return reader.lines()\n+                    .map(line -> {\n+                        try {\n+                            return parser.parse(line, consensusTimestamp, balanceParserProperties.getMirrorProperties()\n+                                    .getShard());\n+                        } catch (InvalidDatasetException ex) {\n+                            log.error(ex);\n+                            return null;\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .onClose(() -> {\n+                        try {\n+                            reader.close();\n+                        } catch (Exception ex) {\n+                        }\n+                    });\n+        } catch (IOException ex) {\n+            throw new InvalidDatasetException(\"Error reading account balance file\", ex);\n+        }\n+    }\n+\n+    public boolean isFirstLineFromFileVersion(String firstLine) {\n+        return firstLine.startsWith(VERSION_2_HEADER_PREFIX);\n+    }\n+\n+    private long parseHeaderForConsensusTimestamp(BufferedReader reader) {\n+        String line = null;\n+        try {\n+            //Discard the first line/version number\n+            reader.readLine();", "originalCommit": "d7ca1fb11f36879e03a66021b19da3b253088915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzMzEyNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r499933127", "bodyText": "Added this check.", "author": "ijungmann", "createdAt": "2020-10-05T23:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMzEzNA=="}], "type": "inlineReview"}, {"oid": "b879f04e0659620ca5a0cb11dc89ae6fbcc46052", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b879f04e0659620ca5a0cb11dc89ae6fbcc46052", "message": "PR Comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-05T23:41:18Z", "type": "commit"}, {"oid": "9fd7fd187f5dddbbf0f554afcb1cce792996a9c8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9fd7fd187f5dddbbf0f554afcb1cce792996a9c8", "message": "Remove NPE checks\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-06T00:23:25Z", "type": "commit"}, {"oid": "4a7f7197c2b139c8e5a2d29094977c7bafa3364f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4a7f7197c2b139c8e5a2d29094977c7bafa3364f", "message": "NPE fix\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-06T00:38:49Z", "type": "commit"}, {"oid": "70bd15d8d5f6872f35f3b7de31ee7663a09c1219", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/70bd15d8d5f6872f35f3b7de31ee7663a09c1219", "message": "NPE check in line parsers\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-06T00:58:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1NzM1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r500357351", "bodyText": "nit: For future reference, prefer fail fast exception throwing where the negative path is first. This leads to less nested code and is easier to understand and maintain. e.g.\nif (!correct) {\n throw ...\n}\nif (stillNotCorrect) {\n  throw ...\n}\nreturn someValue;", "author": "steven-sheehy", "createdAt": "2020-10-06T14:53:35Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.hedera.mirror.importer.reader.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.reader.balance.line.AccountBalanceLineParserV2;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"# TimeStamp:\";\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final BalanceParserProperties balanceParserProperties;\n+    private final AccountBalanceLineParserV2 parser;\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        if (file == null) {\n+            throw new InvalidDatasetException(\"Null file provided to balance file reader\");\n+        }\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    balanceParserProperties.getFileBufferSize());\n+            long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            return reader.lines()\n+                    .map(line -> {\n+                        try {\n+                            return parser.parse(line, consensusTimestamp, balanceParserProperties.getMirrorProperties()\n+                                    .getShard());\n+                        } catch (InvalidDatasetException ex) {\n+                            log.error(ex);\n+                            return null;\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .onClose(() -> {\n+                        try {\n+                            reader.close();\n+                        } catch (Exception ex) {\n+                        }\n+                    });\n+        } catch (IOException ex) {\n+            throw new InvalidDatasetException(\"Error reading account balance file\", ex);\n+        }\n+    }\n+\n+    public boolean isFirstLineFromFileVersion(String firstLine) {\n+        return StringUtils.startsWith(firstLine, VERSION_2_HEADER_PREFIX);\n+    }\n+\n+    private long parseHeaderForConsensusTimestamp(BufferedReader reader) {\n+        String line = null;\n+        try {\n+            line = reader.readLine();\n+            if (isFirstLineFromFileVersion(line)) {\n+                line = reader.readLine();\n+                if (StringUtils.startsWith(line, TIMESTAMP_HEADER_PREFIX)) {\n+                    long consensusTimestamp = convertTimestampLine(line);\n+                    line = reader.readLine();\n+                    if (StringUtils.startsWith(line, COLUMN_HEADER_PREFIX)) {\n+                        return consensusTimestamp;\n+                    } else {\n+                        throw new InvalidDatasetException(\"Column header not found in account balance file\");", "originalCommit": "70bd15d8d5f6872f35f3b7de31ee7663a09c1219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwMTM2Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r500401363", "bodyText": "Sure, that makes sense, I went ahead and fixed that.", "author": "ijungmann", "createdAt": "2020-10-06T15:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1NzM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3MTIwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r500371203", "bodyText": "balanceParserProperties.getMirrorProperties().getShard() is called per account balance line, there can be considerable performance hit. Please move it out of the streams pipeline.", "author": "xin-hedera", "createdAt": "2020-10-06T15:08:08Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/balance/BalanceFileReaderImplV1.java", "diffHunk": "@@ -28,43 +28,45 @@\n import java.time.Instant;\n import java.time.format.DateTimeParseException;\n import java.util.Objects;\n-import java.util.Optional;\n import java.util.stream.Stream;\n import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.StringUtils;\n \n import com.hedera.mirror.importer.domain.AccountBalance;\n import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.reader.balance.line.AccountBalanceLineParserV1;\n import com.hedera.mirror.importer.util.Utility;\n \n+@AllArgsConstructor\n @Log4j2\n @Named\n-public class BalanceFileReaderImpl implements BalanceFileReader {\n+public class BalanceFileReaderImplV1 implements BalanceFileReader {\n     private static final int MAX_HEADER_ROWS = 10;\n     private static final String TIMESTAMP_HEADER_PREFIX = \"timestamp:\";\n     private static final String COLUMN_HEADER_PREFIX = \"shard\";\n \n-    private final int fileBufferSize;\n-    private final long systemShardNum;\n-    private final AccountBalanceLineParser parser;\n-\n-    public BalanceFileReaderImpl(BalanceParserProperties balanceParserProperties, AccountBalanceLineParser parser) {\n-        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n-        this.systemShardNum = balanceParserProperties.getMirrorProperties().getShard();\n-        this.parser = parser;\n-    }\n+    private final BalanceParserProperties balanceParserProperties;\n+    private final AccountBalanceLineParserV1 parser;\n \n     @Override\n     public Stream<AccountBalance> read(File file) {\n+        if (file == null) {\n+            throw new InvalidDatasetException(\"Null file provided to balance file reader\");\n+        }\n         try {\n-            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)), fileBufferSize);\n-            final long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    balanceParserProperties.getFileBufferSize());\n+            long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n \n             return reader.lines()\n                     .map(line -> {\n                         try {\n-                            return parser.parse(line, consensusTimestamp, systemShardNum);\n-                        } catch(InvalidDatasetException ex) {\n+                            return parser.parse(line, consensusTimestamp, balanceParserProperties.getMirrorProperties()", "originalCommit": "70bd15d8d5f6872f35f3b7de31ee7663a09c1219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MjcyOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r500392728", "bodyText": "True, just meant to remove as class variable in my previous comment but for performance it should be a method scoped variable.", "author": "steven-sheehy", "createdAt": "2020-10-06T15:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3MTIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwMTU1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r500401557", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2020-10-06T15:40:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3MTIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3NDkxNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r500374914", "bodyText": "same as above", "author": "xin-hedera", "createdAt": "2020-10-06T15:11:53Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/reader/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.hedera.mirror.importer.reader.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.balance.BalanceParserProperties;\n+import com.hedera.mirror.importer.reader.balance.line.AccountBalanceLineParserV2;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"# TimeStamp:\";\n+    private static final String VERSION_2_HEADER_PREFIX = \"# version:2\";\n+\n+    private final BalanceParserProperties balanceParserProperties;\n+    private final AccountBalanceLineParserV2 parser;\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        if (file == null) {\n+            throw new InvalidDatasetException(\"Null file provided to balance file reader\");\n+        }\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)),\n+                    balanceParserProperties.getFileBufferSize());\n+            long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            return reader.lines()\n+                    .map(line -> {\n+                        try {\n+                            return parser.parse(line, consensusTimestamp, balanceParserProperties.getMirrorProperties()", "originalCommit": "70bd15d8d5f6872f35f3b7de31ee7663a09c1219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwMTYwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1090#discussion_r500401603", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2020-10-06T15:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3NDkxNA=="}], "type": "inlineReview"}, {"oid": "a5b61ac1b19f0f26a31cfa147a9dd08e12b0f275", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a5b61ac1b19f0f26a31cfa147a9dd08e12b0f275", "message": "Refactor PR\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-10-06T15:38:36Z", "type": "commit"}]}