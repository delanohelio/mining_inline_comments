{"pr_number": 579, "pr_title": "Prepare RecordFileParser for file init/complete logic.", "pr_createdAt": "2020-03-02T23:46:27Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/579", "timeline": [{"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d", "message": "Prepare RecordFileParser for file init/complete logic.\n\n- Right now record file init/complete logic is in RecordFileLogger. In new design, we want to move\n  it to RecordFileParser.\n- This change (part 1 of 2) refactors RFP so that actual logic move (followup, part 2 of 2) can be neat.\n- New functions - initFile, closeFileAndCommit, rollback - are where the logic will be moved to.\n- Make loadRecordFile filesystem agnostic.\n- Although a lot of code being touched here can be improved in many other ways, keeping this PR refactor only for easy review\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-03-02T23:43:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMDA4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r386720088", "bodyText": "these 3 functions look funny right now. In followup, the logic from RFLogger will move to these functions.", "author": "apeksharma", "createdAt": "2020-03-02T23:48:09Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {", "originalCommit": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMDM5Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r386720393", "bodyText": "moved filesystem dependent code to one level up.", "author": "apeksharma", "createdAt": "2020-03-02T23:49:09Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series\n+     * @param thisFileHash         the hash of this file\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, String previousFileHash, String thisFileHash) throws Exception {\n-\n-        File file = new File(fileName);", "originalCommit": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMTQzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r386721430", "bodyText": "re-aligning is throwing the differ off, and results in big lumps of red and green.\nKeeping it un-aligned explicitly for easy review.\nOn approval, will push a commit to shift code left.", "author": "apeksharma", "createdAt": "2020-03-02T23:52:15Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series\n+     * @param thisFileHash         the hash of this file\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, String previousFileHash, String thisFileHash) throws Exception {\n-\n-        File file = new File(fileName);\n-        String newFileHash = \"\";\n-\n-        if (file.exists() == false) {\n-            log.warn(\"File does not exist {}\", fileName);\n+    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n+                                   String thisFileHash) {\n+        var result = initFile(fileName);\n+        if (result == RecordFileLogger.INIT_RESULT.SKIP) {\n+            return true; // skip this fle\n+        } else if (result == RecordFileLogger.INIT_RESULT.FAIL) {\n             return false;\n         }\n         long counter = 0;\n-        byte[] readFileHash = new byte[48];\n-        RecordFileLogger.INIT_RESULT initFileResult = RecordFileLogger.initFile(fileName);\n         Stopwatch stopwatch = Stopwatch.createStarted();\n         Integer recordFileVersion = 0;\n         Boolean success = false;\n \n-        if (initFileResult == RecordFileLogger.INIT_RESULT.OK) {\n-            try (DataInputStream dis = new DataInputStream(new FileInputStream(file))) {\n+            try (DataInputStream dis = new DataInputStream(inputStream)) {", "originalCommit": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5OTU3OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r387099578", "bodyText": "nit: missing inputStream", "author": "Nana-EC", "createdAt": "2020-03-03T15:31:04Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series", "originalCommit": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMzgwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r387233803", "bodyText": "done.", "author": "apeksharma", "createdAt": "2020-03-03T19:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5OTU3OA=="}], "type": "inlineReview"}, {"oid": "692c537573715dfe5b96cdb02dd0989143645c54", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/692c537573715dfe5b96cdb02dd0989143645c54", "message": "add @param. realign 'try' block in loadRecordFile\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-03-03T19:11:39Z", "type": "commit"}]}