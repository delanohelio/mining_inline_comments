{"pr_number": 551, "pr_title": "Split historical and incoming message retrieval", "pr_createdAt": "2020-02-21T19:51:17Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/551", "timeline": [{"oid": "5d8063d59bf89e54e32a7b439990c9e2ef8a3127", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5d8063d59bf89e54e32a7b439990c9e2ef8a3127", "message": "Split historical and incoming message retrieval\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-02-21T20:56:36Z", "type": "forcePushed"}, {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c4dbc30a93983bffdc7941e47a4cecd2f509af31", "message": "Split historical and incoming message retrieval\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-02-21T21:19:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNTU2Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382815562", "bodyText": "q: what quantity is this? # messages or bytes or seconds? Might be worth noting", "author": "Nana-EC", "createdAt": "2020-02-21T21:32:20Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java", "diffHunk": "@@ -32,10 +33,21 @@\n public class ListenerProperties {\n \n     @NotNull\n-    private Duration pollingFrequency = Duration.ofSeconds(2);\n+    private Duration bufferInitial = Duration.ofSeconds(5);\n+\n+    @Min(1)\n+    private int bufferSize = 50_000;", "originalCommit": "c4dbc30a93983bffdc7941e47a4cecd2f509af31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNjIzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382826239", "bodyText": "It's noted in the configuration doc as being for number of messages", "author": "steven-sheehy", "createdAt": "2020-02-21T22:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNTU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjA4MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382816080", "bodyText": "Maybe we should make this configureable in the properties file also", "author": "Nana-EC", "createdAt": "2020-02-21T21:33:50Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/PollingTopicListener.java", "diffHunk": "@@ -40,15 +44,20 @@\n \n     private final ListenerProperties listenerProperties;\n     private final TopicMessageRepository topicMessageRepository;\n+    private final Scheduler scheduler = Schedulers\n+            .newParallel(\"poll\", 4 * Runtime.getRuntime().availableProcessors(), true);", "originalCommit": "c4dbc30a93983bffdc7941e47a4cecd2f509af31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzNjQwMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382836401", "bodyText": "Yeah, I was trying to avoid having to write and maintain the constructor, but if you think it's worth it I can.", "author": "steven-sheehy", "createdAt": "2020-02-21T22:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1NjEzNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r383356137", "bodyText": "Yeah. I think in the future when we get to really fine tuning and tweaking all the thread properties we'll want to be able to configure these on the fly.\nSince it's a parallel scheduler it makes sense to leave it as a multiple of the availableProcessors like reactor does.\nYou can make the multiple (4 in this case - make this default) configurable in the listenerProperties.", "author": "Nana-EC", "createdAt": "2020-02-24T16:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MzY0Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r383453647", "bodyText": "Done for PollingTopicMessageRetriever. PollingTopicListener not used now and will soon go away so not worth adding the property.", "author": "steven-sheehy", "createdAt": "2020-02-24T19:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxODU0MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382818541", "bodyText": "nit: you're not using the subscription argument", "author": "Nana-EC", "createdAt": "2020-02-21T21:40:18Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "diffHunk": "@@ -89,12 +116,32 @@ private boolean filterMessage(TopicMessage message, TopicMessageFilter filter) {\n     @Data\n     private class PollingContext {\n \n-        private volatile Instant lastConsensusTimestamp = Instant.now();\n-        private volatile boolean running = false;\n+        private final AtomicLong count = new AtomicLong(0L);\n+        private final Stopwatch stopwatch = Stopwatch.createUnstarted();\n+        private volatile Instant lastConsensusTimestamp = Instant.now().minus(listenerProperties.getBufferInitial());\n \n         void onNext(TopicMessage topicMessage) {\n+            count.incrementAndGet();\n             lastConsensusTimestamp = topicMessage.getConsensusTimestamp();\n             log.trace(\"Next message: {}\", topicMessage);\n         }\n+\n+        void onPollEnd() {\n+            var elapsed = stopwatch.elapsed(TimeUnit.MILLISECONDS);\n+            var rate = elapsed > 0 ? (int) (1000.0 * count.get() / elapsed) : 0;\n+            log.debug(\"Finished querying with {} messages in {} ({}/s)\", count, stopwatch, rate);\n+        }\n+\n+        void onPollStart(Subscription subscription) {", "originalCommit": "c4dbc30a93983bffdc7941e47a4cecd2f509af31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNzA5Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382827092", "bodyText": "It's so I can use the slightly cleaner and performant method reference approach", "author": "steven-sheehy", "createdAt": "2020-02-21T22:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxODU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxODYwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382818605", "bodyText": "nit: you're not using the subscription argument", "author": "Nana-EC", "createdAt": "2020-02-21T21:40:28Z", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "diffHunk": "@@ -89,12 +116,32 @@ private boolean filterMessage(TopicMessage message, TopicMessageFilter filter) {\n     @Data\n     private class PollingContext {\n \n-        private volatile Instant lastConsensusTimestamp = Instant.now();\n-        private volatile boolean running = false;\n+        private final AtomicLong count = new AtomicLong(0L);\n+        private final Stopwatch stopwatch = Stopwatch.createUnstarted();\n+        private volatile Instant lastConsensusTimestamp = Instant.now().minus(listenerProperties.getBufferInitial());\n \n         void onNext(TopicMessage topicMessage) {\n+            count.incrementAndGet();\n             lastConsensusTimestamp = topicMessage.getConsensusTimestamp();\n             log.trace(\"Next message: {}\", topicMessage);\n         }\n+\n+        void onPollEnd() {\n+            var elapsed = stopwatch.elapsed(TimeUnit.MILLISECONDS);\n+            var rate = elapsed > 0 ? (int) (1000.0 * count.get() / elapsed) : 0;\n+            log.debug(\"Finished querying with {} messages in {} ({}/s)\", count, stopwatch, rate);\n+        }\n+\n+        void onPollStart(Subscription subscription) {\n+            count.set(0L);\n+            stopwatch.reset().start();\n+            log.debug(\"Querying for messages after timestamp {}\", lastConsensusTimestamp);\n+        }\n+\n+        // Backfill the buffer on startup\n+        void onStart(Subscription subscription) {", "originalCommit": "c4dbc30a93983bffdc7941e47a4cecd2f509af31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "480e3111dc54be660bda3f0917edc8e675f1b93f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/480e3111dc54be660bda3f0917edc8e675f1b93f", "message": "Split historical and incoming message retrieval\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-02-22T04:59:27Z", "type": "commit"}, {"oid": "480e3111dc54be660bda3f0917edc8e675f1b93f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/480e3111dc54be660bda3f0917edc8e675f1b93f", "message": "Split historical and incoming message retrieval\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-02-22T04:59:27Z", "type": "forcePushed"}, {"oid": "f634f0bfc178b9698c66916e247da1d5c296e1f6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f634f0bfc178b9698c66916e247da1d5c296e1f6", "message": "Merge remote-tracking branch 'origin/master' into split-poller", "committedDate": "2020-02-24T17:26:44Z", "type": "commit"}, {"oid": "9ab0f53f839cd53626f2f5917f43f444b886955c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9ab0f53f839cd53626f2f5917f43f444b886955c", "message": "Add retriever threadMultiplier and timeout options\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>", "committedDate": "2020-02-24T18:55:58Z", "type": "commit"}]}