{"pr_number": 1281, "pr_title": "Support Default Credentials Provider for AWS", "pr_createdAt": "2020-11-20T06:09:42Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281", "timeline": [{"oid": "5c4ee1a6e9ca177dc34dbb4a0d38006f2342329d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5c4ee1a6e9ca177dc34dbb4a0d38006f2342329d", "message": "Support Default Credentials Provider for AWS\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-20T06:04:52Z", "type": "commit"}, {"oid": "bbc28ff59628655bb675fc1574a781786322d641", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bbc28ff59628655bb675fc1574a781786322d641", "message": "Test fixes\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-20T18:31:21Z", "type": "commit"}, {"oid": "176536c0d90ce1a62318b34a774db55c29a13af6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/176536c0d90ce1a62318b34a774db55c29a13af6", "message": "Refactor credentials logic, revert region logic, and document\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-24T06:54:29Z", "type": "commit"}, {"oid": "ef47019ce599c6f025cb495778e3f64d4bd5e139", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ef47019ce599c6f025cb495778e3f64d4bd5e139", "message": "Revert region logic\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-24T06:57:19Z", "type": "commit"}, {"oid": "570cfd17f4ea7713267dfea5f02e6cd7fc203252", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/570cfd17f4ea7713267dfea5f02e6cd7fc203252", "message": "Rename anonymous access\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-24T17:35:48Z", "type": "commit"}, {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f715868e44ca02c7f07d70841feb1e7561e451ff", "message": "Clarify static creds provider logic\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-24T17:42:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMzE5MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529813190", "bodyText": "We could go one step further with this and have S3 users only use the Default Credentials Provider and never the static creds provider, it would make this a bit cleaner (if S3, use Default, if GCP use Static), the only caveat would be S3 users would be forced to set up their creds the AWS way and would break any existing users that use the old config.", "author": "ijungmann", "createdAt": "2020-11-24T19:05:57Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CredentialsProviderConfiguration.java", "diffHunk": "@@ -23,74 +23,52 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableAsync;\n import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.services.sts.StsClient;\n-import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n-import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n \n-import com.hedera.mirror.importer.config.condition.AwsAssumeRoleCondition;\n-import com.hedera.mirror.importer.config.condition.StaticCredentialsCondition;\n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n-import com.hedera.mirror.importer.exception.MissingCredentialsException;\n \n @Configuration\n @EnableAsync\n @Log4j2\n @RequiredArgsConstructor\n public class CredentialsProviderConfiguration {\n \n+    private final MirrorProperties mirrorProperties;\n     private final CommonDownloaderProperties downloaderProperties;\n \n     @Bean\n-    @Conditional(StaticCredentialsCondition.class)\n     public AwsCredentialsProvider staticCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using provided access/secret key\");\n-        return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n-                downloaderProperties.getSecretKey()));\n-    }\n-\n-    @Bean\n-    @Conditional(AwsAssumeRoleCondition.class)\n-    public AwsCredentialsProvider stsAssumeRoleCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n-        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n-                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n-            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n-        }\n-\n-        StsClient stsClient = StsClient.builder()\n-                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n-                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n-                .region(Region.of(downloaderProperties.getRegion()))\n-                .build();\n-\n-        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n-                .roleArn(downloaderProperties.getS3().getRoleArn())\n-                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());\n-\n-        if (StringUtils.isNotBlank(downloaderProperties.getS3().getExternalId())) {\n-            assumeRoleRequestBuilder.externalId(downloaderProperties.getS3().getExternalId());\n+        if (useAnonymousCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using anonymous credentials\");\n+            return AnonymousCredentialsProvider.create();\n+        } else if (useStaticCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using provided access/secret key\");\n+            return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n+                    downloaderProperties.getSecretKey()));\n         }\n+        return DefaultCredentialsProvider.create();\n+    }\n \n-        return StsAssumeRoleCredentialsProvider.builder().stsClient(stsClient)\n-                .refreshRequest(assumeRoleRequestBuilder.build())\n-                .build();\n+    private boolean useStaticCredentialsProvider() {\n+        //If the cloud provider is GCP, it must use the static provider.  If the static credentials are both present,", "originalCommit": "f715868e44ca02c7f07d70841feb1e7561e451ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2MTcyMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529861723", "bodyText": "Yeah, let's not break users.", "author": "steven-sheehy", "createdAt": "2020-11-24T20:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMzE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2MDc2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529860764", "bodyText": "Bean needs to be renamed", "author": "steven-sheehy", "createdAt": "2020-11-24T20:33:23Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CredentialsProviderConfiguration.java", "diffHunk": "@@ -23,74 +23,52 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableAsync;\n import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.services.sts.StsClient;\n-import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n-import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n \n-import com.hedera.mirror.importer.config.condition.AwsAssumeRoleCondition;\n-import com.hedera.mirror.importer.config.condition.StaticCredentialsCondition;\n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n-import com.hedera.mirror.importer.exception.MissingCredentialsException;\n \n @Configuration\n @EnableAsync\n @Log4j2\n @RequiredArgsConstructor\n public class CredentialsProviderConfiguration {\n \n+    private final MirrorProperties mirrorProperties;\n     private final CommonDownloaderProperties downloaderProperties;\n \n     @Bean\n-    @Conditional(StaticCredentialsCondition.class)\n     public AwsCredentialsProvider staticCredentialsProvider() {", "originalCommit": "f715868e44ca02c7f07d70841feb1e7561e451ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMTI0Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r530021246", "bodyText": "Renamed", "author": "ijungmann", "createdAt": "2020-11-24T23:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2MDc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDI1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529864252", "bodyText": "This will break users using these properties. This is probably worth the trade off but we need to call it out in the release notes and directly give a few users we know who are using it a heads up.", "author": "steven-sheehy", "createdAt": "2020-11-24T20:40:26Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/CommonDownloaderProperties.java", "diffHunk": "@@ -70,16 +70,4 @@ public String getBucketName() {\n \n         private final String endpoint;\n     }\n-\n-    @Data\n-    @Validated\n-    public static class S3 {\n-\n-        private String externalId;", "originalCommit": "f715868e44ca02c7f07d70841feb1e7561e451ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMjMyMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r530022321", "bodyText": "That makes sense.  The two users I've spoken to/heard from mentioned the existing solution was not enough for what they were looking to do, so I'm hopeful that few are actually using these properties, but definitely need to get the word out.", "author": "ijungmann", "createdAt": "2020-11-25T00:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NjYxOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529866619", "bodyText": "Don't compare enums by string or by equals(), you can just use downloaderProperties.getCloudProvider() == CommonDownloaderProperties.CloudProvider.GCP. This way avoids a possible NPE, is type safe and faster.", "author": "steven-sheehy", "createdAt": "2020-11-24T20:45:09Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CredentialsProviderConfiguration.java", "diffHunk": "@@ -23,74 +23,52 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableAsync;\n import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.services.sts.StsClient;\n-import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n-import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n \n-import com.hedera.mirror.importer.config.condition.AwsAssumeRoleCondition;\n-import com.hedera.mirror.importer.config.condition.StaticCredentialsCondition;\n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n-import com.hedera.mirror.importer.exception.MissingCredentialsException;\n \n @Configuration\n @EnableAsync\n @Log4j2\n @RequiredArgsConstructor\n public class CredentialsProviderConfiguration {\n \n+    private final MirrorProperties mirrorProperties;\n     private final CommonDownloaderProperties downloaderProperties;\n \n     @Bean\n-    @Conditional(StaticCredentialsCondition.class)\n     public AwsCredentialsProvider staticCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using provided access/secret key\");\n-        return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n-                downloaderProperties.getSecretKey()));\n-    }\n-\n-    @Bean\n-    @Conditional(AwsAssumeRoleCondition.class)\n-    public AwsCredentialsProvider stsAssumeRoleCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n-        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n-                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n-            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n-        }\n-\n-        StsClient stsClient = StsClient.builder()\n-                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n-                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n-                .region(Region.of(downloaderProperties.getRegion()))\n-                .build();\n-\n-        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n-                .roleArn(downloaderProperties.getS3().getRoleArn())\n-                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());\n-\n-        if (StringUtils.isNotBlank(downloaderProperties.getS3().getExternalId())) {\n-            assumeRoleRequestBuilder.externalId(downloaderProperties.getS3().getExternalId());\n+        if (useAnonymousCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using anonymous credentials\");\n+            return AnonymousCredentialsProvider.create();\n+        } else if (useStaticCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using provided access/secret key\");\n+            return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n+                    downloaderProperties.getSecretKey()));\n         }\n+        return DefaultCredentialsProvider.create();\n+    }\n \n-        return StsAssumeRoleCredentialsProvider.builder().stsClient(stsClient)\n-                .refreshRequest(assumeRoleRequestBuilder.build())\n-                .build();\n+    private boolean useStaticCredentialsProvider() {\n+        //If the cloud provider is GCP, it must use the static provider.  If the static credentials are both present,\n+        //force the mirror node to use the static provider.\n+        return StringUtils", "originalCommit": "f715868e44ca02c7f07d70841feb1e7561e451ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMTE5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r530021196", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2020-11-24T23:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NjYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3NTE2MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529875160", "bodyText": "Keeping in mind encapsulation and to reduce verbosity of their implementation, these helpers might be more appropriate within CommonDownloaderProperties as isStaticCredentials() and isAnonymousCredentials().", "author": "steven-sheehy", "createdAt": "2020-11-24T21:01:45Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CredentialsProviderConfiguration.java", "diffHunk": "@@ -23,74 +23,52 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableAsync;\n import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.services.sts.StsClient;\n-import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n-import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n \n-import com.hedera.mirror.importer.config.condition.AwsAssumeRoleCondition;\n-import com.hedera.mirror.importer.config.condition.StaticCredentialsCondition;\n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n-import com.hedera.mirror.importer.exception.MissingCredentialsException;\n \n @Configuration\n @EnableAsync\n @Log4j2\n @RequiredArgsConstructor\n public class CredentialsProviderConfiguration {\n \n+    private final MirrorProperties mirrorProperties;\n     private final CommonDownloaderProperties downloaderProperties;\n \n     @Bean\n-    @Conditional(StaticCredentialsCondition.class)\n     public AwsCredentialsProvider staticCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using provided access/secret key\");\n-        return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n-                downloaderProperties.getSecretKey()));\n-    }\n-\n-    @Bean\n-    @Conditional(AwsAssumeRoleCondition.class)\n-    public AwsCredentialsProvider stsAssumeRoleCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n-        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n-                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n-            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n-        }\n-\n-        StsClient stsClient = StsClient.builder()\n-                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n-                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n-                .region(Region.of(downloaderProperties.getRegion()))\n-                .build();\n-\n-        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n-                .roleArn(downloaderProperties.getS3().getRoleArn())\n-                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());\n-\n-        if (StringUtils.isNotBlank(downloaderProperties.getS3().getExternalId())) {\n-            assumeRoleRequestBuilder.externalId(downloaderProperties.getS3().getExternalId());\n+        if (useAnonymousCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using anonymous credentials\");\n+            return AnonymousCredentialsProvider.create();\n+        } else if (useStaticCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using provided access/secret key\");\n+            return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n+                    downloaderProperties.getSecretKey()));\n         }\n+        return DefaultCredentialsProvider.create();\n+    }\n \n-        return StsAssumeRoleCredentialsProvider.builder().stsClient(stsClient)\n-                .refreshRequest(assumeRoleRequestBuilder.build())\n-                .build();\n+    private boolean useStaticCredentialsProvider() {", "originalCommit": "f715868e44ca02c7f07d70841feb1e7561e451ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyNTU3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r530025571", "bodyText": "Good call, moved and renamed", "author": "ijungmann", "createdAt": "2020-11-25T00:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3NTE2MA=="}], "type": "inlineReview"}, {"oid": "3fa6337abad4401d9480b5f892968d88e9277eba", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3fa6337abad4401d9480b5f892968d88e9277eba", "message": "Remove old config values\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-24T23:56:44Z", "type": "commit"}, {"oid": "98a01feba7045f26344a3e34c3f0ab9d92590013", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/98a01feba7045f26344a3e34c3f0ab9d92590013", "message": "Rename bean and fix enum comparision\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-24T23:59:12Z", "type": "commit"}, {"oid": "e011bd751e4bb013bf38f79c641077e36e7869bf", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e011bd751e4bb013bf38f79c641077e36e7869bf", "message": "Remove extra parentheses\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-25T00:05:31Z", "type": "commit"}, {"oid": "fca523f6b3d95a5fb4a7fc4dea7b0b8835023ab2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fca523f6b3d95a5fb4a7fc4dea7b0b8835023ab2", "message": "Move logic for checking provider type\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-25T00:12:54Z", "type": "commit"}, {"oid": "77922615081f5bf909808d20e51bc4920cbeaab8", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/77922615081f5bf909808d20e51bc4920cbeaab8", "message": "Add more documentation\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-25T00:28:55Z", "type": "commit"}, {"oid": "5f9c9db940f07b8f3a7bba5ad5922e247a4b2200", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5f9c9db940f07b8f3a7bba5ad5922e247a4b2200", "message": "Merge branch 'master' into aws_default_creds_provider", "committedDate": "2020-11-25T00:49:33Z", "type": "commit"}, {"oid": "53cd86d126fd835264b503911cf5378427d44835", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/53cd86d126fd835264b503911cf5378427d44835", "message": "Reword config documentation\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-30T16:48:37Z", "type": "commit"}, {"oid": "ac12837ff32b323c9facbc4f745a5f35441d7589", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ac12837ff32b323c9facbc4f745a5f35441d7589", "message": "Fix typo\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-11-30T16:50:27Z", "type": "commit"}]}