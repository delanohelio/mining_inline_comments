{"pr_number": 834, "pr_title": "Denormalize entity in cryptotransferlists and non_fee_transfer tables", "pr_createdAt": "2020-06-18T10:06:08Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/834", "timeline": [{"oid": "d1cc15d8f250342abe0791782efe70d5482ef22d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d1cc15d8f250342abe0791782efe70d5482ef22d", "message": "t_ctl entity encoding\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-18T10:01:17Z", "type": "commit"}, {"oid": "bfaeb38a602b48df4552c150822c2b7e53329180", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bfaeb38a602b48df4552c150822c2b7e53329180", "message": "remove transactionsSqlQuery.test.js\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-18T18:24:51Z", "type": "commit"}, {"oid": "296ceea4030c335831e85e18560d69aec8e56e9c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/296ceea4030c335831e85e18560d69aec8e56e9c", "message": "Rename table to crypto_transfers\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-18T19:16:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMTM4OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442501388", "bodyText": "Not really much point to have this method anymore", "author": "steven-sheehy", "createdAt": "2020-06-18T21:03:53Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -304,31 +301,28 @@ private void insertCryptoCreateTransferList(\n         TransferList transferList = txRecord.getTransferList();\n         for (int i = 0; i < transferList.getAccountAmountsCount(); ++i) {\n             var aa = transferList.getAccountAmounts(i);\n-            var accountId = aa.getAccountID();\n-            entityListener.onEntityId(EntityId.of(accountId));\n-            long accountNum = accountId.getAccountNum();\n-            addCryptoTransferList(consensusTimestamp, accountId.getRealmNum(), accountNum, aa.getAmount());\n+            var account = EntityId.of(aa.getAccountID());\n+            entityListener.onEntityId(account);\n+            addCryptoTransferList(consensusTimestamp, aa.getAmount(), account);\n \n-            if (addInitialBalance && (initialBalance == aa.getAmount()) && (accountNum == createdAccountNum)) {\n+            if (addInitialBalance && (initialBalance == aa.getAmount())\n+                    && (account.getEntityNum() == createdAccountNum)) {\n                 addInitialBalance = false;\n             }\n         }\n \n         if (addInitialBalance) {\n-            AccountID payerAccountId = body.getTransactionID().getAccountID();\n-            AccountID createdAccountId = txRecord.getReceipt().getAccountID();\n-            entityListener.onEntityId(EntityId.of(payerAccountId));\n-            entityListener.onEntityId(EntityId.of(createdAccountId));\n-            addCryptoTransferList(consensusTimestamp, payerAccountId.getRealmNum(), payerAccountId\n-                    .getAccountNum(), -initialBalance);\n-            addCryptoTransferList(consensusTimestamp, createdAccountId\n-                    .getRealmNum(), createdAccountNum, initialBalance);\n+            var payerAccount = EntityId.of(body.getTransactionID().getAccountID());\n+            var createdAccount = EntityId.of(txRecord.getReceipt().getAccountID());\n+            entityListener.onEntityId(payerAccount);\n+            entityListener.onEntityId(createdAccount);\n+            addCryptoTransferList(consensusTimestamp, -initialBalance, payerAccount);\n+            addCryptoTransferList(consensusTimestamp, initialBalance, createdAccount);\n         }\n     }\n \n-    private void addCryptoTransferList(long consensusTimestamp, long realmNum, long accountNum, long amount) {\n-        entityListener\n-                .onCryptoTransfer(new CryptoTransfer(consensusTimestamp, amount, realmNum, accountNum));\n+    private void addCryptoTransferList(long consensusTimestamp, long amount, EntityId account) {\n+        entityListener.onCryptoTransfer(new CryptoTransfer(consensusTimestamp, amount, account));", "originalCommit": "bfaeb38a602b48df4552c150822c2b7e53329180", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxMjgxMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442512811", "bodyText": "done.", "author": "apeksharma", "createdAt": "2020-06-18T21:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMTM4OA=="}], "type": "inlineReview"}, {"oid": "aad8e86bf7175cf05228cff2fd65dc6026545978", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/aad8e86bf7175cf05228cff2fd65dc6026545978", "message": "fix crypto transfers index\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-18T21:23:04Z", "type": "commit"}, {"oid": "6dc0761bb979d0e285bf6f356788716448c4ee7f", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6dc0761bb979d0e285bf6f356788716448c4ee7f", "message": "address review\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-18T21:44:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMTA3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442531071", "bodyText": "Should still have a test that verifies the custom repository method works as expected.", "author": "steven-sheehy", "createdAt": "2020-06-18T22:14:40Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/CryptoTransferRepositoryTest.java", "diffHunk": "@@ -1,49 +0,0 @@\n-package com.hedera.mirror.importer.repository;\n-\n-/*-\n- * \u200c\n- * Hedera Mirror Node\n- * \u200b\n- * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n- * \u200b\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * \u200d\n- */\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import com.hedera.mirror.importer.domain.CryptoTransfer;\n-import com.hedera.mirror.importer.domain.Transaction;\n-\n-public class CryptoTransferRepositoryTest extends AbstractRepositoryTest {", "originalCommit": "6dc0761bb979d0e285bf6f356788716448c4ee7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NjM3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r443786371", "bodyText": "Done.", "author": "apeksharma", "createdAt": "2020-06-22T19:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMTA3MQ=="}], "type": "inlineReview"}, {"oid": "317e5e924a9625849038fbfac5cf27de7f07ca9a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/317e5e924a9625849038fbfac5cf27de7f07ca9a", "message": "add crypto repo test\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-22T19:31:02Z", "type": "commit"}, {"oid": "818426b302b64f8b2a50a3de1e83f777632dda77", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/818426b302b64f8b2a50a3de1e83f777632dda77", "message": "Rename *_transfers tables to *_transfer\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-22T19:39:06Z", "type": "commit"}]}