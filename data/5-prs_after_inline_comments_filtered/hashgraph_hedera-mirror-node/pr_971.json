{"pr_number": 971, "pr_title": "Adding AWS AssumeRole support to Importer", "pr_createdAt": "2020-08-20T01:58:03Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/971", "timeline": [{"oid": "ad06b3150f62b3a0ea5c91bd9c01df97f1379ffd", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ad06b3150f62b3a0ea5c91bd9c01df97f1379ffd", "message": "Adding AWS AssumeRole support to Importer\n - New properties added for aws sts to get token\n - Reworked s3 client config to use the new credential provider when needed\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-20T01:53:44Z", "type": "commit"}, {"oid": "e28a65161e5db2dd4bc939764e820e4044e0e7be", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e28a65161e5db2dd4bc939764e820e4044e0e7be", "message": "Adding documentation to the config md\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-20T05:40:19Z", "type": "commit"}, {"oid": "561151240c7aac4fefe8f9eb50a9eccddc5a772a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/561151240c7aac4fefe8f9eb50a9eccddc5a772a", "message": "Removing unused code\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-20T05:56:30Z", "type": "commit"}, {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "message": "Adding new config to the helm chart\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-21T00:35:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NTc0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474755744", "bodyText": "Since these are S3 specific, let's create a public static class S3 nested class and a private final S3 s3 = new S3(); field here to contain them so they have a s3 in their property path.", "author": "steven-sheehy", "createdAt": "2020-08-21T15:03:35Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/CommonDownloaderProperties.java", "diffHunk": "@@ -60,6 +61,12 @@ public String getBucketName() {\n \n     private String gcpProjectId;\n \n+    private String roleArn;", "originalCommit": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MDg2MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474990861", "bodyText": "Added static class S3.", "author": "ijungmann", "createdAt": "2020-08-21T22:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NTc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2NTQ0NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474765445", "bodyText": "No need to pass these parameters since downloaderProperties is a class member. Mixing the two approaches doesn't make sense.", "author": "steven-sheehy", "createdAt": "2020-08-21T15:20:10Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {\n+            clientBuilder.credentialsProvider(\n+                    awsAssumeRoleCredentialsProvider(downloaderProperties.getAccessKey(),", "originalCommit": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MTM3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474991370", "bodyText": "Removed the parameters.", "author": "ijungmann", "createdAt": "2020-08-21T22:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2NTQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3Mzc2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474773768", "bodyText": "There should be a space after if. Please ensure you:\n\n\nInstall EditorConfig plugin\n\n\nInstall Save Actions plugin\n\n\nConfigure it\n\n\n\nHave default IDE code style for Java (editorconfig should provide most formatting)", "author": "steven-sheehy", "createdAt": "2020-08-21T15:33:55Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))\n+                .region(Region.of(region))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getRoleArn())\n+                .roleSessionName(downloaderProperties.getRoleSessionName());\n+\n+        if(StringUtils.isNotBlank(downloaderProperties.getExternalId())) {", "originalCommit": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwMDkwOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475700909", "bodyText": "Added these settings and fixed the if ( issue", "author": "ijungmann", "createdAt": "2020-08-24T15:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3Mzc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NzMwOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474777309", "bodyText": "Log a statement indicating setting up credentials with AWS Assume Role.", "author": "steven-sheehy", "createdAt": "2020-08-21T15:40:19Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))\n+                .region(Region.of(region))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getRoleArn())\n+                .roleSessionName(downloaderProperties.getRoleSessionName());\n+\n+        if(StringUtils.isNotBlank(downloaderProperties.getExternalId())) {\n+            assumeRoleRequestBuilder.externalId(downloaderProperties.getExternalId());\n+        }\n+", "originalCommit": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MzQwMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474993403", "bodyText": "Added a log for this", "author": "ijungmann", "createdAt": "2020-08-21T22:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NzMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474789443", "bodyText": "Instead of if statements, it would make more sense to use @ConditionalOnProperty and construct different AwsCredentialsProvider depending upon property values being present. That is, we should have 3 beans of type AwsCredentialsProvider each with different @ConditionalOnProperty. If need be, assume role can be marked primary. It may also make sense to use a nested config class to group by cloudprovider", "author": "steven-sheehy", "createdAt": "2020-08-21T16:03:10Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {", "originalCommit": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg5ODIzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474898239", "bodyText": "I like the idea, the only ways I can come up to implement it though are either with a conditional expression or an enum to explicitly state which provider to use.  With just ConditionalOnProperty I need a way to specify a property must NOT be present, otherwise the AnonymousCredentialsProvider would get created every time, and I have not found a good way to do that operation.", "author": "ijungmann", "createdAt": "2020-08-21T19:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0NDAwMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474944000", "bodyText": "Use @ConditionalOnProperty(value = \"hedera.mirror.importer.downloader.accessKey\", matchIfMissing = true) for anonymous.", "author": "steven-sheehy", "createdAt": "2020-08-21T20:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1Nzk1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474957957", "bodyText": "Would that not still create the anonymous provider if the accessKey is provided?  My understanding of matchIfMissing is it only applies if the property is not provided, so if the keys are provided it will still create both the anonymous and the static providers", "author": "ijungmann", "createdAt": "2020-08-21T20:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3ODA0OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474978049", "bodyText": "That's true. So you'd have to use conditional expression or a custom condition. If that makes the code less readable/simple, I'm okay with current approach.", "author": "steven-sheehy", "createdAt": "2020-08-21T21:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5Mzc5MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474993791", "bodyText": "I will test out an expression and see how it looks.  All other comments thus far should be addressed now.", "author": "ijungmann", "createdAt": "2020-08-21T22:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMzA4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475023084", "bodyText": "I wrote some custom Condition classes and moved the credentialProvider bean creation into a separate class, with this change it appears to work as expected, let me know if this change is too much.\nAlso, I have the AssumeRoleCondition only checking for the roleArn, realistically it will need the keys too, but I figure better to throw an exception in the creation logic than have it bump down to the Anonymous creds if those are missing.", "author": "ijungmann", "createdAt": "2020-08-22T00:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NDc0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474794744", "bodyText": "Can this work with anonymous credentials? If not, please throw an error if accessKey or secret key empty.", "author": "steven-sheehy", "createdAt": "2020-08-21T16:13:41Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))", "originalCommit": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MjAzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474992038", "bodyText": "Removed the call that would allow it to try to use anonymous credentials, and did a check/throw exception if the keys are not provided.", "author": "ijungmann", "createdAt": "2020-08-21T22:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NDc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NTM2Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474795367", "bodyText": "Code reuse is good, but in this case reusing awsCredentialsProvider() cause a log statement to indicate the wrong credentials were used to setup the client. Also it may not work with anonymous creds. It may be better to just use StaticCredentialsProvider directly.", "author": "steven-sheehy", "createdAt": "2020-08-21T16:14:59Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))", "originalCommit": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MTgzMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474991832", "bodyText": "Good call, removed this and built my own StaticCredentialsProvider.", "author": "ijungmann", "createdAt": "2020-08-21T22:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NTM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODc0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474808743", "bodyText": "nit: accessKey, secretKey and region are all pulled from the downloaderProperties which you use in here to get roleArn, roleSessionName and externalId.\nProbably no need to pass them in, that was it makes it consistent and makes for a shorter call.", "author": "Nana-EC", "createdAt": "2020-08-21T16:41:34Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {", "originalCommit": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MzkzOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474993939", "bodyText": "Removed the parameters.", "author": "ijungmann", "createdAt": "2020-08-21T22:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODc0Mw=="}], "type": "inlineReview"}, {"oid": "248f09e9f4c3288b1a29481dfe2639adc86175b4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/248f09e9f4c3288b1a29481dfe2639adc86175b4", "message": "Changes for PR comments (documentation and properties rework)\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-21T21:30:00Z", "type": "commit"}, {"oid": "27ef6901c1d64dc0258259766732e97cdd2f82df", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/27ef6901c1d64dc0258259766732e97cdd2f82df", "message": "Addressing PR comments (Config logic change and add exception)\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-21T21:43:22Z", "type": "commit"}, {"oid": "7cd687072bfcab251046ba1dcc4b1e9e57670ab6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7cd687072bfcab251046ba1dcc4b1e9e57670ab6", "message": "PR Comments (fixing bugs)\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-21T22:09:40Z", "type": "commit"}, {"oid": "5a041ed72b38c899e9654b75afcdfc51f6f6b7f1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5a041ed72b38c899e9654b75afcdfc51f6f6b7f1", "message": "PR Comments (Adding log when assuming role)\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-21T22:15:38Z", "type": "commit"}, {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "message": "Clarifying documentation and logs\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-21T22:23:41Z", "type": "commit"}, {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "message": "Clarifying documentation and logs\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-21T22:23:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwODg5OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475008898", "bodyText": "from AWS SDK doc, an assumeRole session has a duration; S3 calls will fail once the session expires. so we also need to support assumeRole session refresh.", "author": "xin-hedera", "createdAt": "2020-08-21T23:25:36Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +145,32 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider() {\n+        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n+        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n+                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n+            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n+        }\n+\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n+                .region(Region.of(downloaderProperties.getRegion()))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getS3().getRoleArn())\n+                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());", "originalCommit": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMzg4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475023884", "bodyText": "I may be mistaken, I believe this is taken care of by the refreshRequest on the credentials provider\nreturn StsAssumeRoleCredentialsProvider.builder().stsClient(stsClient) .refreshRequest(assumeRoleRequestBuilder.build())\nThe description here seems to imply this is handled", "author": "ijungmann", "createdAt": "2020-08-22T00:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwODg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxNTkzNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475315936", "bodyText": "yes you are correct", "author": "xin-hedera", "createdAt": "2020-08-24T02:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwODg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwOTA1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475009050", "bodyText": "copyright header", "author": "xin-hedera", "createdAt": "2020-08-21T23:26:23Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/exception/MissingCredentialsException.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.hedera.mirror.importer.exception;\n+", "originalCommit": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDM3Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475024372", "bodyText": "Fixed.", "author": "ijungmann", "createdAt": "2020-08-22T00:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwOTA1MA=="}], "type": "inlineReview"}, {"oid": "e6e05b9f8a13cbf17ec2e64ddac650416dc38d67", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e6e05b9f8a13cbf17ec2e64ddac650416dc38d67", "message": "Reworking credential provider to be created as a conditional bean\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-22T00:36:27Z", "type": "commit"}, {"oid": "b5e871f4b5e9355aef156527cba4bb5a6bfffa65", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b5e871f4b5e9355aef156527cba4bb5a6bfffa65", "message": "Adding copyright and fixing class name typo\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-22T00:55:48Z", "type": "commit"}, {"oid": "4d980ec6f960f2494e4bc283b43be100dce05f16", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4d980ec6f960f2494e4bc283b43be100dce05f16", "message": "Adding Condition unit tests to confirm boolean logic\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-24T12:41:58Z", "type": "commit"}, {"oid": "6714bcda8bea4b5671cc1cf5bcbc106089894e3a", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6714bcda8bea4b5671cc1cf5bcbc106089894e3a", "message": "Tests and code style fixes\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>", "committedDate": "2020-08-24T15:29:08Z", "type": "commit"}]}