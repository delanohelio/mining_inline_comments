{"pr_number": 966, "pr_title": "Import latest property", "pr_createdAt": "2020-08-17T15:35:22Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/966", "timeline": [{"oid": "0ae7162683788bf3d81b72df61111a6547b5e5c2", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0ae7162683788bf3d81b72df61111a6547b5e5c2", "message": "add support of startDate and endDate to limit the amount of data to import\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-13T20:42:15Z", "type": "commit"}, {"oid": "dcc61717207e1608dcd309c2d3f8bbdc17b86ab3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dcc61717207e1608dcd309c2d3f8bbdc17b86ab3", "message": "Merge branch 'master' into import-latest-property", "committedDate": "2020-08-13T20:42:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NTA5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r471595096", "bodyText": "nit: to be consistent with above method\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String getStreamFilenameForInstant(StreamType streamType, Instant instant) {\n          \n          \n            \n                public static final String getStreamFilenameFromInstant(StreamType streamType, Instant instant) {", "author": "Nana-EC", "createdAt": "2020-08-17T16:26:10Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -416,10 +416,19 @@ public static final long getTimestampFromFilename(String filename) {\n         }\n \n         date = date.replace('_', ':');\n-        Instant instant = Instant.parse(date);\n+        return Instant.parse(date);\n+    }\n+\n+    public static final long getTimestampFromFilename(String filename) {\n+        Instant instant = getInstantFromFilename(filename);\n         return Utility.convertToNanosMax(instant.getEpochSecond(), instant.getNano());\n     }\n \n+    public static final String getStreamFilenameForInstant(StreamType streamType, Instant instant) {", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwNDMzOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r473104338", "bodyText": "will update as suggested", "author": "xin-hedera", "createdAt": "2020-08-19T15:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NTA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5Nzk4Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r471597982", "bodyText": "nit: This method will call StringUtils.isBlank(lastValidFilename) at least once so you might as well pull it out before the first if after the lastValidFileName retrieval and share it\nboolean isLastValidFileNameBlank = StringUtils.isBlank(lastValidFilename);", "author": "Nana-EC", "createdAt": "2020-08-17T16:31:19Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,6 +433,60 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n+    /**\n+     * Sets the start date of the data based on property startDate and current application status if it's not\n+     * updated yet.\n+     * <ul>\n+     *  <li>If the property startDate is set and application status is empty or less than startDate, set application\n+     *  status and verifyHashAfter to startDate.</li>\n+     *  <li>If the property startDate is not set and application status is empty, set application status and\n+     *  verifyHashAfter to now.</li>\n+     *  </ul>\n+     */\n+    private void updateDataStartDate() {\n+        if (dataStartDateUpdated) {\n+            return;\n+        }\n+\n+        boolean shouldUpdate = false;\n+        Instant startDate = mirrorProperties.getStartDate();\n+        String lastValidFilename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+        if (startDate != null) {\n+            Instant lastValidFileInstant = Utility.getInstantFromFilename(lastValidFilename);\n+            if (StringUtils.isBlank(lastValidFilename) || lastValidFileInstant.isBefore(startDate)) {", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwNDQwNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r473104407", "bodyText": "will update as suggested", "author": "xin-hedera", "createdAt": "2020-08-19T15:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5Nzk4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMjU0Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r471602543", "bodyText": "Q: Are we sure we want to set the start if the lastValidFileInstant.isBefore(startDate)?\nWon't this result in the breaking of the hash chain for record file meaning missing transactions in the mirror node.\nIs this a flow we want to support just yet, as there could be unknown implications?\nI thought we'd only want to support, 1) Start from EPOCH 2) Start from some point in the past 3) Start now\nIn all cases don't we want the mirror node to flow sequentially with no time jumps?\nThis scenario is a subset of having a start and end date. Once you're done you could set another star toad end date in the future. I just want to make sure this is an intentional option we're opening up", "author": "Nana-EC", "createdAt": "2020-08-17T16:39:20Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,6 +433,60 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n+    /**\n+     * Sets the start date of the data based on property startDate and current application status if it's not\n+     * updated yet.\n+     * <ul>\n+     *  <li>If the property startDate is set and application status is empty or less than startDate, set application\n+     *  status and verifyHashAfter to startDate.</li>\n+     *  <li>If the property startDate is not set and application status is empty, set application status and\n+     *  verifyHashAfter to now.</li>\n+     *  </ul>\n+     */\n+    private void updateDataStartDate() {\n+        if (dataStartDateUpdated) {\n+            return;\n+        }\n+\n+        boolean shouldUpdate = false;\n+        Instant startDate = mirrorProperties.getStartDate();\n+        String lastValidFilename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+        if (startDate != null) {\n+            Instant lastValidFileInstant = Utility.getInstantFromFilename(lastValidFilename);\n+            if (StringUtils.isBlank(lastValidFilename) || lastValidFileInstant.isBefore(startDate)) {", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMjA0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r471612044", "bodyText": "Probably want to add a case for when the user sets endDate < startDate accidentally.\nAlso add a unit test that makes sure the expected behavior is carried out.\nPreferably we'd make this a constraint so that it fails at startUp.", "author": "Nana-EC", "createdAt": "2020-08-17T16:55:55Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,6 +433,60 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n+    /**\n+     * Sets the start date of the data based on property startDate and current application status if it's not\n+     * updated yet.\n+     * <ul>\n+     *  <li>If the property startDate is set and application status is empty or less than startDate, set application\n+     *  status and verifyHashAfter to startDate.</li>\n+     *  <li>If the property startDate is not set and application status is empty, set application status and\n+     *  verifyHashAfter to now.</li>\n+     *  </ul>\n+     */\n+    private void updateDataStartDate() {\n+        if (dataStartDateUpdated) {\n+            return;\n+        }\n+\n+        boolean shouldUpdate = false;\n+        Instant startDate = mirrorProperties.getStartDate();\n+        String lastValidFilename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+        if (startDate != null) {\n+            Instant lastValidFileInstant = Utility.getInstantFromFilename(lastValidFilename);\n+            if (StringUtils.isBlank(lastValidFilename) || lastValidFileInstant.isBefore(startDate)) {\n+                shouldUpdate = true;\n+            }\n+        } else if (StringUtils.isBlank(lastValidFilename)) {\n+            startDate = MirrorProperties.getStartDateNow();\n+            shouldUpdate = true;\n+        }\n+\n+        if (shouldUpdate) {\n+            StreamType streamType = downloaderProperties.getStreamType();\n+            applicationStatusRepository.updateStatusValue(getLastValidDownloadedFileKey(),\n+                    Utility.getStreamFilenameForInstant(streamType, startDate));\n+            mirrorProperties.setVerifyHashAfter(startDate);\n+            log.info(\"Set downloader to start polling from {} for {}\", startDate, streamType.getPath());\n+        }\n+\n+        dataStartDateUpdated = true;\n+    }\n+\n+    private boolean isEndDateReached() {\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (endDate != null) {\n+            try {\n+                String filename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+                if (!StringUtils.isBlank(filename)) {", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgxNjgzMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r471816831", "bodyText": "the constraint should be endDate > effective startDate and the effective startDate depends on the configured startDate & the application status table\nwe need a validator class which depends on the application status repo and errors out if any enabled downloader's effective startDate and the configured endData violates the constraint.\nIt's a bit complicated. Not sure if we want to do it OR we just spit out warning and disables the downloader when the scheduled tasks run", "author": "xin-hedera", "createdAt": "2020-08-17T22:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMjA0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NDg3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r472274879", "bodyText": "At minimum, can just do the simpler check without db calls:\nif (endDate != null && startDate != null) {\n  return startDate.compareTo(endDate) <= 0;\n}\nOr you can just do the validation here as this only runs once.", "author": "steven-sheehy", "createdAt": "2020-08-18T15:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMjA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwMzY4Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r471803683", "bodyText": "This isn't quite the right spot for this logic. verifySigsAndDownloadDataFiles can potentially verify multiple stream files and this just checks if the last one is past. That means files with timestamps after the end date can sneak through.", "author": "steven-sheehy", "createdAt": "2020-08-17T22:13:14Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -144,6 +151,12 @@ protected void downloadNextBatch() {\n             log.warn(e.getMessage());\n         } catch (Exception e) {\n             log.error(\"Error downloading files\", e);\n+        } finally {\n+            if (isEndDateReached()) {", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNzYyOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r471807629", "bodyText": "This only gives us resolution at the file level. We should probably have a transaction level check in the parser as well so we don't import transactions in the last file we accept that are past the end date.", "author": "steven-sheehy", "createdAt": "2020-08-17T22:24:09Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,6 +433,60 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n+    /**\n+     * Sets the start date of the data based on property startDate and current application status if it's not\n+     * updated yet.\n+     * <ul>\n+     *  <li>If the property startDate is set and application status is empty or less than startDate, set application\n+     *  status and verifyHashAfter to startDate.</li>\n+     *  <li>If the property startDate is not set and application status is empty, set application status and\n+     *  verifyHashAfter to now.</li>\n+     *  </ul>\n+     */\n+    private void updateDataStartDate() {\n+        if (dataStartDateUpdated) {\n+            return;\n+        }\n+\n+        boolean shouldUpdate = false;\n+        Instant startDate = mirrorProperties.getStartDate();\n+        String lastValidFilename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+        if (startDate != null) {\n+            Instant lastValidFileInstant = Utility.getInstantFromFilename(lastValidFilename);\n+            if (StringUtils.isBlank(lastValidFilename) || lastValidFileInstant.isBefore(startDate)) {\n+                shouldUpdate = true;\n+            }\n+        } else if (StringUtils.isBlank(lastValidFilename)) {\n+            startDate = MirrorProperties.getStartDateNow();\n+            shouldUpdate = true;\n+        }\n+\n+        if (shouldUpdate) {\n+            StreamType streamType = downloaderProperties.getStreamType();\n+            applicationStatusRepository.updateStatusValue(getLastValidDownloadedFileKey(),\n+                    Utility.getStreamFilenameForInstant(streamType, startDate));\n+            mirrorProperties.setVerifyHashAfter(startDate);\n+            log.info(\"Set downloader to start polling from {} for {}\", startDate, streamType.getPath());\n+        }\n+\n+        dataStartDateUpdated = true;\n+    }\n+\n+    private boolean isEndDateReached() {\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (endDate != null) {\n+            try {\n+                String filename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+                if (!StringUtils.isBlank(filename)) {\n+                    return !Utility.getInstantFromFilename(filename).isBefore(endDate);", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyMDA3MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r473120070", "bodyText": "it's straightforward to apply end date at the level of transaction consensus timestamp. the question is, if we intend to define end date this way, we should define start date the same way. For record file and event file, we have to rely on close interval to infer from what timestamp we download the files. it's error prone since a shorter close interval configured can lead to the wrong inferred effective start date.", "author": "xin-hedera", "createdAt": "2020-08-19T15:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNzYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyODM5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r473128395", "bodyText": "Yes, I didn't clarify but I meant both startDate and endDate should apply to the transactions within the file. But we should also do at file level in the downloader so we can disable that poller (as you are doing now).\nI'm not sure how close interval comes into play. We should only be comparing startDate/endDate with the consensus timestamp in filename in downloader and the individual transactions' consensus timestamp in parser. If the filename is one nanosecond before the endDate, we would still pass it on to parser and he would accept the single transaction and ignore the rest.", "author": "steven-sheehy", "createdAt": "2020-08-19T15:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNzYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNDkwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r473134905", "bodyText": "for record file, because it contains transactions in the range [consensus_start, consensus_end], for example, if start date is set to a value in (consensus_start, consensus_end) and we want to apply it at transaction level, without inferring the effective record file name, we will start downloading, at best, the next record file, which does not have transactions from [start date, consensus_start of the file).\nwith an accurate close interval, we can infer the correct timestamp.", "author": "xin-hedera", "createdAt": "2020-08-19T15:54:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNzYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MjAxMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r473152013", "bodyText": "I don't think we should rely on close interval. The two options I see are a) downloader handles file level granularity and parser handles transaction level granularity b) downloader handles transaction level granularity by passing a consumer to Utility.parseRecordFile() that throws some exception if not within start, end. Latter seems cleanest approach.", "author": "steven-sheehy", "createdAt": "2020-08-19T16:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNzYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2MzU2MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r473163561", "bodyText": "sure, I'll go with the latter approach", "author": "xin-hedera", "createdAt": "2020-08-19T16:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNzYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMjkyNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r476732927", "bodyText": "add startDateAdjustment to DownloaderProperties, defaults to 30s for both record file and event file ,1s for account balance file. The new field is not described in configuration doc.", "author": "xin-hedera", "createdAt": "2020-08-25T20:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNzYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NzExNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r472287114", "bodyText": "This method would be more appropriate and encapsulated in MirrorProperties. Would recommend using a framework to ensure only invoked once on startup instead of dataStartDateUpdated.\nclass MirrorProperties {\n  @Async\n  @EventListener(ApplicationReadyEvent.class)\n  public void init() {}", "author": "steven-sheehy", "createdAt": "2020-08-18T15:31:24Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,6 +433,60 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n+    /**\n+     * Sets the start date of the data based on property startDate and current application status if it's not\n+     * updated yet.\n+     * <ul>\n+     *  <li>If the property startDate is set and application status is empty or less than startDate, set application\n+     *  status and verifyHashAfter to startDate.</li>\n+     *  <li>If the property startDate is not set and application status is empty, set application status and\n+     *  verifyHashAfter to now.</li>\n+     *  </ul>\n+     */\n+    private void updateDataStartDate() {", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI5NTIyMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r472295223", "bodyText": "nit: Can just log StreamType itself instead of getPath() here and in other places. Path is used for the filesystem path and the enum name would be more appropriate.", "author": "steven-sheehy", "createdAt": "2020-08-18T15:42:55Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,6 +433,60 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n+    /**\n+     * Sets the start date of the data based on property startDate and current application status if it's not\n+     * updated yet.\n+     * <ul>\n+     *  <li>If the property startDate is set and application status is empty or less than startDate, set application\n+     *  status and verifyHashAfter to startDate.</li>\n+     *  <li>If the property startDate is not set and application status is empty, set application status and\n+     *  verifyHashAfter to now.</li>\n+     *  </ul>\n+     */\n+    private void updateDataStartDate() {\n+        if (dataStartDateUpdated) {\n+            return;\n+        }\n+\n+        boolean shouldUpdate = false;\n+        Instant startDate = mirrorProperties.getStartDate();\n+        String lastValidFilename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+        if (startDate != null) {\n+            Instant lastValidFileInstant = Utility.getInstantFromFilename(lastValidFilename);\n+            if (StringUtils.isBlank(lastValidFilename) || lastValidFileInstant.isBefore(startDate)) {\n+                shouldUpdate = true;\n+            }\n+        } else if (StringUtils.isBlank(lastValidFilename)) {\n+            startDate = MirrorProperties.getStartDateNow();\n+            shouldUpdate = true;\n+        }\n+\n+        if (shouldUpdate) {\n+            StreamType streamType = downloaderProperties.getStreamType();\n+            applicationStatusRepository.updateStatusValue(getLastValidDownloadedFileKey(),\n+                    Utility.getStreamFilenameForInstant(streamType, startDate));\n+            mirrorProperties.setVerifyHashAfter(startDate);\n+            log.info(\"Set downloader to start polling from {} for {}\", startDate, streamType.getPath());", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNDI3Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r472334273", "bodyText": "Since this is a transient update but the database is permanent, we should probably always set verifyHashAfter equal to startDate if the user supplied an explicit startDate.", "author": "steven-sheehy", "createdAt": "2020-08-18T16:42:04Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,6 +433,60 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n+    /**\n+     * Sets the start date of the data based on property startDate and current application status if it's not\n+     * updated yet.\n+     * <ul>\n+     *  <li>If the property startDate is set and application status is empty or less than startDate, set application\n+     *  status and verifyHashAfter to startDate.</li>\n+     *  <li>If the property startDate is not set and application status is empty, set application status and\n+     *  verifyHashAfter to now.</li>\n+     *  </ul>\n+     */\n+    private void updateDataStartDate() {\n+        if (dataStartDateUpdated) {\n+            return;\n+        }\n+\n+        boolean shouldUpdate = false;\n+        Instant startDate = mirrorProperties.getStartDate();\n+        String lastValidFilename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+        if (startDate != null) {\n+            Instant lastValidFileInstant = Utility.getInstantFromFilename(lastValidFilename);\n+            if (StringUtils.isBlank(lastValidFilename) || lastValidFileInstant.isBefore(startDate)) {\n+                shouldUpdate = true;\n+            }\n+        } else if (StringUtils.isBlank(lastValidFilename)) {\n+            startDate = MirrorProperties.getStartDateNow();\n+            shouldUpdate = true;\n+        }\n+\n+        if (shouldUpdate) {\n+            StreamType streamType = downloaderProperties.getStreamType();\n+            applicationStatusRepository.updateStatusValue(getLastValidDownloadedFileKey(),\n+                    Utility.getStreamFilenameForInstant(streamType, startDate));\n+            mirrorProperties.setVerifyHashAfter(startDate);", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNDUwOQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r472334509", "bodyText": "We should not override verifyHashAfter if it's not null and it's after startDate.", "author": "steven-sheehy", "createdAt": "2020-08-18T16:42:30Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,6 +433,60 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n+    /**\n+     * Sets the start date of the data based on property startDate and current application status if it's not\n+     * updated yet.\n+     * <ul>\n+     *  <li>If the property startDate is set and application status is empty or less than startDate, set application\n+     *  status and verifyHashAfter to startDate.</li>\n+     *  <li>If the property startDate is not set and application status is empty, set application status and\n+     *  verifyHashAfter to now.</li>\n+     *  </ul>\n+     */\n+    private void updateDataStartDate() {\n+        if (dataStartDateUpdated) {\n+            return;\n+        }\n+\n+        boolean shouldUpdate = false;\n+        Instant startDate = mirrorProperties.getStartDate();\n+        String lastValidFilename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+        if (startDate != null) {\n+            Instant lastValidFileInstant = Utility.getInstantFromFilename(lastValidFilename);\n+            if (StringUtils.isBlank(lastValidFilename) || lastValidFileInstant.isBefore(startDate)) {\n+                shouldUpdate = true;\n+            }\n+        } else if (StringUtils.isBlank(lastValidFilename)) {\n+            startDate = MirrorProperties.getStartDateNow();\n+            shouldUpdate = true;\n+        }\n+\n+        if (shouldUpdate) {\n+            StreamType streamType = downloaderProperties.getStreamType();\n+            applicationStatusRepository.updateStatusValue(getLastValidDownloadedFileKey(),\n+                    Utility.getStreamFilenameForInstant(streamType, startDate));\n+            mirrorProperties.setVerifyHashAfter(startDate);", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0NjI3Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r472346276", "bodyText": "Can just remove StringUtils.isBlank(lastValidFilename) since Utility.getInstantFromFilename already does that check and returns epoch. Then can pull lastValidFileInstant up like Nana mentioned and flatten this if statement.", "author": "steven-sheehy", "createdAt": "2020-08-18T17:01:36Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,6 +433,60 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n+    /**\n+     * Sets the start date of the data based on property startDate and current application status if it's not\n+     * updated yet.\n+     * <ul>\n+     *  <li>If the property startDate is set and application status is empty or less than startDate, set application\n+     *  status and verifyHashAfter to startDate.</li>\n+     *  <li>If the property startDate is not set and application status is empty, set application status and\n+     *  verifyHashAfter to now.</li>\n+     *  </ul>\n+     */\n+    private void updateDataStartDate() {\n+        if (dataStartDateUpdated) {\n+            return;\n+        }\n+\n+        boolean shouldUpdate = false;\n+        Instant startDate = mirrorProperties.getStartDate();\n+        String lastValidFilename = applicationStatusRepository.findByStatusCode(getLastValidDownloadedFileKey());\n+        if (startDate != null) {\n+            Instant lastValidFileInstant = Utility.getInstantFromFilename(lastValidFilename);\n+            if (StringUtils.isBlank(lastValidFilename) || lastValidFileInstant.isBefore(startDate)) {", "originalCommit": "e81c6061668b2727fa2b561c382cf717d0a703e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0168a088fec2812fb43943071c6926751a395474", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0168a088fec2812fb43943071c6926751a395474", "message": "placeholder\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-20T17:50:25Z", "type": "commit"}, {"oid": "2670bd029e50745b9ae600e8b03dde230014fc6d", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2670bd029e50745b9ae600e8b03dde230014fc6d", "message": "switch from PostConstruct to async eventlistener, emit MirrorDateRangePropertiesProcessedEvent to trigger downloaders\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-20T23:41:09Z", "type": "commit"}, {"oid": "9e0849b46b80cb06e0ce62d31ea38c67aafc6a06", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9e0849b46b80cb06e0ce62d31ea38c67aafc6a06", "message": "revert the changes that make Downloader an interface and rename Downloader to AbstractDownloader. Move application status code getters into DownloaderProperties\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-21T00:18:07Z", "type": "commit"}, {"oid": "eb2b5ce9de437589673f63701cbb472b167787cf", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/eb2b5ce9de437589673f63701cbb472b167787cf", "message": "processRecordItem returns false if the recordItem is skipped because it's after endDate\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-21T15:00:31Z", "type": "commit"}, {"oid": "fe98d223c4b2656867e7a0282902f95144c91288", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fe98d223c4b2656867e7a0282902f95144c91288", "message": "replace s3mock with s3proxy with list-objects marker support\nSigned-off-by: Xin Li <xin.li@swirlds.com>\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-21T15:43:24Z", "type": "commit"}, {"oid": "14275c8ebec139cf5807a12c9bad33fb423e34c3", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/14275c8ebec139cf5807a12c9bad33fb423e34c3", "message": "refactor unit test cases for startDate and endDate\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-21T18:39:26Z", "type": "commit"}, {"oid": "ad118451cdc7fe1b88be1ffc6dcbf4ed0aa779d1", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ad118451cdc7fe1b88be1ffc6dcbf4ed0aa779d1", "message": "more tests and bug fix\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-21T22:10:52Z", "type": "commit"}, {"oid": "aa3f2651bd0bac995b1f99a61f958330280084c4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/aa3f2651bd0bac995b1f99a61f958330280084c4", "message": "update doc\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-21T22:20:33Z", "type": "commit"}, {"oid": "aa3f2651bd0bac995b1f99a61f958330280084c4", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/aa3f2651bd0bac995b1f99a61f958330280084c4", "message": "update doc\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-21T22:20:33Z", "type": "forcePushed"}, {"oid": "9c213b85105d61b4f90c231d845f0a5329b5dffb", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9c213b85105d61b4f90c231d845f0a5329b5dffb", "message": "move signature file endDate check to verifySigsAndDownloadDataFiles, clean up test cases\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-24T02:54:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MjU4NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475292584", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean mirrorDateRagePropertiesProcessed = false;\n          \n          \n            \n                private boolean mirrorDateRangePropertiesProcessed = false;", "author": "Nana-EC", "createdAt": "2020-08-24T00:57:44Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -86,6 +95,11 @@\n     protected final Timer downloadLatencyMetric;\n     protected final Timer streamCloseMetric;\n \n+    private boolean mirrorDateRagePropertiesProcessed = false;", "originalCommit": "aa3f2651bd0bac995b1f99a61f958330280084c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMzA1Mg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r476733052", "bodyText": "fixed", "author": "xin-hedera", "createdAt": "2020-08-25T20:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MjU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MjcyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475292720", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param downloaderProperties The properties of the downloader to validate the (startDate, endDate] range for\n          \n          \n            \n                 * @param downloaderProperties The properties of the downloader to validate the (startDate, endDate) range for\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param downloaderProperties The properties of the downloader to validate the (startDate, endDate] range for\n          \n          \n            \n                 * @param downloaderProperties The properties of the downloader to validate the [startDate, endDate] range for", "author": "Nana-EC", "createdAt": "2020-08-24T00:58:35Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorDateRangePropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import java.util.List;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.config.event.MirrorDateRangePropertiesProcessedEvent;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.exception.InvalidConfigurationException;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class MirrorDateRangePropertiesProcessor {\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+    private final MirrorProperties mirrorProperties;\n+    private final ApplicationStatusRepository applicationStatusRepository;\n+    private final List<DownloaderProperties> downloaderPropertiesList;\n+\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void process() {\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            validateDateRange(downloaderProperties);\n+        }\n+\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            updateApplicationStatus(downloaderProperties);\n+        }\n+\n+        applicationEventPublisher.publishEvent(new MirrorDateRangePropertiesProcessedEvent(this));\n+        log.info(\"Mirror date range properties processed successfully, MirrorDateRangePropertiesProcessedEvent fired\");\n+    }\n+\n+    /**\n+     * Validates the configured (startDate, endDate] range for downloader.\n+     * @param downloaderProperties The properties of the downloader to validate the (startDate, endDate] range for", "originalCommit": "aa3f2651bd0bac995b1f99a61f958330280084c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY5MzEwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475693105", "bodyText": "I'm not quite sure about the suggested change. As described in configuration.md, the range is startDate exclusive and endDate inclusive, so (startDate, endDate] is the correct expression.", "author": "xin-hedera", "createdAt": "2020-08-24T15:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MjcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0OTIxNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475749216", "bodyText": "That's correct, ignore this :)", "author": "Nana-EC", "createdAt": "2020-08-24T16:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MjcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MjgyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475292820", "bodyText": "nit: name this something like startUpInstant so it's not confused with startDate.", "author": "Nana-EC", "createdAt": "2020-08-24T00:59:06Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/MirrorProperties.java", "diffHunk": "@@ -38,6 +38,8 @@\n @ConfigurationProperties(\"hedera.mirror.importer\")\n public class MirrorProperties {\n \n+    private static final Instant startDateNow = Instant.now();", "originalCommit": "aa3f2651bd0bac995b1f99a61f958330280084c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxNjAyMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477416022", "bodyText": "updated", "author": "xin-hedera", "createdAt": "2020-08-26T16:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5MjgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5NTIxNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475295216", "bodyText": "This could also be moved to Utility as Utility. isFileAfterInstant() below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean isFileAfterEndDate(String filename) {\n          \n          \n            \n                private boolean isFileAfterInstant(String filename, Instant instant) {\n          \n          \n            \n                    return instant != null && Utility.getInstantFromFilename(filename).isAfter(instant);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nThen call  Utility.isFileAfterInstant(filename, mirrorProperties.getEndDate()) on line 244", "author": "Nana-EC", "createdAt": "2020-08-24T01:13:49Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -420,9 +475,10 @@ private File downloadSignedDataFile(File sigFile, String nodeAccountId) {\n         return null;\n     }\n \n-    protected abstract ApplicationStatusCode getLastValidDownloadedFileKey();\n-\n-    protected abstract ApplicationStatusCode getLastValidDownloadedFileHashKey();\n+    private boolean isFileAfterEndDate(String filename) {", "originalCommit": "aa3f2651bd0bac995b1f99a61f958330280084c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxNTk2OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477415968", "bodyText": "updated as suggested", "author": "xin-hedera", "createdAt": "2020-08-26T16:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI5NTIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxNTU0MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475315541", "bodyText": "Maybe add a log message here. If it returns a couple of times and the parser isn't downloading it'd be good to know why", "author": "Nana-EC", "createdAt": "2020-08-24T02:54:07Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -96,40 +110,56 @@ public Downloader(S3AsyncClient s3Client, ApplicationStatusRepository applicatio\n         this.meterRegistry = meterRegistry;\n         signatureDownloadThreadPool = Executors.newFixedThreadPool(downloaderProperties.getThreads());\n         Runtime.getRuntime().addShutdownHook(new Thread(signatureDownloadThreadPool::shutdown));\n-        commonDownloaderProperties = downloaderProperties.getCommon();\n         mirrorProperties = downloaderProperties.getMirrorProperties();\n+        commonDownloaderProperties = downloaderProperties.getCommon();\n+\n+        lastValidDownloadedFileKey = downloaderProperties.getLastValidDownloadedFileKey();\n+        lastValidDownloadedFileHashKey = downloaderProperties.getLastValidDownloadedFileHashKey();\n+\n+        StreamType streamType = downloaderProperties.getStreamType();\n+        defaultSigFilename = DEFAULT_FILE_BASENAME + streamType.getSuffix() + \".\" + streamType.getSignatureExtension();\n \n         // Metrics\n         signatureVerificationMetric = Counter.builder(\"hedera.mirror.download.signature.verification\")\n                 .description(\"The number of signatures verified from a particular node\")\n-                .tag(\"type\", downloaderProperties.getStreamType().toString());\n+                .tag(\"type\", streamType.toString());\n \n         streamVerificationMetric = Timer.builder(\"hedera.mirror.download.stream.verification\")\n                 .description(\"The duration in seconds it took to verify consensus and hash chain of a stream file\")\n-                .tag(\"type\", downloaderProperties.getStreamType().toString());\n+                .tag(\"type\", streamType.toString());\n \n         downloadLatencyMetric = Timer.builder(\"hedera.mirror.download.latency\")\n                 .description(\"The difference in ms between the consensus time of the last transaction in the file \" +\n                         \"and the time at which the file was downloaded and verified\")\n-                .tag(\"type\", downloaderProperties.getStreamType().toString())\n+                .tag(\"type\", streamType.toString())\n                 .register(meterRegistry);\n \n         streamCloseMetric = Timer.builder(\"hedera.mirror.stream.close.latency\")\n                 .description(\"The difference between the consensus time of the last and first transaction in the \" +\n                         \"stream file\")\n-                .tag(\"type\", downloaderProperties.getStreamType().toString())\n+                .tag(\"type\", streamType.toString())\n                 .register(meterRegistry);\n     }\n \n+\n+    @EventListener(MirrorDateRangePropertiesProcessedEvent.class)\n+    public void onMirrorDateRangePropertiesProcessedEvent() {\n+        mirrorDateRagePropertiesProcessed = true;\n+    }\n+\n     protected void downloadNextBatch() {\n-        try {\n-            if (!downloaderProperties.isEnabled()) {\n-                return;\n-            }\n-            if (ShutdownHelper.isStopping()) {\n-                return;\n-            }\n+        if (!mirrorDateRagePropertiesProcessed) {\n+            return;", "originalCommit": "aa3f2651bd0bac995b1f99a61f958330280084c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwMTEwNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475701106", "bodyText": "in case the configured startDate and endDate causes violation, the InvalidConfigurationException will be logged and the event will never be fired. If there is a log, that message will repeat forever.", "author": "xin-hedera", "createdAt": "2020-08-24T15:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxNTU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxNzE0NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475317144", "bodyText": "q: should this check be done much earlier? Maybe at the beginning of process()?", "author": "Nana-EC", "createdAt": "2020-08-24T03:01:49Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorDateRangePropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import java.util.List;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.config.event.MirrorDateRangePropertiesProcessedEvent;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.exception.InvalidConfigurationException;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class MirrorDateRangePropertiesProcessor {\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+    private final MirrorProperties mirrorProperties;\n+    private final ApplicationStatusRepository applicationStatusRepository;\n+    private final List<DownloaderProperties> downloaderPropertiesList;\n+\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void process() {\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            validateDateRange(downloaderProperties);\n+        }\n+\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            updateApplicationStatus(downloaderProperties);\n+        }\n+\n+        applicationEventPublisher.publishEvent(new MirrorDateRangePropertiesProcessedEvent(this));\n+        log.info(\"Mirror date range properties processed successfully, MirrorDateRangePropertiesProcessedEvent fired\");\n+    }\n+\n+    /**\n+     * Validates the configured (startDate, endDate] range for downloader.\n+     * @param downloaderProperties The properties of the downloader to validate the (startDate, endDate] range for\n+     * @throws InvalidConfigurationException if the constraint effective startDate < endDate is violated\n+     */\n+    private void validateDateRange(DownloaderProperties downloaderProperties) {\n+        Instant effectiveStartDate = getEffectiveStartDate(downloaderProperties);\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (effectiveStartDate != null && endDate != null && !endDate.isAfter(effectiveStartDate)) {\n+            throw new InvalidConfigurationException(String.format(\"Date range constraint violation for %s downloader: \" +\n+                            \"startDate (%s) >= endDate (%s)\", downloaderProperties.getStreamType(),\n+                    effectiveStartDate, endDate));\n+        }\n+    }\n+\n+    /**\n+     * Updates the application status for downloader based on the validated (startDate, endDate] range.\n+     * If effective startDate is not null, the application status is set so the downloader will pull data from files\n+     * after the effective startDate. In addition, verifyHashAfter is set to effective startDate if not set or before\n+     * effective startDate.\n+     * @param downloaderProperties The properties of the downloader to update application status for\n+     */\n+    private void updateApplicationStatus(DownloaderProperties downloaderProperties) {\n+        Instant effectiveStartDate = getEffectiveStartDate(downloaderProperties);\n+        Instant lastFileInstant = getLastValidDownloadedFileInstant(downloaderProperties);\n+        if (effectiveStartDate != null && !effectiveStartDate.equals(lastFileInstant)) {\n+            StreamType streamType = downloaderProperties.getStreamType();\n+            String filename = Utility.getStreamFilenameFromInstant(streamType, effectiveStartDate);\n+            applicationStatusRepository.updateStatusValue(downloaderProperties.getLastValidDownloadedFileKey(), filename);\n+            log.debug(\"Set last valid downloaded file to {} for {} downloader\", filename, streamType);\n+\n+            Instant verifyHashAfter = mirrorProperties.getVerifyHashAfter();\n+            if (verifyHashAfter == null || verifyHashAfter.isBefore(effectiveStartDate)) {\n+                mirrorProperties.setVerifyHashAfter(effectiveStartDate);\n+                log.debug(\"Set verifyHashAfter to {}\", effectiveStartDate);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets the effective startDate for downloader based on startDate in MirrorProperties and last valid downloaded file.\n+     * @param downloaderProperties The downloader's properties\n+     * @return The effective startDate: null if downloader is disabled; if startDate is set, the effective startDate is\n+     * startDate if the database is empty or max(startDate, timestamp of last valid downloaded file); if startDate is\n+     * not set, the effective startDate is now if the database is empty, or the timestamp of last valid downloaded file\n+     */\n+    private Instant getEffectiveStartDate(DownloaderProperties downloaderProperties) {\n+        if (!downloaderProperties.isEnabled()) {", "originalCommit": "9c213b85105d61b4f90c231d845f0a5329b5dffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY5ODIzMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475698230", "bodyText": "I feel the current implementation is better. subtle details are hidden and the top level function looks clean and is easy to read.", "author": "xin-hedera", "createdAt": "2020-08-24T15:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxNzE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0ODQwNA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475748404", "bodyText": "Sounds good", "author": "Nana-EC", "createdAt": "2020-08-24T16:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxNzE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMjYyNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475712627", "bodyText": "mirrorProperties.getEndDate() uses reflection and is slow to put in a tight loop like this. As this change is only used to update a log statement, it's not important and recommend it be reverted. Changing order of counter.incrementAndGet() to be after processRecordItem should be sufficient.", "author": "steven-sheehy", "createdAt": "2020-08-24T15:46:42Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -174,14 +182,20 @@ public void loadRecordFile(StreamFileData streamFileData) {\n         }\n     }\n \n-    private void processRecordItem(RecordItem recordItem) {\n+    private boolean processRecordItem(RecordItem recordItem) {\n         if (log.isTraceEnabled()) {\n             log.trace(\"Transaction = {}, Record = {}\",\n                     Utility.printProtoMessage(recordItem.getTransaction()),\n                     Utility.printProtoMessage(recordItem.getRecord()));\n         } else if (log.isDebugEnabled()) {\n             log.debug(\"Storing transaction with consensus timestamp {}\", recordItem.getConsensusTimestamp());\n         }\n+\n+        Instant endDate = mirrorProperties.getEndDate();", "originalCommit": "9c213b85105d61b4f90c231d845f0a5329b5dffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1OTAyNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475859026", "bodyText": "Sorry, looking again this logic is necessary. But point still stands about slow method. Recommend retrieving it once per file and passing it to processRecordItem.", "author": "steven-sheehy", "createdAt": "2020-08-24T19:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMjYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5Njc2Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475896766", "bodyText": "Thanks for the clarification. I was confused at first when I read the feedback. Also thanks for pointing out the performance issue, will change as suggested.", "author": "xin-hedera", "createdAt": "2020-08-24T21:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMjYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyMzE1MA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475723150", "bodyText": "Seems inefficient to loop over downloaderPropertiesList twice and retrieve effective start date twice. Recommend it be refactored to push validateDateRange into updateApplicationStatus to avoid the duplication.", "author": "steven-sheehy", "createdAt": "2020-08-24T16:02:40Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorDateRangePropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import java.util.List;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.config.event.MirrorDateRangePropertiesProcessedEvent;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.exception.InvalidConfigurationException;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class MirrorDateRangePropertiesProcessor {\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+    private final MirrorProperties mirrorProperties;\n+    private final ApplicationStatusRepository applicationStatusRepository;\n+    private final List<DownloaderProperties> downloaderPropertiesList;\n+\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void process() {\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            validateDateRange(downloaderProperties);\n+        }\n+\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            updateApplicationStatus(downloaderProperties);\n+        }\n+\n+        applicationEventPublisher.publishEvent(new MirrorDateRangePropertiesProcessedEvent(this));\n+        log.info(\"Mirror date range properties processed successfully, MirrorDateRangePropertiesProcessedEvent fired\");\n+    }\n+\n+    /**\n+     * Validates the configured (startDate, endDate] range for downloader.\n+     * @param downloaderProperties The properties of the downloader to validate the (startDate, endDate] range for\n+     * @throws InvalidConfigurationException if the constraint effective startDate < endDate is violated\n+     */\n+    private void validateDateRange(DownloaderProperties downloaderProperties) {\n+        Instant effectiveStartDate = getEffectiveStartDate(downloaderProperties);", "originalCommit": "9c213b85105d61b4f90c231d845f0a5329b5dffb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxOTgwNw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475819807", "bodyText": "getLastValidDownloadedFileInstant actually gets called 4 times per stream type. Since it's a cached method it's maybe not a big deal but still.", "author": "steven-sheehy", "createdAt": "2020-08-24T18:41:35Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorDateRangePropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import java.util.List;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.config.event.MirrorDateRangePropertiesProcessedEvent;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.exception.InvalidConfigurationException;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class MirrorDateRangePropertiesProcessor {\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+    private final MirrorProperties mirrorProperties;\n+    private final ApplicationStatusRepository applicationStatusRepository;\n+    private final List<DownloaderProperties> downloaderPropertiesList;\n+\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void process() {\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            validateDateRange(downloaderProperties);\n+        }\n+\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            updateApplicationStatus(downloaderProperties);\n+        }\n+\n+        applicationEventPublisher.publishEvent(new MirrorDateRangePropertiesProcessedEvent(this));\n+        log.info(\"Mirror date range properties processed successfully, MirrorDateRangePropertiesProcessedEvent fired\");\n+    }\n+\n+    /**\n+     * Validates the configured (startDate, endDate] range for downloader.\n+     * @param downloaderProperties The properties of the downloader to validate the (startDate, endDate] range for\n+     * @throws InvalidConfigurationException if the constraint effective startDate < endDate is violated\n+     */\n+    private void validateDateRange(DownloaderProperties downloaderProperties) {\n+        Instant effectiveStartDate = getEffectiveStartDate(downloaderProperties);\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (effectiveStartDate != null && endDate != null && !endDate.isAfter(effectiveStartDate)) {\n+            throw new InvalidConfigurationException(String.format(\"Date range constraint violation for %s downloader: \" +\n+                            \"startDate (%s) >= endDate (%s)\", downloaderProperties.getStreamType(),\n+                    effectiveStartDate, endDate));\n+        }\n+    }\n+\n+    /**\n+     * Updates the application status for downloader based on the validated (startDate, endDate] range.\n+     * If effective startDate is not null, the application status is set so the downloader will pull data from files\n+     * after the effective startDate. In addition, verifyHashAfter is set to effective startDate if not set or before\n+     * effective startDate.\n+     * @param downloaderProperties The properties of the downloader to update application status for\n+     */\n+    private void updateApplicationStatus(DownloaderProperties downloaderProperties) {\n+        Instant effectiveStartDate = getEffectiveStartDate(downloaderProperties);\n+        Instant lastFileInstant = getLastValidDownloadedFileInstant(downloaderProperties);\n+        if (effectiveStartDate != null && !effectiveStartDate.equals(lastFileInstant)) {\n+            StreamType streamType = downloaderProperties.getStreamType();\n+            String filename = Utility.getStreamFilenameFromInstant(streamType, effectiveStartDate);\n+            applicationStatusRepository.updateStatusValue(downloaderProperties.getLastValidDownloadedFileKey(), filename);\n+            log.debug(\"Set last valid downloaded file to {} for {} downloader\", filename, streamType);\n+\n+            Instant verifyHashAfter = mirrorProperties.getVerifyHashAfter();\n+            if (verifyHashAfter == null || verifyHashAfter.isBefore(effectiveStartDate)) {\n+                mirrorProperties.setVerifyHashAfter(effectiveStartDate);\n+                log.debug(\"Set verifyHashAfter to {}\", effectiveStartDate);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets the effective startDate for downloader based on startDate in MirrorProperties and last valid downloaded file.\n+     * @param downloaderProperties The downloader's properties\n+     * @return The effective startDate: null if downloader is disabled; if startDate is set, the effective startDate is\n+     * startDate if the database is empty or max(startDate, timestamp of last valid downloaded file); if startDate is\n+     * not set, the effective startDate is now if the database is empty, or the timestamp of last valid downloaded file\n+     */\n+    private Instant getEffectiveStartDate(DownloaderProperties downloaderProperties) {\n+        if (!downloaderProperties.isEnabled()) {\n+            return null;\n+        }\n+\n+        Instant startDate = mirrorProperties.getStartDate();\n+        Instant lastFileInstant = getLastValidDownloadedFileInstant(downloaderProperties);", "originalCommit": "9c213b85105d61b4f90c231d845f0a5329b5dffb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyODk5NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475828994", "bodyText": "Again, I don't feel this logic should be here. I also don't like making this class stateful by storing lastSigFilenameToVerify. Recommend removing lastSigFilenameToVerify and pushing this logic into if (isFileAfterEndDate(sigFilename)) check inside verifySigsAndDownloadDataFiles. There you can just directly return from the method after disabling polling if it's after and avoid the multiple break statements. It makes the logic cleaner and is more encapsulated.", "author": "steven-sheehy", "createdAt": "2020-08-24T18:58:33Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -144,6 +174,17 @@ protected void downloadNextBatch() {\n             log.warn(e.getMessage());\n         } catch (Exception e) {\n             log.error(\"Error downloading files\", e);\n+        } finally {\n+            if (!StringUtils.isEmpty(lastSigFilenameToVerify)) {", "originalCommit": "9c213b85105d61b4f90c231d845f0a5329b5dffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMzUwNg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r476733506", "bodyText": "Simplified the logic", "author": "xin-hedera", "createdAt": "2020-08-25T20:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyODk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyOTk5Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475829996", "bodyText": "Can just downloaderProperties.setEnabled(false); here or call a method that does so.", "author": "steven-sheehy", "createdAt": "2020-08-24T19:00:27Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -389,13 +439,23 @@ private void verifySigsAndDownloadDataFiles(Multimap<String, FileStreamSignature\n                 }\n             }\n \n-            if (!valid) {\n-                log.error(\"None of the data files could be verified, signatures: {}\", signatures);\n-            }\n-\n             streamVerificationMetric.tag(\"success\", String.valueOf(valid))\n                     .register(meterRegistry)\n                     .record(Duration.between(startTime, Instant.now()));\n+\n+            if (isEndDateReached) {\n+                // stop processing here since the file is after the configured endDate\n+                lastSigFilenameToVerify = lastValidSigFilename;\n+                break;\n+            } else if (!valid) {\n+                log.error(\"None of the data files could be verified, signatures: {}\", signatures);\n+            }\n+        }\n+\n+        if (!sigFilesMap.isEmpty() && lastSigFilenameToVerify != null && lastSigFilenameToVerify.isEmpty()) {\n+            // when all files in the bucket are after endDate and there is no last downloaded file in db,\n+            // use defaultSigFilename as sentinel to disable the downloader\n+            lastSigFilenameToVerify = defaultSigFilename;", "originalCommit": "9c213b85105d61b4f90c231d845f0a5329b5dffb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzMTEyMg==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475831122", "bodyText": "This still doesn't seem to support transaction level granularity.", "author": "steven-sheehy", "createdAt": "2020-08-24T19:02:36Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -365,16 +408,23 @@ private void verifySigsAndDownloadDataFiles(Multimap<String, FileStreamSignature\n                     if (signedDataFile == null) {\n                         continue;\n                     }\n+\n                     if (verifyDataFile(signedDataFile, signature.getHash())) {", "originalCommit": "9c213b85105d61b4f90c231d845f0a5329b5dffb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2MjQwOA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r475862408", "bodyText": "This should probably still disable the parser poller otherwise the files in valid folder will be repeatedly parsed indefinitely.", "author": "steven-sheehy", "createdAt": "2020-08-24T20:04:23Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -153,8 +160,9 @@ public void loadRecordFile(StreamFileData streamFileData) {\n                     streamFileData.getFilename(), expectedPrevFileHash,\n                     parserProperties.getMirrorProperties().getVerifyHashAfter(),\n                     recordItem -> {\n-                        counter.incrementAndGet();\n-                        processRecordItem(recordItem);\n+                        if (processRecordItem(recordItem)) {", "originalCommit": "9c213b85105d61b4f90c231d845f0a5329b5dffb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a85555b92bad1a1c39f9ad370d76b38144a01641", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a85555b92bad1a1c39f9ad370d76b38144a01641", "message": "Merge branch 'master' into import-latest-property\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-25T14:57:51Z", "type": "commit"}, {"oid": "546e76ab83654af0704df68a5172066231d124f7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/546e76ab83654af0704df68a5172066231d124f7", "message": "make startDate at transaction level\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-25T20:52:27Z", "type": "commit"}, {"oid": "b97cab13ea9f5550f3f7ca415ba175dcda9f5db7", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b97cab13ea9f5550f3f7ca415ba175dcda9f5db7", "message": "Merge branch 'master' into import-latest-property", "committedDate": "2020-08-25T20:53:29Z", "type": "commit"}, {"oid": "3487c0f1f39982e626fdecc72e245e598cec3500", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3487c0f1f39982e626fdecc72e245e598cec3500", "message": "move method to Utility.java and rename variables\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-26T16:02:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNDk2NA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477424964", "bodyText": "nit: Use @Value for immutable classes.", "author": "steven-sheehy", "createdAt": "2020-08-26T16:18:26Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorDateRangePropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.apache.commons.lang3.ObjectUtils.max;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Named;\n+import javax.transaction.Transactional;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.config.event.MirrorDateRangePropertiesProcessedEvent;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.exception.InvalidConfigurationException;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class MirrorDateRangePropertiesProcessor {\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+    private final MirrorProperties mirrorProperties;\n+    private final ApplicationStatusRepository applicationStatusRepository;\n+    private final List<DownloaderProperties> downloaderPropertiesList;\n+\n+    private Map<StreamType, DateRangeFilter> filters = new HashMap<>();\n+\n+    @Transactional\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void process() {\n+        Instant startDate = mirrorProperties.getStartDate();\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (startDate != null && endDate != null && startDate.compareTo(endDate) > 0) {\n+            throw new InvalidConfigurationException(String.format(\"Date range constraint violation: \" +\n+                    \"startDate (%s) > endDate (%s)\", startDate, endDate));\n+        }\n+\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            processDateRange(downloaderProperties);\n+        }\n+\n+        applicationEventPublisher.publishEvent(new MirrorDateRangePropertiesProcessedEvent(this));\n+        log.info(\"Mirror date range properties processed successfully, MirrorDateRangePropertiesProcessedEvent fired\");\n+    }\n+\n+    /**\n+     * Gets the DateRangeFilter for the downloader (record, balance, event).\n+     * @param type - downloader type\n+     * @return the DateRangeFilter\n+     */\n+    public DateRangeFilter getDateRangeFilter(StreamType type) {\n+        return filters.get(type);\n+    }\n+\n+    /**\n+     * Validates the configured [startDate, endDate] range for downloader and updates its application status if needed.\n+     * @param downloaderProperties the properties of the downloader to validate the [startDate, endDate] range for\n+     * @throws InvalidConfigurationException if the constraint effective startDate < endDate is violated\n+     */\n+    private void processDateRange(DownloaderProperties downloaderProperties) {\n+        // validate date range\n+        Instant effectiveStartDate = getEffectiveStartDate(downloaderProperties);\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (effectiveStartDate != null && endDate != null && effectiveStartDate.compareTo(endDate) > 0) {\n+            throw new InvalidConfigurationException(String.format(\"Date range constraint violation for %s downloader: \" +\n+                            \"effective startDate (%s) > endDate (%s)\", downloaderProperties.getStreamType(),\n+                    effectiveStartDate, endDate));\n+        }\n+\n+        // update application status\n+        Instant lastFileInstant = getLastValidDownloadedFileInstant(downloaderProperties);\n+        if (effectiveStartDate != null && !effectiveStartDate.equals(lastFileInstant)) {\n+            StreamType streamType = downloaderProperties.getStreamType();\n+            String filename = Utility.getStreamFilenameFromInstant(streamType, effectiveStartDate);\n+            applicationStatusRepository.updateStatusValue(downloaderProperties.getLastValidDownloadedFileKey(), filename);\n+            log.debug(\"Set last valid downloaded file to {} for {} downloader\", filename, streamType);\n+\n+            Instant verifyHashAfter = mirrorProperties.getVerifyHashAfter();\n+            if (verifyHashAfter == null || verifyHashAfter.isBefore(effectiveStartDate)) {\n+                mirrorProperties.setVerifyHashAfter(effectiveStartDate);\n+                log.debug(\"Set verifyHashAfter to {}\", effectiveStartDate);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets the effective startDate for downloader based on startDate in MirrorProperties, the startDateAdjustment\n+     * and last valid downloaded file. Also sets the effective inclusive start date of the items to accept.\n+     * @param downloaderProperties The downloader's properties\n+     * @return The effective startDate: null if downloader is disabled; if startDate is set, the effective startDate is\n+     * startDate if the database is empty or max(startDate, timestamp of last valid downloaded file); if startDate is\n+     * not set, the effective startDate is now if the database is empty, or the timestamp of last valid downloaded file\n+     */\n+    private Instant getEffectiveStartDate(DownloaderProperties downloaderProperties) {\n+        if (!downloaderProperties.isEnabled()) {\n+            filters.put(downloaderProperties.getStreamType(), DateRangeFilter.empty());\n+            return null;\n+        }\n+\n+        Instant startDate = mirrorProperties.getStartDate();\n+        Instant startUpInstant = MirrorProperties.getStartUpInstant();\n+        Instant endDate = mirrorProperties.getEndDate();\n+        Instant lastFileInstant = getLastValidDownloadedFileInstant(downloaderProperties);\n+        Duration adjustment = downloaderProperties.getStartDateAdjustment();\n+        if (startDate != null) {\n+            if (startDate.isAfter(lastFileInstant) || endDate != null) {\n+                filters.put(downloaderProperties.getStreamType(), new DateRangeFilter(startDate, endDate));\n+            }\n+            return max(startDate.minus(adjustment), lastFileInstant);\n+        } else {\n+            if (lastFileInstant.equals(Instant.EPOCH)) {\n+                filters.put(downloaderProperties.getStreamType(), new DateRangeFilter(startUpInstant, endDate));\n+                return startUpInstant.minus(adjustment);\n+            } else {\n+                if (endDate != null) {\n+                    filters.put(downloaderProperties.getStreamType(), new DateRangeFilter(lastFileInstant, endDate));\n+                }\n+                return lastFileInstant;\n+            }\n+        }\n+    }\n+\n+    private Instant getLastValidDownloadedFileInstant(DownloaderProperties downloaderProperties) {\n+        String filename = applicationStatusRepository.findByStatusCode(downloaderProperties.getLastValidDownloadedFileKey());\n+        return Utility.getInstantFromFilename(filename);\n+    }\n+\n+    @Data", "originalCommit": "3487c0f1f39982e626fdecc72e245e598cec3500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1OTE1OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477559158", "bodyText": "changed as suggested", "author": "xin-hedera", "createdAt": "2020-08-26T20:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNDk2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNzQyMQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477427421", "bodyText": "I'm not a fan of using this helper processor class to store state and this state used by other classes. Logically this should belong in a properties class, but we can get this in and revisit it later.", "author": "steven-sheehy", "createdAt": "2020-08-26T16:22:19Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorDateRangePropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.apache.commons.lang3.ObjectUtils.max;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Named;\n+import javax.transaction.Transactional;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.config.event.MirrorDateRangePropertiesProcessedEvent;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.exception.InvalidConfigurationException;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class MirrorDateRangePropertiesProcessor {\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+    private final MirrorProperties mirrorProperties;\n+    private final ApplicationStatusRepository applicationStatusRepository;\n+    private final List<DownloaderProperties> downloaderPropertiesList;\n+\n+    private Map<StreamType, DateRangeFilter> filters = new HashMap<>();\n+\n+    @Transactional\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void process() {\n+        Instant startDate = mirrorProperties.getStartDate();\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (startDate != null && endDate != null && startDate.compareTo(endDate) > 0) {\n+            throw new InvalidConfigurationException(String.format(\"Date range constraint violation: \" +\n+                    \"startDate (%s) > endDate (%s)\", startDate, endDate));\n+        }\n+\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            processDateRange(downloaderProperties);\n+        }\n+\n+        applicationEventPublisher.publishEvent(new MirrorDateRangePropertiesProcessedEvent(this));\n+        log.info(\"Mirror date range properties processed successfully, MirrorDateRangePropertiesProcessedEvent fired\");\n+    }\n+\n+    /**\n+     * Gets the DateRangeFilter for the downloader (record, balance, event).\n+     * @param type - downloader type\n+     * @return the DateRangeFilter\n+     */\n+    public DateRangeFilter getDateRangeFilter(StreamType type) {", "originalCommit": "3487c0f1f39982e626fdecc72e245e598cec3500", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyODkwNQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477428905", "bodyText": "Would it help cleanup this logic here and in other places if we defaulted startDate=Instant.EPOCH and endDate=Instant.MAX then made the two fields @NotNull validated? It would also make effectiveStartDate never null.", "author": "steven-sheehy", "createdAt": "2020-08-26T16:24:36Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorDateRangePropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.apache.commons.lang3.ObjectUtils.max;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Named;\n+import javax.transaction.Transactional;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.config.event.MirrorDateRangePropertiesProcessedEvent;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.exception.InvalidConfigurationException;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class MirrorDateRangePropertiesProcessor {\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+    private final MirrorProperties mirrorProperties;\n+    private final ApplicationStatusRepository applicationStatusRepository;\n+    private final List<DownloaderProperties> downloaderPropertiesList;\n+\n+    private Map<StreamType, DateRangeFilter> filters = new HashMap<>();\n+\n+    @Transactional\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void process() {\n+        Instant startDate = mirrorProperties.getStartDate();\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (startDate != null && endDate != null && startDate.compareTo(endDate) > 0) {\n+            throw new InvalidConfigurationException(String.format(\"Date range constraint violation: \" +\n+                    \"startDate (%s) > endDate (%s)\", startDate, endDate));\n+        }\n+\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            processDateRange(downloaderProperties);\n+        }\n+\n+        applicationEventPublisher.publishEvent(new MirrorDateRangePropertiesProcessedEvent(this));\n+        log.info(\"Mirror date range properties processed successfully, MirrorDateRangePropertiesProcessedEvent fired\");\n+    }\n+\n+    /**\n+     * Gets the DateRangeFilter for the downloader (record, balance, event).\n+     * @param type - downloader type\n+     * @return the DateRangeFilter\n+     */\n+    public DateRangeFilter getDateRangeFilter(StreamType type) {\n+        return filters.get(type);\n+    }\n+\n+    /**\n+     * Validates the configured [startDate, endDate] range for downloader and updates its application status if needed.\n+     * @param downloaderProperties the properties of the downloader to validate the [startDate, endDate] range for\n+     * @throws InvalidConfigurationException if the constraint effective startDate < endDate is violated\n+     */\n+    private void processDateRange(DownloaderProperties downloaderProperties) {\n+        // validate date range\n+        Instant effectiveStartDate = getEffectiveStartDate(downloaderProperties);\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (effectiveStartDate != null && endDate != null && effectiveStartDate.compareTo(endDate) > 0) {", "originalCommit": "3487c0f1f39982e626fdecc72e245e598cec3500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1OTI1Mw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477459253", "bodyText": "we can't default startDate to Instant.EPOCH because in the design we have a case that it defaults to now. We can default endDate to Instant.MAX and I'll move up the downloader is disabled check to processDateRange so effectiveStartDate returned by getEffectiveStartDate will never be null. I think this will cleanup the logic here.", "author": "xin-hedera", "createdAt": "2020-08-26T17:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyODkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNDk3NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477434975", "bodyText": "I think this log is less important and should be debug. Instead, I think an info log that states that it is only downloading files between x and y should be present.", "author": "steven-sheehy", "createdAt": "2020-08-26T16:34:35Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorDateRangePropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.apache.commons.lang3.ObjectUtils.max;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Named;\n+import javax.transaction.Transactional;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.config.event.MirrorDateRangePropertiesProcessedEvent;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.exception.InvalidConfigurationException;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class MirrorDateRangePropertiesProcessor {\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+    private final MirrorProperties mirrorProperties;\n+    private final ApplicationStatusRepository applicationStatusRepository;\n+    private final List<DownloaderProperties> downloaderPropertiesList;\n+\n+    private Map<StreamType, DateRangeFilter> filters = new HashMap<>();\n+\n+    @Transactional\n+    @Async\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void process() {\n+        Instant startDate = mirrorProperties.getStartDate();\n+        Instant endDate = mirrorProperties.getEndDate();\n+        if (startDate != null && endDate != null && startDate.compareTo(endDate) > 0) {\n+            throw new InvalidConfigurationException(String.format(\"Date range constraint violation: \" +\n+                    \"startDate (%s) > endDate (%s)\", startDate, endDate));\n+        }\n+\n+        for (DownloaderProperties downloaderProperties : downloaderPropertiesList) {\n+            processDateRange(downloaderProperties);\n+        }\n+\n+        applicationEventPublisher.publishEvent(new MirrorDateRangePropertiesProcessedEvent(this));\n+        log.info(\"Mirror date range properties processed successfully, MirrorDateRangePropertiesProcessedEvent fired\");", "originalCommit": "3487c0f1f39982e626fdecc72e245e598cec3500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1OTk3MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477459971", "bodyText": "will make this at debug level and add an info log to each downloader about the effective range and actual transaction level range", "author": "xin-hedera", "createdAt": "2020-08-26T17:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNDk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNjQyMw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477436423", "bodyText": "I don't think transactionality is important here as it's read only and the system doesn't change until this event publishes.", "author": "steven-sheehy", "createdAt": "2020-08-26T16:37:04Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorDateRangePropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.apache.commons.lang3.ObjectUtils.max;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Named;\n+import javax.transaction.Transactional;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.config.event.MirrorDateRangePropertiesProcessedEvent;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.exception.InvalidConfigurationException;\n+import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class MirrorDateRangePropertiesProcessor {\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+    private final MirrorProperties mirrorProperties;\n+    private final ApplicationStatusRepository applicationStatusRepository;\n+    private final List<DownloaderProperties> downloaderPropertiesList;\n+\n+    private Map<StreamType, DateRangeFilter> filters = new HashMap<>();\n+\n+    @Transactional", "originalCommit": "3487c0f1f39982e626fdecc72e245e598cec3500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NDQ5NQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477464495", "bodyText": "application status (last valid downloaded file) is updated for each downloader if needed and effectiveStartDate <= endDate constraint is verified for each downloader separately. in case db error happens or the date range constraint is violated, the db may be left in a state that application status for one downloader is updated. it may not be a big issue but I think enabling transaction here so db rolls back is better.", "author": "xin-hedera", "createdAt": "2020-08-26T17:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNjQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzc1MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477437751", "bodyText": "Pull mirrorProperties.getEndDate() out of loops and into a variable as it is slow. Also, no need to log stream type as Logger itself will show concrete type like RecordFileDownloader", "author": "steven-sheehy", "createdAt": "2020-08-26T16:38:31Z", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -365,16 +388,25 @@ private void verifySigsAndDownloadDataFiles(Multimap<String, FileStreamSignature\n                     if (signedDataFile == null) {\n                         continue;\n                     }\n+\n                     if (verifyDataFile(signedDataFile, signature.getHash())) {\n+                        if (Utility.isStreamFileAfterInstant(sigFilename, mirrorProperties.getEndDate())) {", "originalCommit": "3487c0f1f39982e626fdecc72e245e598cec3500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NDk5MQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/966#discussion_r477464991", "bodyText": "sure", "author": "xin-hedera", "createdAt": "2020-08-26T17:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzc1MQ=="}], "type": "inlineReview"}, {"oid": "2e8a5cb6358ff5679ea3e139b7ff9efcfe817266", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2e8a5cb6358ff5679ea3e139b7ff9efcfe817266", "message": "address review feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>", "committedDate": "2020-08-26T19:59:10Z", "type": "commit"}]}