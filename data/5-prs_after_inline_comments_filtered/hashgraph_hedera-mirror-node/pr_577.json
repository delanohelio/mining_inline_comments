{"pr_number": 577, "pr_title": "Use RecordItem in tests", "pr_createdAt": "2020-03-01T22:36:20Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/577", "timeline": [{"oid": "ee93f197f1eeb3d9bcca0173cf3cc4ecb109b4f6", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ee93f197f1eeb3d9bcca0173cf3cc4ecb109b4f6", "message": "Use RecordItem in tests\n\nRecordFileLogger tests are written in a very non-modular way.\nChanging storeRecord(..) fans out to changes in 50+ places in tests.\nThis PR is not changing any prod code (to make review easier), it is\nrefactoring part of these tests so that the PR changing prod-code looks sane.\n\nBonus: Since Transfer list is part of TransactionRecord proto, updated\nassertRecord() to directly call assertRecordTransfer().\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-03-01T22:35:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMDI3OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/577#discussion_r386510279", "bodyText": "I presume you removed the amount comparison because by definition you used the amount in cryptoTransferRepository.findByConsensusTimestampAndEntityNumAndAmount() to find the CryptoTransfer?", "author": "Nana-EC", "createdAt": "2020-03-02T16:41:41Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/AbstractRecordFileLoggerTest.java", "diffHunk": "@@ -132,44 +130,48 @@ protected final void assertContract(ContractID contractId, com.hedera.mirror.imp\n                 .isEqualTo(entityTypeRepository.findByName(\"contract\").get().getId());\n     }\n \n-    protected final void assertRecordTransfers(TransactionRecord record) {\n-        TransferList transferList = record.getTransferList();\n-        for (AccountAmount accountAmount : transferList.getAccountAmountsList()) {\n-            AccountID xferAccountId = accountAmount.getAccountID();\n-            Optional<com.hedera.mirror.importer.domain.Entities> accountId = entityRepository\n-                    .findByPrimaryKey(xferAccountId.getShardNum(), xferAccountId.getRealmNum(), xferAccountId\n-                            .getAccountNum());\n-\n-            var accountNum = accountId.get().getEntityNum();\n-            var cryptoTransfer = cryptoTransferRepository.findByConsensusTimestampAndEntityNumAndAmount(\n-                    Utility.timeStampInNanos(record.getConsensusTimestamp()),\n-                    accountNum, accountAmount.getAmount()).get();\n-            Assertions.assertEquals(accountAmount.getAmount(), cryptoTransfer.getAmount());\n-            Assertions.assertEquals(accountAmount.getAccountID().getRealmNum(), cryptoTransfer.getRealmNum());\n+    protected void parseRecordItemAndCommit(RecordItem recordItem) throws Exception {\n+        RecordFileLogger.storeRecord(recordItem.getTransaction(), recordItem.getRecord());\n+        RecordFileLogger.completeFile(\"\", \"\");\n+    }\n+\n+    protected void assertRecordTransfers(TransactionRecord record) {\n+        long consensusTimestamp = Utility.timeStampInNanos(record.getConsensusTimestamp());\n+        if (parserProperties.isPersistCryptoTransferAmounts()) {\n+            TransferList transferList = record.getTransferList();\n+            for (AccountAmount accountAmount : transferList.getAccountAmountsList()) {\n+                AccountID account = accountAmount.getAccountID();\n+                var cryptoTransfer = cryptoTransferRepository.findByConsensusTimestampAndEntityNumAndAmount(\n+                        consensusTimestamp, account.getAccountNum(), accountAmount.getAmount()).get();\n+                assertEquals(account.getRealmNum(), cryptoTransfer.getRealmNum());", "originalCommit": "ee93f197f1eeb3d9bcca0173cf3cc4ecb109b4f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}