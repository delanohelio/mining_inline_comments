{"pr_number": 816, "pr_title": "Improve Record Parser tests", "pr_createdAt": "2020-06-08T19:32:43Z", "pr_url": "https://github.com/hashgraph/hedera-mirror-node/pull/816", "timeline": [{"oid": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a48e084afe9c95676ef0a5e7c69ecf69fbc11645", "message": "Improve Record Parser tests\n\nThese tests have been really painful to modify in the past and continue to be hinderance in major record parser changes.\nIf we had time to refactor them before, that would have also made previous refactors easier. Latest, they were causing\npain when I was trying out 1 column vs 2 columns approaches for entities. Took some extra time out on the weekend to fix these.\n\n- Change touches only test files\n- 99% code is just refactoring.\n- 1% non-refactor: For sharing TransactionRecord builder code in AbstractEntityRecordItemListenerTest, I had to fix the\n  logic around transfer list.\n  - Clearly defined PAYER account. Shared code adds only the fee transfers.\n  - Change in expected entity count in many places is due to this fix.\n- Removed EntityRecordItemListenerCryptoTest#verifyRepoCryptoTransferList() since it was duplicating the check already done by assertRecord().\n  assertRecord() already verifies that all transfers in TransactionRecord are present in the table. In fact, verifyRepoCryptoTransferList()\n  works incorrect for the case when transfer list contains two transfers for same entity.\n- Enabled the 2 disabled tests. I couldn't understand why they were failing, let's reenable and see.\n- Removed unnecessary variable assignments (there were too many in crypto tests)\n\nCouldn't get to everything, there are just so many. Will need another iteration in future.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-08T19:34:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NDI5OQ==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436954299", "bodyText": "shared common Transaction and TransactionRecord builder code here.", "author": "apeksharma", "createdAt": "2020-06-08T19:36:54Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "diffHunk": "@@ -219,22 +225,52 @@ protected void assertTransaction(TransactionBody transactionBody,\n         );\n     }\n \n-    protected static Builder defaultTransactionBodyBuilder(String memo) {\n-\n-        long validDuration = 120;\n-        AccountID payerAccountId = AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(2).build();\n-        long txFee = 100L;\n-        AccountID nodeAccount = AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(3).build();\n-\n+    private static Builder defaultTransactionBodyBuilder() {\n         TransactionBody.Builder body = TransactionBody.newBuilder();\n-        body.setTransactionFee(txFee);\n-        body.setMemo(memo);\n-        body.setNodeAccountID(nodeAccount);\n-        body.setTransactionID(Utility.getTransactionId(payerAccountId));\n-        body.setTransactionValidDuration(Duration.newBuilder().setSeconds(validDuration).build());\n+        body.setTransactionFee(100L);\n+        body.setMemo(\"transaction memo\");\n+        body.setNodeAccountID(AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(3).build());\n+        body.setTransactionID(Utility.getTransactionId(PAYER));\n+        body.setTransactionValidDuration(Duration.newBuilder().setSeconds(120).build());\n         return body;\n     }\n \n+    protected com.hederahashgraph.api.proto.java.Transaction buildTransaction(Consumer<Builder> customBuilder) {", "originalCommit": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NDU5OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436954598", "bodyText": "convenience functions.", "author": "apeksharma", "createdAt": "2020-06-08T19:37:23Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "diffHunk": "@@ -251,4 +287,22 @@ public Long createIdForAccountNum(Long accountNum) {\n         EntityId entityId = new EntityId(null, 0L, 0L, accountNum, EntityTypeEnum.ACCOUNT.getId());\n         return entityRepository.save(entityId.toEntity()).getId();\n     }\n+\n+    protected com.hedera.mirror.importer.domain.Transaction getDbTransaction(Timestamp consensusTimestamp) {", "originalCommit": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NTAyMA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436955020", "bodyText": "common shareable defaults.", "author": "apeksharma", "createdAt": "2020-06-08T19:38:13Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "diffHunk": "@@ -64,6 +67,10 @@\n import com.hedera.mirror.importer.util.Utility;\n \n public class AbstractEntityRecordItemListenerTest extends IntegrationTest {\n+    protected static final String KEY = \"0a2212200aa8e21064c61eab86e2a9c164565b4e7a9a4146106e0a6cd03a8c395a110fff\";", "originalCommit": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1OTg1Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436959856", "bodyText": "entity count change is because:\nentities before:\n\n98, 3, 2002 from transfer list\n2 from defaultTransactionBodyBuilder#setTransactionID\nproxy account and contract account\nThe flaw here is that there is no transfer list denoting fee transfer from payer to node & treasury.\n\nentities now:\n\n98, 2002, 3 from transfer list. 2002 is also the payer now.\nproxy account and contract account\n\nSimilar case in other test classes too.", "author": "apeksharma", "createdAt": "2020-06-08T19:48:01Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerContractTest.java", "diffHunk": "@@ -73,67 +65,29 @@ void before() throws Exception {\n \n     @Test\n     void contractCreate() throws Exception {\n-\n         Transaction transaction = contractCreateTransaction();\n         TransactionBody transactionBody = TransactionBody.parseFrom(transaction.getBodyBytes());\n         ContractCreateTransactionBody contractCreateTransactionBody = transactionBody.getContractCreateInstance();\n         TransactionRecord record = createOrUpdateRecord(transactionBody);\n \n         parseRecordItemAndCommit(new RecordItem(transaction, record));\n \n-        com.hedera.mirror.importer.domain.Transaction dbTransaction = transactionRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-        com.hedera.mirror.importer.domain.Entities dbContractEntity = entityRepository\n-                .findById(dbTransaction.getEntityId()).get();\n-        com.hedera.mirror.importer.domain.Entities dbProxyAccountId = entityRepository\n-                .findById(dbContractEntity.getProxyAccountId()).get();\n-        ContractResult dbContractResults = contractResultRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-\n         assertAll(\n-                // row counts\n                 () -> assertEquals(1, transactionRepository.count())\n-                , () -> assertEquals(6, entityRepository.count())", "originalCommit": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MDc3Ng==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436960776", "bodyText": "Would try to move isDeleted check to assertContractEntity() in future. It's better there.\nSame in other test classes.", "author": "apeksharma", "createdAt": "2020-06-08T19:49:56Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerContractTest.java", "diffHunk": "@@ -701,278 +408,190 @@ void contractCallFailedWithoutResult() throws Exception {\n \n         parseRecordItemAndCommit(new RecordItem(transaction, record));\n \n-        com.hedera.mirror.importer.domain.Transaction dbTransaction = transactionRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-        com.hedera.mirror.importer.domain.Entities dbContractEntity = entityRepository\n-                .findById(dbTransaction.getEntityId()).get();\n-\n         assertAll(\n                 () -> assertEquals(1, transactionRepository.count()),\n-                () -> assertEquals(5, entityRepository.count()),\n+                () -> assertEquals(4, entityRepository.count()),\n                 () -> assertEquals(0, contractResultRepository.count()),\n                 () -> assertEquals(3, cryptoTransferRepository.count()),\n                 () -> assertEquals(0, liveHashRepository.count()),\n                 () -> assertEquals(0, fileDataRepository.count()),\n-                () -> assertTransaction(transactionBody, dbTransaction),\n-                () -> assertRecord(record),\n-                () -> assertContract(record.getReceipt().getContractID(), dbContractEntity),\n-                () -> assertFalse(dbContractEntity.isDeleted())\n+                () -> assertContractTransaction(transactionBody, record, false)\n         );\n     }\n \n     @Test\n-    @Disabled\n     void contractCallDoNotPersist() throws Exception {\n         entityProperties.getPersist().setContracts(false);\n-\n-        // now call\n         Transaction transaction = contractCallTransaction();\n         TransactionBody transactionBody = TransactionBody.parseFrom(transaction.getBodyBytes());\n         TransactionRecord record = callRecord(transactionBody);\n \n         parseRecordItemAndCommit(new RecordItem(transaction, record));\n \n-        com.hedera.mirror.importer.domain.Transaction dbTransaction = transactionRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-        Entities dbContractEntity = entityRepository.findById(dbTransaction.getEntityId()).get();\n-\n         assertAll(\n-                // row counts\n                 () -> assertEquals(1, transactionRepository.count())\n-                , () -> assertEquals(5, entityRepository.count())\n+                , () -> assertEquals(4, entityRepository.count())\n                 , () -> assertEquals(0, contractResultRepository.count())\n                 , () -> assertEquals(3, cryptoTransferRepository.count())\n                 , () -> assertEquals(0, liveHashRepository.count())\n                 , () -> assertEquals(0, fileDataRepository.count())\n-\n-                // transaction\n-                , () -> assertTransaction(transactionBody, dbTransaction)\n-\n-                // record inputs\n-                , () -> assertRecord(record)\n-\n-                // receipt\n-                , () -> assertContract(record.getReceipt().getContractID(), dbContractEntity)\n-\n-                // Additional entity checks\n-                , () -> assertFalse(dbContractEntity.isDeleted())\n+                , () -> assertContractTransaction(transactionBody, record, false)\n         );\n     }\n \n-    private TransactionRecord createOrUpdateRecord(TransactionBody transactionBody) {\n-        return createOrUpdateRecord(transactionBody, contractId, ResponseCodeEnum.SUCCESS);\n+    private void assertContractTransaction(TransactionBody transactionBody, TransactionRecord record, boolean deleted) {\n+        Entities actualContract = getTransactionEntity(record.getConsensusTimestamp());\n+        assertAll(\n+                () -> assertTransactionAndRecord(transactionBody, record),\n+                () -> assertContract(record.getReceipt().getContractID(), actualContract),\n+                () -> assertEquals(deleted, actualContract.isDeleted()));", "originalCommit": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTg0OA==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r437535848", "bodyText": "This is incorrect and doesn't even match the comment. In case of unsuccessful transaction the payer account transfer should not be present as it is not a fee transfer. You're missing the logic that was in EntityRecordItemListenerCryptoTest.transactionRecord():\n  if (responseCode == ResponseCodeEnum.SUCCESS_VALUE || transferAccounts[i] < 1000) {\n...\n  }", "author": "steven-sheehy", "createdAt": "2020-06-09T15:48:22Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "diffHunk": "@@ -219,22 +225,52 @@ protected void assertTransaction(TransactionBody transactionBody,\n         );\n     }\n \n-    protected static Builder defaultTransactionBodyBuilder(String memo) {\n-\n-        long validDuration = 120;\n-        AccountID payerAccountId = AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(2).build();\n-        long txFee = 100L;\n-        AccountID nodeAccount = AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(3).build();\n-\n+    private static Builder defaultTransactionBodyBuilder() {\n         TransactionBody.Builder body = TransactionBody.newBuilder();\n-        body.setTransactionFee(txFee);\n-        body.setMemo(memo);\n-        body.setNodeAccountID(nodeAccount);\n-        body.setTransactionID(Utility.getTransactionId(payerAccountId));\n-        body.setTransactionValidDuration(Duration.newBuilder().setSeconds(validDuration).build());\n+        body.setTransactionFee(100L);\n+        body.setMemo(\"transaction memo\");\n+        body.setNodeAccountID(AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(3).build());\n+        body.setTransactionID(Utility.getTransactionId(PAYER));\n+        body.setTransactionValidDuration(Duration.newBuilder().setSeconds(120).build());\n         return body;\n     }\n \n+    protected com.hederahashgraph.api.proto.java.Transaction buildTransaction(Consumer<Builder> customBuilder) {\n+        TransactionBody.Builder bodyBuilder = defaultTransactionBodyBuilder();\n+        customBuilder.accept(bodyBuilder);\n+\n+        return com.hederahashgraph.api.proto.java.Transaction.newBuilder()\n+                .setBodyBytes(bodyBuilder.build().toByteString())\n+                .setSigMap(getSigMap())\n+                .build();\n+    }\n+\n+    protected TransactionRecord buildTransactionRecord(\n+            Consumer<TransactionRecord.Builder> customBuilder, TransactionBody transactionBody, int status) {\n+        TransactionRecord.Builder recordBuilder = TransactionRecord.newBuilder();\n+        recordBuilder.setConsensusTimestamp(Utility.instantToTimestamp(Instant.now()));\n+        recordBuilder.setMemoBytes(ByteString.copyFromUtf8(transactionBody.getMemo()));\n+        recordBuilder.setTransactionFee(transactionBody.getTransactionFee());\n+        recordBuilder.setTransactionHash(ByteString.copyFromUtf8(\"TransactionHash\"));\n+        recordBuilder.setTransactionID(transactionBody.getTransactionID());\n+        recordBuilder.getReceiptBuilder().setStatusValue(status);\n+\n+        // Give from payer to treasury and node\n+        long[] transferAccounts = {PAYER.getAccountNum(), 98, 3};\n+        long[] transferAmounts = {-2000, 1000, 1000};\n+        TransferList.Builder transferList = recordBuilder.getTransferListBuilder();\n+        for (int i = 0; i < transferAccounts.length; i++) {\n+            // Irrespective of transaction success, node and network fees are present.", "originalCommit": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNjE1Nw==", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r437536157", "bodyText": "Should be 2 as it can only contain the node and network fee. See comment above", "author": "steven-sheehy", "createdAt": "2020-06-09T15:48:50Z", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerCryptoTest.java", "diffHunk": "@@ -896,20 +571,15 @@ void cryptoTransferFailedTransaction() throws Exception {\n \n         parseRecordItemAndCommit(new RecordItem(transaction, record));\n \n-        com.hedera.mirror.importer.domain.Transaction dbTransaction = transactionRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-\n         assertAll(\n                 () -> assertEquals(1, transactionRepository.count()),\n                 () -> assertEquals(3, entityRepository.count(), \"Payer, node and treasury\"),\n-                () -> assertEquals(2, cryptoTransferRepository.count(), \"Node and network fee\"),\n+                () -> assertEquals(3, cryptoTransferRepository.count(), \"Node and network fee\"),", "originalCommit": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0700f18fcd65a774df378287d62fe7f16b52a54c", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0700f18fcd65a774df378287d62fe7f16b52a54c", "message": "Improve Record Parser tests\n\nThese tests have been really painful to modify in the past and continue to be hinderance in major record parser changes.\nIf we had time to refactor them before, that would have also made previous refactors easier. Latest, they were causing\npain when I was trying out 1 column vs 2 columns approaches for entities. Took some extra time out on the weekend to fix these.\n\n- Change touches only test files\n- 99% code is just refactoring.\n- 1% non-refactor: For sharing TransactionRecord builder code in AbstractEntityRecordItemListenerTest, I had to fix the\n  logic around transfer list.\n  - Clearly defined PAYER account. Shared code adds only the fee transfers.\n  - Change in expected entity count in many places is due to this fix.\n- Removed EntityRecordItemListenerCryptoTest#verifyRepoCryptoTransferList() since it was duplicating the check already done by assertRecord().\n  assertRecord() already verifies that all transfers in TransactionRecord are present in the table. In fact, verifyRepoCryptoTransferList()\n  works incorrect for the case when transfer list contains two transfers for same entity.\n- Enabled the 2 disabled tests. I couldn't understand why they were failing, let's reenable and see.\n- Removed unnecessary variable assignments (there were too many in crypto tests)\n\nCouldn't get to everything, there are just so many. Will need another iteration in future.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T19:21:44Z", "type": "commit"}, {"oid": "5ebf23d0cd41deb24ad7f639500fa2db26245191", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5ebf23d0cd41deb24ad7f639500fa2db26245191", "message": "improve crypto transfer test\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T19:33:19Z", "type": "forcePushed"}, {"oid": "132863a14a72a525409293fd64c9f39877403188", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/132863a14a72a525409293fd64c9f39877403188", "message": "improve crypto transfer test\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T19:37:21Z", "type": "commit"}, {"oid": "132863a14a72a525409293fd64c9f39877403188", "url": "https://github.com/hashgraph/hedera-mirror-node/commit/132863a14a72a525409293fd64c9f39877403188", "message": "improve crypto transfer test\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>", "committedDate": "2020-06-09T19:37:21Z", "type": "forcePushed"}]}