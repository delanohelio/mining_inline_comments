{"pr_number": 679, "pr_title": "add abi codec module", "pr_createdAt": "2020-07-20T01:51:32Z", "pr_url": "https://github.com/FISCO-BCOS/web3sdk/pull/679", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988934", "bodyText": "[PMD Java] The class 'ABICodecJsonWrapper' has a total cyclomatic complexity of 80 (highest 35). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:26Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988936", "bodyText": "[PMD Java] Found non-transient, non-static member. Please mark as transient or provide accessors. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nBeanMembersShouldSerialize\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_errorprone.html#beanmembersshouldserialize\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:27Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988937", "bodyText": "[PMD Java] Private field 'objectMapper' could be made final; it is only initialized in the declaration or constructor. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nImmutableField\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#immutablefield\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:27Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988938", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:27Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988939", "bodyText": "[PMD Java] The method 'encodeNode(String, ABIObject, JsonNode)' has a cyclomatic complexity of 35. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:27Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988942", "bodyText": "[PMD Java] Avoid really long methods. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveMethodLength\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#excessivemethodlength\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:27Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988943", "bodyText": "[PMD Java] The method 'encodeNode(String, ABIObject, JsonNode)' has a NCSS line count of 81. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nNcssCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#ncsscount\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:28Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988944", "bodyText": "[PMD Java] A high ratio of statements to labels in a switch statement.  Consider refactoring. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchDensity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#switchdensity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:28Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988947", "bodyText": "[PMD Java] Switch statements should have a default label (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchStmtsShouldHaveDefault\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:28Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988948", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:28Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0OQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988949", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:28Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988951", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:28Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988953", "bodyText": "[PMD Java] Switch statements should have a default label (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchStmtsShouldHaveDefault\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:29Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988955", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:29Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988956", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:29Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1OQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988959", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:29Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988960", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:29Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988962", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:29Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988964", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:30Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988965", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:30Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988966", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:30Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988967", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:30Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988968", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:30Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988970", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:30Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988971", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:31Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988972", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:31Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988974", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:31Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988976", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:31Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988977", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:31Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),\n+                                            node.asText());\n+                                }\n+                                break;\n+                            }\n+                        case BYTES:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3OQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988979", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T01:52:32Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),\n+                                            node.asText());\n+                                }\n+                                break;\n+                            }\n+                        case BYTES:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "197b2181ec58dfb73cc3878531808ab1a38d9606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a6684faea0c59a6504afa5d92ddec32bcb00e646", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/a6684faea0c59a6504afa5d92ddec32bcb00e646", "message": "add abi codec module", "committedDate": "2020-07-20T01:52:43Z", "type": "forcePushed"}, {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/6c0c0bc7d04bedac383b4082a00050831ddda07b", "message": "add abi codec module", "committedDate": "2020-07-20T02:35:50Z", "type": "commit"}, {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/6c0c0bc7d04bedac383b4082a00050831ddda07b", "message": "add abi codec module", "committedDate": "2020-07-20T02:35:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998213", "bodyText": "[PMD Java] The class 'ABICodecJsonWrapper' has a total cyclomatic complexity of 80 (highest 35). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:48Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998214", "bodyText": "[PMD Java] Found non-transient, non-static member. Please mark as transient or provide accessors. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nBeanMembersShouldSerialize\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_errorprone.html#beanmembersshouldserialize\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:48Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxNQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998215", "bodyText": "[PMD Java] Private field 'objectMapper' could be made final; it is only initialized in the declaration or constructor. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nImmutableField\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#immutablefield\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:48Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998216", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:48Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998217", "bodyText": "[PMD Java] The method 'encodeNode(String, ABIObject, JsonNode)' has a cyclomatic complexity of 35. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:48Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998219", "bodyText": "[PMD Java] Avoid really long methods. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveMethodLength\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#excessivemethodlength\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:49Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyMQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998221", "bodyText": "[PMD Java] The method 'encodeNode(String, ABIObject, JsonNode)' has a NCSS line count of 81. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nNcssCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#ncsscount\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:49Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998222", "bodyText": "[PMD Java] A high ratio of statements to labels in a switch statement.  Consider refactoring. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchDensity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#switchdensity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:49Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998223", "bodyText": "[PMD Java] Switch statements should have a default label (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchStmtsShouldHaveDefault\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:49Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998224", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:49Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyNQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998225", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:50Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998226", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:50Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998227", "bodyText": "[PMD Java] Switch statements should have a default label (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchStmtsShouldHaveDefault\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:50Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998228", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:50Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzMA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998230", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:50Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998232", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:51Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998233", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:51Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998236", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:51Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998237", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:51Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998239", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:51Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998240", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:51Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998241", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:52Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998243", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:52Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998246", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:52Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998247", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:52Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998250", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:52Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998253", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:53Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998254", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:53Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998255", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:53Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),\n+                                            node.asText());\n+                                }\n+                                break;\n+                            }\n+                        case BYTES:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998256", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-07-20T02:36:53Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),\n+                                            node.asText());\n+                                }\n+                                break;\n+                            }\n+                        case BYTES:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "originalCommit": "6c0c0bc7d04bedac383b4082a00050831ddda07b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}