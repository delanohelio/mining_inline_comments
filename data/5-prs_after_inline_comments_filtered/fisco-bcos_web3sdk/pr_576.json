{"pr_number": 576, "pr_title": "add ChainGovernanceService", "pr_createdAt": "2020-04-25T15:29:06Z", "pr_url": "https://github.com/FISCO-BCOS/web3sdk/pull/576", "timeline": [{"oid": "585336636ece1453734911671bda3242799fd20e", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/585336636ece1453734911671bda3242799fd20e", "message": "Remove useless code", "committedDate": "2020-04-25T15:16:35Z", "type": "commit"}, {"oid": "559dfa0048bc28925e0d8d64f5ea56e13ce0ec9c", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/559dfa0048bc28925e0d8d64f5ea56e13ce0ec9c", "message": "add ChainGovernanceService", "committedDate": "2020-04-25T15:54:46Z", "type": "forcePushed"}, {"oid": "811541151510b785ff48e7e6f57938e3538dc51b", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/811541151510b785ff48e7e6f57938e3538dc51b", "message": "add ChainGovernanceService", "committedDate": "2020-04-26T08:00:31Z", "type": "forcePushed"}, {"oid": "f2d1755799310bbc36003adca01290d43121af7d", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/f2d1755799310bbc36003adca01290d43121af7d", "message": "add ChainGovernanceService", "committedDate": "2020-04-26T08:50:57Z", "type": "forcePushed"}, {"oid": "da818383a9c47229058caebab097ef829ec9f367", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/da818383a9c47229058caebab097ef829ec9f367", "message": "add ChainGovernanceService", "committedDate": "2020-04-26T12:15:57Z", "type": "forcePushed"}, {"oid": "e139b312c57ab346ae1e0013e735ac6c64cf912f", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/e139b312c57ab346ae1e0013e735ac6c64cf912f", "message": "add ChainGovernanceService", "committedDate": "2020-04-26T12:21:03Z", "type": "forcePushed"}, {"oid": "9b6da1557b5f6652ffdcd563665e4c11e0ffe94b", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/9b6da1557b5f6652ffdcd563665e4c11e0ffe94b", "message": "add ChainGovernanceService", "committedDate": "2020-04-26T12:33:24Z", "type": "forcePushed"}, {"oid": "da499d25e573fa7dee66e73098bcbbb8e9c09c51", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/da499d25e573fa7dee66e73098bcbbb8e9c09c51", "message": "add ChainGovernanceService", "committedDate": "2020-04-27T09:05:15Z", "type": "forcePushed"}, {"oid": "4b07a3497266e1bd4470dda8862aa6162c1336e9", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/4b07a3497266e1bd4470dda8862aa6162c1336e9", "message": "remove unused params for call/getCode rpc interface", "committedDate": "2020-04-27T12:00:45Z", "type": "forcePushed"}, {"oid": "8f96fa8afd8cf3bff65d0832bdd10259e138c995", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/8f96fa8afd8cf3bff65d0832bdd10259e138c995", "message": "add ChainGovernanceService", "committedDate": "2020-04-27T12:06:37Z", "type": "commit"}, {"oid": "1f2a115966f895bc2ed2f6289be96f6f480fec87", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/1f2a115966f895bc2ed2f6289be96f6f480fec87", "message": "remove unused params for call/getCode rpc interface", "committedDate": "2020-04-27T12:06:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NjQ4MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/576#discussion_r415756481", "bodyText": "[PMD] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-04-27T12:07:59Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.fisco.bcos.web3j.precompile.permission;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.math.BigInteger;\n+import java.util.List;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.tuples.generated.Tuple2;\n+import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n+import org.fisco.bcos.web3j.tx.gas.StaticGasProvider;\n+\n+public class ChainGovernanceService {\n+    private static BigInteger gasPrice = new BigInteger(\"30000000000\");\n+    private static BigInteger gasLimit = new BigInteger(\"30000000000\");\n+\n+    private static final String chainGovernanceAddress =\n+            \"0x0000000000000000000000000000000000001008\";\n+\n+    private ChainGovernance chainGovernance;\n+    private Web3j web3j;\n+\n+    public static String getChainGovernanceAddress() {\n+        return chainGovernanceAddress;\n+    }\n+\n+    public ChainGovernance getChainGovernance() {\n+        return chainGovernance;\n+    }\n+\n+    public void setChainGovernance(ChainGovernance chainGovernance) {\n+        this.chainGovernance = chainGovernance;\n+    }\n+\n+    public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n+        ContractGasProvider contractGasProvider = new StaticGasProvider(gasPrice, gasLimit);\n+        chainGovernance =\n+                ChainGovernance.load(\n+                        chainGovernanceAddress, web3j, credentials, contractGasProvider);\n+        this.web3j = web3j;\n+    }\n+\n+    public List<PermissionInfo> listOperators() throws Exception {\n+        String operatorsInfo = chainGovernance.listOperators().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                operatorsInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance\n+                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n+                        .send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public BigInteger queryThreshold() throws Exception {\n+        return chainGovernance.queryThreshold().send();\n+    }\n+\n+    public Tuple2<Boolean, BigInteger> queryCommitteeMemberWeight(String account) throws Exception {\n+        return chainGovernance.queryCommitteeMemberWeight(account).send();\n+    }\n+\n+    public String grantCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.grantCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public List<PermissionInfo> listCommitteeMembers() throws Exception {\n+        String committeeMembersInfo = chainGovernance.listCommitteeMembers().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                committeeMembersInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateThreshold(int threshold) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.revokeCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String grantOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String freezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String unfreezeAccount(String account) throws Exception {", "originalCommit": "1f2a115966f895bc2ed2f6289be96f6f480fec87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NjQ5Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/576#discussion_r415756492", "bodyText": "[PMD] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-04-27T12:08:00Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.fisco.bcos.web3j.precompile.permission;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.math.BigInteger;\n+import java.util.List;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.tuples.generated.Tuple2;\n+import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n+import org.fisco.bcos.web3j.tx.gas.StaticGasProvider;\n+\n+public class ChainGovernanceService {\n+    private static BigInteger gasPrice = new BigInteger(\"30000000000\");\n+    private static BigInteger gasLimit = new BigInteger(\"30000000000\");\n+\n+    private static final String chainGovernanceAddress =\n+            \"0x0000000000000000000000000000000000001008\";\n+\n+    private ChainGovernance chainGovernance;\n+    private Web3j web3j;\n+\n+    public static String getChainGovernanceAddress() {\n+        return chainGovernanceAddress;\n+    }\n+\n+    public ChainGovernance getChainGovernance() {\n+        return chainGovernance;\n+    }\n+\n+    public void setChainGovernance(ChainGovernance chainGovernance) {\n+        this.chainGovernance = chainGovernance;\n+    }\n+\n+    public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n+        ContractGasProvider contractGasProvider = new StaticGasProvider(gasPrice, gasLimit);\n+        chainGovernance =\n+                ChainGovernance.load(\n+                        chainGovernanceAddress, web3j, credentials, contractGasProvider);\n+        this.web3j = web3j;\n+    }\n+\n+    public List<PermissionInfo> listOperators() throws Exception {\n+        String operatorsInfo = chainGovernance.listOperators().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                operatorsInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance\n+                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n+                        .send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public BigInteger queryThreshold() throws Exception {\n+        return chainGovernance.queryThreshold().send();\n+    }\n+\n+    public Tuple2<Boolean, BigInteger> queryCommitteeMemberWeight(String account) throws Exception {\n+        return chainGovernance.queryCommitteeMemberWeight(account).send();\n+    }\n+\n+    public String grantCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.grantCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public List<PermissionInfo> listCommitteeMembers() throws Exception {\n+        String committeeMembersInfo = chainGovernance.listCommitteeMembers().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                committeeMembersInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateThreshold(int threshold) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.revokeCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String grantOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String freezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String unfreezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.unfreezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String getAccountStatus(String account) throws Exception {\n+        return chainGovernance.getAccountStatus(account).send();", "originalCommit": "1f2a115966f895bc2ed2f6289be96f6f480fec87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NjUwOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/576#discussion_r415756508", "bodyText": "[PMD] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-04-27T12:08:01Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.fisco.bcos.web3j.precompile.permission;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.math.BigInteger;\n+import java.util.List;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.tuples.generated.Tuple2;\n+import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n+import org.fisco.bcos.web3j.tx.gas.StaticGasProvider;\n+\n+public class ChainGovernanceService {\n+    private static BigInteger gasPrice = new BigInteger(\"30000000000\");\n+    private static BigInteger gasLimit = new BigInteger(\"30000000000\");\n+\n+    private static final String chainGovernanceAddress =\n+            \"0x0000000000000000000000000000000000001008\";\n+\n+    private ChainGovernance chainGovernance;\n+    private Web3j web3j;\n+\n+    public static String getChainGovernanceAddress() {\n+        return chainGovernanceAddress;\n+    }\n+\n+    public ChainGovernance getChainGovernance() {\n+        return chainGovernance;\n+    }\n+\n+    public void setChainGovernance(ChainGovernance chainGovernance) {\n+        this.chainGovernance = chainGovernance;\n+    }\n+\n+    public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n+        ContractGasProvider contractGasProvider = new StaticGasProvider(gasPrice, gasLimit);\n+        chainGovernance =\n+                ChainGovernance.load(\n+                        chainGovernanceAddress, web3j, credentials, contractGasProvider);\n+        this.web3j = web3j;\n+    }\n+\n+    public List<PermissionInfo> listOperators() throws Exception {\n+        String operatorsInfo = chainGovernance.listOperators().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                operatorsInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance\n+                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n+                        .send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public BigInteger queryThreshold() throws Exception {\n+        return chainGovernance.queryThreshold().send();\n+    }\n+\n+    public Tuple2<Boolean, BigInteger> queryCommitteeMemberWeight(String account) throws Exception {\n+        return chainGovernance.queryCommitteeMemberWeight(account).send();\n+    }\n+\n+    public String grantCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.grantCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public List<PermissionInfo> listCommitteeMembers() throws Exception {\n+        String committeeMembersInfo = chainGovernance.listCommitteeMembers().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                committeeMembersInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateThreshold(int threshold) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.revokeCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String grantOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String freezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String unfreezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.unfreezeAccount(account).send();", "originalCommit": "1f2a115966f895bc2ed2f6289be96f6f480fec87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NjUxOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/576#discussion_r415756518", "bodyText": "[PMD] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-04-27T12:08:02Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.fisco.bcos.web3j.precompile.permission;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.math.BigInteger;\n+import java.util.List;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.tuples.generated.Tuple2;\n+import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n+import org.fisco.bcos.web3j.tx.gas.StaticGasProvider;\n+\n+public class ChainGovernanceService {\n+    private static BigInteger gasPrice = new BigInteger(\"30000000000\");\n+    private static BigInteger gasLimit = new BigInteger(\"30000000000\");\n+\n+    private static final String chainGovernanceAddress =\n+            \"0x0000000000000000000000000000000000001008\";\n+\n+    private ChainGovernance chainGovernance;\n+    private Web3j web3j;\n+\n+    public static String getChainGovernanceAddress() {\n+        return chainGovernanceAddress;\n+    }\n+\n+    public ChainGovernance getChainGovernance() {\n+        return chainGovernance;\n+    }\n+\n+    public void setChainGovernance(ChainGovernance chainGovernance) {\n+        this.chainGovernance = chainGovernance;\n+    }\n+\n+    public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n+        ContractGasProvider contractGasProvider = new StaticGasProvider(gasPrice, gasLimit);\n+        chainGovernance =\n+                ChainGovernance.load(\n+                        chainGovernanceAddress, web3j, credentials, contractGasProvider);\n+        this.web3j = web3j;\n+    }\n+\n+    public List<PermissionInfo> listOperators() throws Exception {\n+        String operatorsInfo = chainGovernance.listOperators().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                operatorsInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance\n+                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n+                        .send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public BigInteger queryThreshold() throws Exception {\n+        return chainGovernance.queryThreshold().send();\n+    }\n+\n+    public Tuple2<Boolean, BigInteger> queryCommitteeMemberWeight(String account) throws Exception {\n+        return chainGovernance.queryCommitteeMemberWeight(account).send();\n+    }\n+\n+    public String grantCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.grantCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public List<PermissionInfo> listCommitteeMembers() throws Exception {\n+        String committeeMembersInfo = chainGovernance.listCommitteeMembers().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                committeeMembersInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateThreshold(int threshold) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.revokeCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String grantOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String freezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String unfreezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.unfreezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String getAccountStatus(String account) throws Exception {", "originalCommit": "1f2a115966f895bc2ed2f6289be96f6f480fec87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c365e7f2703ddeb73167d67159bd88039efa5e7b", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/c365e7f2703ddeb73167d67159bd88039efa5e7b", "message": "remove unused params for call/getCode rpc interface", "committedDate": "2020-04-27T12:28:25Z", "type": "forcePushed"}, {"oid": "d8f3b6189db2aa9472eae89d8ae1540508174425", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/d8f3b6189db2aa9472eae89d8ae1540508174425", "message": "remove unused params for call/getCode rpc interface", "committedDate": "2020-04-27T12:32:23Z", "type": "forcePushed"}, {"oid": "a8350adb441bd664e190db88c8d8a3368507f2b5", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/a8350adb441bd664e190db88c8d8a3368507f2b5", "message": "remove unused params for call/getCode rpc interface", "committedDate": "2020-04-27T12:59:12Z", "type": "commit"}, {"oid": "a8350adb441bd664e190db88c8d8a3368507f2b5", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/a8350adb441bd664e190db88c8d8a3368507f2b5", "message": "remove unused params for call/getCode rpc interface", "committedDate": "2020-04-27T12:59:12Z", "type": "forcePushed"}]}