{"pr_number": 6293, "pr_title": "Regression tests for CustomStudyDialog JSON output", "pr_createdAt": "2020-05-27T17:17:42Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6293", "timeline": [{"oid": "0d5029d128494d5bdae370de535a1948cbd904d3", "url": "https://github.com/ankidroid/Anki-Android/commit/0d5029d128494d5bdae370de535a1948cbd904d3", "message": "Regression Test: JSONObject\n\nNULL was previously assigned to the null value, which had semantic\ndifferences.", "committedDate": "2020-05-27T17:06:33Z", "type": "commit"}, {"oid": "11a3a47a510695d4171801bf731581b7f15b2417", "url": "https://github.com/ankidroid/Anki-Android/commit/11a3a47a510695d4171801bf731581b7f15b2417", "message": "Add regression test for CUSTOM_STUDY_AHEAD\n\nRegression test for #6289", "committedDate": "2020-05-27T17:20:44Z", "type": "forcePushed"}, {"oid": "746646ef28cc12ef7938768967227abd41b890ed", "url": "https://github.com/ankidroid/Anki-Android/commit/746646ef28cc12ef7938768967227abd41b890ed", "message": "NF: Extract getAnkiActivity\n\nFor use in later unit tests", "committedDate": "2020-05-27T17:22:55Z", "type": "commit"}, {"oid": "6efd5c5f9f4d64ba1b60510a488e00432128cbef", "url": "https://github.com/ankidroid/Anki-Android/commit/6efd5c5f9f4d64ba1b60510a488e00432128cbef", "message": "Add regression test for CUSTOM_STUDY_AHEAD\n\nRegression test for #6289", "committedDate": "2020-05-27T17:24:46Z", "type": "forcePushed"}, {"oid": "5cf82c88fff9ae2a11a0ca164017fba06269e53b", "url": "https://github.com/ankidroid/Anki-Android/commit/5cf82c88fff9ae2a11a0ca164017fba06269e53b", "message": "Add regression test for CUSTOM_STUDY_AHEAD\n\nRegression test for #6289", "committedDate": "2020-05-27T17:27:20Z", "type": "forcePushed"}, {"oid": "9cec7908fcc3eb4fd52d321bef78e68c2d0872cd", "url": "https://github.com/ankidroid/Anki-Android/commit/9cec7908fcc3eb4fd52d321bef78e68c2d0872cd", "message": "Add regression test for CUSTOM_STUDY_AHEAD\n\nRegression test for #6289", "committedDate": "2020-05-27T17:57:54Z", "type": "forcePushed"}, {"oid": "b9f54c0d13d8325ef401789b8ac9ce1a184de63a", "url": "https://github.com/ankidroid/Anki-Android/commit/b9f54c0d13d8325ef401789b8ac9ce1a184de63a", "message": "Add regression test for CUSTOM_STUDY_AHEAD\n\nRegression test for #6289", "committedDate": "2020-05-27T21:59:20Z", "type": "forcePushed"}, {"oid": "b4cff17f7b49897bb4fa83b9552a8fdb9785ae25", "url": "https://github.com/ankidroid/Anki-Android/commit/b4cff17f7b49897bb4fa83b9552a8fdb9785ae25", "message": "Add regression test for CUSTOM_STUDY_AHEAD\n\nRegression test for #6289", "committedDate": "2020-05-30T14:12:29Z", "type": "forcePushed"}, {"oid": "693e9e74e103f95cc5590a2fb96dfb6a8732635a", "url": "https://github.com/ankidroid/Anki-Android/commit/693e9e74e103f95cc5590a2fb96dfb6a8732635a", "message": "Enable MultiDex support\n\nAdding in the fragment testing library will need it.\n\nThis also adds in a custom unit test runner\nas MultiDex support for < Android 21 appears to be\ninsufficient", "committedDate": "2020-05-30T14:23:56Z", "type": "commit"}, {"oid": "0d8436d14c6308adb813a6d792d054576e44873c", "url": "https://github.com/ankidroid/Anki-Android/commit/0d8436d14c6308adb813a6d792d054576e44873c", "message": "Add regression test for CUSTOM_STUDY_AHEAD\n\nRegression test for #6289", "committedDate": "2020-05-30T14:24:27Z", "type": "commit"}, {"oid": "0d8436d14c6308adb813a6d792d054576e44873c", "url": "https://github.com/ankidroid/Anki-Android/commit/0d8436d14c6308adb813a6d792d054576e44873c", "message": "Add regression test for CUSTOM_STUDY_AHEAD\n\nRegression test for #6289", "committedDate": "2020-05-30T14:24:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NTczNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6293#discussion_r432845736", "bodyText": "Issue found: Avoid throwing raw exception types.", "author": "timrae", "createdAt": "2020-05-30T14:27:44Z", "path": "AnkiDroid/src/androidTest/java/androidx/test/internal/runner/MultiDexClassPathScanner.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package androidx.test.internal.runner;\n+\n+import android.content.Context;\n+import android.os.Build;\n+\n+import com.ichi2.libanki.Utils;\n+\n+import org.jf.dexlib2.DexFileFactory;\n+import org.jf.dexlib2.dexbacked.DexBackedDexFile;\n+import org.jf.dexlib2.iface.ClassDef;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.VisibleForTesting;\n+import timber.log.Timber;\n+\n+/**\n+ * This class exists as I could get MultiDex working, but ClassPathScanner uses new DexFile(),\n+ * which only loads the classes from classes.dex in Android < 21. MultiDex.install() fixes the class loader,\n+ * but since we don't return all the class names from the dex, we don't see these as potential test classes to filter.\n+ **/\n+class MultiDexClassPathScanner extends ClassPathScanner {\n+    private final List<String> classPathEntries;\n+    private final Context targetContext;\n+\n+    public MultiDexClassPathScanner(List<String> classPath, Context targetContext) {\n+        super(classPath);\n+        //There's no accessor in the base class.\n+        this.classPathEntries = classPath;\n+        //We need context to get a temporary folder to store our extracted dex files.\n+        this.targetContext = targetContext;\n+    }\n+\n+    @Override\n+    @VisibleForTesting\n+    //dalvik.system.DexFile\n+    @SuppressWarnings( {\"deprecation\", \"RedundantSuppression\"})\n+    Enumeration<String> getDexEntries(dalvik.system.DexFile dexFile) {\n+        List<String> ret = new ArrayList<>();\n+        String absolutePath = targetContext.getCacheDir().getAbsolutePath();\n+\n+        for (String classPath : classPathEntries) {\n+            for (String dexPath: extractDexFilesFromApk(classPath, absolutePath)) {\n+                List<String> classes = extractClassesFromDexPath(dexPath);\n+                ret.addAll(classes);\n+            }\n+        }\n+\n+        return Collections.enumeration(ret);\n+    }\n+\n+\n+    private List<String> extractClassesFromDexPath(String dexPath) {\n+        List<String> ret = new ArrayList<>();\n+        try {\n+            DexBackedDexFile dex = DexFileFactory.loadDexFile(dexPath, Build.VERSION.SDK_INT);\n+            for (ClassDef classDef: dex.getClasses()) {\n+                String typeName = extractTypeNameFromDef(classDef);\n+                ret.add(typeName);\n+            }\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(e.getLocalizedMessage(), e);\n+        }\n+        return ret;\n+    }\n+\n+\n+    /**\n+     * @param classDef The class definition to extract the name from\n+     * @return A classname in the form: java.util.scanner\n+     */\n+    @NonNull\n+    private String extractTypeNameFromDef(ClassDef classDef) {\n+        String type = classDef.getType();\n+        //classes are inconsistently named: https://stackoverflow.com/a/11350724\n+        //Assumed structure: Ljava/lang/String;\n+        if (!type.startsWith(\"L\") || !type.endsWith(\";\")) {\n+            throw new IllegalArgumentException(\"Unhandled class type: \" + type);\n+        }\n+        type = type.substring(1, type.length() - 1); //trim suffix and prefix\n+        type = type.replace('/', '.');\n+        return type;\n+    }\n+\n+\n+    private List<String> extractDexFilesFromApk(String path, String targetDirectory) {\n+        //Modified from Utils.unzipFiles\n+        ZipFile zip;\n+        try {\n+            zip = new ZipFile(new File(path), ZipFile.OPEN_READ);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);", "originalCommit": "0d8436d14c6308adb813a6d792d054576e44873c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NTc0MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6293#discussion_r432845741", "bodyText": "Issue found: Avoid throwing raw exception types.", "author": "timrae", "createdAt": "2020-05-30T14:27:45Z", "path": "AnkiDroid/src/androidTest/java/androidx/test/internal/runner/MultiDexClassPathScanner.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package androidx.test.internal.runner;\n+\n+import android.content.Context;\n+import android.os.Build;\n+\n+import com.ichi2.libanki.Utils;\n+\n+import org.jf.dexlib2.DexFileFactory;\n+import org.jf.dexlib2.dexbacked.DexBackedDexFile;\n+import org.jf.dexlib2.iface.ClassDef;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.VisibleForTesting;\n+import timber.log.Timber;\n+\n+/**\n+ * This class exists as I could get MultiDex working, but ClassPathScanner uses new DexFile(),\n+ * which only loads the classes from classes.dex in Android < 21. MultiDex.install() fixes the class loader,\n+ * but since we don't return all the class names from the dex, we don't see these as potential test classes to filter.\n+ **/\n+class MultiDexClassPathScanner extends ClassPathScanner {\n+    private final List<String> classPathEntries;\n+    private final Context targetContext;\n+\n+    public MultiDexClassPathScanner(List<String> classPath, Context targetContext) {\n+        super(classPath);\n+        //There's no accessor in the base class.\n+        this.classPathEntries = classPath;\n+        //We need context to get a temporary folder to store our extracted dex files.\n+        this.targetContext = targetContext;\n+    }\n+\n+    @Override\n+    @VisibleForTesting\n+    //dalvik.system.DexFile\n+    @SuppressWarnings( {\"deprecation\", \"RedundantSuppression\"})\n+    Enumeration<String> getDexEntries(dalvik.system.DexFile dexFile) {\n+        List<String> ret = new ArrayList<>();\n+        String absolutePath = targetContext.getCacheDir().getAbsolutePath();\n+\n+        for (String classPath : classPathEntries) {\n+            for (String dexPath: extractDexFilesFromApk(classPath, absolutePath)) {\n+                List<String> classes = extractClassesFromDexPath(dexPath);\n+                ret.addAll(classes);\n+            }\n+        }\n+\n+        return Collections.enumeration(ret);\n+    }\n+\n+\n+    private List<String> extractClassesFromDexPath(String dexPath) {\n+        List<String> ret = new ArrayList<>();\n+        try {\n+            DexBackedDexFile dex = DexFileFactory.loadDexFile(dexPath, Build.VERSION.SDK_INT);\n+            for (ClassDef classDef: dex.getClasses()) {\n+                String typeName = extractTypeNameFromDef(classDef);\n+                ret.add(typeName);\n+            }\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(e.getLocalizedMessage(), e);", "originalCommit": "0d8436d14c6308adb813a6d792d054576e44873c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}